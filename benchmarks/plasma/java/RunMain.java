import java.lang.Math;
import java.util.HashMap;
import java.util.HashSet;


public class RunMain {
 
	
public static void main(String[] args) {
		Program.runMain(0);
	}
}
class Program   {	public static final int myUniquePlacePoint = 0;
 
public static final HashMap<Integer, HashSet<Integer>> globalPointerHashMap = new HashMap<Integer, HashSet<Integer>>(4);final static int maxPlaces = 4; 
 static {for(int i =0; i <maxPlaces; ++i){globalPointerHashMap.put(i, new HashSet<Integer>());}}

 
public static final int _LinearESOpenPIC2D_NUMBER_OF_XBITS = Program._LinearESOpenPIC2D_NUMBER_OF_XBITS_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_NUMBER_OF_YBITS = Program._LinearESOpenPIC2D_NUMBER_OF_YBITS_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_PARTICLE_XDENSITY = Program._LinearESOpenPIC2D_PARTICLE_XDENSITY_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_PARTICLE_YDENSITY = Program._LinearESOpenPIC2D_PARTICLE_YDENSITY_init(myUniquePlacePoint);
public static final double _LinearESOpenPIC2D_DELTA_TIME = Program._LinearESOpenPIC2D_DELTA_TIME_init(myUniquePlacePoint);
public static final double _LinearESOpenPIC2D_ELECTRON_CHARGE = Program._LinearESOpenPIC2D_ELECTRON_CHARGE_init(myUniquePlacePoint);
public static final double _LinearESOpenPIC2D_THERMAL_XVELOCITY = Program._LinearESOpenPIC2D_THERMAL_XVELOCITY_init(myUniquePlacePoint);
public static final double _LinearESOpenPIC2D_THERMAL_YVELOCITY = Program._LinearESOpenPIC2D_THERMAL_YVELOCITY_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_BOUNDARY_CONDITION = Program._LinearESOpenPIC2D_BOUNDARY_CONDITION_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_TIME_STEPS = Program._LinearESOpenPIC2D_TIME_STEPS_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_SORT_TIME = Program._LinearESOpenPIC2D_SORT_TIME_init(myUniquePlacePoint);
public static final double _LinearESOpenPIC2D_IMBALANCE = Program._LinearESOpenPIC2D_IMBALANCE_init(myUniquePlacePoint);
public static final double _PoissonSolver_PI4I = Program._PoissonSolver_PI4I_init(myUniquePlacePoint);
public static final double _PoissonSolver_SQT2I = Program._PoissonSolver_SQT2I_init(myUniquePlacePoint);
public static final double _PoissonSolver_SQT2PI = Program._PoissonSolver_SQT2PI_init(myUniquePlacePoint);
public static final int _PoissonSolver_GREENS_IDX = Program._PoissonSolver_GREENS_IDX_init(myUniquePlacePoint);
public static final int _PoissonSolver_SHAPE_IDX = Program._PoissonSolver_SHAPE_IDX_init(myUniquePlacePoint);
public static final int _PoissonSolver_ELECX_IDX = Program._PoissonSolver_ELECX_IDX_init(myUniquePlacePoint);
public static final int _PoissonSolver_ELECY_IDX = Program._PoissonSolver_ELECY_IDX_init(myUniquePlacePoint);
public static final double _PoissonSolver_AR = Program._PoissonSolver_AR_init(myUniquePlacePoint);
public static final int _Timer_max_counters = Program._Timer_max_counters_init(myUniquePlacePoint);
public static final boolean _X10Util_DEBUG = Program._X10Util_DEBUG_init(myUniquePlacePoint);
public static final boolean _X10Util_ENABLE_CHECKS = Program._X10Util_ENABLE_CHECKS_init(myUniquePlacePoint);
public static final double _X10Util_ERROR = Program._X10Util_ERROR_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_XLENGTH = Program._LinearESOpenPIC2D_XLENGTH_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_YLENGTH = Program._LinearESOpenPIC2D_YLENGTH_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_NPARTICLES = Program._LinearESOpenPIC2D_NPARTICLES_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS = Program._LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX = Program._LinearESOpenPIC2D_MOVE_PARTICLES_MAX_init(myUniquePlacePoint);
public static final int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER = Program._LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER_init(myUniquePlacePoint);


public static ComplexRefArray2 ArrayUtil_doubleToComplex ( final doubleRefArray2 src, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = src.distValue;


		final Region2 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region2 rSrc = RX10_TEMP1;


		final int X10_TEMP4 = 1;


		final Region1 rS2 = Program.X10Util_getRank2D(rSrc, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP6 = rS2.regSize;


		final int X10_TEMP7 = 2;


		final int X10_TEMP8 = X10_TEMP6 % X10_TEMP7;


		final int X10_TEMP9 = 0;


		final boolean X10_TEMP11 = X10_TEMP8 != X10_TEMP9;

		if(X10_TEMP11)
			{

			final String X10_TEMP12 = "Error: doubleToComplex requires the second ";


			final String X10_TEMP13 = "dimension to be of even size";


			final String X10_TEMP15 = X10_TEMP12 + X10_TEMP13;

			System.err.println(X10_TEMP15);

			final int X10_TEMP16 = 0;


			final int X10_TEMP17 = 1;


			final int X10_TEMP18 = X10_TEMP16 - X10_TEMP17;


			final Region2 X10_TEMP19 = Program.createNewRegion2RR(X10_TEMP16, X10_TEMP18, X10_TEMP16, X10_TEMP18,myUniquePlacePoint);


			final int X10_TEMP20 = 0;


			final Dist2 X10_TEMP22 = Program.getPlaceDist2(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


			final Dist2 dResult = X10_TEMP22;


			final Region2 RX10_TEMP2 = dResult.dReg;


			final int RX10_TEMP3 = 0;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP5 = 1;


			RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4;


			final int  RX10_TEMP6 = RX10_TEMP5+1;


			final int RX10_TEMP7 = RX10_TEMP5+1;


			final ComplexStub[] RX10_TEMP8 = new ComplexStub[RX10_TEMP7];

			/*FINISH
*/				{
				for(int RX10_TEMP9=0; RX10_TEMP9 < RX10_TEMP6; RX10_TEMP9++)
					{

					final int RX10_TEMP10 = 0;


					final int RX10_TEMP11 = RX10_TEMP9;


					final int RX10_TEMP12 = 0;


					final int RX10_TEMP13 = Program.getDistLocalCount2(dResult, RX10_TEMP11,myUniquePlacePoint);


					final int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4;

					//async(RX10_TEMP12)
						{

						final int RX10_TEMP15 = RX10_TEMP14+1;


						final Complex[] RX10_TEMP16 = new Complex[RX10_TEMP15];


						final ComplexStub RX10_TEMP17 = new ComplexStub(RX10_TEMP16,RX10_TEMP12);
						
Program.globalPointerHashMap.get(RX10_TEMP12).add(RX10_TEMP17.hashCode());

						//async(RX10_TEMP10)
							{
							RX10_TEMP8[RX10_TEMP9] = RX10_TEMP17;
							}
						}
					}
				}

			final ComplexStub[] RX10_TEMP18 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP6]);
/*arrayInitBlock*/
for(int RX10_TEMP20= 0;RX10_TEMP20 <RX10_TEMP18.length ;RX10_TEMP20++ )				{

				final ComplexStub RX10_TEMP19 = RX10_TEMP8[RX10_TEMP20];

				RX10_TEMP18[RX10_TEMP20] =RX10_TEMP19;
				}

;


			final ComplexRefArray2 RX10_TEMP21 = new ComplexRefArray2(dResult, RX10_TEMP18,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP21.hashCode());


			final ComplexRefArray2 X10_TEMP25 = RX10_TEMP21;

			return X10_TEMP25;
			}

		final int X10_TEMP32 = 0;


		final int X10_TEMP27 = rS2.regSize;


		final int X10_TEMP28 = 2;


		final int X10_TEMP29 = X10_TEMP27 / X10_TEMP28;


		final int X10_TEMP30 = 1;


		final int X10_TEMP33 = X10_TEMP29 - X10_TEMP30;


		final Region1 rD2 = Program.createNewRegion1R(X10_TEMP32, X10_TEMP33,myUniquePlacePoint);


		final Dist2 RX10_TEMP22 = src.distValue;


		final Dist2 dSrc = RX10_TEMP22;


		final int X10_TEMP38 = 0;


		final Dist1 X10_TEMP41 = Program.X10Util_get2DDistRank(dSrc, X10_TEMP38,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_extendDistRank2D(X10_TEMP41, rD2,myUniquePlacePoint);


		final Region2 RX10_TEMP23 = dResult.dReg;


		final int RX10_TEMP24 = 0;


		final int RX10_TEMP25 = 1;


		int RX10_TEMP26 = 1;


		RX10_TEMP26 = RX10_TEMP26 - RX10_TEMP25;


		final int  RX10_TEMP27 = RX10_TEMP26+1;


		final int RX10_TEMP28 = RX10_TEMP26+1;


		final ComplexStub[] RX10_TEMP29 = new ComplexStub[RX10_TEMP28];

		/*FINISH
*/			{
			for(int RX10_TEMP30=0; RX10_TEMP30 < RX10_TEMP27; RX10_TEMP30++)
				{

				final int RX10_TEMP31 = 0;


				final int RX10_TEMP32 = RX10_TEMP30;


				final int RX10_TEMP33 = 0;


				final int RX10_TEMP34 = Program.getDistLocalCount2(dResult, RX10_TEMP32,myUniquePlacePoint);


				final int RX10_TEMP35 = RX10_TEMP34 - RX10_TEMP25;

				//async(RX10_TEMP33)
					{

					final int RX10_TEMP36 = RX10_TEMP35+1;


					final Complex[] RX10_TEMP37 = new Complex[RX10_TEMP36];


					final ComplexStub RX10_TEMP38 = new ComplexStub(RX10_TEMP37,RX10_TEMP33);
					
Program.globalPointerHashMap.get(RX10_TEMP33).add(RX10_TEMP38.hashCode());

					//async(RX10_TEMP31)
						{
						RX10_TEMP29[RX10_TEMP30] = RX10_TEMP38;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP39 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP27]);
/*arrayInitBlock*/
for(int RX10_TEMP41= 0;RX10_TEMP41 <RX10_TEMP39.length ;RX10_TEMP41++ )			{

			final ComplexStub RX10_TEMP40 = RX10_TEMP29[RX10_TEMP41];

			RX10_TEMP39[RX10_TEMP41] =RX10_TEMP40;
			}

;


		final ComplexRefArray2 RX10_TEMP42 = new ComplexRefArray2(dResult, RX10_TEMP39,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP42.hashCode());


		final ComplexRefArray2 result = RX10_TEMP42;

		/*FINISH
*/			{

			final Region2 RX10_TEMP44 = dResult.dReg;


			final int RX10_TEMP47 = 1;


			int RX10_TEMP45 = RX10_TEMP44.regSize;


			RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP47;


			final int  RX10_TEMP46 = RX10_TEMP45+1;

			for(int RX10_TEMP43=0; RX10_TEMP43 < RX10_TEMP46; RX10_TEMP43++)
				{

				final int RX10_TEMP48 = RX10_TEMP43;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP44, RX10_TEMP48,myUniquePlacePoint);


				final Region2 RX10_TEMP49 = dResult.dReg;


				final int RX10_TEMP50 = Program.searchPointInRegion2(RX10_TEMP49, pt,myUniquePlacePoint);


				final int RX10_TEMP51 = 0;


				final boolean RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51;

				if(RX10_TEMP52)
					{

					final String RX10_TEMP53 = "Point pt not found in the distribution dResult.";

					throw new RuntimeException(RX10_TEMP53);

					}

				final int RX10_TEMP54 = Program.getPlaceFromDist2(dResult, RX10_TEMP50,myUniquePlacePoint);


				final int X10_TEMP45 = RX10_TEMP54;

				//async(X10_TEMP45)
					{

					int X10_TEMP49 = 1;


					int X10_TEMP50 = 2;


					int RX10_TEMP55 = pt.f0;


					int RX10_TEMP56 = pt.f1;


					RX10_TEMP55 = RX10_TEMP55 * X10_TEMP49;


					RX10_TEMP56 = RX10_TEMP56 * X10_TEMP50;


					final Point2 X10_TEMP52 = new Point2(RX10_TEMP55, RX10_TEMP56,X10_TEMP45);
					
Program.globalPointerHashMap.get(X10_TEMP45).add(X10_TEMP52.hashCode());


					final Dist2 RX10_TEMP57 = src.distValue;


					final Region2 RX10_TEMP58 = RX10_TEMP57.dReg;


					final int RX10_TEMP59 = Program.searchPointInRegion2(RX10_TEMP58, X10_TEMP52,X10_TEMP45);


					final int RX10_TEMP60 = 0;


					final boolean RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60;

					if(RX10_TEMP61)
						{

						String RX10_TEMP62 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP62);

						}

					final int RX10_TEMP63 = Program.getPlaceFromDist2(RX10_TEMP57, RX10_TEMP59,X10_TEMP45);


					final int RX10_TEMP65 = 0;


					final boolean RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65;

					if(RX10_TEMP66)
						{

						String RX10_TEMP64 = "Bad place access for array src";

						throw new RuntimeException(RX10_TEMP64);

						}

					final double RX10_TEMP67 = Program.getRefArrayValue2double(src, RX10_TEMP59,X10_TEMP45);


					double X10_TEMP66 = RX10_TEMP67;


					int X10_TEMP56 = 1;


					int X10_TEMP57 = 2;


					int RX10_TEMP68 = pt.f0;


					int RX10_TEMP69 = pt.f1;


					RX10_TEMP68 = RX10_TEMP68 * X10_TEMP56;


					RX10_TEMP69 = RX10_TEMP69 * X10_TEMP57;


					final Point2 X10_TEMP60 = new Point2(RX10_TEMP68, RX10_TEMP69,X10_TEMP45);
					
Program.globalPointerHashMap.get(X10_TEMP45).add(X10_TEMP60.hashCode());


					int X10_TEMP61 = 0;


					int X10_TEMP62 = 1;


					int RX10_TEMP70 = X10_TEMP60.f0;


					int RX10_TEMP71 = X10_TEMP60.f1;


					RX10_TEMP70 = RX10_TEMP70 + X10_TEMP61;


					RX10_TEMP71 = RX10_TEMP71 + X10_TEMP62;


					final Point2 X10_TEMP64 = new Point2(RX10_TEMP70, RX10_TEMP71,X10_TEMP45);
					
Program.globalPointerHashMap.get(X10_TEMP45).add(X10_TEMP64.hashCode());


					final Dist2 RX10_TEMP72 = src.distValue;


					final Region2 RX10_TEMP73 = RX10_TEMP72.dReg;


					final int RX10_TEMP74 = Program.searchPointInRegion2(RX10_TEMP73, X10_TEMP64,X10_TEMP45);


					final int RX10_TEMP75 = 0;


					final boolean RX10_TEMP76 = RX10_TEMP74 < RX10_TEMP75;

					if(RX10_TEMP76)
						{

						String RX10_TEMP77 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP77);

						}

					final int RX10_TEMP78 = Program.getPlaceFromDist2(RX10_TEMP72, RX10_TEMP74,X10_TEMP45);


					final int RX10_TEMP80 = 0;


					final boolean RX10_TEMP81 = RX10_TEMP78 != RX10_TEMP80;

					if(RX10_TEMP81)
						{

						String RX10_TEMP79 = "Bad place access for array src";

						throw new RuntimeException(RX10_TEMP79);

						}

					final double RX10_TEMP82 = Program.getRefArrayValue2double(src, RX10_TEMP74,X10_TEMP45);


					double X10_TEMP67 = RX10_TEMP82;


					final Complex X10_TEMP70 = new Complex(X10_TEMP66, X10_TEMP67,X10_TEMP45);
					
Program.globalPointerHashMap.get(X10_TEMP45).add(X10_TEMP70.hashCode());


					final Complex X10_TEMP71 = X10_TEMP70;


					final Dist2 RX10_TEMP83 = result.distValue;


					final Region2 RX10_TEMP84 = RX10_TEMP83.dReg;


					final int RX10_TEMP85 = Program.searchPointInRegion2(RX10_TEMP84, pt,X10_TEMP45);


					final int RX10_TEMP86 = 0;


					final boolean RX10_TEMP87 = RX10_TEMP85 < RX10_TEMP86;

					if(RX10_TEMP87)
						{

						String RX10_TEMP88 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP88);

						}

					final int RX10_TEMP89 = Program.getPlaceFromDist2(RX10_TEMP83, RX10_TEMP85,X10_TEMP45);


					final int RX10_TEMP91 = 0;


					final boolean RX10_TEMP92 = RX10_TEMP89 != RX10_TEMP91;

					if(RX10_TEMP92)
						{

						String RX10_TEMP90 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP90);

						}
					Program.setRefArrayValue2Complex(result, RX10_TEMP85, X10_TEMP71,X10_TEMP45);
					}
				}
			}
		return result;
		}
public static doubleRefArray2 ArrayUtil_complexToDouble ( final ComplexRefArray2 src, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = src.distValue;


		final Region2 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region2 rSrc = RX10_TEMP1;


		final int X10_TEMP4 = 1;


		final Region1 rS2 = Program.X10Util_getRank2D(rSrc, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP12 = 0;


		final int X10_TEMP7 = 2;


		final int X10_TEMP8 = rS2.regSize;


		final int X10_TEMP9 = X10_TEMP7 * X10_TEMP8;


		final int X10_TEMP10 = 1;


		final int X10_TEMP13 = X10_TEMP9 - X10_TEMP10;


		final Region1 rD2 = Program.createNewRegion1R(X10_TEMP12, X10_TEMP13,myUniquePlacePoint);


		final Dist2 RX10_TEMP2 = src.distValue;


		final Dist2 dSrc = RX10_TEMP2;


		final int X10_TEMP18 = 0;


		final Dist1 X10_TEMP21 = Program.X10Util_get2DDistRank(dSrc, X10_TEMP18,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_extendDistRank2D(X10_TEMP21, rD2,myUniquePlacePoint);


		final Region2 RX10_TEMP3 = dResult.dReg;


		final int RX10_TEMP4 = 0;


		final int RX10_TEMP5 = 1;


		int RX10_TEMP6 = 1;


		RX10_TEMP6 = RX10_TEMP6 - RX10_TEMP5;


		final int  RX10_TEMP7 = RX10_TEMP6+1;


		final int RX10_TEMP8 = RX10_TEMP6+1;


		final doubleStub[] RX10_TEMP9 = new doubleStub[RX10_TEMP8];

		/*FINISH
*/			{
			for(int RX10_TEMP10=0; RX10_TEMP10 < RX10_TEMP7; RX10_TEMP10++)
				{

				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = RX10_TEMP10;


				final int RX10_TEMP13 = 0;


				final int RX10_TEMP14 = Program.getDistLocalCount2(dResult, RX10_TEMP12,myUniquePlacePoint);


				final int RX10_TEMP15 = RX10_TEMP14 - RX10_TEMP5;

				//async(RX10_TEMP13)
					{

					final int RX10_TEMP16 = RX10_TEMP15+1;


					final double[] RX10_TEMP17 = new double[RX10_TEMP16];


					final doubleStub RX10_TEMP18 = new doubleStub(RX10_TEMP17,RX10_TEMP13);
					
Program.globalPointerHashMap.get(RX10_TEMP13).add(RX10_TEMP18.hashCode());

					//async(RX10_TEMP11)
						{
						RX10_TEMP9[RX10_TEMP10] = RX10_TEMP18;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP19 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP7]);
/*arrayInitBlock*/
for(int RX10_TEMP21= 0;RX10_TEMP21 <RX10_TEMP19.length ;RX10_TEMP21++ )			{

			final doubleStub RX10_TEMP20 = RX10_TEMP9[RX10_TEMP21];

			RX10_TEMP19[RX10_TEMP21] =RX10_TEMP20;
			}

;


		final doubleRefArray2 RX10_TEMP22 = new doubleRefArray2(dResult, RX10_TEMP19,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP22.hashCode());


		final doubleRefArray2 result = RX10_TEMP22;

		/*FINISH
*/			{

			final Region2 RX10_TEMP24 = dResult.dReg;


			final int RX10_TEMP27 = 1;


			int RX10_TEMP25 = RX10_TEMP24.regSize;


			RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27;


			final int  RX10_TEMP26 = RX10_TEMP25+1;

			for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP26; RX10_TEMP23++)
				{

				final int RX10_TEMP28 = RX10_TEMP23;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP24, RX10_TEMP28,myUniquePlacePoint);


				final Region2 RX10_TEMP29 = dResult.dReg;


				final int RX10_TEMP30 = Program.searchPointInRegion2(RX10_TEMP29, pt,myUniquePlacePoint);


				final int RX10_TEMP31 = 0;


				final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

				if(RX10_TEMP32)
					{

					final String RX10_TEMP33 = "Point pt not found in the distribution dResult.";

					throw new RuntimeException(RX10_TEMP33);

					}

				final int RX10_TEMP34 = Program.getPlaceFromDist2(dResult, RX10_TEMP30,myUniquePlacePoint);


				final int X10_TEMP25 = RX10_TEMP34;

				//async(X10_TEMP25)
					{

					int X10_TEMP28 = 1;


					int X10_TEMP29 = 2;


					int RX10_TEMP35 = pt.f0;


					int RX10_TEMP36 = pt.f1;


					RX10_TEMP35 = RX10_TEMP35 / X10_TEMP28;


					RX10_TEMP36 = RX10_TEMP36 / X10_TEMP29;


					final Point2 ptd2 = new Point2(RX10_TEMP35, RX10_TEMP36,X10_TEMP25);
					
Program.globalPointerHashMap.get(X10_TEMP25).add(ptd2.hashCode());


					final int X10_TEMP32 = pt.f1;


					final int X10_TEMP33 = 2;


					final int X10_TEMP34 = X10_TEMP32 % X10_TEMP33;


					final int X10_TEMP35 = 0;


					final boolean X10_TEMP37 = X10_TEMP34 == X10_TEMP35;

					if(X10_TEMP37)
						{

						final Dist2 RX10_TEMP37 = src.distValue;


						final Region2 RX10_TEMP38 = RX10_TEMP37.dReg;


						final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, ptd2,X10_TEMP25);


						final int RX10_TEMP40 = 0;


						final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

						if(RX10_TEMP41)
							{

							String RX10_TEMP42 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP42);

							}

						final int RX10_TEMP43 = Program.getPlaceFromDist2(RX10_TEMP37, RX10_TEMP39,X10_TEMP25);


						final int RX10_TEMP45 = 0;


						final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

						if(RX10_TEMP46)
							{

							String RX10_TEMP44 = "Bad place access for array src";

							throw new RuntimeException(RX10_TEMP44);

							}

						final Complex RX10_TEMP47 = Program.getRefArrayValue2Complex(src, RX10_TEMP39,X10_TEMP25);


						final Complex X10_TEMP40 = RX10_TEMP47;


						final double X10_TEMP43 = Program.Complex_getReal(X10_TEMP40,X10_TEMP25);


						final double X10_TEMP44 = X10_TEMP43;


						final Dist2 RX10_TEMP48 = result.distValue;


						final Region2 RX10_TEMP49 = RX10_TEMP48.dReg;


						final int RX10_TEMP50 = Program.searchPointInRegion2(RX10_TEMP49, pt,X10_TEMP25);


						final int RX10_TEMP51 = 0;


						final boolean RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51;

						if(RX10_TEMP52)
							{

							String RX10_TEMP53 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP53);

							}

						final int RX10_TEMP54 = Program.getPlaceFromDist2(RX10_TEMP48, RX10_TEMP50,X10_TEMP25);


						final int RX10_TEMP56 = 0;


						final boolean RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56;

						if(RX10_TEMP57)
							{

							String RX10_TEMP55 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP55);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP50, X10_TEMP44,X10_TEMP25);
						}
					else
						{

						final Dist2 RX10_TEMP58 = src.distValue;


						final Region2 RX10_TEMP59 = RX10_TEMP58.dReg;


						final int RX10_TEMP60 = Program.searchPointInRegion2(RX10_TEMP59, ptd2,X10_TEMP25);


						final int RX10_TEMP61 = 0;


						final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

						if(RX10_TEMP62)
							{

							String RX10_TEMP63 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP63);

							}

						final int RX10_TEMP64 = Program.getPlaceFromDist2(RX10_TEMP58, RX10_TEMP60,X10_TEMP25);


						final int RX10_TEMP66 = 0;


						final boolean RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66;

						if(RX10_TEMP67)
							{

							String RX10_TEMP65 = "Bad place access for array src";

							throw new RuntimeException(RX10_TEMP65);

							}

						final Complex RX10_TEMP68 = Program.getRefArrayValue2Complex(src, RX10_TEMP60,X10_TEMP25);


						final Complex X10_TEMP47 = RX10_TEMP68;


						final double X10_TEMP50 = Program.Complex_getImag(X10_TEMP47,X10_TEMP25);


						final double X10_TEMP51 = X10_TEMP50;


						final Dist2 RX10_TEMP69 = result.distValue;


						final Region2 RX10_TEMP70 = RX10_TEMP69.dReg;


						final int RX10_TEMP71 = Program.searchPointInRegion2(RX10_TEMP70, pt,X10_TEMP25);


						final int RX10_TEMP72 = 0;


						final boolean RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72;

						if(RX10_TEMP73)
							{

							String RX10_TEMP74 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP74);

							}

						final int RX10_TEMP75 = Program.getPlaceFromDist2(RX10_TEMP69, RX10_TEMP71,X10_TEMP25);


						final int RX10_TEMP77 = 0;


						final boolean RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77;

						if(RX10_TEMP78)
							{

							String RX10_TEMP76 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP76);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP71, X10_TEMP51,X10_TEMP25);
						}
 					}
				}
			}
		return result;
		}
public static ComplexRefArray2 ArrayUtil_transpose ( final ComplexRefArray2 data, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = data.distValue;


		final Dist2 X10_TEMP1 = RX10_TEMP0;


		final Dist2 dData = X10_TEMP1;


		final boolean X10_TEMP4 = Program.X10Util_isDistBlockStar(dData,myUniquePlacePoint);


		final boolean X10_TEMP6 = ! X10_TEMP4;

		if(X10_TEMP6)
			{

			final String X10_TEMP7 = "Transpose only works on star block";


			final String X10_TEMP8 = "distributed arrays";


			final String X10_TEMP10 = X10_TEMP7 + X10_TEMP8;

			Program.X10Util_println(X10_TEMP10,myUniquePlacePoint);

			final String X10_TEMP11 = "transpose: ";


			final Dist2 RX10_TEMP1 = data.distValue;


			final Dist2 X10_TEMP12 = RX10_TEMP1;


			final String RX10_TEMP2 = Program.toStringDist2(X10_TEMP12,myUniquePlacePoint);


			final String X10_TEMP14 = X10_TEMP11 + RX10_TEMP2;

			throw new RuntimeException(X10_TEMP14);

			}

		final Dist2 dResult = Program.X10Util_transposeBlockStar(dData,myUniquePlacePoint);


		final Region2 RX10_TEMP3 = dResult.dReg;


		final int RX10_TEMP4 = 0;


		final int RX10_TEMP5 = 1;


		int RX10_TEMP6 = 1;


		RX10_TEMP6 = RX10_TEMP6 - RX10_TEMP5;


		final int  RX10_TEMP7 = RX10_TEMP6+1;


		final int RX10_TEMP8 = RX10_TEMP6+1;


		final ComplexStub[] RX10_TEMP9 = new ComplexStub[RX10_TEMP8];

		/*FINISH
*/			{
			for(int RX10_TEMP10=0; RX10_TEMP10 < RX10_TEMP7; RX10_TEMP10++)
				{

				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = RX10_TEMP10;


				final int RX10_TEMP13 = 0;


				final int RX10_TEMP14 = Program.getDistLocalCount2(dResult, RX10_TEMP12,myUniquePlacePoint);


				final int RX10_TEMP15 = RX10_TEMP14 - RX10_TEMP5;

				//async(RX10_TEMP13)
					{

					final int RX10_TEMP16 = RX10_TEMP15+1;


					final Complex[] RX10_TEMP17 = new Complex[RX10_TEMP16];


					final ComplexStub RX10_TEMP18 = new ComplexStub(RX10_TEMP17,RX10_TEMP13);
					
Program.globalPointerHashMap.get(RX10_TEMP13).add(RX10_TEMP18.hashCode());

					//async(RX10_TEMP11)
						{
						RX10_TEMP9[RX10_TEMP10] = RX10_TEMP18;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP19 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP7]);
/*arrayInitBlock*/
for(int RX10_TEMP21= 0;RX10_TEMP21 <RX10_TEMP19.length ;RX10_TEMP21++ )			{

			final ComplexStub RX10_TEMP20 = RX10_TEMP9[RX10_TEMP21];

			RX10_TEMP19[RX10_TEMP21] =RX10_TEMP20;
			}

;


		final ComplexRefArray2 RX10_TEMP22 = new ComplexRefArray2(dResult, RX10_TEMP19,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP22.hashCode());


		final ComplexRefArray2 result = RX10_TEMP22;

		/*FINISH
*/			{

			final Dist1 X10_TEMP19 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP24 = X10_TEMP19.dReg;


			final int RX10_TEMP27 = 1;


			int RX10_TEMP25 = RX10_TEMP24.regSize;


			RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27;


			final int  RX10_TEMP26 = RX10_TEMP25+1;

			for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP26; RX10_TEMP23++)
				{

				final int RX10_TEMP28 = RX10_TEMP23;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP24, RX10_TEMP28,myUniquePlacePoint);


				final Region1 RX10_TEMP29 = X10_TEMP19.dReg;


				final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pl,myUniquePlacePoint);


				final int RX10_TEMP31 = 0;


				final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

				if(RX10_TEMP32)
					{

					final String RX10_TEMP33 = "Point pl not found in the distribution X10_TEMP19.";

					throw new RuntimeException(RX10_TEMP33);

					}

				final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP19, RX10_TEMP30,myUniquePlacePoint);


				final int X10_TEMP20 = RX10_TEMP34;

				//async(X10_TEMP20)
					{

					final Region2 rLocal = Program.X10Util_get2DLRegion(dData,X10_TEMP20);


					final Region2 rTtmp = Program.X10Util_transposeRegion(rLocal,X10_TEMP20);


					final int X10_TEMP25 = rLocal.regSize;


					final int X10_TEMP26 = 0;


					final boolean X10_TEMP28 = X10_TEMP25 > X10_TEMP26;

					if(X10_TEMP28)
						{

						final int X10_TEMP31 = 0;


						final Region1 rTtmp1 = Program.X10Util_getRank2D(rTtmp, X10_TEMP31,X10_TEMP20);


						final int X10_TEMP35 = 1;


						final Region1 rTtmp2 = Program.X10Util_getRank2D(rTtmp, X10_TEMP35,X10_TEMP20);


						final int RX10_TEMP35 = rTtmp1.regSize;


						final int RX10_TEMP36 = 0;


						final boolean RX10_TEMP37 = RX10_TEMP35 <= RX10_TEMP36;

						if(RX10_TEMP37)
							{

							final String RX10_TEMP38 = "Operation low() not defined on empty region rTtmp1";

							throw new RuntimeException(RX10_TEMP38);

							}

						final int X10_TEMP39 = Program.regionLow(rTtmp1,X10_TEMP20);


						final int RX10_TEMP39 = rTtmp1.regSize;


						final int RX10_TEMP40 = 0;


						final boolean RX10_TEMP41 = RX10_TEMP39 <= RX10_TEMP40;

						if(RX10_TEMP41)
							{

							final String RX10_TEMP42 = "Operation high() not defined on empty region rTtmp1";

							throw new RuntimeException(RX10_TEMP42);

							}

						final int X10_TEMP40 = Program.regionHigh(rTtmp1,X10_TEMP20);


						final int RX10_TEMP43 = rTtmp2.regSize;


						final int RX10_TEMP44 = 0;


						final boolean RX10_TEMP45 = RX10_TEMP43 <= RX10_TEMP44;

						if(RX10_TEMP45)
							{

							final String RX10_TEMP46 = "Operation low() not defined on empty region rTtmp2";

							throw new RuntimeException(RX10_TEMP46);

							}

						final int X10_TEMP43 = Program.regionLow(rTtmp2,X10_TEMP20);


						final int RX10_TEMP47 = rTtmp2.regSize;


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP47 <= RX10_TEMP48;

						if(RX10_TEMP49)
							{

							final String RX10_TEMP50 = "Operation high() not defined on empty region rTtmp2";

							throw new RuntimeException(RX10_TEMP50);

							}

						final int X10_TEMP44 = Program.regionHigh(rTtmp2,X10_TEMP20);


						final Region2 rLocalT = Program.createNewRegion2RR(X10_TEMP39, X10_TEMP40, X10_TEMP43, X10_TEMP44,X10_TEMP20);


						final Dist1 X10_TEMP46 = Program.getUniqueDist(X10_TEMP20);


						final Region1 RX10_TEMP51 = X10_TEMP46.dReg;


						final Region1 X10_TEMP47 = RX10_TEMP51;


						final Region1 rRSBuffer = X10_TEMP47;


						final Region1 RX10_TEMP52 = rRSBuffer;


						final int RX10_TEMP69 = rRSBuffer.regSize;


						final int RX10_TEMP70 = 1;


						final int RX10_TEMP71 = RX10_TEMP69 - RX10_TEMP70;


						final int  RX10_TEMP68 = RX10_TEMP71+1;


						final Region2[] RX10_TEMP72 = (Region2[])(new Region2/*value*/[RX10_TEMP68]);
/*arrayInitBlock*/
for(int RX10_TEMP53= 0;RX10_TEMP53 <RX10_TEMP72.length ;RX10_TEMP53++ )							{

							final int RX10_TEMP54 = RX10_TEMP53;


							final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP52, RX10_TEMP54,X10_TEMP20);


							final Dist1 X10_TEMP49 = Program.getUniqueDist(X10_TEMP20);


							final Region1 RX10_TEMP55 = X10_TEMP49.dReg;


							final int RX10_TEMP56 = Program.searchPointInRegion1(RX10_TEMP55, p,X10_TEMP20);


							final int RX10_TEMP57 = 0;


							final boolean RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57;

							if(RX10_TEMP58)
								{

								final String RX10_TEMP59 = "Point p not found in the distribution X10_TEMP49.";

								throw new RuntimeException(RX10_TEMP59);

								}

							final int RX10_TEMP60 = Program.getPlaceFromDist1(X10_TEMP49, RX10_TEMP56,X10_TEMP20);


							final int X10_TEMP51 = RX10_TEMP60;


							final Dist2 X10_TEMP53 = Program.restrictDist2(dResult, X10_TEMP51,X10_TEMP20);


							final Region2 RX10_TEMP61 = X10_TEMP53.dReg;


							final Region2 X10_TEMP54 = RX10_TEMP61;


							final Region2 rTLocal = X10_TEMP54;


							final int X10_TEMP56 = 0;


							final int X10_TEMP57 = 1;


							final int X10_TEMP58 = X10_TEMP56 - X10_TEMP57;


							final int X10_TEMP59 = 0;


							Region2 X10_TEMP60 = Program.createNewRegion2RR(X10_TEMP56, X10_TEMP58, X10_TEMP56, X10_TEMP58,X10_TEMP20);


							final int RX10_TEMP65 = 1;


							int RX10_TEMP63 = rLocalT.regSize;


							RX10_TEMP63 = RX10_TEMP63 - RX10_TEMP65;


							final int  RX10_TEMP64 = RX10_TEMP63+1;

							for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP64; RX10_TEMP62++)
								{

								final int RX10_TEMP66 = RX10_TEMP62;


								final Point2 X10_TEMP61 = Program.regionOrdinalPoint2(rLocalT, RX10_TEMP66,X10_TEMP20);


								final int X10_TEMP62 = X10_TEMP61.f0;


								final int X10_TEMP63 = X10_TEMP61.f1;


								final boolean RX10_TEMP67 = Program.regionContainsPoint2(rTLocal, X10_TEMP61,X10_TEMP20);


								final boolean X10_TEMP64 = RX10_TEMP67;

								if(X10_TEMP64)
									{

									final Region2 X10_TEMP65 = Program.createNewRegion2RR(X10_TEMP62, X10_TEMP62, X10_TEMP63, X10_TEMP63,X10_TEMP20);


									X10_TEMP60 = Program.unionRegion2(X10_TEMP60, X10_TEMP65,X10_TEMP20);

									}
								}

							final Region2 X10_TEMP66 = X10_TEMP60;

							RX10_TEMP72[RX10_TEMP53] =X10_TEMP66;
							}

;


						final Region2ValArray1 RX10_TEMP73 = new Region2ValArray1(rRSBuffer, RX10_TEMP72,X10_TEMP20);
						
Program.globalPointerHashMap.get(X10_TEMP20).add(RX10_TEMP73.hashCode());


						final Region2ValArray1 X10_TEMP68 = RX10_TEMP73;


						final Region2ValArray1 rSBuffer = X10_TEMP68;


						final Region2 RX10_TEMP74 = rLocalT;


						final int RX10_TEMP91 = rLocalT.regSize;


						final int RX10_TEMP92 = 1;


						final int RX10_TEMP93 = RX10_TEMP91 - RX10_TEMP92;


						final int  RX10_TEMP90 = RX10_TEMP93+1;


						final Complex[] RX10_TEMP94 = (Complex[])(new Complex/*value*/[RX10_TEMP90]);
/*arrayInitBlock*/
for(int RX10_TEMP75= 0;RX10_TEMP75 <RX10_TEMP94.length ;RX10_TEMP75++ )							{

							final int RX10_TEMP77 = RX10_TEMP75;


							final Point2 RX10_TEMP76 = Program.regionOrdinalPoint2(RX10_TEMP74, RX10_TEMP77,X10_TEMP20);


							final int i = RX10_TEMP76.f0;


							final int j = RX10_TEMP76.f1;


							final Point2 RX10_TEMP78 = new Point2(j, i,X10_TEMP20);
							
Program.globalPointerHashMap.get(X10_TEMP20).add(RX10_TEMP78.hashCode());


							final Dist2 RX10_TEMP79 = data.distValue;


							final Region2 RX10_TEMP80 = RX10_TEMP79.dReg;


							final int RX10_TEMP81 = Program.searchPointInRegion2(RX10_TEMP80, RX10_TEMP78,X10_TEMP20);


							final int RX10_TEMP82 = 0;


							final boolean RX10_TEMP83 = RX10_TEMP81 < RX10_TEMP82;

							if(RX10_TEMP83)
								{

								String RX10_TEMP84 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP84);

								}

							final int RX10_TEMP85 = Program.getPlaceFromDist2(RX10_TEMP79, RX10_TEMP81,X10_TEMP20);


							final int RX10_TEMP87 = 0;


							final boolean RX10_TEMP88 = RX10_TEMP85 != RX10_TEMP87;

							if(RX10_TEMP88)
								{

								String RX10_TEMP86 = "Bad place access for array data";

								throw new RuntimeException(RX10_TEMP86);

								}

							final Complex RX10_TEMP89 = Program.getRefArrayValue2Complex(data, RX10_TEMP81,X10_TEMP20);


							final Complex X10_TEMP73 = RX10_TEMP89;

							RX10_TEMP94[RX10_TEMP75] =X10_TEMP73;
							}

;


						final ComplexValArray2 RX10_TEMP95 = new ComplexValArray2(rLocalT, RX10_TEMP94,X10_TEMP20);
						
Program.globalPointerHashMap.get(X10_TEMP20).add(RX10_TEMP95.hashCode());


						final ComplexValArray2 X10_TEMP74 = RX10_TEMP95;


						final ComplexValArray2 sBuffer = X10_TEMP74;


						final int X10_TEMP77 = 0;


						final Region1 RX10_TEMP97 = rSBuffer.regionValue;


						final int RX10_TEMP100 = 1;


						int RX10_TEMP98 = RX10_TEMP97.regSize;


						RX10_TEMP98 = RX10_TEMP98 - RX10_TEMP100;


						final int  RX10_TEMP99 = RX10_TEMP98+1;

						for(int RX10_TEMP96=0; RX10_TEMP96 < RX10_TEMP99; RX10_TEMP96++)
							{

							final int RX10_TEMP101 = RX10_TEMP96;


							final Point1 i = Program.regionOrdinalPoint1(RX10_TEMP97, RX10_TEMP101,X10_TEMP20);

							//async(X10_TEMP77)
								{

								final Region1 RX10_TEMP102 = rSBuffer.regionValue;


								final int RX10_TEMP103 = Program.searchPointInRegion1(RX10_TEMP102, i,X10_TEMP77);


								final int RX10_TEMP104 = 0;


								final boolean RX10_TEMP105 = RX10_TEMP103 < RX10_TEMP104;

								if(RX10_TEMP105)
									{

									String RX10_TEMP106 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP106);

									}

								final Region2[] RX10_TEMP107 = (Region2[])(rSBuffer.contents);


								final Region2 X10_TEMP81 = RX10_TEMP107[RX10_TEMP103];


								final Dist1 X10_TEMP79 = Program.getUniqueDist(X10_TEMP77);


								final Region1 RX10_TEMP108 = X10_TEMP79.dReg;


								final int RX10_TEMP109 = Program.searchPointInRegion1(RX10_TEMP108, i,X10_TEMP77);


								final int RX10_TEMP110 = 0;


								final boolean RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110;

								if(RX10_TEMP111)
									{

									final String RX10_TEMP112 = "Point i not found in the distribution X10_TEMP79.";

									throw new RuntimeException(RX10_TEMP112);

									}

								final int RX10_TEMP113 = Program.getPlaceFromDist1(X10_TEMP79, RX10_TEMP109,X10_TEMP77);


								final int X10_TEMP82 = RX10_TEMP113;


								final Dist2 X10_TEMP84 = Program.getPlaceDist2(X10_TEMP81, X10_TEMP82,X10_TEMP77);


								final Region2 RX10_TEMP115 = X10_TEMP84.dReg;


								final int RX10_TEMP118 = 1;


								int RX10_TEMP116 = RX10_TEMP115.regSize;


								RX10_TEMP116 = RX10_TEMP116 - RX10_TEMP118;


								final int  RX10_TEMP117 = RX10_TEMP116+1;

								for(int RX10_TEMP114=0; RX10_TEMP114 < RX10_TEMP117; RX10_TEMP114++)
									{

									final int RX10_TEMP119 = RX10_TEMP114;


									final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP115, RX10_TEMP119,X10_TEMP77);


									final Region2 RX10_TEMP120 = X10_TEMP84.dReg;


									final int RX10_TEMP121 = Program.searchPointInRegion2(RX10_TEMP120, pt,X10_TEMP77);


									final int RX10_TEMP122 = 0;


									final boolean RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122;

									if(RX10_TEMP123)
										{

										final String RX10_TEMP124 = "Point pt not found in the distribution X10_TEMP84.";

										throw new RuntimeException(RX10_TEMP124);

										}

									final int RX10_TEMP125 = Program.getPlaceFromDist2(X10_TEMP84, RX10_TEMP121,X10_TEMP77);


									final int X10_TEMP85 = RX10_TEMP125;

									//async(X10_TEMP85)
										{

										final Region2 RX10_TEMP126 = sBuffer.regionValue;


										final int RX10_TEMP127 = Program.searchPointInRegion2(RX10_TEMP126, pt,X10_TEMP85);


										final int RX10_TEMP128 = 0;


										final boolean RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128;

										if(RX10_TEMP129)
											{

											String RX10_TEMP130 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP130);

											}

										final Complex[] RX10_TEMP131 = (Complex[])(sBuffer.contents);


										final Complex X10_TEMP90 = RX10_TEMP131[RX10_TEMP127];


										final Complex X10_TEMP91 = X10_TEMP90;


										final Dist2 RX10_TEMP132 = result.distValue;


										final Region2 RX10_TEMP133 = RX10_TEMP132.dReg;


										final int RX10_TEMP134 = Program.searchPointInRegion2(RX10_TEMP133, pt,X10_TEMP85);


										final int RX10_TEMP135 = 0;


										final boolean RX10_TEMP136 = RX10_TEMP134 < RX10_TEMP135;

										if(RX10_TEMP136)
											{

											String RX10_TEMP137 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP137);

											}

										final int RX10_TEMP138 = Program.getPlaceFromDist2(RX10_TEMP132, RX10_TEMP134,X10_TEMP85);


										final int RX10_TEMP140 = 0;


										final boolean RX10_TEMP141 = RX10_TEMP138 != RX10_TEMP140;

										if(RX10_TEMP141)
											{

											String RX10_TEMP139 = "Bad place access for array result";

											throw new RuntimeException(RX10_TEMP139);

											}
										Program.setRefArrayValue2Complex(result, RX10_TEMP134, X10_TEMP91,X10_TEMP85);
										}
									}
								}
							}
						}
					}
				}
			}
		return result;
		}
public static double Complex_getReal ( final Complex X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.real;

		return X10_TEMP2;
		}
public static double Complex_getImag ( final Complex X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.imag;

		return X10_TEMP2;
		}
public static Complex Complex_add ( final Complex X10_TEMP0, final Complex n, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP2 = Program.Complex_getReal(n,myUniquePlacePoint);


		double X10_TEMP7 = X10_TEMP1 + X10_TEMP2;


		final double X10_TEMP4 = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP5 = Program.Complex_getImag(n,myUniquePlacePoint);


		double X10_TEMP8 = X10_TEMP4 + X10_TEMP5;


		final Complex X10_TEMP10 = new Complex(X10_TEMP7, X10_TEMP8,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP10.hashCode());

		return X10_TEMP10;
		}
public static Complex Complex_sub ( final Complex X10_TEMP0, final Complex n, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP2 = Program.Complex_getReal(n,myUniquePlacePoint);


		double X10_TEMP7 = X10_TEMP1 - X10_TEMP2;


		final double X10_TEMP4 = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP5 = Program.Complex_getImag(n,myUniquePlacePoint);


		double X10_TEMP8 = X10_TEMP4 - X10_TEMP5;


		final Complex X10_TEMP10 = new Complex(X10_TEMP7, X10_TEMP8,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP10.hashCode());

		return X10_TEMP10;
		}
public static Complex Complex_mult ( final Complex X10_TEMP0, final Complex n, int myUniquePlacePoint)
		{

		final double a = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double b = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final double c = Program.Complex_getReal(n,myUniquePlacePoint);


		final double d = Program.Complex_getImag(n,myUniquePlacePoint);


		final double X10_TEMP5 = a * c;


		final double X10_TEMP6 = b * d;


		double X10_TEMP11 = X10_TEMP5 - X10_TEMP6;


		final double X10_TEMP8 = a * d;


		final double X10_TEMP9 = b * c;


		double X10_TEMP12 = X10_TEMP8 + X10_TEMP9;


		final Complex X10_TEMP14 = new Complex(X10_TEMP11, X10_TEMP12,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP14.hashCode());

		return X10_TEMP14;
		}
public static Complex Complex_multS ( final Complex X10_TEMP0, final double r, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		double X10_TEMP5 = r * X10_TEMP1;


		final double X10_TEMP3 = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		double X10_TEMP6 = r * X10_TEMP3;


		final Complex X10_TEMP8 = new Complex(X10_TEMP5, X10_TEMP6,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP8.hashCode());

		return X10_TEMP8;
		}
public static Complex Complex_getConjg ( final Complex X10_TEMP0, int myUniquePlacePoint)
		{

		double X10_TEMP5 = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP2 = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final int X10_TEMP3 = 0;


		double X10_TEMP6 = X10_TEMP3 - X10_TEMP2;


		final Complex X10_TEMP8 = new Complex(X10_TEMP5, X10_TEMP6,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP8.hashCode());

		return X10_TEMP8;
		}
public static double Complex_multConjg ( final Complex X10_TEMP0, int myUniquePlacePoint)
		{

		final double a = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double b = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP3 = a * a;


		final double X10_TEMP4 = b * b;


		final double X10_TEMP6 = X10_TEMP3 + X10_TEMP4;

		return X10_TEMP6;
		}
public static boolean Complex_complexEquals ( final Complex X10_TEMP0, final Complex c, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP2 = Program.Complex_getReal(c,myUniquePlacePoint);


		final double X10_TEMP4 = X10_TEMP1 - X10_TEMP2;


		final double X10_TEMP5 = Math.abs(X10_TEMP4);


		final boolean X10_TEMP7 = X10_TEMP5 < _X10Util_ERROR;


		final double X10_TEMP8 = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP9 = Program.Complex_getImag(c,myUniquePlacePoint);


		final double X10_TEMP11 = X10_TEMP8 - X10_TEMP9;


		final double X10_TEMP12 = Math.abs(X10_TEMP11);


		final boolean X10_TEMP14 = X10_TEMP12 < _X10Util_ERROR;


		final boolean X10_TEMP16 = X10_TEMP7 && X10_TEMP14;

		return X10_TEMP16;
		}
public static String Complex_toString ( final Complex X10_TEMP0, int myUniquePlacePoint)
		{

		final double r = Program.Complex_getReal(X10_TEMP0,myUniquePlacePoint);


		final double i = Program.Complex_getImag(X10_TEMP0,myUniquePlacePoint);


		final String X10_TEMP3 = "(";


		final String X10_TEMP4 = X10_TEMP3 + r;


		final String X10_TEMP5 = ",";


		final String X10_TEMP6 = X10_TEMP4 + X10_TEMP5;


		final String X10_TEMP7 = X10_TEMP6 + i;


		final String X10_TEMP8 = ")";


		final String X10_TEMP10 = X10_TEMP7 + X10_TEMP8;

		return X10_TEMP10;
		}
public static ComplexRefArray2 FourierTransform2D_transformC ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{
		Program.FourierTransform2D_scrambleY(X10_TEMP0, f,myUniquePlacePoint);

		final int X10_TEMP4 = 0;

		Program.FourierTransform2D_bitReverse(X10_TEMP0, f, X10_TEMP4,myUniquePlacePoint);

		final int X10_TEMP8 = 0;


		final boolean X10_TEMP9 = false;

		Program.FourierTransform2D_transformRank(X10_TEMP0, f, X10_TEMP8, X10_TEMP9,myUniquePlacePoint);

		final ComplexRefArray2 g = Program.ArrayUtil_transpose(f,myUniquePlacePoint);

		Program.FourierTransform2D_scrambleX(X10_TEMP0, g,myUniquePlacePoint);

		final int X10_TEMP15 = 1;

		Program.FourierTransform2D_bitReverse(X10_TEMP0, g, X10_TEMP15,myUniquePlacePoint);

		final int X10_TEMP19 = 1;


		final boolean X10_TEMP20 = false;

		Program.FourierTransform2D_transformRank(X10_TEMP0, g, X10_TEMP19, X10_TEMP20,myUniquePlacePoint);
		return g;
		}
public static ComplexRefArray2 FourierTransform2D_transformD ( final FourierTransform2D X10_TEMP0, final doubleRefArray2 f, int myUniquePlacePoint)
		{

		final ComplexRefArray2 X10_TEMP3 = Program.ArrayUtil_doubleToComplex(f,myUniquePlacePoint);


		final ComplexRefArray2 X10_TEMP5 = Program.FourierTransform2D_transformC(X10_TEMP0, X10_TEMP3,myUniquePlacePoint);

		return X10_TEMP5;
		}
public static ComplexRefArray2 FourierTransform2D_inverseTransformC ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 1;

		Program.FourierTransform2D_bitReverse(X10_TEMP0, f, X10_TEMP3,myUniquePlacePoint);

		final int X10_TEMP7 = 1;


		final boolean X10_TEMP8 = true;

		Program.FourierTransform2D_transformRank(X10_TEMP0, f, X10_TEMP7, X10_TEMP8,myUniquePlacePoint);
		Program.FourierTransform2D_unscrambleX(X10_TEMP0, f,myUniquePlacePoint);

		final ComplexRefArray2 g = Program.ArrayUtil_transpose(f,myUniquePlacePoint);


		final int X10_TEMP14 = 0;

		Program.FourierTransform2D_bitReverse(X10_TEMP0, g, X10_TEMP14,myUniquePlacePoint);

		final int X10_TEMP18 = 0;


		final boolean X10_TEMP19 = true;

		Program.FourierTransform2D_transformRank(X10_TEMP0, g, X10_TEMP18, X10_TEMP19,myUniquePlacePoint);
		Program.FourierTransform2D_unscrambleY(X10_TEMP0, g,myUniquePlacePoint);
		return g;
		}
public static ComplexRefArray2 FourierTransform2D_inverseTransformD ( final FourierTransform2D X10_TEMP0, final doubleRefArray2 f, int myUniquePlacePoint)
		{

		final ComplexRefArray2 X10_TEMP3 = Program.ArrayUtil_doubleToComplex(f,myUniquePlacePoint);


		final ComplexRefArray2 X10_TEMP5 = Program.FourierTransform2D_inverseTransformC(X10_TEMP0, X10_TEMP3,myUniquePlacePoint);

		return X10_TEMP5;
		}
public static void FourierTransform2D_bitReverse ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, final int rnk, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final boolean X10_TEMP3 = rnk == X10_TEMP1;


		final boolean X10_TEMP4 = X10_TEMP3;


		final int X10_TEMP6 = X10_TEMP0.nBits2;


		final int X10_TEMP7 = 1;


		int X10_TEMP9 = X10_TEMP6 - X10_TEMP7;

		if(X10_TEMP4)
			{

			X10_TEMP9 = X10_TEMP0.nBits1;

			}

		final int X10_TEMP10 = X10_TEMP9;


		final int nBits = X10_TEMP10;


		final int X10_TEMP11 = 0;


		final boolean X10_TEMP13 = rnk == X10_TEMP11;


		final boolean X10_TEMP14 = X10_TEMP13;


		final int X10_TEMP16 = X10_TEMP0.length2;


		final int X10_TEMP17 = 2;


		int X10_TEMP19 = X10_TEMP16 / X10_TEMP17;

		if(X10_TEMP14)
			{

			X10_TEMP19 = X10_TEMP0.length1;

			}

		final int X10_TEMP20 = X10_TEMP19;


		final int r1Length = X10_TEMP20;


		final int X10_TEMP21 = 1;


		final int X10_TEMP23 = X10_TEMP21 << nBits;


		final int nrx = X10_TEMP23 / r1Length;

		/*FINISH
*/			{

			final Dist1 X10_TEMP26 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP26.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP26.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP26.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP26, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP27 = RX10_TEMP11;

				//async(X10_TEMP27)
					{

					final Dist2 RX10_TEMP12 = f.distValue;


					final Dist2 dF = RX10_TEMP12;


					final int X10_TEMP31 = 0;


					final Region1 rLocal1 = Program.X10Util_getLRank2D(dF, X10_TEMP31,X10_TEMP27);


					final int X10_TEMP36 = 0;


					final int X10_TEMP34 = 1;


					final int X10_TEMP37 = r1Length - X10_TEMP34;


					final Region1 X10_TEMP39 = Program.createNewRegion1R(X10_TEMP36, X10_TEMP37,X10_TEMP27);


					final int X10_TEMP40 = 0;


					final int RX10_TEMP17 = 1;


					int RX10_TEMP15 = X10_TEMP39.regSize;


					RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17;


					final int  RX10_TEMP16 = RX10_TEMP15+1;

					for(int RX10_TEMP13=0; RX10_TEMP13 < RX10_TEMP16; RX10_TEMP13++)
						{

						final int RX10_TEMP18 = RX10_TEMP13;


						final Point1 RX10_TEMP14 = Program.regionOrdinalPoint1(X10_TEMP39, RX10_TEMP18,X10_TEMP27);


						final int j1 = RX10_TEMP14.f0;

						//async(X10_TEMP40)
							{

							final intValArray1 X10_TEMP41 = X10_TEMP0.tableBitReverse;


							final Point1 RX10_TEMP19 = new Point1(j1,X10_TEMP40);
							
Program.globalPointerHashMap.get(X10_TEMP40).add(RX10_TEMP19.hashCode());


							final Region1 RX10_TEMP20 = X10_TEMP41.regionValue;


							final int RX10_TEMP21 = Program.searchPointInRegion1(RX10_TEMP20, RX10_TEMP19,X10_TEMP40);


							final int RX10_TEMP22 = 0;


							final boolean RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22;

							if(RX10_TEMP23)
								{

								String RX10_TEMP24 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP24);

								}

							final int[] RX10_TEMP25 = (int[])(X10_TEMP41.contents);


							final int X10_TEMP46 = RX10_TEMP25[RX10_TEMP21];


							final int X10_TEMP43 = X10_TEMP0.maxBits;


							final int X10_TEMP45 = X10_TEMP43 - nBits;


							final int j2 = X10_TEMP46 >> X10_TEMP45;


							final boolean X10_TEMP49 = j1 < j2;

							if(X10_TEMP49)
								{
								/*FINISH
*/									{

									final int X10_TEMP51 = 0;


									final int RX10_TEMP30 = 1;


									int RX10_TEMP28 = rLocal1.regSize;


									RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30;


									final int  RX10_TEMP29 = RX10_TEMP28+1;

									for(int RX10_TEMP26=0; RX10_TEMP26 < RX10_TEMP29; RX10_TEMP26++)
										{

										final int RX10_TEMP31 = RX10_TEMP26;


										final Point1 RX10_TEMP27 = Program.regionOrdinalPoint1(rLocal1, RX10_TEMP31,X10_TEMP40);


										final int i = RX10_TEMP27.f0;

										//async(X10_TEMP51)
											{

											final Point2 RX10_TEMP32 = new Point2(i, j1,X10_TEMP51);
											
Program.globalPointerHashMap.get(X10_TEMP51).add(RX10_TEMP32.hashCode());


											final Dist2 RX10_TEMP33 = f.distValue;


											final Region2 RX10_TEMP34 = RX10_TEMP33.dReg;


											final int RX10_TEMP35 = Program.searchPointInRegion2(RX10_TEMP34, RX10_TEMP32,X10_TEMP51);


											final int RX10_TEMP36 = 0;


											final boolean RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36;

											if(RX10_TEMP37)
												{

												String RX10_TEMP38 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP38);

												}

											final int RX10_TEMP39 = Program.getPlaceFromDist2(RX10_TEMP33, RX10_TEMP35,X10_TEMP51);


											final int RX10_TEMP41 = 0;


											final boolean RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41;

											if(RX10_TEMP42)
												{

												String RX10_TEMP40 = "Bad place access for array f";

												throw new RuntimeException(RX10_TEMP40);

												}

											final Complex RX10_TEMP43 = Program.getRefArrayValue2Complex(f, RX10_TEMP35,X10_TEMP51);


											final Complex temp = RX10_TEMP43;


											final Point2 RX10_TEMP44 = new Point2(i, j2,X10_TEMP51);
											
Program.globalPointerHashMap.get(X10_TEMP51).add(RX10_TEMP44.hashCode());


											final Dist2 RX10_TEMP45 = f.distValue;


											final Region2 RX10_TEMP46 = RX10_TEMP45.dReg;


											final int RX10_TEMP47 = Program.searchPointInRegion2(RX10_TEMP46, RX10_TEMP44,X10_TEMP51);


											final int RX10_TEMP48 = 0;


											final boolean RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48;

											if(RX10_TEMP49)
												{

												String RX10_TEMP50 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP50);

												}

											final int RX10_TEMP51 = Program.getPlaceFromDist2(RX10_TEMP45, RX10_TEMP47,X10_TEMP51);


											final int RX10_TEMP53 = 0;


											final boolean RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53;

											if(RX10_TEMP54)
												{

												String RX10_TEMP52 = "Bad place access for array f";

												throw new RuntimeException(RX10_TEMP52);

												}

											final Complex RX10_TEMP55 = Program.getRefArrayValue2Complex(f, RX10_TEMP47,X10_TEMP51);


											final Complex X10_TEMP61 = RX10_TEMP55;


											final Complex X10_TEMP62 = X10_TEMP61;


											final Point2 RX10_TEMP56 = new Point2(i, j1,X10_TEMP51);
											
Program.globalPointerHashMap.get(X10_TEMP51).add(RX10_TEMP56.hashCode());


											final Dist2 RX10_TEMP57 = f.distValue;


											final Region2 RX10_TEMP58 = RX10_TEMP57.dReg;


											final int RX10_TEMP59 = Program.searchPointInRegion2(RX10_TEMP58, RX10_TEMP56,X10_TEMP51);


											final int RX10_TEMP60 = 0;


											final boolean RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60;

											if(RX10_TEMP61)
												{

												String RX10_TEMP62 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP62);

												}

											final int RX10_TEMP63 = Program.getPlaceFromDist2(RX10_TEMP57, RX10_TEMP59,X10_TEMP51);


											final int RX10_TEMP65 = 0;


											final boolean RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65;

											if(RX10_TEMP66)
												{

												String RX10_TEMP64 = "Bad place access for array f";

												throw new RuntimeException(RX10_TEMP64);

												}
											Program.setRefArrayValue2Complex(f, RX10_TEMP59, X10_TEMP62,X10_TEMP51);

											final Complex X10_TEMP67 = temp;


											final Point2 RX10_TEMP67 = new Point2(i, j2,X10_TEMP51);
											
Program.globalPointerHashMap.get(X10_TEMP51).add(RX10_TEMP67.hashCode());


											final Dist2 RX10_TEMP68 = f.distValue;


											final Region2 RX10_TEMP69 = RX10_TEMP68.dReg;


											final int RX10_TEMP70 = Program.searchPointInRegion2(RX10_TEMP69, RX10_TEMP67,X10_TEMP51);


											final int RX10_TEMP71 = 0;


											final boolean RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71;

											if(RX10_TEMP72)
												{

												String RX10_TEMP73 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP73);

												}

											final int RX10_TEMP74 = Program.getPlaceFromDist2(RX10_TEMP68, RX10_TEMP70,X10_TEMP51);


											final int RX10_TEMP76 = 0;


											final boolean RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76;

											if(RX10_TEMP77)
												{

												String RX10_TEMP75 = "Bad place access for array f";

												throw new RuntimeException(RX10_TEMP75);

												}
											Program.setRefArrayValue2Complex(f, RX10_TEMP70, X10_TEMP67,X10_TEMP51);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
public static void FourierTransform2D_scrambleX ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = X10_TEMP0.length2;


		final int X10_TEMP2 = 2;


		final int nxh = X10_TEMP1 / X10_TEMP2;


		final int X10_TEMP4 = 2;


		final int nxhh = nxh / X10_TEMP4;


		final int X10_TEMP8 = X10_TEMP0.length1;


		final int X10_TEMP9 = X10_TEMP0.length2;


		final int X10_TEMP10 = Program.X10Util_maxInt(X10_TEMP8, X10_TEMP9,myUniquePlacePoint);


		final int X10_TEMP11 = X10_TEMP0.length2;


		final int kmr = X10_TEMP10 / X10_TEMP11;

		/*FINISH
*/			{

			final Dist1 X10_TEMP14 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP14.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP14.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP14.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP14, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP15 = RX10_TEMP11;

				//async(X10_TEMP15)
					{

					final Dist2 RX10_TEMP12 = f.distValue;


					final Dist2 dF = RX10_TEMP12;


					final Region2 rLocal = Program.X10Util_get2DLRegion(dF,X10_TEMP15);


					final int X10_TEMP21 = 0;


					final Region1 rLocal1 = Program.X10Util_getRank2D(rLocal, X10_TEMP21,X10_TEMP15);


					final Region2 X10_TEMP27 = Program.createNewRegion2AR(rLocal1, nxhh, nxhh,X10_TEMP15);


					final int X10_TEMP28 = 0;


					final int RX10_TEMP16 = 1;


					int RX10_TEMP14 = X10_TEMP27.regSize;


					RX10_TEMP14 = RX10_TEMP14 - RX10_TEMP16;


					final int  RX10_TEMP15 = RX10_TEMP14+1;

					for(int RX10_TEMP13=0; RX10_TEMP13 < RX10_TEMP15; RX10_TEMP13++)
						{

						final int RX10_TEMP17 = RX10_TEMP13;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP27, RX10_TEMP17,X10_TEMP15);

						//async(X10_TEMP28)
							{

							final Dist2 RX10_TEMP18 = f.distValue;


							final Region2 RX10_TEMP19 = RX10_TEMP18.dReg;


							final int RX10_TEMP20 = Program.searchPointInRegion2(RX10_TEMP19, pt,X10_TEMP28);


							final int RX10_TEMP21 = 0;


							final boolean RX10_TEMP22 = RX10_TEMP20 < RX10_TEMP21;

							if(RX10_TEMP22)
								{

								String RX10_TEMP23 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP23);

								}

							final int RX10_TEMP24 = Program.getPlaceFromDist2(RX10_TEMP18, RX10_TEMP20,X10_TEMP28);


							final int RX10_TEMP26 = 0;


							final boolean RX10_TEMP27 = RX10_TEMP24 != RX10_TEMP26;

							if(RX10_TEMP27)
								{

								String RX10_TEMP25 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP25);

								}

							final Complex RX10_TEMP28 = Program.getRefArrayValue2Complex(f, RX10_TEMP20,X10_TEMP28);


							final Complex X10_TEMP31 = RX10_TEMP28;


							final Complex X10_TEMP33 = Program.Complex_getConjg(X10_TEMP31,X10_TEMP28);


							final int X10_TEMP35 = 2;


							final Complex X10_TEMP38 = Program.Complex_multS(X10_TEMP33, X10_TEMP35,X10_TEMP28);


							final Complex X10_TEMP39 = X10_TEMP38;


							final Dist2 RX10_TEMP29 = f.distValue;


							final Region2 RX10_TEMP30 = RX10_TEMP29.dReg;


							final int RX10_TEMP31 = Program.searchPointInRegion2(RX10_TEMP30, pt,X10_TEMP28);


							final int RX10_TEMP32 = 0;


							final boolean RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32;

							if(RX10_TEMP33)
								{

								String RX10_TEMP34 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP34);

								}

							final int RX10_TEMP35 = Program.getPlaceFromDist2(RX10_TEMP29, RX10_TEMP31,X10_TEMP28);


							final int RX10_TEMP37 = 0;


							final boolean RX10_TEMP38 = RX10_TEMP35 != RX10_TEMP37;

							if(RX10_TEMP38)
								{

								String RX10_TEMP36 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP36);

								}
							Program.setRefArrayValue2Complex(f, RX10_TEMP31, X10_TEMP39,X10_TEMP28);

							int X10_TEMP42 = 1;


							int X10_TEMP43 = 0;


							int RX10_TEMP39 = pt.f0;


							int RX10_TEMP40 = pt.f1;


							RX10_TEMP39 = RX10_TEMP39 * X10_TEMP42;


							RX10_TEMP40 = RX10_TEMP40 * X10_TEMP43;


							final Point2 pt0 = new Point2(RX10_TEMP39, RX10_TEMP40,X10_TEMP28);
							
Program.globalPointerHashMap.get(X10_TEMP28).add(pt0.hashCode());


							final Dist2 RX10_TEMP41 = f.distValue;


							final Region2 RX10_TEMP42 = RX10_TEMP41.dReg;


							final int RX10_TEMP43 = Program.searchPointInRegion2(RX10_TEMP42, pt0,X10_TEMP28);


							final int RX10_TEMP44 = 0;


							final boolean RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44;

							if(RX10_TEMP45)
								{

								String RX10_TEMP46 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP46);

								}

							final int RX10_TEMP47 = Program.getPlaceFromDist2(RX10_TEMP41, RX10_TEMP43,X10_TEMP28);


							final int RX10_TEMP49 = 0;


							final boolean RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49;

							if(RX10_TEMP50)
								{

								String RX10_TEMP48 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP48);

								}

							final Complex RX10_TEMP51 = Program.getRefArrayValue2Complex(f, RX10_TEMP43,X10_TEMP28);


							final Complex t2 = RX10_TEMP51;


							final double t2Real = Program.Complex_getReal(t2,X10_TEMP28);


							final double t2Imag = Program.Complex_getImag(t2,X10_TEMP28);


							double X10_TEMP52 = t2Real + t2Imag;


							double X10_TEMP53 = t2Real - t2Imag;


							final Complex X10_TEMP56 = new Complex(X10_TEMP52, X10_TEMP53,X10_TEMP28);
							
Program.globalPointerHashMap.get(X10_TEMP28).add(X10_TEMP56.hashCode());


							final Complex X10_TEMP57 = X10_TEMP56;


							final Dist2 RX10_TEMP52 = f.distValue;


							final Region2 RX10_TEMP53 = RX10_TEMP52.dReg;


							final int RX10_TEMP54 = Program.searchPointInRegion2(RX10_TEMP53, pt0,X10_TEMP28);


							final int RX10_TEMP55 = 0;


							final boolean RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55;

							if(RX10_TEMP56)
								{

								String RX10_TEMP57 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP57);

								}

							final int RX10_TEMP58 = Program.getPlaceFromDist2(RX10_TEMP52, RX10_TEMP54,X10_TEMP28);


							final int RX10_TEMP60 = 0;


							final boolean RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60;

							if(RX10_TEMP61)
								{

								String RX10_TEMP59 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP59);

								}
							Program.setRefArrayValue2Complex(f, RX10_TEMP54, X10_TEMP57,X10_TEMP28);
							}
						}

					final int X10_TEMP61 = 1;


					final int X10_TEMP59 = 1;


					final int X10_TEMP62 = nxhh - X10_TEMP59;


					final Region1 X10_TEMP64 = Program.createNewRegion1R(X10_TEMP61, X10_TEMP62,myUniquePlacePoint);


					final int RX10_TEMP66 = 1;


					int RX10_TEMP64 = X10_TEMP64.regSize;


					RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66;


					final int  RX10_TEMP65 = RX10_TEMP64+1;

					for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP65; RX10_TEMP62++)
						{

						final int RX10_TEMP67 = RX10_TEMP62;


						final Point1 RX10_TEMP63 = Program.regionOrdinalPoint1(X10_TEMP64, RX10_TEMP67,myUniquePlacePoint);


						final int j1 = RX10_TEMP63.f0;


						final int j2 = nxh - j1;


						final ComplexValArray1 X10_TEMP66 = X10_TEMP0.tableSineCosine;


						final int X10_TEMP68 = kmr * j1;


						final Point1 RX10_TEMP68 = new Point1(X10_TEMP68,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP68.hashCode());


						final Region1 RX10_TEMP69 = X10_TEMP66.regionValue;


						final int RX10_TEMP70 = Program.searchPointInRegion1(RX10_TEMP69, RX10_TEMP68,myUniquePlacePoint);


						final int RX10_TEMP71 = 0;


						final boolean RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71;

						if(RX10_TEMP72)
							{

							String RX10_TEMP73 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP73);

							}

						final Complex[] RX10_TEMP74 = (Complex[])(X10_TEMP66.contents);


						final Complex t0 = RX10_TEMP74[RX10_TEMP70];


						double X10_TEMP72 = Program.Complex_getImag(t0,myUniquePlacePoint);


						double X10_TEMP73 = Program.Complex_getReal(t0,myUniquePlacePoint);


						final Complex t1 = new Complex(X10_TEMP72, X10_TEMP73,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(t1.hashCode());


						final int X10_TEMP76 = 0;


						final int RX10_TEMP79 = 1;


						int RX10_TEMP77 = rLocal1.regSize;


						RX10_TEMP77 = RX10_TEMP77 - RX10_TEMP79;


						final int  RX10_TEMP78 = RX10_TEMP77+1;

						for(int RX10_TEMP75=0; RX10_TEMP75 < RX10_TEMP78; RX10_TEMP75++)
							{

							final int RX10_TEMP80 = RX10_TEMP75;


							final Point1 RX10_TEMP76 = Program.regionOrdinalPoint1(rLocal1, RX10_TEMP80,myUniquePlacePoint);


							final int i = RX10_TEMP76.f0;

							//async(X10_TEMP76)
								{

								final Point2 RX10_TEMP81 = new Point2(i, j2,X10_TEMP76);
								
Program.globalPointerHashMap.get(X10_TEMP76).add(RX10_TEMP81.hashCode());


								final Dist2 RX10_TEMP82 = f.distValue;


								final Region2 RX10_TEMP83 = RX10_TEMP82.dReg;


								final int RX10_TEMP84 = Program.searchPointInRegion2(RX10_TEMP83, RX10_TEMP81,X10_TEMP76);


								final int RX10_TEMP85 = 0;


								final boolean RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85;

								if(RX10_TEMP86)
									{

									String RX10_TEMP87 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP87);

									}

								final int RX10_TEMP88 = Program.getPlaceFromDist2(RX10_TEMP82, RX10_TEMP84,X10_TEMP76);


								final int RX10_TEMP90 = 0;


								final boolean RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90;

								if(RX10_TEMP91)
									{

									String RX10_TEMP89 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP89);

									}

								final Complex RX10_TEMP92 = Program.getRefArrayValue2Complex(f, RX10_TEMP84,X10_TEMP76);


								final Complex X10_TEMP79 = RX10_TEMP92;


								final Complex t = Program.Complex_getConjg(X10_TEMP79,X10_TEMP76);


								final Point2 RX10_TEMP93 = new Point2(i, j1,X10_TEMP76);
								
Program.globalPointerHashMap.get(X10_TEMP76).add(RX10_TEMP93.hashCode());


								final Dist2 RX10_TEMP94 = f.distValue;


								final Region2 RX10_TEMP95 = RX10_TEMP94.dReg;


								final int RX10_TEMP96 = Program.searchPointInRegion2(RX10_TEMP95, RX10_TEMP93,X10_TEMP76);


								final int RX10_TEMP97 = 0;


								final boolean RX10_TEMP98 = RX10_TEMP96 < RX10_TEMP97;

								if(RX10_TEMP98)
									{

									String RX10_TEMP99 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP99);

									}

								final int RX10_TEMP100 = Program.getPlaceFromDist2(RX10_TEMP94, RX10_TEMP96,X10_TEMP76);


								final int RX10_TEMP102 = 0;


								final boolean RX10_TEMP103 = RX10_TEMP100 != RX10_TEMP102;

								if(RX10_TEMP103)
									{

									String RX10_TEMP101 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP101);

									}

								final Complex RX10_TEMP104 = Program.getRefArrayValue2Complex(f, RX10_TEMP96,X10_TEMP76);


								final Complex X10_TEMP83 = RX10_TEMP104;


								final Complex s = Program.Complex_add(X10_TEMP83, t,X10_TEMP76);


								final Point2 RX10_TEMP105 = new Point2(i, j1,X10_TEMP76);
								
Program.globalPointerHashMap.get(X10_TEMP76).add(RX10_TEMP105.hashCode());


								final Dist2 RX10_TEMP106 = f.distValue;


								final Region2 RX10_TEMP107 = RX10_TEMP106.dReg;


								final int RX10_TEMP108 = Program.searchPointInRegion2(RX10_TEMP107, RX10_TEMP105,X10_TEMP76);


								final int RX10_TEMP109 = 0;


								final boolean RX10_TEMP110 = RX10_TEMP108 < RX10_TEMP109;

								if(RX10_TEMP110)
									{

									String RX10_TEMP111 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP111);

									}

								final int RX10_TEMP112 = Program.getPlaceFromDist2(RX10_TEMP106, RX10_TEMP108,X10_TEMP76);


								final int RX10_TEMP114 = 0;


								final boolean RX10_TEMP115 = RX10_TEMP112 != RX10_TEMP114;

								if(RX10_TEMP115)
									{

									String RX10_TEMP113 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP113);

									}

								final Complex RX10_TEMP116 = Program.getRefArrayValue2Complex(f, RX10_TEMP108,X10_TEMP76);


								final Complex X10_TEMP88 = RX10_TEMP116;


								final Complex X10_TEMP91 = Program.Complex_sub(X10_TEMP88, t,X10_TEMP76);


								final Complex t3 = Program.Complex_mult(X10_TEMP91, t1,X10_TEMP76);


								final Complex X10_TEMP99 = Program.Complex_add(s, t3,X10_TEMP76);


								final Complex X10_TEMP100 = X10_TEMP99;


								final Point2 RX10_TEMP117 = new Point2(i, j1,X10_TEMP76);
								
Program.globalPointerHashMap.get(X10_TEMP76).add(RX10_TEMP117.hashCode());


								final Dist2 RX10_TEMP118 = f.distValue;


								final Region2 RX10_TEMP119 = RX10_TEMP118.dReg;


								final int RX10_TEMP120 = Program.searchPointInRegion2(RX10_TEMP119, RX10_TEMP117,X10_TEMP76);


								final int RX10_TEMP121 = 0;


								final boolean RX10_TEMP122 = RX10_TEMP120 < RX10_TEMP121;

								if(RX10_TEMP122)
									{

									String RX10_TEMP123 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP123);

									}

								final int RX10_TEMP124 = Program.getPlaceFromDist2(RX10_TEMP118, RX10_TEMP120,X10_TEMP76);


								final int RX10_TEMP126 = 0;


								final boolean RX10_TEMP127 = RX10_TEMP124 != RX10_TEMP126;

								if(RX10_TEMP127)
									{

									String RX10_TEMP125 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP125);

									}
								Program.setRefArrayValue2Complex(f, RX10_TEMP120, X10_TEMP100,X10_TEMP76);

								final Complex X10_TEMP105 = Program.Complex_sub(s, t3,X10_TEMP76);


								final Complex X10_TEMP108 = Program.Complex_getConjg(X10_TEMP105,X10_TEMP76);


								final Complex X10_TEMP109 = X10_TEMP108;


								final Point2 RX10_TEMP128 = new Point2(i, j2,X10_TEMP76);
								
Program.globalPointerHashMap.get(X10_TEMP76).add(RX10_TEMP128.hashCode());


								final Dist2 RX10_TEMP129 = f.distValue;


								final Region2 RX10_TEMP130 = RX10_TEMP129.dReg;


								final int RX10_TEMP131 = Program.searchPointInRegion2(RX10_TEMP130, RX10_TEMP128,X10_TEMP76);


								final int RX10_TEMP132 = 0;


								final boolean RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132;

								if(RX10_TEMP133)
									{

									String RX10_TEMP134 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP134);

									}

								final int RX10_TEMP135 = Program.getPlaceFromDist2(RX10_TEMP129, RX10_TEMP131,X10_TEMP76);


								final int RX10_TEMP137 = 0;


								final boolean RX10_TEMP138 = RX10_TEMP135 != RX10_TEMP137;

								if(RX10_TEMP138)
									{

									String RX10_TEMP136 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP136);

									}
								Program.setRefArrayValue2Complex(f, RX10_TEMP131, X10_TEMP109,X10_TEMP76);
								}
							}
						}
					}
				}
			}
		}
public static void FourierTransform2D_unscrambleX ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = X10_TEMP0.length2;


		final int X10_TEMP2 = 2;


		final int nxh = X10_TEMP1 / X10_TEMP2;


		final int X10_TEMP4 = X10_TEMP0.length2;


		final int X10_TEMP5 = 4;


		final int nxhh = X10_TEMP4 / X10_TEMP5;


		final int X10_TEMP9 = X10_TEMP0.length1;


		final int X10_TEMP10 = X10_TEMP0.length2;


		final int X10_TEMP11 = Program.X10Util_maxInt(X10_TEMP9, X10_TEMP10,myUniquePlacePoint);


		final int X10_TEMP12 = X10_TEMP0.length2;


		final int kmr = X10_TEMP11 / X10_TEMP12;

		/*FINISH
*/			{

			final Dist1 X10_TEMP15 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP15.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP15.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP15.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP15, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP16 = RX10_TEMP11;

				//async(X10_TEMP16)
					{

					final Dist2 RX10_TEMP12 = f.distValue;


					final Dist2 dF = RX10_TEMP12;


					final int X10_TEMP20 = 0;


					final Region1 rLocal1 = Program.X10Util_getLRank2D(dF, X10_TEMP20,X10_TEMP16);


					final int X10_TEMP25 = 1;


					final int X10_TEMP23 = 1;


					final int X10_TEMP26 = nxhh - X10_TEMP23;


					final Region1 X10_TEMP28 = Program.createNewRegion1R(X10_TEMP25, X10_TEMP26,X10_TEMP16);


					final int X10_TEMP29 = 0;


					final int RX10_TEMP17 = 1;


					int RX10_TEMP15 = X10_TEMP28.regSize;


					RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17;


					final int  RX10_TEMP16 = RX10_TEMP15+1;

					for(int RX10_TEMP13=0; RX10_TEMP13 < RX10_TEMP16; RX10_TEMP13++)
						{

						final int RX10_TEMP18 = RX10_TEMP13;


						final Point1 RX10_TEMP14 = Program.regionOrdinalPoint1(X10_TEMP28, RX10_TEMP18,X10_TEMP16);


						final int j1 = RX10_TEMP14.f0;

						//async(X10_TEMP29)
							{

							final int j2 = nxh - j1;


							final ComplexValArray1 X10_TEMP31 = X10_TEMP0.tableSineCosine;


							final int X10_TEMP33 = kmr * j1;


							final Point1 RX10_TEMP19 = new Point1(X10_TEMP33,X10_TEMP29);
							
Program.globalPointerHashMap.get(X10_TEMP29).add(RX10_TEMP19.hashCode());


							final Region1 RX10_TEMP20 = X10_TEMP31.regionValue;


							final int RX10_TEMP21 = Program.searchPointInRegion1(RX10_TEMP20, RX10_TEMP19,X10_TEMP29);


							final int RX10_TEMP22 = 0;


							final boolean RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22;

							if(RX10_TEMP23)
								{

								String RX10_TEMP24 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP24);

								}

							final Complex[] RX10_TEMP25 = (Complex[])(X10_TEMP31.contents);


							final Complex t0 = RX10_TEMP25[RX10_TEMP21];


							double X10_TEMP39 = Program.Complex_getImag(t0,X10_TEMP29);


							final double X10_TEMP36 = Program.Complex_getReal(t0,X10_TEMP29);


							final int X10_TEMP37 = 0;


							double X10_TEMP40 = X10_TEMP37 - X10_TEMP36;


							final Complex t1 = new Complex(X10_TEMP39, X10_TEMP40,X10_TEMP29);
							
Program.globalPointerHashMap.get(X10_TEMP29).add(t1.hashCode());


							final int X10_TEMP43 = 0;


							final int RX10_TEMP30 = 1;


							int RX10_TEMP28 = rLocal1.regSize;


							RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30;


							final int  RX10_TEMP29 = RX10_TEMP28+1;

							for(int RX10_TEMP26=0; RX10_TEMP26 < RX10_TEMP29; RX10_TEMP26++)
								{

								final int RX10_TEMP31 = RX10_TEMP26;


								final Point1 RX10_TEMP27 = Program.regionOrdinalPoint1(rLocal1, RX10_TEMP31,X10_TEMP29);


								final int i = RX10_TEMP27.f0;

								//async(X10_TEMP43)
									{

									final Point2 RX10_TEMP32 = new Point2(i, j2,X10_TEMP43);
									
Program.globalPointerHashMap.get(X10_TEMP43).add(RX10_TEMP32.hashCode());


									final Dist2 RX10_TEMP33 = f.distValue;


									final Region2 RX10_TEMP34 = RX10_TEMP33.dReg;


									final int RX10_TEMP35 = Program.searchPointInRegion2(RX10_TEMP34, RX10_TEMP32,X10_TEMP43);


									final int RX10_TEMP36 = 0;


									final boolean RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36;

									if(RX10_TEMP37)
										{

										String RX10_TEMP38 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP38);

										}

									final int RX10_TEMP39 = Program.getPlaceFromDist2(RX10_TEMP33, RX10_TEMP35,X10_TEMP43);


									final int RX10_TEMP41 = 0;


									final boolean RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41;

									if(RX10_TEMP42)
										{

										String RX10_TEMP40 = "Bad place access for array f";

										throw new RuntimeException(RX10_TEMP40);

										}

									final Complex RX10_TEMP43 = Program.getRefArrayValue2Complex(f, RX10_TEMP35,X10_TEMP43);


									final Complex X10_TEMP46 = RX10_TEMP43;


									final Complex t = Program.Complex_getConjg(X10_TEMP46,X10_TEMP43);


									final Point2 RX10_TEMP44 = new Point2(i, j1,X10_TEMP43);
									
Program.globalPointerHashMap.get(X10_TEMP43).add(RX10_TEMP44.hashCode());


									final Dist2 RX10_TEMP45 = f.distValue;


									final Region2 RX10_TEMP46 = RX10_TEMP45.dReg;


									final int RX10_TEMP47 = Program.searchPointInRegion2(RX10_TEMP46, RX10_TEMP44,X10_TEMP43);


									final int RX10_TEMP48 = 0;


									final boolean RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48;

									if(RX10_TEMP49)
										{

										String RX10_TEMP50 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP50);

										}

									final int RX10_TEMP51 = Program.getPlaceFromDist2(RX10_TEMP45, RX10_TEMP47,X10_TEMP43);


									final int RX10_TEMP53 = 0;


									final boolean RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53;

									if(RX10_TEMP54)
										{

										String RX10_TEMP52 = "Bad place access for array f";

										throw new RuntimeException(RX10_TEMP52);

										}

									final Complex RX10_TEMP55 = Program.getRefArrayValue2Complex(f, RX10_TEMP47,X10_TEMP43);


									final Complex X10_TEMP50 = RX10_TEMP55;


									final Complex s = Program.Complex_add(X10_TEMP50, t,X10_TEMP43);


									final Point2 RX10_TEMP56 = new Point2(i, j1,X10_TEMP43);
									
Program.globalPointerHashMap.get(X10_TEMP43).add(RX10_TEMP56.hashCode());


									final Dist2 RX10_TEMP57 = f.distValue;


									final Region2 RX10_TEMP58 = RX10_TEMP57.dReg;


									final int RX10_TEMP59 = Program.searchPointInRegion2(RX10_TEMP58, RX10_TEMP56,X10_TEMP43);


									final int RX10_TEMP60 = 0;


									final boolean RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60;

									if(RX10_TEMP61)
										{

										String RX10_TEMP62 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP62);

										}

									final int RX10_TEMP63 = Program.getPlaceFromDist2(RX10_TEMP57, RX10_TEMP59,X10_TEMP43);


									final int RX10_TEMP65 = 0;


									final boolean RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65;

									if(RX10_TEMP66)
										{

										String RX10_TEMP64 = "Bad place access for array f";

										throw new RuntimeException(RX10_TEMP64);

										}

									final Complex RX10_TEMP67 = Program.getRefArrayValue2Complex(f, RX10_TEMP59,X10_TEMP43);


									final Complex X10_TEMP55 = RX10_TEMP67;


									final Complex X10_TEMP58 = Program.Complex_sub(X10_TEMP55, t,X10_TEMP43);


									final Complex t2 = Program.Complex_mult(X10_TEMP58, t1,X10_TEMP43);


									final Complex X10_TEMP65 = Program.Complex_add(s, t2,X10_TEMP43);


									final double X10_TEMP67 = X10_TEMP0.invN;


									final Complex X10_TEMP70 = Program.Complex_multS(X10_TEMP65, X10_TEMP67,X10_TEMP43);


									final Complex X10_TEMP71 = X10_TEMP70;


									final Point2 RX10_TEMP68 = new Point2(i, j1,X10_TEMP43);
									
Program.globalPointerHashMap.get(X10_TEMP43).add(RX10_TEMP68.hashCode());


									final Dist2 RX10_TEMP69 = f.distValue;


									final Region2 RX10_TEMP70 = RX10_TEMP69.dReg;


									final int RX10_TEMP71 = Program.searchPointInRegion2(RX10_TEMP70, RX10_TEMP68,X10_TEMP43);


									final int RX10_TEMP72 = 0;


									final boolean RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72;

									if(RX10_TEMP73)
										{

										String RX10_TEMP74 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP74);

										}

									final int RX10_TEMP75 = Program.getPlaceFromDist2(RX10_TEMP69, RX10_TEMP71,X10_TEMP43);


									final int RX10_TEMP77 = 0;


									final boolean RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77;

									if(RX10_TEMP78)
										{

										String RX10_TEMP76 = "Bad place access for array f";

										throw new RuntimeException(RX10_TEMP76);

										}
									Program.setRefArrayValue2Complex(f, RX10_TEMP71, X10_TEMP71,X10_TEMP43);

									final Complex X10_TEMP76 = Program.Complex_sub(s, t2,X10_TEMP43);


									final Complex X10_TEMP78 = Program.Complex_getConjg(X10_TEMP76,X10_TEMP43);


									final double X10_TEMP80 = X10_TEMP0.invN;


									final Complex X10_TEMP83 = Program.Complex_multS(X10_TEMP78, X10_TEMP80,X10_TEMP43);


									final Complex X10_TEMP84 = X10_TEMP83;


									final Point2 RX10_TEMP79 = new Point2(i, j2,X10_TEMP43);
									
Program.globalPointerHashMap.get(X10_TEMP43).add(RX10_TEMP79.hashCode());


									final Dist2 RX10_TEMP80 = f.distValue;


									final Region2 RX10_TEMP81 = RX10_TEMP80.dReg;


									final int RX10_TEMP82 = Program.searchPointInRegion2(RX10_TEMP81, RX10_TEMP79,X10_TEMP43);


									final int RX10_TEMP83 = 0;


									final boolean RX10_TEMP84 = RX10_TEMP82 < RX10_TEMP83;

									if(RX10_TEMP84)
										{

										String RX10_TEMP85 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP85);

										}

									final int RX10_TEMP86 = Program.getPlaceFromDist2(RX10_TEMP80, RX10_TEMP82,X10_TEMP43);


									final int RX10_TEMP88 = 0;


									final boolean RX10_TEMP89 = RX10_TEMP86 != RX10_TEMP88;

									if(RX10_TEMP89)
										{

										String RX10_TEMP87 = "Bad place access for array f";

										throw new RuntimeException(RX10_TEMP87);

										}
									Program.setRefArrayValue2Complex(f, RX10_TEMP82, X10_TEMP84,X10_TEMP43);
									}
								}
							}
						}

					final Region2 X10_TEMP89 = Program.createNewRegion2AR(rLocal1, nxhh, nxhh,myUniquePlacePoint);


					final int X10_TEMP90 = 0;


					final int RX10_TEMP93 = 1;


					int RX10_TEMP91 = X10_TEMP89.regSize;


					RX10_TEMP91 = RX10_TEMP91 - RX10_TEMP93;


					final int  RX10_TEMP92 = RX10_TEMP91+1;

					for(int RX10_TEMP90=0; RX10_TEMP90 < RX10_TEMP92; RX10_TEMP90++)
						{

						final int RX10_TEMP94 = RX10_TEMP90;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP89, RX10_TEMP94,myUniquePlacePoint);

						//async(X10_TEMP90)
							{

							int X10_TEMP93 = 1;


							int X10_TEMP94 = 0;


							int RX10_TEMP95 = pt.f0;


							int RX10_TEMP96 = pt.f1;


							RX10_TEMP95 = RX10_TEMP95 * X10_TEMP93;


							RX10_TEMP96 = RX10_TEMP96 * X10_TEMP94;


							final Point2 pt0 = new Point2(RX10_TEMP95, RX10_TEMP96,X10_TEMP90);
							
Program.globalPointerHashMap.get(X10_TEMP90).add(pt0.hashCode());


							final Dist2 RX10_TEMP97 = f.distValue;


							final Region2 RX10_TEMP98 = RX10_TEMP97.dReg;


							final int RX10_TEMP99 = Program.searchPointInRegion2(RX10_TEMP98, pt0,X10_TEMP90);


							final int RX10_TEMP100 = 0;


							final boolean RX10_TEMP101 = RX10_TEMP99 < RX10_TEMP100;

							if(RX10_TEMP101)
								{

								String RX10_TEMP102 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP102);

								}

							final int RX10_TEMP103 = Program.getPlaceFromDist2(RX10_TEMP97, RX10_TEMP99,X10_TEMP90);


							final int RX10_TEMP105 = 0;


							final boolean RX10_TEMP106 = RX10_TEMP103 != RX10_TEMP105;

							if(RX10_TEMP106)
								{

								String RX10_TEMP104 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP104);

								}

							final Complex RX10_TEMP107 = Program.getRefArrayValue2Complex(f, RX10_TEMP99,X10_TEMP90);


							final Complex t1 = RX10_TEMP107;


							final Dist2 RX10_TEMP108 = f.distValue;


							final Region2 RX10_TEMP109 = RX10_TEMP108.dReg;


							final int RX10_TEMP110 = Program.searchPointInRegion2(RX10_TEMP109, pt,X10_TEMP90);


							final int RX10_TEMP111 = 0;


							final boolean RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111;

							if(RX10_TEMP112)
								{

								String RX10_TEMP113 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP113);

								}

							final int RX10_TEMP114 = Program.getPlaceFromDist2(RX10_TEMP108, RX10_TEMP110,X10_TEMP90);


							final int RX10_TEMP116 = 0;


							final boolean RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116;

							if(RX10_TEMP117)
								{

								String RX10_TEMP115 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP115);

								}

							final Complex RX10_TEMP118 = Program.getRefArrayValue2Complex(f, RX10_TEMP110,X10_TEMP90);


							final Complex t2 = RX10_TEMP118;


							final double t1Real = Program.Complex_getReal(t1,X10_TEMP90);


							final double t1Imag = Program.Complex_getImag(t1,X10_TEMP90);


							double X10_TEMP104 = t1Real + t1Imag;


							double X10_TEMP105 = t1Real - t1Imag;


							final Complex t3 = new Complex(X10_TEMP104, X10_TEMP105,X10_TEMP90);
							
Program.globalPointerHashMap.get(X10_TEMP90).add(t3.hashCode());


							final Complex X10_TEMP109 = Program.Complex_getConjg(t2,X10_TEMP90);


							final double X10_TEMP110 = 2;


							final double X10_TEMP111 = X10_TEMP0.invN;


							final double X10_TEMP113 = X10_TEMP110 * X10_TEMP111;


							final Complex X10_TEMP116 = Program.Complex_multS(X10_TEMP109, X10_TEMP113,X10_TEMP90);


							final Complex X10_TEMP117 = X10_TEMP116;


							final Dist2 RX10_TEMP119 = f.distValue;


							final Region2 RX10_TEMP120 = RX10_TEMP119.dReg;


							final int RX10_TEMP121 = Program.searchPointInRegion2(RX10_TEMP120, pt,X10_TEMP90);


							final int RX10_TEMP122 = 0;


							final boolean RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122;

							if(RX10_TEMP123)
								{

								String RX10_TEMP124 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP124);

								}

							final int RX10_TEMP125 = Program.getPlaceFromDist2(RX10_TEMP119, RX10_TEMP121,X10_TEMP90);


							final int RX10_TEMP127 = 0;


							final boolean RX10_TEMP128 = RX10_TEMP125 != RX10_TEMP127;

							if(RX10_TEMP128)
								{

								String RX10_TEMP126 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP126);

								}
							Program.setRefArrayValue2Complex(f, RX10_TEMP121, X10_TEMP117,X10_TEMP90);

							final double X10_TEMP119 = 2;


							final double X10_TEMP120 = X10_TEMP0.invN;


							final double X10_TEMP122 = X10_TEMP119 * X10_TEMP120;


							final Complex X10_TEMP125 = Program.Complex_multS(t3, X10_TEMP122,X10_TEMP90);


							final Complex X10_TEMP126 = X10_TEMP125;


							final Dist2 RX10_TEMP129 = f.distValue;


							final Region2 RX10_TEMP130 = RX10_TEMP129.dReg;


							final int RX10_TEMP131 = Program.searchPointInRegion2(RX10_TEMP130, pt0,X10_TEMP90);


							final int RX10_TEMP132 = 0;


							final boolean RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132;

							if(RX10_TEMP133)
								{

								String RX10_TEMP134 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP134);

								}

							final int RX10_TEMP135 = Program.getPlaceFromDist2(RX10_TEMP129, RX10_TEMP131,X10_TEMP90);


							final int RX10_TEMP137 = 0;


							final boolean RX10_TEMP138 = RX10_TEMP135 != RX10_TEMP137;

							if(RX10_TEMP138)
								{

								String RX10_TEMP136 = "Bad place access for array f";

								throw new RuntimeException(RX10_TEMP136);

								}
							Program.setRefArrayValue2Complex(f, RX10_TEMP131, X10_TEMP126,X10_TEMP90);
							}
						}
					}
				}
			}
		}
public static void FourierTransform2D_scrambleY ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{
		/*FINISH
*/			{

			final int X10_TEMP2 = 0;

			//async(X10_TEMP2)
				{

				final int X10_TEMP10 = 1;


				final int X10_TEMP4 = X10_TEMP0.length1;


				final int X10_TEMP5 = 2;


				final int X10_TEMP7 = X10_TEMP4 / X10_TEMP5;


				final int X10_TEMP8 = 1;


				final int X10_TEMP11 = X10_TEMP7 - X10_TEMP8;


				final Region1 X10_TEMP13 = Program.createNewRegion1R(X10_TEMP10, X10_TEMP11,X10_TEMP2);


				final int X10_TEMP14 = 0;


				final int RX10_TEMP4 = 1;


				int RX10_TEMP2 = X10_TEMP13.regSize;


				RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


				final int  RX10_TEMP3 = RX10_TEMP2+1;

				for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
					{

					final int RX10_TEMP5 = RX10_TEMP0;


					final Point1 RX10_TEMP1 = Program.regionOrdinalPoint1(X10_TEMP13, RX10_TEMP5,X10_TEMP2);


					final int j1 = RX10_TEMP1.f0;

					//async(X10_TEMP14)
						{

						final int X10_TEMP15 = X10_TEMP0.length1;


						final int j2 = X10_TEMP15 - j1;


						final int X10_TEMP19 = 0;


						final Point2 RX10_TEMP6 = new Point2(X10_TEMP19, j2,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP6.hashCode());


						final Dist2 RX10_TEMP7 = f.distValue;


						final Region2 RX10_TEMP8 = RX10_TEMP7.dReg;


						final int RX10_TEMP9 = Program.searchPointInRegion2(RX10_TEMP8, RX10_TEMP6,X10_TEMP14);


						final int RX10_TEMP10 = 0;


						final boolean RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10;

						if(RX10_TEMP11)
							{

							String RX10_TEMP12 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP12);

							}

						final int RX10_TEMP13 = Program.getPlaceFromDist2(RX10_TEMP7, RX10_TEMP9,X10_TEMP14);


						final int RX10_TEMP15 = 0;


						final boolean RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15;

						if(RX10_TEMP16)
							{

							String RX10_TEMP14 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP14);

							}

						final Complex RX10_TEMP17 = Program.getRefArrayValue2Complex(f, RX10_TEMP9,X10_TEMP14);


						final Complex t1 = RX10_TEMP17;


						final int X10_TEMP23 = 0;


						final Point2 RX10_TEMP18 = new Point2(X10_TEMP23, j1,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP18.hashCode());


						final Dist2 RX10_TEMP19 = f.distValue;


						final Region2 RX10_TEMP20 = RX10_TEMP19.dReg;


						final int RX10_TEMP21 = Program.searchPointInRegion2(RX10_TEMP20, RX10_TEMP18,X10_TEMP14);


						final int RX10_TEMP22 = 0;


						final boolean RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22;

						if(RX10_TEMP23)
							{

							String RX10_TEMP24 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP24);

							}

						final int RX10_TEMP25 = Program.getPlaceFromDist2(RX10_TEMP19, RX10_TEMP21,X10_TEMP14);


						final int RX10_TEMP27 = 0;


						final boolean RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27;

						if(RX10_TEMP28)
							{

							String RX10_TEMP26 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP26);

							}

						final Complex RX10_TEMP29 = Program.getRefArrayValue2Complex(f, RX10_TEMP21,X10_TEMP14);


						final Complex t2 = RX10_TEMP29;


						double X10_TEMP27 = Program.Complex_getImag(t1,X10_TEMP14);


						double X10_TEMP28 = Program.Complex_getReal(t1,X10_TEMP14);


						final Complex s = new Complex(X10_TEMP27, X10_TEMP28,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(s.hashCode());


						final int X10_TEMP32 = 0;


						final Complex X10_TEMP35 = Program.Complex_sub(t2, s,X10_TEMP14);


						final Complex X10_TEMP38 = Program.Complex_getConjg(X10_TEMP35,X10_TEMP14);


						final Complex X10_TEMP39 = X10_TEMP38;


						final Point2 RX10_TEMP30 = new Point2(X10_TEMP32, j2,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP30.hashCode());


						final Dist2 RX10_TEMP31 = f.distValue;


						final Region2 RX10_TEMP32 = RX10_TEMP31.dReg;


						final int RX10_TEMP33 = Program.searchPointInRegion2(RX10_TEMP32, RX10_TEMP30,X10_TEMP14);


						final int RX10_TEMP34 = 0;


						final boolean RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34;

						if(RX10_TEMP35)
							{

							String RX10_TEMP36 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP36);

							}

						final int RX10_TEMP37 = Program.getPlaceFromDist2(RX10_TEMP31, RX10_TEMP33,X10_TEMP14);


						final int RX10_TEMP39 = 0;


						final boolean RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39;

						if(RX10_TEMP40)
							{

							String RX10_TEMP38 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP38);

							}
						Program.setRefArrayValue2Complex(f, RX10_TEMP33, X10_TEMP39,X10_TEMP14);

						final int X10_TEMP42 = 0;


						final Complex X10_TEMP46 = Program.Complex_add(t2, s,X10_TEMP14);


						final Complex X10_TEMP47 = X10_TEMP46;


						final Point2 RX10_TEMP41 = new Point2(X10_TEMP42, j1,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP41.hashCode());


						final Dist2 RX10_TEMP42 = f.distValue;


						final Region2 RX10_TEMP43 = RX10_TEMP42.dReg;


						final int RX10_TEMP44 = Program.searchPointInRegion2(RX10_TEMP43, RX10_TEMP41,X10_TEMP14);


						final int RX10_TEMP45 = 0;


						final boolean RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45;

						if(RX10_TEMP46)
							{

							String RX10_TEMP47 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP47);

							}

						final int RX10_TEMP48 = Program.getPlaceFromDist2(RX10_TEMP42, RX10_TEMP44,X10_TEMP14);


						final int RX10_TEMP50 = 0;


						final boolean RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50;

						if(RX10_TEMP51)
							{

							String RX10_TEMP49 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP49);

							}
						Program.setRefArrayValue2Complex(f, RX10_TEMP44, X10_TEMP47,X10_TEMP14);
						}
					}
				}
			}
		}
public static void FourierTransform2D_unscrambleY ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, int myUniquePlacePoint)
		{
		/*FINISH
*/			{

			final int X10_TEMP2 = 0;

			//async(X10_TEMP2)
				{

				final int X10_TEMP10 = 1;


				final int X10_TEMP4 = X10_TEMP0.length1;


				final int X10_TEMP5 = 2;


				final int X10_TEMP7 = X10_TEMP4 / X10_TEMP5;


				final int X10_TEMP8 = 1;


				final int X10_TEMP11 = X10_TEMP7 - X10_TEMP8;


				final Region1 X10_TEMP13 = Program.createNewRegion1R(X10_TEMP10, X10_TEMP11,X10_TEMP2);


				final int X10_TEMP14 = 0;


				final int RX10_TEMP4 = 1;


				int RX10_TEMP2 = X10_TEMP13.regSize;


				RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


				final int  RX10_TEMP3 = RX10_TEMP2+1;

				for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
					{

					final int RX10_TEMP5 = RX10_TEMP0;


					final Point1 RX10_TEMP1 = Program.regionOrdinalPoint1(X10_TEMP13, RX10_TEMP5,X10_TEMP2);


					final int j1 = RX10_TEMP1.f0;

					//async(X10_TEMP14)
						{

						final int X10_TEMP15 = X10_TEMP0.length1;


						final int j2 = X10_TEMP15 - j1;


						final int X10_TEMP19 = 0;


						final Point2 RX10_TEMP6 = new Point2(X10_TEMP19, j2,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP6.hashCode());


						final Dist2 RX10_TEMP7 = f.distValue;


						final Region2 RX10_TEMP8 = RX10_TEMP7.dReg;


						final int RX10_TEMP9 = Program.searchPointInRegion2(RX10_TEMP8, RX10_TEMP6,X10_TEMP14);


						final int RX10_TEMP10 = 0;


						final boolean RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10;

						if(RX10_TEMP11)
							{

							String RX10_TEMP12 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP12);

							}

						final int RX10_TEMP13 = Program.getPlaceFromDist2(RX10_TEMP7, RX10_TEMP9,X10_TEMP14);


						final int RX10_TEMP15 = 0;


						final boolean RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15;

						if(RX10_TEMP16)
							{

							String RX10_TEMP14 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP14);

							}

						final Complex RX10_TEMP17 = Program.getRefArrayValue2Complex(f, RX10_TEMP9,X10_TEMP14);


						final Complex s = RX10_TEMP17;


						final int X10_TEMP23 = 0;


						final Point2 RX10_TEMP18 = new Point2(X10_TEMP23, j1,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP18.hashCode());


						final Dist2 RX10_TEMP19 = f.distValue;


						final Region2 RX10_TEMP20 = RX10_TEMP19.dReg;


						final int RX10_TEMP21 = Program.searchPointInRegion2(RX10_TEMP20, RX10_TEMP18,X10_TEMP14);


						final int RX10_TEMP22 = 0;


						final boolean RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22;

						if(RX10_TEMP23)
							{

							String RX10_TEMP24 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP24);

							}

						final int RX10_TEMP25 = Program.getPlaceFromDist2(RX10_TEMP19, RX10_TEMP21,X10_TEMP14);


						final int RX10_TEMP27 = 0;


						final boolean RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27;

						if(RX10_TEMP28)
							{

							String RX10_TEMP26 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP26);

							}

						final Complex RX10_TEMP29 = Program.getRefArrayValue2Complex(f, RX10_TEMP21,X10_TEMP14);


						final Complex t = RX10_TEMP29;


						final Complex t1 = Program.Complex_add(t, s,X10_TEMP14);


						final Complex t2 = Program.Complex_sub(t, s,X10_TEMP14);


						final int X10_TEMP31 = 0;


						double X10_TEMP34 = Program.Complex_getImag(t1,X10_TEMP14);


						double X10_TEMP35 = Program.Complex_getReal(t2,X10_TEMP14);


						final Complex X10_TEMP37 = new Complex(X10_TEMP34, X10_TEMP35,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(X10_TEMP37.hashCode());


						final double X10_TEMP39 = 0.5;


						final Complex X10_TEMP42 = Program.Complex_multS(X10_TEMP37, X10_TEMP39,X10_TEMP14);


						final Complex X10_TEMP43 = X10_TEMP42;


						final Point2 RX10_TEMP30 = new Point2(X10_TEMP31, j2,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP30.hashCode());


						final Dist2 RX10_TEMP31 = f.distValue;


						final Region2 RX10_TEMP32 = RX10_TEMP31.dReg;


						final int RX10_TEMP33 = Program.searchPointInRegion2(RX10_TEMP32, RX10_TEMP30,X10_TEMP14);


						final int RX10_TEMP34 = 0;


						final boolean RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34;

						if(RX10_TEMP35)
							{

							String RX10_TEMP36 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP36);

							}

						final int RX10_TEMP37 = Program.getPlaceFromDist2(RX10_TEMP31, RX10_TEMP33,X10_TEMP14);


						final int RX10_TEMP39 = 0;


						final boolean RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39;

						if(RX10_TEMP40)
							{

							String RX10_TEMP38 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP38);

							}
						Program.setRefArrayValue2Complex(f, RX10_TEMP33, X10_TEMP43,X10_TEMP14);

						final int X10_TEMP46 = 0;


						double X10_TEMP49 = Program.Complex_getReal(t1,X10_TEMP14);


						double X10_TEMP50 = Program.Complex_getImag(t2,X10_TEMP14);


						final Complex X10_TEMP52 = new Complex(X10_TEMP49, X10_TEMP50,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(X10_TEMP52.hashCode());


						final double X10_TEMP54 = 0.5;


						final Complex X10_TEMP57 = Program.Complex_multS(X10_TEMP52, X10_TEMP54,X10_TEMP14);


						final Complex X10_TEMP58 = X10_TEMP57;


						final Point2 RX10_TEMP41 = new Point2(X10_TEMP46, j1,X10_TEMP14);
						
Program.globalPointerHashMap.get(X10_TEMP14).add(RX10_TEMP41.hashCode());


						final Dist2 RX10_TEMP42 = f.distValue;


						final Region2 RX10_TEMP43 = RX10_TEMP42.dReg;


						final int RX10_TEMP44 = Program.searchPointInRegion2(RX10_TEMP43, RX10_TEMP41,X10_TEMP14);


						final int RX10_TEMP45 = 0;


						final boolean RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45;

						if(RX10_TEMP46)
							{

							String RX10_TEMP47 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP47);

							}

						final int RX10_TEMP48 = Program.getPlaceFromDist2(RX10_TEMP42, RX10_TEMP44,X10_TEMP14);


						final int RX10_TEMP50 = 0;


						final boolean RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50;

						if(RX10_TEMP51)
							{

							String RX10_TEMP49 = "Bad place access for array f";

							throw new RuntimeException(RX10_TEMP49);

							}
						Program.setRefArrayValue2Complex(f, RX10_TEMP44, X10_TEMP58,X10_TEMP14);
						}
					}
				}
			}
		}
public static void FourierTransform2D_transformRank ( final FourierTransform2D X10_TEMP0, final ComplexRefArray2 f, final int rnk, final boolean inverse, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = X10_TEMP0.length1;


		final int X10_TEMP4 = X10_TEMP0.length2;


		final int nxy = Program.X10Util_maxInt(X10_TEMP3, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP6 = X10_TEMP0.length2;


		final int X10_TEMP7 = 2;


		final int nxh = X10_TEMP6 / X10_TEMP7;


		final int X10_TEMP9 = X10_TEMP0.length1;


		final int X10_TEMP10 = 2;


		final int nyh = X10_TEMP9 / X10_TEMP10;


		final int X10_TEMP12 = X10_TEMP0.length2;


		final int X10_TEMP13 = 4;


		final int nxhh = X10_TEMP12 / X10_TEMP13;


		final int X10_TEMP15 = 0;


		final boolean X10_TEMP17 = rnk == X10_TEMP15;


		final boolean X10_TEMP18 = X10_TEMP17;


		final int X10_TEMP20 = X10_TEMP0.nBits2;


		final int X10_TEMP21 = 1;


		int X10_TEMP23 = X10_TEMP20 - X10_TEMP21;

		if(X10_TEMP18)
			{

			X10_TEMP23 = X10_TEMP0.nBits1;

			}

		final int X10_TEMP24 = X10_TEMP23;


		final int bits = X10_TEMP24;


		final int X10_TEMP25 = 0;


		final boolean X10_TEMP27 = rnk == X10_TEMP25;


		final boolean X10_TEMP28 = X10_TEMP27;


		int X10_TEMP31 = nxh;

		if(X10_TEMP28)
			{

			X10_TEMP31 = X10_TEMP0.length1;

			}

		final int X10_TEMP32 = X10_TEMP31;


		final int X10_TEMP33 = X10_TEMP32;


		final int r = nxy / X10_TEMP33;


		final int X10_TEMP38 = 0;


		final int X10_TEMP36 = 1;


		final int X10_TEMP39 = bits - X10_TEMP36;


		final Region1 X10_TEMP41 = Program.createNewRegion1R(X10_TEMP38, X10_TEMP39,myUniquePlacePoint);


		final int RX10_TEMP3 = 1;


		int RX10_TEMP1 = X10_TEMP41.regSize;


		RX10_TEMP1 = RX10_TEMP1 - RX10_TEMP3;


		final int  RX10_TEMP2 = RX10_TEMP1+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP2; RX10_TEMP0++)
			{

			final int RX10_TEMP4 = RX10_TEMP0;


			final Point1 exponent = Program.regionOrdinalPoint1(X10_TEMP41, RX10_TEMP4,myUniquePlacePoint);


			final int X10_TEMP43 = 1;


			final int X10_TEMP44 = exponent.f0;


			final int stride = X10_TEMP43 << X10_TEMP44;


			final int X10_TEMP46 = 2;


			final int width = X10_TEMP46 * stride;


			final int X10_TEMP48 = 0;


			final boolean X10_TEMP50 = rnk == X10_TEMP48;


			final boolean X10_TEMP51 = X10_TEMP50;


			int X10_TEMP54 = nxhh;

			if(X10_TEMP51)
				{

				X10_TEMP54 = nyh;

				}

			final int X10_TEMP55 = X10_TEMP54;


			final int X10_TEMP56 = X10_TEMP55;


			final int km = X10_TEMP56 / stride;


			final int kmr = km * r;

			/*FINISH
*/				{

				final Dist1 X10_TEMP60 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP60.dReg;


				final int RX10_TEMP9 = 1;


				int RX10_TEMP7 = RX10_TEMP6.regSize;


				RX10_TEMP7 = RX10_TEMP7 - RX10_TEMP9;


				final int  RX10_TEMP8 = RX10_TEMP7+1;

				for(int RX10_TEMP5=0; RX10_TEMP5 < RX10_TEMP8; RX10_TEMP5++)
					{

					final int RX10_TEMP10 = RX10_TEMP5;


					final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP6, RX10_TEMP10,myUniquePlacePoint);


					final Region1 RX10_TEMP11 = X10_TEMP60.dReg;


					final int RX10_TEMP12 = Program.searchPointInRegion1(RX10_TEMP11, pl,myUniquePlacePoint);


					final int RX10_TEMP13 = 0;


					final boolean RX10_TEMP14 = RX10_TEMP12 < RX10_TEMP13;

					if(RX10_TEMP14)
						{

						final String RX10_TEMP15 = "Point pl not found in the distribution X10_TEMP60.";

						throw new RuntimeException(RX10_TEMP15);

						}

					final int RX10_TEMP16 = Program.getPlaceFromDist1(X10_TEMP60, RX10_TEMP12,myUniquePlacePoint);


					final int X10_TEMP61 = RX10_TEMP16;

					//async(X10_TEMP61)
						{

						final int X10_TEMP65 = 0;


						final int X10_TEMP63 = 1;


						final int X10_TEMP66 = km - X10_TEMP63;


						final Region1 X10_TEMP68 = Program.createNewRegion1R(X10_TEMP65, X10_TEMP66,X10_TEMP61);


						final int RX10_TEMP21 = 1;


						int RX10_TEMP19 = X10_TEMP68.regSize;


						RX10_TEMP19 = RX10_TEMP19 - RX10_TEMP21;


						final int  RX10_TEMP20 = RX10_TEMP19+1;

						for(int RX10_TEMP17=0; RX10_TEMP17 < RX10_TEMP20; RX10_TEMP17++)
							{

							final int RX10_TEMP22 = RX10_TEMP17;


							final Point1 RX10_TEMP18 = Program.regionOrdinalPoint1(X10_TEMP68, RX10_TEMP22,X10_TEMP61);


							final int k = RX10_TEMP18.f0;


							final int lb = width * k;


							final int mb = lb + stride;

							/*FINISH
*/								{

								final int X10_TEMP74 = 0;


								final int X10_TEMP72 = 1;


								final int X10_TEMP75 = stride - X10_TEMP72;


								final Region1 X10_TEMP77 = Program.createNewRegion1R(X10_TEMP74, X10_TEMP75,X10_TEMP61);


								final int X10_TEMP78 = 0;


								final int RX10_TEMP27 = 1;


								int RX10_TEMP25 = X10_TEMP77.regSize;


								RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27;


								final int  RX10_TEMP26 = RX10_TEMP25+1;

								for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP26; RX10_TEMP23++)
									{

									final int RX10_TEMP28 = RX10_TEMP23;


									final Point1 RX10_TEMP24 = Program.regionOrdinalPoint1(X10_TEMP77, RX10_TEMP28,X10_TEMP61);


									final int j = RX10_TEMP24.f0;

									//async(X10_TEMP78)
										{

										final int j1 = j + lb;


										final int j2 = j + mb;


										final boolean X10_TEMP82 = inverse;


										final boolean X10_TEMP83 = X10_TEMP82;


										final ComplexValArray1 X10_TEMP84 = X10_TEMP0.tableSineCosine;


										final int X10_TEMP86 = kmr * j;


										final ComplexValArray1 X10_TEMP88 = X10_TEMP0.tableSineCosine;


										final int X10_TEMP90 = kmr * j;


										final Point1 RX10_TEMP29 = new Point1(X10_TEMP90,X10_TEMP78);
										
Program.globalPointerHashMap.get(X10_TEMP78).add(RX10_TEMP29.hashCode());


										final Region1 RX10_TEMP30 = X10_TEMP88.regionValue;


										final int RX10_TEMP31 = Program.searchPointInRegion1(RX10_TEMP30, RX10_TEMP29,X10_TEMP78);


										final int RX10_TEMP32 = 0;


										final boolean RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32;

										if(RX10_TEMP33)
											{

											String RX10_TEMP34 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP34);

											}

										final Complex[] RX10_TEMP35 = (Complex[])(X10_TEMP88.contents);


										final Complex X10_TEMP91 = RX10_TEMP35[RX10_TEMP31];


										Complex X10_TEMP93 = Program.Complex_getConjg(X10_TEMP91,X10_TEMP78);

										if(X10_TEMP83)
											{

											final Point1 RX10_TEMP36 = new Point1(X10_TEMP86,X10_TEMP78);
											
Program.globalPointerHashMap.get(X10_TEMP78).add(RX10_TEMP36.hashCode());


											final Region1 RX10_TEMP37 = X10_TEMP84.regionValue;


											final int RX10_TEMP38 = Program.searchPointInRegion1(RX10_TEMP37, RX10_TEMP36,X10_TEMP78);


											final int RX10_TEMP39 = 0;


											final boolean RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39;

											if(RX10_TEMP40)
												{

												String RX10_TEMP41 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP41);

												}

											final Complex[] RX10_TEMP42 = (Complex[])(X10_TEMP84.contents);


											X10_TEMP93 = RX10_TEMP42[RX10_TEMP38];

											}

										final Complex X10_TEMP94 = X10_TEMP93;


										final Complex X10_TEMP95 = X10_TEMP94;


										final Complex s = X10_TEMP95;


										final Dist2 RX10_TEMP43 = f.distValue;


										final Dist2 dF = RX10_TEMP43;


										final int X10_TEMP100 = 0;


										final Region1 rLocal1 = Program.X10Util_getLRank2D(dF, X10_TEMP100,X10_TEMP78);


										final int X10_TEMP103 = 0;


										final int RX10_TEMP48 = 1;


										int RX10_TEMP46 = rLocal1.regSize;


										RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP48;


										final int  RX10_TEMP47 = RX10_TEMP46+1;

										for(int RX10_TEMP44=0; RX10_TEMP44 < RX10_TEMP47; RX10_TEMP44++)
											{

											final int RX10_TEMP49 = RX10_TEMP44;


											final Point1 RX10_TEMP45 = Program.regionOrdinalPoint1(rLocal1, RX10_TEMP49,X10_TEMP78);


											final int i = RX10_TEMP45.f0;

											//async(X10_TEMP103)
												{

												final Point2 RX10_TEMP50 = new Point2(i, j1,X10_TEMP103);
												
Program.globalPointerHashMap.get(X10_TEMP103).add(RX10_TEMP50.hashCode());


												final Dist2 RX10_TEMP51 = f.distValue;


												final Region2 RX10_TEMP52 = RX10_TEMP51.dReg;


												final int RX10_TEMP53 = Program.searchPointInRegion2(RX10_TEMP52, RX10_TEMP50,X10_TEMP103);


												final int RX10_TEMP54 = 0;


												final boolean RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54;

												if(RX10_TEMP55)
													{

													String RX10_TEMP56 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP56);

													}

												final int RX10_TEMP57 = Program.getPlaceFromDist2(RX10_TEMP51, RX10_TEMP53,X10_TEMP103);


												final int RX10_TEMP59 = 0;


												final boolean RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59;

												if(RX10_TEMP60)
													{

													String RX10_TEMP58 = "Bad place access for array f";

													throw new RuntimeException(RX10_TEMP58);

													}

												final Complex RX10_TEMP61 = Program.getRefArrayValue2Complex(f, RX10_TEMP53,X10_TEMP103);


												final Complex tmp1 = RX10_TEMP61;


												final Point2 RX10_TEMP62 = new Point2(i, j2,X10_TEMP103);
												
Program.globalPointerHashMap.get(X10_TEMP103).add(RX10_TEMP62.hashCode());


												final Dist2 RX10_TEMP63 = f.distValue;


												final Region2 RX10_TEMP64 = RX10_TEMP63.dReg;


												final int RX10_TEMP65 = Program.searchPointInRegion2(RX10_TEMP64, RX10_TEMP62,X10_TEMP103);


												final int RX10_TEMP66 = 0;


												final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

												if(RX10_TEMP67)
													{

													String RX10_TEMP68 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP68);

													}

												final int RX10_TEMP69 = Program.getPlaceFromDist2(RX10_TEMP63, RX10_TEMP65,X10_TEMP103);


												final int RX10_TEMP71 = 0;


												final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

												if(RX10_TEMP72)
													{

													String RX10_TEMP70 = "Bad place access for array f";

													throw new RuntimeException(RX10_TEMP70);

													}

												final Complex RX10_TEMP73 = Program.getRefArrayValue2Complex(f, RX10_TEMP65,X10_TEMP103);


												final Complex X10_TEMP110 = RX10_TEMP73;


												final Complex tmp2 = Program.Complex_mult(s, X10_TEMP110,X10_TEMP103);


												final Complex X10_TEMP117 = Program.Complex_sub(tmp1, tmp2,X10_TEMP103);


												final Complex X10_TEMP118 = X10_TEMP117;


												final Point2 RX10_TEMP74 = new Point2(i, j2,X10_TEMP103);
												
Program.globalPointerHashMap.get(X10_TEMP103).add(RX10_TEMP74.hashCode());


												final Dist2 RX10_TEMP75 = f.distValue;


												final Region2 RX10_TEMP76 = RX10_TEMP75.dReg;


												final int RX10_TEMP77 = Program.searchPointInRegion2(RX10_TEMP76, RX10_TEMP74,X10_TEMP103);


												final int RX10_TEMP78 = 0;


												final boolean RX10_TEMP79 = RX10_TEMP77 < RX10_TEMP78;

												if(RX10_TEMP79)
													{

													String RX10_TEMP80 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP80);

													}

												final int RX10_TEMP81 = Program.getPlaceFromDist2(RX10_TEMP75, RX10_TEMP77,X10_TEMP103);


												final int RX10_TEMP83 = 0;


												final boolean RX10_TEMP84 = RX10_TEMP81 != RX10_TEMP83;

												if(RX10_TEMP84)
													{

													String RX10_TEMP82 = "Bad place access for array f";

													throw new RuntimeException(RX10_TEMP82);

													}
												Program.setRefArrayValue2Complex(f, RX10_TEMP77, X10_TEMP118,X10_TEMP103);

												final Complex X10_TEMP124 = Program.Complex_add(tmp1, tmp2,X10_TEMP103);


												final Complex X10_TEMP125 = X10_TEMP124;


												final Point2 RX10_TEMP85 = new Point2(i, j1,X10_TEMP103);
												
Program.globalPointerHashMap.get(X10_TEMP103).add(RX10_TEMP85.hashCode());


												final Dist2 RX10_TEMP86 = f.distValue;


												final Region2 RX10_TEMP87 = RX10_TEMP86.dReg;


												final int RX10_TEMP88 = Program.searchPointInRegion2(RX10_TEMP87, RX10_TEMP85,X10_TEMP103);


												final int RX10_TEMP89 = 0;


												final boolean RX10_TEMP90 = RX10_TEMP88 < RX10_TEMP89;

												if(RX10_TEMP90)
													{

													String RX10_TEMP91 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP91);

													}

												final int RX10_TEMP92 = Program.getPlaceFromDist2(RX10_TEMP86, RX10_TEMP88,X10_TEMP103);


												final int RX10_TEMP94 = 0;


												final boolean RX10_TEMP95 = RX10_TEMP92 != RX10_TEMP94;

												if(RX10_TEMP95)
													{

													String RX10_TEMP93 = "Bad place access for array f";

													throw new RuntimeException(RX10_TEMP93);

													}
												Program.setRefArrayValue2Complex(f, RX10_TEMP88, X10_TEMP125,X10_TEMP103);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
public static String FourierTransform2D_toString ( final FourierTransform2D X10_TEMP0, int myUniquePlacePoint)
		{

		final String X10_TEMP1 = "FourierTransform: xbits = ";


		final int X10_TEMP2 = X10_TEMP0.nBits1;


		final String X10_TEMP3 = X10_TEMP1 + X10_TEMP2;


		final String X10_TEMP4 = " ybits = ";


		final String X10_TEMP5 = X10_TEMP3 + X10_TEMP4;


		final int X10_TEMP6 = X10_TEMP0.nBits2;


		final String X10_TEMP8 = X10_TEMP5 + X10_TEMP6;

		return X10_TEMP8;
		}
public static void runMain (  int myUniquePlacePoint)
		{

		Timer tmr = new Timer(myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(tmr.hashCode());


		int count = 0;

		Program.Timer_start(tmr, count,myUniquePlacePoint);

		final LinearESOpenPIC2D X10_TEMP4 = new LinearESOpenPIC2D(myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP4.hashCode());

		Program.LinearESOpenPIC2D_run(X10_TEMP4,myUniquePlacePoint);
		Program.Timer_stop(tmr, count,myUniquePlacePoint);

		final String X10_TEMP7 = "Wall-clock time for plasma: ";


		final double X10_TEMP8 = Program.Timer_readTimer(tmr, count,myUniquePlacePoint);


		final String X10_TEMP9 = X10_TEMP7 + X10_TEMP8;


		final String X10_TEMP10 = " secs";


		final String X10_TEMP12 = X10_TEMP9 + X10_TEMP10;

		System.out.println(X10_TEMP12);
		}
public static int _LinearESOpenPIC2D_NUMBER_OF_XBITS_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 2;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_NUMBER_OF_YBITS_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 3;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_XLENGTH_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 1;


		final int X10_TEMP3 = X10_TEMP1 << _LinearESOpenPIC2D_NUMBER_OF_XBITS;

		return X10_TEMP3;
		}
public static int _LinearESOpenPIC2D_YLENGTH_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 1;


		final int X10_TEMP3 = X10_TEMP1 << _LinearESOpenPIC2D_NUMBER_OF_YBITS;

		return X10_TEMP3;
		}
public static int _LinearESOpenPIC2D_PARTICLE_XDENSITY_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 4;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_PARTICLE_YDENSITY_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 8;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_NPARTICLES_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * _LinearESOpenPIC2D_PARTICLE_YDENSITY;

		return X10_TEMP2;
		}
public static double _LinearESOpenPIC2D_DELTA_TIME_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 0.2000000e+00;

		return X10_TEMP2;
		}
public static double _LinearESOpenPIC2D_ELECTRON_CHARGE_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP1 = 1.0;


		final int X10_TEMP2 = 0;


		final double X10_TEMP4 = X10_TEMP2 - X10_TEMP1;

		return X10_TEMP4;
		}
public static double _LinearESOpenPIC2D_THERMAL_XVELOCITY_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 1.0;

		return X10_TEMP2;
		}
public static double _LinearESOpenPIC2D_THERMAL_YVELOCITY_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 1.0;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_BOUNDARY_CONDITION_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 2;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_TIME_STEPS_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 325;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_SORT_TIME_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 50;

		return X10_TEMP2;
		}
public static double _LinearESOpenPIC2D_IMBALANCE_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 0.08;

		return X10_TEMP2;
		}
public static int _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_YLENGTH;


		final int X10_TEMP3 = 1;


		final int X10_TEMP5 = X10_TEMP2 / X10_TEMP3;

		return X10_TEMP5;
		}
public static int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_NPARTICLES;


		final int X10_TEMP3 = 1;


		final int X10_TEMP5 = X10_TEMP2 / X10_TEMP3;

		return X10_TEMP5;
		}
public static int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_NPARTICLES;


		final int X10_TEMP3 = 1;


		final int X10_TEMP5 = X10_TEMP2 / X10_TEMP3;

		return X10_TEMP5;
		}
public static void LinearESOpenPIC2D_run ( final LinearESOpenPIC2D X10_TEMP0, int myUniquePlacePoint)
		{

		final long X10_TEMP3 = System.currentTimeMillis();


		final long X10_TEMP4 = X10_TEMP3;

		X10_TEMP0.totalTime = (X10_TEMP4);

		final long X10_TEMP7 = System.currentTimeMillis();


		final long X10_TEMP8 = X10_TEMP7;

		X10_TEMP0.initTime = (X10_TEMP8);
		Program.LinearESOpenPIC2D_initialize(X10_TEMP0,myUniquePlacePoint);

		final long X10_TEMP9 = System.currentTimeMillis();


		final long X10_TEMP10 = X10_TEMP0.initTime;


		final long X10_TEMP13 = X10_TEMP9 - X10_TEMP10;


		final long X10_TEMP14 = X10_TEMP13;

		X10_TEMP0.initTime = (X10_TEMP14);

		final int X10_TEMP18 = 0;


		final int X10_TEMP16 = 1;


		final int X10_TEMP19 = _LinearESOpenPIC2D_TIME_STEPS - X10_TEMP16;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP18, X10_TEMP19,myUniquePlacePoint);


		final int RX10_TEMP3 = 1;


		int RX10_TEMP1 = X10_TEMP21.regSize;


		RX10_TEMP1 = RX10_TEMP1 - RX10_TEMP3;


		final int  RX10_TEMP2 = RX10_TEMP1+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP2; RX10_TEMP0++)
			{

			final int RX10_TEMP4 = RX10_TEMP0;


			final Point1 i = Program.regionOrdinalPoint1(X10_TEMP21, RX10_TEMP4,myUniquePlacePoint);


			//final String X10_TEMP23 = "T = ";


			//final int X10_TEMP24 = i.f0;


			//final String X10_TEMP26 = X10_TEMP23 + X10_TEMP24;

			//System.out.println(X10_TEMP26);

			final doubleRefArray2 X10_TEMP28 = X10_TEMP0.backgroundCharge;


			final doubleRefArray1 e = Program.LinearESOpenPIC2D_stepTime(X10_TEMP0, X10_TEMP28,myUniquePlacePoint);


			final int X10_TEMP31 = i.f0;


			final int X10_TEMP32 = X10_TEMP31 % _LinearESOpenPIC2D_SORT_TIME;


			final int X10_TEMP33 = 0;


			final boolean X10_TEMP35 = X10_TEMP32 == X10_TEMP33;

			if(X10_TEMP35)
				{

				long time = System.currentTimeMillis();


				final ParticleRefArray1 X10_TEMP40 = X10_TEMP0.particles;


				final doubleRefArray2 X10_TEMP38 = X10_TEMP0.backgroundCharge;


				final Dist2 RX10_TEMP5 = X10_TEMP38.distValue;


				final Dist2 X10_TEMP41 = RX10_TEMP5;

				Program.LinearESOpenPIC2D_sortParticles(X10_TEMP0, X10_TEMP40, X10_TEMP41,myUniquePlacePoint);

				final long X10_TEMP45 = X10_TEMP0.moveTime;


				final long X10_TEMP42 = System.currentTimeMillis();


				final long X10_TEMP44 = X10_TEMP42 - time;


				final long X10_TEMP48 = X10_TEMP45 + X10_TEMP44;


				final long X10_TEMP49 = X10_TEMP48;

				X10_TEMP0.moveTime = (X10_TEMP49);
				}

			final String X10_TEMP52 = "field, kinetic, total energies = ";


			final int X10_TEMP51 = 0;


			final Point1 RX10_TEMP6 = new Point1(X10_TEMP51,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP6.hashCode());


			final Dist1 RX10_TEMP7 = e.distValue;


			final Region1 RX10_TEMP8 = RX10_TEMP7.dReg;


			final int RX10_TEMP9 = Program.searchPointInRegion1(RX10_TEMP8, RX10_TEMP6,myUniquePlacePoint);


			final int RX10_TEMP10 = 0;


			final boolean RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10;

			if(RX10_TEMP11)
				{

				String RX10_TEMP12 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP12);

				}

			final int RX10_TEMP13 = Program.getPlaceFromDist1(RX10_TEMP7, RX10_TEMP9,myUniquePlacePoint);


			final int RX10_TEMP15 = 0;


			final boolean RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15;

			if(RX10_TEMP16)
				{

				String RX10_TEMP14 = "Bad place access for array e";

				throw new RuntimeException(RX10_TEMP14);

				}

			final double RX10_TEMP17 = Program.getRefArrayValue1double(e, RX10_TEMP9,myUniquePlacePoint);


			final double X10_TEMP53 = RX10_TEMP17;


			final String X10_TEMP54 = X10_TEMP52 + X10_TEMP53;


			final String X10_TEMP55 = ",";


			final String X10_TEMP58 = X10_TEMP54 + X10_TEMP55;


			final int X10_TEMP57 = 1;


			final Point1 RX10_TEMP18 = new Point1(X10_TEMP57,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP18.hashCode());


			final Dist1 RX10_TEMP19 = e.distValue;


			final Region1 RX10_TEMP20 = RX10_TEMP19.dReg;


			final int RX10_TEMP21 = Program.searchPointInRegion1(RX10_TEMP20, RX10_TEMP18,myUniquePlacePoint);


			final int RX10_TEMP22 = 0;


			final boolean RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22;

			if(RX10_TEMP23)
				{

				String RX10_TEMP24 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP24);

				}

			final int RX10_TEMP25 = Program.getPlaceFromDist1(RX10_TEMP19, RX10_TEMP21,myUniquePlacePoint);


			final int RX10_TEMP27 = 0;


			final boolean RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27;

			if(RX10_TEMP28)
				{

				String RX10_TEMP26 = "Bad place access for array e";

				throw new RuntimeException(RX10_TEMP26);

				}

			final double RX10_TEMP29 = Program.getRefArrayValue1double(e, RX10_TEMP21,myUniquePlacePoint);


			final double X10_TEMP59 = RX10_TEMP29;


			final String X10_TEMP60 = X10_TEMP58 + X10_TEMP59;


			final String X10_TEMP61 = ",";


			final String X10_TEMP64 = X10_TEMP60 + X10_TEMP61;


			final int X10_TEMP63 = 2;


			final Point1 RX10_TEMP30 = new Point1(X10_TEMP63,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP30.hashCode());


			final Dist1 RX10_TEMP31 = e.distValue;


			final Region1 RX10_TEMP32 = RX10_TEMP31.dReg;


			final int RX10_TEMP33 = Program.searchPointInRegion1(RX10_TEMP32, RX10_TEMP30,myUniquePlacePoint);


			final int RX10_TEMP34 = 0;


			final boolean RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34;

			if(RX10_TEMP35)
				{

				String RX10_TEMP36 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP36);

				}

			final int RX10_TEMP37 = Program.getPlaceFromDist1(RX10_TEMP31, RX10_TEMP33,myUniquePlacePoint);


			final int RX10_TEMP39 = 0;


			final boolean RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39;

			if(RX10_TEMP40)
				{

				String RX10_TEMP38 = "Bad place access for array e";

				throw new RuntimeException(RX10_TEMP38);

				}

			final double RX10_TEMP41 = Program.getRefArrayValue1double(e, RX10_TEMP33,myUniquePlacePoint);


			final double X10_TEMP65 = RX10_TEMP41;


			final String X10_TEMP67 = X10_TEMP64 + X10_TEMP65;

			//System.out.println(X10_TEMP67);

			final int X10_TEMP70 = i.f0;


			final int X10_TEMP69 = 1;


			final int X10_TEMP71 = _LinearESOpenPIC2D_TIME_STEPS - X10_TEMP69;


			final boolean X10_TEMP73 = X10_TEMP70 == X10_TEMP71;

			if(X10_TEMP73)
				{

				final int X10_TEMP76 = 0;


				final int X10_TEMP77 = 2;


				final Region1 X10_TEMP78 = Program.createNewRegion1R(X10_TEMP76, X10_TEMP77,myUniquePlacePoint);


				final int X10_TEMP79 = 0;


				final Dist1 dRef = Program.getPlaceDist1(X10_TEMP78, X10_TEMP79,myUniquePlacePoint);


				final Region1 RX10_TEMP42 = dRef.dReg;


				final int RX10_TEMP43 = 0;


				final int RX10_TEMP44 = 1;


				int RX10_TEMP45 = 1;


				RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44;


				final int  RX10_TEMP46 = RX10_TEMP45+1;


				final int RX10_TEMP47 = RX10_TEMP45+1;


				final doubleStub[] RX10_TEMP48 = new doubleStub[RX10_TEMP47];

				/*FINISH
*/					{
					for(int RX10_TEMP49=0; RX10_TEMP49 < RX10_TEMP46; RX10_TEMP49++)
						{

						final int RX10_TEMP50 = 0;


						final int RX10_TEMP51 = RX10_TEMP49;


						final int RX10_TEMP52 = 0;


						final int RX10_TEMP53 = Program.getDistLocalCount1(dRef, RX10_TEMP51,myUniquePlacePoint);


						final int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44;

						//async(RX10_TEMP52)
							{

							final int RX10_TEMP55 = RX10_TEMP54+1;


							final double[] RX10_TEMP56 = new double[RX10_TEMP55];


							final doubleStub RX10_TEMP57 = new doubleStub(RX10_TEMP56,RX10_TEMP52);
							
Program.globalPointerHashMap.get(RX10_TEMP52).add(RX10_TEMP57.hashCode());

							//async(RX10_TEMP50)
								{
								RX10_TEMP48[RX10_TEMP49] = RX10_TEMP57;
								}
							}
						}
					}

				final doubleStub[] RX10_TEMP58 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP46]);
/*arrayInitBlock*/
for(int RX10_TEMP60= 0;RX10_TEMP60 <RX10_TEMP58.length ;RX10_TEMP60++ )					{

					final doubleStub RX10_TEMP59 = RX10_TEMP48[RX10_TEMP60];

					RX10_TEMP58[RX10_TEMP60] =RX10_TEMP59;
					}

;


				final doubleRefArray1 RX10_TEMP61 = new doubleRefArray1(dRef, RX10_TEMP58,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP61.hashCode());


				final doubleRefArray1 ref = RX10_TEMP61;


				final int X10_TEMP82 = 2;


				final boolean X10_TEMP84 = _LinearESOpenPIC2D_NUMBER_OF_XBITS == X10_TEMP82;


				final int X10_TEMP83 = 3;


				final boolean X10_TEMP85 = _LinearESOpenPIC2D_NUMBER_OF_YBITS == X10_TEMP83;


				final boolean X10_TEMP87 = X10_TEMP84 && X10_TEMP85;


				final int X10_TEMP86 = 4;


				final boolean X10_TEMP88 = _LinearESOpenPIC2D_PARTICLE_XDENSITY == X10_TEMP86;


				final boolean X10_TEMP90 = X10_TEMP87 && X10_TEMP88;


				final int X10_TEMP89 = 8;


				final boolean X10_TEMP91 = _LinearESOpenPIC2D_PARTICLE_YDENSITY == X10_TEMP89;


				final boolean X10_TEMP93 = X10_TEMP90 && X10_TEMP91;

				if(X10_TEMP93)
					{

					final int X10_TEMP95 = 0;


					final double X10_TEMP98 = 0.009936711552799253;


					final double X10_TEMP99 = X10_TEMP98;


					final Point1 RX10_TEMP62 = new Point1(X10_TEMP95,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP62.hashCode());


					final Dist1 RX10_TEMP63 = ref.distValue;


					final Region1 RX10_TEMP64 = RX10_TEMP63.dReg;


					final int RX10_TEMP65 = Program.searchPointInRegion1(RX10_TEMP64, RX10_TEMP62,myUniquePlacePoint);


					final int RX10_TEMP66 = 0;


					final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

					if(RX10_TEMP67)
						{

						String RX10_TEMP68 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP68);

						}

					final int RX10_TEMP69 = Program.getPlaceFromDist1(RX10_TEMP63, RX10_TEMP65,myUniquePlacePoint);


					final int RX10_TEMP71 = 0;


					final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

					if(RX10_TEMP72)
						{

						String RX10_TEMP70 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP70);

						}
					Program.setRefArrayValue1double(ref, RX10_TEMP65, X10_TEMP99,myUniquePlacePoint);

					final int X10_TEMP101 = 1;


					final double X10_TEMP104 = 35.7904959849017;


					final double X10_TEMP105 = X10_TEMP104;


					final Point1 RX10_TEMP73 = new Point1(X10_TEMP101,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP73.hashCode());


					final Dist1 RX10_TEMP74 = ref.distValue;


					final Region1 RX10_TEMP75 = RX10_TEMP74.dReg;


					final int RX10_TEMP76 = Program.searchPointInRegion1(RX10_TEMP75, RX10_TEMP73,myUniquePlacePoint);


					final int RX10_TEMP77 = 0;


					final boolean RX10_TEMP78 = RX10_TEMP76 < RX10_TEMP77;

					if(RX10_TEMP78)
						{

						String RX10_TEMP79 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP79);

						}

					final int RX10_TEMP80 = Program.getPlaceFromDist1(RX10_TEMP74, RX10_TEMP76,myUniquePlacePoint);


					final int RX10_TEMP82 = 0;


					final boolean RX10_TEMP83 = RX10_TEMP80 != RX10_TEMP82;

					if(RX10_TEMP83)
						{

						String RX10_TEMP81 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP81);

						}
					Program.setRefArrayValue1double(ref, RX10_TEMP76, X10_TEMP105,myUniquePlacePoint);

					final int X10_TEMP107 = 2;


					final double X10_TEMP110 = 35.8004326964545;


					final double X10_TEMP111 = X10_TEMP110;


					final Point1 RX10_TEMP84 = new Point1(X10_TEMP107,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP84.hashCode());


					final Dist1 RX10_TEMP85 = ref.distValue;


					final Region1 RX10_TEMP86 = RX10_TEMP85.dReg;


					final int RX10_TEMP87 = Program.searchPointInRegion1(RX10_TEMP86, RX10_TEMP84,myUniquePlacePoint);


					final int RX10_TEMP88 = 0;


					final boolean RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88;

					if(RX10_TEMP89)
						{

						String RX10_TEMP90 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP90);

						}

					final int RX10_TEMP91 = Program.getPlaceFromDist1(RX10_TEMP85, RX10_TEMP87,myUniquePlacePoint);


					final int RX10_TEMP93 = 0;


					final boolean RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93;

					if(RX10_TEMP94)
						{

						String RX10_TEMP92 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP92);

						}
					Program.setRefArrayValue1double(ref, RX10_TEMP87, X10_TEMP111,myUniquePlacePoint);

					final String X10_TEMP122 = "final field energy diff = ";


					final int X10_TEMP113 = 0;


					final Point1 RX10_TEMP95 = new Point1(X10_TEMP113,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP95.hashCode());


					final Dist1 RX10_TEMP96 = ref.distValue;


					final Region1 RX10_TEMP97 = RX10_TEMP96.dReg;


					final int RX10_TEMP98 = Program.searchPointInRegion1(RX10_TEMP97, RX10_TEMP95,myUniquePlacePoint);


					final int RX10_TEMP99 = 0;


					final boolean RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99;

					if(RX10_TEMP100)
						{

						String RX10_TEMP101 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP101);

						}

					final int RX10_TEMP102 = Program.getPlaceFromDist1(RX10_TEMP96, RX10_TEMP98,myUniquePlacePoint);


					final int RX10_TEMP104 = 0;


					final boolean RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104;

					if(RX10_TEMP105)
						{

						String RX10_TEMP103 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP103);

						}

					final double RX10_TEMP106 = Program.getRefArrayValue1double(ref, RX10_TEMP98,myUniquePlacePoint);


					final double X10_TEMP116 = RX10_TEMP106;


					final int X10_TEMP115 = 0;


					final Point1 RX10_TEMP107 = new Point1(X10_TEMP115,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP107.hashCode());


					final Dist1 RX10_TEMP108 = e.distValue;


					final Region1 RX10_TEMP109 = RX10_TEMP108.dReg;


					final int RX10_TEMP110 = Program.searchPointInRegion1(RX10_TEMP109, RX10_TEMP107,myUniquePlacePoint);


					final int RX10_TEMP111 = 0;


					final boolean RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111;

					if(RX10_TEMP112)
						{

						String RX10_TEMP113 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP113);

						}

					final int RX10_TEMP114 = Program.getPlaceFromDist1(RX10_TEMP108, RX10_TEMP110,myUniquePlacePoint);


					final int RX10_TEMP116 = 0;


					final boolean RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116;

					if(RX10_TEMP117)
						{

						String RX10_TEMP115 = "Bad place access for array e";

						throw new RuntimeException(RX10_TEMP115);

						}

					final double RX10_TEMP118 = Program.getRefArrayValue1double(e, RX10_TEMP110,myUniquePlacePoint);


					final double X10_TEMP117 = RX10_TEMP118;


					final double X10_TEMP119 = X10_TEMP116 - X10_TEMP117;


					final double X10_TEMP121 = Math.abs(X10_TEMP119);


					final String X10_TEMP124 = X10_TEMP122 + X10_TEMP121;

					System.out.println(X10_TEMP124);

					final String X10_TEMP135 = "final kinetic energy diff = ";


					final int X10_TEMP126 = 1;


					final Point1 RX10_TEMP119 = new Point1(X10_TEMP126,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP119.hashCode());


					final Dist1 RX10_TEMP120 = ref.distValue;


					final Region1 RX10_TEMP121 = RX10_TEMP120.dReg;


					final int RX10_TEMP122 = Program.searchPointInRegion1(RX10_TEMP121, RX10_TEMP119,myUniquePlacePoint);


					final int RX10_TEMP123 = 0;


					final boolean RX10_TEMP124 = RX10_TEMP122 < RX10_TEMP123;

					if(RX10_TEMP124)
						{

						String RX10_TEMP125 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP125);

						}

					final int RX10_TEMP126 = Program.getPlaceFromDist1(RX10_TEMP120, RX10_TEMP122,myUniquePlacePoint);


					final int RX10_TEMP128 = 0;


					final boolean RX10_TEMP129 = RX10_TEMP126 != RX10_TEMP128;

					if(RX10_TEMP129)
						{

						String RX10_TEMP127 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP127);

						}

					final double RX10_TEMP130 = Program.getRefArrayValue1double(ref, RX10_TEMP122,myUniquePlacePoint);


					final double X10_TEMP129 = RX10_TEMP130;


					final int X10_TEMP128 = 1;


					final Point1 RX10_TEMP131 = new Point1(X10_TEMP128,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP131.hashCode());


					final Dist1 RX10_TEMP132 = e.distValue;


					final Region1 RX10_TEMP133 = RX10_TEMP132.dReg;


					final int RX10_TEMP134 = Program.searchPointInRegion1(RX10_TEMP133, RX10_TEMP131,myUniquePlacePoint);


					final int RX10_TEMP135 = 0;


					final boolean RX10_TEMP136 = RX10_TEMP134 < RX10_TEMP135;

					if(RX10_TEMP136)
						{

						String RX10_TEMP137 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP137);

						}

					final int RX10_TEMP138 = Program.getPlaceFromDist1(RX10_TEMP132, RX10_TEMP134,myUniquePlacePoint);


					final int RX10_TEMP140 = 0;


					final boolean RX10_TEMP141 = RX10_TEMP138 != RX10_TEMP140;

					if(RX10_TEMP141)
						{

						String RX10_TEMP139 = "Bad place access for array e";

						throw new RuntimeException(RX10_TEMP139);

						}

					final double RX10_TEMP142 = Program.getRefArrayValue1double(e, RX10_TEMP134,myUniquePlacePoint);


					final double X10_TEMP130 = RX10_TEMP142;


					final double X10_TEMP132 = X10_TEMP129 - X10_TEMP130;


					final double X10_TEMP134 = Math.abs(X10_TEMP132);


					final String X10_TEMP137 = X10_TEMP135 + X10_TEMP134;

					System.out.println(X10_TEMP137);

					final String X10_TEMP148 = "final final energy diff = ";


					final int X10_TEMP139 = 2;


					final Point1 RX10_TEMP143 = new Point1(X10_TEMP139,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP143.hashCode());


					final Dist1 RX10_TEMP144 = ref.distValue;


					final Region1 RX10_TEMP145 = RX10_TEMP144.dReg;


					final int RX10_TEMP146 = Program.searchPointInRegion1(RX10_TEMP145, RX10_TEMP143,myUniquePlacePoint);


					final int RX10_TEMP147 = 0;


					final boolean RX10_TEMP148 = RX10_TEMP146 < RX10_TEMP147;

					if(RX10_TEMP148)
						{

						String RX10_TEMP149 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP149);

						}

					final int RX10_TEMP150 = Program.getPlaceFromDist1(RX10_TEMP144, RX10_TEMP146,myUniquePlacePoint);


					final int RX10_TEMP152 = 0;


					final boolean RX10_TEMP153 = RX10_TEMP150 != RX10_TEMP152;

					if(RX10_TEMP153)
						{

						String RX10_TEMP151 = "Bad place access for array ref";

						throw new RuntimeException(RX10_TEMP151);

						}

					final double RX10_TEMP154 = Program.getRefArrayValue1double(ref, RX10_TEMP146,myUniquePlacePoint);


					final double X10_TEMP142 = RX10_TEMP154;


					final int X10_TEMP141 = 2;


					final Point1 RX10_TEMP155 = new Point1(X10_TEMP141,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP155.hashCode());


					final Dist1 RX10_TEMP156 = e.distValue;


					final Region1 RX10_TEMP157 = RX10_TEMP156.dReg;


					final int RX10_TEMP158 = Program.searchPointInRegion1(RX10_TEMP157, RX10_TEMP155,myUniquePlacePoint);


					final int RX10_TEMP159 = 0;


					final boolean RX10_TEMP160 = RX10_TEMP158 < RX10_TEMP159;

					if(RX10_TEMP160)
						{

						String RX10_TEMP161 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP161);

						}

					final int RX10_TEMP162 = Program.getPlaceFromDist1(RX10_TEMP156, RX10_TEMP158,myUniquePlacePoint);


					final int RX10_TEMP164 = 0;


					final boolean RX10_TEMP165 = RX10_TEMP162 != RX10_TEMP164;

					if(RX10_TEMP165)
						{

						String RX10_TEMP163 = "Bad place access for array e";

						throw new RuntimeException(RX10_TEMP163);

						}

					final double RX10_TEMP166 = Program.getRefArrayValue1double(e, RX10_TEMP158,myUniquePlacePoint);


					final double X10_TEMP143 = RX10_TEMP166;


					final double X10_TEMP145 = X10_TEMP142 - X10_TEMP143;


					final double X10_TEMP147 = Math.abs(X10_TEMP145);


					final String X10_TEMP150 = X10_TEMP148 + X10_TEMP147;

					System.out.println(X10_TEMP150);
					}
				else
					{

					final int X10_TEMP151 = 3;


					final boolean X10_TEMP153 = _LinearESOpenPIC2D_NUMBER_OF_XBITS == X10_TEMP151;


					final int X10_TEMP152 = 4;


					final boolean X10_TEMP154 = _LinearESOpenPIC2D_NUMBER_OF_YBITS == X10_TEMP152;


					final boolean X10_TEMP156 = X10_TEMP153 && X10_TEMP154;


					final int X10_TEMP155 = 8;


					final boolean X10_TEMP157 = _LinearESOpenPIC2D_PARTICLE_XDENSITY == X10_TEMP155;


					final boolean X10_TEMP159 = X10_TEMP156 && X10_TEMP157;


					final int X10_TEMP158 = 16;


					final boolean X10_TEMP160 = _LinearESOpenPIC2D_PARTICLE_YDENSITY == X10_TEMP158;


					final boolean X10_TEMP162 = X10_TEMP159 && X10_TEMP160;

					if(X10_TEMP162)
						{

						final int X10_TEMP164 = 0;


						final double X10_TEMP167 = 1.12911030199718;


						final double X10_TEMP168 = X10_TEMP167;


						final Point1 RX10_TEMP167 = new Point1(X10_TEMP164,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP167.hashCode());


						final Dist1 RX10_TEMP168 = ref.distValue;


						final Region1 RX10_TEMP169 = RX10_TEMP168.dReg;


						final int RX10_TEMP170 = Program.searchPointInRegion1(RX10_TEMP169, RX10_TEMP167,myUniquePlacePoint);


						final int RX10_TEMP171 = 0;


						final boolean RX10_TEMP172 = RX10_TEMP170 < RX10_TEMP171;

						if(RX10_TEMP172)
							{

							String RX10_TEMP173 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP173);

							}

						final int RX10_TEMP174 = Program.getPlaceFromDist1(RX10_TEMP168, RX10_TEMP170,myUniquePlacePoint);


						final int RX10_TEMP176 = 0;


						final boolean RX10_TEMP177 = RX10_TEMP174 != RX10_TEMP176;

						if(RX10_TEMP177)
							{

							String RX10_TEMP175 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP175);

							}
						Program.setRefArrayValue1double(ref, RX10_TEMP170, X10_TEMP168,myUniquePlacePoint);

						final int X10_TEMP170 = 1;


						final double X10_TEMP173 = 138.01404855563126;


						final double X10_TEMP174 = X10_TEMP173;


						final Point1 RX10_TEMP178 = new Point1(X10_TEMP170,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP178.hashCode());


						final Dist1 RX10_TEMP179 = ref.distValue;


						final Region1 RX10_TEMP180 = RX10_TEMP179.dReg;


						final int RX10_TEMP181 = Program.searchPointInRegion1(RX10_TEMP180, RX10_TEMP178,myUniquePlacePoint);


						final int RX10_TEMP182 = 0;


						final boolean RX10_TEMP183 = RX10_TEMP181 < RX10_TEMP182;

						if(RX10_TEMP183)
							{

							String RX10_TEMP184 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP184);

							}

						final int RX10_TEMP185 = Program.getPlaceFromDist1(RX10_TEMP179, RX10_TEMP181,myUniquePlacePoint);


						final int RX10_TEMP187 = 0;


						final boolean RX10_TEMP188 = RX10_TEMP185 != RX10_TEMP187;

						if(RX10_TEMP188)
							{

							String RX10_TEMP186 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP186);

							}
						Program.setRefArrayValue1double(ref, RX10_TEMP181, X10_TEMP174,myUniquePlacePoint);

						final int X10_TEMP176 = 2;


						final double X10_TEMP179 = 139.14315885762844;


						final double X10_TEMP180 = X10_TEMP179;


						final Point1 RX10_TEMP189 = new Point1(X10_TEMP176,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP189.hashCode());


						final Dist1 RX10_TEMP190 = ref.distValue;


						final Region1 RX10_TEMP191 = RX10_TEMP190.dReg;


						final int RX10_TEMP192 = Program.searchPointInRegion1(RX10_TEMP191, RX10_TEMP189,myUniquePlacePoint);


						final int RX10_TEMP193 = 0;


						final boolean RX10_TEMP194 = RX10_TEMP192 < RX10_TEMP193;

						if(RX10_TEMP194)
							{

							String RX10_TEMP195 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP195);

							}

						final int RX10_TEMP196 = Program.getPlaceFromDist1(RX10_TEMP190, RX10_TEMP192,myUniquePlacePoint);


						final int RX10_TEMP198 = 0;


						final boolean RX10_TEMP199 = RX10_TEMP196 != RX10_TEMP198;

						if(RX10_TEMP199)
							{

							String RX10_TEMP197 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP197);

							}
						Program.setRefArrayValue1double(ref, RX10_TEMP192, X10_TEMP180,myUniquePlacePoint);

						final String X10_TEMP191 = "final field energy diff = ";


						final int X10_TEMP182 = 0;


						final Point1 RX10_TEMP200 = new Point1(X10_TEMP182,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP200.hashCode());


						final Dist1 RX10_TEMP201 = ref.distValue;


						final Region1 RX10_TEMP202 = RX10_TEMP201.dReg;


						final int RX10_TEMP203 = Program.searchPointInRegion1(RX10_TEMP202, RX10_TEMP200,myUniquePlacePoint);


						final int RX10_TEMP204 = 0;


						final boolean RX10_TEMP205 = RX10_TEMP203 < RX10_TEMP204;

						if(RX10_TEMP205)
							{

							String RX10_TEMP206 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP206);

							}

						final int RX10_TEMP207 = Program.getPlaceFromDist1(RX10_TEMP201, RX10_TEMP203,myUniquePlacePoint);


						final int RX10_TEMP209 = 0;


						final boolean RX10_TEMP210 = RX10_TEMP207 != RX10_TEMP209;

						if(RX10_TEMP210)
							{

							String RX10_TEMP208 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP208);

							}

						final double RX10_TEMP211 = Program.getRefArrayValue1double(ref, RX10_TEMP203,myUniquePlacePoint);


						final double X10_TEMP185 = RX10_TEMP211;


						final int X10_TEMP184 = 0;


						final Point1 RX10_TEMP212 = new Point1(X10_TEMP184,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP212.hashCode());


						final Dist1 RX10_TEMP213 = e.distValue;


						final Region1 RX10_TEMP214 = RX10_TEMP213.dReg;


						final int RX10_TEMP215 = Program.searchPointInRegion1(RX10_TEMP214, RX10_TEMP212,myUniquePlacePoint);


						final int RX10_TEMP216 = 0;


						final boolean RX10_TEMP217 = RX10_TEMP215 < RX10_TEMP216;

						if(RX10_TEMP217)
							{

							String RX10_TEMP218 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP218);

							}

						final int RX10_TEMP219 = Program.getPlaceFromDist1(RX10_TEMP213, RX10_TEMP215,myUniquePlacePoint);


						final int RX10_TEMP221 = 0;


						final boolean RX10_TEMP222 = RX10_TEMP219 != RX10_TEMP221;

						if(RX10_TEMP222)
							{

							String RX10_TEMP220 = "Bad place access for array e";

							throw new RuntimeException(RX10_TEMP220);

							}

						final double RX10_TEMP223 = Program.getRefArrayValue1double(e, RX10_TEMP215,myUniquePlacePoint);


						final double X10_TEMP186 = RX10_TEMP223;


						final double X10_TEMP188 = X10_TEMP185 - X10_TEMP186;


						final double X10_TEMP190 = Math.abs(X10_TEMP188);


						final String X10_TEMP193 = X10_TEMP191 + X10_TEMP190;

						System.out.println(X10_TEMP193);

						final String X10_TEMP204 = "final kinetic energy diff = ";


						final int X10_TEMP195 = 1;


						final Point1 RX10_TEMP224 = new Point1(X10_TEMP195,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP224.hashCode());


						final Dist1 RX10_TEMP225 = ref.distValue;


						final Region1 RX10_TEMP226 = RX10_TEMP225.dReg;


						final int RX10_TEMP227 = Program.searchPointInRegion1(RX10_TEMP226, RX10_TEMP224,myUniquePlacePoint);


						final int RX10_TEMP228 = 0;


						final boolean RX10_TEMP229 = RX10_TEMP227 < RX10_TEMP228;

						if(RX10_TEMP229)
							{

							String RX10_TEMP230 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP230);

							}

						final int RX10_TEMP231 = Program.getPlaceFromDist1(RX10_TEMP225, RX10_TEMP227,myUniquePlacePoint);


						final int RX10_TEMP233 = 0;


						final boolean RX10_TEMP234 = RX10_TEMP231 != RX10_TEMP233;

						if(RX10_TEMP234)
							{

							String RX10_TEMP232 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP232);

							}

						final double RX10_TEMP235 = Program.getRefArrayValue1double(ref, RX10_TEMP227,myUniquePlacePoint);


						final double X10_TEMP198 = RX10_TEMP235;


						final int X10_TEMP197 = 1;


						final Point1 RX10_TEMP236 = new Point1(X10_TEMP197,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP236.hashCode());


						final Dist1 RX10_TEMP237 = e.distValue;


						final Region1 RX10_TEMP238 = RX10_TEMP237.dReg;


						final int RX10_TEMP239 = Program.searchPointInRegion1(RX10_TEMP238, RX10_TEMP236,myUniquePlacePoint);


						final int RX10_TEMP240 = 0;


						final boolean RX10_TEMP241 = RX10_TEMP239 < RX10_TEMP240;

						if(RX10_TEMP241)
							{

							String RX10_TEMP242 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP242);

							}

						final int RX10_TEMP243 = Program.getPlaceFromDist1(RX10_TEMP237, RX10_TEMP239,myUniquePlacePoint);


						final int RX10_TEMP245 = 0;


						final boolean RX10_TEMP246 = RX10_TEMP243 != RX10_TEMP245;

						if(RX10_TEMP246)
							{

							String RX10_TEMP244 = "Bad place access for array e";

							throw new RuntimeException(RX10_TEMP244);

							}

						final double RX10_TEMP247 = Program.getRefArrayValue1double(e, RX10_TEMP239,myUniquePlacePoint);


						final double X10_TEMP199 = RX10_TEMP247;


						final double X10_TEMP201 = X10_TEMP198 - X10_TEMP199;


						final double X10_TEMP203 = Math.abs(X10_TEMP201);


						final String X10_TEMP206 = X10_TEMP204 + X10_TEMP203;

						System.out.println(X10_TEMP206);

						final String X10_TEMP217 = "final final energy diff = ";


						final int X10_TEMP208 = 2;


						final Point1 RX10_TEMP248 = new Point1(X10_TEMP208,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP248.hashCode());


						final Dist1 RX10_TEMP249 = ref.distValue;


						final Region1 RX10_TEMP250 = RX10_TEMP249.dReg;


						final int RX10_TEMP251 = Program.searchPointInRegion1(RX10_TEMP250, RX10_TEMP248,myUniquePlacePoint);


						final int RX10_TEMP252 = 0;


						final boolean RX10_TEMP253 = RX10_TEMP251 < RX10_TEMP252;

						if(RX10_TEMP253)
							{

							String RX10_TEMP254 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP254);

							}

						final int RX10_TEMP255 = Program.getPlaceFromDist1(RX10_TEMP249, RX10_TEMP251,myUniquePlacePoint);


						final int RX10_TEMP257 = 0;


						final boolean RX10_TEMP258 = RX10_TEMP255 != RX10_TEMP257;

						if(RX10_TEMP258)
							{

							String RX10_TEMP256 = "Bad place access for array ref";

							throw new RuntimeException(RX10_TEMP256);

							}

						final double RX10_TEMP259 = Program.getRefArrayValue1double(ref, RX10_TEMP251,myUniquePlacePoint);


						final double X10_TEMP211 = RX10_TEMP259;


						final int X10_TEMP210 = 2;


						final Point1 RX10_TEMP260 = new Point1(X10_TEMP210,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP260.hashCode());


						final Dist1 RX10_TEMP261 = e.distValue;


						final Region1 RX10_TEMP262 = RX10_TEMP261.dReg;


						final int RX10_TEMP263 = Program.searchPointInRegion1(RX10_TEMP262, RX10_TEMP260,myUniquePlacePoint);


						final int RX10_TEMP264 = 0;


						final boolean RX10_TEMP265 = RX10_TEMP263 < RX10_TEMP264;

						if(RX10_TEMP265)
							{

							String RX10_TEMP266 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP266);

							}

						final int RX10_TEMP267 = Program.getPlaceFromDist1(RX10_TEMP261, RX10_TEMP263,myUniquePlacePoint);


						final int RX10_TEMP269 = 0;


						final boolean RX10_TEMP270 = RX10_TEMP267 != RX10_TEMP269;

						if(RX10_TEMP270)
							{

							String RX10_TEMP268 = "Bad place access for array e";

							throw new RuntimeException(RX10_TEMP268);

							}

						final double RX10_TEMP271 = Program.getRefArrayValue1double(e, RX10_TEMP263,myUniquePlacePoint);


						final double X10_TEMP212 = RX10_TEMP271;


						final double X10_TEMP214 = X10_TEMP211 - X10_TEMP212;


						final double X10_TEMP216 = Math.abs(X10_TEMP214);


						final String X10_TEMP219 = X10_TEMP217 + X10_TEMP216;

						//System.out.println(X10_TEMP219);
						}
					else
						{

						final String X10_TEMP221 = "No reference values availabile";

						System.out.println(X10_TEMP221);
						}
 					}
 				}
			}

		final long X10_TEMP222 = System.currentTimeMillis();


		final long X10_TEMP223 = X10_TEMP0.totalTime;


		final long X10_TEMP226 = X10_TEMP222 - X10_TEMP223;


		final long X10_TEMP227 = X10_TEMP226;

		X10_TEMP0.totalTime = (X10_TEMP227);

		final String X10_TEMP228 = "Total time (ms): ";


		final long X10_TEMP229 = X10_TEMP0.totalTime;


		final String X10_TEMP231 = X10_TEMP228 + X10_TEMP229;

		System.out.println(X10_TEMP231);

		final String X10_TEMP232 = "Initialization time (ms): ";


		final long X10_TEMP233 = X10_TEMP0.initTime;


		final String X10_TEMP234 = X10_TEMP232 + X10_TEMP233;


		final String X10_TEMP235 = " ";


		final String X10_TEMP241 = X10_TEMP234 + X10_TEMP235;


		final double X10_TEMP236 = 100.0;


		final long X10_TEMP237 = X10_TEMP0.initTime;


		final double X10_TEMP239 = X10_TEMP236 * X10_TEMP237;


		final long X10_TEMP240 = X10_TEMP0.totalTime;


		final double X10_TEMP242 = X10_TEMP239 / X10_TEMP240;


		final String X10_TEMP244 = X10_TEMP241 + X10_TEMP242;

		System.out.println(X10_TEMP244);

		final String X10_TEMP245 = "Particle Deposit time (ms): ";


		final long X10_TEMP246 = X10_TEMP0.depositTime;


		final String X10_TEMP247 = X10_TEMP245 + X10_TEMP246;


		final String X10_TEMP248 = " ";


		final String X10_TEMP254 = X10_TEMP247 + X10_TEMP248;


		final double X10_TEMP249 = 100.0;


		final long X10_TEMP250 = X10_TEMP0.depositTime;


		final double X10_TEMP252 = X10_TEMP249 * X10_TEMP250;


		final long X10_TEMP253 = X10_TEMP0.totalTime;


		final double X10_TEMP255 = X10_TEMP252 / X10_TEMP253;


		final String X10_TEMP257 = X10_TEMP254 + X10_TEMP255;

		System.out.println(X10_TEMP257);

		final String X10_TEMP258 = "Field Redistribution time (ms): ";


		final long X10_TEMP259 = X10_TEMP0.redistTime;


		final String X10_TEMP260 = X10_TEMP258 + X10_TEMP259;


		final String X10_TEMP261 = " ";


		final String X10_TEMP267 = X10_TEMP260 + X10_TEMP261;


		final double X10_TEMP262 = 100.0;


		final long X10_TEMP263 = X10_TEMP0.redistTime;


		final double X10_TEMP265 = X10_TEMP262 * X10_TEMP263;


		final long X10_TEMP266 = X10_TEMP0.totalTime;


		final double X10_TEMP268 = X10_TEMP265 / X10_TEMP266;


		final String X10_TEMP270 = X10_TEMP267 + X10_TEMP268;

		System.out.println(X10_TEMP270);

		final String X10_TEMP271 = "Solver time (ms): ";


		final long X10_TEMP272 = X10_TEMP0.solverTime;


		final String X10_TEMP273 = X10_TEMP271 + X10_TEMP272;


		final String X10_TEMP274 = " ";


		final String X10_TEMP280 = X10_TEMP273 + X10_TEMP274;


		final double X10_TEMP275 = 100.0;


		final long X10_TEMP276 = X10_TEMP0.solverTime;


		final double X10_TEMP278 = X10_TEMP275 * X10_TEMP276;


		final long X10_TEMP279 = X10_TEMP0.totalTime;


		final double X10_TEMP281 = X10_TEMP278 / X10_TEMP279;


		final String X10_TEMP283 = X10_TEMP280 + X10_TEMP281;

		System.out.println(X10_TEMP283);

		final String X10_TEMP284 = "Particle Push time (ms): ";


		final long X10_TEMP285 = X10_TEMP0.pushTime;


		final String X10_TEMP286 = X10_TEMP284 + X10_TEMP285;


		final String X10_TEMP287 = " ";


		final String X10_TEMP293 = X10_TEMP286 + X10_TEMP287;


		final double X10_TEMP288 = 100.0;


		final long X10_TEMP289 = X10_TEMP0.pushTime;


		final double X10_TEMP291 = X10_TEMP288 * X10_TEMP289;


		final long X10_TEMP292 = X10_TEMP0.totalTime;


		final double X10_TEMP294 = X10_TEMP291 / X10_TEMP292;


		final String X10_TEMP296 = X10_TEMP293 + X10_TEMP294;

		System.out.println(X10_TEMP296);

		final String X10_TEMP297 = "Particle move time (ms): ";


		final long X10_TEMP298 = X10_TEMP0.moveTime;


		final String X10_TEMP299 = X10_TEMP297 + X10_TEMP298;


		final String X10_TEMP300 = " ";


		final String X10_TEMP306 = X10_TEMP299 + X10_TEMP300;


		final double X10_TEMP301 = 100.0;


		final long X10_TEMP302 = X10_TEMP0.moveTime;


		final double X10_TEMP304 = X10_TEMP301 * X10_TEMP302;


		final long X10_TEMP305 = X10_TEMP0.totalTime;


		final double X10_TEMP307 = X10_TEMP304 / X10_TEMP305;


		final String X10_TEMP309 = X10_TEMP306 + X10_TEMP307;

		System.out.println(X10_TEMP309);
		}
public static void LinearESOpenPIC2D_initialize ( final LinearESOpenPIC2D X10_TEMP0, int myUniquePlacePoint)
		{

		final String X10_TEMP2 = "Init: particle position";

		System.out.println(X10_TEMP2);

		final doubleRefArray2 position = Program.LinearESOpenPIC2D_genParticlePosition(X10_TEMP0, _LinearESOpenPIC2D_NPARTICLES,myUniquePlacePoint);


		final String X10_TEMP6 = "Init: particle velocity";

		System.out.println(X10_TEMP6);

		final doubleRefArray2 velocity = Program.LinearESOpenPIC2D_genParticleVelocity(X10_TEMP0, _LinearESOpenPIC2D_NPARTICLES,myUniquePlacePoint);


		final String X10_TEMP10 = "Init: particles";

		System.out.println(X10_TEMP10);

		final ParticleRefArray1 X10_TEMP16 = Program.LinearESOpenPIC2D_genParticles(X10_TEMP0, _LinearESOpenPIC2D_NPARTICLES, position, velocity,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP17 = X10_TEMP16;

		X10_TEMP0.particles = (X10_TEMP17);

		final String X10_TEMP19 = "Init: initial field distribution";

		System.out.println(X10_TEMP19);

		final ParticleRefArray1 X10_TEMP21 = X10_TEMP0.particles;


		final Dist2 dField = Program.LinearESOpenPIC2D_genInitialDist(X10_TEMP0, X10_TEMP21,myUniquePlacePoint);


		final String X10_TEMP24 = "Init: initial partical distribution";

		System.out.println(X10_TEMP24);

		final intRefArray1 info = Program.LinearESOpenPIC2D_makeInfoArray(X10_TEMP0,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP29 = X10_TEMP0.particles;


		final ParticleRefArray1 X10_TEMP32 = Program.LinearESOpenPIC2D_moveParticles(X10_TEMP0, X10_TEMP29, dField, info,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP33 = X10_TEMP32;

		X10_TEMP0.particles = (X10_TEMP33);

		final String X10_TEMP35 = "Init: background charge";

		System.out.println(X10_TEMP35);

		final Region2 RX10_TEMP0 = dField.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dField, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dField, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 X10_TEMP38 = RX10_TEMP19;


		final doubleRefArray2 X10_TEMP39 = X10_TEMP38;

		X10_TEMP0.backgroundCharge = (X10_TEMP39);

		final doubleRefArray2 backgroundGuards = Program.LinearESOpenPIC2D_makeGuards(X10_TEMP0, dField,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP47 = X10_TEMP0.particles;


		final doubleRefArray2 X10_TEMP48 = X10_TEMP0.backgroundCharge;


		final double X10_TEMP49 = Math.abs(_LinearESOpenPIC2D_ELECTRON_CHARGE);

		Program.LinearESOpenPIC2D_depositCharge(X10_TEMP0, X10_TEMP47, X10_TEMP48, backgroundGuards, X10_TEMP49,myUniquePlacePoint);

		final doubleRefArray2 X10_TEMP52 = X10_TEMP0.backgroundCharge;

		Program.LinearESOpenPIC2D_addGuards(X10_TEMP0, X10_TEMP52, backgroundGuards,myUniquePlacePoint);
		}
public static doubleRefArray2 LinearESOpenPIC2D_genParticlePosition ( final LinearESOpenPIC2D X10_TEMP0, final int np, int myUniquePlacePoint)
		{

		final int X = 0;


		final int Y = 1;


		final int MAX_PLACES = 1;


		final int MAX_ITER = 20;


		final double ERROR = 0.0001;


		final double BIG = 0.5;


		final int X10_TEMP10 = 0;


		final int X10_TEMP8 = 1;


		final int X10_TEMP11 = np - X10_TEMP8;


		final Region1 X10_TEMP18 = Program.createNewRegion1R(X10_TEMP10, X10_TEMP11,myUniquePlacePoint);


		final int X10_TEMP15 = 0;


		final int X10_TEMP16 = 1;


		final Region1 X10_TEMP19 = Program.createNewRegion1R(X10_TEMP15, X10_TEMP16,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_distBlockStar2(X10_TEMP18, X10_TEMP19,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dResult.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dResult, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dResult, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 result = RX10_TEMP19;


		final int X10_TEMP23 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * _LinearESOpenPIC2D_PARTICLE_YDENSITY;


		final int particlesPerPlace = X10_TEMP23 / MAX_PLACES;


		final int totalParticles = particlesPerPlace * MAX_PLACES;


		final boolean X10_TEMP27 = totalParticles != _LinearESOpenPIC2D_NPARTICLES;

		if(X10_TEMP27)
			{

			final String X10_TEMP28 = "Particle distribution truncated, ";


			final String X10_TEMP29 = "total particles = ";


			final String X10_TEMP30 = X10_TEMP28 + X10_TEMP29;


			final String X10_TEMP32 = X10_TEMP30 + totalParticles;

			System.err.println(X10_TEMP32);
			return result;
			}

		final int X10_TEMP34 = 2;


		final boolean X10_TEMP36 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP34;


		final int X10_TEMP35 = 3;


		final boolean X10_TEMP37 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP35;


		final boolean X10_TEMP39 = X10_TEMP36 || X10_TEMP37;


		final boolean X10_TEMP40 = X10_TEMP39;


		double X10_TEMP43 = 0.0;

		if(X10_TEMP40)
			{

			X10_TEMP43 = 1.0;

			}

		final double X10_TEMP44 = X10_TEMP43;


		final double edgelx = X10_TEMP44;


		final int X10_TEMP45 = 2;


		final boolean X10_TEMP47 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP45;


		final boolean X10_TEMP48 = X10_TEMP47;


		double X10_TEMP51 = 0.0;

		if(X10_TEMP48)
			{

			X10_TEMP51 = 1.0;

			}

		final double X10_TEMP52 = X10_TEMP51;


		final double edgely = X10_TEMP52;


		final double X10_TEMP57 = 0.0;


		final double X10_TEMP58 = 0.0;


		final double X10_TEMP59 = 0.0;


		double tx0 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, edgelx, X10_TEMP57, X10_TEMP58, X10_TEMP59,myUniquePlacePoint);


		final double X10_TEMP65 = 0.0;


		final double X10_TEMP66 = 0.0;


		final double X10_TEMP67 = 0.0;


		double ty0 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, edgely, X10_TEMP65, X10_TEMP66, X10_TEMP67,myUniquePlacePoint);


		final double anx = _LinearESOpenPIC2D_XLENGTH - edgelx;


		final double any = _LinearESOpenPIC2D_YLENGTH - edgely;


		final double X10_TEMP75 = 0.0;


		final double X10_TEMP76 = 0.0;


		final double X10_TEMP77 = 0.0;


		final double X10_TEMP78 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, anx, X10_TEMP75, X10_TEMP76, X10_TEMP77,myUniquePlacePoint);


		final double X10_TEMP80 = X10_TEMP78 - tx0;


		final double bnx = _LinearESOpenPIC2D_PARTICLE_XDENSITY / X10_TEMP80;


		final double X10_TEMP86 = 0.0;


		final double X10_TEMP87 = 0.0;


		final double X10_TEMP88 = 0.0;


		final double X10_TEMP89 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, any, X10_TEMP86, X10_TEMP87, X10_TEMP88,myUniquePlacePoint);


		final double X10_TEMP91 = X10_TEMP89 - ty0;


		final double bny = _LinearESOpenPIC2D_PARTICLE_YDENSITY / X10_TEMP91;


		final double X10_TEMP93 = bnx * tx0;


		final double X10_TEMP94 = 0.5;


		final double x0 = X10_TEMP93 - X10_TEMP94;


		final double X10_TEMP96 = bny * ty0;


		final double X10_TEMP97 = 0.5;


		final double y0 = X10_TEMP96 - X10_TEMP97;

		/*FINISH
*/			{

			final Dist1 X10_TEMP100 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP100.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP100.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP100.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP100, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP101 = RX10_TEMP31;

				//async(X10_TEMP101)
					{

					final int X10_TEMP104 = 0;


					final Region1 rLocal = Program.X10Util_getLRank2D(dResult, X10_TEMP104,X10_TEMP101);


					final int RX10_TEMP32 = rLocal.regSize;


					final int RX10_TEMP33 = 0;


					final boolean RX10_TEMP34 = RX10_TEMP32 <= RX10_TEMP33;

					if(RX10_TEMP34)
						{

						final String RX10_TEMP35 = "Operation low() not defined on empty region rLocal";

						throw new RuntimeException(RX10_TEMP35);

						}

					final int offset = Program.regionLow(rLocal,X10_TEMP101);


					final int X10_TEMP108 = pl.f0;


					final int koff = particlesPerPlace * X10_TEMP108;


					final int noff = offset;


					int kc = koff / _LinearESOpenPIC2D_PARTICLE_XDENSITY;


					double yt0 = edgely;


					final double X10_TEMP123 = 0.5;


					final double X10_TEMP117 = 0.0;


					final double X10_TEMP118 = 0.0;


					final double X10_TEMP119 = 0.0;


					final double X10_TEMP120 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, yt0, X10_TEMP117, X10_TEMP118, X10_TEMP119,X10_TEMP101);


					final double X10_TEMP122 = bny * X10_TEMP120;


					final double X10_TEMP124 = X10_TEMP123 / X10_TEMP122;


					double yt = yt0 + X10_TEMP124;


					final int X10_TEMP129 = 0;


					final int X10_TEMP127 = 1;


					final int X10_TEMP130 = kc - X10_TEMP127;


					final Region1 X10_TEMP132 = Program.createNewRegion1R(X10_TEMP129, X10_TEMP130,X10_TEMP101);


					final int RX10_TEMP39 = 1;


					int RX10_TEMP37 = X10_TEMP132.regSize;


					RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39;


					final int  RX10_TEMP38 = RX10_TEMP37+1;

					for(int RX10_TEMP36=0; RX10_TEMP36 < RX10_TEMP38; RX10_TEMP36++)
						{

						final int RX10_TEMP40 = RX10_TEMP36;


						final Point1 k = Program.regionOrdinalPoint1(X10_TEMP132, RX10_TEMP40,X10_TEMP101);


						final int X10_TEMP134 = k.f0;


						final double X10_TEMP135 = X10_TEMP134 + y0;


						final int X10_TEMP136 = 1;


						double yn = X10_TEMP135 + X10_TEMP136;


						final int X10_TEMP139 = k.f0;


						final int X10_TEMP140 = 0;


						final boolean X10_TEMP142 = X10_TEMP139 > X10_TEMP140;

						if(X10_TEMP142)
							{

							final double X10_TEMP153 = 1.0;


							final double X10_TEMP147 = 0.0;


							final double X10_TEMP148 = 0.0;


							final double X10_TEMP149 = 0.0;


							final double X10_TEMP150 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, yt, X10_TEMP147, X10_TEMP148, X10_TEMP149,X10_TEMP101);


							final double X10_TEMP152 = bny * X10_TEMP150;


							final double X10_TEMP155 = X10_TEMP153 / X10_TEMP152;


							final double X10_TEMP157 = yt + X10_TEMP155;


							yt = X10_TEMP157;

							}

						final double X10_TEMP162 = Program.X10Util_minDouble(yt, any,X10_TEMP101);


						final double X10_TEMP164 = Program.X10Util_maxDouble(edgely, X10_TEMP162,X10_TEMP101);


						yt = X10_TEMP164;


						final double X10_TEMP169 = 0.0;


						final double X10_TEMP170 = 0.0;


						final double X10_TEMP171 = 0.0;


						final double X10_TEMP172 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, yt, X10_TEMP169, X10_TEMP170, X10_TEMP171,X10_TEMP101);


						final double X10_TEMP173 = bny * X10_TEMP172;


						double f = X10_TEMP173 - yn;


						double absf = Math.abs(f);


						int i = 0;


						boolean X10_TEMP180 = absf >= ERROR;

						while(X10_TEMP180)
							{

							final boolean X10_TEMP182 = absf < BIG;

							if(X10_TEMP182)
								{

								final double X10_TEMP187 = 0.0;


								final double X10_TEMP188 = 0.0;


								final double X10_TEMP189 = 0.0;


								final double X10_TEMP190 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, yt, X10_TEMP187, X10_TEMP188, X10_TEMP189,X10_TEMP101);


								double fp = bny * X10_TEMP190;


								yt0 = yt;


								final double X10_TEMP194 = f / fp;


								final double X10_TEMP197 = yt - X10_TEMP194;


								final double X10_TEMP199 = Program.X10Util_minDouble(X10_TEMP197, any,X10_TEMP101);


								final double X10_TEMP201 = Program.X10Util_maxDouble(edgely, X10_TEMP199,X10_TEMP101);


								yt = X10_TEMP201;

								}
							else
								{

								final double X10_TEMP202 = 0.0;


								final boolean X10_TEMP204 = f > X10_TEMP202;

								if(X10_TEMP204)
									{

									final double X10_TEMP207 = 0.5;


									final double X10_TEMP206 = yt - yt0;


									final double X10_TEMP209 = X10_TEMP207 * X10_TEMP206;


									final double X10_TEMP211 = yt0 + X10_TEMP209;


									yt = X10_TEMP211;

									}
								else
									{

									final double X10_TEMP212 = yt + yt;


									final double X10_TEMP214 = X10_TEMP212 - yt0;


									yt = X10_TEMP214;

									}
 								}
 
							final boolean X10_TEMP216 = i >= MAX_ITER;

							if(X10_TEMP216)
								{

								final String X10_TEMP218 = "1: Newton iteration max exceeded";

								System.err.println(X10_TEMP218);
								break;
								}
							else
								{

								final double X10_TEMP223 = 0.0;


								final double X10_TEMP224 = 0.0;


								final double X10_TEMP225 = 0.0;


								final double X10_TEMP226 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, yt, X10_TEMP223, X10_TEMP224, X10_TEMP225,X10_TEMP101);


								final double X10_TEMP227 = bny * X10_TEMP226;


								final double X10_TEMP229 = X10_TEMP227 - yn;


								f = X10_TEMP229;


								final double X10_TEMP232 = Math.abs(f);


								absf = X10_TEMP232;

								}
 
							final int X10_TEMP233 = i;


							final int X10_TEMP234 = 1;


							i = i + X10_TEMP234;


							X10_TEMP180 = absf >= ERROR;

							}

						yt0 = yt;

						}

					final int X10_TEMP236 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * kc;


					int jc = koff - X10_TEMP236;


					double xt0 = edgelx;


					final double X10_TEMP249 = 0.5;


					final double X10_TEMP243 = 0.0;


					final double X10_TEMP244 = 0.0;


					final double X10_TEMP245 = 0.0;


					final double X10_TEMP246 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt0, X10_TEMP243, X10_TEMP244, X10_TEMP245,X10_TEMP101);


					final double X10_TEMP248 = bnx * X10_TEMP246;


					final double X10_TEMP250 = X10_TEMP249 / X10_TEMP248;


					double xt = xt0 + X10_TEMP250;


					final int X10_TEMP255 = 0;


					final int X10_TEMP253 = 1;


					final int X10_TEMP256 = jc - X10_TEMP253;


					final Region1 X10_TEMP258 = Program.createNewRegion1R(X10_TEMP255, X10_TEMP256,X10_TEMP101);


					final int RX10_TEMP44 = 1;


					int RX10_TEMP42 = X10_TEMP258.regSize;


					RX10_TEMP42 = RX10_TEMP42 - RX10_TEMP44;


					final int  RX10_TEMP43 = RX10_TEMP42+1;

					for(int RX10_TEMP41=0; RX10_TEMP41 < RX10_TEMP43; RX10_TEMP41++)
						{

						final int RX10_TEMP45 = RX10_TEMP41;


						final Point1 j = Program.regionOrdinalPoint1(X10_TEMP258, RX10_TEMP45,X10_TEMP101);


						final int X10_TEMP260 = j.f0;


						final double X10_TEMP261 = X10_TEMP260 + x0;


						final int X10_TEMP262 = 1;


						double xn = X10_TEMP261 + X10_TEMP262;


						final int X10_TEMP265 = j.f0;


						final int X10_TEMP266 = 0;


						final boolean X10_TEMP268 = X10_TEMP265 > X10_TEMP266;

						if(X10_TEMP268)
							{

							final double X10_TEMP279 = 1.0;


							final double X10_TEMP273 = 0.0;


							final double X10_TEMP274 = 0.0;


							final double X10_TEMP275 = 0.0;


							final double X10_TEMP276 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt, X10_TEMP273, X10_TEMP274, X10_TEMP275,X10_TEMP101);


							final double X10_TEMP278 = bnx * X10_TEMP276;


							final double X10_TEMP281 = X10_TEMP279 / X10_TEMP278;


							final double X10_TEMP283 = xt + X10_TEMP281;


							xt = X10_TEMP283;

							}

						final double X10_TEMP288 = Program.X10Util_minDouble(xt, anx,X10_TEMP101);


						final double X10_TEMP290 = Program.X10Util_maxDouble(edgelx, X10_TEMP288,X10_TEMP101);


						xt = X10_TEMP290;


						final double X10_TEMP295 = 0.0;


						final double X10_TEMP296 = 0.0;


						final double X10_TEMP297 = 0.0;


						final double X10_TEMP298 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, xt, X10_TEMP295, X10_TEMP296, X10_TEMP297,X10_TEMP101);


						final double X10_TEMP299 = bnx * X10_TEMP298;


						double f = X10_TEMP299 - xn;


						double absf = Math.abs(f);


						int i = 0;


						boolean X10_TEMP306 = absf >= ERROR;

						while(X10_TEMP306)
							{

							final boolean X10_TEMP308 = absf < BIG;

							if(X10_TEMP308)
								{

								final double X10_TEMP313 = 0.0;


								final double X10_TEMP314 = 0.0;


								final double X10_TEMP315 = 0.0;


								final double X10_TEMP316 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt, X10_TEMP313, X10_TEMP314, X10_TEMP315,X10_TEMP101);


								double fp = bnx * X10_TEMP316;


								xt0 = xt;


								final double X10_TEMP320 = f / fp;


								final double X10_TEMP323 = xt - X10_TEMP320;


								final double X10_TEMP325 = Program.X10Util_minDouble(X10_TEMP323, anx,X10_TEMP101);


								final double X10_TEMP327 = Program.X10Util_maxDouble(edgelx, X10_TEMP325,X10_TEMP101);


								xt = X10_TEMP327;

								}
							else
								{

								final double X10_TEMP328 = 0.0;


								final boolean X10_TEMP330 = f > X10_TEMP328;

								if(X10_TEMP330)
									{

									final double X10_TEMP333 = 0.5;


									final double X10_TEMP332 = xt - xt0;


									final double X10_TEMP334 = X10_TEMP333 * X10_TEMP332;


									final double X10_TEMP336 = xt0 + X10_TEMP334;


									xt = X10_TEMP336;

									}
								else
									{

									final double X10_TEMP337 = xt + xt;


									final double X10_TEMP339 = X10_TEMP337 - xt0;


									xt = X10_TEMP339;

									}
 								}
 
							final boolean X10_TEMP341 = i >= MAX_ITER;

							if(X10_TEMP341)
								{

								final String X10_TEMP343 = "2: Newton iteration max exceeded";

								System.err.println(X10_TEMP343);
								break;
								}
							else
								{

								final double X10_TEMP348 = 0.0;


								final double X10_TEMP349 = 0.0;


								final double X10_TEMP350 = 0.0;


								final double X10_TEMP351 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, xt, X10_TEMP348, X10_TEMP349, X10_TEMP350,X10_TEMP101);


								final double X10_TEMP352 = bnx * X10_TEMP351;


								final double X10_TEMP354 = X10_TEMP352 - xn;


								f = X10_TEMP354;


								final double X10_TEMP357 = Math.abs(f);


								absf = X10_TEMP357;

								}
 
							final int X10_TEMP358 = i;


							final int X10_TEMP359 = 1;


							i = i + X10_TEMP359;


							X10_TEMP306 = absf >= ERROR;

							}

						xt0 = xt;

						}

					final int X10_TEMP361 = kc;


					final int X10_TEMP362 = 1;


					kc = kc + X10_TEMP362;


					final int X10_TEMP369 = 0;


					final int X10_TEMP366 = Program.X10Util_minInt(particlesPerPlace, _LinearESOpenPIC2D_PARTICLE_XDENSITY,X10_TEMP101);


					final int X10_TEMP367 = 1;


					final int X10_TEMP370 = X10_TEMP366 - X10_TEMP367;


					final Region1 X10_TEMP372 = Program.createNewRegion1R(X10_TEMP369, X10_TEMP370,X10_TEMP101);


					final int RX10_TEMP50 = 1;


					int RX10_TEMP48 = X10_TEMP372.regSize;


					RX10_TEMP48 = RX10_TEMP48 - RX10_TEMP50;


					final int  RX10_TEMP49 = RX10_TEMP48+1;

					for(int RX10_TEMP46=0; RX10_TEMP46 < RX10_TEMP49; RX10_TEMP46++)
						{

						final int RX10_TEMP51 = RX10_TEMP46;


						final Point1 RX10_TEMP47 = Program.regionOrdinalPoint1(X10_TEMP372, RX10_TEMP51,X10_TEMP101);


						final int n = RX10_TEMP47.f0;


						int nn = n + koff;


						int k = nn / _LinearESOpenPIC2D_PARTICLE_XDENSITY;


						int j = nn % _LinearESOpenPIC2D_PARTICLE_XDENSITY;


						final double X10_TEMP376 = j + x0;


						final int X10_TEMP377 = 1;


						double xn = X10_TEMP376 + X10_TEMP377;


						final int X10_TEMP379 = 0;


						final boolean X10_TEMP381 = j == X10_TEMP379;

						if(X10_TEMP381)
							{

							xt0 = edgelx;


							final double X10_TEMP393 = 0.5;


							final double X10_TEMP387 = 0.0;


							final double X10_TEMP388 = 0.0;


							final double X10_TEMP389 = 0.0;


							final double X10_TEMP390 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt0, X10_TEMP387, X10_TEMP388, X10_TEMP389,X10_TEMP101);


							final double X10_TEMP392 = bnx * X10_TEMP390;


							final double X10_TEMP394 = X10_TEMP393 / X10_TEMP392;


							final double X10_TEMP396 = xt0 + X10_TEMP394;


							xt = X10_TEMP396;

							}
						else
							{

							final double X10_TEMP407 = 1.0;


							final double X10_TEMP401 = 0.0;


							final double X10_TEMP402 = 0.0;


							final double X10_TEMP403 = 0.0;


							final double X10_TEMP404 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt, X10_TEMP401, X10_TEMP402, X10_TEMP403,X10_TEMP101);


							final double X10_TEMP406 = bnx * X10_TEMP404;


							final double X10_TEMP409 = X10_TEMP407 / X10_TEMP406;


							final double X10_TEMP411 = xt + X10_TEMP409;


							xt = X10_TEMP411;

							}
 
						final double X10_TEMP416 = Program.X10Util_minDouble(xt, anx,X10_TEMP101);


						final double X10_TEMP418 = Program.X10Util_maxDouble(edgelx, X10_TEMP416,X10_TEMP101);


						xt = X10_TEMP418;


						final double X10_TEMP423 = 0.0;


						final double X10_TEMP424 = 0.0;


						final double X10_TEMP425 = 0.0;


						final double X10_TEMP426 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, xt0, X10_TEMP423, X10_TEMP424, X10_TEMP425,X10_TEMP101);


						final double X10_TEMP427 = bnx * X10_TEMP426;


						double f = X10_TEMP427 - xn;


						double absf = Math.abs(f);


						int i = 0;


						boolean X10_TEMP434 = absf >= ERROR;

						while(X10_TEMP434)
							{

							final boolean X10_TEMP436 = absf < BIG;

							if(X10_TEMP436)
								{

								final double X10_TEMP441 = 0.0;


								final double X10_TEMP442 = 0.0;


								final double X10_TEMP443 = 0.0;


								final double X10_TEMP444 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, xt, X10_TEMP441, X10_TEMP442, X10_TEMP443,X10_TEMP101);


								double fp = bnx * X10_TEMP444;


								xt0 = xt;


								final double X10_TEMP448 = f / fp;


								final double X10_TEMP451 = xt - X10_TEMP448;


								final double X10_TEMP453 = Program.X10Util_minDouble(X10_TEMP451, anx,X10_TEMP101);


								final double X10_TEMP455 = Program.X10Util_maxDouble(edgelx, X10_TEMP453,X10_TEMP101);


								xt = X10_TEMP455;

								}
							else
								{

								final double X10_TEMP456 = 0.0;


								final boolean X10_TEMP458 = f > X10_TEMP456;

								if(X10_TEMP458)
									{

									final double X10_TEMP461 = 0.5;


									final double X10_TEMP460 = xt - xt0;


									final double X10_TEMP462 = X10_TEMP461 * X10_TEMP460;


									final double X10_TEMP464 = xt0 + X10_TEMP462;


									xt = X10_TEMP464;

									}
								else
									{

									final double X10_TEMP465 = xt + xt;


									final double X10_TEMP467 = X10_TEMP465 - xt0;


									xt = X10_TEMP467;

									}
 								}
 
							final boolean X10_TEMP469 = i >= MAX_ITER;

							if(X10_TEMP469)
								{

								final String X10_TEMP471 = "3: Newton iteration max exceeded";

								System.err.println(X10_TEMP471);
								break;
								}
							else
								{

								final double X10_TEMP476 = 0.0;


								final double X10_TEMP477 = 0.0;


								final double X10_TEMP478 = 0.0;


								final double X10_TEMP479 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, xt, X10_TEMP476, X10_TEMP477, X10_TEMP478,X10_TEMP101);


								final double X10_TEMP480 = bnx * X10_TEMP479;


								final double X10_TEMP482 = X10_TEMP480 - xn;


								f = X10_TEMP482;


								final double X10_TEMP485 = Math.abs(f);


								absf = X10_TEMP485;

								}
 
							final int X10_TEMP486 = i;


							final int X10_TEMP487 = 1;


							i = i + X10_TEMP487;


							X10_TEMP434 = absf >= ERROR;

							}

						final int X10_TEMP490 = n + noff;


						final double X10_TEMP493 = xt;


						final Point2 RX10_TEMP52 = new Point2(X10_TEMP490, X,X10_TEMP101);
						
Program.globalPointerHashMap.get(X10_TEMP101).add(RX10_TEMP52.hashCode());


						final Dist2 RX10_TEMP53 = result.distValue;


						final Region2 RX10_TEMP54 = RX10_TEMP53.dReg;


						final int RX10_TEMP55 = Program.searchPointInRegion2(RX10_TEMP54, RX10_TEMP52,X10_TEMP101);


						final int RX10_TEMP56 = 0;


						final boolean RX10_TEMP57 = RX10_TEMP55 < RX10_TEMP56;

						if(RX10_TEMP57)
							{

							String RX10_TEMP58 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP58);

							}

						final int RX10_TEMP59 = Program.getPlaceFromDist2(RX10_TEMP53, RX10_TEMP55,X10_TEMP101);


						final int RX10_TEMP61 = 0;


						final boolean RX10_TEMP62 = RX10_TEMP59 != RX10_TEMP61;

						if(RX10_TEMP62)
							{

							String RX10_TEMP60 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP60);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP55, X10_TEMP493,X10_TEMP101);
						}

					final int X10_TEMP497 = 0;


					final int X10_TEMP495 = 1;


					final int X10_TEMP498 = particlesPerPlace - X10_TEMP495;


					final Region1 X10_TEMP500 = Program.createNewRegion1R(X10_TEMP497, X10_TEMP498,X10_TEMP101);


					final int RX10_TEMP67 = 1;


					int RX10_TEMP65 = X10_TEMP500.regSize;


					RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67;


					final int  RX10_TEMP66 = RX10_TEMP65+1;

					for(int RX10_TEMP63=0; RX10_TEMP63 < RX10_TEMP66; RX10_TEMP63++)
						{

						final int RX10_TEMP68 = RX10_TEMP63;


						final Point1 RX10_TEMP64 = Program.regionOrdinalPoint1(X10_TEMP500, RX10_TEMP68,X10_TEMP101);


						final int n = RX10_TEMP64.f0;


						int nn = n + koff;


						final int X10_TEMP502 = nn / _LinearESOpenPIC2D_PARTICLE_XDENSITY;


						final int X10_TEMP503 = 1;


						int k = X10_TEMP502 + X10_TEMP503;


						final int X10_TEMP505 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * k;


						int j = nn - X10_TEMP505;


						final int X10_TEMP508 = n % _LinearESOpenPIC2D_PARTICLE_XDENSITY;


						nn = X10_TEMP508;


						final boolean X10_TEMP510 = k == kc;

						if(X10_TEMP510)
							{

							double yn = k + y0;


							final int X10_TEMP512 = 1;


							final boolean X10_TEMP514 = k > X10_TEMP512;

							if(X10_TEMP514)
								{

								final double X10_TEMP525 = 1.0;


								final double X10_TEMP519 = 0.0;


								final double X10_TEMP520 = 0.0;


								final double X10_TEMP521 = 0.0;


								final double X10_TEMP522 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, yt, X10_TEMP519, X10_TEMP520, X10_TEMP521,X10_TEMP101);


								final double X10_TEMP524 = bny * X10_TEMP522;


								final double X10_TEMP527 = X10_TEMP525 / X10_TEMP524;


								final double X10_TEMP529 = yt + X10_TEMP527;


								yt = X10_TEMP529;

								}

							final double X10_TEMP534 = Program.X10Util_minDouble(yt, any,X10_TEMP101);


							final double X10_TEMP536 = Program.X10Util_maxDouble(edgelx, X10_TEMP534,X10_TEMP101);


							yt = X10_TEMP536;


							final double X10_TEMP541 = 0.0;


							final double X10_TEMP542 = 0.0;


							final double X10_TEMP543 = 0.0;


							final double X10_TEMP544 = Program.LinearESOpenPIC2D_linearDensityIntegral(X10_TEMP0, yt, X10_TEMP541, X10_TEMP542, X10_TEMP543,X10_TEMP101);


							final double X10_TEMP545 = bny * X10_TEMP544;


							double f = X10_TEMP545 - yn;


							double absf = Math.abs(f);


							int i = 0;


							boolean X10_TEMP552 = absf >= ERROR;

							while(X10_TEMP552)
								{

								final boolean X10_TEMP554 = absf < BIG;

								if(X10_TEMP554)
									{

									final double X10_TEMP559 = 0.0;


									final double X10_TEMP560 = 0.0;


									final double X10_TEMP561 = 0.0;


									final double X10_TEMP562 = Program.LinearESOpenPIC2D_linearDensityFn(X10_TEMP0, yt, X10_TEMP559, X10_TEMP560, X10_TEMP561,X10_TEMP101);


									double fp = bny * X10_TEMP562;


									yt0 = yt;


									final double X10_TEMP566 = f / fp;


									final double X10_TEMP569 = yt - X10_TEMP566;


									final double X10_TEMP571 = Program.X10Util_minDouble(X10_TEMP569, any,X10_TEMP101);


									final double X10_TEMP573 = Program.X10Util_maxDouble(edgely, X10_TEMP571,X10_TEMP101);


									yt = X10_TEMP573;

									}
								else
									{

									final double X10_TEMP574 = 0.0;


									final boolean X10_TEMP576 = f > X10_TEMP574;

									if(X10_TEMP576)
										{

										final double X10_TEMP579 = 0.5;


										final double X10_TEMP578 = yt - yt0;


										final double X10_TEMP580 = X10_TEMP579 * X10_TEMP578;


										final double X10_TEMP582 = yt0 + X10_TEMP580;


										yt = X10_TEMP582;

										}
									else
										{

										final double X10_TEMP583 = yt + yt;


										final double X10_TEMP585 = X10_TEMP583 - yt0;


										yt = X10_TEMP585;

										}
 									}
 
								final boolean X10_TEMP587 = i >= MAX_ITER;

								if(X10_TEMP587)
									{

									final String X10_TEMP589 = "4: Newton iteration max exceeded";

									System.err.println(X10_TEMP589);
									break;
									}
								else
									{

									final double X10_TEMP594 = 0.0;


									final double X10_TEMP595 = 0.0;


									final double X10_TEMP596 = 0.0;


									final double X10_TEMP597 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, yt, X10_TEMP594, X10_TEMP595, X10_TEMP596,X10_TEMP101);


									final double X10_TEMP598 = bny * X10_TEMP597;


									final double X10_TEMP600 = X10_TEMP598 - yn;


									f = X10_TEMP600;


									final double X10_TEMP603 = Math.abs(f);


									absf = X10_TEMP603;

									}
 
								final int X10_TEMP604 = i;


								final int X10_TEMP605 = 1;


								i = i + X10_TEMP605;


								X10_TEMP552 = absf >= ERROR;

								}

							final int X10_TEMP606 = kc;


							final int X10_TEMP607 = 1;


							kc = kc + X10_TEMP607;


							yt0 = yt;

							}

						final int X10_TEMP611 = n + noff;


						final int X10_TEMP614 = nn + noff;


						final Point2 RX10_TEMP69 = new Point2(X10_TEMP614, X,X10_TEMP101);
						
Program.globalPointerHashMap.get(X10_TEMP101).add(RX10_TEMP69.hashCode());


						final Dist2 RX10_TEMP70 = result.distValue;


						final Region2 RX10_TEMP71 = RX10_TEMP70.dReg;


						final int RX10_TEMP72 = Program.searchPointInRegion2(RX10_TEMP71, RX10_TEMP69,X10_TEMP101);


						final int RX10_TEMP73 = 0;


						final boolean RX10_TEMP74 = RX10_TEMP72 < RX10_TEMP73;

						if(RX10_TEMP74)
							{

							String RX10_TEMP75 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP75);

							}

						final int RX10_TEMP76 = Program.getPlaceFromDist2(RX10_TEMP70, RX10_TEMP72,X10_TEMP101);


						final int RX10_TEMP78 = 0;


						final boolean RX10_TEMP79 = RX10_TEMP76 != RX10_TEMP78;

						if(RX10_TEMP79)
							{

							String RX10_TEMP77 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP77);

							}

						final double RX10_TEMP80 = Program.getRefArrayValue2double(result, RX10_TEMP72,X10_TEMP101);


						final double X10_TEMP617 = RX10_TEMP80;


						final double X10_TEMP618 = X10_TEMP617;


						final Point2 RX10_TEMP81 = new Point2(X10_TEMP611, X,X10_TEMP101);
						
Program.globalPointerHashMap.get(X10_TEMP101).add(RX10_TEMP81.hashCode());


						final Dist2 RX10_TEMP82 = result.distValue;


						final Region2 RX10_TEMP83 = RX10_TEMP82.dReg;


						final int RX10_TEMP84 = Program.searchPointInRegion2(RX10_TEMP83, RX10_TEMP81,X10_TEMP101);


						final int RX10_TEMP85 = 0;


						final boolean RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85;

						if(RX10_TEMP86)
							{

							String RX10_TEMP87 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP87);

							}

						final int RX10_TEMP88 = Program.getPlaceFromDist2(RX10_TEMP82, RX10_TEMP84,X10_TEMP101);


						final int RX10_TEMP90 = 0;


						final boolean RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90;

						if(RX10_TEMP91)
							{

							String RX10_TEMP89 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP89);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP84, X10_TEMP618,X10_TEMP101);

						final int X10_TEMP621 = n + noff;


						final double X10_TEMP624 = yt;


						final Point2 RX10_TEMP92 = new Point2(X10_TEMP621, Y,X10_TEMP101);
						
Program.globalPointerHashMap.get(X10_TEMP101).add(RX10_TEMP92.hashCode());


						final Dist2 RX10_TEMP93 = result.distValue;


						final Region2 RX10_TEMP94 = RX10_TEMP93.dReg;


						final int RX10_TEMP95 = Program.searchPointInRegion2(RX10_TEMP94, RX10_TEMP92,X10_TEMP101);


						final int RX10_TEMP96 = 0;


						final boolean RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96;

						if(RX10_TEMP97)
							{

							String RX10_TEMP98 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP98);

							}

						final int RX10_TEMP99 = Program.getPlaceFromDist2(RX10_TEMP93, RX10_TEMP95,X10_TEMP101);


						final int RX10_TEMP101 = 0;


						final boolean RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101;

						if(RX10_TEMP102)
							{

							String RX10_TEMP100 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP100);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP95, X10_TEMP624,X10_TEMP101);
						}
					}
				}
			}
		return result;
		}
public static doubleRefArray2 LinearESOpenPIC2D_genParticleVelocity ( final LinearESOpenPIC2D X10_TEMP0, final int n, int myUniquePlacePoint)
		{

		final int X = 0;


		final int Y = 1;


		final int X10_TEMP6 = 0;


		final int X10_TEMP4 = 1;


		final int X10_TEMP7 = n - X10_TEMP4;


		final Region1 X10_TEMP14 = Program.createNewRegion1R(X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final int X10_TEMP11 = 0;


		final int X10_TEMP12 = 1;


		final Region1 X10_TEMP15 = Program.createNewRegion1R(X10_TEMP11, X10_TEMP12,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_distBlockStar2(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dResult.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dResult, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dResult, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 result = RX10_TEMP19;

		/*FINISH
*/			{

			final int X10_TEMP21 = 0;


			final int X10_TEMP19 = 1;


			final int X10_TEMP22 = _LinearESOpenPIC2D_PARTICLE_YDENSITY - X10_TEMP19;


			final Region1 X10_TEMP24 = Program.createNewRegion1R(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = X10_TEMP24.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 RX10_TEMP21 = Program.regionOrdinalPoint1(X10_TEMP24, RX10_TEMP25,myUniquePlacePoint);


				final int i = RX10_TEMP21.f0;


				final int offset = _LinearESOpenPIC2D_PARTICLE_XDENSITY * i;


				final int X10_TEMP29 = 0;


				final int X10_TEMP27 = 1;


				final int X10_TEMP30 = _LinearESOpenPIC2D_PARTICLE_XDENSITY - X10_TEMP27;


				final Region1 X10_TEMP32 = Program.createNewRegion1R(X10_TEMP29, X10_TEMP30,myUniquePlacePoint);


				final int RX10_TEMP30 = 1;


				int RX10_TEMP28 = X10_TEMP32.regSize;


				RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30;


				final int  RX10_TEMP29 = RX10_TEMP28+1;

				for(int RX10_TEMP26=0; RX10_TEMP26 < RX10_TEMP29; RX10_TEMP26++)
					{

					final int RX10_TEMP31 = RX10_TEMP26;


					final Point1 RX10_TEMP27 = Program.regionOrdinalPoint1(X10_TEMP32, RX10_TEMP31,myUniquePlacePoint);


					final int j = RX10_TEMP27.f0;


					final int idx = j + offset;


					final Random X10_TEMP34 = X10_TEMP0.r;


					final double X10_TEMP35 = Program.Random_nextNormal(X10_TEMP34,myUniquePlacePoint);


					final double vx = _LinearESOpenPIC2D_THERMAL_XVELOCITY * X10_TEMP35;


					final Random X10_TEMP37 = X10_TEMP0.r;


					final double X10_TEMP38 = Program.Random_nextNormal(X10_TEMP37,myUniquePlacePoint);


					final double vy = _LinearESOpenPIC2D_THERMAL_YVELOCITY * X10_TEMP38;


					int X10_TEMP42 = 0;


					final Point2 RX10_TEMP32 = new Point2(idx, X10_TEMP42,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP32.hashCode());


					final Region2 RX10_TEMP33 = dResult.dReg;


					final int RX10_TEMP34 = Program.searchPointInRegion2(RX10_TEMP33, RX10_TEMP32,myUniquePlacePoint);


					final int RX10_TEMP35 = 0;


					final boolean RX10_TEMP36 = RX10_TEMP34 < RX10_TEMP35;

					if(RX10_TEMP36)
						{

						final String RX10_TEMP37 = "Point RX10_TEMP32 not found in the distribution dResult.";

						throw new RuntimeException(RX10_TEMP37);

						}

					final int RX10_TEMP38 = Program.getPlaceFromDist2(dResult, RX10_TEMP34,myUniquePlacePoint);


					final int X10_TEMP44 = RX10_TEMP38;

					//async(X10_TEMP44)
						{

						final double X10_TEMP49 = vx;


						final Point2 RX10_TEMP39 = new Point2(idx, X,X10_TEMP44);
						
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP39.hashCode());


						final Dist2 RX10_TEMP40 = result.distValue;


						final Region2 RX10_TEMP41 = RX10_TEMP40.dReg;


						final int RX10_TEMP42 = Program.searchPointInRegion2(RX10_TEMP41, RX10_TEMP39,X10_TEMP44);


						final int RX10_TEMP43 = 0;


						final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

						if(RX10_TEMP44)
							{

							String RX10_TEMP45 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP45);

							}

						final int RX10_TEMP46 = Program.getPlaceFromDist2(RX10_TEMP40, RX10_TEMP42,X10_TEMP44);


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

						if(RX10_TEMP49)
							{

							String RX10_TEMP47 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP47);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP42, X10_TEMP49,X10_TEMP44);

						final double X10_TEMP54 = vy;


						final Point2 RX10_TEMP50 = new Point2(idx, Y,X10_TEMP44);
						
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP50.hashCode());


						final Dist2 RX10_TEMP51 = result.distValue;


						final Region2 RX10_TEMP52 = RX10_TEMP51.dReg;


						final int RX10_TEMP53 = Program.searchPointInRegion2(RX10_TEMP52, RX10_TEMP50,X10_TEMP44);


						final int RX10_TEMP54 = 0;


						final boolean RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54;

						if(RX10_TEMP55)
							{

							String RX10_TEMP56 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP56);

							}

						final int RX10_TEMP57 = Program.getPlaceFromDist2(RX10_TEMP51, RX10_TEMP53,X10_TEMP44);


						final int RX10_TEMP59 = 0;


						final boolean RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59;

						if(RX10_TEMP60)
							{

							String RX10_TEMP58 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP58);

							}
						Program.setRefArrayValue2double(result, RX10_TEMP53, X10_TEMP54,X10_TEMP44);
						}
					}
				}
			}

		final String X10_TEMP56 = "Init: correcting drift";

		System.out.println(X10_TEMP56);

		final Dist1 X10_TEMP57 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP57;


		final Region1 RX10_TEMP61 = dUnique.dReg;


		final int RX10_TEMP62 = 0;


		final int RX10_TEMP63 = 1;


		int RX10_TEMP64 = 1;


		RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP63;


		final int  RX10_TEMP65 = RX10_TEMP64+1;


		final int RX10_TEMP66 = RX10_TEMP64+1;


		final intStub[] RX10_TEMP67 = new intStub[RX10_TEMP66];

		/*FINISH
*/			{
			for(int RX10_TEMP68=0; RX10_TEMP68 < RX10_TEMP65; RX10_TEMP68++)
				{

				final int RX10_TEMP69 = 0;


				final int RX10_TEMP70 = RX10_TEMP68;


				final int RX10_TEMP71 = 0;


				final int RX10_TEMP72 = Program.getDistLocalCount1(dUnique, RX10_TEMP70,myUniquePlacePoint);


				final int RX10_TEMP73 = RX10_TEMP72 - RX10_TEMP63;

				//async(RX10_TEMP71)
					{

					final int RX10_TEMP75 = RX10_TEMP73+1;


					final int[] RX10_TEMP76 = new int/*NewUpdatableArray*/[RX10_TEMP75];
/*arrayInitBlock*/
for(int RX10_TEMP74= 0;RX10_TEMP74 <RX10_TEMP76.length ;RX10_TEMP74++ )						{

						final int X10_TEMP60 = 0;

						RX10_TEMP76[RX10_TEMP74] =X10_TEMP60;
						}

;


					final intStub RX10_TEMP77 = new intStub(RX10_TEMP76,RX10_TEMP71);
					
Program.globalPointerHashMap.get(RX10_TEMP71).add(RX10_TEMP77.hashCode());

					//async(RX10_TEMP69)
						{
						RX10_TEMP67[RX10_TEMP68] = RX10_TEMP77;
						}
					}
				}
			}

		final intStub[] RX10_TEMP78 = (intStub[])(new intStub/*value*/[RX10_TEMP65]);
/*arrayInitBlock*/
for(int RX10_TEMP80= 0;RX10_TEMP80 <RX10_TEMP78.length ;RX10_TEMP80++ )			{

			final intStub RX10_TEMP79 = RX10_TEMP67[RX10_TEMP80];

			RX10_TEMP78[RX10_TEMP80] =RX10_TEMP79;
			}

;


		final intRefArray1 RX10_TEMP81 = new intRefArray1(dUnique, RX10_TEMP78,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP81.hashCode());


		final intRefArray1 numParticles = RX10_TEMP81;


		final Region1 RX10_TEMP82 = dUnique.dReg;


		final int RX10_TEMP83 = 0;


		final int RX10_TEMP84 = 1;


		int RX10_TEMP85 = 1;


		RX10_TEMP85 = RX10_TEMP85 - RX10_TEMP84;


		final int  RX10_TEMP86 = RX10_TEMP85+1;


		final int RX10_TEMP87 = RX10_TEMP85+1;


		final doubleStub[] RX10_TEMP88 = new doubleStub[RX10_TEMP87];

		/*FINISH
*/			{
			for(int RX10_TEMP89=0; RX10_TEMP89 < RX10_TEMP86; RX10_TEMP89++)
				{

				final int RX10_TEMP90 = 0;


				final int RX10_TEMP91 = RX10_TEMP89;


				final int RX10_TEMP92 = 0;


				final int RX10_TEMP93 = Program.getDistLocalCount1(dUnique, RX10_TEMP91,myUniquePlacePoint);


				final int RX10_TEMP94 = RX10_TEMP93 - RX10_TEMP84;

				//async(RX10_TEMP92)
					{

					final int RX10_TEMP96 = RX10_TEMP94+1;


					final double[] RX10_TEMP97 = new double/*NewUpdatableArray*/[RX10_TEMP96];
/*arrayInitBlock*/
for(int RX10_TEMP95= 0;RX10_TEMP95 <RX10_TEMP97.length ;RX10_TEMP95++ )						{

						final double X10_TEMP63 = 0.0;

						RX10_TEMP97[RX10_TEMP95] =X10_TEMP63;
						}

;


					final doubleStub RX10_TEMP98 = new doubleStub(RX10_TEMP97,RX10_TEMP92);
					
Program.globalPointerHashMap.get(RX10_TEMP92).add(RX10_TEMP98.hashCode());

					//async(RX10_TEMP90)
						{
						RX10_TEMP88[RX10_TEMP89] = RX10_TEMP98;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP99 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP86]);
/*arrayInitBlock*/
for(int RX10_TEMP101= 0;RX10_TEMP101 <RX10_TEMP99.length ;RX10_TEMP101++ )			{

			final doubleStub RX10_TEMP100 = RX10_TEMP88[RX10_TEMP101];

			RX10_TEMP99[RX10_TEMP101] =RX10_TEMP100;
			}

;


		final doubleRefArray1 RX10_TEMP102 = new doubleRefArray1(dUnique, RX10_TEMP99,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP102.hashCode());


		final doubleRefArray1 sumX = RX10_TEMP102;


		final Region1 RX10_TEMP103 = dUnique.dReg;


		final int RX10_TEMP104 = 0;


		final int RX10_TEMP105 = 1;


		int RX10_TEMP106 = 1;


		RX10_TEMP106 = RX10_TEMP106 - RX10_TEMP105;


		final int  RX10_TEMP107 = RX10_TEMP106+1;


		final int RX10_TEMP108 = RX10_TEMP106+1;


		final doubleStub[] RX10_TEMP109 = new doubleStub[RX10_TEMP108];

		/*FINISH
*/			{
			for(int RX10_TEMP110=0; RX10_TEMP110 < RX10_TEMP107; RX10_TEMP110++)
				{

				final int RX10_TEMP111 = 0;


				final int RX10_TEMP112 = RX10_TEMP110;


				final int RX10_TEMP113 = 0;


				final int RX10_TEMP114 = Program.getDistLocalCount1(dUnique, RX10_TEMP112,myUniquePlacePoint);


				final int RX10_TEMP115 = RX10_TEMP114 - RX10_TEMP105;

				//async(RX10_TEMP113)
					{

					final int RX10_TEMP117 = RX10_TEMP115+1;


					final double[] RX10_TEMP118 = new double/*NewUpdatableArray*/[RX10_TEMP117];
/*arrayInitBlock*/
for(int RX10_TEMP116= 0;RX10_TEMP116 <RX10_TEMP118.length ;RX10_TEMP116++ )						{

						final double X10_TEMP66 = 0.0;

						RX10_TEMP118[RX10_TEMP116] =X10_TEMP66;
						}

;


					final doubleStub RX10_TEMP119 = new doubleStub(RX10_TEMP118,RX10_TEMP113);
					
Program.globalPointerHashMap.get(RX10_TEMP113).add(RX10_TEMP119.hashCode());

					//async(RX10_TEMP111)
						{
						RX10_TEMP109[RX10_TEMP110] = RX10_TEMP119;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP120 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP107]);
/*arrayInitBlock*/
for(int RX10_TEMP122= 0;RX10_TEMP122 <RX10_TEMP120.length ;RX10_TEMP122++ )			{

			final doubleStub RX10_TEMP121 = RX10_TEMP109[RX10_TEMP122];

			RX10_TEMP120[RX10_TEMP122] =RX10_TEMP121;
			}

;


		final doubleRefArray1 RX10_TEMP123 = new doubleRefArray1(dUnique, RX10_TEMP120,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP123.hashCode());


		final doubleRefArray1 sumY = RX10_TEMP123;

		/*FINISH
*/			{

			final Dist1 X10_TEMP69 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP125 = X10_TEMP69.dReg;


			final int RX10_TEMP128 = 1;


			int RX10_TEMP126 = RX10_TEMP125.regSize;


			RX10_TEMP126 = RX10_TEMP126 - RX10_TEMP128;


			final int  RX10_TEMP127 = RX10_TEMP126+1;

			for(int RX10_TEMP124=0; RX10_TEMP124 < RX10_TEMP127; RX10_TEMP124++)
				{

				final int RX10_TEMP129 = RX10_TEMP124;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP125, RX10_TEMP129,myUniquePlacePoint);


				final Region1 RX10_TEMP130 = X10_TEMP69.dReg;


				final int RX10_TEMP131 = Program.searchPointInRegion1(RX10_TEMP130, pl,myUniquePlacePoint);


				final int RX10_TEMP132 = 0;


				final boolean RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132;

				if(RX10_TEMP133)
					{

					final String RX10_TEMP134 = "Point pl not found in the distribution X10_TEMP69.";

					throw new RuntimeException(RX10_TEMP134);

					}

				final int RX10_TEMP135 = Program.getPlaceFromDist1(X10_TEMP69, RX10_TEMP131,myUniquePlacePoint);


				final int X10_TEMP70 = RX10_TEMP135;

				//async(X10_TEMP70)
					{

					final int X10_TEMP73 = 0;


					final Region1 rLocal1 = Program.X10Util_getLRank2D(dResult, X10_TEMP73,X10_TEMP70);


					final Region2 X10_TEMP79 = Program.createNewRegion2AR(rLocal1, X, X,X10_TEMP70);


					final int RX10_TEMP139 = 1;


					int RX10_TEMP137 = X10_TEMP79.regSize;


					RX10_TEMP137 = RX10_TEMP137 - RX10_TEMP139;


					final int  RX10_TEMP138 = RX10_TEMP137+1;

					for(int RX10_TEMP136=0; RX10_TEMP136 < RX10_TEMP138; RX10_TEMP136++)
						{

						final int RX10_TEMP140 = RX10_TEMP136;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP79, RX10_TEMP140,X10_TEMP70);


						final Dist1 RX10_TEMP141 = sumX.distValue;


						final Region1 RX10_TEMP142 = RX10_TEMP141.dReg;


						final int RX10_TEMP143 = Program.searchPointInRegion1(RX10_TEMP142, pl,X10_TEMP70);


						final int RX10_TEMP144 = 0;


						final boolean RX10_TEMP145 = RX10_TEMP143 < RX10_TEMP144;

						if(RX10_TEMP145)
							{

							String RX10_TEMP146 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP146);

							}

						final int RX10_TEMP147 = Program.getPlaceFromDist1(RX10_TEMP141, RX10_TEMP143,X10_TEMP70);


						final int RX10_TEMP149 = 0;


						final boolean RX10_TEMP150 = RX10_TEMP147 != RX10_TEMP149;

						if(RX10_TEMP150)
							{

							String RX10_TEMP148 = "Bad place access for array sumX";

							throw new RuntimeException(RX10_TEMP148);

							}

						final double RX10_TEMP151 = Program.getRefArrayValue1double(sumX, RX10_TEMP143,X10_TEMP70);


						final double X10_TEMP83 = RX10_TEMP151;


						final Dist2 RX10_TEMP152 = result.distValue;


						final Region2 RX10_TEMP153 = RX10_TEMP152.dReg;


						final int RX10_TEMP154 = Program.searchPointInRegion2(RX10_TEMP153, pt,X10_TEMP70);


						final int RX10_TEMP155 = 0;


						final boolean RX10_TEMP156 = RX10_TEMP154 < RX10_TEMP155;

						if(RX10_TEMP156)
							{

							String RX10_TEMP157 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP157);

							}

						final int RX10_TEMP158 = Program.getPlaceFromDist2(RX10_TEMP152, RX10_TEMP154,X10_TEMP70);


						final int RX10_TEMP160 = 0;


						final boolean RX10_TEMP161 = RX10_TEMP158 != RX10_TEMP160;

						if(RX10_TEMP161)
							{

							String RX10_TEMP159 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP159);

							}

						final double RX10_TEMP162 = Program.getRefArrayValue2double(result, RX10_TEMP154,X10_TEMP70);


						final double X10_TEMP84 = RX10_TEMP162;


						final double X10_TEMP87 = X10_TEMP83 + X10_TEMP84;


						final double X10_TEMP88 = X10_TEMP87;


						final Dist1 RX10_TEMP163 = sumX.distValue;


						final Region1 RX10_TEMP164 = RX10_TEMP163.dReg;


						final int RX10_TEMP165 = Program.searchPointInRegion1(RX10_TEMP164, pl,X10_TEMP70);


						final int RX10_TEMP166 = 0;


						final boolean RX10_TEMP167 = RX10_TEMP165 < RX10_TEMP166;

						if(RX10_TEMP167)
							{

							String RX10_TEMP168 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP168);

							}

						final int RX10_TEMP169 = Program.getPlaceFromDist1(RX10_TEMP163, RX10_TEMP165,X10_TEMP70);


						final int RX10_TEMP171 = 0;


						final boolean RX10_TEMP172 = RX10_TEMP169 != RX10_TEMP171;

						if(RX10_TEMP172)
							{

							String RX10_TEMP170 = "Bad place access for array sumX";

							throw new RuntimeException(RX10_TEMP170);

							}
						Program.setRefArrayValue1double(sumX, RX10_TEMP165, X10_TEMP88,X10_TEMP70);

						final Dist1 RX10_TEMP173 = numParticles.distValue;


						final Region1 RX10_TEMP174 = RX10_TEMP173.dReg;


						final int RX10_TEMP175 = Program.searchPointInRegion1(RX10_TEMP174, pl,X10_TEMP70);


						final int RX10_TEMP176 = 0;


						final boolean RX10_TEMP177 = RX10_TEMP175 < RX10_TEMP176;

						if(RX10_TEMP177)
							{

							String RX10_TEMP178 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP178);

							}

						final int RX10_TEMP179 = Program.getPlaceFromDist1(RX10_TEMP173, RX10_TEMP175,X10_TEMP70);


						final int RX10_TEMP181 = 0;


						final boolean RX10_TEMP182 = RX10_TEMP179 != RX10_TEMP181;

						if(RX10_TEMP182)
							{

							String RX10_TEMP180 = "Bad place access for array numParticles";

							throw new RuntimeException(RX10_TEMP180);

							}

						final int RX10_TEMP183 = Program.getRefArrayValue1int(numParticles, RX10_TEMP175,X10_TEMP70);


						final int X10_TEMP91 = RX10_TEMP183;


						final int X10_TEMP92 = 1;


						final int X10_TEMP95 = X10_TEMP91 + X10_TEMP92;


						final int X10_TEMP96 = X10_TEMP95;


						final Dist1 RX10_TEMP184 = numParticles.distValue;


						final Region1 RX10_TEMP185 = RX10_TEMP184.dReg;


						final int RX10_TEMP186 = Program.searchPointInRegion1(RX10_TEMP185, pl,X10_TEMP70);


						final int RX10_TEMP187 = 0;


						final boolean RX10_TEMP188 = RX10_TEMP186 < RX10_TEMP187;

						if(RX10_TEMP188)
							{

							String RX10_TEMP189 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP189);

							}

						final int RX10_TEMP190 = Program.getPlaceFromDist1(RX10_TEMP184, RX10_TEMP186,X10_TEMP70);


						final int RX10_TEMP192 = 0;


						final boolean RX10_TEMP193 = RX10_TEMP190 != RX10_TEMP192;

						if(RX10_TEMP193)
							{

							String RX10_TEMP191 = "Bad place access for array numParticles";

							throw new RuntimeException(RX10_TEMP191);

							}
						Program.setRefArrayValue1int(numParticles, RX10_TEMP186, X10_TEMP96,X10_TEMP70);
						}

					final Region2 X10_TEMP101 = Program.createNewRegion2AR(rLocal1, Y, Y,X10_TEMP70);


					final int RX10_TEMP197 = 1;


					int RX10_TEMP195 = X10_TEMP101.regSize;


					RX10_TEMP195 = RX10_TEMP195 - RX10_TEMP197;


					final int  RX10_TEMP196 = RX10_TEMP195+1;

					for(int RX10_TEMP194=0; RX10_TEMP194 < RX10_TEMP196; RX10_TEMP194++)
						{

						final int RX10_TEMP198 = RX10_TEMP194;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP101, RX10_TEMP198,X10_TEMP70);


						final Dist1 RX10_TEMP199 = sumY.distValue;


						final Region1 RX10_TEMP200 = RX10_TEMP199.dReg;


						final int RX10_TEMP201 = Program.searchPointInRegion1(RX10_TEMP200, pl,X10_TEMP70);


						final int RX10_TEMP202 = 0;


						final boolean RX10_TEMP203 = RX10_TEMP201 < RX10_TEMP202;

						if(RX10_TEMP203)
							{

							String RX10_TEMP204 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP204);

							}

						final int RX10_TEMP205 = Program.getPlaceFromDist1(RX10_TEMP199, RX10_TEMP201,X10_TEMP70);


						final int RX10_TEMP207 = 0;


						final boolean RX10_TEMP208 = RX10_TEMP205 != RX10_TEMP207;

						if(RX10_TEMP208)
							{

							String RX10_TEMP206 = "Bad place access for array sumY";

							throw new RuntimeException(RX10_TEMP206);

							}

						final double RX10_TEMP209 = Program.getRefArrayValue1double(sumY, RX10_TEMP201,X10_TEMP70);


						final double X10_TEMP105 = RX10_TEMP209;


						final Dist2 RX10_TEMP210 = result.distValue;


						final Region2 RX10_TEMP211 = RX10_TEMP210.dReg;


						final int RX10_TEMP212 = Program.searchPointInRegion2(RX10_TEMP211, pt,X10_TEMP70);


						final int RX10_TEMP213 = 0;


						final boolean RX10_TEMP214 = RX10_TEMP212 < RX10_TEMP213;

						if(RX10_TEMP214)
							{

							String RX10_TEMP215 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP215);

							}

						final int RX10_TEMP216 = Program.getPlaceFromDist2(RX10_TEMP210, RX10_TEMP212,X10_TEMP70);


						final int RX10_TEMP218 = 0;


						final boolean RX10_TEMP219 = RX10_TEMP216 != RX10_TEMP218;

						if(RX10_TEMP219)
							{

							String RX10_TEMP217 = "Bad place access for array result";

							throw new RuntimeException(RX10_TEMP217);

							}

						final double RX10_TEMP220 = Program.getRefArrayValue2double(result, RX10_TEMP212,X10_TEMP70);


						final double X10_TEMP106 = RX10_TEMP220;


						final double X10_TEMP109 = X10_TEMP105 + X10_TEMP106;


						final double X10_TEMP110 = X10_TEMP109;


						final Dist1 RX10_TEMP221 = sumY.distValue;


						final Region1 RX10_TEMP222 = RX10_TEMP221.dReg;


						final int RX10_TEMP223 = Program.searchPointInRegion1(RX10_TEMP222, pl,X10_TEMP70);


						final int RX10_TEMP224 = 0;


						final boolean RX10_TEMP225 = RX10_TEMP223 < RX10_TEMP224;

						if(RX10_TEMP225)
							{

							String RX10_TEMP226 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP226);

							}

						final int RX10_TEMP227 = Program.getPlaceFromDist1(RX10_TEMP221, RX10_TEMP223,X10_TEMP70);


						final int RX10_TEMP229 = 0;


						final boolean RX10_TEMP230 = RX10_TEMP227 != RX10_TEMP229;

						if(RX10_TEMP230)
							{

							String RX10_TEMP228 = "Bad place access for array sumY";

							throw new RuntimeException(RX10_TEMP228);

							}
						Program.setRefArrayValue1double(sumY, RX10_TEMP223, X10_TEMP110,X10_TEMP70);
						}
					}
				}
			}

		final int totalParticles = Program.intrefArraySum1(numParticles,myUniquePlacePoint);


		final double X10_TEMP112 = Program.doublerefArraySum1(sumX,myUniquePlacePoint);


		final double driftX = X10_TEMP112 / totalParticles;


		final double X10_TEMP114 = Program.doublerefArraySum1(sumY,myUniquePlacePoint);


		final double driftY = X10_TEMP114 / totalParticles;


		final String X10_TEMP117 = "Init: updating with drift";

		System.out.println(X10_TEMP117);
		/*FINISH
*/			{

			final Dist1 X10_TEMP119 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP232 = X10_TEMP119.dReg;


			final int RX10_TEMP235 = 1;


			int RX10_TEMP233 = RX10_TEMP232.regSize;


			RX10_TEMP233 = RX10_TEMP233 - RX10_TEMP235;


			final int  RX10_TEMP234 = RX10_TEMP233+1;

			for(int RX10_TEMP231=0; RX10_TEMP231 < RX10_TEMP234; RX10_TEMP231++)
				{

				final int RX10_TEMP236 = RX10_TEMP231;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP232, RX10_TEMP236,myUniquePlacePoint);


				final Region1 RX10_TEMP237 = X10_TEMP119.dReg;


				final int RX10_TEMP238 = Program.searchPointInRegion1(RX10_TEMP237, pl,myUniquePlacePoint);


				final int RX10_TEMP239 = 0;


				final boolean RX10_TEMP240 = RX10_TEMP238 < RX10_TEMP239;

				if(RX10_TEMP240)
					{

					final String RX10_TEMP241 = "Point pl not found in the distribution X10_TEMP119.";

					throw new RuntimeException(RX10_TEMP241);

					}

				final int RX10_TEMP242 = Program.getPlaceFromDist1(X10_TEMP119, RX10_TEMP238,myUniquePlacePoint);


				final int X10_TEMP120 = RX10_TEMP242;

				//async(X10_TEMP120)
					{

					final int X10_TEMP123 = 0;


					final Region1 rLocal1 = Program.X10Util_getLRank2D(dResult, X10_TEMP123,X10_TEMP120);


					final Region2 X10_TEMP129 = Program.createNewRegion2AR(rLocal1, X, X,X10_TEMP120);


					final int X10_TEMP130 = 0;


					final int RX10_TEMP246 = 1;


					int RX10_TEMP244 = X10_TEMP129.regSize;


					RX10_TEMP244 = RX10_TEMP244 - RX10_TEMP246;


					final int  RX10_TEMP245 = RX10_TEMP244+1;

					for(int RX10_TEMP243=0; RX10_TEMP243 < RX10_TEMP245; RX10_TEMP243++)
						{

						final int RX10_TEMP247 = RX10_TEMP243;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP129, RX10_TEMP247,X10_TEMP120);

						//async(X10_TEMP130)
							{

							final Dist2 RX10_TEMP248 = result.distValue;


							final Region2 RX10_TEMP249 = RX10_TEMP248.dReg;


							final int RX10_TEMP250 = Program.searchPointInRegion2(RX10_TEMP249, pt,X10_TEMP130);


							final int RX10_TEMP251 = 0;


							final boolean RX10_TEMP252 = RX10_TEMP250 < RX10_TEMP251;

							if(RX10_TEMP252)
								{

								String RX10_TEMP253 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP253);

								}

							final int RX10_TEMP254 = Program.getPlaceFromDist2(RX10_TEMP248, RX10_TEMP250,X10_TEMP130);


							final int RX10_TEMP256 = 0;


							final boolean RX10_TEMP257 = RX10_TEMP254 != RX10_TEMP256;

							if(RX10_TEMP257)
								{

								String RX10_TEMP255 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP255);

								}

							final double RX10_TEMP258 = Program.getRefArrayValue2double(result, RX10_TEMP250,X10_TEMP130);


							final double X10_TEMP133 = RX10_TEMP258;


							final double X10_TEMP136 = X10_TEMP133 - driftX;


							final double X10_TEMP137 = X10_TEMP136;


							final Dist2 RX10_TEMP259 = result.distValue;


							final Region2 RX10_TEMP260 = RX10_TEMP259.dReg;


							final int RX10_TEMP261 = Program.searchPointInRegion2(RX10_TEMP260, pt,X10_TEMP130);


							final int RX10_TEMP262 = 0;


							final boolean RX10_TEMP263 = RX10_TEMP261 < RX10_TEMP262;

							if(RX10_TEMP263)
								{

								String RX10_TEMP264 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP264);

								}

							final int RX10_TEMP265 = Program.getPlaceFromDist2(RX10_TEMP259, RX10_TEMP261,X10_TEMP130);


							final int RX10_TEMP267 = 0;


							final boolean RX10_TEMP268 = RX10_TEMP265 != RX10_TEMP267;

							if(RX10_TEMP268)
								{

								String RX10_TEMP266 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP266);

								}
							Program.setRefArrayValue2double(result, RX10_TEMP261, X10_TEMP137,X10_TEMP130);
							}
						}

					final Region2 X10_TEMP142 = Program.createNewRegion2AR(rLocal1, Y, Y,myUniquePlacePoint);


					final int X10_TEMP143 = 0;


					final int RX10_TEMP272 = 1;


					int RX10_TEMP270 = X10_TEMP142.regSize;


					RX10_TEMP270 = RX10_TEMP270 - RX10_TEMP272;


					final int  RX10_TEMP271 = RX10_TEMP270+1;

					for(int RX10_TEMP269=0; RX10_TEMP269 < RX10_TEMP271; RX10_TEMP269++)
						{

						final int RX10_TEMP273 = RX10_TEMP269;


						final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP142, RX10_TEMP273,myUniquePlacePoint);

						//async(X10_TEMP143)
							{

							final Dist2 RX10_TEMP274 = result.distValue;


							final Region2 RX10_TEMP275 = RX10_TEMP274.dReg;


							final int RX10_TEMP276 = Program.searchPointInRegion2(RX10_TEMP275, pt,X10_TEMP143);


							final int RX10_TEMP277 = 0;


							final boolean RX10_TEMP278 = RX10_TEMP276 < RX10_TEMP277;

							if(RX10_TEMP278)
								{

								String RX10_TEMP279 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP279);

								}

							final int RX10_TEMP280 = Program.getPlaceFromDist2(RX10_TEMP274, RX10_TEMP276,X10_TEMP143);


							final int RX10_TEMP282 = 0;


							final boolean RX10_TEMP283 = RX10_TEMP280 != RX10_TEMP282;

							if(RX10_TEMP283)
								{

								String RX10_TEMP281 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP281);

								}

							final double RX10_TEMP284 = Program.getRefArrayValue2double(result, RX10_TEMP276,X10_TEMP143);


							final double X10_TEMP146 = RX10_TEMP284;


							final double X10_TEMP149 = X10_TEMP146 - driftY;


							final double X10_TEMP150 = X10_TEMP149;


							final Dist2 RX10_TEMP285 = result.distValue;


							final Region2 RX10_TEMP286 = RX10_TEMP285.dReg;


							final int RX10_TEMP287 = Program.searchPointInRegion2(RX10_TEMP286, pt,X10_TEMP143);


							final int RX10_TEMP288 = 0;


							final boolean RX10_TEMP289 = RX10_TEMP287 < RX10_TEMP288;

							if(RX10_TEMP289)
								{

								String RX10_TEMP290 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP290);

								}

							final int RX10_TEMP291 = Program.getPlaceFromDist2(RX10_TEMP285, RX10_TEMP287,X10_TEMP143);


							final int RX10_TEMP293 = 0;


							final boolean RX10_TEMP294 = RX10_TEMP291 != RX10_TEMP293;

							if(RX10_TEMP294)
								{

								String RX10_TEMP292 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP292);

								}
							Program.setRefArrayValue2double(result, RX10_TEMP287, X10_TEMP150,X10_TEMP143);
							}
						}
					}
				}
			}

		final boolean X10_TEMP152 = totalParticles != _LinearESOpenPIC2D_NPARTICLES;

		if(X10_TEMP152)
			{

			final String X10_TEMP153 = "Velocity distribution truncated, number of ";


			final String X10_TEMP154 = "particles = ";


			final String X10_TEMP155 = X10_TEMP153 + X10_TEMP154;


			final String X10_TEMP157 = X10_TEMP155 + totalParticles;

			System.err.println(X10_TEMP157);
			}
		return result;
		}
public static ParticleRefArray1 LinearESOpenPIC2D_genParticles ( final LinearESOpenPIC2D X10_TEMP0, final int n, final doubleRefArray2 position, final doubleRefArray2 velocity, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP5 = n - X10_TEMP2;


		final Region1 X10_TEMP7 = Program.createNewRegion1R(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		final Dist1 X10_TEMP8 = Program.getBlockDist1(X10_TEMP7,myUniquePlacePoint);


		final Dist1 dResult = X10_TEMP8;


		final Region1 RX10_TEMP0 = dResult.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final ParticleStub[] RX10_TEMP6 = new ParticleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dResult, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;


				final Point1[] RX10_TEMP13 = Program.getDistLocalArray1(dResult, RX10_TEMP9,myUniquePlacePoint);

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP64 = RX10_TEMP12+1;


					final Particle[] RX10_TEMP65 = new Particle/*NewUpdatableArray*/[RX10_TEMP64];
/*arrayInitBlock*/
for(int RX10_TEMP14= 0;RX10_TEMP14 <RX10_TEMP65.length ;RX10_TEMP14++ )						{

						final Point1 RX10_TEMP15 = RX10_TEMP13[RX10_TEMP14];


						final int i = RX10_TEMP15.f0;


						final int X10_TEMP12 = 0;


						final Point2 RX10_TEMP16 = new Point2(i, X10_TEMP12,RX10_TEMP10);
						
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());


						final Dist2 RX10_TEMP17 = position.distValue;


						final Region2 RX10_TEMP18 = RX10_TEMP17.dReg;


						final int RX10_TEMP19 = Program.searchPointInRegion2(RX10_TEMP18, RX10_TEMP16,RX10_TEMP10);


						final int RX10_TEMP20 = 0;


						final boolean RX10_TEMP21 = RX10_TEMP19 < RX10_TEMP20;

						if(RX10_TEMP21)
							{

							String RX10_TEMP22 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP22);

							}

						final int RX10_TEMP23 = Program.getPlaceFromDist2(RX10_TEMP17, RX10_TEMP19,RX10_TEMP10);


						final int RX10_TEMP25 = 0;


						final boolean RX10_TEMP26 = RX10_TEMP23 != RX10_TEMP25;

						if(RX10_TEMP26)
							{

							String RX10_TEMP24 = "Bad place access for array position";

							throw new RuntimeException(RX10_TEMP24);

							}

						final double RX10_TEMP27 = Program.getRefArrayValue2double(position, RX10_TEMP19,RX10_TEMP10);


						double X10_TEMP26 = RX10_TEMP27;


						final int X10_TEMP16 = 1;


						final Point2 RX10_TEMP28 = new Point2(i, X10_TEMP16,RX10_TEMP10);
						
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP28.hashCode());


						final Dist2 RX10_TEMP29 = position.distValue;


						final Region2 RX10_TEMP30 = RX10_TEMP29.dReg;


						final int RX10_TEMP31 = Program.searchPointInRegion2(RX10_TEMP30, RX10_TEMP28,RX10_TEMP10);


						final int RX10_TEMP32 = 0;


						final boolean RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32;

						if(RX10_TEMP33)
							{

							String RX10_TEMP34 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP34);

							}

						final int RX10_TEMP35 = Program.getPlaceFromDist2(RX10_TEMP29, RX10_TEMP31,RX10_TEMP10);


						final int RX10_TEMP37 = 0;


						final boolean RX10_TEMP38 = RX10_TEMP35 != RX10_TEMP37;

						if(RX10_TEMP38)
							{

							String RX10_TEMP36 = "Bad place access for array position";

							throw new RuntimeException(RX10_TEMP36);

							}

						final double RX10_TEMP39 = Program.getRefArrayValue2double(position, RX10_TEMP31,RX10_TEMP10);


						double X10_TEMP27 = RX10_TEMP39;


						final int X10_TEMP20 = 0;


						final Point2 RX10_TEMP40 = new Point2(i, X10_TEMP20,RX10_TEMP10);
						
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP40.hashCode());


						final Dist2 RX10_TEMP41 = velocity.distValue;


						final Region2 RX10_TEMP42 = RX10_TEMP41.dReg;


						final int RX10_TEMP43 = Program.searchPointInRegion2(RX10_TEMP42, RX10_TEMP40,RX10_TEMP10);


						final int RX10_TEMP44 = 0;


						final boolean RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44;

						if(RX10_TEMP45)
							{

							String RX10_TEMP46 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP46);

							}

						final int RX10_TEMP47 = Program.getPlaceFromDist2(RX10_TEMP41, RX10_TEMP43,RX10_TEMP10);


						final int RX10_TEMP49 = 0;


						final boolean RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49;

						if(RX10_TEMP50)
							{

							String RX10_TEMP48 = "Bad place access for array velocity";

							throw new RuntimeException(RX10_TEMP48);

							}

						final double RX10_TEMP51 = Program.getRefArrayValue2double(velocity, RX10_TEMP43,RX10_TEMP10);


						double X10_TEMP28 = RX10_TEMP51;


						final int X10_TEMP24 = 1;


						final Point2 RX10_TEMP52 = new Point2(i, X10_TEMP24,RX10_TEMP10);
						
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP52.hashCode());


						final Dist2 RX10_TEMP53 = velocity.distValue;


						final Region2 RX10_TEMP54 = RX10_TEMP53.dReg;


						final int RX10_TEMP55 = Program.searchPointInRegion2(RX10_TEMP54, RX10_TEMP52,RX10_TEMP10);


						final int RX10_TEMP56 = 0;


						final boolean RX10_TEMP57 = RX10_TEMP55 < RX10_TEMP56;

						if(RX10_TEMP57)
							{

							String RX10_TEMP58 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP58);

							}

						final int RX10_TEMP59 = Program.getPlaceFromDist2(RX10_TEMP53, RX10_TEMP55,RX10_TEMP10);


						final int RX10_TEMP61 = 0;


						final boolean RX10_TEMP62 = RX10_TEMP59 != RX10_TEMP61;

						if(RX10_TEMP62)
							{

							String RX10_TEMP60 = "Bad place access for array velocity";

							throw new RuntimeException(RX10_TEMP60);

							}

						final double RX10_TEMP63 = Program.getRefArrayValue2double(velocity, RX10_TEMP55,RX10_TEMP10);


						double X10_TEMP29 = RX10_TEMP63;


						final Particle X10_TEMP31 = new Particle(X10_TEMP26, X10_TEMP27, X10_TEMP28, X10_TEMP29,RX10_TEMP10);
						
Program.globalPointerHashMap.get(RX10_TEMP10).add(X10_TEMP31.hashCode());

						RX10_TEMP65[RX10_TEMP14] =X10_TEMP31;
						}

;


					final ParticleStub RX10_TEMP66 = new ParticleStub(RX10_TEMP65,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP66.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP66;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP67 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP69= 0;RX10_TEMP69 <RX10_TEMP67.length ;RX10_TEMP69++ )			{

			final ParticleStub RX10_TEMP68 = RX10_TEMP6[RX10_TEMP69];

			RX10_TEMP67[RX10_TEMP69] =RX10_TEMP68;
			}

;


		final ParticleRefArray1 RX10_TEMP70 = new ParticleRefArray1(dResult, RX10_TEMP67,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP70.hashCode());


		final ParticleRefArray1 X10_TEMP33 = RX10_TEMP70;

		return X10_TEMP33;
		}
public static Dist2 LinearESOpenPIC2D_genInitialDist ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, int myUniquePlacePoint)
		{

		final int MAX_PLACES = 1;


		final int X10_TEMP2 = 2;


		final boolean X10_TEMP4 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP2;


		final boolean X10_TEMP5 = X10_TEMP4;


		double X10_TEMP8 = 0.0;

		if(X10_TEMP5)
			{

			X10_TEMP8 = 1.0;

			}

		final double X10_TEMP9 = X10_TEMP8;


		final double edgely = X10_TEMP9;


		final double y = _LinearESOpenPIC2D_YLENGTH;


		final double X10_TEMP15 = 0.0;


		final double X10_TEMP16 = 0.0;


		final double X10_TEMP17 = 0.0;


		final double y0 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, edgely, X10_TEMP15, X10_TEMP16, X10_TEMP17,myUniquePlacePoint);


		final double X10_TEMP23 = y - edgely;


		final double X10_TEMP24 = 0.0;


		final double X10_TEMP25 = 0.0;


		final double X10_TEMP26 = 0.0;


		final double X10_TEMP27 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, X10_TEMP23, X10_TEMP24, X10_TEMP25, X10_TEMP26,myUniquePlacePoint);


		final double X10_TEMP29 = X10_TEMP27 - y0;


		final double nParticlesAve = X10_TEMP29 / MAX_PLACES;


		final Dist1 X10_TEMP31 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP31;


		final Region1 RX10_TEMP0 = dUnique.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final Region1Stub[] RX10_TEMP6 = new Region1Stub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dUnique, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final Region1[] RX10_TEMP14 = new Region1[RX10_TEMP13];


					final Region1Stub RX10_TEMP15 = new Region1Stub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final Region1Stub[] RX10_TEMP16 = (Region1Stub[])(new Region1Stub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final Region1Stub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final Region1RefArray1 RX10_TEMP19 = new Region1RefArray1(dUnique, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final Region1RefArray1 X10_TEMP33 = RX10_TEMP19;


		final Region1RefArray1 yRegions = X10_TEMP33;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP36.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP36.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP31;

				//async(X10_TEMP37)
					{

					final double X10_TEMP39 = pl.f0;


					final double anpl = X10_TEMP39 * nParticlesAve;


					final int X10_TEMP42 = pl.f0;


					final int X10_TEMP43 = 1;


					final int X10_TEMP45 = X10_TEMP42 + X10_TEMP43;


					final double anpr = X10_TEMP45 * nParticlesAve;


					double total = 0.0;


					double tmp = 0.0;


					double y1 = edgely;


					boolean X10_TEMP50 = false;

					do 						{

						tmp = total;


						final double X10_TEMP56 = 0.0;


						final double X10_TEMP57 = 0.0;


						final double X10_TEMP58 = 0.0;


						final double X10_TEMP59 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, y1, X10_TEMP56, X10_TEMP57, X10_TEMP58,X10_TEMP37);


						final double X10_TEMP61 = X10_TEMP59 - y0;


						total = X10_TEMP61;


						final double X10_TEMP62 = 1.0;


						final double X10_TEMP64 = y1 + X10_TEMP62;


						y1 = X10_TEMP64;


						final boolean X10_TEMP65 = total < anpl;


						final boolean X10_TEMP66 = y1 <= y;


						X10_TEMP50 = X10_TEMP65 && X10_TEMP66;

						}
					
 while(X10_TEMP50);
					final boolean X10_TEMP69 = total > tmp;


					final boolean X10_TEMP70 = X10_TEMP69;


					final double X10_TEMP71 = 2.0;


					final double X10_TEMP73 = y1 - X10_TEMP71;


					final double X10_TEMP75 = anpl - tmp;


					final double X10_TEMP77 = total - tmp;


					final double X10_TEMP78 = X10_TEMP75 / X10_TEMP77;


					final double X10_TEMP80 = X10_TEMP73 + X10_TEMP78;


					final double X10_TEMP82 = 1.0;


					final double X10_TEMP84 = y1 - X10_TEMP82;


					double X10_TEMP86 = X10_TEMP84;

					if(X10_TEMP70)
						{

						X10_TEMP86 = X10_TEMP80;

						}

					final double X10_TEMP87 = X10_TEMP86;


					final double X10_TEMP88 = X10_TEMP87;


					double lb = X10_TEMP88;


					final int X10_TEMP90 = 0;


					final boolean X10_TEMP92 = true;

					if(X10_TEMP92)
						{

						final double X10_TEMP94 = 0.0;


						lb = X10_TEMP94;

						}

					boolean X10_TEMP95 = false;

					do 						{

						tmp = total;


						final double X10_TEMP101 = 0.0;


						final double X10_TEMP102 = 0.0;


						final double X10_TEMP103 = 0.0;


						final double X10_TEMP104 = Program.LinearESOpenPIC2D_linearDensityFnIntegral(X10_TEMP0, y1, X10_TEMP101, X10_TEMP102, X10_TEMP103,X10_TEMP37);


						final double X10_TEMP106 = X10_TEMP104 - y0;


						total = X10_TEMP106;


						final double X10_TEMP107 = 1.0;


						final double X10_TEMP109 = y1 + X10_TEMP107;


						y1 = X10_TEMP109;


						final boolean X10_TEMP110 = total < anpr;


						final boolean X10_TEMP111 = y1 <= y;


						X10_TEMP95 = X10_TEMP110 && X10_TEMP111;

						}
					
 while(X10_TEMP95);
					final double X10_TEMP113 = 2.0;


					final double X10_TEMP115 = y1 - X10_TEMP113;


					final double X10_TEMP117 = anpr - tmp;


					final double X10_TEMP119 = total - tmp;


					final double X10_TEMP120 = X10_TEMP117 / X10_TEMP119;


					double ub = X10_TEMP115 + X10_TEMP120;


					final int X10_TEMP122 = 0;


					final boolean X10_TEMP124 = true;

					if(X10_TEMP124)
						{

						ub = y;

						}

					final double X10_TEMP127 = 0.5;


					final double X10_TEMP129 = lb + X10_TEMP127;


					final int X10_TEMP139 = (int)X10_TEMP129;


					final double X10_TEMP131 = 0.5;


					final double X10_TEMP133 = ub + X10_TEMP131;


					final int X10_TEMP134 = (int)X10_TEMP133;


					final int X10_TEMP135 = 1;


					final int X10_TEMP137 = X10_TEMP134 - X10_TEMP135;


					final Region1 X10_TEMP142 = Program.createNewRegion1R(X10_TEMP139, X10_TEMP137,X10_TEMP37);


					final Region1 X10_TEMP143 = X10_TEMP142;


					final Dist1 RX10_TEMP32 = yRegions.distValue;


					final Region1 RX10_TEMP33 = RX10_TEMP32.dReg;


					final int RX10_TEMP34 = Program.searchPointInRegion1(RX10_TEMP33, pl,X10_TEMP37);


					final int RX10_TEMP35 = 0;


					final boolean RX10_TEMP36 = RX10_TEMP34 < RX10_TEMP35;

					if(RX10_TEMP36)
						{

						String RX10_TEMP37 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP37);

						}

					final int RX10_TEMP38 = Program.getPlaceFromDist1(RX10_TEMP32, RX10_TEMP34,X10_TEMP37);


					final int RX10_TEMP40 = 0;


					final boolean RX10_TEMP41 = RX10_TEMP38 != RX10_TEMP40;

					if(RX10_TEMP41)
						{

						String RX10_TEMP39 = "Bad place access for array yRegions";

						throw new RuntimeException(RX10_TEMP39);

						}
					Program.setRefArrayValue1Region1(yRegions, RX10_TEMP34, X10_TEMP143,X10_TEMP37);
					}
				}
			}

		final int pHere = 0;


		final int X10_TEMP148 = 0;


		final int X10_TEMP146 = 1;


		final int X10_TEMP149 = MAX_PLACES - X10_TEMP146;


		final Region1 X10_TEMP150 = Program.createNewRegion1R(X10_TEMP148, X10_TEMP149,myUniquePlacePoint);


		final int X10_TEMP151 = 0;


		final Dist1 X10_TEMP153 = Program.getPlaceDist1(X10_TEMP150, X10_TEMP151,myUniquePlacePoint);


		final Dist1 dPlace = X10_TEMP153;


		final Region1 RX10_TEMP42 = dPlace.dReg;


		final int RX10_TEMP43 = 0;


		final int RX10_TEMP44 = 1;


		int RX10_TEMP45 = 1;


		RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44;


		final int  RX10_TEMP46 = RX10_TEMP45+1;


		final int RX10_TEMP47 = RX10_TEMP45+1;


		final Region1Stub[] RX10_TEMP48 = new Region1Stub[RX10_TEMP47];

		/*FINISH
*/			{
			for(int RX10_TEMP49=0; RX10_TEMP49 < RX10_TEMP46; RX10_TEMP49++)
				{

				final int RX10_TEMP50 = 0;


				final int RX10_TEMP51 = RX10_TEMP49;


				final int RX10_TEMP52 = 0;


				final int RX10_TEMP53 = Program.getDistLocalCount1(dPlace, RX10_TEMP51,myUniquePlacePoint);


				final int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44;

				//async(RX10_TEMP52)
					{

					final int RX10_TEMP55 = RX10_TEMP54+1;


					final Region1[] RX10_TEMP56 = new Region1[RX10_TEMP55];


					final Region1Stub RX10_TEMP57 = new Region1Stub(RX10_TEMP56,RX10_TEMP52);
					
Program.globalPointerHashMap.get(RX10_TEMP52).add(RX10_TEMP57.hashCode());

					//async(RX10_TEMP50)
						{
						RX10_TEMP48[RX10_TEMP49] = RX10_TEMP57;
						}
					}
				}
			}

		final Region1Stub[] RX10_TEMP58 = (Region1Stub[])(new Region1Stub/*value*/[RX10_TEMP46]);
/*arrayInitBlock*/
for(int RX10_TEMP60= 0;RX10_TEMP60 <RX10_TEMP58.length ;RX10_TEMP60++ )			{

			final Region1Stub RX10_TEMP59 = RX10_TEMP48[RX10_TEMP60];

			RX10_TEMP58[RX10_TEMP60] =RX10_TEMP59;
			}

;


		final Region1RefArray1 RX10_TEMP61 = new Region1RefArray1(dPlace, RX10_TEMP58,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP61.hashCode());


		final Region1RefArray1 X10_TEMP155 = RX10_TEMP61;


		final Region1RefArray1 rBuffer = X10_TEMP155;

		/*FINISH
*/			{

			final Dist1 X10_TEMP158 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP63 = X10_TEMP158.dReg;


			final int RX10_TEMP66 = 1;


			int RX10_TEMP64 = RX10_TEMP63.regSize;


			RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66;


			final int  RX10_TEMP65 = RX10_TEMP64+1;

			for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP65; RX10_TEMP62++)
				{

				final int RX10_TEMP67 = RX10_TEMP62;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP63, RX10_TEMP67,myUniquePlacePoint);


				final Region1 RX10_TEMP68 = X10_TEMP158.dReg;


				final int RX10_TEMP69 = Program.searchPointInRegion1(RX10_TEMP68, pl,myUniquePlacePoint);


				final int RX10_TEMP70 = 0;


				final boolean RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70;

				if(RX10_TEMP71)
					{

					final String RX10_TEMP72 = "Point pl not found in the distribution X10_TEMP158.";

					throw new RuntimeException(RX10_TEMP72);

					}

				final int RX10_TEMP73 = Program.getPlaceFromDist1(X10_TEMP158, RX10_TEMP69,myUniquePlacePoint);


				final int X10_TEMP159 = RX10_TEMP73;

				//async(X10_TEMP159)
					{

					final Dist1 RX10_TEMP74 = yRegions.distValue;


					final Region1 RX10_TEMP75 = RX10_TEMP74.dReg;


					final int RX10_TEMP76 = Program.searchPointInRegion1(RX10_TEMP75, pl,X10_TEMP159);


					final int RX10_TEMP77 = 0;


					final boolean RX10_TEMP78 = RX10_TEMP76 < RX10_TEMP77;

					if(RX10_TEMP78)
						{

						String RX10_TEMP79 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP79);

						}

					final int RX10_TEMP80 = Program.getPlaceFromDist1(RX10_TEMP74, RX10_TEMP76,X10_TEMP159);


					final int RX10_TEMP82 = 0;


					final boolean RX10_TEMP83 = RX10_TEMP80 != RX10_TEMP82;

					if(RX10_TEMP83)
						{

						String RX10_TEMP81 = "Bad place access for array yRegions";

						throw new RuntimeException(RX10_TEMP81);

						}

					final Region1 RX10_TEMP84 = Program.getRefArrayValue1Region1(yRegions, RX10_TEMP76,X10_TEMP159);


					final Region1 X10_TEMP161 = RX10_TEMP84;


					final Region1 r = X10_TEMP161;

					//async(pHere)
						{

						final Region1 X10_TEMP167 = r;


						final Dist1 RX10_TEMP85 = rBuffer.distValue;


						final Region1 RX10_TEMP86 = RX10_TEMP85.dReg;


						final int RX10_TEMP87 = Program.searchPointInRegion1(RX10_TEMP86, pl,pHere);


						final int RX10_TEMP88 = 0;


						final boolean RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88;

						if(RX10_TEMP89)
							{

							String RX10_TEMP90 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP90);

							}

						final int RX10_TEMP91 = Program.getPlaceFromDist1(RX10_TEMP85, RX10_TEMP87,pHere);


						final int RX10_TEMP93 = 0;


						final boolean RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93;

						if(RX10_TEMP94)
							{

							String RX10_TEMP92 = "Bad place access for array rBuffer";

							throw new RuntimeException(RX10_TEMP92);

							}
						Program.setRefArrayValue1Region1(rBuffer, RX10_TEMP87, X10_TEMP167,pHere);
						}
					}
				}
			}

		final int X10_TEMP168 = 0;


		final int X10_TEMP169 = 1;


		final int X10_TEMP170 = X10_TEMP168 - X10_TEMP169;


		final Region2 X10_TEMP171 = Program.createNewRegion2RR(X10_TEMP168, X10_TEMP170, X10_TEMP168, X10_TEMP170,myUniquePlacePoint);


		final int X10_TEMP172 = 0;


		final Dist2 X10_TEMP174 = Program.getPlaceDist2(X10_TEMP171, X10_TEMP172,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP174;


		final Dist1 X10_TEMP177 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP96 = X10_TEMP177.dReg;


		final int RX10_TEMP99 = 1;


		int RX10_TEMP97 = RX10_TEMP96.regSize;


		RX10_TEMP97 = RX10_TEMP97 - RX10_TEMP99;


		final int  RX10_TEMP98 = RX10_TEMP97+1;

		for(int RX10_TEMP95=0; RX10_TEMP95 < RX10_TEMP98; RX10_TEMP95++)
			{

			final int RX10_TEMP100 = RX10_TEMP95;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP96, RX10_TEMP100,myUniquePlacePoint);


			final Dist1 X10_TEMP178 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP101 = X10_TEMP178.dReg;


			final int RX10_TEMP102 = Program.searchPointInRegion1(RX10_TEMP101, pl,myUniquePlacePoint);


			final int RX10_TEMP103 = 0;


			final boolean RX10_TEMP104 = RX10_TEMP102 < RX10_TEMP103;

			if(RX10_TEMP104)
				{

				final String RX10_TEMP105 = "Point pl not found in the distribution X10_TEMP178.";

				throw new RuntimeException(RX10_TEMP105);

				}

			final int RX10_TEMP106 = Program.getPlaceFromDist1(X10_TEMP178, RX10_TEMP102,myUniquePlacePoint);


			final int p = RX10_TEMP106;


			final Dist1 RX10_TEMP107 = rBuffer.distValue;


			final Region1 RX10_TEMP108 = RX10_TEMP107.dReg;


			final int RX10_TEMP109 = Program.searchPointInRegion1(RX10_TEMP108, pl,myUniquePlacePoint);


			final int RX10_TEMP110 = 0;


			final boolean RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110;

			if(RX10_TEMP111)
				{

				String RX10_TEMP112 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP112);

				}

			final int RX10_TEMP113 = Program.getPlaceFromDist1(RX10_TEMP107, RX10_TEMP109,myUniquePlacePoint);


			final int RX10_TEMP115 = 0;


			final boolean RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115;

			if(RX10_TEMP116)
				{

				String RX10_TEMP114 = "Bad place access for array rBuffer";

				throw new RuntimeException(RX10_TEMP114);

				}

			final Region1 RX10_TEMP117 = Program.getRefArrayValue1Region1(rBuffer, RX10_TEMP109,myUniquePlacePoint);


			final Region1 X10_TEMP182 = RX10_TEMP117;


			final Region1 ry = X10_TEMP182;


			final int X10_TEMP187 = 0;


			final Region2 X10_TEMP188 = Program.createNewRegion2AR(ry, X10_TEMP187, _LinearESOpenPIC2D_XLENGTH,myUniquePlacePoint);


			final Dist2 X10_TEMP190 = Program.getPlaceDist2(X10_TEMP188, p,myUniquePlacePoint);


			final Dist2 dLocal = X10_TEMP190;


			final Dist2 X10_TEMP193 = Program.unionDist2(dResult, dLocal,myUniquePlacePoint);


			dResult = X10_TEMP193;

			}
		return dResult;
		}
public static double LinearESOpenPIC2D_linearDensityFn ( final LinearESOpenPIC2D X10_TEMP0, final double x, final double anlx, final double anxi, final double shift, int myUniquePlacePoint)
		{

		final double X10_TEMP4 = 1.0;


		final double X10_TEMP1 = x * anxi;


		final double X10_TEMP3 = X10_TEMP1 - shift;


		final double X10_TEMP5 = anlx * X10_TEMP3;


		final double result = X10_TEMP4 + X10_TEMP5;


		final double X10_TEMP7 = 0.0;


		final boolean X10_TEMP9 = result < X10_TEMP7;

		if(X10_TEMP9)
			{

			final String X10_TEMP10 = "Linear Density Error: result = ";


			final String X10_TEMP12 = X10_TEMP10 + result;

			System.err.println(X10_TEMP12);
			}
		return result;
		}
public static double LinearESOpenPIC2D_linearDensityFnIntegral ( final LinearESOpenPIC2D X10_TEMP0, final double x, final double anlx, final double anxi, final double shift, int myUniquePlacePoint)
		{

		double result = 0.0;


		final double X10_TEMP2 = 0.0;


		final boolean X10_TEMP4 = anxi == X10_TEMP2;

		if(X10_TEMP4)
			{

			result = x;

			}
		else
			{

			final double X10_TEMP6 = 0.5;


			final double X10_TEMP7 = X10_TEMP6 * anlx;


			final double X10_TEMP13 = X10_TEMP7 * x;


			final double X10_TEMP9 = x * anxi;


			final double X10_TEMP8 = 2.0;


			final double X10_TEMP10 = X10_TEMP8 * shift;


			final double X10_TEMP12 = X10_TEMP9 - X10_TEMP10;


			final double X10_TEMP14 = X10_TEMP13 * X10_TEMP12;


			final double X10_TEMP16 = x + X10_TEMP14;


			result = X10_TEMP16;

			}
 
		final double X10_TEMP17 = 0.0;


		final boolean X10_TEMP19 = result < X10_TEMP17;

		if(X10_TEMP19)
			{

			final String X10_TEMP20 = "Linear Density Integral Error: ";


			final String X10_TEMP21 = "result = ";


			final String X10_TEMP22 = X10_TEMP20 + X10_TEMP21;


			final String X10_TEMP24 = X10_TEMP22 + result;

			System.err.println(X10_TEMP24);
			}
		return result;
		}
public static doubleRefArray1 LinearESOpenPIC2D_stepTime ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 ionBackground, int myUniquePlacePoint)
		{

		long time1 = System.currentTimeMillis();


		long time2 = 0;


		final double CHARGE = _LinearESOpenPIC2D_ELECTRON_CHARGE;


		final Dist2 RX10_TEMP0 = ionBackground.distValue;


		final Dist2 dIonBG = RX10_TEMP0;


		final doubleRefArray2 chargeDensityGuards = Program.LinearESOpenPIC2D_makeGuards(X10_TEMP0, dIonBG,myUniquePlacePoint);


		final Region2 RX10_TEMP1 = dIonBG.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final doubleStub[] RX10_TEMP7 = new doubleStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount2(dIonBG, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP15 = RX10_TEMP13+1;


					final double[] RX10_TEMP16 = new double/*NewUpdatableArray*/[RX10_TEMP15];
/*arrayInitBlock*/
for(int RX10_TEMP14= 0;RX10_TEMP14 <RX10_TEMP16.length ;RX10_TEMP14++ )						{

						final double X10_TEMP8 = 0.0;

						RX10_TEMP16[RX10_TEMP14] =X10_TEMP8;
						}

;


					final doubleStub RX10_TEMP17 = new doubleStub(RX10_TEMP16,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP17.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP17;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP18 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP20= 0;RX10_TEMP20 <RX10_TEMP18.length ;RX10_TEMP20++ )			{

			final doubleStub RX10_TEMP19 = RX10_TEMP7[RX10_TEMP20];

			RX10_TEMP18[RX10_TEMP20] =RX10_TEMP19;
			}

;


		final doubleRefArray2 RX10_TEMP21 = new doubleRefArray2(dIonBG, RX10_TEMP18,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP21.hashCode());


		final doubleRefArray2 X10_TEMP9 = RX10_TEMP21;


		final doubleRefArray2 chargeDensity = X10_TEMP9;


		final ParticleRefArray1 X10_TEMP15 = X10_TEMP0.particles;

		Program.LinearESOpenPIC2D_depositCharge(X10_TEMP0, X10_TEMP15, chargeDensity, chargeDensityGuards, CHARGE,myUniquePlacePoint);
		/*FINISH
*/			{

			final Region2 RX10_TEMP23 = dIonBG.dReg;


			final int RX10_TEMP26 = 1;


			int RX10_TEMP24 = RX10_TEMP23.regSize;


			RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP26;


			final int  RX10_TEMP25 = RX10_TEMP24+1;

			for(int RX10_TEMP22=0; RX10_TEMP22 < RX10_TEMP25; RX10_TEMP22++)
				{

				final int RX10_TEMP27 = RX10_TEMP22;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP23, RX10_TEMP27,myUniquePlacePoint);


				final Region2 RX10_TEMP28 = dIonBG.dReg;


				final int RX10_TEMP29 = Program.searchPointInRegion2(RX10_TEMP28, pt,myUniquePlacePoint);


				final int RX10_TEMP30 = 0;


				final boolean RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30;

				if(RX10_TEMP31)
					{

					final String RX10_TEMP32 = "Point pt not found in the distribution dIonBG.";

					throw new RuntimeException(RX10_TEMP32);

					}

				final int RX10_TEMP33 = Program.getPlaceFromDist2(dIonBG, RX10_TEMP29,myUniquePlacePoint);


				final int X10_TEMP17 = RX10_TEMP33;

				//async(X10_TEMP17)
					{

					final Dist2 RX10_TEMP34 = chargeDensity.distValue;


					final Region2 RX10_TEMP35 = RX10_TEMP34.dReg;


					final int RX10_TEMP36 = Program.searchPointInRegion2(RX10_TEMP35, pt,X10_TEMP17);


					final int RX10_TEMP37 = 0;


					final boolean RX10_TEMP38 = RX10_TEMP36 < RX10_TEMP37;

					if(RX10_TEMP38)
						{

						String RX10_TEMP39 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP39);

						}

					final int RX10_TEMP40 = Program.getPlaceFromDist2(RX10_TEMP34, RX10_TEMP36,X10_TEMP17);


					final int RX10_TEMP42 = 0;


					final boolean RX10_TEMP43 = RX10_TEMP40 != RX10_TEMP42;

					if(RX10_TEMP43)
						{

						String RX10_TEMP41 = "Bad place access for array chargeDensity";

						throw new RuntimeException(RX10_TEMP41);

						}

					final double RX10_TEMP44 = Program.getRefArrayValue2double(chargeDensity, RX10_TEMP36,X10_TEMP17);


					final double X10_TEMP21 = RX10_TEMP44;


					final Dist2 RX10_TEMP45 = ionBackground.distValue;


					final Region2 RX10_TEMP46 = RX10_TEMP45.dReg;


					final int RX10_TEMP47 = Program.searchPointInRegion2(RX10_TEMP46, pt,X10_TEMP17);


					final int RX10_TEMP48 = 0;


					final boolean RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48;

					if(RX10_TEMP49)
						{

						String RX10_TEMP50 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP50);

						}

					final int RX10_TEMP51 = Program.getPlaceFromDist2(RX10_TEMP45, RX10_TEMP47,X10_TEMP17);


					final int RX10_TEMP53 = 0;


					final boolean RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53;

					if(RX10_TEMP54)
						{

						String RX10_TEMP52 = "Bad place access for array ionBackground";

						throw new RuntimeException(RX10_TEMP52);

						}

					final double RX10_TEMP55 = Program.getRefArrayValue2double(ionBackground, RX10_TEMP47,X10_TEMP17);


					final double X10_TEMP22 = RX10_TEMP55;


					final double X10_TEMP25 = X10_TEMP21 + X10_TEMP22;


					final double X10_TEMP26 = X10_TEMP25;


					final Dist2 RX10_TEMP56 = chargeDensity.distValue;


					final Region2 RX10_TEMP57 = RX10_TEMP56.dReg;


					final int RX10_TEMP58 = Program.searchPointInRegion2(RX10_TEMP57, pt,X10_TEMP17);


					final int RX10_TEMP59 = 0;


					final boolean RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59;

					if(RX10_TEMP60)
						{

						String RX10_TEMP61 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP61);

						}

					final int RX10_TEMP62 = Program.getPlaceFromDist2(RX10_TEMP56, RX10_TEMP58,X10_TEMP17);


					final int RX10_TEMP64 = 0;


					final boolean RX10_TEMP65 = RX10_TEMP62 != RX10_TEMP64;

					if(RX10_TEMP65)
						{

						String RX10_TEMP63 = "Bad place access for array chargeDensity";

						throw new RuntimeException(RX10_TEMP63);

						}
					Program.setRefArrayValue2double(chargeDensity, RX10_TEMP58, X10_TEMP26,X10_TEMP17);
					}
				}
			}
		Program.LinearESOpenPIC2D_addGuards(X10_TEMP0, chargeDensity, chargeDensityGuards,myUniquePlacePoint);

		final long X10_TEMP30 = System.currentTimeMillis();


		time2 = X10_TEMP30;


		final long X10_TEMP33 = X10_TEMP0.depositTime;


		final long X10_TEMP32 = time2 - time1;


		final long X10_TEMP36 = X10_TEMP33 + X10_TEMP32;


		final long X10_TEMP37 = X10_TEMP36;

		X10_TEMP0.depositTime = (X10_TEMP37);

		final Dist2 RX10_TEMP66 = chargeDensity.distValue;


		final Dist2 dOld = RX10_TEMP66;


		final doubleRefArray2 uniformChargeDensity = Program.LinearESOpenPIC2D_moveFieldToUniform(X10_TEMP0, chargeDensity,myUniquePlacePoint);


		final doubleRefArray2 X10_TEMP43 = Program.LinearESOpenPIC2D_doubleDimensions(X10_TEMP0, uniformChargeDensity,myUniquePlacePoint);


		final ComplexRefArray2 complexChargeDensity = Program.ArrayUtil_doubleToComplex(X10_TEMP43,myUniquePlacePoint);


		final long X10_TEMP46 = System.currentTimeMillis();


		time1 = X10_TEMP46;


		final long X10_TEMP49 = X10_TEMP0.redistTime;


		final long X10_TEMP48 = time1 - time2;


		final long X10_TEMP52 = X10_TEMP49 + X10_TEMP48;


		final long X10_TEMP53 = X10_TEMP52;

		X10_TEMP0.redistTime = (X10_TEMP53);

		final PoissonSolver X10_TEMP54 = X10_TEMP0.solver;


		final ComplexRefArray2 complexForceX = Program.PoissonSolver_makeForceArray(X10_TEMP54,myUniquePlacePoint);


		final PoissonSolver X10_TEMP56 = X10_TEMP0.solver;


		final ComplexRefArray2 complexForceY = Program.PoissonSolver_makeForceArray(X10_TEMP56,myUniquePlacePoint);


		final PoissonSolver X10_TEMP58 = X10_TEMP0.solver;


		double we = Program.PoissonSolver_getForceCharge(X10_TEMP58, complexChargeDensity, complexForceX, complexForceY,myUniquePlacePoint);


		final long X10_TEMP64 = System.currentTimeMillis();


		time2 = X10_TEMP64;


		final long X10_TEMP67 = X10_TEMP0.solverTime;


		final long X10_TEMP66 = time2 - time1;


		final long X10_TEMP70 = X10_TEMP67 + X10_TEMP66;


		final long X10_TEMP71 = X10_TEMP70;

		X10_TEMP0.solverTime = (X10_TEMP71);

		final Dist2 RX10_TEMP67 = chargeDensityGuards.distValue;


		final Dist2 dChargeDensityGuards = RX10_TEMP67;


		final Region2 RX10_TEMP68 = dChargeDensityGuards.dReg;


		final int RX10_TEMP69 = 0;


		final int RX10_TEMP70 = 1;


		int RX10_TEMP71 = 1;


		RX10_TEMP71 = RX10_TEMP71 - RX10_TEMP70;


		final int  RX10_TEMP72 = RX10_TEMP71+1;


		final int RX10_TEMP73 = RX10_TEMP71+1;


		final doubleStub[] RX10_TEMP74 = new doubleStub[RX10_TEMP73];

		/*FINISH
*/			{
			for(int RX10_TEMP75=0; RX10_TEMP75 < RX10_TEMP72; RX10_TEMP75++)
				{

				final int RX10_TEMP76 = 0;


				final int RX10_TEMP77 = RX10_TEMP75;


				final int RX10_TEMP78 = 0;


				final int RX10_TEMP79 = Program.getDistLocalCount2(dChargeDensityGuards, RX10_TEMP77,myUniquePlacePoint);


				final int RX10_TEMP80 = RX10_TEMP79 - RX10_TEMP70;

				//async(RX10_TEMP78)
					{

					final int RX10_TEMP81 = RX10_TEMP80+1;


					final double[] RX10_TEMP82 = new double[RX10_TEMP81];


					final doubleStub RX10_TEMP83 = new doubleStub(RX10_TEMP82,RX10_TEMP78);
					
Program.globalPointerHashMap.get(RX10_TEMP78).add(RX10_TEMP83.hashCode());

					//async(RX10_TEMP76)
						{
						RX10_TEMP74[RX10_TEMP75] = RX10_TEMP83;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP84 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP72]);
/*arrayInitBlock*/
for(int RX10_TEMP86= 0;RX10_TEMP86 <RX10_TEMP84.length ;RX10_TEMP86++ )			{

			final doubleStub RX10_TEMP85 = RX10_TEMP74[RX10_TEMP86];

			RX10_TEMP84[RX10_TEMP86] =RX10_TEMP85;
			}

;


		final doubleRefArray2 RX10_TEMP87 = new doubleRefArray2(dChargeDensityGuards, RX10_TEMP84,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP87.hashCode());


		final doubleRefArray2 gx = RX10_TEMP87;


		final Region2 RX10_TEMP88 = dChargeDensityGuards.dReg;


		final int RX10_TEMP89 = 0;


		final int RX10_TEMP90 = 1;


		int RX10_TEMP91 = 1;


		RX10_TEMP91 = RX10_TEMP91 - RX10_TEMP90;


		final int  RX10_TEMP92 = RX10_TEMP91+1;


		final int RX10_TEMP93 = RX10_TEMP91+1;


		final doubleStub[] RX10_TEMP94 = new doubleStub[RX10_TEMP93];

		/*FINISH
*/			{
			for(int RX10_TEMP95=0; RX10_TEMP95 < RX10_TEMP92; RX10_TEMP95++)
				{

				final int RX10_TEMP96 = 0;


				final int RX10_TEMP97 = RX10_TEMP95;


				final int RX10_TEMP98 = 0;


				final int RX10_TEMP99 = Program.getDistLocalCount2(dChargeDensityGuards, RX10_TEMP97,myUniquePlacePoint);


				final int RX10_TEMP100 = RX10_TEMP99 - RX10_TEMP90;

				//async(RX10_TEMP98)
					{

					final int RX10_TEMP101 = RX10_TEMP100+1;


					final double[] RX10_TEMP102 = new double[RX10_TEMP101];


					final doubleStub RX10_TEMP103 = new doubleStub(RX10_TEMP102,RX10_TEMP98);
					
Program.globalPointerHashMap.get(RX10_TEMP98).add(RX10_TEMP103.hashCode());

					//async(RX10_TEMP96)
						{
						RX10_TEMP94[RX10_TEMP95] = RX10_TEMP103;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP104 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP92]);
/*arrayInitBlock*/
for(int RX10_TEMP106= 0;RX10_TEMP106 <RX10_TEMP104.length ;RX10_TEMP106++ )			{

			final doubleStub RX10_TEMP105 = RX10_TEMP94[RX10_TEMP106];

			RX10_TEMP104[RX10_TEMP106] =RX10_TEMP105;
			}

;


		final doubleRefArray2 RX10_TEMP107 = new doubleRefArray2(dChargeDensityGuards, RX10_TEMP104,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP107.hashCode());


		final doubleRefArray2 gy = RX10_TEMP107;


		final doubleRefArray2 X10_TEMP78 = Program.ArrayUtil_complexToDouble(complexForceX,myUniquePlacePoint);


		final doubleRefArray2 forceX = Program.LinearESOpenPIC2D_cropField(X10_TEMP0, X10_TEMP78, gx,myUniquePlacePoint);


		final doubleRefArray2 X10_TEMP83 = Program.ArrayUtil_complexToDouble(complexForceY,myUniquePlacePoint);


		final doubleRefArray2 forceY = Program.LinearESOpenPIC2D_cropField(X10_TEMP0, X10_TEMP83, gy,myUniquePlacePoint);


		final doubleRefArray2 fcx = Program.LinearESOpenPIC2D_moveFieldToDist(X10_TEMP0, forceX, dOld,myUniquePlacePoint);


		final doubleRefArray2 fcy = Program.LinearESOpenPIC2D_moveFieldToDist(X10_TEMP0, forceY, dOld,myUniquePlacePoint);

		Program.LinearESOpenPIC2D_loadGuards(X10_TEMP0, fcx, gx,myUniquePlacePoint);
		Program.LinearESOpenPIC2D_loadGuards(X10_TEMP0, fcy, gy,myUniquePlacePoint);

		final long X10_TEMP96 = System.currentTimeMillis();


		time1 = X10_TEMP96;


		final long X10_TEMP99 = X10_TEMP0.redistTime;


		final long X10_TEMP98 = time1 - time2;


		final long X10_TEMP102 = X10_TEMP99 + X10_TEMP98;


		final long X10_TEMP103 = X10_TEMP102;

		X10_TEMP0.redistTime = (X10_TEMP103);

		final ParticleRefArray1 X10_TEMP109 = X10_TEMP0.particles;


		double wk = Program.LinearESOpenPIC2D_pushParticles(X10_TEMP0, X10_TEMP109, fcx, gx, fcy, gy,myUniquePlacePoint);


		final long X10_TEMP112 = System.currentTimeMillis();


		time2 = X10_TEMP112;


		final long X10_TEMP115 = X10_TEMP0.pushTime;


		final long X10_TEMP114 = time2 - time1;


		final long X10_TEMP118 = X10_TEMP115 + X10_TEMP114;


		final long X10_TEMP119 = X10_TEMP118;

		X10_TEMP0.pushTime = (X10_TEMP119);

		final intRefArray1 info = Program.LinearESOpenPIC2D_makeInfoArray(X10_TEMP0,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP124 = X10_TEMP0.particles;


		final ParticleRefArray1 X10_TEMP127 = Program.LinearESOpenPIC2D_moveParticles(X10_TEMP0, X10_TEMP124, dOld, info,myUniquePlacePoint);


		final ParticleRefArray1 X10_TEMP128 = X10_TEMP127;

		X10_TEMP0.particles = (X10_TEMP128);

		final int X10_TEMP130 = 6;


		final Point1 RX10_TEMP108 = new Point1(X10_TEMP130,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP108.hashCode());


		final Dist1 RX10_TEMP109 = info.distValue;


		final Region1 RX10_TEMP110 = RX10_TEMP109.dReg;


		final int RX10_TEMP111 = Program.searchPointInRegion1(RX10_TEMP110, RX10_TEMP108,myUniquePlacePoint);


		final int RX10_TEMP112 = 0;


		final boolean RX10_TEMP113 = RX10_TEMP111 < RX10_TEMP112;

		if(RX10_TEMP113)
			{

			String RX10_TEMP114 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP114);

			}

		final int RX10_TEMP115 = Program.getPlaceFromDist1(RX10_TEMP109, RX10_TEMP111,myUniquePlacePoint);


		final int RX10_TEMP117 = 0;


		final boolean RX10_TEMP118 = RX10_TEMP115 != RX10_TEMP117;

		if(RX10_TEMP118)
			{

			String RX10_TEMP116 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP116);

			}

		final int RX10_TEMP119 = Program.getRefArrayValue1int(info, RX10_TEMP111,myUniquePlacePoint);


		final int X10_TEMP131 = RX10_TEMP119;


		final double X10_TEMP133 = (double)X10_TEMP131;


		final int X10_TEMP134 = 1;


		final double particleAve = X10_TEMP133 / X10_TEMP134;


		final int X10_TEMP137 = 1;


		final Point1 RX10_TEMP120 = new Point1(X10_TEMP137,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP120.hashCode());


		final Dist1 RX10_TEMP121 = info.distValue;


		final Region1 RX10_TEMP122 = RX10_TEMP121.dReg;


		final int RX10_TEMP123 = Program.searchPointInRegion1(RX10_TEMP122, RX10_TEMP120,myUniquePlacePoint);


		final int RX10_TEMP124 = 0;


		final boolean RX10_TEMP125 = RX10_TEMP123 < RX10_TEMP124;

		if(RX10_TEMP125)
			{

			String RX10_TEMP126 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP126);

			}

		final int RX10_TEMP127 = Program.getPlaceFromDist1(RX10_TEMP121, RX10_TEMP123,myUniquePlacePoint);


		final int RX10_TEMP129 = 0;


		final boolean RX10_TEMP130 = RX10_TEMP127 != RX10_TEMP129;

		if(RX10_TEMP130)
			{

			String RX10_TEMP128 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP128);

			}

		final int RX10_TEMP131 = Program.getRefArrayValue1int(info, RX10_TEMP123,myUniquePlacePoint);


		final double X10_TEMP138 = RX10_TEMP131;


		final double X10_TEMP146 = X10_TEMP138 - particleAve;


		final int X10_TEMP141 = 2;


		final Point1 RX10_TEMP132 = new Point1(X10_TEMP141,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP132.hashCode());


		final Dist1 RX10_TEMP133 = info.distValue;


		final Region1 RX10_TEMP134 = RX10_TEMP133.dReg;


		final int RX10_TEMP135 = Program.searchPointInRegion1(RX10_TEMP134, RX10_TEMP132,myUniquePlacePoint);


		final int RX10_TEMP136 = 0;


		final boolean RX10_TEMP137 = RX10_TEMP135 < RX10_TEMP136;

		if(RX10_TEMP137)
			{

			String RX10_TEMP138 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP138);

			}

		final int RX10_TEMP139 = Program.getPlaceFromDist1(RX10_TEMP133, RX10_TEMP135,myUniquePlacePoint);


		final int RX10_TEMP141 = 0;


		final boolean RX10_TEMP142 = RX10_TEMP139 != RX10_TEMP141;

		if(RX10_TEMP142)
			{

			String RX10_TEMP140 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP140);

			}

		final int RX10_TEMP143 = Program.getRefArrayValue1int(info, RX10_TEMP135,myUniquePlacePoint);


		final double X10_TEMP142 = RX10_TEMP143;


		final double X10_TEMP144 = X10_TEMP142 / particleAve;


		final double X10_TEMP147 = particleAve - X10_TEMP144;


		final double balance = Program.X10Util_maxDouble(X10_TEMP146, X10_TEMP147,myUniquePlacePoint);


		final boolean X10_TEMP150 = balance > _LinearESOpenPIC2D_IMBALANCE;

		if(X10_TEMP150)
			{

			final ParticleRefArray1 X10_TEMP153 = X10_TEMP0.particles;


			final intRefArray1 count = Program.LinearESOpenPIC2D_countParticles(X10_TEMP0, X10_TEMP153, dOld,myUniquePlacePoint);


			final Dist2 dNew = Program.LinearESOpenPIC2D_repartition(X10_TEMP0, count, dOld, particleAve,myUniquePlacePoint);


			final doubleRefArray2 X10_TEMP161 = X10_TEMP0.backgroundCharge;


			final doubleRefArray2 X10_TEMP164 = Program.LinearESOpenPIC2D_moveFieldToDist(X10_TEMP0, X10_TEMP161, dNew,myUniquePlacePoint);


			final doubleRefArray2 X10_TEMP165 = X10_TEMP164;

			X10_TEMP0.backgroundCharge = (X10_TEMP165);

			final ParticleRefArray1 X10_TEMP169 = X10_TEMP0.particles;


			final ParticleRefArray1 X10_TEMP172 = Program.LinearESOpenPIC2D_moveParticles(X10_TEMP0, X10_TEMP169, dNew, info,myUniquePlacePoint);


			final ParticleRefArray1 X10_TEMP173 = X10_TEMP172;

			X10_TEMP0.particles = (X10_TEMP173);
			}

		final int X10_TEMP176 = 0;


		final int X10_TEMP177 = 2;


		final Region1 X10_TEMP178 = Program.createNewRegion1R(X10_TEMP176, X10_TEMP177,myUniquePlacePoint);


		final int X10_TEMP179 = 0;


		final Dist1 X10_TEMP181 = Program.getPlaceDist1(X10_TEMP178, X10_TEMP179,myUniquePlacePoint);


		final Dist1 dResult = X10_TEMP181;


		final Region1 RX10_TEMP144 = dResult.dReg;


		final int RX10_TEMP145 = 0;


		final int RX10_TEMP146 = 1;


		int RX10_TEMP147 = 1;


		RX10_TEMP147 = RX10_TEMP147 - RX10_TEMP146;


		final int  RX10_TEMP148 = RX10_TEMP147+1;


		final int RX10_TEMP149 = RX10_TEMP147+1;


		final doubleStub[] RX10_TEMP150 = new doubleStub[RX10_TEMP149];

		/*FINISH
*/			{
			for(int RX10_TEMP151=0; RX10_TEMP151 < RX10_TEMP148; RX10_TEMP151++)
				{

				final int RX10_TEMP152 = 0;


				final int RX10_TEMP153 = RX10_TEMP151;


				final int RX10_TEMP154 = 0;


				final int RX10_TEMP155 = Program.getDistLocalCount1(dResult, RX10_TEMP153,myUniquePlacePoint);


				final int RX10_TEMP156 = RX10_TEMP155 - RX10_TEMP146;

				//async(RX10_TEMP154)
					{

					final int RX10_TEMP157 = RX10_TEMP156+1;


					final double[] RX10_TEMP158 = new double[RX10_TEMP157];


					final doubleStub RX10_TEMP159 = new doubleStub(RX10_TEMP158,RX10_TEMP154);
					
Program.globalPointerHashMap.get(RX10_TEMP154).add(RX10_TEMP159.hashCode());

					//async(RX10_TEMP152)
						{
						RX10_TEMP150[RX10_TEMP151] = RX10_TEMP159;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP160 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP148]);
/*arrayInitBlock*/
for(int RX10_TEMP162= 0;RX10_TEMP162 <RX10_TEMP160.length ;RX10_TEMP162++ )			{

			final doubleStub RX10_TEMP161 = RX10_TEMP150[RX10_TEMP162];

			RX10_TEMP160[RX10_TEMP162] =RX10_TEMP161;
			}

;


		final doubleRefArray1 RX10_TEMP163 = new doubleRefArray1(dResult, RX10_TEMP160,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP163.hashCode());


		final doubleRefArray1 result = RX10_TEMP163;


		final int X10_TEMP185 = 0;


		final double X10_TEMP188 = we;


		final Point1 RX10_TEMP164 = new Point1(X10_TEMP185,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP164.hashCode());


		final Dist1 RX10_TEMP165 = result.distValue;


		final Region1 RX10_TEMP166 = RX10_TEMP165.dReg;


		final int RX10_TEMP167 = Program.searchPointInRegion1(RX10_TEMP166, RX10_TEMP164,myUniquePlacePoint);


		final int RX10_TEMP168 = 0;


		final boolean RX10_TEMP169 = RX10_TEMP167 < RX10_TEMP168;

		if(RX10_TEMP169)
			{

			String RX10_TEMP170 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP170);

			}

		final int RX10_TEMP171 = Program.getPlaceFromDist1(RX10_TEMP165, RX10_TEMP167,myUniquePlacePoint);


		final int RX10_TEMP173 = 0;


		final boolean RX10_TEMP174 = RX10_TEMP171 != RX10_TEMP173;

		if(RX10_TEMP174)
			{

			String RX10_TEMP172 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP172);

			}
		Program.setRefArrayValue1double(result, RX10_TEMP167, X10_TEMP188,myUniquePlacePoint);

		final int X10_TEMP190 = 1;


		final double X10_TEMP193 = wk;


		final Point1 RX10_TEMP175 = new Point1(X10_TEMP190,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP175.hashCode());


		final Dist1 RX10_TEMP176 = result.distValue;


		final Region1 RX10_TEMP177 = RX10_TEMP176.dReg;


		final int RX10_TEMP178 = Program.searchPointInRegion1(RX10_TEMP177, RX10_TEMP175,myUniquePlacePoint);


		final int RX10_TEMP179 = 0;


		final boolean RX10_TEMP180 = RX10_TEMP178 < RX10_TEMP179;

		if(RX10_TEMP180)
			{

			String RX10_TEMP181 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP181);

			}

		final int RX10_TEMP182 = Program.getPlaceFromDist1(RX10_TEMP176, RX10_TEMP178,myUniquePlacePoint);


		final int RX10_TEMP184 = 0;


		final boolean RX10_TEMP185 = RX10_TEMP182 != RX10_TEMP184;

		if(RX10_TEMP185)
			{

			String RX10_TEMP183 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP183);

			}
		Program.setRefArrayValue1double(result, RX10_TEMP178, X10_TEMP193,myUniquePlacePoint);

		final int X10_TEMP195 = 2;


		final double X10_TEMP198 = we + wk;


		final double X10_TEMP199 = X10_TEMP198;


		final Point1 RX10_TEMP186 = new Point1(X10_TEMP195,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP186.hashCode());


		final Dist1 RX10_TEMP187 = result.distValue;


		final Region1 RX10_TEMP188 = RX10_TEMP187.dReg;


		final int RX10_TEMP189 = Program.searchPointInRegion1(RX10_TEMP188, RX10_TEMP186,myUniquePlacePoint);


		final int RX10_TEMP190 = 0;


		final boolean RX10_TEMP191 = RX10_TEMP189 < RX10_TEMP190;

		if(RX10_TEMP191)
			{

			String RX10_TEMP192 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP192);

			}

		final int RX10_TEMP193 = Program.getPlaceFromDist1(RX10_TEMP187, RX10_TEMP189,myUniquePlacePoint);


		final int RX10_TEMP195 = 0;


		final boolean RX10_TEMP196 = RX10_TEMP193 != RX10_TEMP195;

		if(RX10_TEMP196)
			{

			String RX10_TEMP194 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP194);

			}
		Program.setRefArrayValue1double(result, RX10_TEMP189, X10_TEMP199,myUniquePlacePoint);

		final long X10_TEMP201 = System.currentTimeMillis();


		time1 = X10_TEMP201;


		final long X10_TEMP204 = X10_TEMP0.moveTime;


		final long X10_TEMP203 = time1 - time2;


		final long X10_TEMP207 = X10_TEMP204 + X10_TEMP203;


		final long X10_TEMP208 = X10_TEMP207;

		X10_TEMP0.moveTime = (X10_TEMP208);
		return result;
		}
public static double LinearESOpenPIC2D_linearDensity ( final LinearESOpenPIC2D X10_TEMP0, final double x, final double anlx, final double anxi, final double shift, int myUniquePlacePoint)
		{

		final double X10_TEMP4 = 1.0;


		final double X10_TEMP1 = x * anxi;


		final double X10_TEMP3 = X10_TEMP1 - shift;


		final double X10_TEMP5 = anlx * X10_TEMP3;


		final double X10_TEMP7 = X10_TEMP4 + X10_TEMP5;

		return X10_TEMP7;
		}
public static double LinearESOpenPIC2D_linearDensityIntegral ( final LinearESOpenPIC2D X10_TEMP0, final double x, final double anlx, final double anxi, final double shift, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final boolean X10_TEMP3 = anxi == X10_TEMP1;


		final boolean X10_TEMP4 = X10_TEMP3;


		final double X10_TEMP6 = 0.5;


		final double X10_TEMP7 = X10_TEMP6 * anlx;


		final double X10_TEMP13 = X10_TEMP7 * x;


		final double X10_TEMP9 = x * anxi;


		final double X10_TEMP8 = 2.0;


		final double X10_TEMP10 = X10_TEMP8 * shift;


		final double X10_TEMP12 = X10_TEMP9 - X10_TEMP10;


		final double X10_TEMP14 = X10_TEMP13 * X10_TEMP12;


		double X10_TEMP16 = x + X10_TEMP14;

		if(X10_TEMP4)
			{

			X10_TEMP16 = x;

			}

		final double X10_TEMP17 = X10_TEMP16;

		return X10_TEMP17;
		}
public static doubleRefArray2 LinearESOpenPIC2D_makeGuards ( final LinearESOpenPIC2D X10_TEMP0, final Dist2 dData, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region2 X10_TEMP4 = Program.createNewRegion2RR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist2 X10_TEMP7 = Program.getPlaceDist2(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final int X10_TEMP17 = 0;


			final Region1 rLocal1 = Program.X10Util_getPRank2D(dData, p, X10_TEMP17,myUniquePlacePoint);


			final int X10_TEMP22 = 1;


			final Region1 rLocal2 = Program.X10Util_getPRank2D(dData, p, X10_TEMP22,myUniquePlacePoint);


			final int RX10_TEMP12 = rLocal1.regSize;


			final int RX10_TEMP13 = 0;


			final boolean RX10_TEMP14 = RX10_TEMP12 <= RX10_TEMP13;

			if(RX10_TEMP14)
				{

				final String RX10_TEMP15 = "Operation high() not defined on empty region rLocal1";

				throw new RuntimeException(RX10_TEMP15);

				}

			final int ub = Program.regionHigh(rLocal1,myUniquePlacePoint);


			final int X10_TEMP25 = 1;


			final int X10_TEMP29 = ub + X10_TEMP25;


			final int X10_TEMP27 = 1;


			final int X10_TEMP30 = ub + X10_TEMP27;


			final Region2 X10_TEMP32 = Program.createNewRegion2RA(X10_TEMP29, X10_TEMP30, rLocal2,myUniquePlacePoint);


			final Dist2 X10_TEMP34 = Program.getPlaceDist2(X10_TEMP32, p,myUniquePlacePoint);


			final Dist2 X10_TEMP36 = Program.unionDist2(dResult, X10_TEMP34,myUniquePlacePoint);


			dResult = X10_TEMP36;

			}

		final Region2 RX10_TEMP16 = dResult.dReg;


		final int RX10_TEMP17 = 0;


		final int RX10_TEMP18 = 1;


		int RX10_TEMP19 = 1;


		RX10_TEMP19 = RX10_TEMP19 - RX10_TEMP18;


		final int  RX10_TEMP20 = RX10_TEMP19+1;


		final int RX10_TEMP21 = RX10_TEMP19+1;


		final doubleStub[] RX10_TEMP22 = new doubleStub[RX10_TEMP21];

		/*FINISH
*/			{
			for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP20; RX10_TEMP23++)
				{

				final int RX10_TEMP24 = 0;


				final int RX10_TEMP25 = RX10_TEMP23;


				final int RX10_TEMP26 = 0;


				final int RX10_TEMP27 = Program.getDistLocalCount2(dResult, RX10_TEMP25,myUniquePlacePoint);


				final int RX10_TEMP28 = RX10_TEMP27 - RX10_TEMP18;

				//async(RX10_TEMP26)
					{

					final int RX10_TEMP30 = RX10_TEMP28+1;


					final double[] RX10_TEMP31 = new double/*NewUpdatableArray*/[RX10_TEMP30];
/*arrayInitBlock*/
for(int RX10_TEMP29= 0;RX10_TEMP29 <RX10_TEMP31.length ;RX10_TEMP29++ )						{

						final double X10_TEMP38 = 0.0;

						RX10_TEMP31[RX10_TEMP29] =X10_TEMP38;
						}

;


					final doubleStub RX10_TEMP32 = new doubleStub(RX10_TEMP31,RX10_TEMP26);
					
Program.globalPointerHashMap.get(RX10_TEMP26).add(RX10_TEMP32.hashCode());

					//async(RX10_TEMP24)
						{
						RX10_TEMP22[RX10_TEMP23] = RX10_TEMP32;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP33 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP20]);
/*arrayInitBlock*/
for(int RX10_TEMP35= 0;RX10_TEMP35 <RX10_TEMP33.length ;RX10_TEMP35++ )			{

			final doubleStub RX10_TEMP34 = RX10_TEMP22[RX10_TEMP35];

			RX10_TEMP33[RX10_TEMP35] =RX10_TEMP34;
			}

;


		final doubleRefArray2 RX10_TEMP36 = new doubleRefArray2(dResult, RX10_TEMP33,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP36.hashCode());


		final doubleRefArray2 X10_TEMP40 = RX10_TEMP36;

		return X10_TEMP40;
		}
public static void LinearESOpenPIC2D_depositCharge ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final doubleRefArray2 fieldCharge, final doubleRefArray2 guards, final double charge, int myUniquePlacePoint)
		{
		/*FINISH
*/			{

			final Dist1 X10_TEMP2 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP2.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP2.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP2.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP2, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP3 = RX10_TEMP11;

				//async(X10_TEMP3)
					{

					final Dist2 RX10_TEMP12 = fieldCharge.distValue;


					final Dist2 dFC = RX10_TEMP12;


					final Region2 rLocalFC = Program.X10Util_get2DLRegion(dFC,X10_TEMP3);


					final Dist2 RX10_TEMP13 = guards.distValue;


					final Dist2 dG = RX10_TEMP13;


					final Region2 rLocalG = Program.X10Util_get2DLRegion(dG,X10_TEMP3);


					final Region2 X10_TEMP11 = Program.unionRegion2(rLocalFC, rLocalG,X10_TEMP3);


					final int X10_TEMP12 = 0;


					final Dist2 X10_TEMP14 = Program.getPlaceDist2(X10_TEMP11, X10_TEMP12,X10_TEMP3);


					final Dist2 dLocal = X10_TEMP14;


					final Region2 RX10_TEMP14 = dLocal.dReg;


					final int RX10_TEMP15 = 0;


					final int RX10_TEMP16 = 1;


					int RX10_TEMP17 = 1;


					RX10_TEMP17 = RX10_TEMP17 - RX10_TEMP16;


					final int  RX10_TEMP18 = RX10_TEMP17+1;


					final int RX10_TEMP19 = RX10_TEMP17+1;


					final doubleStub[] RX10_TEMP20 = new doubleStub[RX10_TEMP19];

					/*FINISH
*/						{
						for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP18; RX10_TEMP21++)
							{

							final int RX10_TEMP22 = 0;


							final int RX10_TEMP23 = RX10_TEMP21;


							final int RX10_TEMP24 = 0;


							final int RX10_TEMP25 = Program.getDistLocalCount2(dLocal, RX10_TEMP23,X10_TEMP3);


							final int RX10_TEMP26 = RX10_TEMP25 - RX10_TEMP16;

							//async(RX10_TEMP24)
								{

								final int RX10_TEMP28 = RX10_TEMP26+1;


								final double[] RX10_TEMP29 = new double/*NewUpdatableArray*/[RX10_TEMP28];
/*arrayInitBlock*/
for(int RX10_TEMP27= 0;RX10_TEMP27 <RX10_TEMP29.length ;RX10_TEMP27++ )									{

									final double X10_TEMP17 = 0.0;

									RX10_TEMP29[RX10_TEMP27] =X10_TEMP17;
									}

;


								final doubleStub RX10_TEMP30 = new doubleStub(RX10_TEMP29,RX10_TEMP24);
								
Program.globalPointerHashMap.get(RX10_TEMP24).add(RX10_TEMP30.hashCode());

								//async(RX10_TEMP22)
									{
									RX10_TEMP20[RX10_TEMP21] = RX10_TEMP30;
									}
								}
							}
						}

					final doubleStub[] RX10_TEMP31 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP18]);
/*arrayInitBlock*/
for(int RX10_TEMP33= 0;RX10_TEMP33 <RX10_TEMP31.length ;RX10_TEMP33++ )						{

						final doubleStub RX10_TEMP32 = RX10_TEMP20[RX10_TEMP33];

						RX10_TEMP31[RX10_TEMP33] =RX10_TEMP32;
						}

;


					final doubleRefArray2 RX10_TEMP34 = new doubleRefArray2(dLocal, RX10_TEMP31,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP34.hashCode());


					final doubleRefArray2 localCharge = RX10_TEMP34;


					final Dist1 RX10_TEMP35 = particles.distValue;


					final Dist1 X10_TEMP19 = RX10_TEMP35;


					final int X10_TEMP20 = 0;


					final Dist1 X10_TEMP22 = Program.restrictDist1(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


					final Region1 RX10_TEMP37 = X10_TEMP22.dReg;


					final int RX10_TEMP40 = 1;


					int RX10_TEMP38 = RX10_TEMP37.regSize;


					RX10_TEMP38 = RX10_TEMP38 - RX10_TEMP40;


					final int  RX10_TEMP39 = RX10_TEMP38+1;

					for(int RX10_TEMP36=0; RX10_TEMP36 < RX10_TEMP39; RX10_TEMP36++)
						{

						final int RX10_TEMP41 = RX10_TEMP36;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP37, RX10_TEMP41,myUniquePlacePoint);


						final Dist1 RX10_TEMP42 = particles.distValue;


						final Region1 RX10_TEMP43 = RX10_TEMP42.dReg;


						final int RX10_TEMP44 = Program.searchPointInRegion1(RX10_TEMP43, pt,myUniquePlacePoint);


						final int RX10_TEMP45 = 0;


						final boolean RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45;

						if(RX10_TEMP46)
							{

							String RX10_TEMP47 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP47);

							}

						final int RX10_TEMP48 = Program.getPlaceFromDist1(RX10_TEMP42, RX10_TEMP44,myUniquePlacePoint);


						final int RX10_TEMP50 = 0;


						final boolean RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50;

						if(RX10_TEMP51)
							{

							String RX10_TEMP49 = "Bad place access for array particles";

							throw new RuntimeException(RX10_TEMP49);

							}

						final Particle RX10_TEMP52 = Program.getRefArrayValue1Particle(particles, RX10_TEMP44,myUniquePlacePoint);


						final Particle p = RX10_TEMP52;


						final double X10_TEMP25 = Program.Particle_getX(p,myUniquePlacePoint);


						final int x = (int)X10_TEMP25;


						final double X10_TEMP27 = Program.Particle_getY(p,myUniquePlacePoint);


						final int y = (int)X10_TEMP27;


						final double X10_TEMP29 = Program.Particle_getX(p,myUniquePlacePoint);


						final double dx = X10_TEMP29 - x;


						final double X10_TEMP31 = Program.Particle_getY(p,myUniquePlacePoint);


						final double dy = X10_TEMP31 - y;


						final int X10_TEMP33 = 1;


						final int X10_TEMP37 = y + X10_TEMP33;


						final int X10_TEMP35 = 1;


						final int X10_TEMP38 = x + X10_TEMP35;


						final int X10_TEMP39 = 1;


						final int X10_TEMP43 = y + X10_TEMP39;


						final int X10_TEMP41 = 1;


						final int X10_TEMP44 = x + X10_TEMP41;


						final Point2 RX10_TEMP53 = new Point2(X10_TEMP43, X10_TEMP44,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP53.hashCode());


						final Dist2 RX10_TEMP54 = localCharge.distValue;


						final Region2 RX10_TEMP55 = RX10_TEMP54.dReg;


						final int RX10_TEMP56 = Program.searchPointInRegion2(RX10_TEMP55, RX10_TEMP53,myUniquePlacePoint);


						final int RX10_TEMP57 = 0;


						final boolean RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57;

						if(RX10_TEMP58)
							{

							String RX10_TEMP59 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP59);

							}

						final int RX10_TEMP60 = Program.getPlaceFromDist2(RX10_TEMP54, RX10_TEMP56,myUniquePlacePoint);


						final int RX10_TEMP62 = 0;


						final boolean RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62;

						if(RX10_TEMP63)
							{

							String RX10_TEMP61 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP61);

							}

						final double RX10_TEMP64 = Program.getRefArrayValue2double(localCharge, RX10_TEMP56,myUniquePlacePoint);


						final double X10_TEMP48 = RX10_TEMP64;


						final double X10_TEMP45 = charge * dx;


						final double X10_TEMP47 = X10_TEMP45 * dy;


						final double X10_TEMP51 = X10_TEMP48 + X10_TEMP47;


						final double X10_TEMP52 = X10_TEMP51;


						final Point2 RX10_TEMP65 = new Point2(X10_TEMP37, X10_TEMP38,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP65.hashCode());


						final Dist2 RX10_TEMP66 = localCharge.distValue;


						final Region2 RX10_TEMP67 = RX10_TEMP66.dReg;


						final int RX10_TEMP68 = Program.searchPointInRegion2(RX10_TEMP67, RX10_TEMP65,myUniquePlacePoint);


						final int RX10_TEMP69 = 0;


						final boolean RX10_TEMP70 = RX10_TEMP68 < RX10_TEMP69;

						if(RX10_TEMP70)
							{

							String RX10_TEMP71 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP71);

							}

						final int RX10_TEMP72 = Program.getPlaceFromDist2(RX10_TEMP66, RX10_TEMP68,myUniquePlacePoint);


						final int RX10_TEMP74 = 0;


						final boolean RX10_TEMP75 = RX10_TEMP72 != RX10_TEMP74;

						if(RX10_TEMP75)
							{

							String RX10_TEMP73 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP73);

							}
						Program.setRefArrayValue2double(localCharge, RX10_TEMP68, X10_TEMP52,myUniquePlacePoint);

						final int X10_TEMP53 = 1;


						final int X10_TEMP56 = y + X10_TEMP53;


						final int X10_TEMP57 = 1;


						final int X10_TEMP60 = y + X10_TEMP57;


						final Point2 RX10_TEMP76 = new Point2(X10_TEMP60, x,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP76.hashCode());


						final Dist2 RX10_TEMP77 = localCharge.distValue;


						final Region2 RX10_TEMP78 = RX10_TEMP77.dReg;


						final int RX10_TEMP79 = Program.searchPointInRegion2(RX10_TEMP78, RX10_TEMP76,myUniquePlacePoint);


						final int RX10_TEMP80 = 0;


						final boolean RX10_TEMP81 = RX10_TEMP79 < RX10_TEMP80;

						if(RX10_TEMP81)
							{

							String RX10_TEMP82 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP82);

							}

						final int RX10_TEMP83 = Program.getPlaceFromDist2(RX10_TEMP77, RX10_TEMP79,myUniquePlacePoint);


						final int RX10_TEMP85 = 0;


						final boolean RX10_TEMP86 = RX10_TEMP83 != RX10_TEMP85;

						if(RX10_TEMP86)
							{

							String RX10_TEMP84 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP84);

							}

						final double RX10_TEMP87 = Program.getRefArrayValue2double(localCharge, RX10_TEMP79,myUniquePlacePoint);


						final double X10_TEMP67 = RX10_TEMP87;


						final double X10_TEMP61 = 1.0;


						final double X10_TEMP63 = X10_TEMP61 - dx;


						final double X10_TEMP64 = charge * X10_TEMP63;


						final double X10_TEMP66 = X10_TEMP64 * dy;


						final double X10_TEMP70 = X10_TEMP67 + X10_TEMP66;


						final double X10_TEMP71 = X10_TEMP70;


						final Point2 RX10_TEMP88 = new Point2(X10_TEMP56, x,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP88.hashCode());


						final Dist2 RX10_TEMP89 = localCharge.distValue;


						final Region2 RX10_TEMP90 = RX10_TEMP89.dReg;


						final int RX10_TEMP91 = Program.searchPointInRegion2(RX10_TEMP90, RX10_TEMP88,myUniquePlacePoint);


						final int RX10_TEMP92 = 0;


						final boolean RX10_TEMP93 = RX10_TEMP91 < RX10_TEMP92;

						if(RX10_TEMP93)
							{

							String RX10_TEMP94 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP94);

							}

						final int RX10_TEMP95 = Program.getPlaceFromDist2(RX10_TEMP89, RX10_TEMP91,myUniquePlacePoint);


						final int RX10_TEMP97 = 0;


						final boolean RX10_TEMP98 = RX10_TEMP95 != RX10_TEMP97;

						if(RX10_TEMP98)
							{

							String RX10_TEMP96 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP96);

							}
						Program.setRefArrayValue2double(localCharge, RX10_TEMP91, X10_TEMP71,myUniquePlacePoint);

						final int X10_TEMP73 = 1;


						final int X10_TEMP75 = x + X10_TEMP73;


						final int X10_TEMP77 = 1;


						final int X10_TEMP79 = x + X10_TEMP77;


						final Point2 RX10_TEMP99 = new Point2(y, X10_TEMP79,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP99.hashCode());


						final Dist2 RX10_TEMP100 = localCharge.distValue;


						final Region2 RX10_TEMP101 = RX10_TEMP100.dReg;


						final int RX10_TEMP102 = Program.searchPointInRegion2(RX10_TEMP101, RX10_TEMP99,myUniquePlacePoint);


						final int RX10_TEMP103 = 0;


						final boolean RX10_TEMP104 = RX10_TEMP102 < RX10_TEMP103;

						if(RX10_TEMP104)
							{

							String RX10_TEMP105 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP105);

							}

						final int RX10_TEMP106 = Program.getPlaceFromDist2(RX10_TEMP100, RX10_TEMP102,myUniquePlacePoint);


						final int RX10_TEMP108 = 0;


						final boolean RX10_TEMP109 = RX10_TEMP106 != RX10_TEMP108;

						if(RX10_TEMP109)
							{

							String RX10_TEMP107 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP107);

							}

						final double RX10_TEMP110 = Program.getRefArrayValue2double(localCharge, RX10_TEMP102,myUniquePlacePoint);


						final double X10_TEMP86 = RX10_TEMP110;


						final double X10_TEMP83 = charge * dx;


						final double X10_TEMP80 = 1.0;


						final double X10_TEMP82 = X10_TEMP80 - dy;


						final double X10_TEMP85 = X10_TEMP83 * X10_TEMP82;


						final double X10_TEMP89 = X10_TEMP86 + X10_TEMP85;


						final double X10_TEMP90 = X10_TEMP89;


						final Point2 RX10_TEMP111 = new Point2(y, X10_TEMP75,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP111.hashCode());


						final Dist2 RX10_TEMP112 = localCharge.distValue;


						final Region2 RX10_TEMP113 = RX10_TEMP112.dReg;


						final int RX10_TEMP114 = Program.searchPointInRegion2(RX10_TEMP113, RX10_TEMP111,myUniquePlacePoint);


						final int RX10_TEMP115 = 0;


						final boolean RX10_TEMP116 = RX10_TEMP114 < RX10_TEMP115;

						if(RX10_TEMP116)
							{

							String RX10_TEMP117 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP117);

							}

						final int RX10_TEMP118 = Program.getPlaceFromDist2(RX10_TEMP112, RX10_TEMP114,myUniquePlacePoint);


						final int RX10_TEMP120 = 0;


						final boolean RX10_TEMP121 = RX10_TEMP118 != RX10_TEMP120;

						if(RX10_TEMP121)
							{

							String RX10_TEMP119 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP119);

							}
						Program.setRefArrayValue2double(localCharge, RX10_TEMP114, X10_TEMP90,myUniquePlacePoint);

						final Point2 RX10_TEMP122 = new Point2(y, x,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP122.hashCode());


						final Dist2 RX10_TEMP123 = localCharge.distValue;


						final Region2 RX10_TEMP124 = RX10_TEMP123.dReg;


						final int RX10_TEMP125 = Program.searchPointInRegion2(RX10_TEMP124, RX10_TEMP122,myUniquePlacePoint);


						final int RX10_TEMP126 = 0;


						final boolean RX10_TEMP127 = RX10_TEMP125 < RX10_TEMP126;

						if(RX10_TEMP127)
							{

							String RX10_TEMP128 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP128);

							}

						final int RX10_TEMP129 = Program.getPlaceFromDist2(RX10_TEMP123, RX10_TEMP125,myUniquePlacePoint);


						final int RX10_TEMP131 = 0;


						final boolean RX10_TEMP132 = RX10_TEMP129 != RX10_TEMP131;

						if(RX10_TEMP132)
							{

							String RX10_TEMP130 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP130);

							}

						final double RX10_TEMP133 = Program.getRefArrayValue2double(localCharge, RX10_TEMP125,myUniquePlacePoint);


						final double X10_TEMP104 = RX10_TEMP133;


						final double X10_TEMP95 = 1.0;


						final double X10_TEMP97 = X10_TEMP95 - dx;


						final double X10_TEMP101 = charge * X10_TEMP97;


						final double X10_TEMP98 = 1.0;


						final double X10_TEMP100 = X10_TEMP98 - dy;


						final double X10_TEMP103 = X10_TEMP101 * X10_TEMP100;


						final double X10_TEMP107 = X10_TEMP104 + X10_TEMP103;


						final double X10_TEMP108 = X10_TEMP107;


						final Point2 RX10_TEMP134 = new Point2(y, x,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP134.hashCode());


						final Dist2 RX10_TEMP135 = localCharge.distValue;


						final Region2 RX10_TEMP136 = RX10_TEMP135.dReg;


						final int RX10_TEMP137 = Program.searchPointInRegion2(RX10_TEMP136, RX10_TEMP134,myUniquePlacePoint);


						final int RX10_TEMP138 = 0;


						final boolean RX10_TEMP139 = RX10_TEMP137 < RX10_TEMP138;

						if(RX10_TEMP139)
							{

							String RX10_TEMP140 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP140);

							}

						final int RX10_TEMP141 = Program.getPlaceFromDist2(RX10_TEMP135, RX10_TEMP137,myUniquePlacePoint);


						final int RX10_TEMP143 = 0;


						final boolean RX10_TEMP144 = RX10_TEMP141 != RX10_TEMP143;

						if(RX10_TEMP144)
							{

							String RX10_TEMP142 = "Bad place access for array localCharge";

							throw new RuntimeException(RX10_TEMP142);

							}
						Program.setRefArrayValue2double(localCharge, RX10_TEMP137, X10_TEMP108,myUniquePlacePoint);
						}
					/*FINISH
*/						{

						final Dist2 RX10_TEMP145 = fieldCharge.distValue;


						final Dist2 X10_TEMP109 = RX10_TEMP145;


						final int X10_TEMP110 = 0;


						final Dist2 X10_TEMP112 = Program.restrictDist2(X10_TEMP109, X10_TEMP110,myUniquePlacePoint);


						final int X10_TEMP113 = 0;


						final Region2 RX10_TEMP147 = X10_TEMP112.dReg;


						final int RX10_TEMP150 = 1;


						int RX10_TEMP148 = RX10_TEMP147.regSize;


						RX10_TEMP148 = RX10_TEMP148 - RX10_TEMP150;


						final int  RX10_TEMP149 = RX10_TEMP148+1;

						for(int RX10_TEMP146=0; RX10_TEMP146 < RX10_TEMP149; RX10_TEMP146++)
							{

							final int RX10_TEMP151 = RX10_TEMP146;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP147, RX10_TEMP151,myUniquePlacePoint);

							//async(X10_TEMP113)
								{

								final Dist2 RX10_TEMP152 = localCharge.distValue;


								final Region2 RX10_TEMP153 = RX10_TEMP152.dReg;


								final int RX10_TEMP154 = Program.searchPointInRegion2(RX10_TEMP153, pt,X10_TEMP113);


								final int RX10_TEMP155 = 0;


								final boolean RX10_TEMP156 = RX10_TEMP154 < RX10_TEMP155;

								if(RX10_TEMP156)
									{

									String RX10_TEMP157 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP157);

									}

								final int RX10_TEMP158 = Program.getPlaceFromDist2(RX10_TEMP152, RX10_TEMP154,X10_TEMP113);


								final int RX10_TEMP160 = 0;


								final boolean RX10_TEMP161 = RX10_TEMP158 != RX10_TEMP160;

								if(RX10_TEMP161)
									{

									String RX10_TEMP159 = "Bad place access for array localCharge";

									throw new RuntimeException(RX10_TEMP159);

									}

								final double RX10_TEMP162 = Program.getRefArrayValue2double(localCharge, RX10_TEMP154,X10_TEMP113);


								final double X10_TEMP118 = RX10_TEMP162;


								final double X10_TEMP119 = X10_TEMP118;


								final Dist2 RX10_TEMP163 = fieldCharge.distValue;


								final Region2 RX10_TEMP164 = RX10_TEMP163.dReg;


								final int RX10_TEMP165 = Program.searchPointInRegion2(RX10_TEMP164, pt,X10_TEMP113);


								final int RX10_TEMP166 = 0;


								final boolean RX10_TEMP167 = RX10_TEMP165 < RX10_TEMP166;

								if(RX10_TEMP167)
									{

									String RX10_TEMP168 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP168);

									}

								final int RX10_TEMP169 = Program.getPlaceFromDist2(RX10_TEMP163, RX10_TEMP165,X10_TEMP113);


								final int RX10_TEMP171 = 0;


								final boolean RX10_TEMP172 = RX10_TEMP169 != RX10_TEMP171;

								if(RX10_TEMP172)
									{

									String RX10_TEMP170 = "Bad place access for array fieldCharge";

									throw new RuntimeException(RX10_TEMP170);

									}
								Program.setRefArrayValue2double(fieldCharge, RX10_TEMP165, X10_TEMP119,X10_TEMP113);
								}
							}

						final Dist2 RX10_TEMP173 = guards.distValue;


						final Dist2 X10_TEMP120 = RX10_TEMP173;


						final int X10_TEMP121 = 0;


						final Dist2 X10_TEMP123 = Program.restrictDist2(X10_TEMP120, X10_TEMP121,myUniquePlacePoint);


						final int X10_TEMP124 = 0;


						final Region2 RX10_TEMP175 = X10_TEMP123.dReg;


						final int RX10_TEMP178 = 1;


						int RX10_TEMP176 = RX10_TEMP175.regSize;


						RX10_TEMP176 = RX10_TEMP176 - RX10_TEMP178;


						final int  RX10_TEMP177 = RX10_TEMP176+1;

						for(int RX10_TEMP174=0; RX10_TEMP174 < RX10_TEMP177; RX10_TEMP174++)
							{

							final int RX10_TEMP179 = RX10_TEMP174;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP175, RX10_TEMP179,myUniquePlacePoint);

							//async(X10_TEMP124)
								{

								final Dist2 RX10_TEMP180 = localCharge.distValue;


								final Region2 RX10_TEMP181 = RX10_TEMP180.dReg;


								final int RX10_TEMP182 = Program.searchPointInRegion2(RX10_TEMP181, pt,X10_TEMP124);


								final int RX10_TEMP183 = 0;


								final boolean RX10_TEMP184 = RX10_TEMP182 < RX10_TEMP183;

								if(RX10_TEMP184)
									{

									String RX10_TEMP185 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP185);

									}

								final int RX10_TEMP186 = Program.getPlaceFromDist2(RX10_TEMP180, RX10_TEMP182,X10_TEMP124);


								final int RX10_TEMP188 = 0;


								final boolean RX10_TEMP189 = RX10_TEMP186 != RX10_TEMP188;

								if(RX10_TEMP189)
									{

									String RX10_TEMP187 = "Bad place access for array localCharge";

									throw new RuntimeException(RX10_TEMP187);

									}

								final double RX10_TEMP190 = Program.getRefArrayValue2double(localCharge, RX10_TEMP182,X10_TEMP124);


								final double X10_TEMP129 = RX10_TEMP190;


								final double X10_TEMP130 = X10_TEMP129;


								final Dist2 RX10_TEMP191 = guards.distValue;


								final Region2 RX10_TEMP192 = RX10_TEMP191.dReg;


								final int RX10_TEMP193 = Program.searchPointInRegion2(RX10_TEMP192, pt,X10_TEMP124);


								final int RX10_TEMP194 = 0;


								final boolean RX10_TEMP195 = RX10_TEMP193 < RX10_TEMP194;

								if(RX10_TEMP195)
									{

									String RX10_TEMP196 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP196);

									}

								final int RX10_TEMP197 = Program.getPlaceFromDist2(RX10_TEMP191, RX10_TEMP193,X10_TEMP124);


								final int RX10_TEMP199 = 0;


								final boolean RX10_TEMP200 = RX10_TEMP197 != RX10_TEMP199;

								if(RX10_TEMP200)
									{

									String RX10_TEMP198 = "Bad place access for array guards";

									throw new RuntimeException(RX10_TEMP198);

									}
								Program.setRefArrayValue2double(guards, RX10_TEMP193, X10_TEMP130,X10_TEMP124);
								}
							}
						}
					}
				}
			}
		}
public static void LinearESOpenPIC2D_addGuards ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, final doubleRefArray2 guards, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = guards.distValue;


		final Dist2 X10_TEMP1 = RX10_TEMP0;


		final Dist2 dGuard = X10_TEMP1;

		/*FINISH
*/			{

			final Dist1 X10_TEMP4 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP2 = X10_TEMP4.dReg;


			final int RX10_TEMP5 = 1;


			int RX10_TEMP3 = RX10_TEMP2.regSize;


			RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5;


			final int  RX10_TEMP4 = RX10_TEMP3+1;

			for(int RX10_TEMP1=0; RX10_TEMP1 < RX10_TEMP4; RX10_TEMP1++)
				{

				final int RX10_TEMP6 = RX10_TEMP1;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP2, RX10_TEMP6,myUniquePlacePoint);


				final Region1 RX10_TEMP7 = X10_TEMP4.dReg;


				final int RX10_TEMP8 = Program.searchPointInRegion1(RX10_TEMP7, pl,myUniquePlacePoint);


				final int RX10_TEMP9 = 0;


				final boolean RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9;

				if(RX10_TEMP10)
					{

					final String RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP4.";

					throw new RuntimeException(RX10_TEMP11);

					}

				final int RX10_TEMP12 = Program.getPlaceFromDist1(X10_TEMP4, RX10_TEMP8,myUniquePlacePoint);


				final int X10_TEMP5 = RX10_TEMP12;

				//async(X10_TEMP5)
					{

					final Dist2 RX10_TEMP13 = guards.distValue;


					final Dist2 dG = RX10_TEMP13;


					final Region2 rLocalG = Program.X10Util_get2DLRegion(dG,X10_TEMP5);


					final int X10_TEMP9 = 0;


					final boolean X10_TEMP10 = true;


					final boolean X10_TEMP12 = ! X10_TEMP10;

					if(X10_TEMP12)
						{

						final Region2 RX10_TEMP14 = rLocalG;


						final int RX10_TEMP29 = rLocalG.regSize;


						final int RX10_TEMP30 = 1;


						final int RX10_TEMP31 = RX10_TEMP29 - RX10_TEMP30;


						final int  RX10_TEMP28 = RX10_TEMP31+1;


						final double[] RX10_TEMP32 = (double[])(new double/*value*/[RX10_TEMP28]);
/*arrayInitBlock*/
for(int RX10_TEMP15= 0;RX10_TEMP15 <RX10_TEMP32.length ;RX10_TEMP15++ )							{

							final int RX10_TEMP16 = RX10_TEMP15;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP14, RX10_TEMP16,X10_TEMP5);


							final Dist2 RX10_TEMP17 = guards.distValue;


							final Region2 RX10_TEMP18 = RX10_TEMP17.dReg;


							final int RX10_TEMP19 = Program.searchPointInRegion2(RX10_TEMP18, pt,X10_TEMP5);


							final int RX10_TEMP20 = 0;


							final boolean RX10_TEMP21 = RX10_TEMP19 < RX10_TEMP20;

							if(RX10_TEMP21)
								{

								String RX10_TEMP22 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP22);

								}

							final int RX10_TEMP23 = Program.getPlaceFromDist2(RX10_TEMP17, RX10_TEMP19,X10_TEMP5);


							final int RX10_TEMP25 = 0;


							final boolean RX10_TEMP26 = RX10_TEMP23 != RX10_TEMP25;

							if(RX10_TEMP26)
								{

								String RX10_TEMP24 = "Bad place access for array guards";

								throw new RuntimeException(RX10_TEMP24);

								}

							final double RX10_TEMP27 = Program.getRefArrayValue2double(guards, RX10_TEMP19,X10_TEMP5);


							final double X10_TEMP15 = RX10_TEMP27;

							RX10_TEMP32[RX10_TEMP15] =X10_TEMP15;
							}

;


						final doubleValArray2 RX10_TEMP33 = new doubleValArray2(rLocalG, RX10_TEMP32,X10_TEMP5);
						
Program.globalPointerHashMap.get(X10_TEMP5).add(RX10_TEMP33.hashCode());


						final doubleValArray2 X10_TEMP16 = RX10_TEMP33;


						final doubleValArray2 sBuffer = X10_TEMP16;

						/*FINISH
*/							{

							final int X10_TEMP18 = 0;


							final int X10_TEMP20 = 0;

							//async(X10_TEMP20)
								{

								final Dist2 RX10_TEMP34 = data.distValue;


								final Dist2 dData = RX10_TEMP34;


								final Region2 rLocalD = Program.X10Util_get2DLRegion(dData,X10_TEMP20);


								final int X10_TEMP24 = 0;


								final int X10_TEMP25 = 1;


								final int X10_TEMP26 = X10_TEMP24 - X10_TEMP25;


								final int X10_TEMP27 = 0;


								Region2 X10_TEMP28 = Program.createNewRegion2RR(X10_TEMP24, X10_TEMP26, X10_TEMP24, X10_TEMP26,X10_TEMP20);


								final int RX10_TEMP38 = 1;


								int RX10_TEMP36 = rLocalD.regSize;


								RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


								final int  RX10_TEMP37 = RX10_TEMP36+1;

								for(int RX10_TEMP35=0; RX10_TEMP35 < RX10_TEMP37; RX10_TEMP35++)
									{

									final int RX10_TEMP39 = RX10_TEMP35;


									final Point2 X10_TEMP29 = Program.regionOrdinalPoint2(rLocalD, RX10_TEMP39,X10_TEMP20);


									final int X10_TEMP30 = X10_TEMP29.f0;


									final int X10_TEMP31 = X10_TEMP29.f1;


									final boolean RX10_TEMP40 = Program.regionContainsPoint2(rLocalG, X10_TEMP29,X10_TEMP20);


									final boolean X10_TEMP32 = RX10_TEMP40;

									if(X10_TEMP32)
										{

										final Region2 X10_TEMP33 = Program.createNewRegion2RR(X10_TEMP30, X10_TEMP30, X10_TEMP31, X10_TEMP31,X10_TEMP20);


										X10_TEMP28 = Program.unionRegion2(X10_TEMP28, X10_TEMP33,X10_TEMP20);

										}
									}

								final Region2 X10_TEMP34 = X10_TEMP28;


								final Region2 X10_TEMP36 = X10_TEMP34;


								final int X10_TEMP38 = 0;


								final int RX10_TEMP44 = 1;


								int RX10_TEMP42 = X10_TEMP36.regSize;


								RX10_TEMP42 = RX10_TEMP42 - RX10_TEMP44;


								final int  RX10_TEMP43 = RX10_TEMP42+1;

								for(int RX10_TEMP41=0; RX10_TEMP41 < RX10_TEMP43; RX10_TEMP41++)
									{

									final int RX10_TEMP45 = RX10_TEMP41;


									final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP36, RX10_TEMP45,X10_TEMP20);

									//async(X10_TEMP38)
										{

										final Dist2 RX10_TEMP46 = data.distValue;


										final Region2 RX10_TEMP47 = RX10_TEMP46.dReg;


										final int RX10_TEMP48 = Program.searchPointInRegion2(RX10_TEMP47, pt,X10_TEMP38);


										final int RX10_TEMP49 = 0;


										final boolean RX10_TEMP50 = RX10_TEMP48 < RX10_TEMP49;

										if(RX10_TEMP50)
											{

											String RX10_TEMP51 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP51);

											}

										final int RX10_TEMP52 = Program.getPlaceFromDist2(RX10_TEMP46, RX10_TEMP48,X10_TEMP38);


										final int RX10_TEMP54 = 0;


										final boolean RX10_TEMP55 = RX10_TEMP52 != RX10_TEMP54;

										if(RX10_TEMP55)
											{

											String RX10_TEMP53 = "Bad place access for array data";

											throw new RuntimeException(RX10_TEMP53);

											}

										final double RX10_TEMP56 = Program.getRefArrayValue2double(data, RX10_TEMP48,X10_TEMP38);


										final double X10_TEMP42 = RX10_TEMP56;


										final Region2 RX10_TEMP57 = sBuffer.regionValue;


										final int RX10_TEMP58 = Program.searchPointInRegion2(RX10_TEMP57, pt,X10_TEMP38);


										final int RX10_TEMP59 = 0;


										final boolean RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59;

										if(RX10_TEMP60)
											{

											String RX10_TEMP61 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP61);

											}

										final double[] RX10_TEMP62 = (double[])(sBuffer.contents);


										final double X10_TEMP43 = RX10_TEMP62[RX10_TEMP58];


										final double X10_TEMP46 = X10_TEMP42 + X10_TEMP43;


										final double X10_TEMP47 = X10_TEMP46;


										final Dist2 RX10_TEMP63 = data.distValue;


										final Region2 RX10_TEMP64 = RX10_TEMP63.dReg;


										final int RX10_TEMP65 = Program.searchPointInRegion2(RX10_TEMP64, pt,X10_TEMP38);


										final int RX10_TEMP66 = 0;


										final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

										if(RX10_TEMP67)
											{

											String RX10_TEMP68 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP68);

											}

										final int RX10_TEMP69 = Program.getPlaceFromDist2(RX10_TEMP63, RX10_TEMP65,X10_TEMP38);


										final int RX10_TEMP71 = 0;


										final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

										if(RX10_TEMP72)
											{

											String RX10_TEMP70 = "Bad place access for array data";

											throw new RuntimeException(RX10_TEMP70);

											}
										Program.setRefArrayValue2double(data, RX10_TEMP65, X10_TEMP47,X10_TEMP38);
										}
									}
								}
							}
						}

					final int X10_TEMP49 = 0;


					final int RX10_TEMP76 = 1;


					int RX10_TEMP74 = rLocalG.regSize;


					RX10_TEMP74 = RX10_TEMP74 - RX10_TEMP76;


					final int  RX10_TEMP75 = RX10_TEMP74+1;

					for(int RX10_TEMP73=0; RX10_TEMP73 < RX10_TEMP75; RX10_TEMP73++)
						{

						final int RX10_TEMP77 = RX10_TEMP73;


						final Point2 pt = Program.regionOrdinalPoint2(rLocalG, RX10_TEMP77,myUniquePlacePoint);

						//async(X10_TEMP49)
							{

							final double X10_TEMP53 = 0.0;


							final double X10_TEMP54 = X10_TEMP53;


							final Dist2 RX10_TEMP78 = guards.distValue;


							final Region2 RX10_TEMP79 = RX10_TEMP78.dReg;


							final int RX10_TEMP80 = Program.searchPointInRegion2(RX10_TEMP79, pt,X10_TEMP49);


							final int RX10_TEMP81 = 0;


							final boolean RX10_TEMP82 = RX10_TEMP80 < RX10_TEMP81;

							if(RX10_TEMP82)
								{

								String RX10_TEMP83 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP83);

								}

							final int RX10_TEMP84 = Program.getPlaceFromDist2(RX10_TEMP78, RX10_TEMP80,X10_TEMP49);


							final int RX10_TEMP86 = 0;


							final boolean RX10_TEMP87 = RX10_TEMP84 != RX10_TEMP86;

							if(RX10_TEMP87)
								{

								String RX10_TEMP85 = "Bad place access for array guards";

								throw new RuntimeException(RX10_TEMP85);

								}
							Program.setRefArrayValue2double(guards, RX10_TEMP80, X10_TEMP54,X10_TEMP49);
							}
						}
					}
				}
			}
		}
public static doubleRefArray2 LinearESOpenPIC2D_doubleDimensions ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = data.distValue;


		final Region2 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region2 rData = RX10_TEMP1;


		final int X10_TEMP4 = 0;


		final Region1 rData1 = Program.X10Util_getRank2D(rData, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP8 = 1;


		final Region1 rData2 = Program.X10Util_getRank2D(rData, X10_TEMP8,myUniquePlacePoint);


		final int X10_TEMP16 = 0;


		final int X10_TEMP11 = 2;


		final int X10_TEMP12 = rData1.regSize;


		final int X10_TEMP13 = X10_TEMP11 * X10_TEMP12;


		final int X10_TEMP14 = 1;


		final int X10_TEMP17 = X10_TEMP13 - X10_TEMP14;


		final Region1 X10_TEMP28 = Program.createNewRegion1R(X10_TEMP16, X10_TEMP17,myUniquePlacePoint);


		final int X10_TEMP25 = 0;


		final int X10_TEMP20 = 2;


		final int X10_TEMP21 = rData2.regSize;


		final int X10_TEMP22 = X10_TEMP20 * X10_TEMP21;


		final int X10_TEMP23 = 1;


		final int X10_TEMP26 = X10_TEMP22 - X10_TEMP23;


		final Region1 X10_TEMP29 = Program.createNewRegion1R(X10_TEMP25, X10_TEMP26,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_distBlockStar2(X10_TEMP28, X10_TEMP29,myUniquePlacePoint);


		final Region2 RX10_TEMP2 = dResult.dReg;


		final int RX10_TEMP3 = 0;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP5 = 1;


		RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4;


		final int  RX10_TEMP6 = RX10_TEMP5+1;


		final int RX10_TEMP7 = RX10_TEMP5+1;


		final doubleStub[] RX10_TEMP8 = new doubleStub[RX10_TEMP7];

		/*FINISH
*/			{
			for(int RX10_TEMP9=0; RX10_TEMP9 < RX10_TEMP6; RX10_TEMP9++)
				{

				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = RX10_TEMP9;


				final int RX10_TEMP12 = 0;


				final int RX10_TEMP13 = Program.getDistLocalCount2(dResult, RX10_TEMP11,myUniquePlacePoint);


				final int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4;

				//async(RX10_TEMP12)
					{

					final int RX10_TEMP16 = RX10_TEMP14+1;


					final double[] RX10_TEMP17 = new double/*NewUpdatableArray*/[RX10_TEMP16];
/*arrayInitBlock*/
for(int RX10_TEMP15= 0;RX10_TEMP15 <RX10_TEMP17.length ;RX10_TEMP15++ )						{

						final double X10_TEMP32 = 0.0;

						RX10_TEMP17[RX10_TEMP15] =X10_TEMP32;
						}

;


					final doubleStub RX10_TEMP18 = new doubleStub(RX10_TEMP17,RX10_TEMP12);
					
Program.globalPointerHashMap.get(RX10_TEMP12).add(RX10_TEMP18.hashCode());

					//async(RX10_TEMP10)
						{
						RX10_TEMP8[RX10_TEMP9] = RX10_TEMP18;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP19 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP6]);
/*arrayInitBlock*/
for(int RX10_TEMP21= 0;RX10_TEMP21 <RX10_TEMP19.length ;RX10_TEMP21++ )			{

			final doubleStub RX10_TEMP20 = RX10_TEMP8[RX10_TEMP21];

			RX10_TEMP19[RX10_TEMP21] =RX10_TEMP20;
			}

;


		final doubleRefArray2 RX10_TEMP22 = new doubleRefArray2(dResult, RX10_TEMP19,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP22.hashCode());


		final doubleRefArray2 result = RX10_TEMP22;

		/*FINISH
*/			{

			final Dist1 X10_TEMP35 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP24 = X10_TEMP35.dReg;


			final int RX10_TEMP27 = 1;


			int RX10_TEMP25 = RX10_TEMP24.regSize;


			RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27;


			final int  RX10_TEMP26 = RX10_TEMP25+1;

			for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP26; RX10_TEMP23++)
				{

				final int RX10_TEMP28 = RX10_TEMP23;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP24, RX10_TEMP28,myUniquePlacePoint);


				final Region1 RX10_TEMP29 = X10_TEMP35.dReg;


				final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pl,myUniquePlacePoint);


				final int RX10_TEMP31 = 0;


				final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

				if(RX10_TEMP32)
					{

					final String RX10_TEMP33 = "Point pl not found in the distribution X10_TEMP35.";

					throw new RuntimeException(RX10_TEMP33);

					}

				final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP35, RX10_TEMP30,myUniquePlacePoint);


				final int X10_TEMP36 = RX10_TEMP34;

				//async(X10_TEMP36)
					{

					final int X10_TEMP38 = pl.f0;


					final int X10_TEMP39 = 2;


					final int X10_TEMP41 = X10_TEMP38 / X10_TEMP39;


					final int pDst = 0;


					final Dist2 RX10_TEMP35 = data.distValue;


					final Dist2 dData = RX10_TEMP35;


					final Region2 rLocal = Program.X10Util_get2DLRegion(dData,X10_TEMP36);


					final Region2 RX10_TEMP36 = rLocal;


					final int RX10_TEMP51 = rLocal.regSize;


					final int RX10_TEMP52 = 1;


					final int RX10_TEMP53 = RX10_TEMP51 - RX10_TEMP52;


					final int  RX10_TEMP50 = RX10_TEMP53+1;


					final double[] RX10_TEMP54 = (double[])(new double/*value*/[RX10_TEMP50]);
/*arrayInitBlock*/
for(int RX10_TEMP37= 0;RX10_TEMP37 <RX10_TEMP54.length ;RX10_TEMP37++ )						{

						final int RX10_TEMP38 = RX10_TEMP37;


						final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP36, RX10_TEMP38,X10_TEMP36);


						final Dist2 RX10_TEMP39 = data.distValue;


						final Region2 RX10_TEMP40 = RX10_TEMP39.dReg;


						final int RX10_TEMP41 = Program.searchPointInRegion2(RX10_TEMP40, pt,X10_TEMP36);


						final int RX10_TEMP42 = 0;


						final boolean RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42;

						if(RX10_TEMP43)
							{

							String RX10_TEMP44 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP44);

							}

						final int RX10_TEMP45 = Program.getPlaceFromDist2(RX10_TEMP39, RX10_TEMP41,X10_TEMP36);


						final int RX10_TEMP47 = 0;


						final boolean RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47;

						if(RX10_TEMP48)
							{

							String RX10_TEMP46 = "Bad place access for array data";

							throw new RuntimeException(RX10_TEMP46);

							}

						final double RX10_TEMP49 = Program.getRefArrayValue2double(data, RX10_TEMP41,X10_TEMP36);


						final double X10_TEMP48 = RX10_TEMP49;

						RX10_TEMP54[RX10_TEMP37] =X10_TEMP48;
						}

;


					final doubleValArray2 RX10_TEMP55 = new doubleValArray2(rLocal, RX10_TEMP54,X10_TEMP36);
					
Program.globalPointerHashMap.get(X10_TEMP36).add(RX10_TEMP55.hashCode());


					final doubleValArray2 X10_TEMP49 = RX10_TEMP55;


					final doubleValArray2 sBuffer = X10_TEMP49;

					//async(pDst)
						{

						final int X10_TEMP53 = 0;


						final int RX10_TEMP59 = 1;


						int RX10_TEMP57 = rLocal.regSize;


						RX10_TEMP57 = RX10_TEMP57 - RX10_TEMP59;


						final int  RX10_TEMP58 = RX10_TEMP57+1;

						for(int RX10_TEMP56=0; RX10_TEMP56 < RX10_TEMP58; RX10_TEMP56++)
							{

							final int RX10_TEMP60 = RX10_TEMP56;


							final Point2 pt = Program.regionOrdinalPoint2(rLocal, RX10_TEMP60,pDst);

							//async(X10_TEMP53)
								{

								final Region2 RX10_TEMP61 = sBuffer.regionValue;


								final int RX10_TEMP62 = Program.searchPointInRegion2(RX10_TEMP61, pt,X10_TEMP53);


								final int RX10_TEMP63 = 0;


								final boolean RX10_TEMP64 = RX10_TEMP62 < RX10_TEMP63;

								if(RX10_TEMP64)
									{

									String RX10_TEMP65 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP65);

									}

								final double[] RX10_TEMP66 = (double[])(sBuffer.contents);


								final double X10_TEMP58 = RX10_TEMP66[RX10_TEMP62];


								final double X10_TEMP59 = X10_TEMP58;


								final Dist2 RX10_TEMP67 = result.distValue;


								final Region2 RX10_TEMP68 = RX10_TEMP67.dReg;


								final int RX10_TEMP69 = Program.searchPointInRegion2(RX10_TEMP68, pt,X10_TEMP53);


								final int RX10_TEMP70 = 0;


								final boolean RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70;

								if(RX10_TEMP71)
									{

									String RX10_TEMP72 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP72);

									}

								final int RX10_TEMP73 = Program.getPlaceFromDist2(RX10_TEMP67, RX10_TEMP69,X10_TEMP53);


								final int RX10_TEMP75 = 0;


								final boolean RX10_TEMP76 = RX10_TEMP73 != RX10_TEMP75;

								if(RX10_TEMP76)
									{

									String RX10_TEMP74 = "Bad place access for array result";

									throw new RuntimeException(RX10_TEMP74);

									}
								Program.setRefArrayValue2double(result, RX10_TEMP69, X10_TEMP59,X10_TEMP53);
								}
							}
						}
					}
				}
			}
		return result;
		}
public static doubleRefArray2 LinearESOpenPIC2D_moveFieldToUniform ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = data.distValue;


		final Region2 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region2 rData = RX10_TEMP1;


		final Dist2 X10_TEMP5 = Program.X10Util_distBlockStar1(rData,myUniquePlacePoint);


		final doubleRefArray2 X10_TEMP7 = Program.LinearESOpenPIC2D_moveFieldToDist(X10_TEMP0, data, X10_TEMP5,myUniquePlacePoint);

		return X10_TEMP7;
		}
public static doubleRefArray2 LinearESOpenPIC2D_moveFieldToDist ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, final Dist2 dDst, int myUniquePlacePoint)
		{

		final int MAX_ROWS = _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS;


		final int MAX_ITER = 0;


		final Dist1 X10_TEMP3 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP3;


		final Dist2 RX10_TEMP0 = data.distValue;


		final Region2 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region2 rData = RX10_TEMP1;


		final int X10_TEMP8 = 0;


		final Region1 rRank1 = Program.X10Util_getRank2D(rData, X10_TEMP8,myUniquePlacePoint);


		final int X10_TEMP12 = 1;


		final Region1 rRank2t = Program.X10Util_getRank2D(rData, X10_TEMP12,myUniquePlacePoint);


		final int X10_TEMP18 = 0;


		final int X10_TEMP15 = rRank2t.regSize;


		final int X10_TEMP16 = 1;


		final int X10_TEMP19 = X10_TEMP15 - X10_TEMP16;


		final Region1 rRank2 = Program.createNewRegion1R(X10_TEMP18, X10_TEMP19,myUniquePlacePoint);


		final int X10_TEMP24 = 0;


		final int X10_TEMP22 = 1;


		final int X10_TEMP25 = MAX_ROWS - X10_TEMP22;


		final Region1 rRows = Program.createNewRegion1R(X10_TEMP24, X10_TEMP25,myUniquePlacePoint);


		final Dist2 X10_TEMP31 = Program.X10Util_extendDistRank2D(dUnique, rRows,myUniquePlacePoint);


		final Dist3 dBuffer = Program.X10Util_extendDistRank3D(X10_TEMP31, rRank2,myUniquePlacePoint);


		final Region3 RX10_TEMP2 = dBuffer.dReg;


		final int RX10_TEMP3 = 0;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP5 = 1;


		RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4;


		final int  RX10_TEMP6 = RX10_TEMP5+1;


		final int RX10_TEMP7 = RX10_TEMP5+1;


		final doubleStub[] RX10_TEMP8 = new doubleStub[RX10_TEMP7];

		/*FINISH
*/			{
			for(int RX10_TEMP9=0; RX10_TEMP9 < RX10_TEMP6; RX10_TEMP9++)
				{

				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = RX10_TEMP9;


				final int RX10_TEMP12 = 0;


				final int RX10_TEMP13 = Program.getDistLocalCount3(dBuffer, RX10_TEMP11,myUniquePlacePoint);


				final int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4;

				//async(RX10_TEMP12)
					{

					final int RX10_TEMP16 = RX10_TEMP14+1;


					final double[] RX10_TEMP17 = new double/*NewUpdatableArray*/[RX10_TEMP16];
/*arrayInitBlock*/
for(int RX10_TEMP15= 0;RX10_TEMP15 <RX10_TEMP17.length ;RX10_TEMP15++ )						{

						final double X10_TEMP34 = 0.0;

						RX10_TEMP17[RX10_TEMP15] =X10_TEMP34;
						}

;


					final doubleStub RX10_TEMP18 = new doubleStub(RX10_TEMP17,RX10_TEMP12);
					
Program.globalPointerHashMap.get(RX10_TEMP12).add(RX10_TEMP18.hashCode());

					//async(RX10_TEMP10)
						{
						RX10_TEMP8[RX10_TEMP9] = RX10_TEMP18;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP19 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP6]);
/*arrayInitBlock*/
for(int RX10_TEMP21= 0;RX10_TEMP21 <RX10_TEMP19.length ;RX10_TEMP21++ )			{

			final doubleStub RX10_TEMP20 = RX10_TEMP8[RX10_TEMP21];

			RX10_TEMP19[RX10_TEMP21] =RX10_TEMP20;
			}

;


		final doubleRefArray3 RX10_TEMP22 = new doubleRefArray3(dBuffer, RX10_TEMP19,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP22.hashCode());


		final doubleRefArray3 srcBuffer = RX10_TEMP22;


		final Region3 RX10_TEMP23 = dBuffer.dReg;


		final int RX10_TEMP24 = 0;


		final int RX10_TEMP25 = 1;


		int RX10_TEMP26 = 1;


		RX10_TEMP26 = RX10_TEMP26 - RX10_TEMP25;


		final int  RX10_TEMP27 = RX10_TEMP26+1;


		final int RX10_TEMP28 = RX10_TEMP26+1;


		final doubleStub[] RX10_TEMP29 = new doubleStub[RX10_TEMP28];

		/*FINISH
*/			{
			for(int RX10_TEMP30=0; RX10_TEMP30 < RX10_TEMP27; RX10_TEMP30++)
				{

				final int RX10_TEMP31 = 0;


				final int RX10_TEMP32 = RX10_TEMP30;


				final int RX10_TEMP33 = 0;


				final int RX10_TEMP34 = Program.getDistLocalCount3(dBuffer, RX10_TEMP32,myUniquePlacePoint);


				final int RX10_TEMP35 = RX10_TEMP34 - RX10_TEMP25;

				//async(RX10_TEMP33)
					{

					final int RX10_TEMP37 = RX10_TEMP35+1;


					final double[] RX10_TEMP38 = new double/*NewUpdatableArray*/[RX10_TEMP37];
/*arrayInitBlock*/
for(int RX10_TEMP36= 0;RX10_TEMP36 <RX10_TEMP38.length ;RX10_TEMP36++ )						{

						final double X10_TEMP37 = 0.0;

						RX10_TEMP38[RX10_TEMP36] =X10_TEMP37;
						}

;


					final doubleStub RX10_TEMP39 = new doubleStub(RX10_TEMP38,RX10_TEMP33);
					
Program.globalPointerHashMap.get(RX10_TEMP33).add(RX10_TEMP39.hashCode());

					//async(RX10_TEMP31)
						{
						RX10_TEMP29[RX10_TEMP30] = RX10_TEMP39;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP40 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP27]);
/*arrayInitBlock*/
for(int RX10_TEMP42= 0;RX10_TEMP42 <RX10_TEMP40.length ;RX10_TEMP42++ )			{

			final doubleStub RX10_TEMP41 = RX10_TEMP29[RX10_TEMP42];

			RX10_TEMP40[RX10_TEMP42] =RX10_TEMP41;
			}

;


		final doubleRefArray3 RX10_TEMP43 = new doubleRefArray3(dBuffer, RX10_TEMP40,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP43.hashCode());


		final doubleRefArray3 dstBuffer = RX10_TEMP43;


		final Region1 RX10_TEMP44 = dUnique.dReg;


		final int RX10_TEMP45 = 0;


		final int RX10_TEMP46 = 1;


		int RX10_TEMP47 = 1;


		RX10_TEMP47 = RX10_TEMP47 - RX10_TEMP46;


		final int  RX10_TEMP48 = RX10_TEMP47+1;


		final int RX10_TEMP49 = RX10_TEMP47+1;


		final intStub[] RX10_TEMP50 = new intStub[RX10_TEMP49];

		/*FINISH
*/			{
			for(int RX10_TEMP51=0; RX10_TEMP51 < RX10_TEMP48; RX10_TEMP51++)
				{

				final int RX10_TEMP52 = 0;


				final int RX10_TEMP53 = RX10_TEMP51;


				final int RX10_TEMP54 = 0;


				final int RX10_TEMP55 = Program.getDistLocalCount1(dUnique, RX10_TEMP53,myUniquePlacePoint);


				final int RX10_TEMP56 = RX10_TEMP55 - RX10_TEMP46;

				//async(RX10_TEMP54)
					{

					final int RX10_TEMP58 = RX10_TEMP56+1;


					final int[] RX10_TEMP59 = new int/*NewUpdatableArray*/[RX10_TEMP58];
/*arrayInitBlock*/
for(int RX10_TEMP57= 0;RX10_TEMP57 <RX10_TEMP59.length ;RX10_TEMP57++ )						{

						final int X10_TEMP40 = 0;

						RX10_TEMP59[RX10_TEMP57] =X10_TEMP40;
						}

;


					final intStub RX10_TEMP60 = new intStub(RX10_TEMP59,RX10_TEMP54);
					
Program.globalPointerHashMap.get(RX10_TEMP54).add(RX10_TEMP60.hashCode());

					//async(RX10_TEMP52)
						{
						RX10_TEMP50[RX10_TEMP51] = RX10_TEMP60;
						}
					}
				}
			}

		final intStub[] RX10_TEMP61 = (intStub[])(new intStub/*value*/[RX10_TEMP48]);
/*arrayInitBlock*/
for(int RX10_TEMP63= 0;RX10_TEMP63 <RX10_TEMP61.length ;RX10_TEMP63++ )			{

			final intStub RX10_TEMP62 = RX10_TEMP50[RX10_TEMP63];

			RX10_TEMP61[RX10_TEMP63] =RX10_TEMP62;
			}

;


		final intRefArray1 RX10_TEMP64 = new intRefArray1(dUnique, RX10_TEMP61,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP64.hashCode());


		final intRefArray1 offsets = RX10_TEMP64;


		final Region1 RX10_TEMP65 = dUnique.dReg;


		final int RX10_TEMP66 = 0;


		final int RX10_TEMP67 = 1;


		int RX10_TEMP68 = 1;


		RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67;


		final int  RX10_TEMP69 = RX10_TEMP68+1;


		final int RX10_TEMP70 = RX10_TEMP68+1;


		final intStub[] RX10_TEMP71 = new intStub[RX10_TEMP70];

		/*FINISH
*/			{
			for(int RX10_TEMP72=0; RX10_TEMP72 < RX10_TEMP69; RX10_TEMP72++)
				{

				final int RX10_TEMP73 = 0;


				final int RX10_TEMP74 = RX10_TEMP72;


				final int RX10_TEMP75 = 0;


				final int RX10_TEMP76 = Program.getDistLocalCount1(dUnique, RX10_TEMP74,myUniquePlacePoint);


				final int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67;

				//async(RX10_TEMP75)
					{

					final int RX10_TEMP79 = RX10_TEMP77+1;


					final int[] RX10_TEMP80 = new int/*NewUpdatableArray*/[RX10_TEMP79];
/*arrayInitBlock*/
for(int RX10_TEMP78= 0;RX10_TEMP78 <RX10_TEMP80.length ;RX10_TEMP78++ )						{

						final int X10_TEMP43 = 0;

						RX10_TEMP80[RX10_TEMP78] =X10_TEMP43;
						}

;


					final intStub RX10_TEMP81 = new intStub(RX10_TEMP80,RX10_TEMP75);
					
Program.globalPointerHashMap.get(RX10_TEMP75).add(RX10_TEMP81.hashCode());

					//async(RX10_TEMP73)
						{
						RX10_TEMP71[RX10_TEMP72] = RX10_TEMP81;
						}
					}
				}
			}

		final intStub[] RX10_TEMP82 = (intStub[])(new intStub/*value*/[RX10_TEMP69]);
/*arrayInitBlock*/
for(int RX10_TEMP84= 0;RX10_TEMP84 <RX10_TEMP82.length ;RX10_TEMP84++ )			{

			final intStub RX10_TEMP83 = RX10_TEMP71[RX10_TEMP84];

			RX10_TEMP82[RX10_TEMP84] =RX10_TEMP83;
			}

;


		final intRefArray1 RX10_TEMP85 = new intRefArray1(dUnique, RX10_TEMP82,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP85.hashCode());


		final intRefArray1 sizes = RX10_TEMP85;


		final Region1 RX10_TEMP86 = dUnique.dReg;


		final int RX10_TEMP87 = 0;


		final int RX10_TEMP88 = 1;


		int RX10_TEMP89 = 1;


		RX10_TEMP89 = RX10_TEMP89 - RX10_TEMP88;


		final int  RX10_TEMP90 = RX10_TEMP89+1;


		final int RX10_TEMP91 = RX10_TEMP89+1;


		final intStub[] RX10_TEMP92 = new intStub[RX10_TEMP91];

		/*FINISH
*/			{
			for(int RX10_TEMP93=0; RX10_TEMP93 < RX10_TEMP90; RX10_TEMP93++)
				{

				final int RX10_TEMP94 = 0;


				final int RX10_TEMP95 = RX10_TEMP93;


				final int RX10_TEMP96 = 0;


				final int RX10_TEMP97 = Program.getDistLocalCount1(dUnique, RX10_TEMP95,myUniquePlacePoint);


				final int RX10_TEMP98 = RX10_TEMP97 - RX10_TEMP88;

				//async(RX10_TEMP96)
					{

					final int RX10_TEMP100 = RX10_TEMP98+1;


					final int[] RX10_TEMP101 = new int/*NewUpdatableArray*/[RX10_TEMP100];
/*arrayInitBlock*/
for(int RX10_TEMP99= 0;RX10_TEMP99 <RX10_TEMP101.length ;RX10_TEMP99++ )						{

						final int X10_TEMP46 = 0;

						RX10_TEMP101[RX10_TEMP99] =X10_TEMP46;
						}

;


					final intStub RX10_TEMP102 = new intStub(RX10_TEMP101,RX10_TEMP96);
					
Program.globalPointerHashMap.get(RX10_TEMP96).add(RX10_TEMP102.hashCode());

					//async(RX10_TEMP94)
						{
						RX10_TEMP92[RX10_TEMP93] = RX10_TEMP102;
						}
					}
				}
			}

		final intStub[] RX10_TEMP103 = (intStub[])(new intStub/*value*/[RX10_TEMP90]);
/*arrayInitBlock*/
for(int RX10_TEMP105= 0;RX10_TEMP105 <RX10_TEMP103.length ;RX10_TEMP105++ )			{

			final intStub RX10_TEMP104 = RX10_TEMP92[RX10_TEMP105];

			RX10_TEMP103[RX10_TEMP105] =RX10_TEMP104;
			}

;


		final intRefArray1 RX10_TEMP106 = new intRefArray1(dUnique, RX10_TEMP103,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP106.hashCode());


		final intRefArray1 inLt = RX10_TEMP106;


		final Region1 RX10_TEMP107 = dUnique.dReg;


		final int RX10_TEMP108 = 0;


		final int RX10_TEMP109 = 1;


		int RX10_TEMP110 = 1;


		RX10_TEMP110 = RX10_TEMP110 - RX10_TEMP109;


		final int  RX10_TEMP111 = RX10_TEMP110+1;


		final int RX10_TEMP112 = RX10_TEMP110+1;


		final intStub[] RX10_TEMP113 = new intStub[RX10_TEMP112];

		/*FINISH
*/			{
			for(int RX10_TEMP114=0; RX10_TEMP114 < RX10_TEMP111; RX10_TEMP114++)
				{

				final int RX10_TEMP115 = 0;


				final int RX10_TEMP116 = RX10_TEMP114;


				final int RX10_TEMP117 = 0;


				final int RX10_TEMP118 = Program.getDistLocalCount1(dUnique, RX10_TEMP116,myUniquePlacePoint);


				final int RX10_TEMP119 = RX10_TEMP118 - RX10_TEMP109;

				//async(RX10_TEMP117)
					{

					final int RX10_TEMP121 = RX10_TEMP119+1;


					final int[] RX10_TEMP122 = new int/*NewUpdatableArray*/[RX10_TEMP121];
/*arrayInitBlock*/
for(int RX10_TEMP120= 0;RX10_TEMP120 <RX10_TEMP122.length ;RX10_TEMP120++ )						{

						final int X10_TEMP49 = 0;

						RX10_TEMP122[RX10_TEMP120] =X10_TEMP49;
						}

;


					final intStub RX10_TEMP123 = new intStub(RX10_TEMP122,RX10_TEMP117);
					
Program.globalPointerHashMap.get(RX10_TEMP117).add(RX10_TEMP123.hashCode());

					//async(RX10_TEMP115)
						{
						RX10_TEMP113[RX10_TEMP114] = RX10_TEMP123;
						}
					}
				}
			}

		final intStub[] RX10_TEMP124 = (intStub[])(new intStub/*value*/[RX10_TEMP111]);
/*arrayInitBlock*/
for(int RX10_TEMP126= 0;RX10_TEMP126 <RX10_TEMP124.length ;RX10_TEMP126++ )			{

			final intStub RX10_TEMP125 = RX10_TEMP113[RX10_TEMP126];

			RX10_TEMP124[RX10_TEMP126] =RX10_TEMP125;
			}

;


		final intRefArray1 RX10_TEMP127 = new intRefArray1(dUnique, RX10_TEMP124,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP127.hashCode());


		final intRefArray1 inRt = RX10_TEMP127;


		final Region1 RX10_TEMP128 = dUnique.dReg;


		final int RX10_TEMP129 = 0;


		final int RX10_TEMP130 = 1;


		int RX10_TEMP131 = 1;


		RX10_TEMP131 = RX10_TEMP131 - RX10_TEMP130;


		final int  RX10_TEMP132 = RX10_TEMP131+1;


		final int RX10_TEMP133 = RX10_TEMP131+1;


		final intStub[] RX10_TEMP134 = new intStub[RX10_TEMP133];

		/*FINISH
*/			{
			for(int RX10_TEMP135=0; RX10_TEMP135 < RX10_TEMP132; RX10_TEMP135++)
				{

				final int RX10_TEMP136 = 0;


				final int RX10_TEMP137 = RX10_TEMP135;


				final int RX10_TEMP138 = 0;


				final int RX10_TEMP139 = Program.getDistLocalCount1(dUnique, RX10_TEMP137,myUniquePlacePoint);


				final int RX10_TEMP140 = RX10_TEMP139 - RX10_TEMP130;

				//async(RX10_TEMP138)
					{

					final int RX10_TEMP142 = RX10_TEMP140+1;


					final int[] RX10_TEMP143 = new int/*NewUpdatableArray*/[RX10_TEMP142];
/*arrayInitBlock*/
for(int RX10_TEMP141= 0;RX10_TEMP141 <RX10_TEMP143.length ;RX10_TEMP141++ )						{

						final int X10_TEMP52 = 0;

						RX10_TEMP143[RX10_TEMP141] =X10_TEMP52;
						}

;


					final intStub RX10_TEMP144 = new intStub(RX10_TEMP143,RX10_TEMP138);
					
Program.globalPointerHashMap.get(RX10_TEMP138).add(RX10_TEMP144.hashCode());

					//async(RX10_TEMP136)
						{
						RX10_TEMP134[RX10_TEMP135] = RX10_TEMP144;
						}
					}
				}
			}

		final intStub[] RX10_TEMP145 = (intStub[])(new intStub/*value*/[RX10_TEMP132]);
/*arrayInitBlock*/
for(int RX10_TEMP147= 0;RX10_TEMP147 <RX10_TEMP145.length ;RX10_TEMP147++ )			{

			final intStub RX10_TEMP146 = RX10_TEMP134[RX10_TEMP147];

			RX10_TEMP145[RX10_TEMP147] =RX10_TEMP146;
			}

;


		final intRefArray1 RX10_TEMP148 = new intRefArray1(dUnique, RX10_TEMP145,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP148.hashCode());


		final intRefArray1 outLt = RX10_TEMP148;


		final Region1 RX10_TEMP149 = dUnique.dReg;


		final int RX10_TEMP150 = 0;


		final int RX10_TEMP151 = 1;


		int RX10_TEMP152 = 1;


		RX10_TEMP152 = RX10_TEMP152 - RX10_TEMP151;


		final int  RX10_TEMP153 = RX10_TEMP152+1;


		final int RX10_TEMP154 = RX10_TEMP152+1;


		final intStub[] RX10_TEMP155 = new intStub[RX10_TEMP154];

		/*FINISH
*/			{
			for(int RX10_TEMP156=0; RX10_TEMP156 < RX10_TEMP153; RX10_TEMP156++)
				{

				final int RX10_TEMP157 = 0;


				final int RX10_TEMP158 = RX10_TEMP156;


				final int RX10_TEMP159 = 0;


				final int RX10_TEMP160 = Program.getDistLocalCount1(dUnique, RX10_TEMP158,myUniquePlacePoint);


				final int RX10_TEMP161 = RX10_TEMP160 - RX10_TEMP151;

				//async(RX10_TEMP159)
					{

					final int RX10_TEMP163 = RX10_TEMP161+1;


					final int[] RX10_TEMP164 = new int/*NewUpdatableArray*/[RX10_TEMP163];
/*arrayInitBlock*/
for(int RX10_TEMP162= 0;RX10_TEMP162 <RX10_TEMP164.length ;RX10_TEMP162++ )						{

						final int X10_TEMP55 = 0;

						RX10_TEMP164[RX10_TEMP162] =X10_TEMP55;
						}

;


					final intStub RX10_TEMP165 = new intStub(RX10_TEMP164,RX10_TEMP159);
					
Program.globalPointerHashMap.get(RX10_TEMP159).add(RX10_TEMP165.hashCode());

					//async(RX10_TEMP157)
						{
						RX10_TEMP155[RX10_TEMP156] = RX10_TEMP165;
						}
					}
				}
			}

		final intStub[] RX10_TEMP166 = (intStub[])(new intStub/*value*/[RX10_TEMP153]);
/*arrayInitBlock*/
for(int RX10_TEMP168= 0;RX10_TEMP168 <RX10_TEMP166.length ;RX10_TEMP168++ )			{

			final intStub RX10_TEMP167 = RX10_TEMP155[RX10_TEMP168];

			RX10_TEMP166[RX10_TEMP168] =RX10_TEMP167;
			}

;


		final intRefArray1 RX10_TEMP169 = new intRefArray1(dUnique, RX10_TEMP166,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP169.hashCode());


		final intRefArray1 outRt = RX10_TEMP169;

		/*FINISH
*/			{

			final Dist1 X10_TEMP58 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP171 = X10_TEMP58.dReg;


			final int RX10_TEMP174 = 1;


			int RX10_TEMP172 = RX10_TEMP171.regSize;


			RX10_TEMP172 = RX10_TEMP172 - RX10_TEMP174;


			final int  RX10_TEMP173 = RX10_TEMP172+1;

			for(int RX10_TEMP170=0; RX10_TEMP170 < RX10_TEMP173; RX10_TEMP170++)
				{

				final int RX10_TEMP175 = RX10_TEMP170;


				final Point1 X10_TEMP59 = Program.regionOrdinalPoint1(RX10_TEMP171, RX10_TEMP175,myUniquePlacePoint);


				final int pl = X10_TEMP59.f0;


				final Region1 RX10_TEMP176 = X10_TEMP58.dReg;


				final int RX10_TEMP177 = Program.searchPointInRegion1(RX10_TEMP176, X10_TEMP59,myUniquePlacePoint);


				final int RX10_TEMP178 = 0;


				final boolean RX10_TEMP179 = RX10_TEMP177 < RX10_TEMP178;

				if(RX10_TEMP179)
					{

					final String RX10_TEMP180 = "Point X10_TEMP59 not found in the distribution X10_TEMP58.";

					throw new RuntimeException(RX10_TEMP180);

					}

				final int RX10_TEMP181 = Program.getPlaceFromDist1(X10_TEMP58, RX10_TEMP177,myUniquePlacePoint);


				final int X10_TEMP60 = RX10_TEMP181;

				//async(X10_TEMP60)
					{

					final Dist2 RX10_TEMP182 = data.distValue;


					final Dist2 dData = RX10_TEMP182;


					final Region2 rLocal = Program.X10Util_get2DLRegion(dData,X10_TEMP60);


					final int X10_TEMP66 = 0;


					final Region1 rLocal1 = Program.X10Util_getRank2D(rLocal, X10_TEMP66,X10_TEMP60);


					final int X10_TEMP68 = rLocal1.regSize;


					final int X10_TEMP69 = 0;


					final boolean X10_TEMP70 = X10_TEMP68 == X10_TEMP69;


					final boolean X10_TEMP72 = _X10Util_ENABLE_CHECKS && X10_TEMP70;

					if(X10_TEMP72)
						{

						final String X10_TEMP74 = "Region empty -- should not happen";

						throw new RuntimeException(X10_TEMP74);

						}

					final int RX10_TEMP183 = rLocal1.regSize;


					final int RX10_TEMP184 = 0;


					final boolean RX10_TEMP185 = RX10_TEMP183 <= RX10_TEMP184;

					if(RX10_TEMP185)
						{

						final String RX10_TEMP186 = "Operation low() not defined on empty region rLocal1";

						throw new RuntimeException(RX10_TEMP186);

						}

					final int offset = Program.regionLow(rLocal1,X10_TEMP60);


					final int X10_TEMP77 = 0;


					final int RX10_TEMP191 = 1;


					int RX10_TEMP189 = rLocal.regSize;


					RX10_TEMP189 = RX10_TEMP189 - RX10_TEMP191;


					final int  RX10_TEMP190 = RX10_TEMP189+1;

					for(int RX10_TEMP187=0; RX10_TEMP187 < RX10_TEMP190; RX10_TEMP187++)
						{

						final int RX10_TEMP192 = RX10_TEMP187;


						final Point2 RX10_TEMP188 = Program.regionOrdinalPoint2(rLocal, RX10_TEMP192,X10_TEMP60);


						final int i = RX10_TEMP188.f0;


						final int j = RX10_TEMP188.f1;

						//async(X10_TEMP77)
							{

							final int X10_TEMP81 = i - offset;


							final Point2 RX10_TEMP193 = new Point2(i, j,X10_TEMP77);
							
Program.globalPointerHashMap.get(X10_TEMP77).add(RX10_TEMP193.hashCode());


							final Dist2 RX10_TEMP194 = data.distValue;


							final Region2 RX10_TEMP195 = RX10_TEMP194.dReg;


							final int RX10_TEMP196 = Program.searchPointInRegion2(RX10_TEMP195, RX10_TEMP193,X10_TEMP77);


							final int RX10_TEMP197 = 0;


							final boolean RX10_TEMP198 = RX10_TEMP196 < RX10_TEMP197;

							if(RX10_TEMP198)
								{

								String RX10_TEMP199 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP199);

								}

							final int RX10_TEMP200 = Program.getPlaceFromDist2(RX10_TEMP194, RX10_TEMP196,X10_TEMP77);


							final int RX10_TEMP202 = 0;


							final boolean RX10_TEMP203 = RX10_TEMP200 != RX10_TEMP202;

							if(RX10_TEMP203)
								{

								String RX10_TEMP201 = "Bad place access for array data";

								throw new RuntimeException(RX10_TEMP201);

								}

							final double RX10_TEMP204 = Program.getRefArrayValue2double(data, RX10_TEMP196,X10_TEMP77);


							final double X10_TEMP86 = RX10_TEMP204;


							final double X10_TEMP87 = X10_TEMP86;


							final Point3 RX10_TEMP205 = new Point3(pl, X10_TEMP81, j,X10_TEMP77);
							
Program.globalPointerHashMap.get(X10_TEMP77).add(RX10_TEMP205.hashCode());


							final Dist3 RX10_TEMP206 = srcBuffer.distValue;


							final Region3 RX10_TEMP207 = RX10_TEMP206.dReg;


							final int RX10_TEMP208 = Program.searchPointInRegion3(RX10_TEMP207, RX10_TEMP205,X10_TEMP77);


							final int RX10_TEMP209 = 0;


							final boolean RX10_TEMP210 = RX10_TEMP208 < RX10_TEMP209;

							if(RX10_TEMP210)
								{

								String RX10_TEMP211 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP211);

								}

							final int RX10_TEMP212 = Program.getPlaceFromDist3(RX10_TEMP206, RX10_TEMP208,X10_TEMP77);


							final int RX10_TEMP214 = 0;


							final boolean RX10_TEMP215 = RX10_TEMP212 != RX10_TEMP214;

							if(RX10_TEMP215)
								{

								String RX10_TEMP213 = "Bad place access for array srcBuffer";

								throw new RuntimeException(RX10_TEMP213);

								}
							Program.setRefArrayValue3double(srcBuffer, RX10_TEMP208, X10_TEMP87,X10_TEMP77);
							}
						}

					final int X10_TEMP91 = rLocal1.regSize;


					final int X10_TEMP92 = X10_TEMP91;


					final Point1 RX10_TEMP216 = new Point1(pl,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP216.hashCode());


					final Dist1 RX10_TEMP217 = sizes.distValue;


					final Region1 RX10_TEMP218 = RX10_TEMP217.dReg;


					final int RX10_TEMP219 = Program.searchPointInRegion1(RX10_TEMP218, RX10_TEMP216,myUniquePlacePoint);


					final int RX10_TEMP220 = 0;


					final boolean RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220;

					if(RX10_TEMP221)
						{

						String RX10_TEMP222 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP222);

						}

					final int RX10_TEMP223 = Program.getPlaceFromDist1(RX10_TEMP217, RX10_TEMP219,myUniquePlacePoint);


					final int RX10_TEMP225 = 0;


					final boolean RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225;

					if(RX10_TEMP226)
						{

						String RX10_TEMP224 = "Bad place access for array sizes";

						throw new RuntimeException(RX10_TEMP224);

						}
					Program.setRefArrayValue1int(sizes, RX10_TEMP219, X10_TEMP92,myUniquePlacePoint);

					final int X10_TEMP96 = offset;


					final Point1 RX10_TEMP227 = new Point1(pl,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP227.hashCode());


					final Dist1 RX10_TEMP228 = offsets.distValue;


					final Region1 RX10_TEMP229 = RX10_TEMP228.dReg;


					final int RX10_TEMP230 = Program.searchPointInRegion1(RX10_TEMP229, RX10_TEMP227,myUniquePlacePoint);


					final int RX10_TEMP231 = 0;


					final boolean RX10_TEMP232 = RX10_TEMP230 < RX10_TEMP231;

					if(RX10_TEMP232)
						{

						String RX10_TEMP233 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP233);

						}

					final int RX10_TEMP234 = Program.getPlaceFromDist1(RX10_TEMP228, RX10_TEMP230,myUniquePlacePoint);


					final int RX10_TEMP236 = 0;


					final boolean RX10_TEMP237 = RX10_TEMP234 != RX10_TEMP236;

					if(RX10_TEMP237)
						{

						String RX10_TEMP235 = "Bad place access for array offsets";

						throw new RuntimeException(RX10_TEMP235);

						}
					Program.setRefArrayValue1int(offsets, RX10_TEMP230, X10_TEMP96,myUniquePlacePoint);
					}
				}
			}

		int mter = MAX_ITER;


		int iter = 0;


		boolean done = false;


		boolean X10_TEMP100 = false;

		do 			{
			/*FINISH
*/				{

				final Dist1 X10_TEMP102 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP239 = X10_TEMP102.dReg;


				final int RX10_TEMP242 = 1;


				int RX10_TEMP240 = RX10_TEMP239.regSize;


				RX10_TEMP240 = RX10_TEMP240 - RX10_TEMP242;


				final int  RX10_TEMP241 = RX10_TEMP240+1;

				for(int RX10_TEMP238=0; RX10_TEMP238 < RX10_TEMP241; RX10_TEMP238++)
					{

					final int RX10_TEMP243 = RX10_TEMP238;


					final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP239, RX10_TEMP243,myUniquePlacePoint);


					final Region1 RX10_TEMP244 = X10_TEMP102.dReg;


					final int RX10_TEMP245 = Program.searchPointInRegion1(RX10_TEMP244, pl,myUniquePlacePoint);


					final int RX10_TEMP246 = 0;


					final boolean RX10_TEMP247 = RX10_TEMP245 < RX10_TEMP246;

					if(RX10_TEMP247)
						{

						final String RX10_TEMP248 = "Point pl not found in the distribution X10_TEMP102.";

						throw new RuntimeException(RX10_TEMP248);

						}

					final int RX10_TEMP249 = Program.getPlaceFromDist1(X10_TEMP102, RX10_TEMP245,myUniquePlacePoint);


					final int X10_TEMP103 = RX10_TEMP249;

					//async(X10_TEMP103)
						{

						final Region2 rLocalD = Program.X10Util_get2DLRegion(dDst,X10_TEMP103);


						final int X10_TEMP108 = 0;


						final Region1 rLocalD1 = Program.X10Util_getRank2D(rLocalD, X10_TEMP108,X10_TEMP103);


						final int X10_TEMP110 = rLocalD1.regSize;


						final int X10_TEMP111 = 0;


						final boolean X10_TEMP112 = X10_TEMP110 == X10_TEMP111;


						final boolean X10_TEMP114 = _X10Util_ENABLE_CHECKS && X10_TEMP112;

						if(X10_TEMP114)
							{

							final String X10_TEMP115 = "Region empty -- ";


							final String X10_TEMP116 = "cannot to move grids";


							final String X10_TEMP118 = X10_TEMP115 + X10_TEMP116;

							throw new RuntimeException(X10_TEMP118);

							}

						final int X10_TEMP122 = 0;


						final int X10_TEMP123 = X10_TEMP122;


						final Dist1 RX10_TEMP250 = outLt.distValue;


						final Region1 RX10_TEMP251 = RX10_TEMP250.dReg;


						final int RX10_TEMP252 = Program.searchPointInRegion1(RX10_TEMP251, pl,X10_TEMP103);


						final int RX10_TEMP253 = 0;


						final boolean RX10_TEMP254 = RX10_TEMP252 < RX10_TEMP253;

						if(RX10_TEMP254)
							{

							String RX10_TEMP255 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP255);

							}

						final int RX10_TEMP256 = Program.getPlaceFromDist1(RX10_TEMP250, RX10_TEMP252,X10_TEMP103);


						final int RX10_TEMP258 = 0;


						final boolean RX10_TEMP259 = RX10_TEMP256 != RX10_TEMP258;

						if(RX10_TEMP259)
							{

							String RX10_TEMP257 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP257);

							}
						Program.setRefArrayValue1int(outLt, RX10_TEMP252, X10_TEMP123,X10_TEMP103);

						final int X10_TEMP127 = 0;


						final int X10_TEMP128 = X10_TEMP127;


						final Dist1 RX10_TEMP260 = outRt.distValue;


						final Region1 RX10_TEMP261 = RX10_TEMP260.dReg;


						final int RX10_TEMP262 = Program.searchPointInRegion1(RX10_TEMP261, pl,X10_TEMP103);


						final int RX10_TEMP263 = 0;


						final boolean RX10_TEMP264 = RX10_TEMP262 < RX10_TEMP263;

						if(RX10_TEMP264)
							{

							String RX10_TEMP265 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP265);

							}

						final int RX10_TEMP266 = Program.getPlaceFromDist1(RX10_TEMP260, RX10_TEMP262,X10_TEMP103);


						final int RX10_TEMP268 = 0;


						final boolean RX10_TEMP269 = RX10_TEMP266 != RX10_TEMP268;

						if(RX10_TEMP269)
							{

							String RX10_TEMP267 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP267);

							}
						Program.setRefArrayValue1int(outRt, RX10_TEMP262, X10_TEMP128,X10_TEMP103);

						final int RX10_TEMP270 = rLocalD1.regSize;


						final int RX10_TEMP271 = 0;


						final boolean RX10_TEMP272 = RX10_TEMP270 <= RX10_TEMP271;

						if(RX10_TEMP272)
							{

							final String RX10_TEMP273 = "Operation low() not defined on empty region rLocalD1";

							throw new RuntimeException(RX10_TEMP273);

							}

						final int lBorder = Program.regionLow(rLocalD1,X10_TEMP103);


						final int RX10_TEMP274 = rLocalD1.regSize;


						final int RX10_TEMP275 = 0;


						final boolean RX10_TEMP276 = RX10_TEMP274 <= RX10_TEMP275;

						if(RX10_TEMP276)
							{

							final String RX10_TEMP277 = "Operation high() not defined on empty region rLocalD1";

							throw new RuntimeException(RX10_TEMP277);

							}

						final int X10_TEMP130 = Program.regionHigh(rLocalD1,X10_TEMP103);


						final int X10_TEMP131 = 1;


						final int rBorder = X10_TEMP130 + X10_TEMP131;


						final int X10_TEMP138 = 0;


						final Dist1 RX10_TEMP278 = sizes.distValue;


						final Region1 RX10_TEMP279 = RX10_TEMP278.dReg;


						final int RX10_TEMP280 = Program.searchPointInRegion1(RX10_TEMP279, pl,X10_TEMP103);


						final int RX10_TEMP281 = 0;


						final boolean RX10_TEMP282 = RX10_TEMP280 < RX10_TEMP281;

						if(RX10_TEMP282)
							{

							String RX10_TEMP283 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP283);

							}

						final int RX10_TEMP284 = Program.getPlaceFromDist1(RX10_TEMP278, RX10_TEMP280,X10_TEMP103);


						final int RX10_TEMP286 = 0;


						final boolean RX10_TEMP287 = RX10_TEMP284 != RX10_TEMP286;

						if(RX10_TEMP287)
							{

							String RX10_TEMP285 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP285);

							}

						final int RX10_TEMP288 = Program.getRefArrayValue1int(sizes, RX10_TEMP280,X10_TEMP103);


						final int X10_TEMP135 = RX10_TEMP288;


						final int X10_TEMP136 = 1;


						final int X10_TEMP139 = X10_TEMP135 - X10_TEMP136;


						final Region1 X10_TEMP141 = Program.createNewRegion1R(X10_TEMP138, X10_TEMP139,X10_TEMP103);


						final int RX10_TEMP293 = 1;


						int RX10_TEMP291 = X10_TEMP141.regSize;


						RX10_TEMP291 = RX10_TEMP291 - RX10_TEMP293;


						final int  RX10_TEMP292 = RX10_TEMP291+1;

						for(int RX10_TEMP289=0; RX10_TEMP289 < RX10_TEMP292; RX10_TEMP289++)
							{

							final int RX10_TEMP294 = RX10_TEMP289;


							final Point1 RX10_TEMP290 = Program.regionOrdinalPoint1(X10_TEMP141, RX10_TEMP294,X10_TEMP103);


							final int i1 = RX10_TEMP290.f0;


							final Dist1 RX10_TEMP295 = offsets.distValue;


							final Region1 RX10_TEMP296 = RX10_TEMP295.dReg;


							final int RX10_TEMP297 = Program.searchPointInRegion1(RX10_TEMP296, pl,X10_TEMP103);


							final int RX10_TEMP298 = 0;


							final boolean RX10_TEMP299 = RX10_TEMP297 < RX10_TEMP298;

							if(RX10_TEMP299)
								{

								String RX10_TEMP300 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP300);

								}

							final int RX10_TEMP301 = Program.getPlaceFromDist1(RX10_TEMP295, RX10_TEMP297,X10_TEMP103);


							final int RX10_TEMP303 = 0;


							final boolean RX10_TEMP304 = RX10_TEMP301 != RX10_TEMP303;

							if(RX10_TEMP304)
								{

								String RX10_TEMP302 = "Bad place access for array offsets";

								throw new RuntimeException(RX10_TEMP302);

								}

							final int RX10_TEMP305 = Program.getRefArrayValue1int(offsets, RX10_TEMP297,X10_TEMP103);


							final int X10_TEMP143 = RX10_TEMP305;


							final int i2 = i1 + X10_TEMP143;


							final boolean X10_TEMP146 = i2 >= rBorder;

							if(X10_TEMP146)
								{

								final Dist1 RX10_TEMP306 = outRt.distValue;


								final Region1 RX10_TEMP307 = RX10_TEMP306.dReg;


								final int RX10_TEMP308 = Program.searchPointInRegion1(RX10_TEMP307, pl,X10_TEMP103);


								final int RX10_TEMP309 = 0;


								final boolean RX10_TEMP310 = RX10_TEMP308 < RX10_TEMP309;

								if(RX10_TEMP310)
									{

									String RX10_TEMP311 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP311);

									}

								final int RX10_TEMP312 = Program.getPlaceFromDist1(RX10_TEMP306, RX10_TEMP308,X10_TEMP103);


								final int RX10_TEMP314 = 0;


								final boolean RX10_TEMP315 = RX10_TEMP312 != RX10_TEMP314;

								if(RX10_TEMP315)
									{

									String RX10_TEMP313 = "Bad place access for array outRt";

									throw new RuntimeException(RX10_TEMP313);

									}

								final int RX10_TEMP316 = Program.getRefArrayValue1int(outRt, RX10_TEMP308,X10_TEMP103);


								final int X10_TEMP149 = RX10_TEMP316;


								final int X10_TEMP150 = 1;


								final int X10_TEMP153 = X10_TEMP149 + X10_TEMP150;


								final int X10_TEMP154 = X10_TEMP153;


								final Dist1 RX10_TEMP317 = outRt.distValue;


								final Region1 RX10_TEMP318 = RX10_TEMP317.dReg;


								final int RX10_TEMP319 = Program.searchPointInRegion1(RX10_TEMP318, pl,X10_TEMP103);


								final int RX10_TEMP320 = 0;


								final boolean RX10_TEMP321 = RX10_TEMP319 < RX10_TEMP320;

								if(RX10_TEMP321)
									{

									String RX10_TEMP322 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP322);

									}

								final int RX10_TEMP323 = Program.getPlaceFromDist1(RX10_TEMP317, RX10_TEMP319,X10_TEMP103);


								final int RX10_TEMP325 = 0;


								final boolean RX10_TEMP326 = RX10_TEMP323 != RX10_TEMP325;

								if(RX10_TEMP326)
									{

									String RX10_TEMP324 = "Bad place access for array outRt";

									throw new RuntimeException(RX10_TEMP324);

									}
								Program.setRefArrayValue1int(outRt, RX10_TEMP319, X10_TEMP154,X10_TEMP103);
								}
							else
								{

								final boolean X10_TEMP156 = i2 < lBorder;

								if(X10_TEMP156)
									{

									final Dist1 RX10_TEMP327 = outLt.distValue;


									final Region1 RX10_TEMP328 = RX10_TEMP327.dReg;


									final int RX10_TEMP329 = Program.searchPointInRegion1(RX10_TEMP328, pl,X10_TEMP103);


									final int RX10_TEMP330 = 0;


									final boolean RX10_TEMP331 = RX10_TEMP329 < RX10_TEMP330;

									if(RX10_TEMP331)
										{

										String RX10_TEMP332 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP332);

										}

									final int RX10_TEMP333 = Program.getPlaceFromDist1(RX10_TEMP327, RX10_TEMP329,X10_TEMP103);


									final int RX10_TEMP335 = 0;


									final boolean RX10_TEMP336 = RX10_TEMP333 != RX10_TEMP335;

									if(RX10_TEMP336)
										{

										String RX10_TEMP334 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP334);

										}

									final int RX10_TEMP337 = Program.getRefArrayValue1int(outLt, RX10_TEMP329,X10_TEMP103);


									final int X10_TEMP159 = RX10_TEMP337;


									final int X10_TEMP160 = 1;


									final int X10_TEMP163 = X10_TEMP159 + X10_TEMP160;


									final int X10_TEMP164 = X10_TEMP163;


									final Dist1 RX10_TEMP338 = outLt.distValue;


									final Region1 RX10_TEMP339 = RX10_TEMP338.dReg;


									final int RX10_TEMP340 = Program.searchPointInRegion1(RX10_TEMP339, pl,X10_TEMP103);


									final int RX10_TEMP341 = 0;


									final boolean RX10_TEMP342 = RX10_TEMP340 < RX10_TEMP341;

									if(RX10_TEMP342)
										{

										String RX10_TEMP343 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP343);

										}

									final int RX10_TEMP344 = Program.getPlaceFromDist1(RX10_TEMP338, RX10_TEMP340,X10_TEMP103);


									final int RX10_TEMP346 = 0;


									final boolean RX10_TEMP347 = RX10_TEMP344 != RX10_TEMP346;

									if(RX10_TEMP347)
										{

										String RX10_TEMP345 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP345);

										}
									Program.setRefArrayValue1int(outLt, RX10_TEMP340, X10_TEMP164,X10_TEMP103);
									}
								}
 							}
						}
					}
				}

			final int X10_TEMP165 = iter;


			final int X10_TEMP166 = 1;


			iter = iter + X10_TEMP166;


			final Region1 RX10_TEMP348 = dUnique.dReg;


			final int RX10_TEMP349 = 0;


			final int RX10_TEMP350 = 1;


			int RX10_TEMP351 = 1;


			RX10_TEMP351 = RX10_TEMP351 - RX10_TEMP350;


			final int  RX10_TEMP352 = RX10_TEMP351+1;


			final int RX10_TEMP353 = RX10_TEMP351+1;


			final intStub[] RX10_TEMP354 = new intStub[RX10_TEMP353];

			/*FINISH
*/				{
				for(int RX10_TEMP355=0; RX10_TEMP355 < RX10_TEMP352; RX10_TEMP355++)
					{

					final int RX10_TEMP356 = 0;


					final int RX10_TEMP357 = RX10_TEMP355;


					final int RX10_TEMP358 = 0;


					final int RX10_TEMP359 = Program.getDistLocalCount1(dUnique, RX10_TEMP357,myUniquePlacePoint);


					final int RX10_TEMP360 = RX10_TEMP359 - RX10_TEMP350;

					//async(RX10_TEMP358)
						{

						final int RX10_TEMP362 = RX10_TEMP360+1;


						final int[] RX10_TEMP363 = new int/*NewUpdatableArray*/[RX10_TEMP362];
/*arrayInitBlock*/
for(int RX10_TEMP361= 0;RX10_TEMP361 <RX10_TEMP363.length ;RX10_TEMP361++ )							{

							final int X10_TEMP168 = 0;

							RX10_TEMP363[RX10_TEMP361] =X10_TEMP168;
							}

;


						final intStub RX10_TEMP364 = new intStub(RX10_TEMP363,RX10_TEMP358);
						
Program.globalPointerHashMap.get(RX10_TEMP358).add(RX10_TEMP364.hashCode());

						//async(RX10_TEMP356)
							{
							RX10_TEMP354[RX10_TEMP355] = RX10_TEMP364;
							}
						}
					}
				}

			final intStub[] RX10_TEMP365 = (intStub[])(new intStub/*value*/[RX10_TEMP352]);
/*arrayInitBlock*/
for(int RX10_TEMP367= 0;RX10_TEMP367 <RX10_TEMP365.length ;RX10_TEMP367++ )				{

				final intStub RX10_TEMP366 = RX10_TEMP354[RX10_TEMP367];

				RX10_TEMP365[RX10_TEMP367] =RX10_TEMP366;
				}

;


			final intRefArray1 RX10_TEMP368 = new intRefArray1(dUnique, RX10_TEMP365,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP368.hashCode());


			final intRefArray1 pr = RX10_TEMP368;


			final Region1 RX10_TEMP369 = dUnique.dReg;


			final int RX10_TEMP370 = 0;


			final int RX10_TEMP371 = 1;


			int RX10_TEMP372 = 1;


			RX10_TEMP372 = RX10_TEMP372 - RX10_TEMP371;


			final int  RX10_TEMP373 = RX10_TEMP372+1;


			final int RX10_TEMP374 = RX10_TEMP372+1;


			final intStub[] RX10_TEMP375 = new intStub[RX10_TEMP374];

			/*FINISH
*/				{
				for(int RX10_TEMP376=0; RX10_TEMP376 < RX10_TEMP373; RX10_TEMP376++)
					{

					final int RX10_TEMP377 = 0;


					final int RX10_TEMP378 = RX10_TEMP376;


					final int RX10_TEMP379 = 0;


					final int RX10_TEMP380 = Program.getDistLocalCount1(dUnique, RX10_TEMP378,myUniquePlacePoint);


					final int RX10_TEMP381 = RX10_TEMP380 - RX10_TEMP371;

					//async(RX10_TEMP379)
						{

						final int RX10_TEMP383 = RX10_TEMP381+1;


						final int[] RX10_TEMP384 = new int/*NewUpdatableArray*/[RX10_TEMP383];
/*arrayInitBlock*/
for(int RX10_TEMP382= 0;RX10_TEMP382 <RX10_TEMP384.length ;RX10_TEMP382++ )							{

							final int X10_TEMP171 = 0;

							RX10_TEMP384[RX10_TEMP382] =X10_TEMP171;
							}

;


						final intStub RX10_TEMP385 = new intStub(RX10_TEMP384,RX10_TEMP379);
						
Program.globalPointerHashMap.get(RX10_TEMP379).add(RX10_TEMP385.hashCode());

						//async(RX10_TEMP377)
							{
							RX10_TEMP375[RX10_TEMP376] = RX10_TEMP385;
							}
						}
					}
				}

			final intStub[] RX10_TEMP386 = (intStub[])(new intStub/*value*/[RX10_TEMP373]);
/*arrayInitBlock*/
for(int RX10_TEMP388= 0;RX10_TEMP388 <RX10_TEMP386.length ;RX10_TEMP388++ )				{

				final intStub RX10_TEMP387 = RX10_TEMP375[RX10_TEMP388];

				RX10_TEMP386[RX10_TEMP388] =RX10_TEMP387;
				}

;


			final intRefArray1 RX10_TEMP389 = new intRefArray1(dUnique, RX10_TEMP386,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP389.hashCode());


			final intRefArray1 ter = RX10_TEMP389;

			/*FINISH
*/				{

				final Dist1 X10_TEMP174 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP391 = X10_TEMP174.dReg;


				final int RX10_TEMP394 = 1;


				int RX10_TEMP392 = RX10_TEMP391.regSize;


				RX10_TEMP392 = RX10_TEMP392 - RX10_TEMP394;


				final int  RX10_TEMP393 = RX10_TEMP392+1;

				for(int RX10_TEMP390=0; RX10_TEMP390 < RX10_TEMP393; RX10_TEMP390++)
					{

					final int RX10_TEMP395 = RX10_TEMP390;


					final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP391, RX10_TEMP395,myUniquePlacePoint);


					final Region1 RX10_TEMP396 = X10_TEMP174.dReg;


					final int RX10_TEMP397 = Program.searchPointInRegion1(RX10_TEMP396, pl,myUniquePlacePoint);


					final int RX10_TEMP398 = 0;


					final boolean RX10_TEMP399 = RX10_TEMP397 < RX10_TEMP398;

					if(RX10_TEMP399)
						{

						final String RX10_TEMP400 = "Point pl not found in the distribution X10_TEMP174.";

						throw new RuntimeException(RX10_TEMP400);

						}

					final int RX10_TEMP401 = Program.getPlaceFromDist1(X10_TEMP174, RX10_TEMP397,myUniquePlacePoint);


					final int X10_TEMP175 = RX10_TEMP401;

					//async(X10_TEMP175)
						{

						final int X10_TEMP179 = 0;


						final int X10_TEMP180 = X10_TEMP179;


						final Dist1 RX10_TEMP402 = inLt.distValue;


						final Region1 RX10_TEMP403 = RX10_TEMP402.dReg;


						final int RX10_TEMP404 = Program.searchPointInRegion1(RX10_TEMP403, pl,X10_TEMP175);


						final int RX10_TEMP405 = 0;


						final boolean RX10_TEMP406 = RX10_TEMP404 < RX10_TEMP405;

						if(RX10_TEMP406)
							{

							String RX10_TEMP407 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP407);

							}

						final int RX10_TEMP408 = Program.getPlaceFromDist1(RX10_TEMP402, RX10_TEMP404,X10_TEMP175);


						final int RX10_TEMP410 = 0;


						final boolean RX10_TEMP411 = RX10_TEMP408 != RX10_TEMP410;

						if(RX10_TEMP411)
							{

							String RX10_TEMP409 = "Bad place access for array inLt";

							throw new RuntimeException(RX10_TEMP409);

							}
						Program.setRefArrayValue1int(inLt, RX10_TEMP404, X10_TEMP180,X10_TEMP175);

						final int X10_TEMP184 = 0;


						final int X10_TEMP185 = X10_TEMP184;


						final Dist1 RX10_TEMP412 = inRt.distValue;


						final Region1 RX10_TEMP413 = RX10_TEMP412.dReg;


						final int RX10_TEMP414 = Program.searchPointInRegion1(RX10_TEMP413, pl,X10_TEMP175);


						final int RX10_TEMP415 = 0;


						final boolean RX10_TEMP416 = RX10_TEMP414 < RX10_TEMP415;

						if(RX10_TEMP416)
							{

							String RX10_TEMP417 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP417);

							}

						final int RX10_TEMP418 = Program.getPlaceFromDist1(RX10_TEMP412, RX10_TEMP414,X10_TEMP175);


						final int RX10_TEMP420 = 0;


						final boolean RX10_TEMP421 = RX10_TEMP418 != RX10_TEMP420;

						if(RX10_TEMP421)
							{

							String RX10_TEMP419 = "Bad place access for array inRt";

							throw new RuntimeException(RX10_TEMP419);

							}
						Program.setRefArrayValue1int(inRt, RX10_TEMP414, X10_TEMP185,X10_TEMP175);
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP187 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP423 = X10_TEMP187.dReg;


				final int RX10_TEMP426 = 1;


				int RX10_TEMP424 = RX10_TEMP423.regSize;


				RX10_TEMP424 = RX10_TEMP424 - RX10_TEMP426;


				final int  RX10_TEMP425 = RX10_TEMP424+1;

				for(int RX10_TEMP422=0; RX10_TEMP422 < RX10_TEMP425; RX10_TEMP422++)
					{

					final int RX10_TEMP427 = RX10_TEMP422;


					final Point1 X10_TEMP188 = Program.regionOrdinalPoint1(RX10_TEMP423, RX10_TEMP427,myUniquePlacePoint);


					final int pl = X10_TEMP188.f0;


					final Region1 RX10_TEMP428 = X10_TEMP187.dReg;


					final int RX10_TEMP429 = Program.searchPointInRegion1(RX10_TEMP428, X10_TEMP188,myUniquePlacePoint);


					final int RX10_TEMP430 = 0;


					final boolean RX10_TEMP431 = RX10_TEMP429 < RX10_TEMP430;

					if(RX10_TEMP431)
						{

						final String RX10_TEMP432 = "Point X10_TEMP188 not found in the distribution X10_TEMP187.";

						throw new RuntimeException(RX10_TEMP432);

						}

					final int RX10_TEMP433 = Program.getPlaceFromDist1(X10_TEMP187, RX10_TEMP429,myUniquePlacePoint);


					final int X10_TEMP189 = RX10_TEMP433;

					//async(X10_TEMP189)
						{

						final Point1 RX10_TEMP434 = new Point1(pl,X10_TEMP189);
						
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP434.hashCode());


						final Dist1 RX10_TEMP435 = outRt.distValue;


						final Region1 RX10_TEMP436 = RX10_TEMP435.dReg;


						final int RX10_TEMP437 = Program.searchPointInRegion1(RX10_TEMP436, RX10_TEMP434,X10_TEMP189);


						final int RX10_TEMP438 = 0;


						final boolean RX10_TEMP439 = RX10_TEMP437 < RX10_TEMP438;

						if(RX10_TEMP439)
							{

							String RX10_TEMP440 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP440);

							}

						final int RX10_TEMP441 = Program.getPlaceFromDist1(RX10_TEMP435, RX10_TEMP437,X10_TEMP189);


						final int RX10_TEMP443 = 0;


						final boolean RX10_TEMP444 = RX10_TEMP441 != RX10_TEMP443;

						if(RX10_TEMP444)
							{

							String RX10_TEMP442 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP442);

							}

						final int RX10_TEMP445 = Program.getRefArrayValue1int(outRt, RX10_TEMP437,X10_TEMP189);


						final int X10_TEMP191 = RX10_TEMP445;


						final int X10_TEMP192 = 0;


						final boolean X10_TEMP194 = X10_TEMP191 > X10_TEMP192;

						if(X10_TEMP194)
							{

							final Point1 RX10_TEMP446 = new Point1(pl,X10_TEMP189);
							
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP446.hashCode());


							final Dist1 RX10_TEMP447 = outRt.distValue;


							final Region1 RX10_TEMP448 = RX10_TEMP447.dReg;


							final int RX10_TEMP449 = Program.searchPointInRegion1(RX10_TEMP448, RX10_TEMP446,X10_TEMP189);


							final int RX10_TEMP450 = 0;


							final boolean RX10_TEMP451 = RX10_TEMP449 < RX10_TEMP450;

							if(RX10_TEMP451)
								{

								String RX10_TEMP452 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP452);

								}

							final int RX10_TEMP453 = Program.getPlaceFromDist1(RX10_TEMP447, RX10_TEMP449,X10_TEMP189);


							final int RX10_TEMP455 = 0;


							final boolean RX10_TEMP456 = RX10_TEMP453 != RX10_TEMP455;

							if(RX10_TEMP456)
								{

								String RX10_TEMP454 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP454);

								}

							final int RX10_TEMP457 = Program.getRefArrayValue1int(outRt, RX10_TEMP449,X10_TEMP189);


							final int bsize = RX10_TEMP457;


							final int X10_TEMP200 = 0;


							final int X10_TEMP198 = 1;


							final int X10_TEMP201 = bsize - X10_TEMP198;


							final Region2 rBuffer = Program.createNewRegion2RA(X10_TEMP200, X10_TEMP201, rRank2,X10_TEMP189);


							final Region2 RX10_TEMP458 = rBuffer;


							final int RX10_TEMP499 = rBuffer.regSize;


							final int RX10_TEMP500 = 1;


							final int RX10_TEMP501 = RX10_TEMP499 - RX10_TEMP500;


							final int  RX10_TEMP498 = RX10_TEMP501+1;


							final double[] RX10_TEMP502 = (double[])(new double/*value*/[RX10_TEMP498]);
/*arrayInitBlock*/
for(int RX10_TEMP459= 0;RX10_TEMP459 <RX10_TEMP502.length ;RX10_TEMP459++ )								{

								final int RX10_TEMP461 = RX10_TEMP459;


								final Point2 RX10_TEMP460 = Program.regionOrdinalPoint2(RX10_TEMP458, RX10_TEMP461,X10_TEMP189);


								final int i = RX10_TEMP460.f0;


								final int j = RX10_TEMP460.f1;


								final Point1 RX10_TEMP462 = new Point1(pl,X10_TEMP189);
								
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP462.hashCode());


								final Dist1 RX10_TEMP463 = sizes.distValue;


								final Region1 RX10_TEMP464 = RX10_TEMP463.dReg;


								final int RX10_TEMP465 = Program.searchPointInRegion1(RX10_TEMP464, RX10_TEMP462,X10_TEMP189);


								final int RX10_TEMP466 = 0;


								final boolean RX10_TEMP467 = RX10_TEMP465 < RX10_TEMP466;

								if(RX10_TEMP467)
									{

									String RX10_TEMP468 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP468);

									}

								final int RX10_TEMP469 = Program.getPlaceFromDist1(RX10_TEMP463, RX10_TEMP465,X10_TEMP189);


								final int RX10_TEMP471 = 0;


								final boolean RX10_TEMP472 = RX10_TEMP469 != RX10_TEMP471;

								if(RX10_TEMP472)
									{

									String RX10_TEMP470 = "Bad place access for array sizes";

									throw new RuntimeException(RX10_TEMP470);

									}

								final int RX10_TEMP473 = Program.getRefArrayValue1int(sizes, RX10_TEMP465,X10_TEMP189);


								final int X10_TEMP206 = RX10_TEMP473;


								final int X10_TEMP208 = i + X10_TEMP206;


								final Point1 RX10_TEMP474 = new Point1(pl,X10_TEMP189);
								
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP474.hashCode());


								final Dist1 RX10_TEMP475 = outRt.distValue;


								final Region1 RX10_TEMP476 = RX10_TEMP475.dReg;


								final int RX10_TEMP477 = Program.searchPointInRegion1(RX10_TEMP476, RX10_TEMP474,X10_TEMP189);


								final int RX10_TEMP478 = 0;


								final boolean RX10_TEMP479 = RX10_TEMP477 < RX10_TEMP478;

								if(RX10_TEMP479)
									{

									String RX10_TEMP480 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP480);

									}

								final int RX10_TEMP481 = Program.getPlaceFromDist1(RX10_TEMP475, RX10_TEMP477,X10_TEMP189);


								final int RX10_TEMP483 = 0;


								final boolean RX10_TEMP484 = RX10_TEMP481 != RX10_TEMP483;

								if(RX10_TEMP484)
									{

									String RX10_TEMP482 = "Bad place access for array outRt";

									throw new RuntimeException(RX10_TEMP482);

									}

								final int RX10_TEMP485 = Program.getRefArrayValue1int(outRt, RX10_TEMP477,X10_TEMP189);


								final int X10_TEMP209 = RX10_TEMP485;


								final int X10_TEMP212 = X10_TEMP208 - X10_TEMP209;


								final Point3 RX10_TEMP486 = new Point3(pl, X10_TEMP212, j,X10_TEMP189);
								
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP486.hashCode());


								final Dist3 RX10_TEMP487 = srcBuffer.distValue;


								final Region3 RX10_TEMP488 = RX10_TEMP487.dReg;


								final int RX10_TEMP489 = Program.searchPointInRegion3(RX10_TEMP488, RX10_TEMP486,X10_TEMP189);


								final int RX10_TEMP490 = 0;


								final boolean RX10_TEMP491 = RX10_TEMP489 < RX10_TEMP490;

								if(RX10_TEMP491)
									{

									String RX10_TEMP492 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP492);

									}

								final int RX10_TEMP493 = Program.getPlaceFromDist3(RX10_TEMP487, RX10_TEMP489,X10_TEMP189);


								final int RX10_TEMP495 = 0;


								final boolean RX10_TEMP496 = RX10_TEMP493 != RX10_TEMP495;

								if(RX10_TEMP496)
									{

									String RX10_TEMP494 = "Bad place access for array srcBuffer";

									throw new RuntimeException(RX10_TEMP494);

									}

								final double RX10_TEMP497 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP489,X10_TEMP189);


								final double X10_TEMP214 = RX10_TEMP497;

								RX10_TEMP502[RX10_TEMP459] =X10_TEMP214;
								}

;


							final doubleValArray2 RX10_TEMP503 = new doubleValArray2(rBuffer, RX10_TEMP502,X10_TEMP189);
							
Program.globalPointerHashMap.get(X10_TEMP189).add(RX10_TEMP503.hashCode());


							final doubleValArray2 X10_TEMP215 = RX10_TEMP503;


							final doubleValArray2 sBuffer = X10_TEMP215;


							final int X10_TEMP217 = 0;


							final int X10_TEMP219 = 0;

							//async(X10_TEMP219)
								{

								final int X10_TEMP221 = 0;


								final int RX10_TEMP508 = 1;


								int RX10_TEMP506 = rBuffer.regSize;


								RX10_TEMP506 = RX10_TEMP506 - RX10_TEMP508;


								final int  RX10_TEMP507 = RX10_TEMP506+1;

								for(int RX10_TEMP504=0; RX10_TEMP504 < RX10_TEMP507; RX10_TEMP504++)
									{

									final int RX10_TEMP509 = RX10_TEMP504;


									final Point2 RX10_TEMP505 = Program.regionOrdinalPoint2(rBuffer, RX10_TEMP509,X10_TEMP219);


									final int i = RX10_TEMP505.f0;


									final int j = RX10_TEMP505.f1;

									//async(X10_TEMP221)
										{

										final int X10_TEMP222 = 0;


										final int X10_TEMP226 = 0;


										final Point2 RX10_TEMP510 = new Point2(i, j,X10_TEMP221);
										
Program.globalPointerHashMap.get(X10_TEMP221).add(RX10_TEMP510.hashCode());


										final Region2 RX10_TEMP511 = sBuffer.regionValue;


										final int RX10_TEMP512 = Program.searchPointInRegion2(RX10_TEMP511, RX10_TEMP510,X10_TEMP221);


										final int RX10_TEMP513 = 0;


										final boolean RX10_TEMP514 = RX10_TEMP512 < RX10_TEMP513;

										if(RX10_TEMP514)
											{

											String RX10_TEMP515 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP515);

											}

										final double[] RX10_TEMP516 = (double[])(sBuffer.contents);


										final double X10_TEMP231 = RX10_TEMP516[RX10_TEMP512];


										final double X10_TEMP232 = X10_TEMP231;


										final Point3 RX10_TEMP517 = new Point3(X10_TEMP226, i, j,X10_TEMP221);
										
Program.globalPointerHashMap.get(X10_TEMP221).add(RX10_TEMP517.hashCode());


										final Dist3 RX10_TEMP518 = dstBuffer.distValue;


										final Region3 RX10_TEMP519 = RX10_TEMP518.dReg;


										final int RX10_TEMP520 = Program.searchPointInRegion3(RX10_TEMP519, RX10_TEMP517,X10_TEMP221);


										final int RX10_TEMP521 = 0;


										final boolean RX10_TEMP522 = RX10_TEMP520 < RX10_TEMP521;

										if(RX10_TEMP522)
											{

											String RX10_TEMP523 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP523);

											}

										final int RX10_TEMP524 = Program.getPlaceFromDist3(RX10_TEMP518, RX10_TEMP520,X10_TEMP221);


										final int RX10_TEMP526 = 0;


										final boolean RX10_TEMP527 = RX10_TEMP524 != RX10_TEMP526;

										if(RX10_TEMP527)
											{

											String RX10_TEMP525 = "Bad place access for array dstBuffer";

											throw new RuntimeException(RX10_TEMP525);

											}
										Program.setRefArrayValue3double(dstBuffer, RX10_TEMP520, X10_TEMP232,X10_TEMP221);
										}
									}

								final int X10_TEMP233 = 0;


								final int X10_TEMP235 = 0;


								final int X10_TEMP238 = bsize;


								final Point1 RX10_TEMP528 = new Point1(X10_TEMP235,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP528.hashCode());


								final Dist1 RX10_TEMP529 = inLt.distValue;


								final Region1 RX10_TEMP530 = RX10_TEMP529.dReg;


								final int RX10_TEMP531 = Program.searchPointInRegion1(RX10_TEMP530, RX10_TEMP528,myUniquePlacePoint);


								final int RX10_TEMP532 = 0;


								final boolean RX10_TEMP533 = RX10_TEMP531 < RX10_TEMP532;

								if(RX10_TEMP533)
									{

									String RX10_TEMP534 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP534);

									}

								final int RX10_TEMP535 = Program.getPlaceFromDist1(RX10_TEMP529, RX10_TEMP531,myUniquePlacePoint);


								final int RX10_TEMP537 = 0;


								final boolean RX10_TEMP538 = RX10_TEMP535 != RX10_TEMP537;

								if(RX10_TEMP538)
									{

									String RX10_TEMP536 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP536);

									}
								Program.setRefArrayValue1int(inLt, RX10_TEMP531, X10_TEMP238,myUniquePlacePoint);
								}
							}
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP240 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP540 = X10_TEMP240.dReg;


				final int RX10_TEMP543 = 1;


				int RX10_TEMP541 = RX10_TEMP540.regSize;


				RX10_TEMP541 = RX10_TEMP541 - RX10_TEMP543;


				final int  RX10_TEMP542 = RX10_TEMP541+1;

				for(int RX10_TEMP539=0; RX10_TEMP539 < RX10_TEMP542; RX10_TEMP539++)
					{

					final int RX10_TEMP544 = RX10_TEMP539;


					final Point1 X10_TEMP241 = Program.regionOrdinalPoint1(RX10_TEMP540, RX10_TEMP544,myUniquePlacePoint);


					final int pl = X10_TEMP241.f0;


					final Region1 RX10_TEMP545 = X10_TEMP240.dReg;


					final int RX10_TEMP546 = Program.searchPointInRegion1(RX10_TEMP545, X10_TEMP241,myUniquePlacePoint);


					final int RX10_TEMP547 = 0;


					final boolean RX10_TEMP548 = RX10_TEMP546 < RX10_TEMP547;

					if(RX10_TEMP548)
						{

						final String RX10_TEMP549 = "Point X10_TEMP241 not found in the distribution X10_TEMP240.";

						throw new RuntimeException(RX10_TEMP549);

						}

					final int RX10_TEMP550 = Program.getPlaceFromDist1(X10_TEMP240, RX10_TEMP546,myUniquePlacePoint);


					final int X10_TEMP242 = RX10_TEMP550;

					//async(X10_TEMP242)
						{

						final Point1 RX10_TEMP551 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP551.hashCode());


						final Dist1 RX10_TEMP552 = sizes.distValue;


						final Region1 RX10_TEMP553 = RX10_TEMP552.dReg;


						final int RX10_TEMP554 = Program.searchPointInRegion1(RX10_TEMP553, RX10_TEMP551,X10_TEMP242);


						final int RX10_TEMP555 = 0;


						final boolean RX10_TEMP556 = RX10_TEMP554 < RX10_TEMP555;

						if(RX10_TEMP556)
							{

							String RX10_TEMP557 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP557);

							}

						final int RX10_TEMP558 = Program.getPlaceFromDist1(RX10_TEMP552, RX10_TEMP554,X10_TEMP242);


						final int RX10_TEMP560 = 0;


						final boolean RX10_TEMP561 = RX10_TEMP558 != RX10_TEMP560;

						if(RX10_TEMP561)
							{

							String RX10_TEMP559 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP559);

							}

						final int RX10_TEMP562 = Program.getRefArrayValue1int(sizes, RX10_TEMP554,X10_TEMP242);


						final int X10_TEMP246 = RX10_TEMP562;


						final Point1 RX10_TEMP563 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP563.hashCode());


						final Dist1 RX10_TEMP564 = outRt.distValue;


						final Region1 RX10_TEMP565 = RX10_TEMP564.dReg;


						final int RX10_TEMP566 = Program.searchPointInRegion1(RX10_TEMP565, RX10_TEMP563,X10_TEMP242);


						final int RX10_TEMP567 = 0;


						final boolean RX10_TEMP568 = RX10_TEMP566 < RX10_TEMP567;

						if(RX10_TEMP568)
							{

							String RX10_TEMP569 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP569);

							}

						final int RX10_TEMP570 = Program.getPlaceFromDist1(RX10_TEMP564, RX10_TEMP566,X10_TEMP242);


						final int RX10_TEMP572 = 0;


						final boolean RX10_TEMP573 = RX10_TEMP570 != RX10_TEMP572;

						if(RX10_TEMP573)
							{

							String RX10_TEMP571 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP571);

							}

						final int RX10_TEMP574 = Program.getRefArrayValue1int(outRt, RX10_TEMP566,X10_TEMP242);


						final int X10_TEMP247 = RX10_TEMP574;


						final int X10_TEMP250 = X10_TEMP246 - X10_TEMP247;


						final int X10_TEMP251 = X10_TEMP250;


						final Point1 RX10_TEMP575 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP575.hashCode());


						final Dist1 RX10_TEMP576 = sizes.distValue;


						final Region1 RX10_TEMP577 = RX10_TEMP576.dReg;


						final int RX10_TEMP578 = Program.searchPointInRegion1(RX10_TEMP577, RX10_TEMP575,X10_TEMP242);


						final int RX10_TEMP579 = 0;


						final boolean RX10_TEMP580 = RX10_TEMP578 < RX10_TEMP579;

						if(RX10_TEMP580)
							{

							String RX10_TEMP581 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP581);

							}

						final int RX10_TEMP582 = Program.getPlaceFromDist1(RX10_TEMP576, RX10_TEMP578,X10_TEMP242);


						final int RX10_TEMP584 = 0;


						final boolean RX10_TEMP585 = RX10_TEMP582 != RX10_TEMP584;

						if(RX10_TEMP585)
							{

							String RX10_TEMP583 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP583);

							}
						Program.setRefArrayValue1int(sizes, RX10_TEMP578, X10_TEMP251,X10_TEMP242);

						final Point1 RX10_TEMP586 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP586.hashCode());


						final Dist1 RX10_TEMP587 = sizes.distValue;


						final Region1 RX10_TEMP588 = RX10_TEMP587.dReg;


						final int RX10_TEMP589 = Program.searchPointInRegion1(RX10_TEMP588, RX10_TEMP586,X10_TEMP242);


						final int RX10_TEMP590 = 0;


						final boolean RX10_TEMP591 = RX10_TEMP589 < RX10_TEMP590;

						if(RX10_TEMP591)
							{

							String RX10_TEMP592 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP592);

							}

						final int RX10_TEMP593 = Program.getPlaceFromDist1(RX10_TEMP587, RX10_TEMP589,X10_TEMP242);


						final int RX10_TEMP595 = 0;


						final boolean RX10_TEMP596 = RX10_TEMP593 != RX10_TEMP595;

						if(RX10_TEMP596)
							{

							String RX10_TEMP594 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP594);

							}

						final int RX10_TEMP597 = Program.getRefArrayValue1int(sizes, RX10_TEMP589,X10_TEMP242);


						final int X10_TEMP255 = RX10_TEMP597;


						final Point1 RX10_TEMP598 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP598.hashCode());


						final Dist1 RX10_TEMP599 = inLt.distValue;


						final Region1 RX10_TEMP600 = RX10_TEMP599.dReg;


						final int RX10_TEMP601 = Program.searchPointInRegion1(RX10_TEMP600, RX10_TEMP598,X10_TEMP242);


						final int RX10_TEMP602 = 0;


						final boolean RX10_TEMP603 = RX10_TEMP601 < RX10_TEMP602;

						if(RX10_TEMP603)
							{

							String RX10_TEMP604 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP604);

							}

						final int RX10_TEMP605 = Program.getPlaceFromDist1(RX10_TEMP599, RX10_TEMP601,X10_TEMP242);


						final int RX10_TEMP607 = 0;


						final boolean RX10_TEMP608 = RX10_TEMP605 != RX10_TEMP607;

						if(RX10_TEMP608)
							{

							String RX10_TEMP606 = "Bad place access for array inLt";

							throw new RuntimeException(RX10_TEMP606);

							}

						final int RX10_TEMP609 = Program.getRefArrayValue1int(inLt, RX10_TEMP601,X10_TEMP242);


						final int X10_TEMP256 = RX10_TEMP609;


						final int X10_TEMP257 = X10_TEMP255 + X10_TEMP256;


						final int X10_TEMP260 = X10_TEMP257 - MAX_ROWS;


						final int X10_TEMP261 = 0;


						final int X10_TEMP264 = Program.X10Util_maxInt(X10_TEMP260, X10_TEMP261,X10_TEMP242);


						final int X10_TEMP265 = X10_TEMP264;


						final Point1 RX10_TEMP610 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP610.hashCode());


						final Dist1 RX10_TEMP611 = outRt.distValue;


						final Region1 RX10_TEMP612 = RX10_TEMP611.dReg;


						final int RX10_TEMP613 = Program.searchPointInRegion1(RX10_TEMP612, RX10_TEMP610,X10_TEMP242);


						final int RX10_TEMP614 = 0;


						final boolean RX10_TEMP615 = RX10_TEMP613 < RX10_TEMP614;

						if(RX10_TEMP615)
							{

							String RX10_TEMP616 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP616);

							}

						final int RX10_TEMP617 = Program.getPlaceFromDist1(RX10_TEMP611, RX10_TEMP613,X10_TEMP242);


						final int RX10_TEMP619 = 0;


						final boolean RX10_TEMP620 = RX10_TEMP617 != RX10_TEMP619;

						if(RX10_TEMP620)
							{

							String RX10_TEMP618 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP618);

							}
						Program.setRefArrayValue1int(outRt, RX10_TEMP613, X10_TEMP265,X10_TEMP242);

						final Point1 RX10_TEMP621 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP621.hashCode());


						final Dist1 RX10_TEMP622 = sizes.distValue;


						final Region1 RX10_TEMP623 = RX10_TEMP622.dReg;


						final int RX10_TEMP624 = Program.searchPointInRegion1(RX10_TEMP623, RX10_TEMP621,X10_TEMP242);


						final int RX10_TEMP625 = 0;


						final boolean RX10_TEMP626 = RX10_TEMP624 < RX10_TEMP625;

						if(RX10_TEMP626)
							{

							String RX10_TEMP627 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP627);

							}

						final int RX10_TEMP628 = Program.getPlaceFromDist1(RX10_TEMP622, RX10_TEMP624,X10_TEMP242);


						final int RX10_TEMP630 = 0;


						final boolean RX10_TEMP631 = RX10_TEMP628 != RX10_TEMP630;

						if(RX10_TEMP631)
							{

							String RX10_TEMP629 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP629);

							}

						final int RX10_TEMP632 = Program.getRefArrayValue1int(sizes, RX10_TEMP624,X10_TEMP242);


						final int X10_TEMP269 = RX10_TEMP632;


						final Point1 RX10_TEMP633 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP633.hashCode());


						final Dist1 RX10_TEMP634 = outRt.distValue;


						final Region1 RX10_TEMP635 = RX10_TEMP634.dReg;


						final int RX10_TEMP636 = Program.searchPointInRegion1(RX10_TEMP635, RX10_TEMP633,X10_TEMP242);


						final int RX10_TEMP637 = 0;


						final boolean RX10_TEMP638 = RX10_TEMP636 < RX10_TEMP637;

						if(RX10_TEMP638)
							{

							String RX10_TEMP639 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP639);

							}

						final int RX10_TEMP640 = Program.getPlaceFromDist1(RX10_TEMP634, RX10_TEMP636,X10_TEMP242);


						final int RX10_TEMP642 = 0;


						final boolean RX10_TEMP643 = RX10_TEMP640 != RX10_TEMP642;

						if(RX10_TEMP643)
							{

							String RX10_TEMP641 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP641);

							}

						final int RX10_TEMP644 = Program.getRefArrayValue1int(outRt, RX10_TEMP636,X10_TEMP242);


						final int X10_TEMP270 = RX10_TEMP644;


						final int X10_TEMP273 = X10_TEMP269 - X10_TEMP270;


						final int X10_TEMP274 = X10_TEMP273;


						final Point1 RX10_TEMP645 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP645.hashCode());


						final Dist1 RX10_TEMP646 = sizes.distValue;


						final Region1 RX10_TEMP647 = RX10_TEMP646.dReg;


						final int RX10_TEMP648 = Program.searchPointInRegion1(RX10_TEMP647, RX10_TEMP645,X10_TEMP242);


						final int RX10_TEMP649 = 0;


						final boolean RX10_TEMP650 = RX10_TEMP648 < RX10_TEMP649;

						if(RX10_TEMP650)
							{

							String RX10_TEMP651 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP651);

							}

						final int RX10_TEMP652 = Program.getPlaceFromDist1(RX10_TEMP646, RX10_TEMP648,X10_TEMP242);


						final int RX10_TEMP654 = 0;


						final boolean RX10_TEMP655 = RX10_TEMP652 != RX10_TEMP654;

						if(RX10_TEMP655)
							{

							String RX10_TEMP653 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP653);

							}
						Program.setRefArrayValue1int(sizes, RX10_TEMP648, X10_TEMP274,X10_TEMP242);

						final Point1 RX10_TEMP656 = new Point1(pl,X10_TEMP242);
						
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP656.hashCode());


						final Dist1 RX10_TEMP657 = outRt.distValue;


						final Region1 RX10_TEMP658 = RX10_TEMP657.dReg;


						final int RX10_TEMP659 = Program.searchPointInRegion1(RX10_TEMP658, RX10_TEMP656,X10_TEMP242);


						final int RX10_TEMP660 = 0;


						final boolean RX10_TEMP661 = RX10_TEMP659 < RX10_TEMP660;

						if(RX10_TEMP661)
							{

							String RX10_TEMP662 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP662);

							}

						final int RX10_TEMP663 = Program.getPlaceFromDist1(RX10_TEMP657, RX10_TEMP659,X10_TEMP242);


						final int RX10_TEMP665 = 0;


						final boolean RX10_TEMP666 = RX10_TEMP663 != RX10_TEMP665;

						if(RX10_TEMP666)
							{

							String RX10_TEMP664 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP664);

							}

						final int RX10_TEMP667 = Program.getRefArrayValue1int(outRt, RX10_TEMP659,X10_TEMP242);


						final int X10_TEMP276 = RX10_TEMP667;


						final int X10_TEMP277 = 0;


						final boolean X10_TEMP279 = X10_TEMP276 > X10_TEMP277;

						if(X10_TEMP279)
							{

							final Point1 RX10_TEMP668 = new Point1(pl,X10_TEMP242);
							
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP668.hashCode());


							final Dist1 RX10_TEMP669 = pr.distValue;


							final Region1 RX10_TEMP670 = RX10_TEMP669.dReg;


							final int RX10_TEMP671 = Program.searchPointInRegion1(RX10_TEMP670, RX10_TEMP668,X10_TEMP242);


							final int RX10_TEMP672 = 0;


							final boolean RX10_TEMP673 = RX10_TEMP671 < RX10_TEMP672;

							if(RX10_TEMP673)
								{

								String RX10_TEMP674 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP674);

								}

							final int RX10_TEMP675 = Program.getPlaceFromDist1(RX10_TEMP669, RX10_TEMP671,X10_TEMP242);


							final int RX10_TEMP677 = 0;


							final boolean RX10_TEMP678 = RX10_TEMP675 != RX10_TEMP677;

							if(RX10_TEMP678)
								{

								String RX10_TEMP676 = "Bad place access for array pr";

								throw new RuntimeException(RX10_TEMP676);

								}

							final int RX10_TEMP679 = Program.getRefArrayValue1int(pr, RX10_TEMP671,X10_TEMP242);


							final int X10_TEMP285 = RX10_TEMP679;


							final Point1 RX10_TEMP680 = new Point1(pl,X10_TEMP242);
							
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP680.hashCode());


							final Dist1 RX10_TEMP681 = outRt.distValue;


							final Region1 RX10_TEMP682 = RX10_TEMP681.dReg;


							final int RX10_TEMP683 = Program.searchPointInRegion1(RX10_TEMP682, RX10_TEMP680,X10_TEMP242);


							final int RX10_TEMP684 = 0;


							final boolean RX10_TEMP685 = RX10_TEMP683 < RX10_TEMP684;

							if(RX10_TEMP685)
								{

								String RX10_TEMP686 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP686);

								}

							final int RX10_TEMP687 = Program.getPlaceFromDist1(RX10_TEMP681, RX10_TEMP683,X10_TEMP242);


							final int RX10_TEMP689 = 0;


							final boolean RX10_TEMP690 = RX10_TEMP687 != RX10_TEMP689;

							if(RX10_TEMP690)
								{

								String RX10_TEMP688 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP688);

								}

							final int RX10_TEMP691 = Program.getRefArrayValue1int(outRt, RX10_TEMP683,X10_TEMP242);


							final int X10_TEMP286 = RX10_TEMP691;


							final int X10_TEMP289 = Program.X10Util_maxInt(X10_TEMP285, X10_TEMP286,X10_TEMP242);


							final int X10_TEMP290 = X10_TEMP289;


							final Point1 RX10_TEMP692 = new Point1(pl,X10_TEMP242);
							
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP692.hashCode());


							final Dist1 RX10_TEMP693 = pr.distValue;


							final Region1 RX10_TEMP694 = RX10_TEMP693.dReg;


							final int RX10_TEMP695 = Program.searchPointInRegion1(RX10_TEMP694, RX10_TEMP692,X10_TEMP242);


							final int RX10_TEMP696 = 0;


							final boolean RX10_TEMP697 = RX10_TEMP695 < RX10_TEMP696;

							if(RX10_TEMP697)
								{

								String RX10_TEMP698 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP698);

								}

							final int RX10_TEMP699 = Program.getPlaceFromDist1(RX10_TEMP693, RX10_TEMP695,X10_TEMP242);


							final int RX10_TEMP701 = 0;


							final boolean RX10_TEMP702 = RX10_TEMP699 != RX10_TEMP701;

							if(RX10_TEMP702)
								{

								String RX10_TEMP700 = "Bad place access for array pr";

								throw new RuntimeException(RX10_TEMP700);

								}
							Program.setRefArrayValue1int(pr, RX10_TEMP695, X10_TEMP290,X10_TEMP242);

							final Point1 RX10_TEMP703 = new Point1(pl,X10_TEMP242);
							
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP703.hashCode());


							final Dist1 RX10_TEMP704 = outRt.distValue;


							final Region1 RX10_TEMP705 = RX10_TEMP704.dReg;


							final int RX10_TEMP706 = Program.searchPointInRegion1(RX10_TEMP705, RX10_TEMP703,X10_TEMP242);


							final int RX10_TEMP707 = 0;


							final boolean RX10_TEMP708 = RX10_TEMP706 < RX10_TEMP707;

							if(RX10_TEMP708)
								{

								String RX10_TEMP709 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP709);

								}

							final int RX10_TEMP710 = Program.getPlaceFromDist1(RX10_TEMP704, RX10_TEMP706,X10_TEMP242);


							final int RX10_TEMP712 = 0;


							final boolean RX10_TEMP713 = RX10_TEMP710 != RX10_TEMP712;

							if(RX10_TEMP713)
								{

								String RX10_TEMP711 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP711);

								}

							final int RX10_TEMP714 = Program.getRefArrayValue1int(outRt, RX10_TEMP706,X10_TEMP242);


							final int X10_TEMP296 = RX10_TEMP714;


							final Point1 RX10_TEMP715 = new Point1(pl,X10_TEMP242);
							
Program.globalPointerHashMap.get(X10_TEMP242).add(RX10_TEMP715.hashCode());


							final Dist1 RX10_TEMP716 = inLt.distValue;


							final Region1 RX10_TEMP717 = RX10_TEMP716.dReg;


							final int RX10_TEMP718 = Program.searchPointInRegion1(RX10_TEMP717, RX10_TEMP715,X10_TEMP242);


							final int RX10_TEMP719 = 0;


							final boolean RX10_TEMP720 = RX10_TEMP718 < RX10_TEMP719;

							if(RX10_TEMP720)
								{

								String RX10_TEMP721 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP721);

								}

							final int RX10_TEMP722 = Program.getPlaceFromDist1(RX10_TEMP716, RX10_TEMP718,X10_TEMP242);


							final int RX10_TEMP724 = 0;


							final boolean RX10_TEMP725 = RX10_TEMP722 != RX10_TEMP724;

							if(RX10_TEMP725)
								{

								String RX10_TEMP723 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP723);

								}

							final int RX10_TEMP726 = Program.getRefArrayValue1int(inLt, RX10_TEMP718,X10_TEMP242);


							final int X10_TEMP294 = RX10_TEMP726;


							final int X10_TEMP297 = MAX_ROWS - X10_TEMP294;


							final int rsize = Program.X10Util_minInt(X10_TEMP296, X10_TEMP297,X10_TEMP242);

							/*FINISH
*/								{

								final int X10_TEMP302 = 0;


								final int X10_TEMP300 = 1;


								final int X10_TEMP303 = rsize - X10_TEMP300;


								final Region2 X10_TEMP306 = Program.createNewRegion2RA(X10_TEMP302, X10_TEMP303, rRank2,X10_TEMP242);


								final int X10_TEMP307 = 0;


								final int RX10_TEMP731 = 1;


								int RX10_TEMP729 = X10_TEMP306.regSize;


								RX10_TEMP729 = RX10_TEMP729 - RX10_TEMP731;


								final int  RX10_TEMP730 = RX10_TEMP729+1;

								for(int RX10_TEMP727=0; RX10_TEMP727 < RX10_TEMP730; RX10_TEMP727++)
									{

									final int RX10_TEMP732 = RX10_TEMP727;


									final Point2 RX10_TEMP728 = Program.regionOrdinalPoint2(X10_TEMP306, RX10_TEMP732,X10_TEMP242);


									final int i = RX10_TEMP728.f0;


									final int j = RX10_TEMP728.f1;

									//async(X10_TEMP307)
										{

										final int X10_TEMP309 = MAX_ROWS - rsize;


										final int X10_TEMP312 = X10_TEMP309 + i;


										final Point1 RX10_TEMP733 = new Point1(pl,X10_TEMP307);
										
Program.globalPointerHashMap.get(X10_TEMP307).add(RX10_TEMP733.hashCode());


										final Dist1 RX10_TEMP734 = sizes.distValue;


										final Region1 RX10_TEMP735 = RX10_TEMP734.dReg;


										final int RX10_TEMP736 = Program.searchPointInRegion1(RX10_TEMP735, RX10_TEMP733,X10_TEMP307);


										final int RX10_TEMP737 = 0;


										final boolean RX10_TEMP738 = RX10_TEMP736 < RX10_TEMP737;

										if(RX10_TEMP738)
											{

											String RX10_TEMP739 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP739);

											}

										final int RX10_TEMP740 = Program.getPlaceFromDist1(RX10_TEMP734, RX10_TEMP736,X10_TEMP307);


										final int RX10_TEMP742 = 0;


										final boolean RX10_TEMP743 = RX10_TEMP740 != RX10_TEMP742;

										if(RX10_TEMP743)
											{

											String RX10_TEMP741 = "Bad place access for array sizes";

											throw new RuntimeException(RX10_TEMP741);

											}

										final int RX10_TEMP744 = Program.getRefArrayValue1int(sizes, RX10_TEMP736,X10_TEMP307);


										final int X10_TEMP315 = RX10_TEMP744;


										final int X10_TEMP318 = X10_TEMP315 + i;


										final Point3 RX10_TEMP745 = new Point3(pl, X10_TEMP318, j,X10_TEMP307);
										
Program.globalPointerHashMap.get(X10_TEMP307).add(RX10_TEMP745.hashCode());


										final Dist3 RX10_TEMP746 = srcBuffer.distValue;


										final Region3 RX10_TEMP747 = RX10_TEMP746.dReg;


										final int RX10_TEMP748 = Program.searchPointInRegion3(RX10_TEMP747, RX10_TEMP745,X10_TEMP307);


										final int RX10_TEMP749 = 0;


										final boolean RX10_TEMP750 = RX10_TEMP748 < RX10_TEMP749;

										if(RX10_TEMP750)
											{

											String RX10_TEMP751 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP751);

											}

										final int RX10_TEMP752 = Program.getPlaceFromDist3(RX10_TEMP746, RX10_TEMP748,X10_TEMP307);


										final int RX10_TEMP754 = 0;


										final boolean RX10_TEMP755 = RX10_TEMP752 != RX10_TEMP754;

										if(RX10_TEMP755)
											{

											String RX10_TEMP753 = "Bad place access for array srcBuffer";

											throw new RuntimeException(RX10_TEMP753);

											}

										final double RX10_TEMP756 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP748,X10_TEMP307);


										final double X10_TEMP321 = RX10_TEMP756;


										final double X10_TEMP322 = X10_TEMP321;


										final Point3 RX10_TEMP757 = new Point3(pl, X10_TEMP312, j,X10_TEMP307);
										
Program.globalPointerHashMap.get(X10_TEMP307).add(RX10_TEMP757.hashCode());


										final Dist3 RX10_TEMP758 = dstBuffer.distValue;


										final Region3 RX10_TEMP759 = RX10_TEMP758.dReg;


										final int RX10_TEMP760 = Program.searchPointInRegion3(RX10_TEMP759, RX10_TEMP757,X10_TEMP307);


										final int RX10_TEMP761 = 0;


										final boolean RX10_TEMP762 = RX10_TEMP760 < RX10_TEMP761;

										if(RX10_TEMP762)
											{

											String RX10_TEMP763 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP763);

											}

										final int RX10_TEMP764 = Program.getPlaceFromDist3(RX10_TEMP758, RX10_TEMP760,X10_TEMP307);


										final int RX10_TEMP766 = 0;


										final boolean RX10_TEMP767 = RX10_TEMP764 != RX10_TEMP766;

										if(RX10_TEMP767)
											{

											String RX10_TEMP765 = "Bad place access for array dstBuffer";

											throw new RuntimeException(RX10_TEMP765);

											}
										Program.setRefArrayValue3double(dstBuffer, RX10_TEMP760, X10_TEMP322,X10_TEMP307);
										}
									}
								}
							}

						final Point1 RX10_TEMP768 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP768.hashCode());


						final Dist1 RX10_TEMP769 = sizes.distValue;


						final Region1 RX10_TEMP770 = RX10_TEMP769.dReg;


						final int RX10_TEMP771 = Program.searchPointInRegion1(RX10_TEMP770, RX10_TEMP768,myUniquePlacePoint);


						final int RX10_TEMP772 = 0;


						final boolean RX10_TEMP773 = RX10_TEMP771 < RX10_TEMP772;

						if(RX10_TEMP773)
							{

							String RX10_TEMP774 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP774);

							}

						final int RX10_TEMP775 = Program.getPlaceFromDist1(RX10_TEMP769, RX10_TEMP771,myUniquePlacePoint);


						final int RX10_TEMP777 = 0;


						final boolean RX10_TEMP778 = RX10_TEMP775 != RX10_TEMP777;

						if(RX10_TEMP778)
							{

							String RX10_TEMP776 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP776);

							}

						final int RX10_TEMP779 = Program.getRefArrayValue1int(sizes, RX10_TEMP771,myUniquePlacePoint);


						final int X10_TEMP324 = RX10_TEMP779;


						final int X10_TEMP325 = 0;


						final boolean X10_TEMP329 = X10_TEMP324 > X10_TEMP325;


						final Point1 RX10_TEMP780 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP780.hashCode());


						final Dist1 RX10_TEMP781 = inLt.distValue;


						final Region1 RX10_TEMP782 = RX10_TEMP781.dReg;


						final int RX10_TEMP783 = Program.searchPointInRegion1(RX10_TEMP782, RX10_TEMP780,myUniquePlacePoint);


						final int RX10_TEMP784 = 0;


						final boolean RX10_TEMP785 = RX10_TEMP783 < RX10_TEMP784;

						if(RX10_TEMP785)
							{

							String RX10_TEMP786 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP786);

							}

						final int RX10_TEMP787 = Program.getPlaceFromDist1(RX10_TEMP781, RX10_TEMP783,myUniquePlacePoint);


						final int RX10_TEMP789 = 0;


						final boolean RX10_TEMP790 = RX10_TEMP787 != RX10_TEMP789;

						if(RX10_TEMP790)
							{

							String RX10_TEMP788 = "Bad place access for array inLt";

							throw new RuntimeException(RX10_TEMP788);

							}

						final int RX10_TEMP791 = Program.getRefArrayValue1int(inLt, RX10_TEMP783,myUniquePlacePoint);


						final int X10_TEMP327 = RX10_TEMP791;


						final int X10_TEMP328 = 0;


						final boolean X10_TEMP330 = X10_TEMP327 > X10_TEMP328;


						final boolean X10_TEMP332 = X10_TEMP329 && X10_TEMP330;

						if(X10_TEMP332)
							{

							final int X10_TEMP336 = 1;


							final Point1 RX10_TEMP792 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP792.hashCode());


							final Dist1 RX10_TEMP793 = sizes.distValue;


							final Region1 RX10_TEMP794 = RX10_TEMP793.dReg;


							final int RX10_TEMP795 = Program.searchPointInRegion1(RX10_TEMP794, RX10_TEMP792,myUniquePlacePoint);


							final int RX10_TEMP796 = 0;


							final boolean RX10_TEMP797 = RX10_TEMP795 < RX10_TEMP796;

							if(RX10_TEMP797)
								{

								String RX10_TEMP798 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP798);

								}

							final int RX10_TEMP799 = Program.getPlaceFromDist1(RX10_TEMP793, RX10_TEMP795,myUniquePlacePoint);


							final int RX10_TEMP801 = 0;


							final boolean RX10_TEMP802 = RX10_TEMP799 != RX10_TEMP801;

							if(RX10_TEMP802)
								{

								String RX10_TEMP800 = "Bad place access for array sizes";

								throw new RuntimeException(RX10_TEMP800);

								}

							final int RX10_TEMP803 = Program.getRefArrayValue1int(sizes, RX10_TEMP795,myUniquePlacePoint);


							final int X10_TEMP337 = RX10_TEMP803;


							final Region1 X10_TEMP339 = Program.createNewRegion1R(X10_TEMP336, X10_TEMP337,myUniquePlacePoint);


							final int RX10_TEMP808 = 1;


							int RX10_TEMP806 = X10_TEMP339.regSize;


							RX10_TEMP806 = RX10_TEMP806 - RX10_TEMP808;


							final int  RX10_TEMP807 = RX10_TEMP806+1;

							for(int RX10_TEMP804=0; RX10_TEMP804 < RX10_TEMP807; RX10_TEMP804++)
								{

								final int RX10_TEMP809 = RX10_TEMP804;


								final Point1 RX10_TEMP805 = Program.regionOrdinalPoint1(X10_TEMP339, RX10_TEMP809,myUniquePlacePoint);


								final int i1 = RX10_TEMP805.f0;


								final Point1 RX10_TEMP810 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP810.hashCode());


								final Dist1 RX10_TEMP811 = sizes.distValue;


								final Region1 RX10_TEMP812 = RX10_TEMP811.dReg;


								final int RX10_TEMP813 = Program.searchPointInRegion1(RX10_TEMP812, RX10_TEMP810,myUniquePlacePoint);


								final int RX10_TEMP814 = 0;


								final boolean RX10_TEMP815 = RX10_TEMP813 < RX10_TEMP814;

								if(RX10_TEMP815)
									{

									String RX10_TEMP816 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP816);

									}

								final int RX10_TEMP817 = Program.getPlaceFromDist1(RX10_TEMP811, RX10_TEMP813,myUniquePlacePoint);


								final int RX10_TEMP819 = 0;


								final boolean RX10_TEMP820 = RX10_TEMP817 != RX10_TEMP819;

								if(RX10_TEMP820)
									{

									String RX10_TEMP818 = "Bad place access for array sizes";

									throw new RuntimeException(RX10_TEMP818);

									}

								final int RX10_TEMP821 = Program.getRefArrayValue1int(sizes, RX10_TEMP813,myUniquePlacePoint);


								final int X10_TEMP341 = RX10_TEMP821;


								final int i2 = X10_TEMP341 - i1;

								/*FINISH
*/									{

									final int X10_TEMP344 = 0;


									final int RX10_TEMP826 = 1;


									int RX10_TEMP824 = rRank2.regSize;


									RX10_TEMP824 = RX10_TEMP824 - RX10_TEMP826;


									final int  RX10_TEMP825 = RX10_TEMP824+1;

									for(int RX10_TEMP822=0; RX10_TEMP822 < RX10_TEMP825; RX10_TEMP822++)
										{

										final int RX10_TEMP827 = RX10_TEMP822;


										final Point1 RX10_TEMP823 = Program.regionOrdinalPoint1(rRank2, RX10_TEMP827,myUniquePlacePoint);


										final int j = RX10_TEMP823.f0;

										//async(X10_TEMP344)
											{

											final Point1 RX10_TEMP828 = new Point1(pl,X10_TEMP344);
											
Program.globalPointerHashMap.get(X10_TEMP344).add(RX10_TEMP828.hashCode());


											final Dist1 RX10_TEMP829 = inLt.distValue;


											final Region1 RX10_TEMP830 = RX10_TEMP829.dReg;


											final int RX10_TEMP831 = Program.searchPointInRegion1(RX10_TEMP830, RX10_TEMP828,X10_TEMP344);


											final int RX10_TEMP832 = 0;


											final boolean RX10_TEMP833 = RX10_TEMP831 < RX10_TEMP832;

											if(RX10_TEMP833)
												{

												String RX10_TEMP834 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP834);

												}

											final int RX10_TEMP835 = Program.getPlaceFromDist1(RX10_TEMP829, RX10_TEMP831,X10_TEMP344);


											final int RX10_TEMP837 = 0;


											final boolean RX10_TEMP838 = RX10_TEMP835 != RX10_TEMP837;

											if(RX10_TEMP838)
												{

												String RX10_TEMP836 = "Bad place access for array inLt";

												throw new RuntimeException(RX10_TEMP836);

												}

											final int RX10_TEMP839 = Program.getRefArrayValue1int(inLt, RX10_TEMP831,X10_TEMP344);


											final int X10_TEMP347 = RX10_TEMP839;


											final int X10_TEMP350 = i2 + X10_TEMP347;


											final Point3 RX10_TEMP840 = new Point3(pl, i2, j,X10_TEMP344);
											
Program.globalPointerHashMap.get(X10_TEMP344).add(RX10_TEMP840.hashCode());


											final Dist3 RX10_TEMP841 = srcBuffer.distValue;


											final Region3 RX10_TEMP842 = RX10_TEMP841.dReg;


											final int RX10_TEMP843 = Program.searchPointInRegion3(RX10_TEMP842, RX10_TEMP840,X10_TEMP344);


											final int RX10_TEMP844 = 0;


											final boolean RX10_TEMP845 = RX10_TEMP843 < RX10_TEMP844;

											if(RX10_TEMP845)
												{

												String RX10_TEMP846 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP846);

												}

											final int RX10_TEMP847 = Program.getPlaceFromDist3(RX10_TEMP841, RX10_TEMP843,X10_TEMP344);


											final int RX10_TEMP849 = 0;


											final boolean RX10_TEMP850 = RX10_TEMP847 != RX10_TEMP849;

											if(RX10_TEMP850)
												{

												String RX10_TEMP848 = "Bad place access for array srcBuffer";

												throw new RuntimeException(RX10_TEMP848);

												}

											final double RX10_TEMP851 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP843,X10_TEMP344);


											final double X10_TEMP356 = RX10_TEMP851;


											final double X10_TEMP357 = X10_TEMP356;


											final Point3 RX10_TEMP852 = new Point3(pl, X10_TEMP350, j,X10_TEMP344);
											
Program.globalPointerHashMap.get(X10_TEMP344).add(RX10_TEMP852.hashCode());


											final Dist3 RX10_TEMP853 = srcBuffer.distValue;


											final Region3 RX10_TEMP854 = RX10_TEMP853.dReg;


											final int RX10_TEMP855 = Program.searchPointInRegion3(RX10_TEMP854, RX10_TEMP852,X10_TEMP344);


											final int RX10_TEMP856 = 0;


											final boolean RX10_TEMP857 = RX10_TEMP855 < RX10_TEMP856;

											if(RX10_TEMP857)
												{

												String RX10_TEMP858 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP858);

												}

											final int RX10_TEMP859 = Program.getPlaceFromDist3(RX10_TEMP853, RX10_TEMP855,X10_TEMP344);


											final int RX10_TEMP861 = 0;


											final boolean RX10_TEMP862 = RX10_TEMP859 != RX10_TEMP861;

											if(RX10_TEMP862)
												{

												String RX10_TEMP860 = "Bad place access for array srcBuffer";

												throw new RuntimeException(RX10_TEMP860);

												}
											Program.setRefArrayValue3double(srcBuffer, RX10_TEMP855, X10_TEMP357,X10_TEMP344);
											}
										}
									}
								}
							}
						/*FINISH
*/							{

							final int X10_TEMP365 = 0;


							final Point1 RX10_TEMP863 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP863.hashCode());


							final Dist1 RX10_TEMP864 = inLt.distValue;


							final Region1 RX10_TEMP865 = RX10_TEMP864.dReg;


							final int RX10_TEMP866 = Program.searchPointInRegion1(RX10_TEMP865, RX10_TEMP863,myUniquePlacePoint);


							final int RX10_TEMP867 = 0;


							final boolean RX10_TEMP868 = RX10_TEMP866 < RX10_TEMP867;

							if(RX10_TEMP868)
								{

								String RX10_TEMP869 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP869);

								}

							final int RX10_TEMP870 = Program.getPlaceFromDist1(RX10_TEMP864, RX10_TEMP866,myUniquePlacePoint);


							final int RX10_TEMP872 = 0;


							final boolean RX10_TEMP873 = RX10_TEMP870 != RX10_TEMP872;

							if(RX10_TEMP873)
								{

								String RX10_TEMP871 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP871);

								}

							final int RX10_TEMP874 = Program.getRefArrayValue1int(inLt, RX10_TEMP866,myUniquePlacePoint);


							final int X10_TEMP362 = RX10_TEMP874;


							final int X10_TEMP363 = 1;


							final int X10_TEMP366 = X10_TEMP362 - X10_TEMP363;


							final Region3 X10_TEMP369 = Program.createNewRegion3RRA(pl, pl, X10_TEMP365, X10_TEMP366, rRank2,myUniquePlacePoint);


							final int X10_TEMP370 = 0;


							final int RX10_TEMP878 = 1;


							int RX10_TEMP876 = X10_TEMP369.regSize;


							RX10_TEMP876 = RX10_TEMP876 - RX10_TEMP878;


							final int  RX10_TEMP877 = RX10_TEMP876+1;

							for(int RX10_TEMP875=0; RX10_TEMP875 < RX10_TEMP877; RX10_TEMP875++)
								{

								final int RX10_TEMP879 = RX10_TEMP875;


								final Point3 pt = Program.regionOrdinalPoint3(X10_TEMP369, RX10_TEMP879,myUniquePlacePoint);

								//async(X10_TEMP370)
									{

									final Dist3 RX10_TEMP880 = dstBuffer.distValue;


									final Region3 RX10_TEMP881 = RX10_TEMP880.dReg;


									final int RX10_TEMP882 = Program.searchPointInRegion3(RX10_TEMP881, pt,X10_TEMP370);


									final int RX10_TEMP883 = 0;


									final boolean RX10_TEMP884 = RX10_TEMP882 < RX10_TEMP883;

									if(RX10_TEMP884)
										{

										String RX10_TEMP885 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP885);

										}

									final int RX10_TEMP886 = Program.getPlaceFromDist3(RX10_TEMP880, RX10_TEMP882,X10_TEMP370);


									final int RX10_TEMP888 = 0;


									final boolean RX10_TEMP889 = RX10_TEMP886 != RX10_TEMP888;

									if(RX10_TEMP889)
										{

										String RX10_TEMP887 = "Bad place access for array dstBuffer";

										throw new RuntimeException(RX10_TEMP887);

										}

									final double RX10_TEMP890 = Program.getRefArrayValue3double(dstBuffer, RX10_TEMP882,X10_TEMP370);


									final double X10_TEMP375 = RX10_TEMP890;


									final double X10_TEMP376 = X10_TEMP375;


									final Dist3 RX10_TEMP891 = srcBuffer.distValue;


									final Region3 RX10_TEMP892 = RX10_TEMP891.dReg;


									final int RX10_TEMP893 = Program.searchPointInRegion3(RX10_TEMP892, pt,X10_TEMP370);


									final int RX10_TEMP894 = 0;


									final boolean RX10_TEMP895 = RX10_TEMP893 < RX10_TEMP894;

									if(RX10_TEMP895)
										{

										String RX10_TEMP896 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP896);

										}

									final int RX10_TEMP897 = Program.getPlaceFromDist3(RX10_TEMP891, RX10_TEMP893,X10_TEMP370);


									final int RX10_TEMP899 = 0;


									final boolean RX10_TEMP900 = RX10_TEMP897 != RX10_TEMP899;

									if(RX10_TEMP900)
										{

										String RX10_TEMP898 = "Bad place access for array srcBuffer";

										throw new RuntimeException(RX10_TEMP898);

										}
									Program.setRefArrayValue3double(srcBuffer, RX10_TEMP893, X10_TEMP376,X10_TEMP370);
									}
								}
							}

						final Point1 RX10_TEMP901 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP901.hashCode());


						final Dist1 RX10_TEMP902 = sizes.distValue;


						final Region1 RX10_TEMP903 = RX10_TEMP902.dReg;


						final int RX10_TEMP904 = Program.searchPointInRegion1(RX10_TEMP903, RX10_TEMP901,myUniquePlacePoint);


						final int RX10_TEMP905 = 0;


						final boolean RX10_TEMP906 = RX10_TEMP904 < RX10_TEMP905;

						if(RX10_TEMP906)
							{

							String RX10_TEMP907 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP907);

							}

						final int RX10_TEMP908 = Program.getPlaceFromDist1(RX10_TEMP902, RX10_TEMP904,myUniquePlacePoint);


						final int RX10_TEMP910 = 0;


						final boolean RX10_TEMP911 = RX10_TEMP908 != RX10_TEMP910;

						if(RX10_TEMP911)
							{

							String RX10_TEMP909 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP909);

							}

						final int RX10_TEMP912 = Program.getRefArrayValue1int(sizes, RX10_TEMP904,myUniquePlacePoint);


						final int X10_TEMP380 = RX10_TEMP912;


						final Point1 RX10_TEMP913 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP913.hashCode());


						final Dist1 RX10_TEMP914 = inLt.distValue;


						final Region1 RX10_TEMP915 = RX10_TEMP914.dReg;


						final int RX10_TEMP916 = Program.searchPointInRegion1(RX10_TEMP915, RX10_TEMP913,myUniquePlacePoint);


						final int RX10_TEMP917 = 0;


						final boolean RX10_TEMP918 = RX10_TEMP916 < RX10_TEMP917;

						if(RX10_TEMP918)
							{

							String RX10_TEMP919 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP919);

							}

						final int RX10_TEMP920 = Program.getPlaceFromDist1(RX10_TEMP914, RX10_TEMP916,myUniquePlacePoint);


						final int RX10_TEMP922 = 0;


						final boolean RX10_TEMP923 = RX10_TEMP920 != RX10_TEMP922;

						if(RX10_TEMP923)
							{

							String RX10_TEMP921 = "Bad place access for array inLt";

							throw new RuntimeException(RX10_TEMP921);

							}

						final int RX10_TEMP924 = Program.getRefArrayValue1int(inLt, RX10_TEMP916,myUniquePlacePoint);


						final int X10_TEMP381 = RX10_TEMP924;


						final int X10_TEMP384 = X10_TEMP380 + X10_TEMP381;


						final int X10_TEMP385 = X10_TEMP384;


						final Point1 RX10_TEMP925 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP925.hashCode());


						final Dist1 RX10_TEMP926 = sizes.distValue;


						final Region1 RX10_TEMP927 = RX10_TEMP926.dReg;


						final int RX10_TEMP928 = Program.searchPointInRegion1(RX10_TEMP927, RX10_TEMP925,myUniquePlacePoint);


						final int RX10_TEMP929 = 0;


						final boolean RX10_TEMP930 = RX10_TEMP928 < RX10_TEMP929;

						if(RX10_TEMP930)
							{

							String RX10_TEMP931 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP931);

							}

						final int RX10_TEMP932 = Program.getPlaceFromDist1(RX10_TEMP926, RX10_TEMP928,myUniquePlacePoint);


						final int RX10_TEMP934 = 0;


						final boolean RX10_TEMP935 = RX10_TEMP932 != RX10_TEMP934;

						if(RX10_TEMP935)
							{

							String RX10_TEMP933 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP933);

							}
						Program.setRefArrayValue1int(sizes, RX10_TEMP928, X10_TEMP385,myUniquePlacePoint);

						final Point1 RX10_TEMP936 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP936.hashCode());


						final Dist1 RX10_TEMP937 = offsets.distValue;


						final Region1 RX10_TEMP938 = RX10_TEMP937.dReg;


						final int RX10_TEMP939 = Program.searchPointInRegion1(RX10_TEMP938, RX10_TEMP936,myUniquePlacePoint);


						final int RX10_TEMP940 = 0;


						final boolean RX10_TEMP941 = RX10_TEMP939 < RX10_TEMP940;

						if(RX10_TEMP941)
							{

							String RX10_TEMP942 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP942);

							}

						final int RX10_TEMP943 = Program.getPlaceFromDist1(RX10_TEMP937, RX10_TEMP939,myUniquePlacePoint);


						final int RX10_TEMP945 = 0;


						final boolean RX10_TEMP946 = RX10_TEMP943 != RX10_TEMP945;

						if(RX10_TEMP946)
							{

							String RX10_TEMP944 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP944);

							}

						final int RX10_TEMP947 = Program.getRefArrayValue1int(offsets, RX10_TEMP939,myUniquePlacePoint);


						final int X10_TEMP389 = RX10_TEMP947;


						final Point1 RX10_TEMP948 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP948.hashCode());


						final Dist1 RX10_TEMP949 = inLt.distValue;


						final Region1 RX10_TEMP950 = RX10_TEMP949.dReg;


						final int RX10_TEMP951 = Program.searchPointInRegion1(RX10_TEMP950, RX10_TEMP948,myUniquePlacePoint);


						final int RX10_TEMP952 = 0;


						final boolean RX10_TEMP953 = RX10_TEMP951 < RX10_TEMP952;

						if(RX10_TEMP953)
							{

							String RX10_TEMP954 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP954);

							}

						final int RX10_TEMP955 = Program.getPlaceFromDist1(RX10_TEMP949, RX10_TEMP951,myUniquePlacePoint);


						final int RX10_TEMP957 = 0;


						final boolean RX10_TEMP958 = RX10_TEMP955 != RX10_TEMP957;

						if(RX10_TEMP958)
							{

							String RX10_TEMP956 = "Bad place access for array inLt";

							throw new RuntimeException(RX10_TEMP956);

							}

						final int RX10_TEMP959 = Program.getRefArrayValue1int(inLt, RX10_TEMP951,myUniquePlacePoint);


						final int X10_TEMP390 = RX10_TEMP959;


						final int X10_TEMP393 = X10_TEMP389 - X10_TEMP390;


						final int X10_TEMP394 = X10_TEMP393;


						final Point1 RX10_TEMP960 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP960.hashCode());


						final Dist1 RX10_TEMP961 = offsets.distValue;


						final Region1 RX10_TEMP962 = RX10_TEMP961.dReg;


						final int RX10_TEMP963 = Program.searchPointInRegion1(RX10_TEMP962, RX10_TEMP960,myUniquePlacePoint);


						final int RX10_TEMP964 = 0;


						final boolean RX10_TEMP965 = RX10_TEMP963 < RX10_TEMP964;

						if(RX10_TEMP965)
							{

							String RX10_TEMP966 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP966);

							}

						final int RX10_TEMP967 = Program.getPlaceFromDist1(RX10_TEMP961, RX10_TEMP963,myUniquePlacePoint);


						final int RX10_TEMP969 = 0;


						final boolean RX10_TEMP970 = RX10_TEMP967 != RX10_TEMP969;

						if(RX10_TEMP970)
							{

							String RX10_TEMP968 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP968);

							}
						Program.setRefArrayValue1int(offsets, RX10_TEMP963, X10_TEMP394,myUniquePlacePoint);
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP396 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP972 = X10_TEMP396.dReg;


				final int RX10_TEMP975 = 1;


				int RX10_TEMP973 = RX10_TEMP972.regSize;


				RX10_TEMP973 = RX10_TEMP973 - RX10_TEMP975;


				final int  RX10_TEMP974 = RX10_TEMP973+1;

				for(int RX10_TEMP971=0; RX10_TEMP971 < RX10_TEMP974; RX10_TEMP971++)
					{

					final int RX10_TEMP976 = RX10_TEMP971;


					final Point1 X10_TEMP397 = Program.regionOrdinalPoint1(RX10_TEMP972, RX10_TEMP976,myUniquePlacePoint);


					final int pl = X10_TEMP397.f0;


					final Region1 RX10_TEMP977 = X10_TEMP396.dReg;


					final int RX10_TEMP978 = Program.searchPointInRegion1(RX10_TEMP977, X10_TEMP397,myUniquePlacePoint);


					final int RX10_TEMP979 = 0;


					final boolean RX10_TEMP980 = RX10_TEMP978 < RX10_TEMP979;

					if(RX10_TEMP980)
						{

						final String RX10_TEMP981 = "Point X10_TEMP397 not found in the distribution X10_TEMP396.";

						throw new RuntimeException(RX10_TEMP981);

						}

					final int RX10_TEMP982 = Program.getPlaceFromDist1(X10_TEMP396, RX10_TEMP978,myUniquePlacePoint);


					final int X10_TEMP398 = RX10_TEMP982;

					//async(X10_TEMP398)
						{

						final Point1 RX10_TEMP983 = new Point1(pl,X10_TEMP398);
						
Program.globalPointerHashMap.get(X10_TEMP398).add(RX10_TEMP983.hashCode());


						final Dist1 RX10_TEMP984 = outLt.distValue;


						final Region1 RX10_TEMP985 = RX10_TEMP984.dReg;


						final int RX10_TEMP986 = Program.searchPointInRegion1(RX10_TEMP985, RX10_TEMP983,X10_TEMP398);


						final int RX10_TEMP987 = 0;


						final boolean RX10_TEMP988 = RX10_TEMP986 < RX10_TEMP987;

						if(RX10_TEMP988)
							{

							String RX10_TEMP989 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP989);

							}

						final int RX10_TEMP990 = Program.getPlaceFromDist1(RX10_TEMP984, RX10_TEMP986,X10_TEMP398);


						final int RX10_TEMP992 = 0;


						final boolean RX10_TEMP993 = RX10_TEMP990 != RX10_TEMP992;

						if(RX10_TEMP993)
							{

							String RX10_TEMP991 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP991);

							}

						final int RX10_TEMP994 = Program.getRefArrayValue1int(outLt, RX10_TEMP986,X10_TEMP398);


						final int X10_TEMP400 = RX10_TEMP994;


						final int X10_TEMP401 = 0;


						final boolean X10_TEMP403 = X10_TEMP400 > X10_TEMP401;

						if(X10_TEMP403)
							{

							final Point1 RX10_TEMP995 = new Point1(pl,X10_TEMP398);
							
Program.globalPointerHashMap.get(X10_TEMP398).add(RX10_TEMP995.hashCode());


							final Dist1 RX10_TEMP996 = outLt.distValue;


							final Region1 RX10_TEMP997 = RX10_TEMP996.dReg;


							final int RX10_TEMP998 = Program.searchPointInRegion1(RX10_TEMP997, RX10_TEMP995,X10_TEMP398);


							final int RX10_TEMP999 = 0;


							final boolean RX10_TEMP1000 = RX10_TEMP998 < RX10_TEMP999;

							if(RX10_TEMP1000)
								{

								String RX10_TEMP1001 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1001);

								}

							final int RX10_TEMP1002 = Program.getPlaceFromDist1(RX10_TEMP996, RX10_TEMP998,X10_TEMP398);


							final int RX10_TEMP1004 = 0;


							final boolean RX10_TEMP1005 = RX10_TEMP1002 != RX10_TEMP1004;

							if(RX10_TEMP1005)
								{

								String RX10_TEMP1003 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1003);

								}

							final int RX10_TEMP1006 = Program.getRefArrayValue1int(outLt, RX10_TEMP998,X10_TEMP398);


							final int bsize = RX10_TEMP1006;


							final int X10_TEMP409 = 0;


							final int X10_TEMP407 = 1;


							final int X10_TEMP410 = bsize - X10_TEMP407;


							final Region2 rBuffer = Program.createNewRegion2RA(X10_TEMP409, X10_TEMP410, rRank2,X10_TEMP398);


							final Region2 RX10_TEMP1007 = rBuffer;


							final int RX10_TEMP1024 = rBuffer.regSize;


							final int RX10_TEMP1025 = 1;


							final int RX10_TEMP1026 = RX10_TEMP1024 - RX10_TEMP1025;


							final int  RX10_TEMP1023 = RX10_TEMP1026+1;


							final double[] RX10_TEMP1027 = (double[])(new double/*value*/[RX10_TEMP1023]);
/*arrayInitBlock*/
for(int RX10_TEMP1008= 0;RX10_TEMP1008 <RX10_TEMP1027.length ;RX10_TEMP1008++ )								{

								final int RX10_TEMP1010 = RX10_TEMP1008;


								final Point2 RX10_TEMP1009 = Program.regionOrdinalPoint2(RX10_TEMP1007, RX10_TEMP1010,X10_TEMP398);


								final int i = RX10_TEMP1009.f0;


								final int j = RX10_TEMP1009.f1;


								final Point3 RX10_TEMP1011 = new Point3(pl, i, j,X10_TEMP398);
								
Program.globalPointerHashMap.get(X10_TEMP398).add(RX10_TEMP1011.hashCode());


								final Dist3 RX10_TEMP1012 = srcBuffer.distValue;


								final Region3 RX10_TEMP1013 = RX10_TEMP1012.dReg;


								final int RX10_TEMP1014 = Program.searchPointInRegion3(RX10_TEMP1013, RX10_TEMP1011,X10_TEMP398);


								final int RX10_TEMP1015 = 0;


								final boolean RX10_TEMP1016 = RX10_TEMP1014 < RX10_TEMP1015;

								if(RX10_TEMP1016)
									{

									String RX10_TEMP1017 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1017);

									}

								final int RX10_TEMP1018 = Program.getPlaceFromDist3(RX10_TEMP1012, RX10_TEMP1014,X10_TEMP398);


								final int RX10_TEMP1020 = 0;


								final boolean RX10_TEMP1021 = RX10_TEMP1018 != RX10_TEMP1020;

								if(RX10_TEMP1021)
									{

									String RX10_TEMP1019 = "Bad place access for array srcBuffer";

									throw new RuntimeException(RX10_TEMP1019);

									}

								final double RX10_TEMP1022 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP1014,X10_TEMP398);


								final double X10_TEMP417 = RX10_TEMP1022;

								RX10_TEMP1027[RX10_TEMP1008] =X10_TEMP417;
								}

;


							final doubleValArray2 RX10_TEMP1028 = new doubleValArray2(rBuffer, RX10_TEMP1027,X10_TEMP398);
							
Program.globalPointerHashMap.get(X10_TEMP398).add(RX10_TEMP1028.hashCode());


							final doubleValArray2 X10_TEMP418 = RX10_TEMP1028;


							final doubleValArray2 sBuffer = X10_TEMP418;


							final int X10_TEMP420 = 0;


							final int X10_TEMP422 = 0;

							//async(X10_TEMP422)
								{

								final int X10_TEMP424 = 0;


								final int RX10_TEMP1033 = 1;


								int RX10_TEMP1031 = rBuffer.regSize;


								RX10_TEMP1031 = RX10_TEMP1031 - RX10_TEMP1033;


								final int  RX10_TEMP1032 = RX10_TEMP1031+1;

								for(int RX10_TEMP1029=0; RX10_TEMP1029 < RX10_TEMP1032; RX10_TEMP1029++)
									{

									final int RX10_TEMP1034 = RX10_TEMP1029;


									final Point2 RX10_TEMP1030 = Program.regionOrdinalPoint2(rBuffer, RX10_TEMP1034,X10_TEMP422);


									final int i = RX10_TEMP1030.f0;


									final int j = RX10_TEMP1030.f1;

									//async(X10_TEMP424)
										{

										final int X10_TEMP425 = 0;


										final int X10_TEMP429 = 0;


										final Point2 RX10_TEMP1035 = new Point2(i, j,X10_TEMP424);
										
Program.globalPointerHashMap.get(X10_TEMP424).add(RX10_TEMP1035.hashCode());


										final Region2 RX10_TEMP1036 = sBuffer.regionValue;


										final int RX10_TEMP1037 = Program.searchPointInRegion2(RX10_TEMP1036, RX10_TEMP1035,X10_TEMP424);


										final int RX10_TEMP1038 = 0;


										final boolean RX10_TEMP1039 = RX10_TEMP1037 < RX10_TEMP1038;

										if(RX10_TEMP1039)
											{

											String RX10_TEMP1040 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1040);

											}

										final double[] RX10_TEMP1041 = (double[])(sBuffer.contents);


										final double X10_TEMP434 = RX10_TEMP1041[RX10_TEMP1037];


										final double X10_TEMP435 = X10_TEMP434;


										final Point3 RX10_TEMP1042 = new Point3(X10_TEMP429, i, j,X10_TEMP424);
										
Program.globalPointerHashMap.get(X10_TEMP424).add(RX10_TEMP1042.hashCode());


										final Dist3 RX10_TEMP1043 = dstBuffer.distValue;


										final Region3 RX10_TEMP1044 = RX10_TEMP1043.dReg;


										final int RX10_TEMP1045 = Program.searchPointInRegion3(RX10_TEMP1044, RX10_TEMP1042,X10_TEMP424);


										final int RX10_TEMP1046 = 0;


										final boolean RX10_TEMP1047 = RX10_TEMP1045 < RX10_TEMP1046;

										if(RX10_TEMP1047)
											{

											String RX10_TEMP1048 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP1048);

											}

										final int RX10_TEMP1049 = Program.getPlaceFromDist3(RX10_TEMP1043, RX10_TEMP1045,X10_TEMP424);


										final int RX10_TEMP1051 = 0;


										final boolean RX10_TEMP1052 = RX10_TEMP1049 != RX10_TEMP1051;

										if(RX10_TEMP1052)
											{

											String RX10_TEMP1050 = "Bad place access for array dstBuffer";

											throw new RuntimeException(RX10_TEMP1050);

											}
										Program.setRefArrayValue3double(dstBuffer, RX10_TEMP1045, X10_TEMP435,X10_TEMP424);
										}
									}

								final int X10_TEMP436 = 0;


								final int X10_TEMP438 = 0;


								final int X10_TEMP441 = bsize;


								final Point1 RX10_TEMP1053 = new Point1(X10_TEMP438,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1053.hashCode());


								final Dist1 RX10_TEMP1054 = inRt.distValue;


								final Region1 RX10_TEMP1055 = RX10_TEMP1054.dReg;


								final int RX10_TEMP1056 = Program.searchPointInRegion1(RX10_TEMP1055, RX10_TEMP1053,myUniquePlacePoint);


								final int RX10_TEMP1057 = 0;


								final boolean RX10_TEMP1058 = RX10_TEMP1056 < RX10_TEMP1057;

								if(RX10_TEMP1058)
									{

									String RX10_TEMP1059 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1059);

									}

								final int RX10_TEMP1060 = Program.getPlaceFromDist1(RX10_TEMP1054, RX10_TEMP1056,myUniquePlacePoint);


								final int RX10_TEMP1062 = 0;


								final boolean RX10_TEMP1063 = RX10_TEMP1060 != RX10_TEMP1062;

								if(RX10_TEMP1063)
									{

									String RX10_TEMP1061 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP1061);

									}
								Program.setRefArrayValue1int(inRt, RX10_TEMP1056, X10_TEMP441,myUniquePlacePoint);
								}
							}
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP443 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP1065 = X10_TEMP443.dReg;


				final int RX10_TEMP1068 = 1;


				int RX10_TEMP1066 = RX10_TEMP1065.regSize;


				RX10_TEMP1066 = RX10_TEMP1066 - RX10_TEMP1068;


				final int  RX10_TEMP1067 = RX10_TEMP1066+1;

				for(int RX10_TEMP1064=0; RX10_TEMP1064 < RX10_TEMP1067; RX10_TEMP1064++)
					{

					final int RX10_TEMP1069 = RX10_TEMP1064;


					final Point1 X10_TEMP444 = Program.regionOrdinalPoint1(RX10_TEMP1065, RX10_TEMP1069,myUniquePlacePoint);


					final int pl = X10_TEMP444.f0;


					final Region1 RX10_TEMP1070 = X10_TEMP443.dReg;


					final int RX10_TEMP1071 = Program.searchPointInRegion1(RX10_TEMP1070, X10_TEMP444,myUniquePlacePoint);


					final int RX10_TEMP1072 = 0;


					final boolean RX10_TEMP1073 = RX10_TEMP1071 < RX10_TEMP1072;

					if(RX10_TEMP1073)
						{

						final String RX10_TEMP1074 = "Point X10_TEMP444 not found in the distribution X10_TEMP443.";

						throw new RuntimeException(RX10_TEMP1074);

						}

					final int RX10_TEMP1075 = Program.getPlaceFromDist1(X10_TEMP443, RX10_TEMP1071,myUniquePlacePoint);


					final int X10_TEMP445 = RX10_TEMP1075;

					//async(X10_TEMP445)
						{

						final Point1 RX10_TEMP1076 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1076.hashCode());


						final Dist1 RX10_TEMP1077 = sizes.distValue;


						final Region1 RX10_TEMP1078 = RX10_TEMP1077.dReg;


						final int RX10_TEMP1079 = Program.searchPointInRegion1(RX10_TEMP1078, RX10_TEMP1076,X10_TEMP445);


						final int RX10_TEMP1080 = 0;


						final boolean RX10_TEMP1081 = RX10_TEMP1079 < RX10_TEMP1080;

						if(RX10_TEMP1081)
							{

							String RX10_TEMP1082 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1082);

							}

						final int RX10_TEMP1083 = Program.getPlaceFromDist1(RX10_TEMP1077, RX10_TEMP1079,X10_TEMP445);


						final int RX10_TEMP1085 = 0;


						final boolean RX10_TEMP1086 = RX10_TEMP1083 != RX10_TEMP1085;

						if(RX10_TEMP1086)
							{

							String RX10_TEMP1084 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1084);

							}

						final int RX10_TEMP1087 = Program.getRefArrayValue1int(sizes, RX10_TEMP1079,X10_TEMP445);


						final int X10_TEMP449 = RX10_TEMP1087;


						final Point1 RX10_TEMP1088 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1088.hashCode());


						final Dist1 RX10_TEMP1089 = outLt.distValue;


						final Region1 RX10_TEMP1090 = RX10_TEMP1089.dReg;


						final int RX10_TEMP1091 = Program.searchPointInRegion1(RX10_TEMP1090, RX10_TEMP1088,X10_TEMP445);


						final int RX10_TEMP1092 = 0;


						final boolean RX10_TEMP1093 = RX10_TEMP1091 < RX10_TEMP1092;

						if(RX10_TEMP1093)
							{

							String RX10_TEMP1094 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1094);

							}

						final int RX10_TEMP1095 = Program.getPlaceFromDist1(RX10_TEMP1089, RX10_TEMP1091,X10_TEMP445);


						final int RX10_TEMP1097 = 0;


						final boolean RX10_TEMP1098 = RX10_TEMP1095 != RX10_TEMP1097;

						if(RX10_TEMP1098)
							{

							String RX10_TEMP1096 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP1096);

							}

						final int RX10_TEMP1099 = Program.getRefArrayValue1int(outLt, RX10_TEMP1091,X10_TEMP445);


						final int X10_TEMP450 = RX10_TEMP1099;


						final int X10_TEMP453 = X10_TEMP449 - X10_TEMP450;


						final int X10_TEMP454 = X10_TEMP453;


						final Point1 RX10_TEMP1100 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1100.hashCode());


						final Dist1 RX10_TEMP1101 = sizes.distValue;


						final Region1 RX10_TEMP1102 = RX10_TEMP1101.dReg;


						final int RX10_TEMP1103 = Program.searchPointInRegion1(RX10_TEMP1102, RX10_TEMP1100,X10_TEMP445);


						final int RX10_TEMP1104 = 0;


						final boolean RX10_TEMP1105 = RX10_TEMP1103 < RX10_TEMP1104;

						if(RX10_TEMP1105)
							{

							String RX10_TEMP1106 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1106);

							}

						final int RX10_TEMP1107 = Program.getPlaceFromDist1(RX10_TEMP1101, RX10_TEMP1103,X10_TEMP445);


						final int RX10_TEMP1109 = 0;


						final boolean RX10_TEMP1110 = RX10_TEMP1107 != RX10_TEMP1109;

						if(RX10_TEMP1110)
							{

							String RX10_TEMP1108 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1108);

							}
						Program.setRefArrayValue1int(sizes, RX10_TEMP1103, X10_TEMP454,X10_TEMP445);

						final Point1 RX10_TEMP1111 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1111.hashCode());


						final Dist1 RX10_TEMP1112 = offsets.distValue;


						final Region1 RX10_TEMP1113 = RX10_TEMP1112.dReg;


						final int RX10_TEMP1114 = Program.searchPointInRegion1(RX10_TEMP1113, RX10_TEMP1111,X10_TEMP445);


						final int RX10_TEMP1115 = 0;


						final boolean RX10_TEMP1116 = RX10_TEMP1114 < RX10_TEMP1115;

						if(RX10_TEMP1116)
							{

							String RX10_TEMP1117 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1117);

							}

						final int RX10_TEMP1118 = Program.getPlaceFromDist1(RX10_TEMP1112, RX10_TEMP1114,X10_TEMP445);


						final int RX10_TEMP1120 = 0;


						final boolean RX10_TEMP1121 = RX10_TEMP1118 != RX10_TEMP1120;

						if(RX10_TEMP1121)
							{

							String RX10_TEMP1119 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP1119);

							}

						final int RX10_TEMP1122 = Program.getRefArrayValue1int(offsets, RX10_TEMP1114,X10_TEMP445);


						final int X10_TEMP458 = RX10_TEMP1122;


						final Point1 RX10_TEMP1123 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1123.hashCode());


						final Dist1 RX10_TEMP1124 = outLt.distValue;


						final Region1 RX10_TEMP1125 = RX10_TEMP1124.dReg;


						final int RX10_TEMP1126 = Program.searchPointInRegion1(RX10_TEMP1125, RX10_TEMP1123,X10_TEMP445);


						final int RX10_TEMP1127 = 0;


						final boolean RX10_TEMP1128 = RX10_TEMP1126 < RX10_TEMP1127;

						if(RX10_TEMP1128)
							{

							String RX10_TEMP1129 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1129);

							}

						final int RX10_TEMP1130 = Program.getPlaceFromDist1(RX10_TEMP1124, RX10_TEMP1126,X10_TEMP445);


						final int RX10_TEMP1132 = 0;


						final boolean RX10_TEMP1133 = RX10_TEMP1130 != RX10_TEMP1132;

						if(RX10_TEMP1133)
							{

							String RX10_TEMP1131 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP1131);

							}

						final int RX10_TEMP1134 = Program.getRefArrayValue1int(outLt, RX10_TEMP1126,X10_TEMP445);


						final int X10_TEMP459 = RX10_TEMP1134;


						final int X10_TEMP462 = X10_TEMP458 + X10_TEMP459;


						final int X10_TEMP463 = X10_TEMP462;


						final Point1 RX10_TEMP1135 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1135.hashCode());


						final Dist1 RX10_TEMP1136 = offsets.distValue;


						final Region1 RX10_TEMP1137 = RX10_TEMP1136.dReg;


						final int RX10_TEMP1138 = Program.searchPointInRegion1(RX10_TEMP1137, RX10_TEMP1135,X10_TEMP445);


						final int RX10_TEMP1139 = 0;


						final boolean RX10_TEMP1140 = RX10_TEMP1138 < RX10_TEMP1139;

						if(RX10_TEMP1140)
							{

							String RX10_TEMP1141 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1141);

							}

						final int RX10_TEMP1142 = Program.getPlaceFromDist1(RX10_TEMP1136, RX10_TEMP1138,X10_TEMP445);


						final int RX10_TEMP1144 = 0;


						final boolean RX10_TEMP1145 = RX10_TEMP1142 != RX10_TEMP1144;

						if(RX10_TEMP1145)
							{

							String RX10_TEMP1143 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP1143);

							}
						Program.setRefArrayValue1int(offsets, RX10_TEMP1138, X10_TEMP463,X10_TEMP445);

						final Point1 RX10_TEMP1146 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1146.hashCode());


						final Dist1 RX10_TEMP1147 = sizes.distValue;


						final Region1 RX10_TEMP1148 = RX10_TEMP1147.dReg;


						final int RX10_TEMP1149 = Program.searchPointInRegion1(RX10_TEMP1148, RX10_TEMP1146,X10_TEMP445);


						final int RX10_TEMP1150 = 0;


						final boolean RX10_TEMP1151 = RX10_TEMP1149 < RX10_TEMP1150;

						if(RX10_TEMP1151)
							{

							String RX10_TEMP1152 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1152);

							}

						final int RX10_TEMP1153 = Program.getPlaceFromDist1(RX10_TEMP1147, RX10_TEMP1149,X10_TEMP445);


						final int RX10_TEMP1155 = 0;


						final boolean RX10_TEMP1156 = RX10_TEMP1153 != RX10_TEMP1155;

						if(RX10_TEMP1156)
							{

							String RX10_TEMP1154 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1154);

							}

						final int RX10_TEMP1157 = Program.getRefArrayValue1int(sizes, RX10_TEMP1149,X10_TEMP445);


						final int X10_TEMP465 = RX10_TEMP1157;


						final int X10_TEMP466 = 0;


						final boolean X10_TEMP470 = X10_TEMP465 > X10_TEMP466;


						final Point1 RX10_TEMP1158 = new Point1(pl,X10_TEMP445);
						
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1158.hashCode());


						final Dist1 RX10_TEMP1159 = outLt.distValue;


						final Region1 RX10_TEMP1160 = RX10_TEMP1159.dReg;


						final int RX10_TEMP1161 = Program.searchPointInRegion1(RX10_TEMP1160, RX10_TEMP1158,X10_TEMP445);


						final int RX10_TEMP1162 = 0;


						final boolean RX10_TEMP1163 = RX10_TEMP1161 < RX10_TEMP1162;

						if(RX10_TEMP1163)
							{

							String RX10_TEMP1164 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1164);

							}

						final int RX10_TEMP1165 = Program.getPlaceFromDist1(RX10_TEMP1159, RX10_TEMP1161,X10_TEMP445);


						final int RX10_TEMP1167 = 0;


						final boolean RX10_TEMP1168 = RX10_TEMP1165 != RX10_TEMP1167;

						if(RX10_TEMP1168)
							{

							String RX10_TEMP1166 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP1166);

							}

						final int RX10_TEMP1169 = Program.getRefArrayValue1int(outLt, RX10_TEMP1161,X10_TEMP445);


						final int X10_TEMP468 = RX10_TEMP1169;


						final int X10_TEMP469 = 0;


						final boolean X10_TEMP471 = X10_TEMP468 > X10_TEMP469;


						final boolean X10_TEMP473 = X10_TEMP470 && X10_TEMP471;

						if(X10_TEMP473)
							{

							final int X10_TEMP479 = 0;


							final Point1 RX10_TEMP1170 = new Point1(pl,X10_TEMP445);
							
Program.globalPointerHashMap.get(X10_TEMP445).add(RX10_TEMP1170.hashCode());


							final Dist1 RX10_TEMP1171 = sizes.distValue;


							final Region1 RX10_TEMP1172 = RX10_TEMP1171.dReg;


							final int RX10_TEMP1173 = Program.searchPointInRegion1(RX10_TEMP1172, RX10_TEMP1170,X10_TEMP445);


							final int RX10_TEMP1174 = 0;


							final boolean RX10_TEMP1175 = RX10_TEMP1173 < RX10_TEMP1174;

							if(RX10_TEMP1175)
								{

								String RX10_TEMP1176 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1176);

								}

							final int RX10_TEMP1177 = Program.getPlaceFromDist1(RX10_TEMP1171, RX10_TEMP1173,X10_TEMP445);


							final int RX10_TEMP1179 = 0;


							final boolean RX10_TEMP1180 = RX10_TEMP1177 != RX10_TEMP1179;

							if(RX10_TEMP1180)
								{

								String RX10_TEMP1178 = "Bad place access for array sizes";

								throw new RuntimeException(RX10_TEMP1178);

								}

							final int RX10_TEMP1181 = Program.getRefArrayValue1int(sizes, RX10_TEMP1173,X10_TEMP445);


							final int X10_TEMP476 = RX10_TEMP1181;


							final int X10_TEMP477 = 1;


							final int X10_TEMP480 = X10_TEMP476 - X10_TEMP477;


							final Region1 X10_TEMP482 = Program.createNewRegion1R(X10_TEMP479, X10_TEMP480,X10_TEMP445);


							final int RX10_TEMP1186 = 1;


							int RX10_TEMP1184 = X10_TEMP482.regSize;


							RX10_TEMP1184 = RX10_TEMP1184 - RX10_TEMP1186;


							final int  RX10_TEMP1185 = RX10_TEMP1184+1;

							for(int RX10_TEMP1182=0; RX10_TEMP1182 < RX10_TEMP1185; RX10_TEMP1182++)
								{

								final int RX10_TEMP1187 = RX10_TEMP1182;


								final Point1 RX10_TEMP1183 = Program.regionOrdinalPoint1(X10_TEMP482, RX10_TEMP1187,X10_TEMP445);


								final int i = RX10_TEMP1183.f0;

								/*FINISH
*/									{

									final int X10_TEMP484 = 0;


									final int RX10_TEMP1192 = 1;


									int RX10_TEMP1190 = rRank2.regSize;


									RX10_TEMP1190 = RX10_TEMP1190 - RX10_TEMP1192;


									final int  RX10_TEMP1191 = RX10_TEMP1190+1;

									for(int RX10_TEMP1188=0; RX10_TEMP1188 < RX10_TEMP1191; RX10_TEMP1188++)
										{

										final int RX10_TEMP1193 = RX10_TEMP1188;


										final Point1 RX10_TEMP1189 = Program.regionOrdinalPoint1(rRank2, RX10_TEMP1193,X10_TEMP445);


										final int j = RX10_TEMP1189.f0;

										//async(X10_TEMP484)
											{

											final Point1 RX10_TEMP1194 = new Point1(pl,X10_TEMP484);
											
Program.globalPointerHashMap.get(X10_TEMP484).add(RX10_TEMP1194.hashCode());


											final Dist1 RX10_TEMP1195 = outLt.distValue;


											final Region1 RX10_TEMP1196 = RX10_TEMP1195.dReg;


											final int RX10_TEMP1197 = Program.searchPointInRegion1(RX10_TEMP1196, RX10_TEMP1194,X10_TEMP484);


											final int RX10_TEMP1198 = 0;


											final boolean RX10_TEMP1199 = RX10_TEMP1197 < RX10_TEMP1198;

											if(RX10_TEMP1199)
												{

												String RX10_TEMP1200 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1200);

												}

											final int RX10_TEMP1201 = Program.getPlaceFromDist1(RX10_TEMP1195, RX10_TEMP1197,X10_TEMP484);


											final int RX10_TEMP1203 = 0;


											final boolean RX10_TEMP1204 = RX10_TEMP1201 != RX10_TEMP1203;

											if(RX10_TEMP1204)
												{

												String RX10_TEMP1202 = "Bad place access for array outLt";

												throw new RuntimeException(RX10_TEMP1202);

												}

											final int RX10_TEMP1205 = Program.getRefArrayValue1int(outLt, RX10_TEMP1197,X10_TEMP484);


											final int X10_TEMP490 = RX10_TEMP1205;


											final int X10_TEMP493 = i + X10_TEMP490;


											final Point3 RX10_TEMP1206 = new Point3(pl, X10_TEMP493, j,X10_TEMP484);
											
Program.globalPointerHashMap.get(X10_TEMP484).add(RX10_TEMP1206.hashCode());


											final Dist3 RX10_TEMP1207 = srcBuffer.distValue;


											final Region3 RX10_TEMP1208 = RX10_TEMP1207.dReg;


											final int RX10_TEMP1209 = Program.searchPointInRegion3(RX10_TEMP1208, RX10_TEMP1206,X10_TEMP484);


											final int RX10_TEMP1210 = 0;


											final boolean RX10_TEMP1211 = RX10_TEMP1209 < RX10_TEMP1210;

											if(RX10_TEMP1211)
												{

												String RX10_TEMP1212 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1212);

												}

											final int RX10_TEMP1213 = Program.getPlaceFromDist3(RX10_TEMP1207, RX10_TEMP1209,X10_TEMP484);


											final int RX10_TEMP1215 = 0;


											final boolean RX10_TEMP1216 = RX10_TEMP1213 != RX10_TEMP1215;

											if(RX10_TEMP1216)
												{

												String RX10_TEMP1214 = "Bad place access for array srcBuffer";

												throw new RuntimeException(RX10_TEMP1214);

												}

											final double RX10_TEMP1217 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP1209,X10_TEMP484);


											final double X10_TEMP496 = RX10_TEMP1217;


											final double X10_TEMP497 = X10_TEMP496;


											final Point3 RX10_TEMP1218 = new Point3(pl, i, j,X10_TEMP484);
											
Program.globalPointerHashMap.get(X10_TEMP484).add(RX10_TEMP1218.hashCode());


											final Dist3 RX10_TEMP1219 = srcBuffer.distValue;


											final Region3 RX10_TEMP1220 = RX10_TEMP1219.dReg;


											final int RX10_TEMP1221 = Program.searchPointInRegion3(RX10_TEMP1220, RX10_TEMP1218,X10_TEMP484);


											final int RX10_TEMP1222 = 0;


											final boolean RX10_TEMP1223 = RX10_TEMP1221 < RX10_TEMP1222;

											if(RX10_TEMP1223)
												{

												String RX10_TEMP1224 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1224);

												}

											final int RX10_TEMP1225 = Program.getPlaceFromDist3(RX10_TEMP1219, RX10_TEMP1221,X10_TEMP484);


											final int RX10_TEMP1227 = 0;


											final boolean RX10_TEMP1228 = RX10_TEMP1225 != RX10_TEMP1227;

											if(RX10_TEMP1228)
												{

												String RX10_TEMP1226 = "Bad place access for array srcBuffer";

												throw new RuntimeException(RX10_TEMP1226);

												}
											Program.setRefArrayValue3double(srcBuffer, RX10_TEMP1221, X10_TEMP497,X10_TEMP484);
											}
										}
									}
								}
							}

						final Point1 RX10_TEMP1229 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1229.hashCode());


						final Dist1 RX10_TEMP1230 = sizes.distValue;


						final Region1 RX10_TEMP1231 = RX10_TEMP1230.dReg;


						final int RX10_TEMP1232 = Program.searchPointInRegion1(RX10_TEMP1231, RX10_TEMP1229,myUniquePlacePoint);


						final int RX10_TEMP1233 = 0;


						final boolean RX10_TEMP1234 = RX10_TEMP1232 < RX10_TEMP1233;

						if(RX10_TEMP1234)
							{

							String RX10_TEMP1235 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1235);

							}

						final int RX10_TEMP1236 = Program.getPlaceFromDist1(RX10_TEMP1230, RX10_TEMP1232,myUniquePlacePoint);


						final int RX10_TEMP1238 = 0;


						final boolean RX10_TEMP1239 = RX10_TEMP1236 != RX10_TEMP1238;

						if(RX10_TEMP1239)
							{

							String RX10_TEMP1237 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1237);

							}

						final int RX10_TEMP1240 = Program.getRefArrayValue1int(sizes, RX10_TEMP1232,myUniquePlacePoint);


						final int X10_TEMP501 = RX10_TEMP1240;


						final Point1 RX10_TEMP1241 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1241.hashCode());


						final Dist1 RX10_TEMP1242 = inRt.distValue;


						final Region1 RX10_TEMP1243 = RX10_TEMP1242.dReg;


						final int RX10_TEMP1244 = Program.searchPointInRegion1(RX10_TEMP1243, RX10_TEMP1241,myUniquePlacePoint);


						final int RX10_TEMP1245 = 0;


						final boolean RX10_TEMP1246 = RX10_TEMP1244 < RX10_TEMP1245;

						if(RX10_TEMP1246)
							{

							String RX10_TEMP1247 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1247);

							}

						final int RX10_TEMP1248 = Program.getPlaceFromDist1(RX10_TEMP1242, RX10_TEMP1244,myUniquePlacePoint);


						final int RX10_TEMP1250 = 0;


						final boolean RX10_TEMP1251 = RX10_TEMP1248 != RX10_TEMP1250;

						if(RX10_TEMP1251)
							{

							String RX10_TEMP1249 = "Bad place access for array inRt";

							throw new RuntimeException(RX10_TEMP1249);

							}

						final int RX10_TEMP1252 = Program.getRefArrayValue1int(inRt, RX10_TEMP1244,myUniquePlacePoint);


						final int X10_TEMP502 = RX10_TEMP1252;


						final int X10_TEMP503 = X10_TEMP501 + X10_TEMP502;


						final int X10_TEMP506 = X10_TEMP503 - MAX_ROWS;


						final int X10_TEMP507 = 0;


						final int X10_TEMP510 = Program.X10Util_maxInt(X10_TEMP506, X10_TEMP507,myUniquePlacePoint);


						final int X10_TEMP511 = X10_TEMP510;


						final Point1 RX10_TEMP1253 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1253.hashCode());


						final Dist1 RX10_TEMP1254 = outLt.distValue;


						final Region1 RX10_TEMP1255 = RX10_TEMP1254.dReg;


						final int RX10_TEMP1256 = Program.searchPointInRegion1(RX10_TEMP1255, RX10_TEMP1253,myUniquePlacePoint);


						final int RX10_TEMP1257 = 0;


						final boolean RX10_TEMP1258 = RX10_TEMP1256 < RX10_TEMP1257;

						if(RX10_TEMP1258)
							{

							String RX10_TEMP1259 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1259);

							}

						final int RX10_TEMP1260 = Program.getPlaceFromDist1(RX10_TEMP1254, RX10_TEMP1256,myUniquePlacePoint);


						final int RX10_TEMP1262 = 0;


						final boolean RX10_TEMP1263 = RX10_TEMP1260 != RX10_TEMP1262;

						if(RX10_TEMP1263)
							{

							String RX10_TEMP1261 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP1261);

							}
						Program.setRefArrayValue1int(outLt, RX10_TEMP1256, X10_TEMP511,myUniquePlacePoint);

						final Point1 RX10_TEMP1264 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1264.hashCode());


						final Dist1 RX10_TEMP1265 = outLt.distValue;


						final Region1 RX10_TEMP1266 = RX10_TEMP1265.dReg;


						final int RX10_TEMP1267 = Program.searchPointInRegion1(RX10_TEMP1266, RX10_TEMP1264,myUniquePlacePoint);


						final int RX10_TEMP1268 = 0;


						final boolean RX10_TEMP1269 = RX10_TEMP1267 < RX10_TEMP1268;

						if(RX10_TEMP1269)
							{

							String RX10_TEMP1270 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1270);

							}

						final int RX10_TEMP1271 = Program.getPlaceFromDist1(RX10_TEMP1265, RX10_TEMP1267,myUniquePlacePoint);


						final int RX10_TEMP1273 = 0;


						final boolean RX10_TEMP1274 = RX10_TEMP1271 != RX10_TEMP1273;

						if(RX10_TEMP1274)
							{

							String RX10_TEMP1272 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP1272);

							}

						final int RX10_TEMP1275 = Program.getRefArrayValue1int(outLt, RX10_TEMP1267,myUniquePlacePoint);


						final int X10_TEMP513 = RX10_TEMP1275;


						final int X10_TEMP514 = 0;


						final boolean X10_TEMP516 = X10_TEMP513 > X10_TEMP514;

						if(X10_TEMP516)
							{

							final Point1 RX10_TEMP1276 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1276.hashCode());


							final Dist1 RX10_TEMP1277 = pr.distValue;


							final Region1 RX10_TEMP1278 = RX10_TEMP1277.dReg;


							final int RX10_TEMP1279 = Program.searchPointInRegion1(RX10_TEMP1278, RX10_TEMP1276,myUniquePlacePoint);


							final int RX10_TEMP1280 = 0;


							final boolean RX10_TEMP1281 = RX10_TEMP1279 < RX10_TEMP1280;

							if(RX10_TEMP1281)
								{

								String RX10_TEMP1282 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1282);

								}

							final int RX10_TEMP1283 = Program.getPlaceFromDist1(RX10_TEMP1277, RX10_TEMP1279,myUniquePlacePoint);


							final int RX10_TEMP1285 = 0;


							final boolean RX10_TEMP1286 = RX10_TEMP1283 != RX10_TEMP1285;

							if(RX10_TEMP1286)
								{

								String RX10_TEMP1284 = "Bad place access for array pr";

								throw new RuntimeException(RX10_TEMP1284);

								}

							final int RX10_TEMP1287 = Program.getRefArrayValue1int(pr, RX10_TEMP1279,myUniquePlacePoint);


							final int X10_TEMP522 = RX10_TEMP1287;


							final Point1 RX10_TEMP1288 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1288.hashCode());


							final Dist1 RX10_TEMP1289 = outLt.distValue;


							final Region1 RX10_TEMP1290 = RX10_TEMP1289.dReg;


							final int RX10_TEMP1291 = Program.searchPointInRegion1(RX10_TEMP1290, RX10_TEMP1288,myUniquePlacePoint);


							final int RX10_TEMP1292 = 0;


							final boolean RX10_TEMP1293 = RX10_TEMP1291 < RX10_TEMP1292;

							if(RX10_TEMP1293)
								{

								String RX10_TEMP1294 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1294);

								}

							final int RX10_TEMP1295 = Program.getPlaceFromDist1(RX10_TEMP1289, RX10_TEMP1291,myUniquePlacePoint);


							final int RX10_TEMP1297 = 0;


							final boolean RX10_TEMP1298 = RX10_TEMP1295 != RX10_TEMP1297;

							if(RX10_TEMP1298)
								{

								String RX10_TEMP1296 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1296);

								}

							final int RX10_TEMP1299 = Program.getRefArrayValue1int(outLt, RX10_TEMP1291,myUniquePlacePoint);


							final int X10_TEMP523 = RX10_TEMP1299;


							final int X10_TEMP526 = Program.X10Util_maxInt(X10_TEMP522, X10_TEMP523,myUniquePlacePoint);


							final int X10_TEMP527 = X10_TEMP526;


							final Point1 RX10_TEMP1300 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1300.hashCode());


							final Dist1 RX10_TEMP1301 = pr.distValue;


							final Region1 RX10_TEMP1302 = RX10_TEMP1301.dReg;


							final int RX10_TEMP1303 = Program.searchPointInRegion1(RX10_TEMP1302, RX10_TEMP1300,myUniquePlacePoint);


							final int RX10_TEMP1304 = 0;


							final boolean RX10_TEMP1305 = RX10_TEMP1303 < RX10_TEMP1304;

							if(RX10_TEMP1305)
								{

								String RX10_TEMP1306 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1306);

								}

							final int RX10_TEMP1307 = Program.getPlaceFromDist1(RX10_TEMP1301, RX10_TEMP1303,myUniquePlacePoint);


							final int RX10_TEMP1309 = 0;


							final boolean RX10_TEMP1310 = RX10_TEMP1307 != RX10_TEMP1309;

							if(RX10_TEMP1310)
								{

								String RX10_TEMP1308 = "Bad place access for array pr";

								throw new RuntimeException(RX10_TEMP1308);

								}
							Program.setRefArrayValue1int(pr, RX10_TEMP1303, X10_TEMP527,myUniquePlacePoint);

							final Point1 RX10_TEMP1311 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1311.hashCode());


							final Dist1 RX10_TEMP1312 = inRt.distValue;


							final Region1 RX10_TEMP1313 = RX10_TEMP1312.dReg;


							final int RX10_TEMP1314 = Program.searchPointInRegion1(RX10_TEMP1313, RX10_TEMP1311,myUniquePlacePoint);


							final int RX10_TEMP1315 = 0;


							final boolean RX10_TEMP1316 = RX10_TEMP1314 < RX10_TEMP1315;

							if(RX10_TEMP1316)
								{

								String RX10_TEMP1317 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1317);

								}

							final int RX10_TEMP1318 = Program.getPlaceFromDist1(RX10_TEMP1312, RX10_TEMP1314,myUniquePlacePoint);


							final int RX10_TEMP1320 = 0;


							final boolean RX10_TEMP1321 = RX10_TEMP1318 != RX10_TEMP1320;

							if(RX10_TEMP1321)
								{

								String RX10_TEMP1319 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP1319);

								}

							final int RX10_TEMP1322 = Program.getRefArrayValue1int(inRt, RX10_TEMP1314,myUniquePlacePoint);


							final int X10_TEMP531 = RX10_TEMP1322;


							final Point1 RX10_TEMP1323 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1323.hashCode());


							final Dist1 RX10_TEMP1324 = outLt.distValue;


							final Region1 RX10_TEMP1325 = RX10_TEMP1324.dReg;


							final int RX10_TEMP1326 = Program.searchPointInRegion1(RX10_TEMP1325, RX10_TEMP1323,myUniquePlacePoint);


							final int RX10_TEMP1327 = 0;


							final boolean RX10_TEMP1328 = RX10_TEMP1326 < RX10_TEMP1327;

							if(RX10_TEMP1328)
								{

								String RX10_TEMP1329 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1329);

								}

							final int RX10_TEMP1330 = Program.getPlaceFromDist1(RX10_TEMP1324, RX10_TEMP1326,myUniquePlacePoint);


							final int RX10_TEMP1332 = 0;


							final boolean RX10_TEMP1333 = RX10_TEMP1330 != RX10_TEMP1332;

							if(RX10_TEMP1333)
								{

								String RX10_TEMP1331 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1331);

								}

							final int RX10_TEMP1334 = Program.getRefArrayValue1int(outLt, RX10_TEMP1326,myUniquePlacePoint);


							final int X10_TEMP532 = RX10_TEMP1334;


							final int X10_TEMP535 = X10_TEMP531 - X10_TEMP532;


							final int X10_TEMP536 = X10_TEMP535;


							final Point1 RX10_TEMP1335 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1335.hashCode());


							final Dist1 RX10_TEMP1336 = inRt.distValue;


							final Region1 RX10_TEMP1337 = RX10_TEMP1336.dReg;


							final int RX10_TEMP1338 = Program.searchPointInRegion1(RX10_TEMP1337, RX10_TEMP1335,myUniquePlacePoint);


							final int RX10_TEMP1339 = 0;


							final boolean RX10_TEMP1340 = RX10_TEMP1338 < RX10_TEMP1339;

							if(RX10_TEMP1340)
								{

								String RX10_TEMP1341 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1341);

								}

							final int RX10_TEMP1342 = Program.getPlaceFromDist1(RX10_TEMP1336, RX10_TEMP1338,myUniquePlacePoint);


							final int RX10_TEMP1344 = 0;


							final boolean RX10_TEMP1345 = RX10_TEMP1342 != RX10_TEMP1344;

							if(RX10_TEMP1345)
								{

								String RX10_TEMP1343 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP1343);

								}
							Program.setRefArrayValue1int(inRt, RX10_TEMP1338, X10_TEMP536,myUniquePlacePoint);
							}
						else
							{

							final Point1 RX10_TEMP1346 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1346.hashCode());


							final Dist1 RX10_TEMP1347 = outRt.distValue;


							final Region1 RX10_TEMP1348 = RX10_TEMP1347.dReg;


							final int RX10_TEMP1349 = Program.searchPointInRegion1(RX10_TEMP1348, RX10_TEMP1346,myUniquePlacePoint);


							final int RX10_TEMP1350 = 0;


							final boolean RX10_TEMP1351 = RX10_TEMP1349 < RX10_TEMP1350;

							if(RX10_TEMP1351)
								{

								String RX10_TEMP1352 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1352);

								}

							final int RX10_TEMP1353 = Program.getPlaceFromDist1(RX10_TEMP1347, RX10_TEMP1349,myUniquePlacePoint);


							final int RX10_TEMP1355 = 0;


							final boolean RX10_TEMP1356 = RX10_TEMP1353 != RX10_TEMP1355;

							if(RX10_TEMP1356)
								{

								String RX10_TEMP1354 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP1354);

								}

							final int RX10_TEMP1357 = Program.getRefArrayValue1int(outRt, RX10_TEMP1349,myUniquePlacePoint);


							final int X10_TEMP538 = RX10_TEMP1357;


							final int X10_TEMP539 = 0;


							final boolean X10_TEMP541 = X10_TEMP538 > X10_TEMP539;

							if(X10_TEMP541)
								{
								}
							}
 						/*FINISH
*/							{

							final int X10_TEMP547 = 0;


							final Point1 RX10_TEMP1358 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1358.hashCode());


							final Dist1 RX10_TEMP1359 = inRt.distValue;


							final Region1 RX10_TEMP1360 = RX10_TEMP1359.dReg;


							final int RX10_TEMP1361 = Program.searchPointInRegion1(RX10_TEMP1360, RX10_TEMP1358,myUniquePlacePoint);


							final int RX10_TEMP1362 = 0;


							final boolean RX10_TEMP1363 = RX10_TEMP1361 < RX10_TEMP1362;

							if(RX10_TEMP1363)
								{

								String RX10_TEMP1364 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1364);

								}

							final int RX10_TEMP1365 = Program.getPlaceFromDist1(RX10_TEMP1359, RX10_TEMP1361,myUniquePlacePoint);


							final int RX10_TEMP1367 = 0;


							final boolean RX10_TEMP1368 = RX10_TEMP1365 != RX10_TEMP1367;

							if(RX10_TEMP1368)
								{

								String RX10_TEMP1366 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP1366);

								}

							final int RX10_TEMP1369 = Program.getRefArrayValue1int(inRt, RX10_TEMP1361,myUniquePlacePoint);


							final int X10_TEMP544 = RX10_TEMP1369;


							final int X10_TEMP545 = 1;


							final int X10_TEMP548 = X10_TEMP544 - X10_TEMP545;


							final Region2 X10_TEMP551 = Program.createNewRegion2RA(X10_TEMP547, X10_TEMP548, rRank2,myUniquePlacePoint);


							final int X10_TEMP552 = 0;


							final int RX10_TEMP1374 = 1;


							int RX10_TEMP1372 = X10_TEMP551.regSize;


							RX10_TEMP1372 = RX10_TEMP1372 - RX10_TEMP1374;


							final int  RX10_TEMP1373 = RX10_TEMP1372+1;

							for(int RX10_TEMP1370=0; RX10_TEMP1370 < RX10_TEMP1373; RX10_TEMP1370++)
								{

								final int RX10_TEMP1375 = RX10_TEMP1370;


								final Point2 RX10_TEMP1371 = Program.regionOrdinalPoint2(X10_TEMP551, RX10_TEMP1375,myUniquePlacePoint);


								final int i = RX10_TEMP1371.f0;


								final int j = RX10_TEMP1371.f1;

								//async(X10_TEMP552)
									{

									final Point1 RX10_TEMP1376 = new Point1(pl,X10_TEMP552);
									
Program.globalPointerHashMap.get(X10_TEMP552).add(RX10_TEMP1376.hashCode());


									final Dist1 RX10_TEMP1377 = sizes.distValue;


									final Region1 RX10_TEMP1378 = RX10_TEMP1377.dReg;


									final int RX10_TEMP1379 = Program.searchPointInRegion1(RX10_TEMP1378, RX10_TEMP1376,X10_TEMP552);


									final int RX10_TEMP1380 = 0;


									final boolean RX10_TEMP1381 = RX10_TEMP1379 < RX10_TEMP1380;

									if(RX10_TEMP1381)
										{

										String RX10_TEMP1382 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1382);

										}

									final int RX10_TEMP1383 = Program.getPlaceFromDist1(RX10_TEMP1377, RX10_TEMP1379,X10_TEMP552);


									final int RX10_TEMP1385 = 0;


									final boolean RX10_TEMP1386 = RX10_TEMP1383 != RX10_TEMP1385;

									if(RX10_TEMP1386)
										{

										String RX10_TEMP1384 = "Bad place access for array sizes";

										throw new RuntimeException(RX10_TEMP1384);

										}

									final int RX10_TEMP1387 = Program.getRefArrayValue1int(sizes, RX10_TEMP1379,X10_TEMP552);


									final int X10_TEMP555 = RX10_TEMP1387;


									final int X10_TEMP558 = i + X10_TEMP555;


									final Point3 RX10_TEMP1388 = new Point3(pl, i, j,X10_TEMP552);
									
Program.globalPointerHashMap.get(X10_TEMP552).add(RX10_TEMP1388.hashCode());


									final Dist3 RX10_TEMP1389 = dstBuffer.distValue;


									final Region3 RX10_TEMP1390 = RX10_TEMP1389.dReg;


									final int RX10_TEMP1391 = Program.searchPointInRegion3(RX10_TEMP1390, RX10_TEMP1388,X10_TEMP552);


									final int RX10_TEMP1392 = 0;


									final boolean RX10_TEMP1393 = RX10_TEMP1391 < RX10_TEMP1392;

									if(RX10_TEMP1393)
										{

										String RX10_TEMP1394 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1394);

										}

									final int RX10_TEMP1395 = Program.getPlaceFromDist3(RX10_TEMP1389, RX10_TEMP1391,X10_TEMP552);


									final int RX10_TEMP1397 = 0;


									final boolean RX10_TEMP1398 = RX10_TEMP1395 != RX10_TEMP1397;

									if(RX10_TEMP1398)
										{

										String RX10_TEMP1396 = "Bad place access for array dstBuffer";

										throw new RuntimeException(RX10_TEMP1396);

										}

									final double RX10_TEMP1399 = Program.getRefArrayValue3double(dstBuffer, RX10_TEMP1391,X10_TEMP552);


									final double X10_TEMP564 = RX10_TEMP1399;


									final double X10_TEMP565 = X10_TEMP564;


									final Point3 RX10_TEMP1400 = new Point3(pl, X10_TEMP558, j,X10_TEMP552);
									
Program.globalPointerHashMap.get(X10_TEMP552).add(RX10_TEMP1400.hashCode());


									final Dist3 RX10_TEMP1401 = srcBuffer.distValue;


									final Region3 RX10_TEMP1402 = RX10_TEMP1401.dReg;


									final int RX10_TEMP1403 = Program.searchPointInRegion3(RX10_TEMP1402, RX10_TEMP1400,X10_TEMP552);


									final int RX10_TEMP1404 = 0;


									final boolean RX10_TEMP1405 = RX10_TEMP1403 < RX10_TEMP1404;

									if(RX10_TEMP1405)
										{

										String RX10_TEMP1406 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1406);

										}

									final int RX10_TEMP1407 = Program.getPlaceFromDist3(RX10_TEMP1401, RX10_TEMP1403,X10_TEMP552);


									final int RX10_TEMP1409 = 0;


									final boolean RX10_TEMP1410 = RX10_TEMP1407 != RX10_TEMP1409;

									if(RX10_TEMP1410)
										{

										String RX10_TEMP1408 = "Bad place access for array srcBuffer";

										throw new RuntimeException(RX10_TEMP1408);

										}
									Program.setRefArrayValue3double(srcBuffer, RX10_TEMP1403, X10_TEMP565,X10_TEMP552);
									}
								}
							}

						final Point1 RX10_TEMP1411 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1411.hashCode());


						final Dist1 RX10_TEMP1412 = sizes.distValue;


						final Region1 RX10_TEMP1413 = RX10_TEMP1412.dReg;


						final int RX10_TEMP1414 = Program.searchPointInRegion1(RX10_TEMP1413, RX10_TEMP1411,myUniquePlacePoint);


						final int RX10_TEMP1415 = 0;


						final boolean RX10_TEMP1416 = RX10_TEMP1414 < RX10_TEMP1415;

						if(RX10_TEMP1416)
							{

							String RX10_TEMP1417 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1417);

							}

						final int RX10_TEMP1418 = Program.getPlaceFromDist1(RX10_TEMP1412, RX10_TEMP1414,myUniquePlacePoint);


						final int RX10_TEMP1420 = 0;


						final boolean RX10_TEMP1421 = RX10_TEMP1418 != RX10_TEMP1420;

						if(RX10_TEMP1421)
							{

							String RX10_TEMP1419 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1419);

							}

						final int RX10_TEMP1422 = Program.getRefArrayValue1int(sizes, RX10_TEMP1414,myUniquePlacePoint);


						final int X10_TEMP569 = RX10_TEMP1422;


						final Point1 RX10_TEMP1423 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1423.hashCode());


						final Dist1 RX10_TEMP1424 = inRt.distValue;


						final Region1 RX10_TEMP1425 = RX10_TEMP1424.dReg;


						final int RX10_TEMP1426 = Program.searchPointInRegion1(RX10_TEMP1425, RX10_TEMP1423,myUniquePlacePoint);


						final int RX10_TEMP1427 = 0;


						final boolean RX10_TEMP1428 = RX10_TEMP1426 < RX10_TEMP1427;

						if(RX10_TEMP1428)
							{

							String RX10_TEMP1429 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1429);

							}

						final int RX10_TEMP1430 = Program.getPlaceFromDist1(RX10_TEMP1424, RX10_TEMP1426,myUniquePlacePoint);


						final int RX10_TEMP1432 = 0;


						final boolean RX10_TEMP1433 = RX10_TEMP1430 != RX10_TEMP1432;

						if(RX10_TEMP1433)
							{

							String RX10_TEMP1431 = "Bad place access for array inRt";

							throw new RuntimeException(RX10_TEMP1431);

							}

						final int RX10_TEMP1434 = Program.getRefArrayValue1int(inRt, RX10_TEMP1426,myUniquePlacePoint);


						final int X10_TEMP570 = RX10_TEMP1434;


						final int X10_TEMP573 = X10_TEMP569 + X10_TEMP570;


						final int X10_TEMP574 = X10_TEMP573;


						final Point1 RX10_TEMP1435 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1435.hashCode());


						final Dist1 RX10_TEMP1436 = sizes.distValue;


						final Region1 RX10_TEMP1437 = RX10_TEMP1436.dReg;


						final int RX10_TEMP1438 = Program.searchPointInRegion1(RX10_TEMP1437, RX10_TEMP1435,myUniquePlacePoint);


						final int RX10_TEMP1439 = 0;


						final boolean RX10_TEMP1440 = RX10_TEMP1438 < RX10_TEMP1439;

						if(RX10_TEMP1440)
							{

							String RX10_TEMP1441 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1441);

							}

						final int RX10_TEMP1442 = Program.getPlaceFromDist1(RX10_TEMP1436, RX10_TEMP1438,myUniquePlacePoint);


						final int RX10_TEMP1444 = 0;


						final boolean RX10_TEMP1445 = RX10_TEMP1442 != RX10_TEMP1444;

						if(RX10_TEMP1445)
							{

							String RX10_TEMP1443 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1443);

							}
						Program.setRefArrayValue1int(sizes, RX10_TEMP1438, X10_TEMP574,myUniquePlacePoint);

						final int X10_TEMP577 = 0;


						final Region1 rLocal1 = Program.X10Util_getLRank2D(dDst, X10_TEMP577,myUniquePlacePoint);


						final int X10_TEMP579 = rLocal1.regSize;


						final int X10_TEMP580 = 0;


						final boolean X10_TEMP581 = X10_TEMP579 == X10_TEMP580;


						final boolean X10_TEMP583 = _X10Util_ENABLE_CHECKS && X10_TEMP581;

						if(X10_TEMP583)
							{

							final String X10_TEMP584 = "Destination distribution ";


							final String X10_TEMP585 = "is empty";


							final String X10_TEMP587 = X10_TEMP584 + X10_TEMP585;

							throw new RuntimeException(X10_TEMP587);

							}

						final int rsize = rLocal1.regSize;


						final int RX10_TEMP1446 = rLocal1.regSize;


						final int RX10_TEMP1447 = 0;


						final boolean RX10_TEMP1448 = RX10_TEMP1446 <= RX10_TEMP1447;

						if(RX10_TEMP1448)
							{

							final String RX10_TEMP1449 = "Operation low() not defined on empty region rLocal1";

							throw new RuntimeException(RX10_TEMP1449);

							}

						final int offset = Program.regionLow(rLocal1,myUniquePlacePoint);


						final Point1 RX10_TEMP1450 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1450.hashCode());


						final Dist1 RX10_TEMP1451 = sizes.distValue;


						final Region1 RX10_TEMP1452 = RX10_TEMP1451.dReg;


						final int RX10_TEMP1453 = Program.searchPointInRegion1(RX10_TEMP1452, RX10_TEMP1450,myUniquePlacePoint);


						final int RX10_TEMP1454 = 0;


						final boolean RX10_TEMP1455 = RX10_TEMP1453 < RX10_TEMP1454;

						if(RX10_TEMP1455)
							{

							String RX10_TEMP1456 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1456);

							}

						final int RX10_TEMP1457 = Program.getPlaceFromDist1(RX10_TEMP1451, RX10_TEMP1453,myUniquePlacePoint);


						final int RX10_TEMP1459 = 0;


						final boolean RX10_TEMP1460 = RX10_TEMP1457 != RX10_TEMP1459;

						if(RX10_TEMP1460)
							{

							String RX10_TEMP1458 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1458);

							}

						final int RX10_TEMP1461 = Program.getRefArrayValue1int(sizes, RX10_TEMP1453,myUniquePlacePoint);


						final int X10_TEMP592 = RX10_TEMP1461;


						final int X10_TEMP594 = X10_TEMP592 - rsize;


						final int X10_TEMP599 = Math.abs(X10_TEMP594);


						final Point1 RX10_TEMP1462 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1462.hashCode());


						final Dist1 RX10_TEMP1463 = offsets.distValue;


						final Region1 RX10_TEMP1464 = RX10_TEMP1463.dReg;


						final int RX10_TEMP1465 = Program.searchPointInRegion1(RX10_TEMP1464, RX10_TEMP1462,myUniquePlacePoint);


						final int RX10_TEMP1466 = 0;


						final boolean RX10_TEMP1467 = RX10_TEMP1465 < RX10_TEMP1466;

						if(RX10_TEMP1467)
							{

							String RX10_TEMP1468 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1468);

							}

						final int RX10_TEMP1469 = Program.getPlaceFromDist1(RX10_TEMP1463, RX10_TEMP1465,myUniquePlacePoint);


						final int RX10_TEMP1471 = 0;


						final boolean RX10_TEMP1472 = RX10_TEMP1469 != RX10_TEMP1471;

						if(RX10_TEMP1472)
							{

							String RX10_TEMP1470 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP1470);

							}

						final int RX10_TEMP1473 = Program.getRefArrayValue1int(offsets, RX10_TEMP1465,myUniquePlacePoint);


						final int X10_TEMP596 = RX10_TEMP1473;


						final int X10_TEMP598 = X10_TEMP596 - offset;


						final int X10_TEMP600 = Math.abs(X10_TEMP598);


						final int X10_TEMP602 = X10_TEMP599 + X10_TEMP600;


						final int X10_TEMP605 = X10_TEMP602;


						final Point1 RX10_TEMP1474 = new Point1(pl,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1474.hashCode());


						final Dist1 RX10_TEMP1475 = ter.distValue;


						final Region1 RX10_TEMP1476 = RX10_TEMP1475.dReg;


						final int RX10_TEMP1477 = Program.searchPointInRegion1(RX10_TEMP1476, RX10_TEMP1474,myUniquePlacePoint);


						final int RX10_TEMP1478 = 0;


						final boolean RX10_TEMP1479 = RX10_TEMP1477 < RX10_TEMP1478;

						if(RX10_TEMP1479)
							{

							String RX10_TEMP1480 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1480);

							}

						final int RX10_TEMP1481 = Program.getPlaceFromDist1(RX10_TEMP1475, RX10_TEMP1477,myUniquePlacePoint);


						final int RX10_TEMP1483 = 0;


						final boolean RX10_TEMP1484 = RX10_TEMP1481 != RX10_TEMP1483;

						if(RX10_TEMP1484)
							{

							String RX10_TEMP1482 = "Bad place access for array ter";

							throw new RuntimeException(RX10_TEMP1482);

							}
						Program.setRefArrayValue1int(ter, RX10_TEMP1477, X10_TEMP605,myUniquePlacePoint);
						}
					}
				}

			int ierr = 0;


			final boolean X10_TEMP608 = iter <= mter;

			if(X10_TEMP608)
				{

				final int X10_TEMP609 = Program.intrefArrayMax1(pr,myUniquePlacePoint);


				final int X10_TEMP610 = 0;


				final boolean X10_TEMP612 = X10_TEMP609 != X10_TEMP610;

				if(X10_TEMP612)
					{

					final int X10_TEMP614 = Program.intrefArrayMax1(pr,myUniquePlacePoint);


					ierr = X10_TEMP614;


					final String X10_TEMP615 = "Local field overflow error, ";


					final String X10_TEMP616 = "ierr = ";


					final String X10_TEMP617 = X10_TEMP615 + X10_TEMP616;


					final String X10_TEMP619 = X10_TEMP617 + ierr;

					System.err.println(X10_TEMP619);
					break;
					}

				final boolean X10_TEMP621 = iter < mter;

				if(X10_TEMP621)
					{
					continue;
					}
				else
					{
					break;
					}
 				}

			final int X10_TEMP622 = 10;


			final boolean X10_TEMP624 = iter > X10_TEMP622;

			if(X10_TEMP624)
				{

				final String X10_TEMP626 = "Too many iterations";

				throw new RuntimeException(X10_TEMP626);

				}

			final int X10_TEMP629 = 0;


			final int X10_TEMP630 = 1;


			final Region1 X10_TEMP631 = Program.createNewRegion1R(X10_TEMP629, X10_TEMP630,myUniquePlacePoint);


			final int X10_TEMP632 = 0;


			final Dist1 dFlags = Program.getPlaceDist1(X10_TEMP631, X10_TEMP632,myUniquePlacePoint);


			final Region1 RX10_TEMP1485 = dFlags.dReg;


			final int RX10_TEMP1486 = 0;


			final int RX10_TEMP1487 = 1;


			int RX10_TEMP1488 = 1;


			RX10_TEMP1488 = RX10_TEMP1488 - RX10_TEMP1487;


			final int  RX10_TEMP1489 = RX10_TEMP1488+1;


			final int RX10_TEMP1490 = RX10_TEMP1488+1;


			final intStub[] RX10_TEMP1491 = new intStub[RX10_TEMP1490];

			/*FINISH
*/				{
				for(int RX10_TEMP1492=0; RX10_TEMP1492 < RX10_TEMP1489; RX10_TEMP1492++)
					{

					final int RX10_TEMP1493 = 0;


					final int RX10_TEMP1494 = RX10_TEMP1492;


					final int RX10_TEMP1495 = 0;


					final int RX10_TEMP1496 = Program.getDistLocalCount1(dFlags, RX10_TEMP1494,myUniquePlacePoint);


					final int RX10_TEMP1497 = RX10_TEMP1496 - RX10_TEMP1487;

					//async(RX10_TEMP1495)
						{

						final int RX10_TEMP1498 = RX10_TEMP1497+1;


						final int[] RX10_TEMP1499 = new int[RX10_TEMP1498];


						final intStub RX10_TEMP1500 = new intStub(RX10_TEMP1499,RX10_TEMP1495);
						
Program.globalPointerHashMap.get(RX10_TEMP1495).add(RX10_TEMP1500.hashCode());

						//async(RX10_TEMP1493)
							{
							RX10_TEMP1491[RX10_TEMP1492] = RX10_TEMP1500;
							}
						}
					}
				}

			final intStub[] RX10_TEMP1501 = (intStub[])(new intStub/*value*/[RX10_TEMP1489]);
/*arrayInitBlock*/
for(int RX10_TEMP1503= 0;RX10_TEMP1503 <RX10_TEMP1501.length ;RX10_TEMP1503++ )				{

				final intStub RX10_TEMP1502 = RX10_TEMP1491[RX10_TEMP1503];

				RX10_TEMP1501[RX10_TEMP1503] =RX10_TEMP1502;
				}

;


			final intRefArray1 RX10_TEMP1504 = new intRefArray1(dFlags, RX10_TEMP1501,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1504.hashCode());


			final intRefArray1 flags = RX10_TEMP1504;


			final int X10_TEMP636 = 0;


			final int X10_TEMP639 = Program.intrefArrayMax1(pr,myUniquePlacePoint);


			final int X10_TEMP640 = X10_TEMP639;


			final Point1 RX10_TEMP1505 = new Point1(X10_TEMP636,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1505.hashCode());


			final Dist1 RX10_TEMP1506 = flags.distValue;


			final Region1 RX10_TEMP1507 = RX10_TEMP1506.dReg;


			final int RX10_TEMP1508 = Program.searchPointInRegion1(RX10_TEMP1507, RX10_TEMP1505,myUniquePlacePoint);


			final int RX10_TEMP1509 = 0;


			final boolean RX10_TEMP1510 = RX10_TEMP1508 < RX10_TEMP1509;

			if(RX10_TEMP1510)
				{

				String RX10_TEMP1511 = "Array index out of bounds";

				throw new RuntimeException(RX10_TEMP1511);

				}

			final int RX10_TEMP1512 = Program.getPlaceFromDist1(RX10_TEMP1506, RX10_TEMP1508,myUniquePlacePoint);


			final int RX10_TEMP1514 = 0;


			final boolean RX10_TEMP1515 = RX10_TEMP1512 != RX10_TEMP1514;

			if(RX10_TEMP1515)
				{

				String RX10_TEMP1513 = "Bad place access for array flags";

				throw new RuntimeException(RX10_TEMP1513);

				}
			Program.setRefArrayValue1int(flags, RX10_TEMP1508, X10_TEMP640,myUniquePlacePoint);

			final int X10_TEMP642 = 1;


			final int X10_TEMP645 = Program.intrefArrayMax1(ter,myUniquePlacePoint);


			final int X10_TEMP646 = X10_TEMP645;


			final Point1 RX10_TEMP1516 = new Point1(X10_TEMP642,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1516.hashCode());


			final Dist1 RX10_TEMP1517 = flags.distValue;


			final Region1 RX10_TEMP1518 = RX10_TEMP1517.dReg;


			final int RX10_TEMP1519 = Program.searchPointInRegion1(RX10_TEMP1518, RX10_TEMP1516,myUniquePlacePoint);


			final int RX10_TEMP1520 = 0;


			final boolean RX10_TEMP1521 = RX10_TEMP1519 < RX10_TEMP1520;

			if(RX10_TEMP1521)
				{

				String RX10_TEMP1522 = "Array index out of bounds";

				throw new RuntimeException(RX10_TEMP1522);

				}

			final int RX10_TEMP1523 = Program.getPlaceFromDist1(RX10_TEMP1517, RX10_TEMP1519,myUniquePlacePoint);


			final int RX10_TEMP1525 = 0;


			final boolean RX10_TEMP1526 = RX10_TEMP1523 != RX10_TEMP1525;

			if(RX10_TEMP1526)
				{

				String RX10_TEMP1524 = "Bad place access for array flags";

				throw new RuntimeException(RX10_TEMP1524);

				}
			Program.setRefArrayValue1int(flags, RX10_TEMP1519, X10_TEMP646,myUniquePlacePoint);

			final int X10_TEMP648 = 0;


			final Point1 RX10_TEMP1527 = new Point1(X10_TEMP648,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1527.hashCode());


			final Dist1 RX10_TEMP1528 = flags.distValue;


			final Region1 RX10_TEMP1529 = RX10_TEMP1528.dReg;


			final int RX10_TEMP1530 = Program.searchPointInRegion1(RX10_TEMP1529, RX10_TEMP1527,myUniquePlacePoint);


			final int RX10_TEMP1531 = 0;


			final boolean RX10_TEMP1532 = RX10_TEMP1530 < RX10_TEMP1531;

			if(RX10_TEMP1532)
				{

				String RX10_TEMP1533 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1533);

				}

			final int RX10_TEMP1534 = Program.getPlaceFromDist1(RX10_TEMP1528, RX10_TEMP1530,myUniquePlacePoint);


			final int RX10_TEMP1536 = 0;


			final boolean RX10_TEMP1537 = RX10_TEMP1534 != RX10_TEMP1536;

			if(RX10_TEMP1537)
				{

				String RX10_TEMP1535 = "Bad place access for array flags";

				throw new RuntimeException(RX10_TEMP1535);

				}

			final int RX10_TEMP1538 = Program.getRefArrayValue1int(flags, RX10_TEMP1530,myUniquePlacePoint);


			final int X10_TEMP649 = RX10_TEMP1538;


			final int X10_TEMP650 = 0;


			final boolean X10_TEMP652 = X10_TEMP649 != X10_TEMP650;

			if(X10_TEMP652)
				{

				final int X10_TEMP654 = 0;


				final Point1 RX10_TEMP1539 = new Point1(X10_TEMP654,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1539.hashCode());


				final Dist1 RX10_TEMP1540 = flags.distValue;


				final Region1 RX10_TEMP1541 = RX10_TEMP1540.dReg;


				final int RX10_TEMP1542 = Program.searchPointInRegion1(RX10_TEMP1541, RX10_TEMP1539,myUniquePlacePoint);


				final int RX10_TEMP1543 = 0;


				final boolean RX10_TEMP1544 = RX10_TEMP1542 < RX10_TEMP1543;

				if(RX10_TEMP1544)
					{

					String RX10_TEMP1545 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP1545);

					}

				final int RX10_TEMP1546 = Program.getPlaceFromDist1(RX10_TEMP1540, RX10_TEMP1542,myUniquePlacePoint);


				final int RX10_TEMP1548 = 0;


				final boolean RX10_TEMP1549 = RX10_TEMP1546 != RX10_TEMP1548;

				if(RX10_TEMP1549)
					{

					String RX10_TEMP1547 = "Bad place access for array flags";

					throw new RuntimeException(RX10_TEMP1547);

					}

				final int RX10_TEMP1550 = Program.getRefArrayValue1int(flags, RX10_TEMP1542,myUniquePlacePoint);


				final int X10_TEMP656 = RX10_TEMP1550;


				ierr = X10_TEMP656;


				final String X10_TEMP657 = "Global field overflow error, ";


				final String X10_TEMP658 = "ierr = ";


				final String X10_TEMP659 = X10_TEMP657 + X10_TEMP658;


				final String X10_TEMP661 = X10_TEMP659 + ierr;

				System.err.println(X10_TEMP661);
				break;
				}

			final int X10_TEMP663 = 1;


			final Point1 RX10_TEMP1551 = new Point1(X10_TEMP663,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1551.hashCode());


			final Dist1 RX10_TEMP1552 = flags.distValue;


			final Region1 RX10_TEMP1553 = RX10_TEMP1552.dReg;


			final int RX10_TEMP1554 = Program.searchPointInRegion1(RX10_TEMP1553, RX10_TEMP1551,myUniquePlacePoint);


			final int RX10_TEMP1555 = 0;


			final boolean RX10_TEMP1556 = RX10_TEMP1554 < RX10_TEMP1555;

			if(RX10_TEMP1556)
				{

				String RX10_TEMP1557 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1557);

				}

			final int RX10_TEMP1558 = Program.getPlaceFromDist1(RX10_TEMP1552, RX10_TEMP1554,myUniquePlacePoint);


			final int RX10_TEMP1560 = 0;


			final boolean RX10_TEMP1561 = RX10_TEMP1558 != RX10_TEMP1560;

			if(RX10_TEMP1561)
				{

				String RX10_TEMP1559 = "Bad place access for array flags";

				throw new RuntimeException(RX10_TEMP1559);

				}

			final int RX10_TEMP1562 = Program.getRefArrayValue1int(flags, RX10_TEMP1554,myUniquePlacePoint);


			final int X10_TEMP664 = RX10_TEMP1562;


			final int X10_TEMP665 = 0;


			final boolean X10_TEMP667 = X10_TEMP664 != X10_TEMP665;

			if(X10_TEMP667)
				{

				final String X10_TEMP668 = "Info: fields being passed ";


				final String X10_TEMP669 = "further = ";


				final String X10_TEMP672 = X10_TEMP668 + X10_TEMP669;


				final int X10_TEMP671 = 1;


				final Point1 RX10_TEMP1563 = new Point1(X10_TEMP671,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1563.hashCode());


				final Dist1 RX10_TEMP1564 = flags.distValue;


				final Region1 RX10_TEMP1565 = RX10_TEMP1564.dReg;


				final int RX10_TEMP1566 = Program.searchPointInRegion1(RX10_TEMP1565, RX10_TEMP1563,myUniquePlacePoint);


				final int RX10_TEMP1567 = 0;


				final boolean RX10_TEMP1568 = RX10_TEMP1566 < RX10_TEMP1567;

				if(RX10_TEMP1568)
					{

					String RX10_TEMP1569 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP1569);

					}

				final int RX10_TEMP1570 = Program.getPlaceFromDist1(RX10_TEMP1564, RX10_TEMP1566,myUniquePlacePoint);


				final int RX10_TEMP1572 = 0;


				final boolean RX10_TEMP1573 = RX10_TEMP1570 != RX10_TEMP1572;

				if(RX10_TEMP1573)
					{

					String RX10_TEMP1571 = "Bad place access for array flags";

					throw new RuntimeException(RX10_TEMP1571);

					}

				final int RX10_TEMP1574 = Program.getRefArrayValue1int(flags, RX10_TEMP1566,myUniquePlacePoint);


				final int X10_TEMP673 = RX10_TEMP1574;


				final String X10_TEMP675 = X10_TEMP672 + X10_TEMP673;

				System.err.println(X10_TEMP675);
				}
			else
				{

				mter = iter;

				break;
				}
 
			X10_TEMP100 = ! done;

			}
		
 while(X10_TEMP100);
		final Region2 RX10_TEMP1575 = dDst.dReg;


		final int RX10_TEMP1576 = 0;


		final int RX10_TEMP1577 = 1;


		int RX10_TEMP1578 = 1;


		RX10_TEMP1578 = RX10_TEMP1578 - RX10_TEMP1577;


		final int  RX10_TEMP1579 = RX10_TEMP1578+1;


		final int RX10_TEMP1580 = RX10_TEMP1578+1;


		final doubleStub[] RX10_TEMP1581 = new doubleStub[RX10_TEMP1580];

		/*FINISH
*/			{
			for(int RX10_TEMP1582=0; RX10_TEMP1582 < RX10_TEMP1579; RX10_TEMP1582++)
				{

				final int RX10_TEMP1583 = 0;


				final int RX10_TEMP1584 = RX10_TEMP1582;


				final int RX10_TEMP1585 = 0;


				final int RX10_TEMP1586 = Program.getDistLocalCount2(dDst, RX10_TEMP1584,myUniquePlacePoint);


				final int RX10_TEMP1587 = RX10_TEMP1586 - RX10_TEMP1577;

				//async(RX10_TEMP1585)
					{

					final int RX10_TEMP1588 = RX10_TEMP1587+1;


					final double[] RX10_TEMP1589 = new double[RX10_TEMP1588];


					final doubleStub RX10_TEMP1590 = new doubleStub(RX10_TEMP1589,RX10_TEMP1585);
					
Program.globalPointerHashMap.get(RX10_TEMP1585).add(RX10_TEMP1590.hashCode());

					//async(RX10_TEMP1583)
						{
						RX10_TEMP1581[RX10_TEMP1582] = RX10_TEMP1590;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP1591 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP1579]);
/*arrayInitBlock*/
for(int RX10_TEMP1593= 0;RX10_TEMP1593 <RX10_TEMP1591.length ;RX10_TEMP1593++ )			{

			final doubleStub RX10_TEMP1592 = RX10_TEMP1581[RX10_TEMP1593];

			RX10_TEMP1591[RX10_TEMP1593] =RX10_TEMP1592;
			}

;


		final doubleRefArray2 RX10_TEMP1594 = new doubleRefArray2(dDst, RX10_TEMP1591,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1594.hashCode());


		final doubleRefArray2 result = RX10_TEMP1594;

		/*FINISH
*/			{

			final Dist1 X10_TEMP680 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1596 = X10_TEMP680.dReg;


			final int RX10_TEMP1599 = 1;


			int RX10_TEMP1597 = RX10_TEMP1596.regSize;


			RX10_TEMP1597 = RX10_TEMP1597 - RX10_TEMP1599;


			final int  RX10_TEMP1598 = RX10_TEMP1597+1;

			for(int RX10_TEMP1595=0; RX10_TEMP1595 < RX10_TEMP1598; RX10_TEMP1595++)
				{

				final int RX10_TEMP1600 = RX10_TEMP1595;


				final Point1 X10_TEMP681 = Program.regionOrdinalPoint1(RX10_TEMP1596, RX10_TEMP1600,myUniquePlacePoint);


				final int pl = X10_TEMP681.f0;


				final Region1 RX10_TEMP1601 = X10_TEMP680.dReg;


				final int RX10_TEMP1602 = Program.searchPointInRegion1(RX10_TEMP1601, X10_TEMP681,myUniquePlacePoint);


				final int RX10_TEMP1603 = 0;


				final boolean RX10_TEMP1604 = RX10_TEMP1602 < RX10_TEMP1603;

				if(RX10_TEMP1604)
					{

					final String RX10_TEMP1605 = "Point X10_TEMP681 not found in the distribution X10_TEMP680.";

					throw new RuntimeException(RX10_TEMP1605);

					}

				final int RX10_TEMP1606 = Program.getPlaceFromDist1(X10_TEMP680, RX10_TEMP1602,myUniquePlacePoint);


				final int X10_TEMP682 = RX10_TEMP1606;

				//async(X10_TEMP682)
					{

					final int X10_TEMP685 = 0;


					final Region1 rLocal1 = Program.X10Util_getLRank2D(dDst, X10_TEMP685,X10_TEMP682);

					if(_X10Util_ENABLE_CHECKS)
						{

						final Point1 RX10_TEMP1607 = new Point1(pl,X10_TEMP682);
						
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1607.hashCode());


						final Dist1 RX10_TEMP1608 = sizes.distValue;


						final Region1 RX10_TEMP1609 = RX10_TEMP1608.dReg;


						final int RX10_TEMP1610 = Program.searchPointInRegion1(RX10_TEMP1609, RX10_TEMP1607,X10_TEMP682);


						final int RX10_TEMP1611 = 0;


						final boolean RX10_TEMP1612 = RX10_TEMP1610 < RX10_TEMP1611;

						if(RX10_TEMP1612)
							{

							String RX10_TEMP1613 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1613);

							}

						final int RX10_TEMP1614 = Program.getPlaceFromDist1(RX10_TEMP1608, RX10_TEMP1610,X10_TEMP682);


						final int RX10_TEMP1616 = 0;


						final boolean RX10_TEMP1617 = RX10_TEMP1614 != RX10_TEMP1616;

						if(RX10_TEMP1617)
							{

							String RX10_TEMP1615 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1615);

							}

						final int RX10_TEMP1618 = Program.getRefArrayValue1int(sizes, RX10_TEMP1610,X10_TEMP682);


						final int X10_TEMP689 = RX10_TEMP1618;


						final int X10_TEMP690 = 0;


						final boolean X10_TEMP692 = X10_TEMP689 <= X10_TEMP690;

						if(X10_TEMP692)
							{

							final String X10_TEMP693 = "Cannot make non-existant ";


							final String X10_TEMP694 = "region";


							final String X10_TEMP696 = X10_TEMP693 + X10_TEMP694;

							throw new RuntimeException(X10_TEMP696);

							}

						final Point1 RX10_TEMP1619 = new Point1(pl,X10_TEMP682);
						
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1619.hashCode());


						final Dist1 RX10_TEMP1620 = sizes.distValue;


						final Region1 RX10_TEMP1621 = RX10_TEMP1620.dReg;


						final int RX10_TEMP1622 = Program.searchPointInRegion1(RX10_TEMP1621, RX10_TEMP1619,X10_TEMP682);


						final int RX10_TEMP1623 = 0;


						final boolean RX10_TEMP1624 = RX10_TEMP1622 < RX10_TEMP1623;

						if(RX10_TEMP1624)
							{

							String RX10_TEMP1625 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1625);

							}

						final int RX10_TEMP1626 = Program.getPlaceFromDist1(RX10_TEMP1620, RX10_TEMP1622,X10_TEMP682);


						final int RX10_TEMP1628 = 0;


						final boolean RX10_TEMP1629 = RX10_TEMP1626 != RX10_TEMP1628;

						if(RX10_TEMP1629)
							{

							String RX10_TEMP1627 = "Bad place access for array sizes";

							throw new RuntimeException(RX10_TEMP1627);

							}

						final int RX10_TEMP1630 = Program.getRefArrayValue1int(sizes, RX10_TEMP1622,X10_TEMP682);


						final int X10_TEMP698 = RX10_TEMP1630;


						final int X10_TEMP699 = rLocal1.regSize;


						final boolean X10_TEMP703 = X10_TEMP698 != X10_TEMP699;


						final Point1 RX10_TEMP1631 = new Point1(pl,X10_TEMP682);
						
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1631.hashCode());


						final Dist1 RX10_TEMP1632 = offsets.distValue;


						final Region1 RX10_TEMP1633 = RX10_TEMP1632.dReg;


						final int RX10_TEMP1634 = Program.searchPointInRegion1(RX10_TEMP1633, RX10_TEMP1631,X10_TEMP682);


						final int RX10_TEMP1635 = 0;


						final boolean RX10_TEMP1636 = RX10_TEMP1634 < RX10_TEMP1635;

						if(RX10_TEMP1636)
							{

							String RX10_TEMP1637 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1637);

							}

						final int RX10_TEMP1638 = Program.getPlaceFromDist1(RX10_TEMP1632, RX10_TEMP1634,X10_TEMP682);


						final int RX10_TEMP1640 = 0;


						final boolean RX10_TEMP1641 = RX10_TEMP1638 != RX10_TEMP1640;

						if(RX10_TEMP1641)
							{

							String RX10_TEMP1639 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP1639);

							}

						final int RX10_TEMP1642 = Program.getRefArrayValue1int(offsets, RX10_TEMP1634,X10_TEMP682);


						final int X10_TEMP701 = RX10_TEMP1642;


						final int RX10_TEMP1643 = rLocal1.regSize;


						final int RX10_TEMP1644 = 0;


						final boolean RX10_TEMP1645 = RX10_TEMP1643 <= RX10_TEMP1644;

						if(RX10_TEMP1645)
							{

							final String RX10_TEMP1646 = "Operation low() not defined on empty region rLocal1";

							throw new RuntimeException(RX10_TEMP1646);

							}

						final int X10_TEMP702 = Program.regionLow(rLocal1,X10_TEMP682);


						final boolean X10_TEMP704 = X10_TEMP701 != X10_TEMP702;


						final boolean X10_TEMP706 = X10_TEMP703 || X10_TEMP704;

						if(X10_TEMP706)
							{

							final String X10_TEMP707 = "Regions don't match result ";


							final String X10_TEMP708 = "dist";


							final String X10_TEMP710 = X10_TEMP707 + X10_TEMP708;

							throw new RuntimeException(X10_TEMP710);

							}
						}

					final int X10_TEMP716 = 0;


					final Point1 RX10_TEMP1647 = new Point1(pl,X10_TEMP682);
					
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1647.hashCode());


					final Dist1 RX10_TEMP1648 = sizes.distValue;


					final Region1 RX10_TEMP1649 = RX10_TEMP1648.dReg;


					final int RX10_TEMP1650 = Program.searchPointInRegion1(RX10_TEMP1649, RX10_TEMP1647,X10_TEMP682);


					final int RX10_TEMP1651 = 0;


					final boolean RX10_TEMP1652 = RX10_TEMP1650 < RX10_TEMP1651;

					if(RX10_TEMP1652)
						{

						String RX10_TEMP1653 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP1653);

						}

					final int RX10_TEMP1654 = Program.getPlaceFromDist1(RX10_TEMP1648, RX10_TEMP1650,X10_TEMP682);


					final int RX10_TEMP1656 = 0;


					final boolean RX10_TEMP1657 = RX10_TEMP1654 != RX10_TEMP1656;

					if(RX10_TEMP1657)
						{

						String RX10_TEMP1655 = "Bad place access for array sizes";

						throw new RuntimeException(RX10_TEMP1655);

						}

					final int RX10_TEMP1658 = Program.getRefArrayValue1int(sizes, RX10_TEMP1650,X10_TEMP682);


					final int X10_TEMP713 = RX10_TEMP1658;


					final int X10_TEMP714 = 1;


					final int X10_TEMP717 = X10_TEMP713 - X10_TEMP714;


					final Region2 X10_TEMP720 = Program.createNewRegion2RA(X10_TEMP716, X10_TEMP717, rRank2,X10_TEMP682);


					final int X10_TEMP721 = 0;


					final int RX10_TEMP1663 = 1;


					int RX10_TEMP1661 = X10_TEMP720.regSize;


					RX10_TEMP1661 = RX10_TEMP1661 - RX10_TEMP1663;


					final int  RX10_TEMP1662 = RX10_TEMP1661+1;

					for(int RX10_TEMP1659=0; RX10_TEMP1659 < RX10_TEMP1662; RX10_TEMP1659++)
						{

						final int RX10_TEMP1664 = RX10_TEMP1659;


						final Point2 RX10_TEMP1660 = Program.regionOrdinalPoint2(X10_TEMP720, RX10_TEMP1664,X10_TEMP682);


						final int i = RX10_TEMP1660.f0;


						final int j = RX10_TEMP1660.f1;

						//async(X10_TEMP721)
							{

							final Point1 RX10_TEMP1665 = new Point1(pl,X10_TEMP721);
							
Program.globalPointerHashMap.get(X10_TEMP721).add(RX10_TEMP1665.hashCode());


							final Dist1 RX10_TEMP1666 = offsets.distValue;


							final Region1 RX10_TEMP1667 = RX10_TEMP1666.dReg;


							final int RX10_TEMP1668 = Program.searchPointInRegion1(RX10_TEMP1667, RX10_TEMP1665,X10_TEMP721);


							final int RX10_TEMP1669 = 0;


							final boolean RX10_TEMP1670 = RX10_TEMP1668 < RX10_TEMP1669;

							if(RX10_TEMP1670)
								{

								String RX10_TEMP1671 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1671);

								}

							final int RX10_TEMP1672 = Program.getPlaceFromDist1(RX10_TEMP1666, RX10_TEMP1668,X10_TEMP721);


							final int RX10_TEMP1674 = 0;


							final boolean RX10_TEMP1675 = RX10_TEMP1672 != RX10_TEMP1674;

							if(RX10_TEMP1675)
								{

								String RX10_TEMP1673 = "Bad place access for array offsets";

								throw new RuntimeException(RX10_TEMP1673);

								}

							final int RX10_TEMP1676 = Program.getRefArrayValue1int(offsets, RX10_TEMP1668,X10_TEMP721);


							final int X10_TEMP723 = RX10_TEMP1676;


							final int X10_TEMP726 = X10_TEMP723 + i;


							final Point3 RX10_TEMP1677 = new Point3(pl, i, j,X10_TEMP721);
							
Program.globalPointerHashMap.get(X10_TEMP721).add(RX10_TEMP1677.hashCode());


							final Dist3 RX10_TEMP1678 = srcBuffer.distValue;


							final Region3 RX10_TEMP1679 = RX10_TEMP1678.dReg;


							final int RX10_TEMP1680 = Program.searchPointInRegion3(RX10_TEMP1679, RX10_TEMP1677,X10_TEMP721);


							final int RX10_TEMP1681 = 0;


							final boolean RX10_TEMP1682 = RX10_TEMP1680 < RX10_TEMP1681;

							if(RX10_TEMP1682)
								{

								String RX10_TEMP1683 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1683);

								}

							final int RX10_TEMP1684 = Program.getPlaceFromDist3(RX10_TEMP1678, RX10_TEMP1680,X10_TEMP721);


							final int RX10_TEMP1686 = 0;


							final boolean RX10_TEMP1687 = RX10_TEMP1684 != RX10_TEMP1686;

							if(RX10_TEMP1687)
								{

								String RX10_TEMP1685 = "Bad place access for array srcBuffer";

								throw new RuntimeException(RX10_TEMP1685);

								}

							final double RX10_TEMP1688 = Program.getRefArrayValue3double(srcBuffer, RX10_TEMP1680,X10_TEMP721);


							final double X10_TEMP732 = RX10_TEMP1688;


							final double X10_TEMP733 = X10_TEMP732;


							final Point2 RX10_TEMP1689 = new Point2(X10_TEMP726, j,X10_TEMP721);
							
Program.globalPointerHashMap.get(X10_TEMP721).add(RX10_TEMP1689.hashCode());


							final Dist2 RX10_TEMP1690 = result.distValue;


							final Region2 RX10_TEMP1691 = RX10_TEMP1690.dReg;


							final int RX10_TEMP1692 = Program.searchPointInRegion2(RX10_TEMP1691, RX10_TEMP1689,X10_TEMP721);


							final int RX10_TEMP1693 = 0;


							final boolean RX10_TEMP1694 = RX10_TEMP1692 < RX10_TEMP1693;

							if(RX10_TEMP1694)
								{

								String RX10_TEMP1695 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1695);

								}

							final int RX10_TEMP1696 = Program.getPlaceFromDist2(RX10_TEMP1690, RX10_TEMP1692,X10_TEMP721);


							final int RX10_TEMP1698 = 0;


							final boolean RX10_TEMP1699 = RX10_TEMP1696 != RX10_TEMP1698;

							if(RX10_TEMP1699)
								{

								String RX10_TEMP1697 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP1697);

								}
							Program.setRefArrayValue2double(result, RX10_TEMP1692, X10_TEMP733,X10_TEMP721);
							}
						}
					}
				}
			}
		return result;
		}
public static doubleRefArray2 LinearESOpenPIC2D_cropField ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, final doubleRefArray2 guards, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP5 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP2;


		final Region1 rRank1 = Program.createNewRegion1R(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		final int X10_TEMP9 = 0;


		final Region1 rRank2 = Program.createNewRegion1R(X10_TEMP9, _LinearESOpenPIC2D_XLENGTH,myUniquePlacePoint);


		final Dist2 RX10_TEMP0 = guards.distValue;


		final Dist2 dGuard = RX10_TEMP0;


		final int X10_TEMP13 = 1;


		final int X10_TEMP14 = 1;


		final int X10_TEMP16 = X10_TEMP13 - X10_TEMP14;


		final int X10_TEMP18 = 0;


		final Region2 rGuard = Program.X10Util_get2DPRegion(dGuard, X10_TEMP18,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_distBlockStar2(rRank1, rRank2,myUniquePlacePoint);


		final Region2 RX10_TEMP1 = dResult.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final doubleStub[] RX10_TEMP7 = new doubleStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount2(dResult, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP14 = RX10_TEMP13+1;


					final double[] RX10_TEMP15 = new double[RX10_TEMP14];


					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP16;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP17 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final doubleStub RX10_TEMP18 = RX10_TEMP7[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final doubleRefArray2 RX10_TEMP20 = new doubleRefArray2(dResult, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final doubleRefArray2 result = RX10_TEMP20;


		final Dist1 X10_TEMP25 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP22 = X10_TEMP25.dReg;


		final int RX10_TEMP25 = 1;


		int RX10_TEMP23 = RX10_TEMP22.regSize;


		RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


		final int  RX10_TEMP24 = RX10_TEMP23+1;

		for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
			{

			final int RX10_TEMP26 = RX10_TEMP21;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);

			/*FINISH
*/				{

				final Dist1 X10_TEMP26 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP27 = X10_TEMP26.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, pl,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP26.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(X10_TEMP26, RX10_TEMP28,myUniquePlacePoint);


				final int X10_TEMP29 = RX10_TEMP32;

				//async(X10_TEMP29)
					{

					final Dist2 RX10_TEMP33 = data.distValue;


					final Dist2 dData = RX10_TEMP33;


					final Region2 rLocalS = Program.X10Util_get2DLRegion(dData,X10_TEMP29);


					final int X10_TEMP35 = 0;


					final Region1 rLocalS1 = Program.X10Util_getRank2D(rLocalS, X10_TEMP35,X10_TEMP29);


					final int X10_TEMP37 = rLocalS.regSize;


					final int X10_TEMP38 = 0;


					final boolean X10_TEMP40 = X10_TEMP37 > X10_TEMP38;


					final int RX10_TEMP34 = rLocalS1.regSize;


					final int RX10_TEMP35 = 0;


					final boolean RX10_TEMP36 = RX10_TEMP34 <= RX10_TEMP35;

					if(RX10_TEMP36)
						{

						final String RX10_TEMP37 = "Operation low() not defined on empty region rLocalS1";

						throw new RuntimeException(RX10_TEMP37);

						}

					final int X10_TEMP39 = Program.regionLow(rLocalS1,X10_TEMP29);


					final boolean X10_TEMP41 = X10_TEMP39 < _LinearESOpenPIC2D_YLENGTH;


					final boolean X10_TEMP43 = X10_TEMP40 && X10_TEMP41;

					if(X10_TEMP43)
						{

						final int X10_TEMP45 = 2;


						final int X10_TEMP46 = pl.f0;


						final int X10_TEMP48 = X10_TEMP45 * X10_TEMP46;


						final int pDst1 = 0;


						final int X10_TEMP51 = 2;


						final int X10_TEMP52 = pl.f0;


						final int X10_TEMP53 = X10_TEMP51 * X10_TEMP52;


						final int X10_TEMP54 = 1;


						final int X10_TEMP56 = X10_TEMP53 + X10_TEMP54;


						final int pDst2 = 0;


						final Region2 RX10_TEMP38 = rLocalS;


						final int RX10_TEMP53 = rLocalS.regSize;


						final int RX10_TEMP54 = 1;


						final int RX10_TEMP55 = RX10_TEMP53 - RX10_TEMP54;


						final int  RX10_TEMP52 = RX10_TEMP55+1;


						final double[] RX10_TEMP56 = (double[])(new double/*value*/[RX10_TEMP52]);
/*arrayInitBlock*/
for(int RX10_TEMP39= 0;RX10_TEMP39 <RX10_TEMP56.length ;RX10_TEMP39++ )							{

							final int RX10_TEMP40 = RX10_TEMP39;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP38, RX10_TEMP40,X10_TEMP29);


							final Dist2 RX10_TEMP41 = data.distValue;


							final Region2 RX10_TEMP42 = RX10_TEMP41.dReg;


							final int RX10_TEMP43 = Program.searchPointInRegion2(RX10_TEMP42, pt,X10_TEMP29);


							final int RX10_TEMP44 = 0;


							final boolean RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44;

							if(RX10_TEMP45)
								{

								String RX10_TEMP46 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP46);

								}

							final int RX10_TEMP47 = Program.getPlaceFromDist2(RX10_TEMP41, RX10_TEMP43,X10_TEMP29);


							final int RX10_TEMP49 = 0;


							final boolean RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49;

							if(RX10_TEMP50)
								{

								String RX10_TEMP48 = "Bad place access for array data";

								throw new RuntimeException(RX10_TEMP48);

								}

							final double RX10_TEMP51 = Program.getRefArrayValue2double(data, RX10_TEMP43,X10_TEMP29);


							final double X10_TEMP60 = RX10_TEMP51;

							RX10_TEMP56[RX10_TEMP39] =X10_TEMP60;
							}

;


						final doubleValArray2 RX10_TEMP57 = new doubleValArray2(rLocalS, RX10_TEMP56,X10_TEMP29);
						
Program.globalPointerHashMap.get(X10_TEMP29).add(RX10_TEMP57.hashCode());


						final doubleValArray2 X10_TEMP61 = RX10_TEMP57;


						final doubleValArray2 sBuffer = X10_TEMP61;

						//async(pDst1)
							{

							final Region2 rLocalD = Program.X10Util_get2DLRegion(dResult,pDst1);


							final int X10_TEMP67 = 0;


							final int RX10_TEMP61 = 1;


							int RX10_TEMP59 = rLocalD.regSize;


							RX10_TEMP59 = RX10_TEMP59 - RX10_TEMP61;


							final int  RX10_TEMP60 = RX10_TEMP59+1;

							for(int RX10_TEMP58=0; RX10_TEMP58 < RX10_TEMP60; RX10_TEMP58++)
								{

								final int RX10_TEMP62 = RX10_TEMP58;


								final Point2 pt = Program.regionOrdinalPoint2(rLocalD, RX10_TEMP62,pDst1);

								//async(X10_TEMP67)
									{

									final Region2 RX10_TEMP63 = sBuffer.regionValue;


									final int RX10_TEMP64 = Program.searchPointInRegion2(RX10_TEMP63, pt,X10_TEMP67);


									final int RX10_TEMP65 = 0;


									final boolean RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65;

									if(RX10_TEMP66)
										{

										String RX10_TEMP67 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP67);

										}

									final double[] RX10_TEMP68 = (double[])(sBuffer.contents);


									final double X10_TEMP72 = RX10_TEMP68[RX10_TEMP64];


									final double X10_TEMP73 = X10_TEMP72;


									final Dist2 RX10_TEMP69 = result.distValue;


									final Region2 RX10_TEMP70 = RX10_TEMP69.dReg;


									final int RX10_TEMP71 = Program.searchPointInRegion2(RX10_TEMP70, pt,X10_TEMP67);


									final int RX10_TEMP72 = 0;


									final boolean RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72;

									if(RX10_TEMP73)
										{

										String RX10_TEMP74 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP74);

										}

									final int RX10_TEMP75 = Program.getPlaceFromDist2(RX10_TEMP69, RX10_TEMP71,X10_TEMP67);


									final int RX10_TEMP77 = 0;


									final boolean RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77;

									if(RX10_TEMP78)
										{

										String RX10_TEMP76 = "Bad place access for array result";

										throw new RuntimeException(RX10_TEMP76);

										}
									Program.setRefArrayValue2double(result, RX10_TEMP71, X10_TEMP73,X10_TEMP67);
									}
								}
							}
						//async(pDst2)
							{

							final Region2 rLocalD = Program.X10Util_get2DLRegion(dResult,pDst2);


							final int X10_TEMP78 = 0;


							final int RX10_TEMP82 = 1;


							int RX10_TEMP80 = rLocalD.regSize;


							RX10_TEMP80 = RX10_TEMP80 - RX10_TEMP82;


							final int  RX10_TEMP81 = RX10_TEMP80+1;

							for(int RX10_TEMP79=0; RX10_TEMP79 < RX10_TEMP81; RX10_TEMP79++)
								{

								final int RX10_TEMP83 = RX10_TEMP79;


								final Point2 pt = Program.regionOrdinalPoint2(rLocalD, RX10_TEMP83,pDst2);

								//async(X10_TEMP78)
									{

									final Region2 RX10_TEMP84 = sBuffer.regionValue;


									final int RX10_TEMP85 = Program.searchPointInRegion2(RX10_TEMP84, pt,X10_TEMP78);


									final int RX10_TEMP86 = 0;


									final boolean RX10_TEMP87 = RX10_TEMP85 < RX10_TEMP86;

									if(RX10_TEMP87)
										{

										String RX10_TEMP88 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP88);

										}

									final double[] RX10_TEMP89 = (double[])(sBuffer.contents);


									final double X10_TEMP83 = RX10_TEMP89[RX10_TEMP85];


									final double X10_TEMP84 = X10_TEMP83;


									final Dist2 RX10_TEMP90 = result.distValue;


									final Region2 RX10_TEMP91 = RX10_TEMP90.dReg;


									final int RX10_TEMP92 = Program.searchPointInRegion2(RX10_TEMP91, pt,X10_TEMP78);


									final int RX10_TEMP93 = 0;


									final boolean RX10_TEMP94 = RX10_TEMP92 < RX10_TEMP93;

									if(RX10_TEMP94)
										{

										String RX10_TEMP95 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP95);

										}

									final int RX10_TEMP96 = Program.getPlaceFromDist2(RX10_TEMP90, RX10_TEMP92,X10_TEMP78);


									final int RX10_TEMP98 = 0;


									final boolean RX10_TEMP99 = RX10_TEMP96 != RX10_TEMP98;

									if(RX10_TEMP99)
										{

										String RX10_TEMP97 = "Bad place access for array result";

										throw new RuntimeException(RX10_TEMP97);

										}
									Program.setRefArrayValue2double(result, RX10_TEMP92, X10_TEMP84,X10_TEMP78);
									}
								}
							}
						}

					final Point1 RX10_TEMP100 = new Point1(_LinearESOpenPIC2D_YLENGTH,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP100.hashCode());


					final boolean RX10_TEMP101 = Program.regionContainsPoint1(rLocalS1, RX10_TEMP100,myUniquePlacePoint);


					final boolean X10_TEMP87 = RX10_TEMP101;

					if(X10_TEMP87)
						{

						final Region2 RX10_TEMP102 = rGuard;


						final int RX10_TEMP117 = rGuard.regSize;


						final int RX10_TEMP118 = 1;


						final int RX10_TEMP119 = RX10_TEMP117 - RX10_TEMP118;


						final int  RX10_TEMP116 = RX10_TEMP119+1;


						final double[] RX10_TEMP120 = (double[])(new double/*value*/[RX10_TEMP116]);
/*arrayInitBlock*/
for(int RX10_TEMP103= 0;RX10_TEMP103 <RX10_TEMP120.length ;RX10_TEMP103++ )							{

							final int RX10_TEMP104 = RX10_TEMP103;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP102, RX10_TEMP104,myUniquePlacePoint);


							final Dist2 RX10_TEMP105 = data.distValue;


							final Region2 RX10_TEMP106 = RX10_TEMP105.dReg;


							final int RX10_TEMP107 = Program.searchPointInRegion2(RX10_TEMP106, pt,myUniquePlacePoint);


							final int RX10_TEMP108 = 0;


							final boolean RX10_TEMP109 = RX10_TEMP107 < RX10_TEMP108;

							if(RX10_TEMP109)
								{

								String RX10_TEMP110 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP110);

								}

							final int RX10_TEMP111 = Program.getPlaceFromDist2(RX10_TEMP105, RX10_TEMP107,myUniquePlacePoint);


							final int RX10_TEMP113 = 0;


							final boolean RX10_TEMP114 = RX10_TEMP111 != RX10_TEMP113;

							if(RX10_TEMP114)
								{

								String RX10_TEMP112 = "Bad place access for array data";

								throw new RuntimeException(RX10_TEMP112);

								}

							final double RX10_TEMP115 = Program.getRefArrayValue2double(data, RX10_TEMP107,myUniquePlacePoint);


							final double X10_TEMP90 = RX10_TEMP115;

							RX10_TEMP120[RX10_TEMP103] =X10_TEMP90;
							}

;


						final doubleValArray2 RX10_TEMP121 = new doubleValArray2(rGuard, RX10_TEMP120,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP121.hashCode());


						final doubleValArray2 X10_TEMP91 = RX10_TEMP121;


						final doubleValArray2 sBuffer = X10_TEMP91;


						final int X10_TEMP93 = 1;


						final int X10_TEMP94 = 1;


						final int X10_TEMP96 = X10_TEMP93 - X10_TEMP94;


						final int X10_TEMP98 = 0;

						//async(X10_TEMP98)
							{

							final int X10_TEMP100 = 0;


							final int RX10_TEMP125 = 1;


							int RX10_TEMP123 = rGuard.regSize;


							RX10_TEMP123 = RX10_TEMP123 - RX10_TEMP125;


							final int  RX10_TEMP124 = RX10_TEMP123+1;

							for(int RX10_TEMP122=0; RX10_TEMP122 < RX10_TEMP124; RX10_TEMP122++)
								{

								final int RX10_TEMP126 = RX10_TEMP122;


								final Point2 pt = Program.regionOrdinalPoint2(rGuard, RX10_TEMP126,X10_TEMP98);

								//async(X10_TEMP100)
									{

									final Region2 RX10_TEMP127 = sBuffer.regionValue;


									final int RX10_TEMP128 = Program.searchPointInRegion2(RX10_TEMP127, pt,X10_TEMP100);


									final int RX10_TEMP129 = 0;


									final boolean RX10_TEMP130 = RX10_TEMP128 < RX10_TEMP129;

									if(RX10_TEMP130)
										{

										String RX10_TEMP131 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP131);

										}

									final double[] RX10_TEMP132 = (double[])(sBuffer.contents);


									final double X10_TEMP105 = RX10_TEMP132[RX10_TEMP128];


									final double X10_TEMP106 = X10_TEMP105;


									final Dist2 RX10_TEMP133 = guards.distValue;


									final Region2 RX10_TEMP134 = RX10_TEMP133.dReg;


									final int RX10_TEMP135 = Program.searchPointInRegion2(RX10_TEMP134, pt,X10_TEMP100);


									final int RX10_TEMP136 = 0;


									final boolean RX10_TEMP137 = RX10_TEMP135 < RX10_TEMP136;

									if(RX10_TEMP137)
										{

										String RX10_TEMP138 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP138);

										}

									final int RX10_TEMP139 = Program.getPlaceFromDist2(RX10_TEMP133, RX10_TEMP135,X10_TEMP100);


									final int RX10_TEMP141 = 0;


									final boolean RX10_TEMP142 = RX10_TEMP139 != RX10_TEMP141;

									if(RX10_TEMP142)
										{

										String RX10_TEMP140 = "Bad place access for array guards";

										throw new RuntimeException(RX10_TEMP140);

										}
									Program.setRefArrayValue2double(guards, RX10_TEMP135, X10_TEMP106,X10_TEMP100);
									}
								}
							}
						}
					}
				}
			}
		return result;
		}
public static void LinearESOpenPIC2D_loadGuards ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, final doubleRefArray2 guards, int myUniquePlacePoint)
		{
		/*FINISH
*/			{

			final Dist1 X10_TEMP2 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP2.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP2.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP2.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP2, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP3 = RX10_TEMP11;

				//async(X10_TEMP3)
					{

					final int X10_TEMP4 = 0;


					final boolean X10_TEMP5 = true;


					final boolean X10_TEMP7 = ! X10_TEMP5;

					if(X10_TEMP7)
						{

						final Dist2 RX10_TEMP12 = guards.distValue;


						final Dist2 dGuard = RX10_TEMP12;


						final int X10_TEMP10 = 0;


						final int X10_TEMP12 = 0;


						final Region2 rGuard = Program.X10Util_get2DPRegion(dGuard, X10_TEMP12,X10_TEMP3);


						final Region2 RX10_TEMP13 = rGuard;


						final int RX10_TEMP28 = rGuard.regSize;


						final int RX10_TEMP29 = 1;


						final int RX10_TEMP30 = RX10_TEMP28 - RX10_TEMP29;


						final int  RX10_TEMP27 = RX10_TEMP30+1;


						final double[] RX10_TEMP31 = (double[])(new double/*value*/[RX10_TEMP27]);
/*arrayInitBlock*/
for(int RX10_TEMP14= 0;RX10_TEMP14 <RX10_TEMP31.length ;RX10_TEMP14++ )							{

							final int RX10_TEMP15 = RX10_TEMP14;


							final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP13, RX10_TEMP15,X10_TEMP3);


							final Dist2 RX10_TEMP16 = data.distValue;


							final Region2 RX10_TEMP17 = RX10_TEMP16.dReg;


							final int RX10_TEMP18 = Program.searchPointInRegion2(RX10_TEMP17, pt,X10_TEMP3);


							final int RX10_TEMP19 = 0;


							final boolean RX10_TEMP20 = RX10_TEMP18 < RX10_TEMP19;

							if(RX10_TEMP20)
								{

								String RX10_TEMP21 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP21);

								}

							final int RX10_TEMP22 = Program.getPlaceFromDist2(RX10_TEMP16, RX10_TEMP18,X10_TEMP3);


							final int RX10_TEMP24 = 0;


							final boolean RX10_TEMP25 = RX10_TEMP22 != RX10_TEMP24;

							if(RX10_TEMP25)
								{

								String RX10_TEMP23 = "Bad place access for array data";

								throw new RuntimeException(RX10_TEMP23);

								}

							final double RX10_TEMP26 = Program.getRefArrayValue2double(data, RX10_TEMP18,X10_TEMP3);


							final double X10_TEMP16 = RX10_TEMP26;

							RX10_TEMP31[RX10_TEMP14] =X10_TEMP16;
							}

;


						final doubleValArray2 RX10_TEMP32 = new doubleValArray2(rGuard, RX10_TEMP31,X10_TEMP3);
						
Program.globalPointerHashMap.get(X10_TEMP3).add(RX10_TEMP32.hashCode());


						final doubleValArray2 X10_TEMP17 = RX10_TEMP32;


						final doubleValArray2 sBuffer = X10_TEMP17;


						final int X10_TEMP19 = 0;


						final int X10_TEMP21 = 0;

						//async(X10_TEMP21)
							{

							final int X10_TEMP23 = 0;


							final int RX10_TEMP36 = 1;


							int RX10_TEMP34 = rGuard.regSize;


							RX10_TEMP34 = RX10_TEMP34 - RX10_TEMP36;


							final int  RX10_TEMP35 = RX10_TEMP34+1;

							for(int RX10_TEMP33=0; RX10_TEMP33 < RX10_TEMP35; RX10_TEMP33++)
								{

								final int RX10_TEMP37 = RX10_TEMP33;


								final Point2 pt = Program.regionOrdinalPoint2(rGuard, RX10_TEMP37,X10_TEMP21);

								//async(X10_TEMP23)
									{

									final Region2 RX10_TEMP38 = sBuffer.regionValue;


									final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, pt,X10_TEMP23);


									final int RX10_TEMP40 = 0;


									final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

									if(RX10_TEMP41)
										{

										String RX10_TEMP42 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP42);

										}

									final double[] RX10_TEMP43 = (double[])(sBuffer.contents);


									final double X10_TEMP28 = RX10_TEMP43[RX10_TEMP39];


									final double X10_TEMP29 = X10_TEMP28;


									final Dist2 RX10_TEMP44 = guards.distValue;


									final Region2 RX10_TEMP45 = RX10_TEMP44.dReg;


									final int RX10_TEMP46 = Program.searchPointInRegion2(RX10_TEMP45, pt,X10_TEMP23);


									final int RX10_TEMP47 = 0;


									final boolean RX10_TEMP48 = RX10_TEMP46 < RX10_TEMP47;

									if(RX10_TEMP48)
										{

										String RX10_TEMP49 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP49);

										}

									final int RX10_TEMP50 = Program.getPlaceFromDist2(RX10_TEMP44, RX10_TEMP46,X10_TEMP23);


									final int RX10_TEMP52 = 0;


									final boolean RX10_TEMP53 = RX10_TEMP50 != RX10_TEMP52;

									if(RX10_TEMP53)
										{

										String RX10_TEMP51 = "Bad place access for array guards";

										throw new RuntimeException(RX10_TEMP51);

										}
									Program.setRefArrayValue2double(guards, RX10_TEMP46, X10_TEMP29,X10_TEMP23);
									}
								}
							}
						}
					}
				}
			}
		}
public static intRefArray1 LinearESOpenPIC2D_makeInfoArray ( final LinearESOpenPIC2D X10_TEMP0, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 0;


		final int X10_TEMP4 = 6;


		final Region1 X10_TEMP5 = Program.createNewRegion1R(X10_TEMP3, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP6 = 0;


		final Dist1 X10_TEMP8 = Program.getPlaceDist1(X10_TEMP5, X10_TEMP6,myUniquePlacePoint);


		final Dist1 dInfo = X10_TEMP8;


		final Region1 RX10_TEMP0 = dInfo.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final intStub[] RX10_TEMP6 = new intStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dInfo, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final int[] RX10_TEMP15 = new int/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{

						final int X10_TEMP11 = 0;

						RX10_TEMP15[RX10_TEMP13] =X10_TEMP11;
						}

;


					final intStub RX10_TEMP16 = new intStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final intStub[] RX10_TEMP17 = (intStub[])(new intStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final intStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final intRefArray1 RX10_TEMP20 = new intRefArray1(dInfo, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final intRefArray1 X10_TEMP13 = RX10_TEMP20;

		return X10_TEMP13;
		}
public static ParticleRefArray1 LinearESOpenPIC2D_moveParticles ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final Dist2 dFieldSpace, final intRefArray1 info, int myUniquePlacePoint)
		{

		final int MAX = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX;


		final int MAX_BUFFER = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER;


		final int ITER_MAX = 20;


		final int X10_TEMP7 = 0;


		final int X10_TEMP5 = 1;


		final int X10_TEMP8 = MAX - X10_TEMP5;


		final Region1 rPart = Program.createNewRegion1R(X10_TEMP7, X10_TEMP8,myUniquePlacePoint);


		final int X10_TEMP13 = 0;


		final int X10_TEMP11 = 1;


		final int X10_TEMP14 = MAX_BUFFER - X10_TEMP11;


		final Region1 rBuffer = Program.createNewRegion1R(X10_TEMP13, X10_TEMP14,myUniquePlacePoint);


		final Dist1 X10_TEMP16 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP16;


		final Dist2 dPart = Program.X10Util_extendDistRank2D(dUnique, rPart,myUniquePlacePoint);


		final Dist2 dBuffer = Program.X10Util_extendDistRank2D(dUnique, rBuffer,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dPart.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final ParticleStub[] RX10_TEMP6 = new ParticleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dPart, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final Particle[] RX10_TEMP14 = new Particle[RX10_TEMP13];


					final ParticleStub RX10_TEMP15 = new ParticleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP16 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final ParticleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final ParticleRefArray2 RX10_TEMP19 = new ParticleRefArray2(dPart, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final ParticleRefArray2 part = RX10_TEMP19;


		final Region2 RX10_TEMP20 = dBuffer.dReg;


		final int RX10_TEMP21 = 0;


		final int RX10_TEMP22 = 1;


		int RX10_TEMP23 = 1;


		RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP22;


		final int  RX10_TEMP24 = RX10_TEMP23+1;


		final int RX10_TEMP25 = RX10_TEMP23+1;


		final ParticleStub[] RX10_TEMP26 = new ParticleStub[RX10_TEMP25];

		/*FINISH
*/			{
			for(int RX10_TEMP27=0; RX10_TEMP27 < RX10_TEMP24; RX10_TEMP27++)
				{

				final int RX10_TEMP28 = 0;


				final int RX10_TEMP29 = RX10_TEMP27;


				final int RX10_TEMP30 = 0;


				final int RX10_TEMP31 = Program.getDistLocalCount2(dBuffer, RX10_TEMP29,myUniquePlacePoint);


				final int RX10_TEMP32 = RX10_TEMP31 - RX10_TEMP22;

				//async(RX10_TEMP30)
					{

					final int RX10_TEMP33 = RX10_TEMP32+1;


					final Particle[] RX10_TEMP34 = new Particle[RX10_TEMP33];


					final ParticleStub RX10_TEMP35 = new ParticleStub(RX10_TEMP34,RX10_TEMP30);
					
Program.globalPointerHashMap.get(RX10_TEMP30).add(RX10_TEMP35.hashCode());

					//async(RX10_TEMP28)
						{
						RX10_TEMP26[RX10_TEMP27] = RX10_TEMP35;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP36 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP24]);
/*arrayInitBlock*/
for(int RX10_TEMP38= 0;RX10_TEMP38 <RX10_TEMP36.length ;RX10_TEMP38++ )			{

			final ParticleStub RX10_TEMP37 = RX10_TEMP26[RX10_TEMP38];

			RX10_TEMP36[RX10_TEMP38] =RX10_TEMP37;
			}

;


		final ParticleRefArray2 RX10_TEMP39 = new ParticleRefArray2(dBuffer, RX10_TEMP36,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP39.hashCode());


		final ParticleRefArray2 sBufferL = RX10_TEMP39;


		final Region2 RX10_TEMP40 = dBuffer.dReg;


		final int RX10_TEMP41 = 0;


		final int RX10_TEMP42 = 1;


		int RX10_TEMP43 = 1;


		RX10_TEMP43 = RX10_TEMP43 - RX10_TEMP42;


		final int  RX10_TEMP44 = RX10_TEMP43+1;


		final int RX10_TEMP45 = RX10_TEMP43+1;


		final ParticleStub[] RX10_TEMP46 = new ParticleStub[RX10_TEMP45];

		/*FINISH
*/			{
			for(int RX10_TEMP47=0; RX10_TEMP47 < RX10_TEMP44; RX10_TEMP47++)
				{

				final int RX10_TEMP48 = 0;


				final int RX10_TEMP49 = RX10_TEMP47;


				final int RX10_TEMP50 = 0;


				final int RX10_TEMP51 = Program.getDistLocalCount2(dBuffer, RX10_TEMP49,myUniquePlacePoint);


				final int RX10_TEMP52 = RX10_TEMP51 - RX10_TEMP42;

				//async(RX10_TEMP50)
					{

					final int RX10_TEMP53 = RX10_TEMP52+1;


					final Particle[] RX10_TEMP54 = new Particle[RX10_TEMP53];


					final ParticleStub RX10_TEMP55 = new ParticleStub(RX10_TEMP54,RX10_TEMP50);
					
Program.globalPointerHashMap.get(RX10_TEMP50).add(RX10_TEMP55.hashCode());

					//async(RX10_TEMP48)
						{
						RX10_TEMP46[RX10_TEMP47] = RX10_TEMP55;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP56 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP44]);
/*arrayInitBlock*/
for(int RX10_TEMP58= 0;RX10_TEMP58 <RX10_TEMP56.length ;RX10_TEMP58++ )			{

			final ParticleStub RX10_TEMP57 = RX10_TEMP46[RX10_TEMP58];

			RX10_TEMP56[RX10_TEMP58] =RX10_TEMP57;
			}

;


		final ParticleRefArray2 RX10_TEMP59 = new ParticleRefArray2(dBuffer, RX10_TEMP56,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP59.hashCode());


		final ParticleRefArray2 sBufferR = RX10_TEMP59;


		final Region2 RX10_TEMP60 = dBuffer.dReg;


		final int RX10_TEMP61 = 0;


		final int RX10_TEMP62 = 1;


		int RX10_TEMP63 = 1;


		RX10_TEMP63 = RX10_TEMP63 - RX10_TEMP62;


		final int  RX10_TEMP64 = RX10_TEMP63+1;


		final int RX10_TEMP65 = RX10_TEMP63+1;


		final ParticleStub[] RX10_TEMP66 = new ParticleStub[RX10_TEMP65];

		/*FINISH
*/			{
			for(int RX10_TEMP67=0; RX10_TEMP67 < RX10_TEMP64; RX10_TEMP67++)
				{

				final int RX10_TEMP68 = 0;


				final int RX10_TEMP69 = RX10_TEMP67;


				final int RX10_TEMP70 = 0;


				final int RX10_TEMP71 = Program.getDistLocalCount2(dBuffer, RX10_TEMP69,myUniquePlacePoint);


				final int RX10_TEMP72 = RX10_TEMP71 - RX10_TEMP62;

				//async(RX10_TEMP70)
					{

					final int RX10_TEMP73 = RX10_TEMP72+1;


					final Particle[] RX10_TEMP74 = new Particle[RX10_TEMP73];


					final ParticleStub RX10_TEMP75 = new ParticleStub(RX10_TEMP74,RX10_TEMP70);
					
Program.globalPointerHashMap.get(RX10_TEMP70).add(RX10_TEMP75.hashCode());

					//async(RX10_TEMP68)
						{
						RX10_TEMP66[RX10_TEMP67] = RX10_TEMP75;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP76 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP64]);
/*arrayInitBlock*/
for(int RX10_TEMP78= 0;RX10_TEMP78 <RX10_TEMP76.length ;RX10_TEMP78++ )			{

			final ParticleStub RX10_TEMP77 = RX10_TEMP66[RX10_TEMP78];

			RX10_TEMP76[RX10_TEMP78] =RX10_TEMP77;
			}

;


		final ParticleRefArray2 RX10_TEMP79 = new ParticleRefArray2(dBuffer, RX10_TEMP76,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP79.hashCode());


		final ParticleRefArray2 rBufferL = RX10_TEMP79;


		final Region2 RX10_TEMP80 = dBuffer.dReg;


		final int RX10_TEMP81 = 0;


		final int RX10_TEMP82 = 1;


		int RX10_TEMP83 = 1;


		RX10_TEMP83 = RX10_TEMP83 - RX10_TEMP82;


		final int  RX10_TEMP84 = RX10_TEMP83+1;


		final int RX10_TEMP85 = RX10_TEMP83+1;


		final ParticleStub[] RX10_TEMP86 = new ParticleStub[RX10_TEMP85];

		/*FINISH
*/			{
			for(int RX10_TEMP87=0; RX10_TEMP87 < RX10_TEMP84; RX10_TEMP87++)
				{

				final int RX10_TEMP88 = 0;


				final int RX10_TEMP89 = RX10_TEMP87;


				final int RX10_TEMP90 = 0;


				final int RX10_TEMP91 = Program.getDistLocalCount2(dBuffer, RX10_TEMP89,myUniquePlacePoint);


				final int RX10_TEMP92 = RX10_TEMP91 - RX10_TEMP82;

				//async(RX10_TEMP90)
					{

					final int RX10_TEMP93 = RX10_TEMP92+1;


					final Particle[] RX10_TEMP94 = new Particle[RX10_TEMP93];


					final ParticleStub RX10_TEMP95 = new ParticleStub(RX10_TEMP94,RX10_TEMP90);
					
Program.globalPointerHashMap.get(RX10_TEMP90).add(RX10_TEMP95.hashCode());

					//async(RX10_TEMP88)
						{
						RX10_TEMP86[RX10_TEMP87] = RX10_TEMP95;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP96 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP84]);
/*arrayInitBlock*/
for(int RX10_TEMP98= 0;RX10_TEMP98 <RX10_TEMP96.length ;RX10_TEMP98++ )			{

			final ParticleStub RX10_TEMP97 = RX10_TEMP86[RX10_TEMP98];

			RX10_TEMP96[RX10_TEMP98] =RX10_TEMP97;
			}

;


		final ParticleRefArray2 RX10_TEMP99 = new ParticleRefArray2(dBuffer, RX10_TEMP96,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP99.hashCode());


		final ParticleRefArray2 rBufferR = RX10_TEMP99;


		final Region1 RX10_TEMP100 = dUnique.dReg;


		final int RX10_TEMP101 = 0;


		final int RX10_TEMP102 = 1;


		int RX10_TEMP103 = 1;


		RX10_TEMP103 = RX10_TEMP103 - RX10_TEMP102;


		final int  RX10_TEMP104 = RX10_TEMP103+1;


		final int RX10_TEMP105 = RX10_TEMP103+1;


		final intStub[] RX10_TEMP106 = new intStub[RX10_TEMP105];

		/*FINISH
*/			{
			for(int RX10_TEMP107=0; RX10_TEMP107 < RX10_TEMP104; RX10_TEMP107++)
				{

				final int RX10_TEMP108 = 0;


				final int RX10_TEMP109 = RX10_TEMP107;


				final int RX10_TEMP110 = 0;


				final int RX10_TEMP111 = Program.getDistLocalCount1(dUnique, RX10_TEMP109,myUniquePlacePoint);


				final int RX10_TEMP112 = RX10_TEMP111 - RX10_TEMP102;

				//async(RX10_TEMP110)
					{

					final int RX10_TEMP114 = RX10_TEMP112+1;


					final int[] RX10_TEMP115 = new int/*NewUpdatableArray*/[RX10_TEMP114];
/*arrayInitBlock*/
for(int RX10_TEMP113= 0;RX10_TEMP113 <RX10_TEMP115.length ;RX10_TEMP113++ )						{

						final int X10_TEMP30 = 0;

						RX10_TEMP115[RX10_TEMP113] =X10_TEMP30;
						}

;


					final intStub RX10_TEMP116 = new intStub(RX10_TEMP115,RX10_TEMP110);
					
Program.globalPointerHashMap.get(RX10_TEMP110).add(RX10_TEMP116.hashCode());

					//async(RX10_TEMP108)
						{
						RX10_TEMP106[RX10_TEMP107] = RX10_TEMP116;
						}
					}
				}
			}

		final intStub[] RX10_TEMP117 = (intStub[])(new intStub/*value*/[RX10_TEMP104]);
/*arrayInitBlock*/
for(int RX10_TEMP119= 0;RX10_TEMP119 <RX10_TEMP117.length ;RX10_TEMP119++ )			{

			final intStub RX10_TEMP118 = RX10_TEMP106[RX10_TEMP119];

			RX10_TEMP117[RX10_TEMP119] =RX10_TEMP118;
			}

;


		final intRefArray1 RX10_TEMP120 = new intRefArray1(dUnique, RX10_TEMP117,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP120.hashCode());


		final intRefArray1 inLt = RX10_TEMP120;


		final Region1 RX10_TEMP121 = dUnique.dReg;


		final int RX10_TEMP122 = 0;


		final int RX10_TEMP123 = 1;


		int RX10_TEMP124 = 1;


		RX10_TEMP124 = RX10_TEMP124 - RX10_TEMP123;


		final int  RX10_TEMP125 = RX10_TEMP124+1;


		final int RX10_TEMP126 = RX10_TEMP124+1;


		final intStub[] RX10_TEMP127 = new intStub[RX10_TEMP126];

		/*FINISH
*/			{
			for(int RX10_TEMP128=0; RX10_TEMP128 < RX10_TEMP125; RX10_TEMP128++)
				{

				final int RX10_TEMP129 = 0;


				final int RX10_TEMP130 = RX10_TEMP128;


				final int RX10_TEMP131 = 0;


				final int RX10_TEMP132 = Program.getDistLocalCount1(dUnique, RX10_TEMP130,myUniquePlacePoint);


				final int RX10_TEMP133 = RX10_TEMP132 - RX10_TEMP123;

				//async(RX10_TEMP131)
					{

					final int RX10_TEMP135 = RX10_TEMP133+1;


					final int[] RX10_TEMP136 = new int/*NewUpdatableArray*/[RX10_TEMP135];
/*arrayInitBlock*/
for(int RX10_TEMP134= 0;RX10_TEMP134 <RX10_TEMP136.length ;RX10_TEMP134++ )						{

						final int X10_TEMP33 = 0;

						RX10_TEMP136[RX10_TEMP134] =X10_TEMP33;
						}

;


					final intStub RX10_TEMP137 = new intStub(RX10_TEMP136,RX10_TEMP131);
					
Program.globalPointerHashMap.get(RX10_TEMP131).add(RX10_TEMP137.hashCode());

					//async(RX10_TEMP129)
						{
						RX10_TEMP127[RX10_TEMP128] = RX10_TEMP137;
						}
					}
				}
			}

		final intStub[] RX10_TEMP138 = (intStub[])(new intStub/*value*/[RX10_TEMP125]);
/*arrayInitBlock*/
for(int RX10_TEMP140= 0;RX10_TEMP140 <RX10_TEMP138.length ;RX10_TEMP140++ )			{

			final intStub RX10_TEMP139 = RX10_TEMP127[RX10_TEMP140];

			RX10_TEMP138[RX10_TEMP140] =RX10_TEMP139;
			}

;


		final intRefArray1 RX10_TEMP141 = new intRefArray1(dUnique, RX10_TEMP138,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP141.hashCode());


		final intRefArray1 inRt = RX10_TEMP141;


		final Region1 RX10_TEMP142 = dUnique.dReg;


		final int RX10_TEMP143 = 0;


		final int RX10_TEMP144 = 1;


		int RX10_TEMP145 = 1;


		RX10_TEMP145 = RX10_TEMP145 - RX10_TEMP144;


		final int  RX10_TEMP146 = RX10_TEMP145+1;


		final int RX10_TEMP147 = RX10_TEMP145+1;


		final intStub[] RX10_TEMP148 = new intStub[RX10_TEMP147];

		/*FINISH
*/			{
			for(int RX10_TEMP149=0; RX10_TEMP149 < RX10_TEMP146; RX10_TEMP149++)
				{

				final int RX10_TEMP150 = 0;


				final int RX10_TEMP151 = RX10_TEMP149;


				final int RX10_TEMP152 = 0;


				final int RX10_TEMP153 = Program.getDistLocalCount1(dUnique, RX10_TEMP151,myUniquePlacePoint);


				final int RX10_TEMP154 = RX10_TEMP153 - RX10_TEMP144;

				//async(RX10_TEMP152)
					{

					final int RX10_TEMP156 = RX10_TEMP154+1;


					final int[] RX10_TEMP157 = new int/*NewUpdatableArray*/[RX10_TEMP156];
/*arrayInitBlock*/
for(int RX10_TEMP155= 0;RX10_TEMP155 <RX10_TEMP157.length ;RX10_TEMP155++ )						{

						final int X10_TEMP36 = 0;

						RX10_TEMP157[RX10_TEMP155] =X10_TEMP36;
						}

;


					final intStub RX10_TEMP158 = new intStub(RX10_TEMP157,RX10_TEMP152);
					
Program.globalPointerHashMap.get(RX10_TEMP152).add(RX10_TEMP158.hashCode());

					//async(RX10_TEMP150)
						{
						RX10_TEMP148[RX10_TEMP149] = RX10_TEMP158;
						}
					}
				}
			}

		final intStub[] RX10_TEMP159 = (intStub[])(new intStub/*value*/[RX10_TEMP146]);
/*arrayInitBlock*/
for(int RX10_TEMP161= 0;RX10_TEMP161 <RX10_TEMP159.length ;RX10_TEMP161++ )			{

			final intStub RX10_TEMP160 = RX10_TEMP148[RX10_TEMP161];

			RX10_TEMP159[RX10_TEMP161] =RX10_TEMP160;
			}

;


		final intRefArray1 RX10_TEMP162 = new intRefArray1(dUnique, RX10_TEMP159,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP162.hashCode());


		final intRefArray1 outLt = RX10_TEMP162;


		final Region1 RX10_TEMP163 = dUnique.dReg;


		final int RX10_TEMP164 = 0;


		final int RX10_TEMP165 = 1;


		int RX10_TEMP166 = 1;


		RX10_TEMP166 = RX10_TEMP166 - RX10_TEMP165;


		final int  RX10_TEMP167 = RX10_TEMP166+1;


		final int RX10_TEMP168 = RX10_TEMP166+1;


		final intStub[] RX10_TEMP169 = new intStub[RX10_TEMP168];

		/*FINISH
*/			{
			for(int RX10_TEMP170=0; RX10_TEMP170 < RX10_TEMP167; RX10_TEMP170++)
				{

				final int RX10_TEMP171 = 0;


				final int RX10_TEMP172 = RX10_TEMP170;


				final int RX10_TEMP173 = 0;


				final int RX10_TEMP174 = Program.getDistLocalCount1(dUnique, RX10_TEMP172,myUniquePlacePoint);


				final int RX10_TEMP175 = RX10_TEMP174 - RX10_TEMP165;

				//async(RX10_TEMP173)
					{

					final int RX10_TEMP177 = RX10_TEMP175+1;


					final int[] RX10_TEMP178 = new int/*NewUpdatableArray*/[RX10_TEMP177];
/*arrayInitBlock*/
for(int RX10_TEMP176= 0;RX10_TEMP176 <RX10_TEMP178.length ;RX10_TEMP176++ )						{

						final int X10_TEMP39 = 0;

						RX10_TEMP178[RX10_TEMP176] =X10_TEMP39;
						}

;


					final intStub RX10_TEMP179 = new intStub(RX10_TEMP178,RX10_TEMP173);
					
Program.globalPointerHashMap.get(RX10_TEMP173).add(RX10_TEMP179.hashCode());

					//async(RX10_TEMP171)
						{
						RX10_TEMP169[RX10_TEMP170] = RX10_TEMP179;
						}
					}
				}
			}

		final intStub[] RX10_TEMP180 = (intStub[])(new intStub/*value*/[RX10_TEMP167]);
/*arrayInitBlock*/
for(int RX10_TEMP182= 0;RX10_TEMP182 <RX10_TEMP180.length ;RX10_TEMP182++ )			{

			final intStub RX10_TEMP181 = RX10_TEMP169[RX10_TEMP182];

			RX10_TEMP180[RX10_TEMP182] =RX10_TEMP181;
			}

;


		final intRefArray1 RX10_TEMP183 = new intRefArray1(dUnique, RX10_TEMP180,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP183.hashCode());


		final intRefArray1 outRt = RX10_TEMP183;


		final Region1 RX10_TEMP184 = dUnique.dReg;


		final int RX10_TEMP185 = 0;


		final int RX10_TEMP186 = 1;


		int RX10_TEMP187 = 1;


		RX10_TEMP187 = RX10_TEMP187 - RX10_TEMP186;


		final int  RX10_TEMP188 = RX10_TEMP187+1;


		final int RX10_TEMP189 = RX10_TEMP187+1;


		final intStub[] RX10_TEMP190 = new intStub[RX10_TEMP189];

		/*FINISH
*/			{
			for(int RX10_TEMP191=0; RX10_TEMP191 < RX10_TEMP188; RX10_TEMP191++)
				{

				final int RX10_TEMP192 = 0;


				final int RX10_TEMP193 = RX10_TEMP191;


				final int RX10_TEMP194 = 0;


				final int RX10_TEMP195 = Program.getDistLocalCount1(dUnique, RX10_TEMP193,myUniquePlacePoint);


				final int RX10_TEMP196 = RX10_TEMP195 - RX10_TEMP186;

				//async(RX10_TEMP194)
					{

					final int RX10_TEMP198 = RX10_TEMP196+1;


					final int[] RX10_TEMP199 = new int/*NewUpdatableArray*/[RX10_TEMP198];
/*arrayInitBlock*/
for(int RX10_TEMP197= 0;RX10_TEMP197 <RX10_TEMP199.length ;RX10_TEMP197++ )						{

						final int X10_TEMP42 = 0;

						RX10_TEMP199[RX10_TEMP197] =X10_TEMP42;
						}

;


					final intStub RX10_TEMP200 = new intStub(RX10_TEMP199,RX10_TEMP194);
					
Program.globalPointerHashMap.get(RX10_TEMP194).add(RX10_TEMP200.hashCode());

					//async(RX10_TEMP192)
						{
						RX10_TEMP190[RX10_TEMP191] = RX10_TEMP200;
						}
					}
				}
			}

		final intStub[] RX10_TEMP201 = (intStub[])(new intStub/*value*/[RX10_TEMP188]);
/*arrayInitBlock*/
for(int RX10_TEMP203= 0;RX10_TEMP203 <RX10_TEMP201.length ;RX10_TEMP203++ )			{

			final intStub RX10_TEMP202 = RX10_TEMP190[RX10_TEMP203];

			RX10_TEMP201[RX10_TEMP203] =RX10_TEMP202;
			}

;


		final intRefArray1 RX10_TEMP204 = new intRefArray1(dUnique, RX10_TEMP201,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP204.hashCode());


		final intRefArray1 nPart = RX10_TEMP204;


		final Region1 RX10_TEMP205 = dUnique.dReg;


		final int RX10_TEMP206 = 0;


		final int RX10_TEMP207 = 1;


		int RX10_TEMP208 = 1;


		RX10_TEMP208 = RX10_TEMP208 - RX10_TEMP207;


		final int  RX10_TEMP209 = RX10_TEMP208+1;


		final int RX10_TEMP210 = RX10_TEMP208+1;


		final intStub[] RX10_TEMP211 = new intStub[RX10_TEMP210];

		/*FINISH
*/			{
			for(int RX10_TEMP212=0; RX10_TEMP212 < RX10_TEMP209; RX10_TEMP212++)
				{

				final int RX10_TEMP213 = 0;


				final int RX10_TEMP214 = RX10_TEMP212;


				final int RX10_TEMP215 = 0;


				final int RX10_TEMP216 = Program.getDistLocalCount1(dUnique, RX10_TEMP214,myUniquePlacePoint);


				final int RX10_TEMP217 = RX10_TEMP216 - RX10_TEMP207;

				//async(RX10_TEMP215)
					{

					final int RX10_TEMP219 = RX10_TEMP217+1;


					final int[] RX10_TEMP220 = new int/*NewUpdatableArray*/[RX10_TEMP219];
/*arrayInitBlock*/
for(int RX10_TEMP218= 0;RX10_TEMP218 <RX10_TEMP220.length ;RX10_TEMP218++ )						{

						final int X10_TEMP45 = 0;

						RX10_TEMP220[RX10_TEMP218] =X10_TEMP45;
						}

;


					final intStub RX10_TEMP221 = new intStub(RX10_TEMP220,RX10_TEMP215);
					
Program.globalPointerHashMap.get(RX10_TEMP215).add(RX10_TEMP221.hashCode());

					//async(RX10_TEMP213)
						{
						RX10_TEMP211[RX10_TEMP212] = RX10_TEMP221;
						}
					}
				}
			}

		final intStub[] RX10_TEMP222 = (intStub[])(new intStub/*value*/[RX10_TEMP209]);
/*arrayInitBlock*/
for(int RX10_TEMP224= 0;RX10_TEMP224 <RX10_TEMP222.length ;RX10_TEMP224++ )			{

			final intStub RX10_TEMP223 = RX10_TEMP211[RX10_TEMP224];

			RX10_TEMP222[RX10_TEMP224] =RX10_TEMP223;
			}

;


		final intRefArray1 RX10_TEMP225 = new intRefArray1(dUnique, RX10_TEMP222,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP225.hashCode());


		intRefArray1 nPartOld = RX10_TEMP225;


		final Region2 RX10_TEMP226 = dPart.dReg;


		final int RX10_TEMP227 = 0;


		final int RX10_TEMP228 = 1;


		int RX10_TEMP229 = 1;


		RX10_TEMP229 = RX10_TEMP229 - RX10_TEMP228;


		final int  RX10_TEMP230 = RX10_TEMP229+1;


		final int RX10_TEMP231 = RX10_TEMP229+1;


		final intStub[] RX10_TEMP232 = new intStub[RX10_TEMP231];

		/*FINISH
*/			{
			for(int RX10_TEMP233=0; RX10_TEMP233 < RX10_TEMP230; RX10_TEMP233++)
				{

				final int RX10_TEMP234 = 0;


				final int RX10_TEMP235 = RX10_TEMP233;


				final int RX10_TEMP236 = 0;


				final int RX10_TEMP237 = Program.getDistLocalCount2(dPart, RX10_TEMP235,myUniquePlacePoint);


				final int RX10_TEMP238 = RX10_TEMP237 - RX10_TEMP228;

				//async(RX10_TEMP236)
					{

					final int RX10_TEMP240 = RX10_TEMP238+1;


					final int[] RX10_TEMP241 = new int/*NewUpdatableArray*/[RX10_TEMP240];
/*arrayInitBlock*/
for(int RX10_TEMP239= 0;RX10_TEMP239 <RX10_TEMP241.length ;RX10_TEMP239++ )						{

						final int X10_TEMP48 = 0;

						RX10_TEMP241[RX10_TEMP239] =X10_TEMP48;
						}

;


					final intStub RX10_TEMP242 = new intStub(RX10_TEMP241,RX10_TEMP236);
					
Program.globalPointerHashMap.get(RX10_TEMP236).add(RX10_TEMP242.hashCode());

					//async(RX10_TEMP234)
						{
						RX10_TEMP232[RX10_TEMP233] = RX10_TEMP242;
						}
					}
				}
			}

		final intStub[] RX10_TEMP243 = (intStub[])(new intStub/*value*/[RX10_TEMP230]);
/*arrayInitBlock*/
for(int RX10_TEMP245= 0;RX10_TEMP245 <RX10_TEMP243.length ;RX10_TEMP245++ )			{

			final intStub RX10_TEMP244 = RX10_TEMP232[RX10_TEMP245];

			RX10_TEMP243[RX10_TEMP245] =RX10_TEMP244;
			}

;


		final intRefArray2 RX10_TEMP246 = new intRefArray2(dPart, RX10_TEMP243,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP246.hashCode());


		final intRefArray2 holes = RX10_TEMP246;


		final int X10_TEMP52 = 0;


		final int X10_TEMP53 = 3;


		final Region1 X10_TEMP54 = Program.createNewRegion1R(X10_TEMP52, X10_TEMP53,myUniquePlacePoint);


		final int X10_TEMP55 = 0;


		final Dist1 dFlags = Program.getPlaceDist1(X10_TEMP54, X10_TEMP55,myUniquePlacePoint);


		final Region1 RX10_TEMP247 = dUnique.dReg;


		final int RX10_TEMP248 = 0;


		final int RX10_TEMP249 = 1;


		int RX10_TEMP250 = 1;


		RX10_TEMP250 = RX10_TEMP250 - RX10_TEMP249;


		final int  RX10_TEMP251 = RX10_TEMP250+1;


		final int RX10_TEMP252 = RX10_TEMP250+1;


		final intStub[] RX10_TEMP253 = new intStub[RX10_TEMP252];

		/*FINISH
*/			{
			for(int RX10_TEMP254=0; RX10_TEMP254 < RX10_TEMP251; RX10_TEMP254++)
				{

				final int RX10_TEMP255 = 0;


				final int RX10_TEMP256 = RX10_TEMP254;


				final int RX10_TEMP257 = 0;


				final int RX10_TEMP258 = Program.getDistLocalCount1(dUnique, RX10_TEMP256,myUniquePlacePoint);


				final int RX10_TEMP259 = RX10_TEMP258 - RX10_TEMP249;

				//async(RX10_TEMP257)
					{

					final int RX10_TEMP261 = RX10_TEMP259+1;


					final int[] RX10_TEMP262 = new int/*NewUpdatableArray*/[RX10_TEMP261];
/*arrayInitBlock*/
for(int RX10_TEMP260= 0;RX10_TEMP260 <RX10_TEMP262.length ;RX10_TEMP260++ )						{

						final int X10_TEMP58 = 0;

						RX10_TEMP262[RX10_TEMP260] =X10_TEMP58;
						}

;


					final intStub RX10_TEMP263 = new intStub(RX10_TEMP262,RX10_TEMP257);
					
Program.globalPointerHashMap.get(RX10_TEMP257).add(RX10_TEMP263.hashCode());

					//async(RX10_TEMP255)
						{
						RX10_TEMP253[RX10_TEMP254] = RX10_TEMP263;
						}
					}
				}
			}

		final intStub[] RX10_TEMP264 = (intStub[])(new intStub/*value*/[RX10_TEMP251]);
/*arrayInitBlock*/
for(int RX10_TEMP266= 0;RX10_TEMP266 <RX10_TEMP264.length ;RX10_TEMP266++ )			{

			final intStub RX10_TEMP265 = RX10_TEMP253[RX10_TEMP266];

			RX10_TEMP264[RX10_TEMP266] =RX10_TEMP265;
			}

;


		final intRefArray1 RX10_TEMP267 = new intRefArray1(dUnique, RX10_TEMP264,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP267.hashCode());


		final intRefArray1 nSent = RX10_TEMP267;


		final Region1 RX10_TEMP268 = dFlags.dReg;


		final int RX10_TEMP269 = 0;


		final int RX10_TEMP270 = 1;


		int RX10_TEMP271 = 1;


		RX10_TEMP271 = RX10_TEMP271 - RX10_TEMP270;


		final int  RX10_TEMP272 = RX10_TEMP271+1;


		final int RX10_TEMP273 = RX10_TEMP271+1;


		final intStub[] RX10_TEMP274 = new intStub[RX10_TEMP273];

		/*FINISH
*/			{
			for(int RX10_TEMP275=0; RX10_TEMP275 < RX10_TEMP272; RX10_TEMP275++)
				{

				final int RX10_TEMP276 = 0;


				final int RX10_TEMP277 = RX10_TEMP275;


				final int RX10_TEMP278 = 0;


				final int RX10_TEMP279 = Program.getDistLocalCount1(dFlags, RX10_TEMP277,myUniquePlacePoint);


				final int RX10_TEMP280 = RX10_TEMP279 - RX10_TEMP270;

				//async(RX10_TEMP278)
					{

					final int RX10_TEMP282 = RX10_TEMP280+1;


					final int[] RX10_TEMP283 = new int/*NewUpdatableArray*/[RX10_TEMP282];
/*arrayInitBlock*/
for(int RX10_TEMP281= 0;RX10_TEMP281 <RX10_TEMP283.length ;RX10_TEMP281++ )						{

						final int X10_TEMP61 = 0;

						RX10_TEMP283[RX10_TEMP281] =X10_TEMP61;
						}

;


					final intStub RX10_TEMP284 = new intStub(RX10_TEMP283,RX10_TEMP278);
					
Program.globalPointerHashMap.get(RX10_TEMP278).add(RX10_TEMP284.hashCode());

					//async(RX10_TEMP276)
						{
						RX10_TEMP274[RX10_TEMP275] = RX10_TEMP284;
						}
					}
				}
			}

		final intStub[] RX10_TEMP285 = (intStub[])(new intStub/*value*/[RX10_TEMP272]);
/*arrayInitBlock*/
for(int RX10_TEMP287= 0;RX10_TEMP287 <RX10_TEMP285.length ;RX10_TEMP287++ )			{

			final intStub RX10_TEMP286 = RX10_TEMP274[RX10_TEMP287];

			RX10_TEMP285[RX10_TEMP287] =RX10_TEMP286;
			}

;


		final intRefArray1 RX10_TEMP288 = new intRefArray1(dFlags, RX10_TEMP285,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP288.hashCode());


		final intRefArray1 ibflg = RX10_TEMP288;

		/*FINISH
*/			{

			final Dist1 X10_TEMP64 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP290 = X10_TEMP64.dReg;


			final int RX10_TEMP293 = 1;


			int RX10_TEMP291 = RX10_TEMP290.regSize;


			RX10_TEMP291 = RX10_TEMP291 - RX10_TEMP293;


			final int  RX10_TEMP292 = RX10_TEMP291+1;

			for(int RX10_TEMP289=0; RX10_TEMP289 < RX10_TEMP292; RX10_TEMP289++)
				{

				final int RX10_TEMP294 = RX10_TEMP289;


				final Point1 X10_TEMP65 = Program.regionOrdinalPoint1(RX10_TEMP290, RX10_TEMP294,myUniquePlacePoint);


				final int pl = X10_TEMP65.f0;


				final Region1 RX10_TEMP295 = X10_TEMP64.dReg;


				final int RX10_TEMP296 = Program.searchPointInRegion1(RX10_TEMP295, X10_TEMP65,myUniquePlacePoint);


				final int RX10_TEMP297 = 0;


				final boolean RX10_TEMP298 = RX10_TEMP296 < RX10_TEMP297;

				if(RX10_TEMP298)
					{

					final String RX10_TEMP299 = "Point X10_TEMP65 not found in the distribution X10_TEMP64.";

					throw new RuntimeException(RX10_TEMP299);

					}

				final int RX10_TEMP300 = Program.getPlaceFromDist1(X10_TEMP64, RX10_TEMP296,myUniquePlacePoint);


				final int X10_TEMP66 = RX10_TEMP300;

				//async(X10_TEMP66)
					{

					final Dist1 RX10_TEMP301 = particles.distValue;


					final Dist1 X10_TEMP67 = RX10_TEMP301;


					final int X10_TEMP68 = 0;


					final Dist1 X10_TEMP70 = Program.restrictDist1(X10_TEMP67, X10_TEMP68,X10_TEMP66);


					final Region1 RX10_TEMP302 = X10_TEMP70.dReg;


					final Region1 X10_TEMP71 = RX10_TEMP302;


					final Region1 rLocal = X10_TEMP71;


					final int X10_TEMP73 = rLocal.regSize;


					final int X10_TEMP74 = 0;


					final boolean X10_TEMP76 = X10_TEMP73 > X10_TEMP74;

					if(X10_TEMP76)
						{

						final int RX10_TEMP303 = rLocal.regSize;


						final int RX10_TEMP304 = 0;


						final boolean RX10_TEMP305 = RX10_TEMP303 <= RX10_TEMP304;

						if(RX10_TEMP305)
							{

							final String RX10_TEMP306 = "Operation low() not defined on empty region rLocal";

							throw new RuntimeException(RX10_TEMP306);

							}

						final int offset = Program.regionLow(rLocal,X10_TEMP66);


						final int X10_TEMP79 = 0;


						final int RX10_TEMP311 = 1;


						int RX10_TEMP309 = rLocal.regSize;


						RX10_TEMP309 = RX10_TEMP309 - RX10_TEMP311;


						final int  RX10_TEMP310 = RX10_TEMP309+1;

						for(int RX10_TEMP307=0; RX10_TEMP307 < RX10_TEMP310; RX10_TEMP307++)
							{

							final int RX10_TEMP312 = RX10_TEMP307;


							final Point1 RX10_TEMP308 = Program.regionOrdinalPoint1(rLocal, RX10_TEMP312,X10_TEMP66);


							final int i = RX10_TEMP308.f0;

							//async(X10_TEMP79)
								{

								final int X10_TEMP82 = i - offset;


								final Point1 RX10_TEMP313 = new Point1(i,X10_TEMP79);
								
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP313.hashCode());


								final Dist1 RX10_TEMP314 = particles.distValue;


								final Region1 RX10_TEMP315 = RX10_TEMP314.dReg;


								final int RX10_TEMP316 = Program.searchPointInRegion1(RX10_TEMP315, RX10_TEMP313,X10_TEMP79);


								final int RX10_TEMP317 = 0;


								final boolean RX10_TEMP318 = RX10_TEMP316 < RX10_TEMP317;

								if(RX10_TEMP318)
									{

									String RX10_TEMP319 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP319);

									}

								final int RX10_TEMP320 = Program.getPlaceFromDist1(RX10_TEMP314, RX10_TEMP316,X10_TEMP79);


								final int RX10_TEMP322 = 0;


								final boolean RX10_TEMP323 = RX10_TEMP320 != RX10_TEMP322;

								if(RX10_TEMP323)
									{

									String RX10_TEMP321 = "Bad place access for array particles";

									throw new RuntimeException(RX10_TEMP321);

									}

								final Particle RX10_TEMP324 = Program.getRefArrayValue1Particle(particles, RX10_TEMP316,X10_TEMP79);


								final Particle X10_TEMP86 = RX10_TEMP324;


								final Particle X10_TEMP87 = X10_TEMP86;


								final Point2 RX10_TEMP325 = new Point2(pl, X10_TEMP82,X10_TEMP79);
								
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP325.hashCode());


								final Dist2 RX10_TEMP326 = part.distValue;


								final Region2 RX10_TEMP327 = RX10_TEMP326.dReg;


								final int RX10_TEMP328 = Program.searchPointInRegion2(RX10_TEMP327, RX10_TEMP325,X10_TEMP79);


								final int RX10_TEMP329 = 0;


								final boolean RX10_TEMP330 = RX10_TEMP328 < RX10_TEMP329;

								if(RX10_TEMP330)
									{

									String RX10_TEMP331 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP331);

									}

								final int RX10_TEMP332 = Program.getPlaceFromDist2(RX10_TEMP326, RX10_TEMP328,X10_TEMP79);


								final int RX10_TEMP334 = 0;


								final boolean RX10_TEMP335 = RX10_TEMP332 != RX10_TEMP334;

								if(RX10_TEMP335)
									{

									String RX10_TEMP333 = "Bad place access for array part";

									throw new RuntimeException(RX10_TEMP333);

									}
								Program.setRefArrayValue2Particle(part, RX10_TEMP328, X10_TEMP87,X10_TEMP79);
								}
							}
						}

					final int X10_TEMP91 = rLocal.regSize;


					final int X10_TEMP92 = X10_TEMP91;


					final Point1 RX10_TEMP336 = new Point1(pl,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP336.hashCode());


					final Dist1 RX10_TEMP337 = nPart.distValue;


					final Region1 RX10_TEMP338 = RX10_TEMP337.dReg;


					final int RX10_TEMP339 = Program.searchPointInRegion1(RX10_TEMP338, RX10_TEMP336,myUniquePlacePoint);


					final int RX10_TEMP340 = 0;


					final boolean RX10_TEMP341 = RX10_TEMP339 < RX10_TEMP340;

					if(RX10_TEMP341)
						{

						String RX10_TEMP342 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP342);

						}

					final int RX10_TEMP343 = Program.getPlaceFromDist1(RX10_TEMP337, RX10_TEMP339,myUniquePlacePoint);


					final int RX10_TEMP345 = 0;


					final boolean RX10_TEMP346 = RX10_TEMP343 != RX10_TEMP345;

					if(RX10_TEMP346)
						{

						String RX10_TEMP344 = "Bad place access for array nPart";

						throw new RuntimeException(RX10_TEMP344);

						}
					Program.setRefArrayValue1int(nPart, RX10_TEMP339, X10_TEMP92,myUniquePlacePoint);
					}
				}
			}

		final Region2 RX10_TEMP347 = dFieldSpace.dReg;


		final Region2 rFieldSpace = RX10_TEMP347;


		final int X10_TEMP96 = 1;


		final Region1 X10_TEMP97 = Program.X10Util_getRank2D(rFieldSpace, X10_TEMP96,myUniquePlacePoint);


		final double rsize = X10_TEMP97.regSize;


		int iter = 2;


		int nter = 0;

		/*FINISH
*/			{

			final int X10_TEMP103 = 0;


			final int X10_TEMP104 = 6;


			final Region1 X10_TEMP106 = Program.createNewRegion1R(X10_TEMP103, X10_TEMP104,myUniquePlacePoint);


			final int X10_TEMP107 = 0;


			final int RX10_TEMP351 = 1;


			int RX10_TEMP349 = X10_TEMP106.regSize;


			RX10_TEMP349 = RX10_TEMP349 - RX10_TEMP351;


			final int  RX10_TEMP350 = RX10_TEMP349+1;

			for(int RX10_TEMP348=0; RX10_TEMP348 < RX10_TEMP350; RX10_TEMP348++)
				{

				final int RX10_TEMP352 = RX10_TEMP348;


				final Point1 pt = Program.regionOrdinalPoint1(X10_TEMP106, RX10_TEMP352,myUniquePlacePoint);

				//async(X10_TEMP107)
					{

					final int X10_TEMP111 = 0;


					final int X10_TEMP112 = X10_TEMP111;


					final Dist1 RX10_TEMP353 = info.distValue;


					final Region1 RX10_TEMP354 = RX10_TEMP353.dReg;


					final int RX10_TEMP355 = Program.searchPointInRegion1(RX10_TEMP354, pt,X10_TEMP107);


					final int RX10_TEMP356 = 0;


					final boolean RX10_TEMP357 = RX10_TEMP355 < RX10_TEMP356;

					if(RX10_TEMP357)
						{

						String RX10_TEMP358 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP358);

						}

					final int RX10_TEMP359 = Program.getPlaceFromDist1(RX10_TEMP353, RX10_TEMP355,X10_TEMP107);


					final int RX10_TEMP361 = 0;


					final boolean RX10_TEMP362 = RX10_TEMP359 != RX10_TEMP361;

					if(RX10_TEMP362)
						{

						String RX10_TEMP360 = "Bad place access for array info";

						throw new RuntimeException(RX10_TEMP360);

						}
					Program.setRefArrayValue1int(info, RX10_TEMP355, X10_TEMP112,X10_TEMP107);
					}
				}
			}

		final intRefArray1 X10_TEMP115 = nPartOld;


		final intRefArray1 X10_TEMP116 = nPart;


		final Region1 RX10_TEMP363 = dUnique.dReg;


		final int RX10_TEMP364 = 0;


		final int RX10_TEMP365 = 1;


		int RX10_TEMP366 = 1;


		RX10_TEMP366 = RX10_TEMP366 - RX10_TEMP365;


		final int  RX10_TEMP367 = RX10_TEMP366+1;


		final int RX10_TEMP368 = RX10_TEMP366+1;


		final intStub[] RX10_TEMP369 = new intStub[RX10_TEMP368];

		/*FINISH
*/			{
			for(int RX10_TEMP370=0; RX10_TEMP370 < RX10_TEMP367; RX10_TEMP370++)
				{

				final int RX10_TEMP371 = 0;


				final int RX10_TEMP372 = RX10_TEMP370;


				final int RX10_TEMP373 = 0;


				final int RX10_TEMP374 = Program.getDistLocalCount1(dUnique, RX10_TEMP372,myUniquePlacePoint);


				final int RX10_TEMP375 = RX10_TEMP374 - RX10_TEMP365;


				final Point1[] RX10_TEMP376 = Program.getDistLocalArray1(dUnique, RX10_TEMP372,myUniquePlacePoint);

				//async(RX10_TEMP373)
					{

					final int RX10_TEMP400 = RX10_TEMP375+1;


					final int[] RX10_TEMP401 = new int/*NewUpdatableArray*/[RX10_TEMP400];
/*arrayInitBlock*/
for(int RX10_TEMP377= 0;RX10_TEMP377 <RX10_TEMP401.length ;RX10_TEMP377++ )						{

						final Point1 X10_TEMP114 = RX10_TEMP376[RX10_TEMP377];


						final Dist1 RX10_TEMP378 = X10_TEMP115.distValue;


						final Region1 RX10_TEMP379 = RX10_TEMP378.dReg;


						final int RX10_TEMP380 = Program.searchPointInRegion1(RX10_TEMP379, X10_TEMP114,RX10_TEMP373);


						final int RX10_TEMP381 = 0;


						final boolean RX10_TEMP382 = RX10_TEMP380 < RX10_TEMP381;

						if(RX10_TEMP382)
							{

							String RX10_TEMP383 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP383);

							}

						final int RX10_TEMP384 = Program.getPlaceFromDist1(RX10_TEMP378, RX10_TEMP380,RX10_TEMP373);


						final int RX10_TEMP386 = 0;


						final boolean RX10_TEMP387 = RX10_TEMP384 != RX10_TEMP386;

						if(RX10_TEMP387)
							{

							String RX10_TEMP385 = "Bad place access for array X10_TEMP115";

							throw new RuntimeException(RX10_TEMP385);

							}

						final int RX10_TEMP388 = Program.getRefArrayValue1int(X10_TEMP115, RX10_TEMP380,RX10_TEMP373);


						final int X10_TEMP117 = RX10_TEMP388;


						final Dist1 RX10_TEMP389 = X10_TEMP116.distValue;


						final Region1 RX10_TEMP390 = RX10_TEMP389.dReg;


						final int RX10_TEMP391 = Program.searchPointInRegion1(RX10_TEMP390, X10_TEMP114,RX10_TEMP373);


						final int RX10_TEMP392 = 0;


						final boolean RX10_TEMP393 = RX10_TEMP391 < RX10_TEMP392;

						if(RX10_TEMP393)
							{

							String RX10_TEMP394 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP394);

							}

						final int RX10_TEMP395 = Program.getPlaceFromDist1(RX10_TEMP389, RX10_TEMP391,RX10_TEMP373);


						final int RX10_TEMP397 = 0;


						final boolean RX10_TEMP398 = RX10_TEMP395 != RX10_TEMP397;

						if(RX10_TEMP398)
							{

							String RX10_TEMP396 = "Bad place access for array X10_TEMP116";

							throw new RuntimeException(RX10_TEMP396);

							}

						final int RX10_TEMP399 = Program.getRefArrayValue1int(X10_TEMP116, RX10_TEMP391,RX10_TEMP373);


						final int X10_TEMP118 = RX10_TEMP399;


						final int X10_TEMP119 = X10_TEMP117 + X10_TEMP118;

						RX10_TEMP401[RX10_TEMP377] =X10_TEMP119;
						}

;


					final intStub RX10_TEMP402 = new intStub(RX10_TEMP401,RX10_TEMP373);
					
Program.globalPointerHashMap.get(RX10_TEMP373).add(RX10_TEMP402.hashCode());

					//async(RX10_TEMP371)
						{
						RX10_TEMP369[RX10_TEMP370] = RX10_TEMP402;
						}
					}
				}
			}

		final intStub[] RX10_TEMP403 = (intStub[])(new intStub/*value*/[RX10_TEMP367]);
/*arrayInitBlock*/
for(int RX10_TEMP405= 0;RX10_TEMP405 <RX10_TEMP403.length ;RX10_TEMP405++ )			{

			final intStub RX10_TEMP404 = RX10_TEMP369[RX10_TEMP405];

			RX10_TEMP403[RX10_TEMP405] =RX10_TEMP404;
			}

;


		final intRefArray1 RX10_TEMP406 = new intRefArray1(dUnique, RX10_TEMP403,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP406.hashCode());


		final intRefArray1 X10_TEMP113 = RX10_TEMP406;


		nPartOld = X10_TEMP113;


		boolean doneInner = false;


		boolean doneOuter = false;


		boolean X10_TEMP123 = false;

		do 			{

			int mter = 0;


			final Region1 RX10_TEMP407 = dUnique.dReg;


			final int RX10_TEMP408 = 0;


			final int RX10_TEMP409 = 1;


			int RX10_TEMP410 = 1;


			RX10_TEMP410 = RX10_TEMP410 - RX10_TEMP409;


			final int  RX10_TEMP411 = RX10_TEMP410+1;


			final int RX10_TEMP412 = RX10_TEMP410+1;


			final intStub[] RX10_TEMP413 = new intStub[RX10_TEMP412];

			/*FINISH
*/				{
				for(int RX10_TEMP414=0; RX10_TEMP414 < RX10_TEMP411; RX10_TEMP414++)
					{

					final int RX10_TEMP415 = 0;


					final int RX10_TEMP416 = RX10_TEMP414;


					final int RX10_TEMP417 = 0;


					final int RX10_TEMP418 = Program.getDistLocalCount1(dUnique, RX10_TEMP416,myUniquePlacePoint);


					final int RX10_TEMP419 = RX10_TEMP418 - RX10_TEMP409;

					//async(RX10_TEMP417)
						{

						final int RX10_TEMP421 = RX10_TEMP419+1;


						final int[] RX10_TEMP422 = new int/*NewUpdatableArray*/[RX10_TEMP421];
/*arrayInitBlock*/
for(int RX10_TEMP420= 0;RX10_TEMP420 <RX10_TEMP422.length ;RX10_TEMP420++ )							{

							final int X10_TEMP126 = 0;

							RX10_TEMP422[RX10_TEMP420] =X10_TEMP126;
							}

;


						final intStub RX10_TEMP423 = new intStub(RX10_TEMP422,RX10_TEMP417);
						
Program.globalPointerHashMap.get(RX10_TEMP417).add(RX10_TEMP423.hashCode());

						//async(RX10_TEMP415)
							{
							RX10_TEMP413[RX10_TEMP414] = RX10_TEMP423;
							}
						}
					}
				}

			final intStub[] RX10_TEMP424 = (intStub[])(new intStub/*value*/[RX10_TEMP411]);
/*arrayInitBlock*/
for(int RX10_TEMP426= 0;RX10_TEMP426 <RX10_TEMP424.length ;RX10_TEMP426++ )				{

				final intStub RX10_TEMP425 = RX10_TEMP413[RX10_TEMP426];

				RX10_TEMP424[RX10_TEMP426] =RX10_TEMP425;
				}

;


			final intRefArray1 RX10_TEMP427 = new intRefArray1(dUnique, RX10_TEMP424,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP427.hashCode());


			final intRefArray1 overflow = RX10_TEMP427;

			/*FINISH
*/				{

				final Dist1 X10_TEMP129 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP429 = X10_TEMP129.dReg;


				final int RX10_TEMP432 = 1;


				int RX10_TEMP430 = RX10_TEMP429.regSize;


				RX10_TEMP430 = RX10_TEMP430 - RX10_TEMP432;


				final int  RX10_TEMP431 = RX10_TEMP430+1;

				for(int RX10_TEMP428=0; RX10_TEMP428 < RX10_TEMP431; RX10_TEMP428++)
					{

					final int RX10_TEMP433 = RX10_TEMP428;


					final Point1 X10_TEMP130 = Program.regionOrdinalPoint1(RX10_TEMP429, RX10_TEMP433,myUniquePlacePoint);


					final int pl = X10_TEMP130.f0;


					final Region1 RX10_TEMP434 = X10_TEMP129.dReg;


					final int RX10_TEMP435 = Program.searchPointInRegion1(RX10_TEMP434, X10_TEMP130,myUniquePlacePoint);


					final int RX10_TEMP436 = 0;


					final boolean RX10_TEMP437 = RX10_TEMP435 < RX10_TEMP436;

					if(RX10_TEMP437)
						{

						final String RX10_TEMP438 = "Point X10_TEMP130 not found in the distribution X10_TEMP129.";

						throw new RuntimeException(RX10_TEMP438);

						}

					final int RX10_TEMP439 = Program.getPlaceFromDist1(X10_TEMP129, RX10_TEMP435,myUniquePlacePoint);


					final int X10_TEMP131 = RX10_TEMP439;

					//async(X10_TEMP131)
						{

						final int X10_TEMP132 = 0;


						final Dist2 X10_TEMP134 = Program.restrictDist2(dFieldSpace, X10_TEMP132,X10_TEMP131);


						final Region2 RX10_TEMP440 = X10_TEMP134.dReg;


						final Region2 X10_TEMP135 = RX10_TEMP440;


						final Region2 rLocal = X10_TEMP135;


						final int X10_TEMP139 = 0;


						final Region1 rLocal1 = Program.X10Util_getRank2D(rLocal, X10_TEMP139,X10_TEMP131);


						final int RX10_TEMP441 = rLocal1.regSize;


						final int RX10_TEMP442 = 0;


						final boolean RX10_TEMP443 = RX10_TEMP441 <= RX10_TEMP442;

						if(RX10_TEMP443)
							{

							final String RX10_TEMP444 = "Operation high() not defined on empty region rLocal1";

							throw new RuntimeException(RX10_TEMP444);

							}

						final int X10_TEMP141 = Program.regionHigh(rLocal1,X10_TEMP131);


						final int X10_TEMP142 = 1;


						final double ub = X10_TEMP141 + X10_TEMP142;


						final int RX10_TEMP445 = rLocal1.regSize;


						final int RX10_TEMP446 = 0;


						final boolean RX10_TEMP447 = RX10_TEMP445 <= RX10_TEMP446;

						if(RX10_TEMP447)
							{

							final String RX10_TEMP448 = "Operation low() not defined on empty region rLocal1";

							throw new RuntimeException(RX10_TEMP448);

							}

						final double lb = Program.regionLow(rLocal1,X10_TEMP131);


						final int X10_TEMP148 = 0;


						final int X10_TEMP149 = X10_TEMP148;


						final Point1 RX10_TEMP449 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP449.hashCode());


						final Dist1 RX10_TEMP450 = outLt.distValue;


						final Region1 RX10_TEMP451 = RX10_TEMP450.dReg;


						final int RX10_TEMP452 = Program.searchPointInRegion1(RX10_TEMP451, RX10_TEMP449,X10_TEMP131);


						final int RX10_TEMP453 = 0;


						final boolean RX10_TEMP454 = RX10_TEMP452 < RX10_TEMP453;

						if(RX10_TEMP454)
							{

							String RX10_TEMP455 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP455);

							}

						final int RX10_TEMP456 = Program.getPlaceFromDist1(RX10_TEMP450, RX10_TEMP452,X10_TEMP131);


						final int RX10_TEMP458 = 0;


						final boolean RX10_TEMP459 = RX10_TEMP456 != RX10_TEMP458;

						if(RX10_TEMP459)
							{

							String RX10_TEMP457 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP457);

							}
						Program.setRefArrayValue1int(outLt, RX10_TEMP452, X10_TEMP149,X10_TEMP131);

						final int X10_TEMP153 = 0;


						final int X10_TEMP154 = X10_TEMP153;


						final Point1 RX10_TEMP460 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP460.hashCode());


						final Dist1 RX10_TEMP461 = outRt.distValue;


						final Region1 RX10_TEMP462 = RX10_TEMP461.dReg;


						final int RX10_TEMP463 = Program.searchPointInRegion1(RX10_TEMP462, RX10_TEMP460,X10_TEMP131);


						final int RX10_TEMP464 = 0;


						final boolean RX10_TEMP465 = RX10_TEMP463 < RX10_TEMP464;

						if(RX10_TEMP465)
							{

							String RX10_TEMP466 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP466);

							}

						final int RX10_TEMP467 = Program.getPlaceFromDist1(RX10_TEMP461, RX10_TEMP463,X10_TEMP131);


						final int RX10_TEMP469 = 0;


						final boolean RX10_TEMP470 = RX10_TEMP467 != RX10_TEMP469;

						if(RX10_TEMP470)
							{

							String RX10_TEMP468 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP468);

							}
						Program.setRefArrayValue1int(outRt, RX10_TEMP463, X10_TEMP154,X10_TEMP131);

						final int X10_TEMP160 = 0;


						final Point1 RX10_TEMP471 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP471.hashCode());


						final Dist1 RX10_TEMP472 = nPart.distValue;


						final Region1 RX10_TEMP473 = RX10_TEMP472.dReg;


						final int RX10_TEMP474 = Program.searchPointInRegion1(RX10_TEMP473, RX10_TEMP471,X10_TEMP131);


						final int RX10_TEMP475 = 0;


						final boolean RX10_TEMP476 = RX10_TEMP474 < RX10_TEMP475;

						if(RX10_TEMP476)
							{

							String RX10_TEMP477 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP477);

							}

						final int RX10_TEMP478 = Program.getPlaceFromDist1(RX10_TEMP472, RX10_TEMP474,X10_TEMP131);


						final int RX10_TEMP480 = 0;


						final boolean RX10_TEMP481 = RX10_TEMP478 != RX10_TEMP480;

						if(RX10_TEMP481)
							{

							String RX10_TEMP479 = "Bad place access for array nPart";

							throw new RuntimeException(RX10_TEMP479);

							}

						final int RX10_TEMP482 = Program.getRefArrayValue1int(nPart, RX10_TEMP474,X10_TEMP131);


						final int X10_TEMP157 = RX10_TEMP482;


						final int X10_TEMP158 = 1;


						final int X10_TEMP161 = X10_TEMP157 - X10_TEMP158;


						final Region1 X10_TEMP163 = Program.createNewRegion1R(X10_TEMP160, X10_TEMP161,X10_TEMP131);


						final int RX10_TEMP487 = 1;


						int RX10_TEMP485 = X10_TEMP163.regSize;


						RX10_TEMP485 = RX10_TEMP485 - RX10_TEMP487;


						final int  RX10_TEMP486 = RX10_TEMP485+1;

						for(int RX10_TEMP483=0; RX10_TEMP483 < RX10_TEMP486; RX10_TEMP483++)
							{

							final int RX10_TEMP488 = RX10_TEMP483;


							final Point1 RX10_TEMP484 = Program.regionOrdinalPoint1(X10_TEMP163, RX10_TEMP488,X10_TEMP131);


							final int i = RX10_TEMP484.f0;


							final Point2 RX10_TEMP489 = new Point2(pl, i,X10_TEMP131);
							
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP489.hashCode());


							final Dist2 RX10_TEMP490 = part.distValue;


							final Region2 RX10_TEMP491 = RX10_TEMP490.dReg;


							final int RX10_TEMP492 = Program.searchPointInRegion2(RX10_TEMP491, RX10_TEMP489,X10_TEMP131);


							final int RX10_TEMP493 = 0;


							final boolean RX10_TEMP494 = RX10_TEMP492 < RX10_TEMP493;

							if(RX10_TEMP494)
								{

								String RX10_TEMP495 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP495);

								}

							final int RX10_TEMP496 = Program.getPlaceFromDist2(RX10_TEMP490, RX10_TEMP492,X10_TEMP131);


							final int RX10_TEMP498 = 0;


							final boolean RX10_TEMP499 = RX10_TEMP496 != RX10_TEMP498;

							if(RX10_TEMP499)
								{

								String RX10_TEMP497 = "Bad place access for array part";

								throw new RuntimeException(RX10_TEMP497);

								}

							final Particle RX10_TEMP500 = Program.getRefArrayValue2Particle(part, RX10_TEMP492,X10_TEMP131);


							final Particle p = RX10_TEMP500;


							double y = Program.Particle_getY(p,X10_TEMP131);


							final boolean X10_TEMP169 = y < lb;

							if(X10_TEMP169)
								{

								final Point1 RX10_TEMP501 = new Point1(pl,X10_TEMP131);
								
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP501.hashCode());


								final Dist1 RX10_TEMP502 = outLt.distValue;


								final Region1 RX10_TEMP503 = RX10_TEMP502.dReg;


								final int RX10_TEMP504 = Program.searchPointInRegion1(RX10_TEMP503, RX10_TEMP501,X10_TEMP131);


								final int RX10_TEMP505 = 0;


								final boolean RX10_TEMP506 = RX10_TEMP504 < RX10_TEMP505;

								if(RX10_TEMP506)
									{

									String RX10_TEMP507 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP507);

									}

								final int RX10_TEMP508 = Program.getPlaceFromDist1(RX10_TEMP502, RX10_TEMP504,X10_TEMP131);


								final int RX10_TEMP510 = 0;


								final boolean RX10_TEMP511 = RX10_TEMP508 != RX10_TEMP510;

								if(RX10_TEMP511)
									{

									String RX10_TEMP509 = "Bad place access for array outLt";

									throw new RuntimeException(RX10_TEMP509);

									}

								final int RX10_TEMP512 = Program.getRefArrayValue1int(outLt, RX10_TEMP504,X10_TEMP131);


								final int X10_TEMP171 = RX10_TEMP512;


								final int X10_TEMP172 = rBuffer.regSize;


								final boolean X10_TEMP174 = X10_TEMP171 < X10_TEMP172;

								if(X10_TEMP174)
									{

									final int X10_TEMP175 = 0;


									final boolean X10_TEMP177 = true;

									if(X10_TEMP177)
										{

										final double X10_TEMP179 = y + rsize;


										y = X10_TEMP179;

										}

									final Point1 RX10_TEMP513 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP513.hashCode());


									final Dist1 RX10_TEMP514 = outLt.distValue;


									final Region1 RX10_TEMP515 = RX10_TEMP514.dReg;


									final int RX10_TEMP516 = Program.searchPointInRegion1(RX10_TEMP515, RX10_TEMP513,X10_TEMP131);


									final int RX10_TEMP517 = 0;


									final boolean RX10_TEMP518 = RX10_TEMP516 < RX10_TEMP517;

									if(RX10_TEMP518)
										{

										String RX10_TEMP519 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP519);

										}

									final int RX10_TEMP520 = Program.getPlaceFromDist1(RX10_TEMP514, RX10_TEMP516,X10_TEMP131);


									final int RX10_TEMP522 = 0;


									final boolean RX10_TEMP523 = RX10_TEMP520 != RX10_TEMP522;

									if(RX10_TEMP523)
										{

										String RX10_TEMP521 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP521);

										}

									final int RX10_TEMP524 = Program.getRefArrayValue1int(outLt, RX10_TEMP516,X10_TEMP131);


									final int X10_TEMP183 = RX10_TEMP524;


									final Particle X10_TEMP187 = Program.Particle_setY(p, y,X10_TEMP131);


									final Particle X10_TEMP188 = X10_TEMP187;


									final Point2 RX10_TEMP525 = new Point2(pl, X10_TEMP183,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP525.hashCode());


									final Dist2 RX10_TEMP526 = sBufferL.distValue;


									final Region2 RX10_TEMP527 = RX10_TEMP526.dReg;


									final int RX10_TEMP528 = Program.searchPointInRegion2(RX10_TEMP527, RX10_TEMP525,X10_TEMP131);


									final int RX10_TEMP529 = 0;


									final boolean RX10_TEMP530 = RX10_TEMP528 < RX10_TEMP529;

									if(RX10_TEMP530)
										{

										String RX10_TEMP531 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP531);

										}

									final int RX10_TEMP532 = Program.getPlaceFromDist2(RX10_TEMP526, RX10_TEMP528,X10_TEMP131);


									final int RX10_TEMP534 = 0;


									final boolean RX10_TEMP535 = RX10_TEMP532 != RX10_TEMP534;

									if(RX10_TEMP535)
										{

										String RX10_TEMP533 = "Bad place access for array sBufferL";

										throw new RuntimeException(RX10_TEMP533);

										}
									Program.setRefArrayValue2Particle(sBufferL, RX10_TEMP528, X10_TEMP188,X10_TEMP131);

									final Point1 RX10_TEMP536 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP536.hashCode());


									final Dist1 RX10_TEMP537 = outLt.distValue;


									final Region1 RX10_TEMP538 = RX10_TEMP537.dReg;


									final int RX10_TEMP539 = Program.searchPointInRegion1(RX10_TEMP538, RX10_TEMP536,X10_TEMP131);


									final int RX10_TEMP540 = 0;


									final boolean RX10_TEMP541 = RX10_TEMP539 < RX10_TEMP540;

									if(RX10_TEMP541)
										{

										String RX10_TEMP542 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP542);

										}

									final int RX10_TEMP543 = Program.getPlaceFromDist1(RX10_TEMP537, RX10_TEMP539,X10_TEMP131);


									final int RX10_TEMP545 = 0;


									final boolean RX10_TEMP546 = RX10_TEMP543 != RX10_TEMP545;

									if(RX10_TEMP546)
										{

										String RX10_TEMP544 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP544);

										}

									final int RX10_TEMP547 = Program.getRefArrayValue1int(outLt, RX10_TEMP539,X10_TEMP131);


									final int X10_TEMP192 = RX10_TEMP547;


									final Point1 RX10_TEMP548 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP548.hashCode());


									final Dist1 RX10_TEMP549 = outRt.distValue;


									final Region1 RX10_TEMP550 = RX10_TEMP549.dReg;


									final int RX10_TEMP551 = Program.searchPointInRegion1(RX10_TEMP550, RX10_TEMP548,X10_TEMP131);


									final int RX10_TEMP552 = 0;


									final boolean RX10_TEMP553 = RX10_TEMP551 < RX10_TEMP552;

									if(RX10_TEMP553)
										{

										String RX10_TEMP554 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP554);

										}

									final int RX10_TEMP555 = Program.getPlaceFromDist1(RX10_TEMP549, RX10_TEMP551,X10_TEMP131);


									final int RX10_TEMP557 = 0;


									final boolean RX10_TEMP558 = RX10_TEMP555 != RX10_TEMP557;

									if(RX10_TEMP558)
										{

										String RX10_TEMP556 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP556);

										}

									final int RX10_TEMP559 = Program.getRefArrayValue1int(outRt, RX10_TEMP551,X10_TEMP131);


									final int X10_TEMP193 = RX10_TEMP559;


									final int X10_TEMP195 = X10_TEMP192 + X10_TEMP193;


									final int X10_TEMP198 = i;


									final Point2 RX10_TEMP560 = new Point2(pl, X10_TEMP195,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP560.hashCode());


									final Dist2 RX10_TEMP561 = holes.distValue;


									final Region2 RX10_TEMP562 = RX10_TEMP561.dReg;


									final int RX10_TEMP563 = Program.searchPointInRegion2(RX10_TEMP562, RX10_TEMP560,X10_TEMP131);


									final int RX10_TEMP564 = 0;


									final boolean RX10_TEMP565 = RX10_TEMP563 < RX10_TEMP564;

									if(RX10_TEMP565)
										{

										String RX10_TEMP566 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP566);

										}

									final int RX10_TEMP567 = Program.getPlaceFromDist2(RX10_TEMP561, RX10_TEMP563,X10_TEMP131);


									final int RX10_TEMP569 = 0;


									final boolean RX10_TEMP570 = RX10_TEMP567 != RX10_TEMP569;

									if(RX10_TEMP570)
										{

										String RX10_TEMP568 = "Bad place access for array holes";

										throw new RuntimeException(RX10_TEMP568);

										}
									Program.setRefArrayValue2int(holes, RX10_TEMP563, X10_TEMP198,X10_TEMP131);

									final Point1 RX10_TEMP571 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP571.hashCode());


									final Dist1 RX10_TEMP572 = outLt.distValue;


									final Region1 RX10_TEMP573 = RX10_TEMP572.dReg;


									final int RX10_TEMP574 = Program.searchPointInRegion1(RX10_TEMP573, RX10_TEMP571,X10_TEMP131);


									final int RX10_TEMP575 = 0;


									final boolean RX10_TEMP576 = RX10_TEMP574 < RX10_TEMP575;

									if(RX10_TEMP576)
										{

										String RX10_TEMP577 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP577);

										}

									final int RX10_TEMP578 = Program.getPlaceFromDist1(RX10_TEMP572, RX10_TEMP574,X10_TEMP131);


									final int RX10_TEMP580 = 0;


									final boolean RX10_TEMP581 = RX10_TEMP578 != RX10_TEMP580;

									if(RX10_TEMP581)
										{

										String RX10_TEMP579 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP579);

										}

									final int RX10_TEMP582 = Program.getRefArrayValue1int(outLt, RX10_TEMP574,X10_TEMP131);


									final int X10_TEMP200 = RX10_TEMP582;


									final int X10_TEMP201 = 1;


									final Point1 RX10_TEMP583 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP583.hashCode());


									final Dist1 RX10_TEMP584 = outLt.distValue;


									final Region1 RX10_TEMP585 = RX10_TEMP584.dReg;


									final int RX10_TEMP586 = Program.searchPointInRegion1(RX10_TEMP585, RX10_TEMP583,X10_TEMP131);


									final int RX10_TEMP587 = 0;


									final boolean RX10_TEMP588 = RX10_TEMP586 < RX10_TEMP587;

									if(RX10_TEMP588)
										{

										String RX10_TEMP589 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP589);

										}

									final int RX10_TEMP590 = Program.getPlaceFromDist1(RX10_TEMP584, RX10_TEMP586,X10_TEMP131);


									final int RX10_TEMP592 = 0;


									final boolean RX10_TEMP593 = RX10_TEMP590 != RX10_TEMP592;

									if(RX10_TEMP593)
										{

										String RX10_TEMP591 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP591);

										}

									final int RX10_TEMP594 = Program.getRefArrayValue1int(outLt, RX10_TEMP586,X10_TEMP131);


									final int X10_TEMP202 = RX10_TEMP594;


									final int X10_TEMP203 = X10_TEMP202 + X10_TEMP201;


									final Point1 RX10_TEMP595 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP595.hashCode());


									final Dist1 RX10_TEMP596 = outLt.distValue;


									final Region1 RX10_TEMP597 = RX10_TEMP596.dReg;


									final int RX10_TEMP598 = Program.searchPointInRegion1(RX10_TEMP597, RX10_TEMP595,X10_TEMP131);


									final int RX10_TEMP599 = 0;


									final boolean RX10_TEMP600 = RX10_TEMP598 < RX10_TEMP599;

									if(RX10_TEMP600)
										{

										String RX10_TEMP601 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP601);

										}

									final int RX10_TEMP602 = Program.getPlaceFromDist1(RX10_TEMP596, RX10_TEMP598,X10_TEMP131);


									final int RX10_TEMP604 = 0;


									final boolean RX10_TEMP605 = RX10_TEMP602 != RX10_TEMP604;

									if(RX10_TEMP605)
										{

										String RX10_TEMP603 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP603);

										}
									Program.setRefArrayValue1int(outLt, RX10_TEMP598, X10_TEMP203,X10_TEMP131);
									}
								else
									{

									final int X10_TEMP207 = 1;


									final int X10_TEMP208 = X10_TEMP207;


									final Point1 RX10_TEMP606 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP606.hashCode());


									final Dist1 RX10_TEMP607 = overflow.distValue;


									final Region1 RX10_TEMP608 = RX10_TEMP607.dReg;


									final int RX10_TEMP609 = Program.searchPointInRegion1(RX10_TEMP608, RX10_TEMP606,X10_TEMP131);


									final int RX10_TEMP610 = 0;


									final boolean RX10_TEMP611 = RX10_TEMP609 < RX10_TEMP610;

									if(RX10_TEMP611)
										{

										String RX10_TEMP612 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP612);

										}

									final int RX10_TEMP613 = Program.getPlaceFromDist1(RX10_TEMP607, RX10_TEMP609,X10_TEMP131);


									final int RX10_TEMP615 = 0;


									final boolean RX10_TEMP616 = RX10_TEMP613 != RX10_TEMP615;

									if(RX10_TEMP616)
										{

										String RX10_TEMP614 = "Bad place access for array overflow";

										throw new RuntimeException(RX10_TEMP614);

										}
									Program.setRefArrayValue1int(overflow, RX10_TEMP609, X10_TEMP208,X10_TEMP131);
									break;
									}
 								}
							else
								{

								final boolean X10_TEMP210 = y >= ub;

								if(X10_TEMP210)
									{

									final Point1 RX10_TEMP617 = new Point1(pl,X10_TEMP131);
									
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP617.hashCode());


									final Dist1 RX10_TEMP618 = outRt.distValue;


									final Region1 RX10_TEMP619 = RX10_TEMP618.dReg;


									final int RX10_TEMP620 = Program.searchPointInRegion1(RX10_TEMP619, RX10_TEMP617,X10_TEMP131);


									final int RX10_TEMP621 = 0;


									final boolean RX10_TEMP622 = RX10_TEMP620 < RX10_TEMP621;

									if(RX10_TEMP622)
										{

										String RX10_TEMP623 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP623);

										}

									final int RX10_TEMP624 = Program.getPlaceFromDist1(RX10_TEMP618, RX10_TEMP620,X10_TEMP131);


									final int RX10_TEMP626 = 0;


									final boolean RX10_TEMP627 = RX10_TEMP624 != RX10_TEMP626;

									if(RX10_TEMP627)
										{

										String RX10_TEMP625 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP625);

										}

									final int RX10_TEMP628 = Program.getRefArrayValue1int(outRt, RX10_TEMP620,X10_TEMP131);


									final int X10_TEMP212 = RX10_TEMP628;


									final int X10_TEMP213 = rBuffer.regSize;


									final boolean X10_TEMP215 = X10_TEMP212 < X10_TEMP213;

									if(X10_TEMP215)
										{

										final int X10_TEMP216 = 0;


										final boolean X10_TEMP218 = true;

										if(X10_TEMP218)
											{

											final double X10_TEMP220 = y - rsize;


											y = X10_TEMP220;

											}

										final Point1 RX10_TEMP629 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP629.hashCode());


										final Dist1 RX10_TEMP630 = outRt.distValue;


										final Region1 RX10_TEMP631 = RX10_TEMP630.dReg;


										final int RX10_TEMP632 = Program.searchPointInRegion1(RX10_TEMP631, RX10_TEMP629,X10_TEMP131);


										final int RX10_TEMP633 = 0;


										final boolean RX10_TEMP634 = RX10_TEMP632 < RX10_TEMP633;

										if(RX10_TEMP634)
											{

											String RX10_TEMP635 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP635);

											}

										final int RX10_TEMP636 = Program.getPlaceFromDist1(RX10_TEMP630, RX10_TEMP632,X10_TEMP131);


										final int RX10_TEMP638 = 0;


										final boolean RX10_TEMP639 = RX10_TEMP636 != RX10_TEMP638;

										if(RX10_TEMP639)
											{

											String RX10_TEMP637 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP637);

											}

										final int RX10_TEMP640 = Program.getRefArrayValue1int(outRt, RX10_TEMP632,X10_TEMP131);


										final int X10_TEMP224 = RX10_TEMP640;


										final Particle X10_TEMP228 = Program.Particle_setY(p, y,X10_TEMP131);


										final Particle X10_TEMP229 = X10_TEMP228;


										final Point2 RX10_TEMP641 = new Point2(pl, X10_TEMP224,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP641.hashCode());


										final Dist2 RX10_TEMP642 = sBufferR.distValue;


										final Region2 RX10_TEMP643 = RX10_TEMP642.dReg;


										final int RX10_TEMP644 = Program.searchPointInRegion2(RX10_TEMP643, RX10_TEMP641,X10_TEMP131);


										final int RX10_TEMP645 = 0;


										final boolean RX10_TEMP646 = RX10_TEMP644 < RX10_TEMP645;

										if(RX10_TEMP646)
											{

											String RX10_TEMP647 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP647);

											}

										final int RX10_TEMP648 = Program.getPlaceFromDist2(RX10_TEMP642, RX10_TEMP644,X10_TEMP131);


										final int RX10_TEMP650 = 0;


										final boolean RX10_TEMP651 = RX10_TEMP648 != RX10_TEMP650;

										if(RX10_TEMP651)
											{

											String RX10_TEMP649 = "Bad place access for array sBufferR";

											throw new RuntimeException(RX10_TEMP649);

											}
										Program.setRefArrayValue2Particle(sBufferR, RX10_TEMP644, X10_TEMP229,X10_TEMP131);

										final Point1 RX10_TEMP652 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP652.hashCode());


										final Dist1 RX10_TEMP653 = outLt.distValue;


										final Region1 RX10_TEMP654 = RX10_TEMP653.dReg;


										final int RX10_TEMP655 = Program.searchPointInRegion1(RX10_TEMP654, RX10_TEMP652,X10_TEMP131);


										final int RX10_TEMP656 = 0;


										final boolean RX10_TEMP657 = RX10_TEMP655 < RX10_TEMP656;

										if(RX10_TEMP657)
											{

											String RX10_TEMP658 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP658);

											}

										final int RX10_TEMP659 = Program.getPlaceFromDist1(RX10_TEMP653, RX10_TEMP655,X10_TEMP131);


										final int RX10_TEMP661 = 0;


										final boolean RX10_TEMP662 = RX10_TEMP659 != RX10_TEMP661;

										if(RX10_TEMP662)
											{

											String RX10_TEMP660 = "Bad place access for array outLt";

											throw new RuntimeException(RX10_TEMP660);

											}

										final int RX10_TEMP663 = Program.getRefArrayValue1int(outLt, RX10_TEMP655,X10_TEMP131);


										final int X10_TEMP233 = RX10_TEMP663;


										final Point1 RX10_TEMP664 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP664.hashCode());


										final Dist1 RX10_TEMP665 = outRt.distValue;


										final Region1 RX10_TEMP666 = RX10_TEMP665.dReg;


										final int RX10_TEMP667 = Program.searchPointInRegion1(RX10_TEMP666, RX10_TEMP664,X10_TEMP131);


										final int RX10_TEMP668 = 0;


										final boolean RX10_TEMP669 = RX10_TEMP667 < RX10_TEMP668;

										if(RX10_TEMP669)
											{

											String RX10_TEMP670 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP670);

											}

										final int RX10_TEMP671 = Program.getPlaceFromDist1(RX10_TEMP665, RX10_TEMP667,X10_TEMP131);


										final int RX10_TEMP673 = 0;


										final boolean RX10_TEMP674 = RX10_TEMP671 != RX10_TEMP673;

										if(RX10_TEMP674)
											{

											String RX10_TEMP672 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP672);

											}

										final int RX10_TEMP675 = Program.getRefArrayValue1int(outRt, RX10_TEMP667,X10_TEMP131);


										final int X10_TEMP234 = RX10_TEMP675;


										final int X10_TEMP236 = X10_TEMP233 + X10_TEMP234;


										final int X10_TEMP239 = i;


										final Point2 RX10_TEMP676 = new Point2(pl, X10_TEMP236,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP676.hashCode());


										final Dist2 RX10_TEMP677 = holes.distValue;


										final Region2 RX10_TEMP678 = RX10_TEMP677.dReg;


										final int RX10_TEMP679 = Program.searchPointInRegion2(RX10_TEMP678, RX10_TEMP676,X10_TEMP131);


										final int RX10_TEMP680 = 0;


										final boolean RX10_TEMP681 = RX10_TEMP679 < RX10_TEMP680;

										if(RX10_TEMP681)
											{

											String RX10_TEMP682 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP682);

											}

										final int RX10_TEMP683 = Program.getPlaceFromDist2(RX10_TEMP677, RX10_TEMP679,X10_TEMP131);


										final int RX10_TEMP685 = 0;


										final boolean RX10_TEMP686 = RX10_TEMP683 != RX10_TEMP685;

										if(RX10_TEMP686)
											{

											String RX10_TEMP684 = "Bad place access for array holes";

											throw new RuntimeException(RX10_TEMP684);

											}
										Program.setRefArrayValue2int(holes, RX10_TEMP679, X10_TEMP239,X10_TEMP131);

										final Point1 RX10_TEMP687 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP687.hashCode());


										final Dist1 RX10_TEMP688 = outRt.distValue;


										final Region1 RX10_TEMP689 = RX10_TEMP688.dReg;


										final int RX10_TEMP690 = Program.searchPointInRegion1(RX10_TEMP689, RX10_TEMP687,X10_TEMP131);


										final int RX10_TEMP691 = 0;


										final boolean RX10_TEMP692 = RX10_TEMP690 < RX10_TEMP691;

										if(RX10_TEMP692)
											{

											String RX10_TEMP693 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP693);

											}

										final int RX10_TEMP694 = Program.getPlaceFromDist1(RX10_TEMP688, RX10_TEMP690,X10_TEMP131);


										final int RX10_TEMP696 = 0;


										final boolean RX10_TEMP697 = RX10_TEMP694 != RX10_TEMP696;

										if(RX10_TEMP697)
											{

											String RX10_TEMP695 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP695);

											}

										final int RX10_TEMP698 = Program.getRefArrayValue1int(outRt, RX10_TEMP690,X10_TEMP131);


										final int X10_TEMP241 = RX10_TEMP698;


										final int X10_TEMP242 = 1;


										final Point1 RX10_TEMP699 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP699.hashCode());


										final Dist1 RX10_TEMP700 = outRt.distValue;


										final Region1 RX10_TEMP701 = RX10_TEMP700.dReg;


										final int RX10_TEMP702 = Program.searchPointInRegion1(RX10_TEMP701, RX10_TEMP699,X10_TEMP131);


										final int RX10_TEMP703 = 0;


										final boolean RX10_TEMP704 = RX10_TEMP702 < RX10_TEMP703;

										if(RX10_TEMP704)
											{

											String RX10_TEMP705 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP705);

											}

										final int RX10_TEMP706 = Program.getPlaceFromDist1(RX10_TEMP700, RX10_TEMP702,X10_TEMP131);


										final int RX10_TEMP708 = 0;


										final boolean RX10_TEMP709 = RX10_TEMP706 != RX10_TEMP708;

										if(RX10_TEMP709)
											{

											String RX10_TEMP707 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP707);

											}

										final int RX10_TEMP710 = Program.getRefArrayValue1int(outRt, RX10_TEMP702,X10_TEMP131);


										final int X10_TEMP243 = RX10_TEMP710;


										final int X10_TEMP244 = X10_TEMP243 + X10_TEMP242;


										final Point1 RX10_TEMP711 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP711.hashCode());


										final Dist1 RX10_TEMP712 = outRt.distValue;


										final Region1 RX10_TEMP713 = RX10_TEMP712.dReg;


										final int RX10_TEMP714 = Program.searchPointInRegion1(RX10_TEMP713, RX10_TEMP711,X10_TEMP131);


										final int RX10_TEMP715 = 0;


										final boolean RX10_TEMP716 = RX10_TEMP714 < RX10_TEMP715;

										if(RX10_TEMP716)
											{

											String RX10_TEMP717 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP717);

											}

										final int RX10_TEMP718 = Program.getPlaceFromDist1(RX10_TEMP712, RX10_TEMP714,X10_TEMP131);


										final int RX10_TEMP720 = 0;


										final boolean RX10_TEMP721 = RX10_TEMP718 != RX10_TEMP720;

										if(RX10_TEMP721)
											{

											String RX10_TEMP719 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP719);

											}
										Program.setRefArrayValue1int(outRt, RX10_TEMP714, X10_TEMP244,X10_TEMP131);
										}
									else
										{

										final int X10_TEMP248 = 1;


										final int X10_TEMP249 = X10_TEMP248;


										final Point1 RX10_TEMP722 = new Point1(pl,X10_TEMP131);
										
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP722.hashCode());


										final Dist1 RX10_TEMP723 = overflow.distValue;


										final Region1 RX10_TEMP724 = RX10_TEMP723.dReg;


										final int RX10_TEMP725 = Program.searchPointInRegion1(RX10_TEMP724, RX10_TEMP722,X10_TEMP131);


										final int RX10_TEMP726 = 0;


										final boolean RX10_TEMP727 = RX10_TEMP725 < RX10_TEMP726;

										if(RX10_TEMP727)
											{

											String RX10_TEMP728 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP728);

											}

										final int RX10_TEMP729 = Program.getPlaceFromDist1(RX10_TEMP723, RX10_TEMP725,X10_TEMP131);


										final int RX10_TEMP731 = 0;


										final boolean RX10_TEMP732 = RX10_TEMP729 != RX10_TEMP731;

										if(RX10_TEMP732)
											{

											String RX10_TEMP730 = "Bad place access for array overflow";

											throw new RuntimeException(RX10_TEMP730);

											}
										Program.setRefArrayValue1int(overflow, RX10_TEMP725, X10_TEMP249,X10_TEMP131);
										break;
										}
 									}
								}
 							}

						final Point1 RX10_TEMP733 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP733.hashCode());


						final Dist1 RX10_TEMP734 = outLt.distValue;


						final Region1 RX10_TEMP735 = RX10_TEMP734.dReg;


						final int RX10_TEMP736 = Program.searchPointInRegion1(RX10_TEMP735, RX10_TEMP733,X10_TEMP131);


						final int RX10_TEMP737 = 0;


						final boolean RX10_TEMP738 = RX10_TEMP736 < RX10_TEMP737;

						if(RX10_TEMP738)
							{

							String RX10_TEMP739 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP739);

							}

						final int RX10_TEMP740 = Program.getPlaceFromDist1(RX10_TEMP734, RX10_TEMP736,X10_TEMP131);


						final int RX10_TEMP742 = 0;


						final boolean RX10_TEMP743 = RX10_TEMP740 != RX10_TEMP742;

						if(RX10_TEMP743)
							{

							String RX10_TEMP741 = "Bad place access for array outLt";

							throw new RuntimeException(RX10_TEMP741);

							}

						final int RX10_TEMP744 = Program.getRefArrayValue1int(outLt, RX10_TEMP736,X10_TEMP131);


						final int X10_TEMP253 = RX10_TEMP744;


						final Point1 RX10_TEMP745 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP745.hashCode());


						final Dist1 RX10_TEMP746 = outRt.distValue;


						final Region1 RX10_TEMP747 = RX10_TEMP746.dReg;


						final int RX10_TEMP748 = Program.searchPointInRegion1(RX10_TEMP747, RX10_TEMP745,X10_TEMP131);


						final int RX10_TEMP749 = 0;


						final boolean RX10_TEMP750 = RX10_TEMP748 < RX10_TEMP749;

						if(RX10_TEMP750)
							{

							String RX10_TEMP751 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP751);

							}

						final int RX10_TEMP752 = Program.getPlaceFromDist1(RX10_TEMP746, RX10_TEMP748,X10_TEMP131);


						final int RX10_TEMP754 = 0;


						final boolean RX10_TEMP755 = RX10_TEMP752 != RX10_TEMP754;

						if(RX10_TEMP755)
							{

							String RX10_TEMP753 = "Bad place access for array outRt";

							throw new RuntimeException(RX10_TEMP753);

							}

						final int RX10_TEMP756 = Program.getRefArrayValue1int(outRt, RX10_TEMP748,X10_TEMP131);


						final int X10_TEMP254 = RX10_TEMP756;


						final int X10_TEMP257 = X10_TEMP253 + X10_TEMP254;


						final int X10_TEMP258 = X10_TEMP257;


						final Point1 RX10_TEMP757 = new Point1(pl,X10_TEMP131);
						
Program.globalPointerHashMap.get(X10_TEMP131).add(RX10_TEMP757.hashCode());


						final Dist1 RX10_TEMP758 = nSent.distValue;


						final Region1 RX10_TEMP759 = RX10_TEMP758.dReg;


						final int RX10_TEMP760 = Program.searchPointInRegion1(RX10_TEMP759, RX10_TEMP757,X10_TEMP131);


						final int RX10_TEMP761 = 0;


						final boolean RX10_TEMP762 = RX10_TEMP760 < RX10_TEMP761;

						if(RX10_TEMP762)
							{

							String RX10_TEMP763 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP763);

							}

						final int RX10_TEMP764 = Program.getPlaceFromDist1(RX10_TEMP758, RX10_TEMP760,X10_TEMP131);


						final int RX10_TEMP766 = 0;


						final boolean RX10_TEMP767 = RX10_TEMP764 != RX10_TEMP766;

						if(RX10_TEMP767)
							{

							String RX10_TEMP765 = "Bad place access for array nSent";

							throw new RuntimeException(RX10_TEMP765);

							}
						Program.setRefArrayValue1int(nSent, RX10_TEMP760, X10_TEMP258,X10_TEMP131);
						}
					}
				}

			final int X10_TEMP260 = 2;


			final int X10_TEMP263 = Program.intrefArrayMax1(overflow,myUniquePlacePoint);


			final int X10_TEMP264 = X10_TEMP263;


			final Point1 RX10_TEMP768 = new Point1(X10_TEMP260,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP768.hashCode());


			final Dist1 RX10_TEMP769 = ibflg.distValue;


			final Region1 RX10_TEMP770 = RX10_TEMP769.dReg;


			final int RX10_TEMP771 = Program.searchPointInRegion1(RX10_TEMP770, RX10_TEMP768,myUniquePlacePoint);


			final int RX10_TEMP772 = 0;


			final boolean RX10_TEMP773 = RX10_TEMP771 < RX10_TEMP772;

			if(RX10_TEMP773)
				{

				String RX10_TEMP774 = "Array index out of bounds";

				throw new RuntimeException(RX10_TEMP774);

				}

			final int RX10_TEMP775 = Program.getPlaceFromDist1(RX10_TEMP769, RX10_TEMP771,myUniquePlacePoint);


			final int RX10_TEMP777 = 0;


			final boolean RX10_TEMP778 = RX10_TEMP775 != RX10_TEMP777;

			if(RX10_TEMP778)
				{

				String RX10_TEMP776 = "Bad place access for array ibflg";

				throw new RuntimeException(RX10_TEMP776);

				}
			Program.setRefArrayValue1int(ibflg, RX10_TEMP771, X10_TEMP264,myUniquePlacePoint);

			boolean X10_TEMP265 = false;

			do 				{

				final int X10_TEMP266 = 2;


				final int X10_TEMP268 = iter + X10_TEMP266;


				iter = X10_TEMP268;


				final int X10_TEMP269 = 1;


				final int X10_TEMP271 = mter + X10_TEMP269;


				mter = X10_TEMP271;

				Program.LinearESOpenPIC2D_transferParticles(X10_TEMP0, sBufferL, sBufferR, outLt, outRt, rBufferL, rBufferR, inLt, inRt,myUniquePlacePoint);

				final Region1 RX10_TEMP779 = dUnique.dReg;


				final int RX10_TEMP780 = 0;


				final int RX10_TEMP781 = 1;


				int RX10_TEMP782 = 1;


				RX10_TEMP782 = RX10_TEMP782 - RX10_TEMP781;


				final int  RX10_TEMP783 = RX10_TEMP782+1;


				final int RX10_TEMP784 = RX10_TEMP782+1;


				final intStub[] RX10_TEMP785 = new intStub[RX10_TEMP784];

				/*FINISH
*/					{
					for(int RX10_TEMP786=0; RX10_TEMP786 < RX10_TEMP783; RX10_TEMP786++)
						{

						final int RX10_TEMP787 = 0;


						final int RX10_TEMP788 = RX10_TEMP786;


						final int RX10_TEMP789 = 0;


						final int RX10_TEMP790 = Program.getDistLocalCount1(dUnique, RX10_TEMP788,myUniquePlacePoint);


						final int RX10_TEMP791 = RX10_TEMP790 - RX10_TEMP781;

						//async(RX10_TEMP789)
							{

							final int RX10_TEMP792 = RX10_TEMP791+1;


							final int[] RX10_TEMP793 = new int[RX10_TEMP792];


							final intStub RX10_TEMP794 = new intStub(RX10_TEMP793,RX10_TEMP789);
							
Program.globalPointerHashMap.get(RX10_TEMP789).add(RX10_TEMP794.hashCode());

							//async(RX10_TEMP787)
								{
								RX10_TEMP785[RX10_TEMP786] = RX10_TEMP794;
								}
							}
						}
					}

				final intStub[] RX10_TEMP795 = (intStub[])(new intStub/*value*/[RX10_TEMP783]);
/*arrayInitBlock*/
for(int RX10_TEMP797= 0;RX10_TEMP797 <RX10_TEMP795.length ;RX10_TEMP797++ )					{

					final intStub RX10_TEMP796 = RX10_TEMP785[RX10_TEMP797];

					RX10_TEMP795[RX10_TEMP797] =RX10_TEMP796;
					}

;


				final intRefArray1 RX10_TEMP798 = new intRefArray1(dUnique, RX10_TEMP795,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP798.hashCode());


				final intRefArray1 outgoing = RX10_TEMP798;

				/*FINISH
*/					{

					final Dist1 X10_TEMP282 = Program.getUniqueDist(myUniquePlacePoint);


					final Region1 RX10_TEMP800 = X10_TEMP282.dReg;


					final int RX10_TEMP803 = 1;


					int RX10_TEMP801 = RX10_TEMP800.regSize;


					RX10_TEMP801 = RX10_TEMP801 - RX10_TEMP803;


					final int  RX10_TEMP802 = RX10_TEMP801+1;

					for(int RX10_TEMP799=0; RX10_TEMP799 < RX10_TEMP802; RX10_TEMP799++)
						{

						final int RX10_TEMP804 = RX10_TEMP799;


						final Point1 X10_TEMP283 = Program.regionOrdinalPoint1(RX10_TEMP800, RX10_TEMP804,myUniquePlacePoint);


						final int pl = X10_TEMP283.f0;


						final Region1 RX10_TEMP805 = X10_TEMP282.dReg;


						final int RX10_TEMP806 = Program.searchPointInRegion1(RX10_TEMP805, X10_TEMP283,myUniquePlacePoint);


						final int RX10_TEMP807 = 0;


						final boolean RX10_TEMP808 = RX10_TEMP806 < RX10_TEMP807;

						if(RX10_TEMP808)
							{

							final String RX10_TEMP809 = "Point X10_TEMP283 not found in the distribution X10_TEMP282.";

							throw new RuntimeException(RX10_TEMP809);

							}

						final int RX10_TEMP810 = Program.getPlaceFromDist1(X10_TEMP282, RX10_TEMP806,myUniquePlacePoint);


						final int X10_TEMP284 = RX10_TEMP810;

						//async(X10_TEMP284)
							{

							final int X10_TEMP285 = 0;


							final Dist2 X10_TEMP287 = Program.restrictDist2(dFieldSpace, X10_TEMP285,X10_TEMP284);


							final Region2 RX10_TEMP811 = X10_TEMP287.dReg;


							final Region2 X10_TEMP288 = RX10_TEMP811;


							final Region2 rLocal = X10_TEMP288;


							final int X10_TEMP292 = 0;


							final Region1 rLocal1 = Program.X10Util_getRank2D(rLocal, X10_TEMP292,X10_TEMP284);


							final int RX10_TEMP812 = rLocal1.regSize;


							final int RX10_TEMP813 = 0;


							final boolean RX10_TEMP814 = RX10_TEMP812 <= RX10_TEMP813;

							if(RX10_TEMP814)
								{

								final String RX10_TEMP815 = "Operation high() not defined on empty region rLocal1";

								throw new RuntimeException(RX10_TEMP815);

								}

							final int X10_TEMP294 = Program.regionHigh(rLocal1,X10_TEMP284);


							final int X10_TEMP295 = 1;


							final double ub = X10_TEMP294 + X10_TEMP295;


							final int RX10_TEMP816 = rLocal1.regSize;


							final int RX10_TEMP817 = 0;


							final boolean RX10_TEMP818 = RX10_TEMP816 <= RX10_TEMP817;

							if(RX10_TEMP818)
								{

								final String RX10_TEMP819 = "Operation low() not defined on empty region rLocal1";

								throw new RuntimeException(RX10_TEMP819);

								}

							final double lb = Program.regionLow(rLocal1,X10_TEMP284);


							final int X10_TEMP301 = 0;


							final int X10_TEMP302 = X10_TEMP301;


							final Point1 RX10_TEMP820 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP820.hashCode());


							final Dist1 RX10_TEMP821 = outLt.distValue;


							final Region1 RX10_TEMP822 = RX10_TEMP821.dReg;


							final int RX10_TEMP823 = Program.searchPointInRegion1(RX10_TEMP822, RX10_TEMP820,X10_TEMP284);


							final int RX10_TEMP824 = 0;


							final boolean RX10_TEMP825 = RX10_TEMP823 < RX10_TEMP824;

							if(RX10_TEMP825)
								{

								String RX10_TEMP826 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP826);

								}

							final int RX10_TEMP827 = Program.getPlaceFromDist1(RX10_TEMP821, RX10_TEMP823,X10_TEMP284);


							final int RX10_TEMP829 = 0;


							final boolean RX10_TEMP830 = RX10_TEMP827 != RX10_TEMP829;

							if(RX10_TEMP830)
								{

								String RX10_TEMP828 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP828);

								}
							Program.setRefArrayValue1int(outLt, RX10_TEMP823, X10_TEMP302,X10_TEMP284);

							final int X10_TEMP306 = 0;


							final int X10_TEMP307 = X10_TEMP306;


							final Point1 RX10_TEMP831 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP831.hashCode());


							final Dist1 RX10_TEMP832 = outRt.distValue;


							final Region1 RX10_TEMP833 = RX10_TEMP832.dReg;


							final int RX10_TEMP834 = Program.searchPointInRegion1(RX10_TEMP833, RX10_TEMP831,X10_TEMP284);


							final int RX10_TEMP835 = 0;


							final boolean RX10_TEMP836 = RX10_TEMP834 < RX10_TEMP835;

							if(RX10_TEMP836)
								{

								String RX10_TEMP837 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP837);

								}

							final int RX10_TEMP838 = Program.getPlaceFromDist1(RX10_TEMP832, RX10_TEMP834,X10_TEMP284);


							final int RX10_TEMP840 = 0;


							final boolean RX10_TEMP841 = RX10_TEMP838 != RX10_TEMP840;

							if(RX10_TEMP841)
								{

								String RX10_TEMP839 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP839);

								}
							Program.setRefArrayValue1int(outRt, RX10_TEMP834, X10_TEMP307,X10_TEMP284);

							int belowLeft = 0;


							final int X10_TEMP314 = 0;


							final Point1 RX10_TEMP842 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP842.hashCode());


							final Dist1 RX10_TEMP843 = inRt.distValue;


							final Region1 RX10_TEMP844 = RX10_TEMP843.dReg;


							final int RX10_TEMP845 = Program.searchPointInRegion1(RX10_TEMP844, RX10_TEMP842,X10_TEMP284);


							final int RX10_TEMP846 = 0;


							final boolean RX10_TEMP847 = RX10_TEMP845 < RX10_TEMP846;

							if(RX10_TEMP847)
								{

								String RX10_TEMP848 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP848);

								}

							final int RX10_TEMP849 = Program.getPlaceFromDist1(RX10_TEMP843, RX10_TEMP845,X10_TEMP284);


							final int RX10_TEMP851 = 0;


							final boolean RX10_TEMP852 = RX10_TEMP849 != RX10_TEMP851;

							if(RX10_TEMP852)
								{

								String RX10_TEMP850 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP850);

								}

							final int RX10_TEMP853 = Program.getRefArrayValue1int(inRt, RX10_TEMP845,X10_TEMP284);


							final int X10_TEMP311 = RX10_TEMP853;


							final int X10_TEMP312 = 1;


							final int X10_TEMP315 = X10_TEMP311 - X10_TEMP312;


							final Region1 X10_TEMP317 = Program.createNewRegion1R(X10_TEMP314, X10_TEMP315,X10_TEMP284);


							final int RX10_TEMP858 = 1;


							int RX10_TEMP856 = X10_TEMP317.regSize;


							RX10_TEMP856 = RX10_TEMP856 - RX10_TEMP858;


							final int  RX10_TEMP857 = RX10_TEMP856+1;

							for(int RX10_TEMP854=0; RX10_TEMP854 < RX10_TEMP857; RX10_TEMP854++)
								{

								final int RX10_TEMP859 = RX10_TEMP854;


								final Point1 RX10_TEMP855 = Program.regionOrdinalPoint1(X10_TEMP317, RX10_TEMP859,X10_TEMP284);


								final int i = RX10_TEMP855.f0;


								final Point2 RX10_TEMP860 = new Point2(pl, i,X10_TEMP284);
								
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP860.hashCode());


								final Dist2 RX10_TEMP861 = rBufferR.distValue;


								final Region2 RX10_TEMP862 = RX10_TEMP861.dReg;


								final int RX10_TEMP863 = Program.searchPointInRegion2(RX10_TEMP862, RX10_TEMP860,X10_TEMP284);


								final int RX10_TEMP864 = 0;


								final boolean RX10_TEMP865 = RX10_TEMP863 < RX10_TEMP864;

								if(RX10_TEMP865)
									{

									String RX10_TEMP866 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP866);

									}

								final int RX10_TEMP867 = Program.getPlaceFromDist2(RX10_TEMP861, RX10_TEMP863,X10_TEMP284);


								final int RX10_TEMP869 = 0;


								final boolean RX10_TEMP870 = RX10_TEMP867 != RX10_TEMP869;

								if(RX10_TEMP870)
									{

									String RX10_TEMP868 = "Bad place access for array rBufferR";

									throw new RuntimeException(RX10_TEMP868);

									}

								final Particle RX10_TEMP871 = Program.getRefArrayValue2Particle(rBufferR, RX10_TEMP863,X10_TEMP284);


								final Particle p = RX10_TEMP871;


								final double y = Program.Particle_getY(p,X10_TEMP284);


								final boolean X10_TEMP323 = y < lb;

								if(X10_TEMP323)
									{

									final Point1 RX10_TEMP872 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP872.hashCode());


									final Dist1 RX10_TEMP873 = outLt.distValue;


									final Region1 RX10_TEMP874 = RX10_TEMP873.dReg;


									final int RX10_TEMP875 = Program.searchPointInRegion1(RX10_TEMP874, RX10_TEMP872,X10_TEMP284);


									final int RX10_TEMP876 = 0;


									final boolean RX10_TEMP877 = RX10_TEMP875 < RX10_TEMP876;

									if(RX10_TEMP877)
										{

										String RX10_TEMP878 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP878);

										}

									final int RX10_TEMP879 = Program.getPlaceFromDist1(RX10_TEMP873, RX10_TEMP875,X10_TEMP284);


									final int RX10_TEMP881 = 0;


									final boolean RX10_TEMP882 = RX10_TEMP879 != RX10_TEMP881;

									if(RX10_TEMP882)
										{

										String RX10_TEMP880 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP880);

										}

									final int RX10_TEMP883 = Program.getRefArrayValue1int(outLt, RX10_TEMP875,X10_TEMP284);


									final int X10_TEMP325 = RX10_TEMP883;


									final int X10_TEMP326 = 1;


									final Point1 RX10_TEMP884 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP884.hashCode());


									final Dist1 RX10_TEMP885 = outLt.distValue;


									final Region1 RX10_TEMP886 = RX10_TEMP885.dReg;


									final int RX10_TEMP887 = Program.searchPointInRegion1(RX10_TEMP886, RX10_TEMP884,X10_TEMP284);


									final int RX10_TEMP888 = 0;


									final boolean RX10_TEMP889 = RX10_TEMP887 < RX10_TEMP888;

									if(RX10_TEMP889)
										{

										String RX10_TEMP890 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP890);

										}

									final int RX10_TEMP891 = Program.getPlaceFromDist1(RX10_TEMP885, RX10_TEMP887,X10_TEMP284);


									final int RX10_TEMP893 = 0;


									final boolean RX10_TEMP894 = RX10_TEMP891 != RX10_TEMP893;

									if(RX10_TEMP894)
										{

										String RX10_TEMP892 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP892);

										}

									final int RX10_TEMP895 = Program.getRefArrayValue1int(outLt, RX10_TEMP887,X10_TEMP284);


									final int X10_TEMP327 = RX10_TEMP895;


									final int X10_TEMP328 = X10_TEMP327 + X10_TEMP326;


									final Point1 RX10_TEMP896 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP896.hashCode());


									final Dist1 RX10_TEMP897 = outLt.distValue;


									final Region1 RX10_TEMP898 = RX10_TEMP897.dReg;


									final int RX10_TEMP899 = Program.searchPointInRegion1(RX10_TEMP898, RX10_TEMP896,X10_TEMP284);


									final int RX10_TEMP900 = 0;


									final boolean RX10_TEMP901 = RX10_TEMP899 < RX10_TEMP900;

									if(RX10_TEMP901)
										{

										String RX10_TEMP902 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP902);

										}

									final int RX10_TEMP903 = Program.getPlaceFromDist1(RX10_TEMP897, RX10_TEMP899,X10_TEMP284);


									final int RX10_TEMP905 = 0;


									final boolean RX10_TEMP906 = RX10_TEMP903 != RX10_TEMP905;

									if(RX10_TEMP906)
										{

										String RX10_TEMP904 = "Bad place access for array outLt";

										throw new RuntimeException(RX10_TEMP904);

										}
									Program.setRefArrayValue1int(outLt, RX10_TEMP899, X10_TEMP328,X10_TEMP284);
									}

								final boolean X10_TEMP330 = y >= ub;

								if(X10_TEMP330)
									{

									final Point1 RX10_TEMP907 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP907.hashCode());


									final Dist1 RX10_TEMP908 = outRt.distValue;


									final Region1 RX10_TEMP909 = RX10_TEMP908.dReg;


									final int RX10_TEMP910 = Program.searchPointInRegion1(RX10_TEMP909, RX10_TEMP907,X10_TEMP284);


									final int RX10_TEMP911 = 0;


									final boolean RX10_TEMP912 = RX10_TEMP910 < RX10_TEMP911;

									if(RX10_TEMP912)
										{

										String RX10_TEMP913 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP913);

										}

									final int RX10_TEMP914 = Program.getPlaceFromDist1(RX10_TEMP908, RX10_TEMP910,X10_TEMP284);


									final int RX10_TEMP916 = 0;


									final boolean RX10_TEMP917 = RX10_TEMP914 != RX10_TEMP916;

									if(RX10_TEMP917)
										{

										String RX10_TEMP915 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP915);

										}

									final int RX10_TEMP918 = Program.getRefArrayValue1int(outRt, RX10_TEMP910,X10_TEMP284);


									final int X10_TEMP332 = RX10_TEMP918;


									final int X10_TEMP333 = 1;


									final Point1 RX10_TEMP919 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP919.hashCode());


									final Dist1 RX10_TEMP920 = outRt.distValue;


									final Region1 RX10_TEMP921 = RX10_TEMP920.dReg;


									final int RX10_TEMP922 = Program.searchPointInRegion1(RX10_TEMP921, RX10_TEMP919,X10_TEMP284);


									final int RX10_TEMP923 = 0;


									final boolean RX10_TEMP924 = RX10_TEMP922 < RX10_TEMP923;

									if(RX10_TEMP924)
										{

										String RX10_TEMP925 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP925);

										}

									final int RX10_TEMP926 = Program.getPlaceFromDist1(RX10_TEMP920, RX10_TEMP922,X10_TEMP284);


									final int RX10_TEMP928 = 0;


									final boolean RX10_TEMP929 = RX10_TEMP926 != RX10_TEMP928;

									if(RX10_TEMP929)
										{

										String RX10_TEMP927 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP927);

										}

									final int RX10_TEMP930 = Program.getRefArrayValue1int(outRt, RX10_TEMP922,X10_TEMP284);


									final int X10_TEMP334 = RX10_TEMP930;


									final int X10_TEMP335 = X10_TEMP334 + X10_TEMP333;


									final Point1 RX10_TEMP931 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP931.hashCode());


									final Dist1 RX10_TEMP932 = outRt.distValue;


									final Region1 RX10_TEMP933 = RX10_TEMP932.dReg;


									final int RX10_TEMP934 = Program.searchPointInRegion1(RX10_TEMP933, RX10_TEMP931,X10_TEMP284);


									final int RX10_TEMP935 = 0;


									final boolean RX10_TEMP936 = RX10_TEMP934 < RX10_TEMP935;

									if(RX10_TEMP936)
										{

										String RX10_TEMP937 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP937);

										}

									final int RX10_TEMP938 = Program.getPlaceFromDist1(RX10_TEMP932, RX10_TEMP934,X10_TEMP284);


									final int RX10_TEMP940 = 0;


									final boolean RX10_TEMP941 = RX10_TEMP938 != RX10_TEMP940;

									if(RX10_TEMP941)
										{

										String RX10_TEMP939 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP939);

										}
									Program.setRefArrayValue1int(outRt, RX10_TEMP934, X10_TEMP335,X10_TEMP284);
									}
								}

							final Point1 RX10_TEMP942 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP942.hashCode());


							final Dist1 RX10_TEMP943 = outRt.distValue;


							final Region1 RX10_TEMP944 = RX10_TEMP943.dReg;


							final int RX10_TEMP945 = Program.searchPointInRegion1(RX10_TEMP944, RX10_TEMP942,X10_TEMP284);


							final int RX10_TEMP946 = 0;


							final boolean RX10_TEMP947 = RX10_TEMP945 < RX10_TEMP946;

							if(RX10_TEMP947)
								{

								String RX10_TEMP948 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP948);

								}

							final int RX10_TEMP949 = Program.getPlaceFromDist1(RX10_TEMP943, RX10_TEMP945,X10_TEMP284);


							final int RX10_TEMP951 = 0;


							final boolean RX10_TEMP952 = RX10_TEMP949 != RX10_TEMP951;

							if(RX10_TEMP952)
								{

								String RX10_TEMP950 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP950);

								}

							final int RX10_TEMP953 = Program.getRefArrayValue1int(outRt, RX10_TEMP945,X10_TEMP284);


							final int X10_TEMP337 = RX10_TEMP953;


							final int X10_TEMP338 = 0;


							final boolean X10_TEMP340 = X10_TEMP337 != X10_TEMP338;

							if(X10_TEMP340)
								{

								final String X10_TEMP342 = "Info: particles returning up";

								System.err.println(X10_TEMP342);
								}

							final int X10_TEMP348 = 0;


							final Point1 RX10_TEMP954 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP954.hashCode());


							final Dist1 RX10_TEMP955 = inLt.distValue;


							final Region1 RX10_TEMP956 = RX10_TEMP955.dReg;


							final int RX10_TEMP957 = Program.searchPointInRegion1(RX10_TEMP956, RX10_TEMP954,X10_TEMP284);


							final int RX10_TEMP958 = 0;


							final boolean RX10_TEMP959 = RX10_TEMP957 < RX10_TEMP958;

							if(RX10_TEMP959)
								{

								String RX10_TEMP960 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP960);

								}

							final int RX10_TEMP961 = Program.getPlaceFromDist1(RX10_TEMP955, RX10_TEMP957,X10_TEMP284);


							final int RX10_TEMP963 = 0;


							final boolean RX10_TEMP964 = RX10_TEMP961 != RX10_TEMP963;

							if(RX10_TEMP964)
								{

								String RX10_TEMP962 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP962);

								}

							final int RX10_TEMP965 = Program.getRefArrayValue1int(inLt, RX10_TEMP957,X10_TEMP284);


							final int X10_TEMP345 = RX10_TEMP965;


							final int X10_TEMP346 = 1;


							final int X10_TEMP349 = X10_TEMP345 - X10_TEMP346;


							final Region1 X10_TEMP351 = Program.createNewRegion1R(X10_TEMP348, X10_TEMP349,X10_TEMP284);


							final int RX10_TEMP970 = 1;


							int RX10_TEMP968 = X10_TEMP351.regSize;


							RX10_TEMP968 = RX10_TEMP968 - RX10_TEMP970;


							final int  RX10_TEMP969 = RX10_TEMP968+1;

							for(int RX10_TEMP966=0; RX10_TEMP966 < RX10_TEMP969; RX10_TEMP966++)
								{

								final int RX10_TEMP971 = RX10_TEMP966;


								final Point1 RX10_TEMP967 = Program.regionOrdinalPoint1(X10_TEMP351, RX10_TEMP971,X10_TEMP284);


								final int i = RX10_TEMP967.f0;


								final Point2 RX10_TEMP972 = new Point2(pl, i,X10_TEMP284);
								
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP972.hashCode());


								final Dist2 RX10_TEMP973 = rBufferL.distValue;


								final Region2 RX10_TEMP974 = RX10_TEMP973.dReg;


								final int RX10_TEMP975 = Program.searchPointInRegion2(RX10_TEMP974, RX10_TEMP972,X10_TEMP284);


								final int RX10_TEMP976 = 0;


								final boolean RX10_TEMP977 = RX10_TEMP975 < RX10_TEMP976;

								if(RX10_TEMP977)
									{

									String RX10_TEMP978 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP978);

									}

								final int RX10_TEMP979 = Program.getPlaceFromDist2(RX10_TEMP973, RX10_TEMP975,X10_TEMP284);


								final int RX10_TEMP981 = 0;


								final boolean RX10_TEMP982 = RX10_TEMP979 != RX10_TEMP981;

								if(RX10_TEMP982)
									{

									String RX10_TEMP980 = "Bad place access for array rBufferL";

									throw new RuntimeException(RX10_TEMP980);

									}

								final Particle RX10_TEMP983 = Program.getRefArrayValue2Particle(rBufferL, RX10_TEMP975,X10_TEMP284);


								final Particle p = RX10_TEMP983;


								final double y = Program.Particle_getY(p,X10_TEMP284);


								final boolean X10_TEMP357 = y >= ub;

								if(X10_TEMP357)
									{

									final Point1 RX10_TEMP984 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP984.hashCode());


									final Dist1 RX10_TEMP985 = outRt.distValue;


									final Region1 RX10_TEMP986 = RX10_TEMP985.dReg;


									final int RX10_TEMP987 = Program.searchPointInRegion1(RX10_TEMP986, RX10_TEMP984,X10_TEMP284);


									final int RX10_TEMP988 = 0;


									final boolean RX10_TEMP989 = RX10_TEMP987 < RX10_TEMP988;

									if(RX10_TEMP989)
										{

										String RX10_TEMP990 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP990);

										}

									final int RX10_TEMP991 = Program.getPlaceFromDist1(RX10_TEMP985, RX10_TEMP987,X10_TEMP284);


									final int RX10_TEMP993 = 0;


									final boolean RX10_TEMP994 = RX10_TEMP991 != RX10_TEMP993;

									if(RX10_TEMP994)
										{

										String RX10_TEMP992 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP992);

										}

									final int RX10_TEMP995 = Program.getRefArrayValue1int(outRt, RX10_TEMP987,X10_TEMP284);


									final int X10_TEMP359 = RX10_TEMP995;


									final int X10_TEMP360 = 1;


									final Point1 RX10_TEMP996 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP996.hashCode());


									final Dist1 RX10_TEMP997 = outRt.distValue;


									final Region1 RX10_TEMP998 = RX10_TEMP997.dReg;


									final int RX10_TEMP999 = Program.searchPointInRegion1(RX10_TEMP998, RX10_TEMP996,X10_TEMP284);


									final int RX10_TEMP1000 = 0;


									final boolean RX10_TEMP1001 = RX10_TEMP999 < RX10_TEMP1000;

									if(RX10_TEMP1001)
										{

										String RX10_TEMP1002 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1002);

										}

									final int RX10_TEMP1003 = Program.getPlaceFromDist1(RX10_TEMP997, RX10_TEMP999,X10_TEMP284);


									final int RX10_TEMP1005 = 0;


									final boolean RX10_TEMP1006 = RX10_TEMP1003 != RX10_TEMP1005;

									if(RX10_TEMP1006)
										{

										String RX10_TEMP1004 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP1004);

										}

									final int RX10_TEMP1007 = Program.getRefArrayValue1int(outRt, RX10_TEMP999,X10_TEMP284);


									final int X10_TEMP361 = RX10_TEMP1007;


									final int X10_TEMP362 = X10_TEMP361 + X10_TEMP360;


									final Point1 RX10_TEMP1008 = new Point1(pl,X10_TEMP284);
									
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1008.hashCode());


									final Dist1 RX10_TEMP1009 = outRt.distValue;


									final Region1 RX10_TEMP1010 = RX10_TEMP1009.dReg;


									final int RX10_TEMP1011 = Program.searchPointInRegion1(RX10_TEMP1010, RX10_TEMP1008,X10_TEMP284);


									final int RX10_TEMP1012 = 0;


									final boolean RX10_TEMP1013 = RX10_TEMP1011 < RX10_TEMP1012;

									if(RX10_TEMP1013)
										{

										String RX10_TEMP1014 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1014);

										}

									final int RX10_TEMP1015 = Program.getPlaceFromDist1(RX10_TEMP1009, RX10_TEMP1011,X10_TEMP284);


									final int RX10_TEMP1017 = 0;


									final boolean RX10_TEMP1018 = RX10_TEMP1015 != RX10_TEMP1017;

									if(RX10_TEMP1018)
										{

										String RX10_TEMP1016 = "Bad place access for array outRt";

										throw new RuntimeException(RX10_TEMP1016);

										}
									Program.setRefArrayValue1int(outRt, RX10_TEMP1011, X10_TEMP362,X10_TEMP284);
									}

								final boolean X10_TEMP364 = y < lb;

								if(X10_TEMP364)
									{

									final int X10_TEMP365 = belowLeft;


									final int X10_TEMP366 = 1;


									belowLeft = belowLeft + X10_TEMP366;

									}
								}

							final int X10_TEMP367 = 0;


							final boolean X10_TEMP369 = belowLeft != X10_TEMP367;

							if(X10_TEMP369)
								{

								final String X10_TEMP371 = "Info: particles returning down";

								System.err.println(X10_TEMP371);
								}

							final Point1 RX10_TEMP1019 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1019.hashCode());


							final Dist1 RX10_TEMP1020 = outLt.distValue;


							final Region1 RX10_TEMP1021 = RX10_TEMP1020.dReg;


							final int RX10_TEMP1022 = Program.searchPointInRegion1(RX10_TEMP1021, RX10_TEMP1019,X10_TEMP284);


							final int RX10_TEMP1023 = 0;


							final boolean RX10_TEMP1024 = RX10_TEMP1022 < RX10_TEMP1023;

							if(RX10_TEMP1024)
								{

								String RX10_TEMP1025 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1025);

								}

							final int RX10_TEMP1026 = Program.getPlaceFromDist1(RX10_TEMP1020, RX10_TEMP1022,X10_TEMP284);


							final int RX10_TEMP1028 = 0;


							final boolean RX10_TEMP1029 = RX10_TEMP1026 != RX10_TEMP1028;

							if(RX10_TEMP1029)
								{

								String RX10_TEMP1027 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1027);

								}

							final int RX10_TEMP1030 = Program.getRefArrayValue1int(outLt, RX10_TEMP1022,X10_TEMP284);


							final int X10_TEMP374 = RX10_TEMP1030;


							final int X10_TEMP377 = X10_TEMP374 + belowLeft;


							final int X10_TEMP378 = X10_TEMP377;


							final Point1 RX10_TEMP1031 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1031.hashCode());


							final Dist1 RX10_TEMP1032 = outLt.distValue;


							final Region1 RX10_TEMP1033 = RX10_TEMP1032.dReg;


							final int RX10_TEMP1034 = Program.searchPointInRegion1(RX10_TEMP1033, RX10_TEMP1031,X10_TEMP284);


							final int RX10_TEMP1035 = 0;


							final boolean RX10_TEMP1036 = RX10_TEMP1034 < RX10_TEMP1035;

							if(RX10_TEMP1036)
								{

								String RX10_TEMP1037 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1037);

								}

							final int RX10_TEMP1038 = Program.getPlaceFromDist1(RX10_TEMP1032, RX10_TEMP1034,X10_TEMP284);


							final int RX10_TEMP1040 = 0;


							final boolean RX10_TEMP1041 = RX10_TEMP1038 != RX10_TEMP1040;

							if(RX10_TEMP1041)
								{

								String RX10_TEMP1039 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1039);

								}
							Program.setRefArrayValue1int(outLt, RX10_TEMP1034, X10_TEMP378,X10_TEMP284);

							final Point1 RX10_TEMP1042 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1042.hashCode());


							final Dist1 RX10_TEMP1043 = outLt.distValue;


							final Region1 RX10_TEMP1044 = RX10_TEMP1043.dReg;


							final int RX10_TEMP1045 = Program.searchPointInRegion1(RX10_TEMP1044, RX10_TEMP1042,X10_TEMP284);


							final int RX10_TEMP1046 = 0;


							final boolean RX10_TEMP1047 = RX10_TEMP1045 < RX10_TEMP1046;

							if(RX10_TEMP1047)
								{

								String RX10_TEMP1048 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1048);

								}

							final int RX10_TEMP1049 = Program.getPlaceFromDist1(RX10_TEMP1043, RX10_TEMP1045,X10_TEMP284);


							final int RX10_TEMP1051 = 0;


							final boolean RX10_TEMP1052 = RX10_TEMP1049 != RX10_TEMP1051;

							if(RX10_TEMP1052)
								{

								String RX10_TEMP1050 = "Bad place access for array outLt";

								throw new RuntimeException(RX10_TEMP1050);

								}

							final int RX10_TEMP1053 = Program.getRefArrayValue1int(outLt, RX10_TEMP1045,X10_TEMP284);


							final int X10_TEMP382 = RX10_TEMP1053;


							final Point1 RX10_TEMP1054 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1054.hashCode());


							final Dist1 RX10_TEMP1055 = outRt.distValue;


							final Region1 RX10_TEMP1056 = RX10_TEMP1055.dReg;


							final int RX10_TEMP1057 = Program.searchPointInRegion1(RX10_TEMP1056, RX10_TEMP1054,X10_TEMP284);


							final int RX10_TEMP1058 = 0;


							final boolean RX10_TEMP1059 = RX10_TEMP1057 < RX10_TEMP1058;

							if(RX10_TEMP1059)
								{

								String RX10_TEMP1060 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1060);

								}

							final int RX10_TEMP1061 = Program.getPlaceFromDist1(RX10_TEMP1055, RX10_TEMP1057,X10_TEMP284);


							final int RX10_TEMP1063 = 0;


							final boolean RX10_TEMP1064 = RX10_TEMP1061 != RX10_TEMP1063;

							if(RX10_TEMP1064)
								{

								String RX10_TEMP1062 = "Bad place access for array outRt";

								throw new RuntimeException(RX10_TEMP1062);

								}

							final int RX10_TEMP1065 = Program.getRefArrayValue1int(outRt, RX10_TEMP1057,X10_TEMP284);


							final int X10_TEMP383 = RX10_TEMP1065;


							final int X10_TEMP386 = X10_TEMP382 + X10_TEMP383;


							final int X10_TEMP387 = X10_TEMP386;


							final Point1 RX10_TEMP1066 = new Point1(pl,X10_TEMP284);
							
Program.globalPointerHashMap.get(X10_TEMP284).add(RX10_TEMP1066.hashCode());


							final Dist1 RX10_TEMP1067 = outgoing.distValue;


							final Region1 RX10_TEMP1068 = RX10_TEMP1067.dReg;


							final int RX10_TEMP1069 = Program.searchPointInRegion1(RX10_TEMP1068, RX10_TEMP1066,X10_TEMP284);


							final int RX10_TEMP1070 = 0;


							final boolean RX10_TEMP1071 = RX10_TEMP1069 < RX10_TEMP1070;

							if(RX10_TEMP1071)
								{

								String RX10_TEMP1072 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1072);

								}

							final int RX10_TEMP1073 = Program.getPlaceFromDist1(RX10_TEMP1067, RX10_TEMP1069,X10_TEMP284);


							final int RX10_TEMP1075 = 0;


							final boolean RX10_TEMP1076 = RX10_TEMP1073 != RX10_TEMP1075;

							if(RX10_TEMP1076)
								{

								String RX10_TEMP1074 = "Bad place access for array outgoing";

								throw new RuntimeException(RX10_TEMP1074);

								}
							Program.setRefArrayValue1int(outgoing, RX10_TEMP1069, X10_TEMP387,X10_TEMP284);
							}
						}
					}

				final int X10_TEMP389 = 1;


				final int X10_TEMP392 = Program.intrefArrayMax1(outgoing,myUniquePlacePoint);


				final int X10_TEMP393 = X10_TEMP392;


				final Point1 RX10_TEMP1077 = new Point1(X10_TEMP389,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1077.hashCode());


				final Dist1 RX10_TEMP1078 = ibflg.distValue;


				final Region1 RX10_TEMP1079 = RX10_TEMP1078.dReg;


				final int RX10_TEMP1080 = Program.searchPointInRegion1(RX10_TEMP1079, RX10_TEMP1077,myUniquePlacePoint);


				final int RX10_TEMP1081 = 0;


				final boolean RX10_TEMP1082 = RX10_TEMP1080 < RX10_TEMP1081;

				if(RX10_TEMP1082)
					{

					String RX10_TEMP1083 = "Array index out of bounds";

					throw new RuntimeException(RX10_TEMP1083);

					}

				final int RX10_TEMP1084 = Program.getPlaceFromDist1(RX10_TEMP1078, RX10_TEMP1080,myUniquePlacePoint);


				final int RX10_TEMP1086 = 0;


				final boolean RX10_TEMP1087 = RX10_TEMP1084 != RX10_TEMP1086;

				if(RX10_TEMP1087)
					{

					String RX10_TEMP1085 = "Bad place access for array ibflg";

					throw new RuntimeException(RX10_TEMP1085);

					}
				Program.setRefArrayValue1int(ibflg, RX10_TEMP1080, X10_TEMP393,myUniquePlacePoint);

				final int X10_TEMP395 = 1;


				final Point1 RX10_TEMP1088 = new Point1(X10_TEMP395,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1088.hashCode());


				final Dist1 RX10_TEMP1089 = ibflg.distValue;


				final Region1 RX10_TEMP1090 = RX10_TEMP1089.dReg;


				final int RX10_TEMP1091 = Program.searchPointInRegion1(RX10_TEMP1090, RX10_TEMP1088,myUniquePlacePoint);


				final int RX10_TEMP1092 = 0;


				final boolean RX10_TEMP1093 = RX10_TEMP1091 < RX10_TEMP1092;

				if(RX10_TEMP1093)
					{

					String RX10_TEMP1094 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP1094);

					}

				final int RX10_TEMP1095 = Program.getPlaceFromDist1(RX10_TEMP1089, RX10_TEMP1091,myUniquePlacePoint);


				final int RX10_TEMP1097 = 0;


				final boolean RX10_TEMP1098 = RX10_TEMP1095 != RX10_TEMP1097;

				if(RX10_TEMP1098)
					{

					String RX10_TEMP1096 = "Bad place access for array ibflg";

					throw new RuntimeException(RX10_TEMP1096);

					}

				final int RX10_TEMP1099 = Program.getRefArrayValue1int(ibflg, RX10_TEMP1091,myUniquePlacePoint);


				final int X10_TEMP396 = RX10_TEMP1099;


				final int X10_TEMP397 = 0;


				final boolean X10_TEMP399 = X10_TEMP396 != X10_TEMP397;

				if(X10_TEMP399)
					{
					/*FINISH
*/						{

						final Dist1 X10_TEMP401 = Program.getUniqueDist(myUniquePlacePoint);


						final Region1 RX10_TEMP1101 = X10_TEMP401.dReg;


						final int RX10_TEMP1104 = 1;


						int RX10_TEMP1102 = RX10_TEMP1101.regSize;


						RX10_TEMP1102 = RX10_TEMP1102 - RX10_TEMP1104;


						final int  RX10_TEMP1103 = RX10_TEMP1102+1;

						for(int RX10_TEMP1100=0; RX10_TEMP1100 < RX10_TEMP1103; RX10_TEMP1100++)
							{

							final int RX10_TEMP1105 = RX10_TEMP1100;


							final Point1 X10_TEMP402 = Program.regionOrdinalPoint1(RX10_TEMP1101, RX10_TEMP1105,myUniquePlacePoint);


							final int pl = X10_TEMP402.f0;


							final Region1 RX10_TEMP1106 = X10_TEMP401.dReg;


							final int RX10_TEMP1107 = Program.searchPointInRegion1(RX10_TEMP1106, X10_TEMP402,myUniquePlacePoint);


							final int RX10_TEMP1108 = 0;


							final boolean RX10_TEMP1109 = RX10_TEMP1107 < RX10_TEMP1108;

							if(RX10_TEMP1109)
								{

								final String RX10_TEMP1110 = "Point X10_TEMP402 not found in the distribution X10_TEMP401.";

								throw new RuntimeException(RX10_TEMP1110);

								}

							final int RX10_TEMP1111 = Program.getPlaceFromDist1(X10_TEMP401, RX10_TEMP1107,myUniquePlacePoint);


							final int X10_TEMP403 = RX10_TEMP1111;

							//async(X10_TEMP403)
								{

								final int X10_TEMP404 = 0;


								final Dist2 X10_TEMP406 = Program.restrictDist2(dFieldSpace, X10_TEMP404,X10_TEMP403);


								final Region2 RX10_TEMP1112 = X10_TEMP406.dReg;


								final Region2 X10_TEMP407 = RX10_TEMP1112;


								final Region2 rLocal = X10_TEMP407;


								final int X10_TEMP411 = 0;


								final Region1 rLocal1 = Program.X10Util_getRank2D(rLocal, X10_TEMP411,X10_TEMP403);


								final int RX10_TEMP1113 = rLocal1.regSize;


								final int RX10_TEMP1114 = 0;


								final boolean RX10_TEMP1115 = RX10_TEMP1113 <= RX10_TEMP1114;

								if(RX10_TEMP1115)
									{

									final String RX10_TEMP1116 = "Operation high() not defined on empty region rLocal1";

									throw new RuntimeException(RX10_TEMP1116);

									}

								final int X10_TEMP413 = Program.regionHigh(rLocal1,X10_TEMP403);


								final int X10_TEMP414 = 1;


								final double ub = X10_TEMP413 + X10_TEMP414;


								final int RX10_TEMP1117 = rLocal1.regSize;


								final int RX10_TEMP1118 = 0;


								final boolean RX10_TEMP1119 = RX10_TEMP1117 <= RX10_TEMP1118;

								if(RX10_TEMP1119)
									{

									final String RX10_TEMP1120 = "Operation low() not defined on empty region rLocal1";

									throw new RuntimeException(RX10_TEMP1120);

									}

								final double lb = Program.regionLow(rLocal1,X10_TEMP403);


								final int X10_TEMP420 = 0;


								final int X10_TEMP421 = X10_TEMP420;


								final Point1 RX10_TEMP1121 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1121.hashCode());


								final Dist1 RX10_TEMP1122 = outLt.distValue;


								final Region1 RX10_TEMP1123 = RX10_TEMP1122.dReg;


								final int RX10_TEMP1124 = Program.searchPointInRegion1(RX10_TEMP1123, RX10_TEMP1121,X10_TEMP403);


								final int RX10_TEMP1125 = 0;


								final boolean RX10_TEMP1126 = RX10_TEMP1124 < RX10_TEMP1125;

								if(RX10_TEMP1126)
									{

									String RX10_TEMP1127 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1127);

									}

								final int RX10_TEMP1128 = Program.getPlaceFromDist1(RX10_TEMP1122, RX10_TEMP1124,X10_TEMP403);


								final int RX10_TEMP1130 = 0;


								final boolean RX10_TEMP1131 = RX10_TEMP1128 != RX10_TEMP1130;

								if(RX10_TEMP1131)
									{

									String RX10_TEMP1129 = "Bad place access for array outLt";

									throw new RuntimeException(RX10_TEMP1129);

									}
								Program.setRefArrayValue1int(outLt, RX10_TEMP1124, X10_TEMP421,X10_TEMP403);

								final int X10_TEMP425 = 0;


								final int X10_TEMP426 = X10_TEMP425;


								final Point1 RX10_TEMP1132 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1132.hashCode());


								final Dist1 RX10_TEMP1133 = outRt.distValue;


								final Region1 RX10_TEMP1134 = RX10_TEMP1133.dReg;


								final int RX10_TEMP1135 = Program.searchPointInRegion1(RX10_TEMP1134, RX10_TEMP1132,X10_TEMP403);


								final int RX10_TEMP1136 = 0;


								final boolean RX10_TEMP1137 = RX10_TEMP1135 < RX10_TEMP1136;

								if(RX10_TEMP1137)
									{

									String RX10_TEMP1138 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1138);

									}

								final int RX10_TEMP1139 = Program.getPlaceFromDist1(RX10_TEMP1133, RX10_TEMP1135,X10_TEMP403);


								final int RX10_TEMP1141 = 0;


								final boolean RX10_TEMP1142 = RX10_TEMP1139 != RX10_TEMP1141;

								if(RX10_TEMP1142)
									{

									String RX10_TEMP1140 = "Bad place access for array outRt";

									throw new RuntimeException(RX10_TEMP1140);

									}
								Program.setRefArrayValue1int(outRt, RX10_TEMP1135, X10_TEMP426,X10_TEMP403);

								final int X10_TEMP430 = 0;


								final int X10_TEMP431 = X10_TEMP430;


								final Point1 RX10_TEMP1143 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1143.hashCode());


								final Dist1 RX10_TEMP1144 = overflow.distValue;


								final Region1 RX10_TEMP1145 = RX10_TEMP1144.dReg;


								final int RX10_TEMP1146 = Program.searchPointInRegion1(RX10_TEMP1145, RX10_TEMP1143,X10_TEMP403);


								final int RX10_TEMP1147 = 0;


								final boolean RX10_TEMP1148 = RX10_TEMP1146 < RX10_TEMP1147;

								if(RX10_TEMP1148)
									{

									String RX10_TEMP1149 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1149);

									}

								final int RX10_TEMP1150 = Program.getPlaceFromDist1(RX10_TEMP1144, RX10_TEMP1146,X10_TEMP403);


								final int RX10_TEMP1152 = 0;


								final boolean RX10_TEMP1153 = RX10_TEMP1150 != RX10_TEMP1152;

								if(RX10_TEMP1153)
									{

									String RX10_TEMP1151 = "Bad place access for array overflow";

									throw new RuntimeException(RX10_TEMP1151);

									}
								Program.setRefArrayValue1int(overflow, RX10_TEMP1146, X10_TEMP431,X10_TEMP403);

								int inRightStaying = 0;


								final int X10_TEMP438 = 0;


								final Point1 RX10_TEMP1154 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1154.hashCode());


								final Dist1 RX10_TEMP1155 = inRt.distValue;


								final Region1 RX10_TEMP1156 = RX10_TEMP1155.dReg;


								final int RX10_TEMP1157 = Program.searchPointInRegion1(RX10_TEMP1156, RX10_TEMP1154,X10_TEMP403);


								final int RX10_TEMP1158 = 0;


								final boolean RX10_TEMP1159 = RX10_TEMP1157 < RX10_TEMP1158;

								if(RX10_TEMP1159)
									{

									String RX10_TEMP1160 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1160);

									}

								final int RX10_TEMP1161 = Program.getPlaceFromDist1(RX10_TEMP1155, RX10_TEMP1157,X10_TEMP403);


								final int RX10_TEMP1163 = 0;


								final boolean RX10_TEMP1164 = RX10_TEMP1161 != RX10_TEMP1163;

								if(RX10_TEMP1164)
									{

									String RX10_TEMP1162 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP1162);

									}

								final int RX10_TEMP1165 = Program.getRefArrayValue1int(inRt, RX10_TEMP1157,X10_TEMP403);


								final int X10_TEMP435 = RX10_TEMP1165;


								final int X10_TEMP436 = 1;


								final int X10_TEMP439 = X10_TEMP435 - X10_TEMP436;


								final Region1 X10_TEMP441 = Program.createNewRegion1R(X10_TEMP438, X10_TEMP439,X10_TEMP403);


								final int RX10_TEMP1170 = 1;


								int RX10_TEMP1168 = X10_TEMP441.regSize;


								RX10_TEMP1168 = RX10_TEMP1168 - RX10_TEMP1170;


								final int  RX10_TEMP1169 = RX10_TEMP1168+1;

								for(int RX10_TEMP1166=0; RX10_TEMP1166 < RX10_TEMP1169; RX10_TEMP1166++)
									{

									final int RX10_TEMP1171 = RX10_TEMP1166;


									final Point1 RX10_TEMP1167 = Program.regionOrdinalPoint1(X10_TEMP441, RX10_TEMP1171,X10_TEMP403);


									final int i = RX10_TEMP1167.f0;


									final Point2 RX10_TEMP1172 = new Point2(pl, i,X10_TEMP403);
									
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1172.hashCode());


									final Dist2 RX10_TEMP1173 = rBufferR.distValue;


									final Region2 RX10_TEMP1174 = RX10_TEMP1173.dReg;


									final int RX10_TEMP1175 = Program.searchPointInRegion2(RX10_TEMP1174, RX10_TEMP1172,X10_TEMP403);


									final int RX10_TEMP1176 = 0;


									final boolean RX10_TEMP1177 = RX10_TEMP1175 < RX10_TEMP1176;

									if(RX10_TEMP1177)
										{

										String RX10_TEMP1178 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1178);

										}

									final int RX10_TEMP1179 = Program.getPlaceFromDist2(RX10_TEMP1173, RX10_TEMP1175,X10_TEMP403);


									final int RX10_TEMP1181 = 0;


									final boolean RX10_TEMP1182 = RX10_TEMP1179 != RX10_TEMP1181;

									if(RX10_TEMP1182)
										{

										String RX10_TEMP1180 = "Bad place access for array rBufferR";

										throw new RuntimeException(RX10_TEMP1180);

										}

									final Particle RX10_TEMP1183 = Program.getRefArrayValue2Particle(rBufferR, RX10_TEMP1175,X10_TEMP403);


									final Particle p = RX10_TEMP1183;


									double y = Program.Particle_getY(p,X10_TEMP403);


									final boolean X10_TEMP447 = y < lb;

									if(X10_TEMP447)
										{

										final int X10_TEMP448 = 0;


										final boolean X10_TEMP450 = true;

										if(X10_TEMP450)
											{

											final double X10_TEMP452 = y + rsize;


											y = X10_TEMP452;

											}

										final Point1 RX10_TEMP1184 = new Point1(pl,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1184.hashCode());


										final Dist1 RX10_TEMP1185 = outLt.distValue;


										final Region1 RX10_TEMP1186 = RX10_TEMP1185.dReg;


										final int RX10_TEMP1187 = Program.searchPointInRegion1(RX10_TEMP1186, RX10_TEMP1184,X10_TEMP403);


										final int RX10_TEMP1188 = 0;


										final boolean RX10_TEMP1189 = RX10_TEMP1187 < RX10_TEMP1188;

										if(RX10_TEMP1189)
											{

											String RX10_TEMP1190 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1190);

											}

										final int RX10_TEMP1191 = Program.getPlaceFromDist1(RX10_TEMP1185, RX10_TEMP1187,X10_TEMP403);


										final int RX10_TEMP1193 = 0;


										final boolean RX10_TEMP1194 = RX10_TEMP1191 != RX10_TEMP1193;

										if(RX10_TEMP1194)
											{

											String RX10_TEMP1192 = "Bad place access for array outLt";

											throw new RuntimeException(RX10_TEMP1192);

											}

										final int RX10_TEMP1195 = Program.getRefArrayValue1int(outLt, RX10_TEMP1187,X10_TEMP403);


										final int X10_TEMP456 = RX10_TEMP1195;


										final Particle X10_TEMP460 = Program.Particle_setY(p, y,X10_TEMP403);


										final Particle X10_TEMP461 = X10_TEMP460;


										final Point2 RX10_TEMP1196 = new Point2(pl, X10_TEMP456,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1196.hashCode());


										final Dist2 RX10_TEMP1197 = sBufferL.distValue;


										final Region2 RX10_TEMP1198 = RX10_TEMP1197.dReg;


										final int RX10_TEMP1199 = Program.searchPointInRegion2(RX10_TEMP1198, RX10_TEMP1196,X10_TEMP403);


										final int RX10_TEMP1200 = 0;


										final boolean RX10_TEMP1201 = RX10_TEMP1199 < RX10_TEMP1200;

										if(RX10_TEMP1201)
											{

											String RX10_TEMP1202 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP1202);

											}

										final int RX10_TEMP1203 = Program.getPlaceFromDist2(RX10_TEMP1197, RX10_TEMP1199,X10_TEMP403);


										final int RX10_TEMP1205 = 0;


										final boolean RX10_TEMP1206 = RX10_TEMP1203 != RX10_TEMP1205;

										if(RX10_TEMP1206)
											{

											String RX10_TEMP1204 = "Bad place access for array sBufferL";

											throw new RuntimeException(RX10_TEMP1204);

											}
										Program.setRefArrayValue2Particle(sBufferL, RX10_TEMP1199, X10_TEMP461,X10_TEMP403);

										final Point1 RX10_TEMP1207 = new Point1(pl,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1207.hashCode());


										final Dist1 RX10_TEMP1208 = outLt.distValue;


										final Region1 RX10_TEMP1209 = RX10_TEMP1208.dReg;


										final int RX10_TEMP1210 = Program.searchPointInRegion1(RX10_TEMP1209, RX10_TEMP1207,X10_TEMP403);


										final int RX10_TEMP1211 = 0;


										final boolean RX10_TEMP1212 = RX10_TEMP1210 < RX10_TEMP1211;

										if(RX10_TEMP1212)
											{

											String RX10_TEMP1213 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1213);

											}

										final int RX10_TEMP1214 = Program.getPlaceFromDist1(RX10_TEMP1208, RX10_TEMP1210,X10_TEMP403);


										final int RX10_TEMP1216 = 0;


										final boolean RX10_TEMP1217 = RX10_TEMP1214 != RX10_TEMP1216;

										if(RX10_TEMP1217)
											{

											String RX10_TEMP1215 = "Bad place access for array outLt";

											throw new RuntimeException(RX10_TEMP1215);

											}

										final int RX10_TEMP1218 = Program.getRefArrayValue1int(outLt, RX10_TEMP1210,X10_TEMP403);


										final int X10_TEMP463 = RX10_TEMP1218;


										final int X10_TEMP464 = 1;


										final Point1 RX10_TEMP1219 = new Point1(pl,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1219.hashCode());


										final Dist1 RX10_TEMP1220 = outLt.distValue;


										final Region1 RX10_TEMP1221 = RX10_TEMP1220.dReg;


										final int RX10_TEMP1222 = Program.searchPointInRegion1(RX10_TEMP1221, RX10_TEMP1219,X10_TEMP403);


										final int RX10_TEMP1223 = 0;


										final boolean RX10_TEMP1224 = RX10_TEMP1222 < RX10_TEMP1223;

										if(RX10_TEMP1224)
											{

											String RX10_TEMP1225 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1225);

											}

										final int RX10_TEMP1226 = Program.getPlaceFromDist1(RX10_TEMP1220, RX10_TEMP1222,X10_TEMP403);


										final int RX10_TEMP1228 = 0;


										final boolean RX10_TEMP1229 = RX10_TEMP1226 != RX10_TEMP1228;

										if(RX10_TEMP1229)
											{

											String RX10_TEMP1227 = "Bad place access for array outLt";

											throw new RuntimeException(RX10_TEMP1227);

											}

										final int RX10_TEMP1230 = Program.getRefArrayValue1int(outLt, RX10_TEMP1222,X10_TEMP403);


										final int X10_TEMP465 = RX10_TEMP1230;


										final int X10_TEMP466 = X10_TEMP465 + X10_TEMP464;


										final Point1 RX10_TEMP1231 = new Point1(pl,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1231.hashCode());


										final Dist1 RX10_TEMP1232 = outLt.distValue;


										final Region1 RX10_TEMP1233 = RX10_TEMP1232.dReg;


										final int RX10_TEMP1234 = Program.searchPointInRegion1(RX10_TEMP1233, RX10_TEMP1231,X10_TEMP403);


										final int RX10_TEMP1235 = 0;


										final boolean RX10_TEMP1236 = RX10_TEMP1234 < RX10_TEMP1235;

										if(RX10_TEMP1236)
											{

											String RX10_TEMP1237 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP1237);

											}

										final int RX10_TEMP1238 = Program.getPlaceFromDist1(RX10_TEMP1232, RX10_TEMP1234,X10_TEMP403);


										final int RX10_TEMP1240 = 0;


										final boolean RX10_TEMP1241 = RX10_TEMP1238 != RX10_TEMP1240;

										if(RX10_TEMP1241)
											{

											String RX10_TEMP1239 = "Bad place access for array outLt";

											throw new RuntimeException(RX10_TEMP1239);

											}
										Program.setRefArrayValue1int(outLt, RX10_TEMP1234, X10_TEMP466,X10_TEMP403);
										}
									else
										{

										final boolean X10_TEMP468 = y >= ub;

										if(X10_TEMP468)
											{

											final String X10_TEMP469 = "Particle returning up -- ";


											final String X10_TEMP470 = "should not happen: ";


											final String X10_TEMP471 = X10_TEMP469 + X10_TEMP470;


											final String X10_TEMP472 = Program.Particle_toString(p,X10_TEMP403);


											final String X10_TEMP474 = X10_TEMP471 + X10_TEMP472;

											System.err.println(X10_TEMP474);

											final int X10_TEMP475 = 0;


											final boolean X10_TEMP477 = true;

											if(X10_TEMP477)
												{

												final double X10_TEMP479 = y - rsize;


												y = X10_TEMP479;

												}

											final Point1 RX10_TEMP1242 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1242.hashCode());


											final Dist1 RX10_TEMP1243 = outRt.distValue;


											final Region1 RX10_TEMP1244 = RX10_TEMP1243.dReg;


											final int RX10_TEMP1245 = Program.searchPointInRegion1(RX10_TEMP1244, RX10_TEMP1242,X10_TEMP403);


											final int RX10_TEMP1246 = 0;


											final boolean RX10_TEMP1247 = RX10_TEMP1245 < RX10_TEMP1246;

											if(RX10_TEMP1247)
												{

												String RX10_TEMP1248 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1248);

												}

											final int RX10_TEMP1249 = Program.getPlaceFromDist1(RX10_TEMP1243, RX10_TEMP1245,X10_TEMP403);


											final int RX10_TEMP1251 = 0;


											final boolean RX10_TEMP1252 = RX10_TEMP1249 != RX10_TEMP1251;

											if(RX10_TEMP1252)
												{

												String RX10_TEMP1250 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1250);

												}

											final int RX10_TEMP1253 = Program.getRefArrayValue1int(outRt, RX10_TEMP1245,X10_TEMP403);


											final int X10_TEMP483 = RX10_TEMP1253;


											final Particle X10_TEMP487 = Program.Particle_setY(p, y,X10_TEMP403);


											final Particle X10_TEMP488 = X10_TEMP487;


											final Point2 RX10_TEMP1254 = new Point2(pl, X10_TEMP483,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1254.hashCode());


											final Dist2 RX10_TEMP1255 = sBufferR.distValue;


											final Region2 RX10_TEMP1256 = RX10_TEMP1255.dReg;


											final int RX10_TEMP1257 = Program.searchPointInRegion2(RX10_TEMP1256, RX10_TEMP1254,X10_TEMP403);


											final int RX10_TEMP1258 = 0;


											final boolean RX10_TEMP1259 = RX10_TEMP1257 < RX10_TEMP1258;

											if(RX10_TEMP1259)
												{

												String RX10_TEMP1260 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1260);

												}

											final int RX10_TEMP1261 = Program.getPlaceFromDist2(RX10_TEMP1255, RX10_TEMP1257,X10_TEMP403);


											final int RX10_TEMP1263 = 0;


											final boolean RX10_TEMP1264 = RX10_TEMP1261 != RX10_TEMP1263;

											if(RX10_TEMP1264)
												{

												String RX10_TEMP1262 = "Bad place access for array sBufferR";

												throw new RuntimeException(RX10_TEMP1262);

												}
											Program.setRefArrayValue2Particle(sBufferR, RX10_TEMP1257, X10_TEMP488,X10_TEMP403);

											final Point1 RX10_TEMP1265 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1265.hashCode());


											final Dist1 RX10_TEMP1266 = outRt.distValue;


											final Region1 RX10_TEMP1267 = RX10_TEMP1266.dReg;


											final int RX10_TEMP1268 = Program.searchPointInRegion1(RX10_TEMP1267, RX10_TEMP1265,X10_TEMP403);


											final int RX10_TEMP1269 = 0;


											final boolean RX10_TEMP1270 = RX10_TEMP1268 < RX10_TEMP1269;

											if(RX10_TEMP1270)
												{

												String RX10_TEMP1271 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1271);

												}

											final int RX10_TEMP1272 = Program.getPlaceFromDist1(RX10_TEMP1266, RX10_TEMP1268,X10_TEMP403);


											final int RX10_TEMP1274 = 0;


											final boolean RX10_TEMP1275 = RX10_TEMP1272 != RX10_TEMP1274;

											if(RX10_TEMP1275)
												{

												String RX10_TEMP1273 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1273);

												}

											final int RX10_TEMP1276 = Program.getRefArrayValue1int(outRt, RX10_TEMP1268,X10_TEMP403);


											final int X10_TEMP490 = RX10_TEMP1276;


											final int X10_TEMP491 = 1;


											final Point1 RX10_TEMP1277 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1277.hashCode());


											final Dist1 RX10_TEMP1278 = outRt.distValue;


											final Region1 RX10_TEMP1279 = RX10_TEMP1278.dReg;


											final int RX10_TEMP1280 = Program.searchPointInRegion1(RX10_TEMP1279, RX10_TEMP1277,X10_TEMP403);


											final int RX10_TEMP1281 = 0;


											final boolean RX10_TEMP1282 = RX10_TEMP1280 < RX10_TEMP1281;

											if(RX10_TEMP1282)
												{

												String RX10_TEMP1283 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1283);

												}

											final int RX10_TEMP1284 = Program.getPlaceFromDist1(RX10_TEMP1278, RX10_TEMP1280,X10_TEMP403);


											final int RX10_TEMP1286 = 0;


											final boolean RX10_TEMP1287 = RX10_TEMP1284 != RX10_TEMP1286;

											if(RX10_TEMP1287)
												{

												String RX10_TEMP1285 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1285);

												}

											final int RX10_TEMP1288 = Program.getRefArrayValue1int(outRt, RX10_TEMP1280,X10_TEMP403);


											final int X10_TEMP492 = RX10_TEMP1288;


											final int X10_TEMP493 = X10_TEMP492 + X10_TEMP491;


											final Point1 RX10_TEMP1289 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1289.hashCode());


											final Dist1 RX10_TEMP1290 = outRt.distValue;


											final Region1 RX10_TEMP1291 = RX10_TEMP1290.dReg;


											final int RX10_TEMP1292 = Program.searchPointInRegion1(RX10_TEMP1291, RX10_TEMP1289,X10_TEMP403);


											final int RX10_TEMP1293 = 0;


											final boolean RX10_TEMP1294 = RX10_TEMP1292 < RX10_TEMP1293;

											if(RX10_TEMP1294)
												{

												String RX10_TEMP1295 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1295);

												}

											final int RX10_TEMP1296 = Program.getPlaceFromDist1(RX10_TEMP1290, RX10_TEMP1292,X10_TEMP403);


											final int RX10_TEMP1298 = 0;


											final boolean RX10_TEMP1299 = RX10_TEMP1296 != RX10_TEMP1298;

											if(RX10_TEMP1299)
												{

												String RX10_TEMP1297 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1297);

												}
											Program.setRefArrayValue1int(outRt, RX10_TEMP1292, X10_TEMP493,X10_TEMP403);
											}
										else
											{

											final Particle X10_TEMP498 = p;


											final Point2 RX10_TEMP1300 = new Point2(pl, inRightStaying,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1300.hashCode());


											final Dist2 RX10_TEMP1301 = rBufferR.distValue;


											final Region2 RX10_TEMP1302 = RX10_TEMP1301.dReg;


											final int RX10_TEMP1303 = Program.searchPointInRegion2(RX10_TEMP1302, RX10_TEMP1300,X10_TEMP403);


											final int RX10_TEMP1304 = 0;


											final boolean RX10_TEMP1305 = RX10_TEMP1303 < RX10_TEMP1304;

											if(RX10_TEMP1305)
												{

												String RX10_TEMP1306 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1306);

												}

											final int RX10_TEMP1307 = Program.getPlaceFromDist2(RX10_TEMP1301, RX10_TEMP1303,X10_TEMP403);


											final int RX10_TEMP1309 = 0;


											final boolean RX10_TEMP1310 = RX10_TEMP1307 != RX10_TEMP1309;

											if(RX10_TEMP1310)
												{

												String RX10_TEMP1308 = "Bad place access for array rBufferR";

												throw new RuntimeException(RX10_TEMP1308);

												}
											Program.setRefArrayValue2Particle(rBufferR, RX10_TEMP1303, X10_TEMP498,X10_TEMP403);

											final int X10_TEMP499 = inRightStaying;


											final int X10_TEMP500 = 1;


											inRightStaying = inRightStaying + X10_TEMP500;

											}
 										}
 									}

								final int X10_TEMP504 = inRightStaying;


								final Point1 RX10_TEMP1311 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1311.hashCode());


								final Dist1 RX10_TEMP1312 = inRt.distValue;


								final Region1 RX10_TEMP1313 = RX10_TEMP1312.dReg;


								final int RX10_TEMP1314 = Program.searchPointInRegion1(RX10_TEMP1313, RX10_TEMP1311,X10_TEMP403);


								final int RX10_TEMP1315 = 0;


								final boolean RX10_TEMP1316 = RX10_TEMP1314 < RX10_TEMP1315;

								if(RX10_TEMP1316)
									{

									String RX10_TEMP1317 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1317);

									}

								final int RX10_TEMP1318 = Program.getPlaceFromDist1(RX10_TEMP1312, RX10_TEMP1314,X10_TEMP403);


								final int RX10_TEMP1320 = 0;


								final boolean RX10_TEMP1321 = RX10_TEMP1318 != RX10_TEMP1320;

								if(RX10_TEMP1321)
									{

									String RX10_TEMP1319 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP1319);

									}
								Program.setRefArrayValue1int(inRt, RX10_TEMP1314, X10_TEMP504,X10_TEMP403);

								int inLeftStaying = 0;


								final int X10_TEMP511 = 0;


								final Point1 RX10_TEMP1322 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1322.hashCode());


								final Dist1 RX10_TEMP1323 = inLt.distValue;


								final Region1 RX10_TEMP1324 = RX10_TEMP1323.dReg;


								final int RX10_TEMP1325 = Program.searchPointInRegion1(RX10_TEMP1324, RX10_TEMP1322,X10_TEMP403);


								final int RX10_TEMP1326 = 0;


								final boolean RX10_TEMP1327 = RX10_TEMP1325 < RX10_TEMP1326;

								if(RX10_TEMP1327)
									{

									String RX10_TEMP1328 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1328);

									}

								final int RX10_TEMP1329 = Program.getPlaceFromDist1(RX10_TEMP1323, RX10_TEMP1325,X10_TEMP403);


								final int RX10_TEMP1331 = 0;


								final boolean RX10_TEMP1332 = RX10_TEMP1329 != RX10_TEMP1331;

								if(RX10_TEMP1332)
									{

									String RX10_TEMP1330 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP1330);

									}

								final int RX10_TEMP1333 = Program.getRefArrayValue1int(inLt, RX10_TEMP1325,X10_TEMP403);


								final int X10_TEMP508 = RX10_TEMP1333;


								final int X10_TEMP509 = 1;


								final int X10_TEMP512 = X10_TEMP508 - X10_TEMP509;


								final Region1 X10_TEMP514 = Program.createNewRegion1R(X10_TEMP511, X10_TEMP512,X10_TEMP403);


								final int RX10_TEMP1338 = 1;


								int RX10_TEMP1336 = X10_TEMP514.regSize;


								RX10_TEMP1336 = RX10_TEMP1336 - RX10_TEMP1338;


								final int  RX10_TEMP1337 = RX10_TEMP1336+1;

								for(int RX10_TEMP1334=0; RX10_TEMP1334 < RX10_TEMP1337; RX10_TEMP1334++)
									{

									final int RX10_TEMP1339 = RX10_TEMP1334;


									final Point1 RX10_TEMP1335 = Program.regionOrdinalPoint1(X10_TEMP514, RX10_TEMP1339,X10_TEMP403);


									final int i = RX10_TEMP1335.f0;


									final Point2 RX10_TEMP1340 = new Point2(pl, i,X10_TEMP403);
									
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1340.hashCode());


									final Dist2 RX10_TEMP1341 = rBufferL.distValue;


									final Region2 RX10_TEMP1342 = RX10_TEMP1341.dReg;


									final int RX10_TEMP1343 = Program.searchPointInRegion2(RX10_TEMP1342, RX10_TEMP1340,X10_TEMP403);


									final int RX10_TEMP1344 = 0;


									final boolean RX10_TEMP1345 = RX10_TEMP1343 < RX10_TEMP1344;

									if(RX10_TEMP1345)
										{

										String RX10_TEMP1346 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1346);

										}

									final int RX10_TEMP1347 = Program.getPlaceFromDist2(RX10_TEMP1341, RX10_TEMP1343,X10_TEMP403);


									final int RX10_TEMP1349 = 0;


									final boolean RX10_TEMP1350 = RX10_TEMP1347 != RX10_TEMP1349;

									if(RX10_TEMP1350)
										{

										String RX10_TEMP1348 = "Bad place access for array rBufferL";

										throw new RuntimeException(RX10_TEMP1348);

										}

									final Particle RX10_TEMP1351 = Program.getRefArrayValue2Particle(rBufferL, RX10_TEMP1343,X10_TEMP403);


									final Particle p = RX10_TEMP1351;


									double y = Program.Particle_getY(p,X10_TEMP403);


									final boolean X10_TEMP520 = y >= ub;

									if(X10_TEMP520)
										{

										final Point1 RX10_TEMP1352 = new Point1(pl,X10_TEMP403);
										
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1352.hashCode());


										final Dist1 RX10_TEMP1353 = outRt.distValue;


										final Region1 RX10_TEMP1354 = RX10_TEMP1353.dReg;


										final int RX10_TEMP1355 = Program.searchPointInRegion1(RX10_TEMP1354, RX10_TEMP1352,X10_TEMP403);


										final int RX10_TEMP1356 = 0;


										final boolean RX10_TEMP1357 = RX10_TEMP1355 < RX10_TEMP1356;

										if(RX10_TEMP1357)
											{

											String RX10_TEMP1358 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1358);

											}

										final int RX10_TEMP1359 = Program.getPlaceFromDist1(RX10_TEMP1353, RX10_TEMP1355,X10_TEMP403);


										final int RX10_TEMP1361 = 0;


										final boolean RX10_TEMP1362 = RX10_TEMP1359 != RX10_TEMP1361;

										if(RX10_TEMP1362)
											{

											String RX10_TEMP1360 = "Bad place access for array outRt";

											throw new RuntimeException(RX10_TEMP1360);

											}

										final int RX10_TEMP1363 = Program.getRefArrayValue1int(outRt, RX10_TEMP1355,X10_TEMP403);


										final int X10_TEMP522 = RX10_TEMP1363;


										final int X10_TEMP523 = rBuffer.regSize;


										final boolean X10_TEMP525 = X10_TEMP522 < X10_TEMP523;

										if(X10_TEMP525)
											{

											final int X10_TEMP526 = 0;


											final boolean X10_TEMP528 = true;

											if(X10_TEMP528)
												{

												final double X10_TEMP530 = y - rsize;


												y = X10_TEMP530;

												}

											final Point1 RX10_TEMP1364 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1364.hashCode());


											final Dist1 RX10_TEMP1365 = outRt.distValue;


											final Region1 RX10_TEMP1366 = RX10_TEMP1365.dReg;


											final int RX10_TEMP1367 = Program.searchPointInRegion1(RX10_TEMP1366, RX10_TEMP1364,X10_TEMP403);


											final int RX10_TEMP1368 = 0;


											final boolean RX10_TEMP1369 = RX10_TEMP1367 < RX10_TEMP1368;

											if(RX10_TEMP1369)
												{

												String RX10_TEMP1370 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1370);

												}

											final int RX10_TEMP1371 = Program.getPlaceFromDist1(RX10_TEMP1365, RX10_TEMP1367,X10_TEMP403);


											final int RX10_TEMP1373 = 0;


											final boolean RX10_TEMP1374 = RX10_TEMP1371 != RX10_TEMP1373;

											if(RX10_TEMP1374)
												{

												String RX10_TEMP1372 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1372);

												}

											final int RX10_TEMP1375 = Program.getRefArrayValue1int(outRt, RX10_TEMP1367,X10_TEMP403);


											final int X10_TEMP534 = RX10_TEMP1375;


											final Particle X10_TEMP538 = Program.Particle_setY(p, y,X10_TEMP403);


											final Particle X10_TEMP539 = X10_TEMP538;


											final Point2 RX10_TEMP1376 = new Point2(pl, X10_TEMP534,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1376.hashCode());


											final Dist2 RX10_TEMP1377 = sBufferR.distValue;


											final Region2 RX10_TEMP1378 = RX10_TEMP1377.dReg;


											final int RX10_TEMP1379 = Program.searchPointInRegion2(RX10_TEMP1378, RX10_TEMP1376,X10_TEMP403);


											final int RX10_TEMP1380 = 0;


											final boolean RX10_TEMP1381 = RX10_TEMP1379 < RX10_TEMP1380;

											if(RX10_TEMP1381)
												{

												String RX10_TEMP1382 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1382);

												}

											final int RX10_TEMP1383 = Program.getPlaceFromDist2(RX10_TEMP1377, RX10_TEMP1379,X10_TEMP403);


											final int RX10_TEMP1385 = 0;


											final boolean RX10_TEMP1386 = RX10_TEMP1383 != RX10_TEMP1385;

											if(RX10_TEMP1386)
												{

												String RX10_TEMP1384 = "Bad place access for array sBufferR";

												throw new RuntimeException(RX10_TEMP1384);

												}
											Program.setRefArrayValue2Particle(sBufferR, RX10_TEMP1379, X10_TEMP539,X10_TEMP403);

											final Point1 RX10_TEMP1387 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1387.hashCode());


											final Dist1 RX10_TEMP1388 = outRt.distValue;


											final Region1 RX10_TEMP1389 = RX10_TEMP1388.dReg;


											final int RX10_TEMP1390 = Program.searchPointInRegion1(RX10_TEMP1389, RX10_TEMP1387,X10_TEMP403);


											final int RX10_TEMP1391 = 0;


											final boolean RX10_TEMP1392 = RX10_TEMP1390 < RX10_TEMP1391;

											if(RX10_TEMP1392)
												{

												String RX10_TEMP1393 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1393);

												}

											final int RX10_TEMP1394 = Program.getPlaceFromDist1(RX10_TEMP1388, RX10_TEMP1390,X10_TEMP403);


											final int RX10_TEMP1396 = 0;


											final boolean RX10_TEMP1397 = RX10_TEMP1394 != RX10_TEMP1396;

											if(RX10_TEMP1397)
												{

												String RX10_TEMP1395 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1395);

												}

											final int RX10_TEMP1398 = Program.getRefArrayValue1int(outRt, RX10_TEMP1390,X10_TEMP403);


											final int X10_TEMP541 = RX10_TEMP1398;


											final int X10_TEMP542 = 1;


											final Point1 RX10_TEMP1399 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1399.hashCode());


											final Dist1 RX10_TEMP1400 = outRt.distValue;


											final Region1 RX10_TEMP1401 = RX10_TEMP1400.dReg;


											final int RX10_TEMP1402 = Program.searchPointInRegion1(RX10_TEMP1401, RX10_TEMP1399,X10_TEMP403);


											final int RX10_TEMP1403 = 0;


											final boolean RX10_TEMP1404 = RX10_TEMP1402 < RX10_TEMP1403;

											if(RX10_TEMP1404)
												{

												String RX10_TEMP1405 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1405);

												}

											final int RX10_TEMP1406 = Program.getPlaceFromDist1(RX10_TEMP1400, RX10_TEMP1402,X10_TEMP403);


											final int RX10_TEMP1408 = 0;


											final boolean RX10_TEMP1409 = RX10_TEMP1406 != RX10_TEMP1408;

											if(RX10_TEMP1409)
												{

												String RX10_TEMP1407 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1407);

												}

											final int RX10_TEMP1410 = Program.getRefArrayValue1int(outRt, RX10_TEMP1402,X10_TEMP403);


											final int X10_TEMP543 = RX10_TEMP1410;


											final int X10_TEMP544 = X10_TEMP543 + X10_TEMP542;


											final Point1 RX10_TEMP1411 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1411.hashCode());


											final Dist1 RX10_TEMP1412 = outRt.distValue;


											final Region1 RX10_TEMP1413 = RX10_TEMP1412.dReg;


											final int RX10_TEMP1414 = Program.searchPointInRegion1(RX10_TEMP1413, RX10_TEMP1411,X10_TEMP403);


											final int RX10_TEMP1415 = 0;


											final boolean RX10_TEMP1416 = RX10_TEMP1414 < RX10_TEMP1415;

											if(RX10_TEMP1416)
												{

												String RX10_TEMP1417 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1417);

												}

											final int RX10_TEMP1418 = Program.getPlaceFromDist1(RX10_TEMP1412, RX10_TEMP1414,X10_TEMP403);


											final int RX10_TEMP1420 = 0;


											final boolean RX10_TEMP1421 = RX10_TEMP1418 != RX10_TEMP1420;

											if(RX10_TEMP1421)
												{

												String RX10_TEMP1419 = "Bad place access for array outRt";

												throw new RuntimeException(RX10_TEMP1419);

												}
											Program.setRefArrayValue1int(outRt, RX10_TEMP1414, X10_TEMP544,X10_TEMP403);
											}
										else
											{

											final int X10_TEMP546 = 2;


											final int X10_TEMP547 = rBuffer.regSize;


											final int X10_TEMP550 = X10_TEMP546 * X10_TEMP547;


											final int X10_TEMP551 = X10_TEMP550;


											final Point1 RX10_TEMP1422 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1422.hashCode());


											final Dist1 RX10_TEMP1423 = overflow.distValue;


											final Region1 RX10_TEMP1424 = RX10_TEMP1423.dReg;


											final int RX10_TEMP1425 = Program.searchPointInRegion1(RX10_TEMP1424, RX10_TEMP1422,X10_TEMP403);


											final int RX10_TEMP1426 = 0;


											final boolean RX10_TEMP1427 = RX10_TEMP1425 < RX10_TEMP1426;

											if(RX10_TEMP1427)
												{

												String RX10_TEMP1428 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1428);

												}

											final int RX10_TEMP1429 = Program.getPlaceFromDist1(RX10_TEMP1423, RX10_TEMP1425,X10_TEMP403);


											final int RX10_TEMP1431 = 0;


											final boolean RX10_TEMP1432 = RX10_TEMP1429 != RX10_TEMP1431;

											if(RX10_TEMP1432)
												{

												String RX10_TEMP1430 = "Bad place access for array overflow";

												throw new RuntimeException(RX10_TEMP1430);

												}
											Program.setRefArrayValue1int(overflow, RX10_TEMP1425, X10_TEMP551,X10_TEMP403);
											break;
											}
 										}
									else
										{

										final boolean X10_TEMP553 = y < lb;

										if(X10_TEMP553)
											{

											final Point1 RX10_TEMP1433 = new Point1(pl,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1433.hashCode());


											final Dist1 RX10_TEMP1434 = outLt.distValue;


											final Region1 RX10_TEMP1435 = RX10_TEMP1434.dReg;


											final int RX10_TEMP1436 = Program.searchPointInRegion1(RX10_TEMP1435, RX10_TEMP1433,X10_TEMP403);


											final int RX10_TEMP1437 = 0;


											final boolean RX10_TEMP1438 = RX10_TEMP1436 < RX10_TEMP1437;

											if(RX10_TEMP1438)
												{

												String RX10_TEMP1439 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1439);

												}

											final int RX10_TEMP1440 = Program.getPlaceFromDist1(RX10_TEMP1434, RX10_TEMP1436,X10_TEMP403);


											final int RX10_TEMP1442 = 0;


											final boolean RX10_TEMP1443 = RX10_TEMP1440 != RX10_TEMP1442;

											if(RX10_TEMP1443)
												{

												String RX10_TEMP1441 = "Bad place access for array outLt";

												throw new RuntimeException(RX10_TEMP1441);

												}

											final int RX10_TEMP1444 = Program.getRefArrayValue1int(outLt, RX10_TEMP1436,X10_TEMP403);


											final int X10_TEMP555 = RX10_TEMP1444;


											final int X10_TEMP556 = rBuffer.regSize;


											final boolean X10_TEMP558 = X10_TEMP555 < X10_TEMP556;

											if(X10_TEMP558)
												{

												final int X10_TEMP559 = 0;


												final boolean X10_TEMP561 = true;

												if(X10_TEMP561)
													{

													final double X10_TEMP563 = y + rsize;


													y = X10_TEMP563;

													}

												final Point1 RX10_TEMP1445 = new Point1(pl,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1445.hashCode());


												final Dist1 RX10_TEMP1446 = outLt.distValue;


												final Region1 RX10_TEMP1447 = RX10_TEMP1446.dReg;


												final int RX10_TEMP1448 = Program.searchPointInRegion1(RX10_TEMP1447, RX10_TEMP1445,X10_TEMP403);


												final int RX10_TEMP1449 = 0;


												final boolean RX10_TEMP1450 = RX10_TEMP1448 < RX10_TEMP1449;

												if(RX10_TEMP1450)
													{

													String RX10_TEMP1451 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP1451);

													}

												final int RX10_TEMP1452 = Program.getPlaceFromDist1(RX10_TEMP1446, RX10_TEMP1448,X10_TEMP403);


												final int RX10_TEMP1454 = 0;


												final boolean RX10_TEMP1455 = RX10_TEMP1452 != RX10_TEMP1454;

												if(RX10_TEMP1455)
													{

													String RX10_TEMP1453 = "Bad place access for array outLt";

													throw new RuntimeException(RX10_TEMP1453);

													}

												final int RX10_TEMP1456 = Program.getRefArrayValue1int(outLt, RX10_TEMP1448,X10_TEMP403);


												final int X10_TEMP567 = RX10_TEMP1456;


												final Particle X10_TEMP571 = Program.Particle_setY(p, y,X10_TEMP403);


												final Particle X10_TEMP572 = X10_TEMP571;


												final Point2 RX10_TEMP1457 = new Point2(pl, X10_TEMP567,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1457.hashCode());


												final Dist2 RX10_TEMP1458 = sBufferL.distValue;


												final Region2 RX10_TEMP1459 = RX10_TEMP1458.dReg;


												final int RX10_TEMP1460 = Program.searchPointInRegion2(RX10_TEMP1459, RX10_TEMP1457,X10_TEMP403);


												final int RX10_TEMP1461 = 0;


												final boolean RX10_TEMP1462 = RX10_TEMP1460 < RX10_TEMP1461;

												if(RX10_TEMP1462)
													{

													String RX10_TEMP1463 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP1463);

													}

												final int RX10_TEMP1464 = Program.getPlaceFromDist2(RX10_TEMP1458, RX10_TEMP1460,X10_TEMP403);


												final int RX10_TEMP1466 = 0;


												final boolean RX10_TEMP1467 = RX10_TEMP1464 != RX10_TEMP1466;

												if(RX10_TEMP1467)
													{

													String RX10_TEMP1465 = "Bad place access for array sBufferL";

													throw new RuntimeException(RX10_TEMP1465);

													}
												Program.setRefArrayValue2Particle(sBufferL, RX10_TEMP1460, X10_TEMP572,X10_TEMP403);

												final Point1 RX10_TEMP1468 = new Point1(pl,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1468.hashCode());


												final Dist1 RX10_TEMP1469 = outLt.distValue;


												final Region1 RX10_TEMP1470 = RX10_TEMP1469.dReg;


												final int RX10_TEMP1471 = Program.searchPointInRegion1(RX10_TEMP1470, RX10_TEMP1468,X10_TEMP403);


												final int RX10_TEMP1472 = 0;


												final boolean RX10_TEMP1473 = RX10_TEMP1471 < RX10_TEMP1472;

												if(RX10_TEMP1473)
													{

													String RX10_TEMP1474 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP1474);

													}

												final int RX10_TEMP1475 = Program.getPlaceFromDist1(RX10_TEMP1469, RX10_TEMP1471,X10_TEMP403);


												final int RX10_TEMP1477 = 0;


												final boolean RX10_TEMP1478 = RX10_TEMP1475 != RX10_TEMP1477;

												if(RX10_TEMP1478)
													{

													String RX10_TEMP1476 = "Bad place access for array outLt";

													throw new RuntimeException(RX10_TEMP1476);

													}

												final int RX10_TEMP1479 = Program.getRefArrayValue1int(outLt, RX10_TEMP1471,X10_TEMP403);


												final int X10_TEMP574 = RX10_TEMP1479;


												final int X10_TEMP575 = 1;


												final Point1 RX10_TEMP1480 = new Point1(pl,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1480.hashCode());


												final Dist1 RX10_TEMP1481 = outLt.distValue;


												final Region1 RX10_TEMP1482 = RX10_TEMP1481.dReg;


												final int RX10_TEMP1483 = Program.searchPointInRegion1(RX10_TEMP1482, RX10_TEMP1480,X10_TEMP403);


												final int RX10_TEMP1484 = 0;


												final boolean RX10_TEMP1485 = RX10_TEMP1483 < RX10_TEMP1484;

												if(RX10_TEMP1485)
													{

													String RX10_TEMP1486 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP1486);

													}

												final int RX10_TEMP1487 = Program.getPlaceFromDist1(RX10_TEMP1481, RX10_TEMP1483,X10_TEMP403);


												final int RX10_TEMP1489 = 0;


												final boolean RX10_TEMP1490 = RX10_TEMP1487 != RX10_TEMP1489;

												if(RX10_TEMP1490)
													{

													String RX10_TEMP1488 = "Bad place access for array outLt";

													throw new RuntimeException(RX10_TEMP1488);

													}

												final int RX10_TEMP1491 = Program.getRefArrayValue1int(outLt, RX10_TEMP1483,X10_TEMP403);


												final int X10_TEMP576 = RX10_TEMP1491;


												final int X10_TEMP577 = X10_TEMP576 + X10_TEMP575;


												final Point1 RX10_TEMP1492 = new Point1(pl,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1492.hashCode());


												final Dist1 RX10_TEMP1493 = outLt.distValue;


												final Region1 RX10_TEMP1494 = RX10_TEMP1493.dReg;


												final int RX10_TEMP1495 = Program.searchPointInRegion1(RX10_TEMP1494, RX10_TEMP1492,X10_TEMP403);


												final int RX10_TEMP1496 = 0;


												final boolean RX10_TEMP1497 = RX10_TEMP1495 < RX10_TEMP1496;

												if(RX10_TEMP1497)
													{

													String RX10_TEMP1498 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP1498);

													}

												final int RX10_TEMP1499 = Program.getPlaceFromDist1(RX10_TEMP1493, RX10_TEMP1495,X10_TEMP403);


												final int RX10_TEMP1501 = 0;


												final boolean RX10_TEMP1502 = RX10_TEMP1499 != RX10_TEMP1501;

												if(RX10_TEMP1502)
													{

													String RX10_TEMP1500 = "Bad place access for array outLt";

													throw new RuntimeException(RX10_TEMP1500);

													}
												Program.setRefArrayValue1int(outLt, RX10_TEMP1495, X10_TEMP577,X10_TEMP403);
												}
											else
												{

												final int X10_TEMP579 = 2;


												final int X10_TEMP580 = rBuffer.regSize;


												final int X10_TEMP583 = X10_TEMP579 * X10_TEMP580;


												final int X10_TEMP584 = X10_TEMP583;


												final Point1 RX10_TEMP1503 = new Point1(pl,X10_TEMP403);
												
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1503.hashCode());


												final Dist1 RX10_TEMP1504 = overflow.distValue;


												final Region1 RX10_TEMP1505 = RX10_TEMP1504.dReg;


												final int RX10_TEMP1506 = Program.searchPointInRegion1(RX10_TEMP1505, RX10_TEMP1503,X10_TEMP403);


												final int RX10_TEMP1507 = 0;


												final boolean RX10_TEMP1508 = RX10_TEMP1506 < RX10_TEMP1507;

												if(RX10_TEMP1508)
													{

													String RX10_TEMP1509 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP1509);

													}

												final int RX10_TEMP1510 = Program.getPlaceFromDist1(RX10_TEMP1504, RX10_TEMP1506,X10_TEMP403);


												final int RX10_TEMP1512 = 0;


												final boolean RX10_TEMP1513 = RX10_TEMP1510 != RX10_TEMP1512;

												if(RX10_TEMP1513)
													{

													String RX10_TEMP1511 = "Bad place access for array overflow";

													throw new RuntimeException(RX10_TEMP1511);

													}
												Program.setRefArrayValue1int(overflow, RX10_TEMP1506, X10_TEMP584,X10_TEMP403);
												break;
												}
 											}
										else
											{

											final Particle X10_TEMP589 = p;


											final Point2 RX10_TEMP1514 = new Point2(pl, inLeftStaying,X10_TEMP403);
											
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1514.hashCode());


											final Dist2 RX10_TEMP1515 = rBufferL.distValue;


											final Region2 RX10_TEMP1516 = RX10_TEMP1515.dReg;


											final int RX10_TEMP1517 = Program.searchPointInRegion2(RX10_TEMP1516, RX10_TEMP1514,X10_TEMP403);


											final int RX10_TEMP1518 = 0;


											final boolean RX10_TEMP1519 = RX10_TEMP1517 < RX10_TEMP1518;

											if(RX10_TEMP1519)
												{

												String RX10_TEMP1520 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1520);

												}

											final int RX10_TEMP1521 = Program.getPlaceFromDist2(RX10_TEMP1515, RX10_TEMP1517,X10_TEMP403);


											final int RX10_TEMP1523 = 0;


											final boolean RX10_TEMP1524 = RX10_TEMP1521 != RX10_TEMP1523;

											if(RX10_TEMP1524)
												{

												String RX10_TEMP1522 = "Bad place access for array rBufferL";

												throw new RuntimeException(RX10_TEMP1522);

												}
											Program.setRefArrayValue2Particle(rBufferL, RX10_TEMP1517, X10_TEMP589,X10_TEMP403);

											final int X10_TEMP590 = inLeftStaying;


											final int X10_TEMP591 = 1;


											inLeftStaying = inLeftStaying + X10_TEMP591;

											}
 										}
 									}

								final int X10_TEMP595 = inLeftStaying;


								final Point1 RX10_TEMP1525 = new Point1(pl,X10_TEMP403);
								
Program.globalPointerHashMap.get(X10_TEMP403).add(RX10_TEMP1525.hashCode());


								final Dist1 RX10_TEMP1526 = inLt.distValue;


								final Region1 RX10_TEMP1527 = RX10_TEMP1526.dReg;


								final int RX10_TEMP1528 = Program.searchPointInRegion1(RX10_TEMP1527, RX10_TEMP1525,X10_TEMP403);


								final int RX10_TEMP1529 = 0;


								final boolean RX10_TEMP1530 = RX10_TEMP1528 < RX10_TEMP1529;

								if(RX10_TEMP1530)
									{

									String RX10_TEMP1531 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1531);

									}

								final int RX10_TEMP1532 = Program.getPlaceFromDist1(RX10_TEMP1526, RX10_TEMP1528,X10_TEMP403);


								final int RX10_TEMP1534 = 0;


								final boolean RX10_TEMP1535 = RX10_TEMP1532 != RX10_TEMP1534;

								if(RX10_TEMP1535)
									{

									String RX10_TEMP1533 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP1533);

									}
								Program.setRefArrayValue1int(inLt, RX10_TEMP1528, X10_TEMP595,X10_TEMP403);
								}
							}
						}
					}

				final int rSize = rPart.regSize;


				final intRefArray1 X10_TEMP599 = nPart;


				final intRefArray1 X10_TEMP600 = inLt;


				final Region1 RX10_TEMP1536 = dUnique.dReg;


				final int RX10_TEMP1537 = 0;


				final int RX10_TEMP1538 = 1;


				int RX10_TEMP1539 = 1;


				RX10_TEMP1539 = RX10_TEMP1539 - RX10_TEMP1538;


				final int  RX10_TEMP1540 = RX10_TEMP1539+1;


				final int RX10_TEMP1541 = RX10_TEMP1539+1;


				final intStub[] RX10_TEMP1542 = new intStub[RX10_TEMP1541];

				/*FINISH
*/					{
					for(int RX10_TEMP1543=0; RX10_TEMP1543 < RX10_TEMP1540; RX10_TEMP1543++)
						{

						final int RX10_TEMP1544 = 0;


						final int RX10_TEMP1545 = RX10_TEMP1543;


						final int RX10_TEMP1546 = 0;


						final int RX10_TEMP1547 = Program.getDistLocalCount1(dUnique, RX10_TEMP1545,myUniquePlacePoint);


						final int RX10_TEMP1548 = RX10_TEMP1547 - RX10_TEMP1538;


						final Point1[] RX10_TEMP1549 = Program.getDistLocalArray1(dUnique, RX10_TEMP1545,myUniquePlacePoint);

						//async(RX10_TEMP1546)
							{

							final int RX10_TEMP1573 = RX10_TEMP1548+1;


							final int[] RX10_TEMP1574 = new int/*NewUpdatableArray*/[RX10_TEMP1573];
/*arrayInitBlock*/
for(int RX10_TEMP1550= 0;RX10_TEMP1550 <RX10_TEMP1574.length ;RX10_TEMP1550++ )								{

								final Point1 X10_TEMP598 = RX10_TEMP1549[RX10_TEMP1550];


								final Dist1 RX10_TEMP1551 = X10_TEMP599.distValue;


								final Region1 RX10_TEMP1552 = RX10_TEMP1551.dReg;


								final int RX10_TEMP1553 = Program.searchPointInRegion1(RX10_TEMP1552, X10_TEMP598,RX10_TEMP1546);


								final int RX10_TEMP1554 = 0;


								final boolean RX10_TEMP1555 = RX10_TEMP1553 < RX10_TEMP1554;

								if(RX10_TEMP1555)
									{

									String RX10_TEMP1556 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1556);

									}

								final int RX10_TEMP1557 = Program.getPlaceFromDist1(RX10_TEMP1551, RX10_TEMP1553,RX10_TEMP1546);


								final int RX10_TEMP1559 = 0;


								final boolean RX10_TEMP1560 = RX10_TEMP1557 != RX10_TEMP1559;

								if(RX10_TEMP1560)
									{

									String RX10_TEMP1558 = "Bad place access for array X10_TEMP599";

									throw new RuntimeException(RX10_TEMP1558);

									}

								final int RX10_TEMP1561 = Program.getRefArrayValue1int(X10_TEMP599, RX10_TEMP1553,RX10_TEMP1546);


								final int X10_TEMP601 = RX10_TEMP1561;


								final Dist1 RX10_TEMP1562 = X10_TEMP600.distValue;


								final Region1 RX10_TEMP1563 = RX10_TEMP1562.dReg;


								final int RX10_TEMP1564 = Program.searchPointInRegion1(RX10_TEMP1563, X10_TEMP598,RX10_TEMP1546);


								final int RX10_TEMP1565 = 0;


								final boolean RX10_TEMP1566 = RX10_TEMP1564 < RX10_TEMP1565;

								if(RX10_TEMP1566)
									{

									String RX10_TEMP1567 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1567);

									}

								final int RX10_TEMP1568 = Program.getPlaceFromDist1(RX10_TEMP1562, RX10_TEMP1564,RX10_TEMP1546);


								final int RX10_TEMP1570 = 0;


								final boolean RX10_TEMP1571 = RX10_TEMP1568 != RX10_TEMP1570;

								if(RX10_TEMP1571)
									{

									String RX10_TEMP1569 = "Bad place access for array X10_TEMP600";

									throw new RuntimeException(RX10_TEMP1569);

									}

								final int RX10_TEMP1572 = Program.getRefArrayValue1int(X10_TEMP600, RX10_TEMP1564,RX10_TEMP1546);


								final int X10_TEMP602 = RX10_TEMP1572;


								final int X10_TEMP603 = X10_TEMP601 + X10_TEMP602;

								RX10_TEMP1574[RX10_TEMP1550] =X10_TEMP603;
								}

;


							final intStub RX10_TEMP1575 = new intStub(RX10_TEMP1574,RX10_TEMP1546);
							
Program.globalPointerHashMap.get(RX10_TEMP1546).add(RX10_TEMP1575.hashCode());

							//async(RX10_TEMP1544)
								{
								RX10_TEMP1542[RX10_TEMP1543] = RX10_TEMP1575;
								}
							}
						}
					}

				final intStub[] RX10_TEMP1576 = (intStub[])(new intStub/*value*/[RX10_TEMP1540]);
/*arrayInitBlock*/
for(int RX10_TEMP1578= 0;RX10_TEMP1578 <RX10_TEMP1576.length ;RX10_TEMP1578++ )					{

					final intStub RX10_TEMP1577 = RX10_TEMP1542[RX10_TEMP1578];

					RX10_TEMP1576[RX10_TEMP1578] =RX10_TEMP1577;
					}

;


				final intRefArray1 RX10_TEMP1579 = new intRefArray1(dUnique, RX10_TEMP1576,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1579.hashCode());


				final intRefArray1 X10_TEMP597 = RX10_TEMP1579;


				final intRefArray1 X10_TEMP606 = X10_TEMP597;


				final intRefArray1 X10_TEMP607 = inRt;


				final Region1 RX10_TEMP1580 = dUnique.dReg;


				final int RX10_TEMP1581 = 0;


				final int RX10_TEMP1582 = 1;


				int RX10_TEMP1583 = 1;


				RX10_TEMP1583 = RX10_TEMP1583 - RX10_TEMP1582;


				final int  RX10_TEMP1584 = RX10_TEMP1583+1;


				final int RX10_TEMP1585 = RX10_TEMP1583+1;


				final intStub[] RX10_TEMP1586 = new intStub[RX10_TEMP1585];

				/*FINISH
*/					{
					for(int RX10_TEMP1587=0; RX10_TEMP1587 < RX10_TEMP1584; RX10_TEMP1587++)
						{

						final int RX10_TEMP1588 = 0;


						final int RX10_TEMP1589 = RX10_TEMP1587;


						final int RX10_TEMP1590 = 0;


						final int RX10_TEMP1591 = Program.getDistLocalCount1(dUnique, RX10_TEMP1589,myUniquePlacePoint);


						final int RX10_TEMP1592 = RX10_TEMP1591 - RX10_TEMP1582;


						final Point1[] RX10_TEMP1593 = Program.getDistLocalArray1(dUnique, RX10_TEMP1589,myUniquePlacePoint);

						//async(RX10_TEMP1590)
							{

							final int RX10_TEMP1617 = RX10_TEMP1592+1;


							final int[] RX10_TEMP1618 = new int/*NewUpdatableArray*/[RX10_TEMP1617];
/*arrayInitBlock*/
for(int RX10_TEMP1594= 0;RX10_TEMP1594 <RX10_TEMP1618.length ;RX10_TEMP1594++ )								{

								final Point1 X10_TEMP605 = RX10_TEMP1593[RX10_TEMP1594];


								final Dist1 RX10_TEMP1595 = X10_TEMP606.distValue;


								final Region1 RX10_TEMP1596 = RX10_TEMP1595.dReg;


								final int RX10_TEMP1597 = Program.searchPointInRegion1(RX10_TEMP1596, X10_TEMP605,RX10_TEMP1590);


								final int RX10_TEMP1598 = 0;


								final boolean RX10_TEMP1599 = RX10_TEMP1597 < RX10_TEMP1598;

								if(RX10_TEMP1599)
									{

									String RX10_TEMP1600 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1600);

									}

								final int RX10_TEMP1601 = Program.getPlaceFromDist1(RX10_TEMP1595, RX10_TEMP1597,RX10_TEMP1590);


								final int RX10_TEMP1603 = 0;


								final boolean RX10_TEMP1604 = RX10_TEMP1601 != RX10_TEMP1603;

								if(RX10_TEMP1604)
									{

									String RX10_TEMP1602 = "Bad place access for array X10_TEMP606";

									throw new RuntimeException(RX10_TEMP1602);

									}

								final int RX10_TEMP1605 = Program.getRefArrayValue1int(X10_TEMP606, RX10_TEMP1597,RX10_TEMP1590);


								final int X10_TEMP608 = RX10_TEMP1605;


								final Dist1 RX10_TEMP1606 = X10_TEMP607.distValue;


								final Region1 RX10_TEMP1607 = RX10_TEMP1606.dReg;


								final int RX10_TEMP1608 = Program.searchPointInRegion1(RX10_TEMP1607, X10_TEMP605,RX10_TEMP1590);


								final int RX10_TEMP1609 = 0;


								final boolean RX10_TEMP1610 = RX10_TEMP1608 < RX10_TEMP1609;

								if(RX10_TEMP1610)
									{

									String RX10_TEMP1611 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1611);

									}

								final int RX10_TEMP1612 = Program.getPlaceFromDist1(RX10_TEMP1606, RX10_TEMP1608,RX10_TEMP1590);


								final int RX10_TEMP1614 = 0;


								final boolean RX10_TEMP1615 = RX10_TEMP1612 != RX10_TEMP1614;

								if(RX10_TEMP1615)
									{

									String RX10_TEMP1613 = "Bad place access for array X10_TEMP607";

									throw new RuntimeException(RX10_TEMP1613);

									}

								final int RX10_TEMP1616 = Program.getRefArrayValue1int(X10_TEMP607, RX10_TEMP1608,RX10_TEMP1590);


								final int X10_TEMP609 = RX10_TEMP1616;


								final int X10_TEMP610 = X10_TEMP608 + X10_TEMP609;

								RX10_TEMP1618[RX10_TEMP1594] =X10_TEMP610;
								}

;


							final intStub RX10_TEMP1619 = new intStub(RX10_TEMP1618,RX10_TEMP1590);
							
Program.globalPointerHashMap.get(RX10_TEMP1590).add(RX10_TEMP1619.hashCode());

							//async(RX10_TEMP1588)
								{
								RX10_TEMP1586[RX10_TEMP1587] = RX10_TEMP1619;
								}
							}
						}
					}

				final intStub[] RX10_TEMP1620 = (intStub[])(new intStub/*value*/[RX10_TEMP1584]);
/*arrayInitBlock*/
for(int RX10_TEMP1622= 0;RX10_TEMP1622 <RX10_TEMP1620.length ;RX10_TEMP1622++ )					{

					final intStub RX10_TEMP1621 = RX10_TEMP1586[RX10_TEMP1622];

					RX10_TEMP1620[RX10_TEMP1622] =RX10_TEMP1621;
					}

;


				final intRefArray1 RX10_TEMP1623 = new intRefArray1(dUnique, RX10_TEMP1620,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1623.hashCode());


				final intRefArray1 X10_TEMP604 = RX10_TEMP1623;


				final intRefArray1 X10_TEMP613 = X10_TEMP604;


				final intRefArray1 X10_TEMP614 = nSent;


				final Region1 RX10_TEMP1624 = dUnique.dReg;


				final int RX10_TEMP1625 = 0;


				final int RX10_TEMP1626 = 1;


				int RX10_TEMP1627 = 1;


				RX10_TEMP1627 = RX10_TEMP1627 - RX10_TEMP1626;


				final int  RX10_TEMP1628 = RX10_TEMP1627+1;


				final int RX10_TEMP1629 = RX10_TEMP1627+1;


				final intStub[] RX10_TEMP1630 = new intStub[RX10_TEMP1629];

				/*FINISH
*/					{
					for(int RX10_TEMP1631=0; RX10_TEMP1631 < RX10_TEMP1628; RX10_TEMP1631++)
						{

						final int RX10_TEMP1632 = 0;


						final int RX10_TEMP1633 = RX10_TEMP1631;


						final int RX10_TEMP1634 = 0;


						final int RX10_TEMP1635 = Program.getDistLocalCount1(dUnique, RX10_TEMP1633,myUniquePlacePoint);


						final int RX10_TEMP1636 = RX10_TEMP1635 - RX10_TEMP1626;


						final Point1[] RX10_TEMP1637 = Program.getDistLocalArray1(dUnique, RX10_TEMP1633,myUniquePlacePoint);

						//async(RX10_TEMP1634)
							{

							final int RX10_TEMP1661 = RX10_TEMP1636+1;


							final int[] RX10_TEMP1662 = new int/*NewUpdatableArray*/[RX10_TEMP1661];
/*arrayInitBlock*/
for(int RX10_TEMP1638= 0;RX10_TEMP1638 <RX10_TEMP1662.length ;RX10_TEMP1638++ )								{

								final Point1 X10_TEMP612 = RX10_TEMP1637[RX10_TEMP1638];


								final Dist1 RX10_TEMP1639 = X10_TEMP613.distValue;


								final Region1 RX10_TEMP1640 = RX10_TEMP1639.dReg;


								final int RX10_TEMP1641 = Program.searchPointInRegion1(RX10_TEMP1640, X10_TEMP612,RX10_TEMP1634);


								final int RX10_TEMP1642 = 0;


								final boolean RX10_TEMP1643 = RX10_TEMP1641 < RX10_TEMP1642;

								if(RX10_TEMP1643)
									{

									String RX10_TEMP1644 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1644);

									}

								final int RX10_TEMP1645 = Program.getPlaceFromDist1(RX10_TEMP1639, RX10_TEMP1641,RX10_TEMP1634);


								final int RX10_TEMP1647 = 0;


								final boolean RX10_TEMP1648 = RX10_TEMP1645 != RX10_TEMP1647;

								if(RX10_TEMP1648)
									{

									String RX10_TEMP1646 = "Bad place access for array X10_TEMP613";

									throw new RuntimeException(RX10_TEMP1646);

									}

								final int RX10_TEMP1649 = Program.getRefArrayValue1int(X10_TEMP613, RX10_TEMP1641,RX10_TEMP1634);


								final int X10_TEMP615 = RX10_TEMP1649;


								final Dist1 RX10_TEMP1650 = X10_TEMP614.distValue;


								final Region1 RX10_TEMP1651 = RX10_TEMP1650.dReg;


								final int RX10_TEMP1652 = Program.searchPointInRegion1(RX10_TEMP1651, X10_TEMP612,RX10_TEMP1634);


								final int RX10_TEMP1653 = 0;


								final boolean RX10_TEMP1654 = RX10_TEMP1652 < RX10_TEMP1653;

								if(RX10_TEMP1654)
									{

									String RX10_TEMP1655 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1655);

									}

								final int RX10_TEMP1656 = Program.getPlaceFromDist1(RX10_TEMP1650, RX10_TEMP1652,RX10_TEMP1634);


								final int RX10_TEMP1658 = 0;


								final boolean RX10_TEMP1659 = RX10_TEMP1656 != RX10_TEMP1658;

								if(RX10_TEMP1659)
									{

									String RX10_TEMP1657 = "Bad place access for array X10_TEMP614";

									throw new RuntimeException(RX10_TEMP1657);

									}

								final int RX10_TEMP1660 = Program.getRefArrayValue1int(X10_TEMP614, RX10_TEMP1652,RX10_TEMP1634);


								final int X10_TEMP616 = RX10_TEMP1660;


								final int X10_TEMP617 = X10_TEMP615 - X10_TEMP616;

								RX10_TEMP1662[RX10_TEMP1638] =X10_TEMP617;
								}

;


							final intStub RX10_TEMP1663 = new intStub(RX10_TEMP1662,RX10_TEMP1634);
							
Program.globalPointerHashMap.get(RX10_TEMP1634).add(RX10_TEMP1663.hashCode());

							//async(RX10_TEMP1632)
								{
								RX10_TEMP1630[RX10_TEMP1631] = RX10_TEMP1663;
								}
							}
						}
					}

				final intStub[] RX10_TEMP1664 = (intStub[])(new intStub/*value*/[RX10_TEMP1628]);
/*arrayInitBlock*/
for(int RX10_TEMP1666= 0;RX10_TEMP1666 <RX10_TEMP1664.length ;RX10_TEMP1666++ )					{

					final intStub RX10_TEMP1665 = RX10_TEMP1630[RX10_TEMP1666];

					RX10_TEMP1664[RX10_TEMP1666] =RX10_TEMP1665;
					}

;


				final intRefArray1 RX10_TEMP1667 = new intRefArray1(dUnique, RX10_TEMP1664,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1667.hashCode());


				final intRefArray1 X10_TEMP611 = RX10_TEMP1667;


				final intRefArray1 X10_TEMP619 = X10_TEMP611;


				final intRefArray1 tMaxSize = X10_TEMP619;


				final Region1 RX10_TEMP1668 = dUnique.dReg;


				final int RX10_TEMP1669 = 0;


				final int RX10_TEMP1670 = 1;


				int RX10_TEMP1671 = 1;


				RX10_TEMP1671 = RX10_TEMP1671 - RX10_TEMP1670;


				final int  RX10_TEMP1672 = RX10_TEMP1671+1;


				final int RX10_TEMP1673 = RX10_TEMP1671+1;


				final intStub[] RX10_TEMP1674 = new intStub[RX10_TEMP1673];

				/*FINISH
*/					{
					for(int RX10_TEMP1675=0; RX10_TEMP1675 < RX10_TEMP1672; RX10_TEMP1675++)
						{

						final int RX10_TEMP1676 = 0;


						final int RX10_TEMP1677 = RX10_TEMP1675;


						final int RX10_TEMP1678 = 0;


						final int RX10_TEMP1679 = Program.getDistLocalCount1(dUnique, RX10_TEMP1677,myUniquePlacePoint);


						final int RX10_TEMP1680 = RX10_TEMP1679 - RX10_TEMP1670;

						//async(RX10_TEMP1678)
							{

							final int RX10_TEMP1682 = RX10_TEMP1680+1;


							final int[] RX10_TEMP1683 = new int/*NewUpdatableArray*/[RX10_TEMP1682];
/*arrayInitBlock*/
for(int RX10_TEMP1681= 0;RX10_TEMP1681 <RX10_TEMP1683.length ;RX10_TEMP1681++ )								{
								RX10_TEMP1683[RX10_TEMP1681] =rSize;
								}

;


							final intStub RX10_TEMP1684 = new intStub(RX10_TEMP1683,RX10_TEMP1678);
							
Program.globalPointerHashMap.get(RX10_TEMP1678).add(RX10_TEMP1684.hashCode());

							//async(RX10_TEMP1676)
								{
								RX10_TEMP1674[RX10_TEMP1675] = RX10_TEMP1684;
								}
							}
						}
					}

				final intStub[] RX10_TEMP1685 = (intStub[])(new intStub/*value*/[RX10_TEMP1672]);
/*arrayInitBlock*/
for(int RX10_TEMP1687= 0;RX10_TEMP1687 <RX10_TEMP1685.length ;RX10_TEMP1687++ )					{

					final intStub RX10_TEMP1686 = RX10_TEMP1674[RX10_TEMP1687];

					RX10_TEMP1685[RX10_TEMP1687] =RX10_TEMP1686;
					}

;


				final intRefArray1 RX10_TEMP1688 = new intRefArray1(dUnique, RX10_TEMP1685,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1688.hashCode());


				final intRefArray1 X10_TEMP623 = RX10_TEMP1688;


				final intRefArray1 X10_TEMP626 = X10_TEMP623;


				final intRefArray1 X10_TEMP627 = tMaxSize;


				final Region1 RX10_TEMP1689 = dUnique.dReg;


				final int RX10_TEMP1690 = 0;


				final int RX10_TEMP1691 = 1;


				int RX10_TEMP1692 = 1;


				RX10_TEMP1692 = RX10_TEMP1692 - RX10_TEMP1691;


				final int  RX10_TEMP1693 = RX10_TEMP1692+1;


				final int RX10_TEMP1694 = RX10_TEMP1692+1;


				final intStub[] RX10_TEMP1695 = new intStub[RX10_TEMP1694];

				/*FINISH
*/					{
					for(int RX10_TEMP1696=0; RX10_TEMP1696 < RX10_TEMP1693; RX10_TEMP1696++)
						{

						final int RX10_TEMP1697 = 0;


						final int RX10_TEMP1698 = RX10_TEMP1696;


						final int RX10_TEMP1699 = 0;


						final int RX10_TEMP1700 = Program.getDistLocalCount1(dUnique, RX10_TEMP1698,myUniquePlacePoint);


						final int RX10_TEMP1701 = RX10_TEMP1700 - RX10_TEMP1691;


						final Point1[] RX10_TEMP1702 = Program.getDistLocalArray1(dUnique, RX10_TEMP1698,myUniquePlacePoint);

						//async(RX10_TEMP1699)
							{

							final int RX10_TEMP1726 = RX10_TEMP1701+1;


							final int[] RX10_TEMP1727 = new int/*NewUpdatableArray*/[RX10_TEMP1726];
/*arrayInitBlock*/
for(int RX10_TEMP1703= 0;RX10_TEMP1703 <RX10_TEMP1727.length ;RX10_TEMP1703++ )								{

								final Point1 X10_TEMP625 = RX10_TEMP1702[RX10_TEMP1703];


								final Dist1 RX10_TEMP1704 = X10_TEMP626.distValue;


								final Region1 RX10_TEMP1705 = RX10_TEMP1704.dReg;


								final int RX10_TEMP1706 = Program.searchPointInRegion1(RX10_TEMP1705, X10_TEMP625,RX10_TEMP1699);


								final int RX10_TEMP1707 = 0;


								final boolean RX10_TEMP1708 = RX10_TEMP1706 < RX10_TEMP1707;

								if(RX10_TEMP1708)
									{

									String RX10_TEMP1709 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1709);

									}

								final int RX10_TEMP1710 = Program.getPlaceFromDist1(RX10_TEMP1704, RX10_TEMP1706,RX10_TEMP1699);


								final int RX10_TEMP1712 = 0;


								final boolean RX10_TEMP1713 = RX10_TEMP1710 != RX10_TEMP1712;

								if(RX10_TEMP1713)
									{

									String RX10_TEMP1711 = "Bad place access for array X10_TEMP626";

									throw new RuntimeException(RX10_TEMP1711);

									}

								final int RX10_TEMP1714 = Program.getRefArrayValue1int(X10_TEMP626, RX10_TEMP1706,RX10_TEMP1699);


								final int X10_TEMP628 = RX10_TEMP1714;


								final Dist1 RX10_TEMP1715 = X10_TEMP627.distValue;


								final Region1 RX10_TEMP1716 = RX10_TEMP1715.dReg;


								final int RX10_TEMP1717 = Program.searchPointInRegion1(RX10_TEMP1716, X10_TEMP625,RX10_TEMP1699);


								final int RX10_TEMP1718 = 0;


								final boolean RX10_TEMP1719 = RX10_TEMP1717 < RX10_TEMP1718;

								if(RX10_TEMP1719)
									{

									String RX10_TEMP1720 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1720);

									}

								final int RX10_TEMP1721 = Program.getPlaceFromDist1(RX10_TEMP1715, RX10_TEMP1717,RX10_TEMP1699);


								final int RX10_TEMP1723 = 0;


								final boolean RX10_TEMP1724 = RX10_TEMP1721 != RX10_TEMP1723;

								if(RX10_TEMP1724)
									{

									String RX10_TEMP1722 = "Bad place access for array X10_TEMP627";

									throw new RuntimeException(RX10_TEMP1722);

									}

								final int RX10_TEMP1725 = Program.getRefArrayValue1int(X10_TEMP627, RX10_TEMP1717,RX10_TEMP1699);


								final int X10_TEMP629 = RX10_TEMP1725;


								final int X10_TEMP630 = X10_TEMP628 - X10_TEMP629;

								RX10_TEMP1727[RX10_TEMP1703] =X10_TEMP630;
								}

;


							final intStub RX10_TEMP1728 = new intStub(RX10_TEMP1727,RX10_TEMP1699);
							
Program.globalPointerHashMap.get(RX10_TEMP1699).add(RX10_TEMP1728.hashCode());

							//async(RX10_TEMP1697)
								{
								RX10_TEMP1695[RX10_TEMP1696] = RX10_TEMP1728;
								}
							}
						}
					}

				final intStub[] RX10_TEMP1729 = (intStub[])(new intStub/*value*/[RX10_TEMP1693]);
/*arrayInitBlock*/
for(int RX10_TEMP1731= 0;RX10_TEMP1731 <RX10_TEMP1729.length ;RX10_TEMP1731++ )					{

					final intStub RX10_TEMP1730 = RX10_TEMP1695[RX10_TEMP1731];

					RX10_TEMP1729[RX10_TEMP1731] =RX10_TEMP1730;
					}

;


				final intRefArray1 RX10_TEMP1732 = new intRefArray1(dUnique, RX10_TEMP1729,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1732.hashCode());


				final intRefArray1 X10_TEMP624 = RX10_TEMP1732;


				final intRefArray1 tMinSize = X10_TEMP624;


				final int X10_TEMP633 = 1;


				final int X10_TEMP636 = Program.intrefArrayMax1(tMaxSize,myUniquePlacePoint);


				final int X10_TEMP637 = X10_TEMP636;


				final Point1 RX10_TEMP1733 = new Point1(X10_TEMP633,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1733.hashCode());


				final Dist1 RX10_TEMP1734 = info.distValue;


				final Region1 RX10_TEMP1735 = RX10_TEMP1734.dReg;


				final int RX10_TEMP1736 = Program.searchPointInRegion1(RX10_TEMP1735, RX10_TEMP1733,myUniquePlacePoint);


				final int RX10_TEMP1737 = 0;


				final boolean RX10_TEMP1738 = RX10_TEMP1736 < RX10_TEMP1737;

				if(RX10_TEMP1738)
					{

					String RX10_TEMP1739 = "Array index out of bounds";

					throw new RuntimeException(RX10_TEMP1739);

					}

				final int RX10_TEMP1740 = Program.getPlaceFromDist1(RX10_TEMP1734, RX10_TEMP1736,myUniquePlacePoint);


				final int RX10_TEMP1742 = 0;


				final boolean RX10_TEMP1743 = RX10_TEMP1740 != RX10_TEMP1742;

				if(RX10_TEMP1743)
					{

					String RX10_TEMP1741 = "Bad place access for array info";

					throw new RuntimeException(RX10_TEMP1741);

					}
				Program.setRefArrayValue1int(info, RX10_TEMP1736, X10_TEMP637,myUniquePlacePoint);

				final int X10_TEMP639 = 2;


				final int X10_TEMP640 = Program.intrefArrayMax1(tMinSize,myUniquePlacePoint);


				final int X10_TEMP643 = rSize - X10_TEMP640;


				final int X10_TEMP644 = X10_TEMP643;


				final Point1 RX10_TEMP1744 = new Point1(X10_TEMP639,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1744.hashCode());


				final Dist1 RX10_TEMP1745 = info.distValue;


				final Region1 RX10_TEMP1746 = RX10_TEMP1745.dReg;


				final int RX10_TEMP1747 = Program.searchPointInRegion1(RX10_TEMP1746, RX10_TEMP1744,myUniquePlacePoint);


				final int RX10_TEMP1748 = 0;


				final boolean RX10_TEMP1749 = RX10_TEMP1747 < RX10_TEMP1748;

				if(RX10_TEMP1749)
					{

					String RX10_TEMP1750 = "Array index out of bounds";

					throw new RuntimeException(RX10_TEMP1750);

					}

				final int RX10_TEMP1751 = Program.getPlaceFromDist1(RX10_TEMP1745, RX10_TEMP1747,myUniquePlacePoint);


				final int RX10_TEMP1753 = 0;


				final boolean RX10_TEMP1754 = RX10_TEMP1751 != RX10_TEMP1753;

				if(RX10_TEMP1754)
					{

					String RX10_TEMP1752 = "Bad place access for array info";

					throw new RuntimeException(RX10_TEMP1752);

					}
				Program.setRefArrayValue1int(info, RX10_TEMP1747, X10_TEMP644,myUniquePlacePoint);

				final int X10_TEMP646 = 1;


				final Point1 RX10_TEMP1755 = new Point1(X10_TEMP646,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1755.hashCode());


				final Dist1 RX10_TEMP1756 = ibflg.distValue;


				final Region1 RX10_TEMP1757 = RX10_TEMP1756.dReg;


				final int RX10_TEMP1758 = Program.searchPointInRegion1(RX10_TEMP1757, RX10_TEMP1755,myUniquePlacePoint);


				final int RX10_TEMP1759 = 0;


				final boolean RX10_TEMP1760 = RX10_TEMP1758 < RX10_TEMP1759;

				if(RX10_TEMP1760)
					{

					String RX10_TEMP1761 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP1761);

					}

				final int RX10_TEMP1762 = Program.getPlaceFromDist1(RX10_TEMP1756, RX10_TEMP1758,myUniquePlacePoint);


				final int RX10_TEMP1764 = 0;


				final boolean RX10_TEMP1765 = RX10_TEMP1762 != RX10_TEMP1764;

				if(RX10_TEMP1765)
					{

					String RX10_TEMP1763 = "Bad place access for array ibflg";

					throw new RuntimeException(RX10_TEMP1763);

					}

				final int RX10_TEMP1766 = Program.getRefArrayValue1int(ibflg, RX10_TEMP1758,myUniquePlacePoint);


				final int X10_TEMP647 = RX10_TEMP1766;


				final int X10_TEMP648 = rPart.regSize;


				int err = X10_TEMP647 - X10_TEMP648;


				final int X10_TEMP650 = 0;


				final boolean X10_TEMP652 = err > X10_TEMP650;

				if(X10_TEMP652)
					{

					final String X10_TEMP653 = "Particle overflow error, err = ";


					final String X10_TEMP655 = X10_TEMP653 + err;

					System.err.println(X10_TEMP655);

					final int X10_TEMP657 = 0;


					final int X10_TEMP660 = err;


					final Point1 RX10_TEMP1767 = new Point1(X10_TEMP657,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1767.hashCode());


					final Dist1 RX10_TEMP1768 = info.distValue;


					final Region1 RX10_TEMP1769 = RX10_TEMP1768.dReg;


					final int RX10_TEMP1770 = Program.searchPointInRegion1(RX10_TEMP1769, RX10_TEMP1767,myUniquePlacePoint);


					final int RX10_TEMP1771 = 0;


					final boolean RX10_TEMP1772 = RX10_TEMP1770 < RX10_TEMP1771;

					if(RX10_TEMP1772)
						{

						String RX10_TEMP1773 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1773);

						}

					final int RX10_TEMP1774 = Program.getPlaceFromDist1(RX10_TEMP1768, RX10_TEMP1770,myUniquePlacePoint);


					final int RX10_TEMP1776 = 0;


					final boolean RX10_TEMP1777 = RX10_TEMP1774 != RX10_TEMP1776;

					if(RX10_TEMP1777)
						{

						String RX10_TEMP1775 = "Bad place access for array info";

						throw new RuntimeException(RX10_TEMP1775);

						}
					Program.setRefArrayValue1int(info, RX10_TEMP1770, X10_TEMP660,myUniquePlacePoint);
					return particles;
					}
				/*FINISH
*/					{

					final Dist1 X10_TEMP663 = Program.getUniqueDist(myUniquePlacePoint);


					final Region1 RX10_TEMP1779 = X10_TEMP663.dReg;


					final int RX10_TEMP1782 = 1;


					int RX10_TEMP1780 = RX10_TEMP1779.regSize;


					RX10_TEMP1780 = RX10_TEMP1780 - RX10_TEMP1782;


					final int  RX10_TEMP1781 = RX10_TEMP1780+1;

					for(int RX10_TEMP1778=0; RX10_TEMP1778 < RX10_TEMP1781; RX10_TEMP1778++)
						{

						final int RX10_TEMP1783 = RX10_TEMP1778;


						final Point1 X10_TEMP664 = Program.regionOrdinalPoint1(RX10_TEMP1779, RX10_TEMP1783,myUniquePlacePoint);


						final int pl = X10_TEMP664.f0;


						final Region1 RX10_TEMP1784 = X10_TEMP663.dReg;


						final int RX10_TEMP1785 = Program.searchPointInRegion1(RX10_TEMP1784, X10_TEMP664,myUniquePlacePoint);


						final int RX10_TEMP1786 = 0;


						final boolean RX10_TEMP1787 = RX10_TEMP1785 < RX10_TEMP1786;

						if(RX10_TEMP1787)
							{

							final String RX10_TEMP1788 = "Point X10_TEMP664 not found in the distribution X10_TEMP663.";

							throw new RuntimeException(RX10_TEMP1788);

							}

						final int RX10_TEMP1789 = Program.getPlaceFromDist1(X10_TEMP663, RX10_TEMP1785,myUniquePlacePoint);


						final int X10_TEMP665 = RX10_TEMP1789;

						//async(X10_TEMP665)
							{

							final Point1 RX10_TEMP1790 = new Point1(pl,X10_TEMP665);
							
Program.globalPointerHashMap.get(X10_TEMP665).add(RX10_TEMP1790.hashCode());


							final Dist1 RX10_TEMP1791 = nSent.distValue;


							final Region1 RX10_TEMP1792 = RX10_TEMP1791.dReg;


							final int RX10_TEMP1793 = Program.searchPointInRegion1(RX10_TEMP1792, RX10_TEMP1790,X10_TEMP665);


							final int RX10_TEMP1794 = 0;


							final boolean RX10_TEMP1795 = RX10_TEMP1793 < RX10_TEMP1794;

							if(RX10_TEMP1795)
								{

								String RX10_TEMP1796 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1796);

								}

							final int RX10_TEMP1797 = Program.getPlaceFromDist1(RX10_TEMP1791, RX10_TEMP1793,X10_TEMP665);


							final int RX10_TEMP1799 = 0;


							final boolean RX10_TEMP1800 = RX10_TEMP1797 != RX10_TEMP1799;

							if(RX10_TEMP1800)
								{

								String RX10_TEMP1798 = "Bad place access for array nSent";

								throw new RuntimeException(RX10_TEMP1798);

								}

							final int RX10_TEMP1801 = Program.getRefArrayValue1int(nSent, RX10_TEMP1793,X10_TEMP665);


							int holesTotal = RX10_TEMP1801;


							final Point1 RX10_TEMP1802 = new Point1(pl,X10_TEMP665);
							
Program.globalPointerHashMap.get(X10_TEMP665).add(RX10_TEMP1802.hashCode());


							final Dist1 RX10_TEMP1803 = nSent.distValue;


							final Region1 RX10_TEMP1804 = RX10_TEMP1803.dReg;


							final int RX10_TEMP1805 = Program.searchPointInRegion1(RX10_TEMP1804, RX10_TEMP1802,X10_TEMP665);


							final int RX10_TEMP1806 = 0;


							final boolean RX10_TEMP1807 = RX10_TEMP1805 < RX10_TEMP1806;

							if(RX10_TEMP1807)
								{

								String RX10_TEMP1808 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1808);

								}

							final int RX10_TEMP1809 = Program.getPlaceFromDist1(RX10_TEMP1803, RX10_TEMP1805,X10_TEMP665);


							final int RX10_TEMP1811 = 0;


							final boolean RX10_TEMP1812 = RX10_TEMP1809 != RX10_TEMP1811;

							if(RX10_TEMP1812)
								{

								String RX10_TEMP1810 = "Bad place access for array nSent";

								throw new RuntimeException(RX10_TEMP1810);

								}

							final int RX10_TEMP1813 = Program.getRefArrayValue1int(nSent, RX10_TEMP1805,X10_TEMP665);


							int holesLeft = RX10_TEMP1813;


							final Point1 RX10_TEMP1814 = new Point1(pl,X10_TEMP665);
							
Program.globalPointerHashMap.get(X10_TEMP665).add(RX10_TEMP1814.hashCode());


							final Dist1 RX10_TEMP1815 = inLt.distValue;


							final Region1 RX10_TEMP1816 = RX10_TEMP1815.dReg;


							final int RX10_TEMP1817 = Program.searchPointInRegion1(RX10_TEMP1816, RX10_TEMP1814,X10_TEMP665);


							final int RX10_TEMP1818 = 0;


							final boolean RX10_TEMP1819 = RX10_TEMP1817 < RX10_TEMP1818;

							if(RX10_TEMP1819)
								{

								String RX10_TEMP1820 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1820);

								}

							final int RX10_TEMP1821 = Program.getPlaceFromDist1(RX10_TEMP1815, RX10_TEMP1817,X10_TEMP665);


							final int RX10_TEMP1823 = 0;


							final boolean RX10_TEMP1824 = RX10_TEMP1821 != RX10_TEMP1823;

							if(RX10_TEMP1824)
								{

								String RX10_TEMP1822 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP1822);

								}

							final int RX10_TEMP1825 = Program.getRefArrayValue1int(inLt, RX10_TEMP1817,X10_TEMP665);


							final int X10_TEMP673 = RX10_TEMP1825;


							int nMove = Program.X10Util_minInt(holesLeft, X10_TEMP673,X10_TEMP665);

							/*FINISH
*/								{

								final int X10_TEMP678 = 0;


								final int X10_TEMP676 = 1;


								final int X10_TEMP679 = nMove - X10_TEMP676;


								final Region1 X10_TEMP681 = Program.createNewRegion1R(X10_TEMP678, X10_TEMP679,X10_TEMP665);


								final int X10_TEMP682 = 0;


								final int RX10_TEMP1830 = 1;


								int RX10_TEMP1828 = X10_TEMP681.regSize;


								RX10_TEMP1828 = RX10_TEMP1828 - RX10_TEMP1830;


								final int  RX10_TEMP1829 = RX10_TEMP1828+1;

								for(int RX10_TEMP1826=0; RX10_TEMP1826 < RX10_TEMP1829; RX10_TEMP1826++)
									{

									final int RX10_TEMP1831 = RX10_TEMP1826;


									final Point1 RX10_TEMP1827 = Program.regionOrdinalPoint1(X10_TEMP681, RX10_TEMP1831,X10_TEMP665);


									final int i = RX10_TEMP1827.f0;

									//async(X10_TEMP682)
										{

										final Point2 RX10_TEMP1832 = new Point2(pl, i,X10_TEMP682);
										
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1832.hashCode());


										final Dist2 RX10_TEMP1833 = holes.distValue;


										final Region2 RX10_TEMP1834 = RX10_TEMP1833.dReg;


										final int RX10_TEMP1835 = Program.searchPointInRegion2(RX10_TEMP1834, RX10_TEMP1832,X10_TEMP682);


										final int RX10_TEMP1836 = 0;


										final boolean RX10_TEMP1837 = RX10_TEMP1835 < RX10_TEMP1836;

										if(RX10_TEMP1837)
											{

											String RX10_TEMP1838 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1838);

											}

										final int RX10_TEMP1839 = Program.getPlaceFromDist2(RX10_TEMP1833, RX10_TEMP1835,X10_TEMP682);


										final int RX10_TEMP1841 = 0;


										final boolean RX10_TEMP1842 = RX10_TEMP1839 != RX10_TEMP1841;

										if(RX10_TEMP1842)
											{

											String RX10_TEMP1840 = "Bad place access for array holes";

											throw new RuntimeException(RX10_TEMP1840);

											}

										final int RX10_TEMP1843 = Program.getRefArrayValue2int(holes, RX10_TEMP1835,X10_TEMP682);


										final int X10_TEMP687 = RX10_TEMP1843;


										final Point2 RX10_TEMP1844 = new Point2(pl, i,X10_TEMP682);
										
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1844.hashCode());


										final Dist2 RX10_TEMP1845 = rBufferL.distValue;


										final Region2 RX10_TEMP1846 = RX10_TEMP1845.dReg;


										final int RX10_TEMP1847 = Program.searchPointInRegion2(RX10_TEMP1846, RX10_TEMP1844,X10_TEMP682);


										final int RX10_TEMP1848 = 0;


										final boolean RX10_TEMP1849 = RX10_TEMP1847 < RX10_TEMP1848;

										if(RX10_TEMP1849)
											{

											String RX10_TEMP1850 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP1850);

											}

										final int RX10_TEMP1851 = Program.getPlaceFromDist2(RX10_TEMP1845, RX10_TEMP1847,X10_TEMP682);


										final int RX10_TEMP1853 = 0;


										final boolean RX10_TEMP1854 = RX10_TEMP1851 != RX10_TEMP1853;

										if(RX10_TEMP1854)
											{

											String RX10_TEMP1852 = "Bad place access for array rBufferL";

											throw new RuntimeException(RX10_TEMP1852);

											}

										final Particle RX10_TEMP1855 = Program.getRefArrayValue2Particle(rBufferL, RX10_TEMP1847,X10_TEMP682);


										final Particle X10_TEMP692 = RX10_TEMP1855;


										final Particle X10_TEMP693 = X10_TEMP692;


										final Point2 RX10_TEMP1856 = new Point2(pl, X10_TEMP687,X10_TEMP682);
										
Program.globalPointerHashMap.get(X10_TEMP682).add(RX10_TEMP1856.hashCode());


										final Dist2 RX10_TEMP1857 = part.distValue;


										final Region2 RX10_TEMP1858 = RX10_TEMP1857.dReg;


										final int RX10_TEMP1859 = Program.searchPointInRegion2(RX10_TEMP1858, RX10_TEMP1856,X10_TEMP682);


										final int RX10_TEMP1860 = 0;


										final boolean RX10_TEMP1861 = RX10_TEMP1859 < RX10_TEMP1860;

										if(RX10_TEMP1861)
											{

											String RX10_TEMP1862 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP1862);

											}

										final int RX10_TEMP1863 = Program.getPlaceFromDist2(RX10_TEMP1857, RX10_TEMP1859,X10_TEMP682);


										final int RX10_TEMP1865 = 0;


										final boolean RX10_TEMP1866 = RX10_TEMP1863 != RX10_TEMP1865;

										if(RX10_TEMP1866)
											{

											String RX10_TEMP1864 = "Bad place access for array part";

											throw new RuntimeException(RX10_TEMP1864);

											}
										Program.setRefArrayValue2Particle(part, RX10_TEMP1859, X10_TEMP693,X10_TEMP682);
										}
									}
								}

							final Point1 RX10_TEMP1867 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1867.hashCode());


							final Dist1 RX10_TEMP1868 = inLt.distValue;


							final Region1 RX10_TEMP1869 = RX10_TEMP1868.dReg;


							final int RX10_TEMP1870 = Program.searchPointInRegion1(RX10_TEMP1869, RX10_TEMP1867,myUniquePlacePoint);


							final int RX10_TEMP1871 = 0;


							final boolean RX10_TEMP1872 = RX10_TEMP1870 < RX10_TEMP1871;

							if(RX10_TEMP1872)
								{

								String RX10_TEMP1873 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1873);

								}

							final int RX10_TEMP1874 = Program.getPlaceFromDist1(RX10_TEMP1868, RX10_TEMP1870,myUniquePlacePoint);


							final int RX10_TEMP1876 = 0;


							final boolean RX10_TEMP1877 = RX10_TEMP1874 != RX10_TEMP1876;

							if(RX10_TEMP1877)
								{

								String RX10_TEMP1875 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP1875);

								}

							final int RX10_TEMP1878 = Program.getRefArrayValue1int(inLt, RX10_TEMP1870,myUniquePlacePoint);


							final int X10_TEMP695 = RX10_TEMP1878;


							final int X10_TEMP697 = holesLeft - X10_TEMP695;


							holesLeft = X10_TEMP697;


							final int X10_TEMP698 = 0;


							final boolean X10_TEMP700 = holesLeft > X10_TEMP698;

							if(X10_TEMP700)
								{

								final Point1 RX10_TEMP1879 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1879.hashCode());


								final Dist1 RX10_TEMP1880 = inRt.distValue;


								final Region1 RX10_TEMP1881 = RX10_TEMP1880.dReg;


								final int RX10_TEMP1882 = Program.searchPointInRegion1(RX10_TEMP1881, RX10_TEMP1879,myUniquePlacePoint);


								final int RX10_TEMP1883 = 0;


								final boolean RX10_TEMP1884 = RX10_TEMP1882 < RX10_TEMP1883;

								if(RX10_TEMP1884)
									{

									String RX10_TEMP1885 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1885);

									}

								final int RX10_TEMP1886 = Program.getPlaceFromDist1(RX10_TEMP1880, RX10_TEMP1882,myUniquePlacePoint);


								final int RX10_TEMP1888 = 0;


								final boolean RX10_TEMP1889 = RX10_TEMP1886 != RX10_TEMP1888;

								if(RX10_TEMP1889)
									{

									String RX10_TEMP1887 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP1887);

									}

								final int RX10_TEMP1890 = Program.getRefArrayValue1int(inRt, RX10_TEMP1882,myUniquePlacePoint);


								final int X10_TEMP704 = RX10_TEMP1890;


								final int X10_TEMP706 = Program.X10Util_minInt(holesLeft, X10_TEMP704,myUniquePlacePoint);


								nMove = X10_TEMP706;


								final int X10_TEMP710 = 0;


								final int X10_TEMP708 = 1;


								final int X10_TEMP711 = nMove - X10_TEMP708;


								final Region1 X10_TEMP713 = Program.createNewRegion1R(X10_TEMP710, X10_TEMP711,myUniquePlacePoint);


								final int RX10_TEMP1895 = 1;


								int RX10_TEMP1893 = X10_TEMP713.regSize;


								RX10_TEMP1893 = RX10_TEMP1893 - RX10_TEMP1895;


								final int  RX10_TEMP1894 = RX10_TEMP1893+1;

								for(int RX10_TEMP1891=0; RX10_TEMP1891 < RX10_TEMP1894; RX10_TEMP1891++)
									{

									final int RX10_TEMP1896 = RX10_TEMP1891;


									final Point1 RX10_TEMP1892 = Program.regionOrdinalPoint1(X10_TEMP713, RX10_TEMP1896,myUniquePlacePoint);


									final int i = RX10_TEMP1892.f0;


									final Point1 RX10_TEMP1897 = new Point1(pl,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1897.hashCode());


									final Dist1 RX10_TEMP1898 = inLt.distValue;


									final Region1 RX10_TEMP1899 = RX10_TEMP1898.dReg;


									final int RX10_TEMP1900 = Program.searchPointInRegion1(RX10_TEMP1899, RX10_TEMP1897,myUniquePlacePoint);


									final int RX10_TEMP1901 = 0;


									final boolean RX10_TEMP1902 = RX10_TEMP1900 < RX10_TEMP1901;

									if(RX10_TEMP1902)
										{

										String RX10_TEMP1903 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1903);

										}

									final int RX10_TEMP1904 = Program.getPlaceFromDist1(RX10_TEMP1898, RX10_TEMP1900,myUniquePlacePoint);


									final int RX10_TEMP1906 = 0;


									final boolean RX10_TEMP1907 = RX10_TEMP1904 != RX10_TEMP1906;

									if(RX10_TEMP1907)
										{

										String RX10_TEMP1905 = "Bad place access for array inLt";

										throw new RuntimeException(RX10_TEMP1905);

										}

									final int RX10_TEMP1908 = Program.getRefArrayValue1int(inLt, RX10_TEMP1900,myUniquePlacePoint);


									final int X10_TEMP717 = RX10_TEMP1908;


									final int X10_TEMP719 = i + X10_TEMP717;


									final Point2 RX10_TEMP1909 = new Point2(pl, X10_TEMP719,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1909.hashCode());


									final Dist2 RX10_TEMP1910 = holes.distValue;


									final Region2 RX10_TEMP1911 = RX10_TEMP1910.dReg;


									final int RX10_TEMP1912 = Program.searchPointInRegion2(RX10_TEMP1911, RX10_TEMP1909,myUniquePlacePoint);


									final int RX10_TEMP1913 = 0;


									final boolean RX10_TEMP1914 = RX10_TEMP1912 < RX10_TEMP1913;

									if(RX10_TEMP1914)
										{

										String RX10_TEMP1915 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1915);

										}

									final int RX10_TEMP1916 = Program.getPlaceFromDist2(RX10_TEMP1910, RX10_TEMP1912,myUniquePlacePoint);


									final int RX10_TEMP1918 = 0;


									final boolean RX10_TEMP1919 = RX10_TEMP1916 != RX10_TEMP1918;

									if(RX10_TEMP1919)
										{

										String RX10_TEMP1917 = "Bad place access for array holes";

										throw new RuntimeException(RX10_TEMP1917);

										}

									final int RX10_TEMP1920 = Program.getRefArrayValue2int(holes, RX10_TEMP1912,myUniquePlacePoint);


									final int X10_TEMP721 = RX10_TEMP1920;


									final Point2 RX10_TEMP1921 = new Point2(pl, i,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1921.hashCode());


									final Dist2 RX10_TEMP1922 = rBufferR.distValue;


									final Region2 RX10_TEMP1923 = RX10_TEMP1922.dReg;


									final int RX10_TEMP1924 = Program.searchPointInRegion2(RX10_TEMP1923, RX10_TEMP1921,myUniquePlacePoint);


									final int RX10_TEMP1925 = 0;


									final boolean RX10_TEMP1926 = RX10_TEMP1924 < RX10_TEMP1925;

									if(RX10_TEMP1926)
										{

										String RX10_TEMP1927 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1927);

										}

									final int RX10_TEMP1928 = Program.getPlaceFromDist2(RX10_TEMP1922, RX10_TEMP1924,myUniquePlacePoint);


									final int RX10_TEMP1930 = 0;


									final boolean RX10_TEMP1931 = RX10_TEMP1928 != RX10_TEMP1930;

									if(RX10_TEMP1931)
										{

										String RX10_TEMP1929 = "Bad place access for array rBufferR";

										throw new RuntimeException(RX10_TEMP1929);

										}

									final Particle RX10_TEMP1932 = Program.getRefArrayValue2Particle(rBufferR, RX10_TEMP1924,myUniquePlacePoint);


									final Particle X10_TEMP726 = RX10_TEMP1932;


									final Particle X10_TEMP727 = X10_TEMP726;


									final Point2 RX10_TEMP1933 = new Point2(pl, X10_TEMP721,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1933.hashCode());


									final Dist2 RX10_TEMP1934 = part.distValue;


									final Region2 RX10_TEMP1935 = RX10_TEMP1934.dReg;


									final int RX10_TEMP1936 = Program.searchPointInRegion2(RX10_TEMP1935, RX10_TEMP1933,myUniquePlacePoint);


									final int RX10_TEMP1937 = 0;


									final boolean RX10_TEMP1938 = RX10_TEMP1936 < RX10_TEMP1937;

									if(RX10_TEMP1938)
										{

										String RX10_TEMP1939 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1939);

										}

									final int RX10_TEMP1940 = Program.getPlaceFromDist2(RX10_TEMP1934, RX10_TEMP1936,myUniquePlacePoint);


									final int RX10_TEMP1942 = 0;


									final boolean RX10_TEMP1943 = RX10_TEMP1940 != RX10_TEMP1942;

									if(RX10_TEMP1943)
										{

										String RX10_TEMP1941 = "Bad place access for array part";

										throw new RuntimeException(RX10_TEMP1941);

										}
									Program.setRefArrayValue2Particle(part, RX10_TEMP1936, X10_TEMP727,myUniquePlacePoint);
									}
								}
							else
								{

								final int X10_TEMP728 = 0;


								final int X10_TEMP730 = X10_TEMP728 - holesLeft;


								nMove = X10_TEMP730;


								final int X10_TEMP734 = 0;


								final int X10_TEMP732 = 1;


								final int X10_TEMP735 = nMove - X10_TEMP732;


								final Region1 X10_TEMP737 = Program.createNewRegion1R(X10_TEMP734, X10_TEMP735,myUniquePlacePoint);


								final int RX10_TEMP1948 = 1;


								int RX10_TEMP1946 = X10_TEMP737.regSize;


								RX10_TEMP1946 = RX10_TEMP1946 - RX10_TEMP1948;


								final int  RX10_TEMP1947 = RX10_TEMP1946+1;

								for(int RX10_TEMP1944=0; RX10_TEMP1944 < RX10_TEMP1947; RX10_TEMP1944++)
									{

									final int RX10_TEMP1949 = RX10_TEMP1944;


									final Point1 RX10_TEMP1945 = Program.regionOrdinalPoint1(X10_TEMP737, RX10_TEMP1949,myUniquePlacePoint);


									final int i = RX10_TEMP1945.f0;


									final Point1 RX10_TEMP1950 = new Point1(pl,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1950.hashCode());


									final Dist1 RX10_TEMP1951 = nPart.distValue;


									final Region1 RX10_TEMP1952 = RX10_TEMP1951.dReg;


									final int RX10_TEMP1953 = Program.searchPointInRegion1(RX10_TEMP1952, RX10_TEMP1950,myUniquePlacePoint);


									final int RX10_TEMP1954 = 0;


									final boolean RX10_TEMP1955 = RX10_TEMP1953 < RX10_TEMP1954;

									if(RX10_TEMP1955)
										{

										String RX10_TEMP1956 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1956);

										}

									final int RX10_TEMP1957 = Program.getPlaceFromDist1(RX10_TEMP1951, RX10_TEMP1953,myUniquePlacePoint);


									final int RX10_TEMP1959 = 0;


									final boolean RX10_TEMP1960 = RX10_TEMP1957 != RX10_TEMP1959;

									if(RX10_TEMP1960)
										{

										String RX10_TEMP1958 = "Bad place access for array nPart";

										throw new RuntimeException(RX10_TEMP1958);

										}

									final int RX10_TEMP1961 = Program.getRefArrayValue1int(nPart, RX10_TEMP1953,myUniquePlacePoint);


									final int X10_TEMP740 = RX10_TEMP1961;


									final int X10_TEMP742 = i + X10_TEMP740;


									final int X10_TEMP745 = i + holesTotal;


									final Point2 RX10_TEMP1962 = new Point2(pl, X10_TEMP745,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1962.hashCode());


									final Dist2 RX10_TEMP1963 = rBufferL.distValue;


									final Region2 RX10_TEMP1964 = RX10_TEMP1963.dReg;


									final int RX10_TEMP1965 = Program.searchPointInRegion2(RX10_TEMP1964, RX10_TEMP1962,myUniquePlacePoint);


									final int RX10_TEMP1966 = 0;


									final boolean RX10_TEMP1967 = RX10_TEMP1965 < RX10_TEMP1966;

									if(RX10_TEMP1967)
										{

										String RX10_TEMP1968 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1968);

										}

									final int RX10_TEMP1969 = Program.getPlaceFromDist2(RX10_TEMP1963, RX10_TEMP1965,myUniquePlacePoint);


									final int RX10_TEMP1971 = 0;


									final boolean RX10_TEMP1972 = RX10_TEMP1969 != RX10_TEMP1971;

									if(RX10_TEMP1972)
										{

										String RX10_TEMP1970 = "Bad place access for array rBufferL";

										throw new RuntimeException(RX10_TEMP1970);

										}

									final Particle RX10_TEMP1973 = Program.getRefArrayValue2Particle(rBufferL, RX10_TEMP1965,myUniquePlacePoint);


									final Particle X10_TEMP748 = RX10_TEMP1973;


									final Particle X10_TEMP749 = X10_TEMP748;


									final Point2 RX10_TEMP1974 = new Point2(pl, X10_TEMP742,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1974.hashCode());


									final Dist2 RX10_TEMP1975 = part.distValue;


									final Region2 RX10_TEMP1976 = RX10_TEMP1975.dReg;


									final int RX10_TEMP1977 = Program.searchPointInRegion2(RX10_TEMP1976, RX10_TEMP1974,myUniquePlacePoint);


									final int RX10_TEMP1978 = 0;


									final boolean RX10_TEMP1979 = RX10_TEMP1977 < RX10_TEMP1978;

									if(RX10_TEMP1979)
										{

										String RX10_TEMP1980 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1980);

										}

									final int RX10_TEMP1981 = Program.getPlaceFromDist2(RX10_TEMP1975, RX10_TEMP1977,myUniquePlacePoint);


									final int RX10_TEMP1983 = 0;


									final boolean RX10_TEMP1984 = RX10_TEMP1981 != RX10_TEMP1983;

									if(RX10_TEMP1984)
										{

										String RX10_TEMP1982 = "Bad place access for array part";

										throw new RuntimeException(RX10_TEMP1982);

										}
									Program.setRefArrayValue2Particle(part, RX10_TEMP1977, X10_TEMP749,myUniquePlacePoint);
									}
								}
 
							final int X10_TEMP750 = 0;


							final boolean X10_TEMP752 = holesLeft <= X10_TEMP750;

							if(X10_TEMP752)
								{

								final Point1 RX10_TEMP1985 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1985.hashCode());


								final Dist1 RX10_TEMP1986 = nPart.distValue;


								final Region1 RX10_TEMP1987 = RX10_TEMP1986.dReg;


								final int RX10_TEMP1988 = Program.searchPointInRegion1(RX10_TEMP1987, RX10_TEMP1985,myUniquePlacePoint);


								final int RX10_TEMP1989 = 0;


								final boolean RX10_TEMP1990 = RX10_TEMP1988 < RX10_TEMP1989;

								if(RX10_TEMP1990)
									{

									String RX10_TEMP1991 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1991);

									}

								final int RX10_TEMP1992 = Program.getPlaceFromDist1(RX10_TEMP1986, RX10_TEMP1988,myUniquePlacePoint);


								final int RX10_TEMP1994 = 0;


								final boolean RX10_TEMP1995 = RX10_TEMP1992 != RX10_TEMP1994;

								if(RX10_TEMP1995)
									{

									String RX10_TEMP1993 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP1993);

									}

								final int RX10_TEMP1996 = Program.getRefArrayValue1int(nPart, RX10_TEMP1988,myUniquePlacePoint);


								final int X10_TEMP755 = RX10_TEMP1996;


								final int X10_TEMP758 = X10_TEMP755 - holesLeft;


								final int X10_TEMP759 = X10_TEMP758;


								final Point1 RX10_TEMP1997 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1997.hashCode());


								final Dist1 RX10_TEMP1998 = nPart.distValue;


								final Region1 RX10_TEMP1999 = RX10_TEMP1998.dReg;


								final int RX10_TEMP2000 = Program.searchPointInRegion1(RX10_TEMP1999, RX10_TEMP1997,myUniquePlacePoint);


								final int RX10_TEMP2001 = 0;


								final boolean RX10_TEMP2002 = RX10_TEMP2000 < RX10_TEMP2001;

								if(RX10_TEMP2002)
									{

									String RX10_TEMP2003 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP2003);

									}

								final int RX10_TEMP2004 = Program.getPlaceFromDist1(RX10_TEMP1998, RX10_TEMP2000,myUniquePlacePoint);


								final int RX10_TEMP2006 = 0;


								final boolean RX10_TEMP2007 = RX10_TEMP2004 != RX10_TEMP2006;

								if(RX10_TEMP2007)
									{

									String RX10_TEMP2005 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP2005);

									}
								Program.setRefArrayValue1int(nPart, RX10_TEMP2000, X10_TEMP759,myUniquePlacePoint);

								final Point1 RX10_TEMP2008 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2008.hashCode());


								final Dist1 RX10_TEMP2009 = inLt.distValue;


								final Region1 RX10_TEMP2010 = RX10_TEMP2009.dReg;


								final int RX10_TEMP2011 = Program.searchPointInRegion1(RX10_TEMP2010, RX10_TEMP2008,myUniquePlacePoint);


								final int RX10_TEMP2012 = 0;


								final boolean RX10_TEMP2013 = RX10_TEMP2011 < RX10_TEMP2012;

								if(RX10_TEMP2013)
									{

									String RX10_TEMP2014 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2014);

									}

								final int RX10_TEMP2015 = Program.getPlaceFromDist1(RX10_TEMP2009, RX10_TEMP2011,myUniquePlacePoint);


								final int RX10_TEMP2017 = 0;


								final boolean RX10_TEMP2018 = RX10_TEMP2015 != RX10_TEMP2017;

								if(RX10_TEMP2018)
									{

									String RX10_TEMP2016 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP2016);

									}

								final int RX10_TEMP2019 = Program.getRefArrayValue1int(inLt, RX10_TEMP2011,myUniquePlacePoint);


								final int X10_TEMP762 = RX10_TEMP2019;


								holesTotal = X10_TEMP762;

								}

							final Point1 RX10_TEMP2020 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2020.hashCode());


							final Dist1 RX10_TEMP2021 = inLt.distValue;


							final Region1 RX10_TEMP2022 = RX10_TEMP2021.dReg;


							final int RX10_TEMP2023 = Program.searchPointInRegion1(RX10_TEMP2022, RX10_TEMP2020,myUniquePlacePoint);


							final int RX10_TEMP2024 = 0;


							final boolean RX10_TEMP2025 = RX10_TEMP2023 < RX10_TEMP2024;

							if(RX10_TEMP2025)
								{

								String RX10_TEMP2026 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP2026);

								}

							final int RX10_TEMP2027 = Program.getPlaceFromDist1(RX10_TEMP2021, RX10_TEMP2023,myUniquePlacePoint);


							final int RX10_TEMP2029 = 0;


							final boolean RX10_TEMP2030 = RX10_TEMP2027 != RX10_TEMP2029;

							if(RX10_TEMP2030)
								{

								String RX10_TEMP2028 = "Bad place access for array inLt";

								throw new RuntimeException(RX10_TEMP2028);

								}

							final int RX10_TEMP2031 = Program.getRefArrayValue1int(inLt, RX10_TEMP2023,myUniquePlacePoint);


							final int X10_TEMP765 = RX10_TEMP2031;


							final Point1 RX10_TEMP2032 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2032.hashCode());


							final Dist1 RX10_TEMP2033 = inRt.distValue;


							final Region1 RX10_TEMP2034 = RX10_TEMP2033.dReg;


							final int RX10_TEMP2035 = Program.searchPointInRegion1(RX10_TEMP2034, RX10_TEMP2032,myUniquePlacePoint);


							final int RX10_TEMP2036 = 0;


							final boolean RX10_TEMP2037 = RX10_TEMP2035 < RX10_TEMP2036;

							if(RX10_TEMP2037)
								{

								String RX10_TEMP2038 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP2038);

								}

							final int RX10_TEMP2039 = Program.getPlaceFromDist1(RX10_TEMP2033, RX10_TEMP2035,myUniquePlacePoint);


							final int RX10_TEMP2041 = 0;


							final boolean RX10_TEMP2042 = RX10_TEMP2039 != RX10_TEMP2041;

							if(RX10_TEMP2042)
								{

								String RX10_TEMP2040 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP2040);

								}

							final int RX10_TEMP2043 = Program.getRefArrayValue1int(inRt, RX10_TEMP2035,myUniquePlacePoint);


							final int X10_TEMP766 = RX10_TEMP2043;


							final int X10_TEMP768 = X10_TEMP765 + X10_TEMP766;


							final int X10_TEMP770 = holesTotal - X10_TEMP768;


							holesLeft = X10_TEMP770;


							final int X10_TEMP771 = 0;


							final boolean X10_TEMP773 = holesLeft > X10_TEMP771;

							if(X10_TEMP773)
								{

								final Point1 RX10_TEMP2044 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2044.hashCode());


								final Dist1 RX10_TEMP2045 = inLt.distValue;


								final Region1 RX10_TEMP2046 = RX10_TEMP2045.dReg;


								final int RX10_TEMP2047 = Program.searchPointInRegion1(RX10_TEMP2046, RX10_TEMP2044,myUniquePlacePoint);


								final int RX10_TEMP2048 = 0;


								final boolean RX10_TEMP2049 = RX10_TEMP2047 < RX10_TEMP2048;

								if(RX10_TEMP2049)
									{

									String RX10_TEMP2050 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2050);

									}

								final int RX10_TEMP2051 = Program.getPlaceFromDist1(RX10_TEMP2045, RX10_TEMP2047,myUniquePlacePoint);


								final int RX10_TEMP2053 = 0;


								final boolean RX10_TEMP2054 = RX10_TEMP2051 != RX10_TEMP2053;

								if(RX10_TEMP2054)
									{

									String RX10_TEMP2052 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP2052);

									}

								final int RX10_TEMP2055 = Program.getRefArrayValue1int(inLt, RX10_TEMP2047,myUniquePlacePoint);


								final int X10_TEMP776 = RX10_TEMP2055;


								final Point1 RX10_TEMP2056 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2056.hashCode());


								final Dist1 RX10_TEMP2057 = inRt.distValue;


								final Region1 RX10_TEMP2058 = RX10_TEMP2057.dReg;


								final int RX10_TEMP2059 = Program.searchPointInRegion1(RX10_TEMP2058, RX10_TEMP2056,myUniquePlacePoint);


								final int RX10_TEMP2060 = 0;


								final boolean RX10_TEMP2061 = RX10_TEMP2059 < RX10_TEMP2060;

								if(RX10_TEMP2061)
									{

									String RX10_TEMP2062 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2062);

									}

								final int RX10_TEMP2063 = Program.getPlaceFromDist1(RX10_TEMP2057, RX10_TEMP2059,myUniquePlacePoint);


								final int RX10_TEMP2065 = 0;


								final boolean RX10_TEMP2066 = RX10_TEMP2063 != RX10_TEMP2065;

								if(RX10_TEMP2066)
									{

									String RX10_TEMP2064 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP2064);

									}

								final int RX10_TEMP2067 = Program.getRefArrayValue1int(inRt, RX10_TEMP2059,myUniquePlacePoint);


								final int X10_TEMP777 = RX10_TEMP2067;


								final int X10_TEMP779 = X10_TEMP776 + X10_TEMP777;


								holesTotal = X10_TEMP779;


								final int X10_TEMP783 = holesLeft;


								final Point1 RX10_TEMP2068 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2068.hashCode());


								final Dist1 RX10_TEMP2069 = inRt.distValue;


								final Region1 RX10_TEMP2070 = RX10_TEMP2069.dReg;


								final int RX10_TEMP2071 = Program.searchPointInRegion1(RX10_TEMP2070, RX10_TEMP2068,myUniquePlacePoint);


								final int RX10_TEMP2072 = 0;


								final boolean RX10_TEMP2073 = RX10_TEMP2071 < RX10_TEMP2072;

								if(RX10_TEMP2073)
									{

									String RX10_TEMP2074 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP2074);

									}

								final int RX10_TEMP2075 = Program.getPlaceFromDist1(RX10_TEMP2069, RX10_TEMP2071,myUniquePlacePoint);


								final int RX10_TEMP2077 = 0;


								final boolean RX10_TEMP2078 = RX10_TEMP2075 != RX10_TEMP2077;

								if(RX10_TEMP2078)
									{

									String RX10_TEMP2076 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP2076);

									}
								Program.setRefArrayValue1int(inRt, RX10_TEMP2071, X10_TEMP783,myUniquePlacePoint);
								}
							else
								{

								final Point1 RX10_TEMP2079 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2079.hashCode());


								final Dist1 RX10_TEMP2080 = inLt.distValue;


								final Region1 RX10_TEMP2081 = RX10_TEMP2080.dReg;


								final int RX10_TEMP2082 = Program.searchPointInRegion1(RX10_TEMP2081, RX10_TEMP2079,myUniquePlacePoint);


								final int RX10_TEMP2083 = 0;


								final boolean RX10_TEMP2084 = RX10_TEMP2082 < RX10_TEMP2083;

								if(RX10_TEMP2084)
									{

									String RX10_TEMP2085 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2085);

									}

								final int RX10_TEMP2086 = Program.getPlaceFromDist1(RX10_TEMP2080, RX10_TEMP2082,myUniquePlacePoint);


								final int RX10_TEMP2088 = 0;


								final boolean RX10_TEMP2089 = RX10_TEMP2086 != RX10_TEMP2088;

								if(RX10_TEMP2089)
									{

									String RX10_TEMP2087 = "Bad place access for array inLt";

									throw new RuntimeException(RX10_TEMP2087);

									}

								final int RX10_TEMP2090 = Program.getRefArrayValue1int(inLt, RX10_TEMP2082,myUniquePlacePoint);


								final int X10_TEMP785 = RX10_TEMP2090;


								final int X10_TEMP787 = holesTotal - X10_TEMP785;


								holesTotal = X10_TEMP787;


								final int X10_TEMP789 = 0;


								final int X10_TEMP792 = X10_TEMP789 - holesLeft;


								final int X10_TEMP793 = X10_TEMP792;


								final Point1 RX10_TEMP2091 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2091.hashCode());


								final Dist1 RX10_TEMP2092 = inRt.distValue;


								final Region1 RX10_TEMP2093 = RX10_TEMP2092.dReg;


								final int RX10_TEMP2094 = Program.searchPointInRegion1(RX10_TEMP2093, RX10_TEMP2091,myUniquePlacePoint);


								final int RX10_TEMP2095 = 0;


								final boolean RX10_TEMP2096 = RX10_TEMP2094 < RX10_TEMP2095;

								if(RX10_TEMP2096)
									{

									String RX10_TEMP2097 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP2097);

									}

								final int RX10_TEMP2098 = Program.getPlaceFromDist1(RX10_TEMP2092, RX10_TEMP2094,myUniquePlacePoint);


								final int RX10_TEMP2100 = 0;


								final boolean RX10_TEMP2101 = RX10_TEMP2098 != RX10_TEMP2100;

								if(RX10_TEMP2101)
									{

									String RX10_TEMP2099 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP2099);

									}
								Program.setRefArrayValue1int(inRt, RX10_TEMP2094, X10_TEMP793,myUniquePlacePoint);
								}
 
							final int X10_TEMP799 = 0;


							final Point1 RX10_TEMP2102 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2102.hashCode());


							final Dist1 RX10_TEMP2103 = inRt.distValue;


							final Region1 RX10_TEMP2104 = RX10_TEMP2103.dReg;


							final int RX10_TEMP2105 = Program.searchPointInRegion1(RX10_TEMP2104, RX10_TEMP2102,myUniquePlacePoint);


							final int RX10_TEMP2106 = 0;


							final boolean RX10_TEMP2107 = RX10_TEMP2105 < RX10_TEMP2106;

							if(RX10_TEMP2107)
								{

								String RX10_TEMP2108 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP2108);

								}

							final int RX10_TEMP2109 = Program.getPlaceFromDist1(RX10_TEMP2103, RX10_TEMP2105,myUniquePlacePoint);


							final int RX10_TEMP2111 = 0;


							final boolean RX10_TEMP2112 = RX10_TEMP2109 != RX10_TEMP2111;

							if(RX10_TEMP2112)
								{

								String RX10_TEMP2110 = "Bad place access for array inRt";

								throw new RuntimeException(RX10_TEMP2110);

								}

							final int RX10_TEMP2113 = Program.getRefArrayValue1int(inRt, RX10_TEMP2105,myUniquePlacePoint);


							final int X10_TEMP796 = RX10_TEMP2113;


							final int X10_TEMP797 = 1;


							final int X10_TEMP800 = X10_TEMP796 - X10_TEMP797;


							final Region1 X10_TEMP802 = Program.createNewRegion1R(X10_TEMP799, X10_TEMP800,myUniquePlacePoint);


							final int RX10_TEMP2118 = 1;


							int RX10_TEMP2116 = X10_TEMP802.regSize;


							RX10_TEMP2116 = RX10_TEMP2116 - RX10_TEMP2118;


							final int  RX10_TEMP2117 = RX10_TEMP2116+1;

							for(int RX10_TEMP2114=0; RX10_TEMP2114 < RX10_TEMP2117; RX10_TEMP2114++)
								{

								final int RX10_TEMP2119 = RX10_TEMP2114;


								final Point1 RX10_TEMP2115 = Program.regionOrdinalPoint1(X10_TEMP802, RX10_TEMP2119,myUniquePlacePoint);


								final int i = RX10_TEMP2115.f0;


								final int X10_TEMP803 = 0;


								final boolean X10_TEMP805 = holesLeft > X10_TEMP803;

								if(X10_TEMP805)
									{

									final Point1 RX10_TEMP2120 = new Point1(pl,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2120.hashCode());


									final Dist1 RX10_TEMP2121 = nPart.distValue;


									final Region1 RX10_TEMP2122 = RX10_TEMP2121.dReg;


									final int RX10_TEMP2123 = Program.searchPointInRegion1(RX10_TEMP2122, RX10_TEMP2120,myUniquePlacePoint);


									final int RX10_TEMP2124 = 0;


									final boolean RX10_TEMP2125 = RX10_TEMP2123 < RX10_TEMP2124;

									if(RX10_TEMP2125)
										{

										String RX10_TEMP2126 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP2126);

										}

									final int RX10_TEMP2127 = Program.getPlaceFromDist1(RX10_TEMP2121, RX10_TEMP2123,myUniquePlacePoint);


									final int RX10_TEMP2129 = 0;


									final boolean RX10_TEMP2130 = RX10_TEMP2127 != RX10_TEMP2129;

									if(RX10_TEMP2130)
										{

										String RX10_TEMP2128 = "Bad place access for array nPart";

										throw new RuntimeException(RX10_TEMP2128);

										}

									final int RX10_TEMP2131 = Program.getRefArrayValue1int(nPart, RX10_TEMP2123,myUniquePlacePoint);


									final int X10_TEMP807 = RX10_TEMP2131;


									final int X10_TEMP808 = X10_TEMP807 - i;


									final int X10_TEMP809 = 1;


									final int i1 = X10_TEMP808 - X10_TEMP809;


									final int X10_TEMP811 = holesTotal + holesLeft;


									final int X10_TEMP812 = X10_TEMP811 - i;


									final int X10_TEMP813 = 1;


									final int i2 = X10_TEMP812 - X10_TEMP813;


									final Point2 RX10_TEMP2132 = new Point2(pl, i2,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2132.hashCode());


									final Dist2 RX10_TEMP2133 = holes.distValue;


									final Region2 RX10_TEMP2134 = RX10_TEMP2133.dReg;


									final int RX10_TEMP2135 = Program.searchPointInRegion2(RX10_TEMP2134, RX10_TEMP2132,myUniquePlacePoint);


									final int RX10_TEMP2136 = 0;


									final boolean RX10_TEMP2137 = RX10_TEMP2135 < RX10_TEMP2136;

									if(RX10_TEMP2137)
										{

										String RX10_TEMP2138 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP2138);

										}

									final int RX10_TEMP2139 = Program.getPlaceFromDist2(RX10_TEMP2133, RX10_TEMP2135,myUniquePlacePoint);


									final int RX10_TEMP2141 = 0;


									final boolean RX10_TEMP2142 = RX10_TEMP2139 != RX10_TEMP2141;

									if(RX10_TEMP2142)
										{

										String RX10_TEMP2140 = "Bad place access for array holes";

										throw new RuntimeException(RX10_TEMP2140);

										}

									final int RX10_TEMP2143 = Program.getRefArrayValue2int(holes, RX10_TEMP2135,myUniquePlacePoint);


									final int X10_TEMP817 = RX10_TEMP2143;


									final boolean X10_TEMP819 = i1 > X10_TEMP817;

									if(X10_TEMP819)
										{

										final Point2 RX10_TEMP2144 = new Point2(pl, i2,myUniquePlacePoint);
										
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2144.hashCode());


										final Dist2 RX10_TEMP2145 = holes.distValue;


										final Region2 RX10_TEMP2146 = RX10_TEMP2145.dReg;


										final int RX10_TEMP2147 = Program.searchPointInRegion2(RX10_TEMP2146, RX10_TEMP2144,myUniquePlacePoint);


										final int RX10_TEMP2148 = 0;


										final boolean RX10_TEMP2149 = RX10_TEMP2147 < RX10_TEMP2148;

										if(RX10_TEMP2149)
											{

											String RX10_TEMP2150 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP2150);

											}

										final int RX10_TEMP2151 = Program.getPlaceFromDist2(RX10_TEMP2145, RX10_TEMP2147,myUniquePlacePoint);


										final int RX10_TEMP2153 = 0;


										final boolean RX10_TEMP2154 = RX10_TEMP2151 != RX10_TEMP2153;

										if(RX10_TEMP2154)
											{

											String RX10_TEMP2152 = "Bad place access for array holes";

											throw new RuntimeException(RX10_TEMP2152);

											}

										final int RX10_TEMP2155 = Program.getRefArrayValue2int(holes, RX10_TEMP2147,myUniquePlacePoint);


										final int X10_TEMP824 = RX10_TEMP2155;


										final Point2 RX10_TEMP2156 = new Point2(pl, i1,myUniquePlacePoint);
										
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2156.hashCode());


										final Dist2 RX10_TEMP2157 = part.distValue;


										final Region2 RX10_TEMP2158 = RX10_TEMP2157.dReg;


										final int RX10_TEMP2159 = Program.searchPointInRegion2(RX10_TEMP2158, RX10_TEMP2156,myUniquePlacePoint);


										final int RX10_TEMP2160 = 0;


										final boolean RX10_TEMP2161 = RX10_TEMP2159 < RX10_TEMP2160;

										if(RX10_TEMP2161)
											{

											String RX10_TEMP2162 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP2162);

											}

										final int RX10_TEMP2163 = Program.getPlaceFromDist2(RX10_TEMP2157, RX10_TEMP2159,myUniquePlacePoint);


										final int RX10_TEMP2165 = 0;


										final boolean RX10_TEMP2166 = RX10_TEMP2163 != RX10_TEMP2165;

										if(RX10_TEMP2166)
											{

											String RX10_TEMP2164 = "Bad place access for array part";

											throw new RuntimeException(RX10_TEMP2164);

											}

										final Particle RX10_TEMP2167 = Program.getRefArrayValue2Particle(part, RX10_TEMP2159,myUniquePlacePoint);


										final Particle X10_TEMP829 = RX10_TEMP2167;


										final Particle X10_TEMP830 = X10_TEMP829;


										final Point2 RX10_TEMP2168 = new Point2(pl, X10_TEMP824,myUniquePlacePoint);
										
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2168.hashCode());


										final Dist2 RX10_TEMP2169 = part.distValue;


										final Region2 RX10_TEMP2170 = RX10_TEMP2169.dReg;


										final int RX10_TEMP2171 = Program.searchPointInRegion2(RX10_TEMP2170, RX10_TEMP2168,myUniquePlacePoint);


										final int RX10_TEMP2172 = 0;


										final boolean RX10_TEMP2173 = RX10_TEMP2171 < RX10_TEMP2172;

										if(RX10_TEMP2173)
											{

											String RX10_TEMP2174 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP2174);

											}

										final int RX10_TEMP2175 = Program.getPlaceFromDist2(RX10_TEMP2169, RX10_TEMP2171,myUniquePlacePoint);


										final int RX10_TEMP2177 = 0;


										final boolean RX10_TEMP2178 = RX10_TEMP2175 != RX10_TEMP2177;

										if(RX10_TEMP2178)
											{

											String RX10_TEMP2176 = "Bad place access for array part";

											throw new RuntimeException(RX10_TEMP2176);

											}
										Program.setRefArrayValue2Particle(part, RX10_TEMP2171, X10_TEMP830,myUniquePlacePoint);
										}
									}
								else
									{

									final Point1 RX10_TEMP2179 = new Point1(pl,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2179.hashCode());


									final Dist1 RX10_TEMP2180 = nPart.distValue;


									final Region1 RX10_TEMP2181 = RX10_TEMP2180.dReg;


									final int RX10_TEMP2182 = Program.searchPointInRegion1(RX10_TEMP2181, RX10_TEMP2179,myUniquePlacePoint);


									final int RX10_TEMP2183 = 0;


									final boolean RX10_TEMP2184 = RX10_TEMP2182 < RX10_TEMP2183;

									if(RX10_TEMP2184)
										{

										String RX10_TEMP2185 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP2185);

										}

									final int RX10_TEMP2186 = Program.getPlaceFromDist1(RX10_TEMP2180, RX10_TEMP2182,myUniquePlacePoint);


									final int RX10_TEMP2188 = 0;


									final boolean RX10_TEMP2189 = RX10_TEMP2186 != RX10_TEMP2188;

									if(RX10_TEMP2189)
										{

										String RX10_TEMP2187 = "Bad place access for array nPart";

										throw new RuntimeException(RX10_TEMP2187);

										}

									final int RX10_TEMP2190 = Program.getRefArrayValue1int(nPart, RX10_TEMP2182,myUniquePlacePoint);


									final int X10_TEMP833 = RX10_TEMP2190;


									final int X10_TEMP835 = i + X10_TEMP833;


									final int X10_TEMP838 = i + holesTotal;


									final Point2 RX10_TEMP2191 = new Point2(pl, X10_TEMP838,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2191.hashCode());


									final Dist2 RX10_TEMP2192 = rBufferR.distValue;


									final Region2 RX10_TEMP2193 = RX10_TEMP2192.dReg;


									final int RX10_TEMP2194 = Program.searchPointInRegion2(RX10_TEMP2193, RX10_TEMP2191,myUniquePlacePoint);


									final int RX10_TEMP2195 = 0;


									final boolean RX10_TEMP2196 = RX10_TEMP2194 < RX10_TEMP2195;

									if(RX10_TEMP2196)
										{

										String RX10_TEMP2197 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP2197);

										}

									final int RX10_TEMP2198 = Program.getPlaceFromDist2(RX10_TEMP2192, RX10_TEMP2194,myUniquePlacePoint);


									final int RX10_TEMP2200 = 0;


									final boolean RX10_TEMP2201 = RX10_TEMP2198 != RX10_TEMP2200;

									if(RX10_TEMP2201)
										{

										String RX10_TEMP2199 = "Bad place access for array rBufferR";

										throw new RuntimeException(RX10_TEMP2199);

										}

									final Particle RX10_TEMP2202 = Program.getRefArrayValue2Particle(rBufferR, RX10_TEMP2194,myUniquePlacePoint);


									final Particle X10_TEMP841 = RX10_TEMP2202;


									final Particle X10_TEMP842 = X10_TEMP841;


									final Point2 RX10_TEMP2203 = new Point2(pl, X10_TEMP835,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2203.hashCode());


									final Dist2 RX10_TEMP2204 = part.distValue;


									final Region2 RX10_TEMP2205 = RX10_TEMP2204.dReg;


									final int RX10_TEMP2206 = Program.searchPointInRegion2(RX10_TEMP2205, RX10_TEMP2203,myUniquePlacePoint);


									final int RX10_TEMP2207 = 0;


									final boolean RX10_TEMP2208 = RX10_TEMP2206 < RX10_TEMP2207;

									if(RX10_TEMP2208)
										{

										String RX10_TEMP2209 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP2209);

										}

									final int RX10_TEMP2210 = Program.getPlaceFromDist2(RX10_TEMP2204, RX10_TEMP2206,myUniquePlacePoint);


									final int RX10_TEMP2212 = 0;


									final boolean RX10_TEMP2213 = RX10_TEMP2210 != RX10_TEMP2212;

									if(RX10_TEMP2213)
										{

										String RX10_TEMP2211 = "Bad place access for array part";

										throw new RuntimeException(RX10_TEMP2211);

										}
									Program.setRefArrayValue2Particle(part, RX10_TEMP2206, X10_TEMP842,myUniquePlacePoint);
									}
 								}

							final int X10_TEMP843 = 0;


							final boolean X10_TEMP845 = holesLeft > X10_TEMP843;

							if(X10_TEMP845)
								{

								final Point1 RX10_TEMP2214 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2214.hashCode());


								final Dist1 RX10_TEMP2215 = nPart.distValue;


								final Region1 RX10_TEMP2216 = RX10_TEMP2215.dReg;


								final int RX10_TEMP2217 = Program.searchPointInRegion1(RX10_TEMP2216, RX10_TEMP2214,myUniquePlacePoint);


								final int RX10_TEMP2218 = 0;


								final boolean RX10_TEMP2219 = RX10_TEMP2217 < RX10_TEMP2218;

								if(RX10_TEMP2219)
									{

									String RX10_TEMP2220 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2220);

									}

								final int RX10_TEMP2221 = Program.getPlaceFromDist1(RX10_TEMP2215, RX10_TEMP2217,myUniquePlacePoint);


								final int RX10_TEMP2223 = 0;


								final boolean RX10_TEMP2224 = RX10_TEMP2221 != RX10_TEMP2223;

								if(RX10_TEMP2224)
									{

									String RX10_TEMP2222 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP2222);

									}

								final int RX10_TEMP2225 = Program.getRefArrayValue1int(nPart, RX10_TEMP2217,myUniquePlacePoint);


								final int X10_TEMP849 = RX10_TEMP2225;


								final Point1 RX10_TEMP2226 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2226.hashCode());


								final Dist1 RX10_TEMP2227 = inRt.distValue;


								final Region1 RX10_TEMP2228 = RX10_TEMP2227.dReg;


								final int RX10_TEMP2229 = Program.searchPointInRegion1(RX10_TEMP2228, RX10_TEMP2226,myUniquePlacePoint);


								final int RX10_TEMP2230 = 0;


								final boolean RX10_TEMP2231 = RX10_TEMP2229 < RX10_TEMP2230;

								if(RX10_TEMP2231)
									{

									String RX10_TEMP2232 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2232);

									}

								final int RX10_TEMP2233 = Program.getPlaceFromDist1(RX10_TEMP2227, RX10_TEMP2229,myUniquePlacePoint);


								final int RX10_TEMP2235 = 0;


								final boolean RX10_TEMP2236 = RX10_TEMP2233 != RX10_TEMP2235;

								if(RX10_TEMP2236)
									{

									String RX10_TEMP2234 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP2234);

									}

								final int RX10_TEMP2237 = Program.getRefArrayValue1int(inRt, RX10_TEMP2229,myUniquePlacePoint);


								final int X10_TEMP850 = RX10_TEMP2237;


								final int X10_TEMP853 = X10_TEMP849 - X10_TEMP850;


								final int X10_TEMP854 = X10_TEMP853;


								final Point1 RX10_TEMP2238 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2238.hashCode());


								final Dist1 RX10_TEMP2239 = nPart.distValue;


								final Region1 RX10_TEMP2240 = RX10_TEMP2239.dReg;


								final int RX10_TEMP2241 = Program.searchPointInRegion1(RX10_TEMP2240, RX10_TEMP2238,myUniquePlacePoint);


								final int RX10_TEMP2242 = 0;


								final boolean RX10_TEMP2243 = RX10_TEMP2241 < RX10_TEMP2242;

								if(RX10_TEMP2243)
									{

									String RX10_TEMP2244 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP2244);

									}

								final int RX10_TEMP2245 = Program.getPlaceFromDist1(RX10_TEMP2239, RX10_TEMP2241,myUniquePlacePoint);


								final int RX10_TEMP2247 = 0;


								final boolean RX10_TEMP2248 = RX10_TEMP2245 != RX10_TEMP2247;

								if(RX10_TEMP2248)
									{

									String RX10_TEMP2246 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP2246);

									}
								Program.setRefArrayValue1int(nPart, RX10_TEMP2241, X10_TEMP854,myUniquePlacePoint);
								}
							else
								{

								final Point1 RX10_TEMP2249 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2249.hashCode());


								final Dist1 RX10_TEMP2250 = nPart.distValue;


								final Region1 RX10_TEMP2251 = RX10_TEMP2250.dReg;


								final int RX10_TEMP2252 = Program.searchPointInRegion1(RX10_TEMP2251, RX10_TEMP2249,myUniquePlacePoint);


								final int RX10_TEMP2253 = 0;


								final boolean RX10_TEMP2254 = RX10_TEMP2252 < RX10_TEMP2253;

								if(RX10_TEMP2254)
									{

									String RX10_TEMP2255 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2255);

									}

								final int RX10_TEMP2256 = Program.getPlaceFromDist1(RX10_TEMP2250, RX10_TEMP2252,myUniquePlacePoint);


								final int RX10_TEMP2258 = 0;


								final boolean RX10_TEMP2259 = RX10_TEMP2256 != RX10_TEMP2258;

								if(RX10_TEMP2259)
									{

									String RX10_TEMP2257 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP2257);

									}

								final int RX10_TEMP2260 = Program.getRefArrayValue1int(nPart, RX10_TEMP2252,myUniquePlacePoint);


								final int X10_TEMP858 = RX10_TEMP2260;


								final Point1 RX10_TEMP2261 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2261.hashCode());


								final Dist1 RX10_TEMP2262 = inRt.distValue;


								final Region1 RX10_TEMP2263 = RX10_TEMP2262.dReg;


								final int RX10_TEMP2264 = Program.searchPointInRegion1(RX10_TEMP2263, RX10_TEMP2261,myUniquePlacePoint);


								final int RX10_TEMP2265 = 0;


								final boolean RX10_TEMP2266 = RX10_TEMP2264 < RX10_TEMP2265;

								if(RX10_TEMP2266)
									{

									String RX10_TEMP2267 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP2267);

									}

								final int RX10_TEMP2268 = Program.getPlaceFromDist1(RX10_TEMP2262, RX10_TEMP2264,myUniquePlacePoint);


								final int RX10_TEMP2270 = 0;


								final boolean RX10_TEMP2271 = RX10_TEMP2268 != RX10_TEMP2270;

								if(RX10_TEMP2271)
									{

									String RX10_TEMP2269 = "Bad place access for array inRt";

									throw new RuntimeException(RX10_TEMP2269);

									}

								final int RX10_TEMP2272 = Program.getRefArrayValue1int(inRt, RX10_TEMP2264,myUniquePlacePoint);


								final int X10_TEMP859 = RX10_TEMP2272;


								final int X10_TEMP862 = X10_TEMP858 + X10_TEMP859;


								final int X10_TEMP863 = X10_TEMP862;


								final Point1 RX10_TEMP2273 = new Point1(pl,myUniquePlacePoint);
								
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2273.hashCode());


								final Dist1 RX10_TEMP2274 = nPart.distValue;


								final Region1 RX10_TEMP2275 = RX10_TEMP2274.dReg;


								final int RX10_TEMP2276 = Program.searchPointInRegion1(RX10_TEMP2275, RX10_TEMP2273,myUniquePlacePoint);


								final int RX10_TEMP2277 = 0;


								final boolean RX10_TEMP2278 = RX10_TEMP2276 < RX10_TEMP2277;

								if(RX10_TEMP2278)
									{

									String RX10_TEMP2279 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP2279);

									}

								final int RX10_TEMP2280 = Program.getPlaceFromDist1(RX10_TEMP2274, RX10_TEMP2276,myUniquePlacePoint);


								final int RX10_TEMP2282 = 0;


								final boolean RX10_TEMP2283 = RX10_TEMP2280 != RX10_TEMP2282;

								if(RX10_TEMP2283)
									{

									String RX10_TEMP2281 = "Bad place access for array nPart";

									throw new RuntimeException(RX10_TEMP2281);

									}
								Program.setRefArrayValue1int(nPart, RX10_TEMP2276, X10_TEMP863,myUniquePlacePoint);
								}
 
							final int X10_TEMP867 = 0;


							final int X10_TEMP868 = X10_TEMP867;


							final Point1 RX10_TEMP2284 = new Point1(pl,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2284.hashCode());


							final Dist1 RX10_TEMP2285 = nSent.distValue;


							final Region1 RX10_TEMP2286 = RX10_TEMP2285.dReg;


							final int RX10_TEMP2287 = Program.searchPointInRegion1(RX10_TEMP2286, RX10_TEMP2284,myUniquePlacePoint);


							final int RX10_TEMP2288 = 0;


							final boolean RX10_TEMP2289 = RX10_TEMP2287 < RX10_TEMP2288;

							if(RX10_TEMP2289)
								{

								String RX10_TEMP2290 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP2290);

								}

							final int RX10_TEMP2291 = Program.getPlaceFromDist1(RX10_TEMP2285, RX10_TEMP2287,myUniquePlacePoint);


							final int RX10_TEMP2293 = 0;


							final boolean RX10_TEMP2294 = RX10_TEMP2291 != RX10_TEMP2293;

							if(RX10_TEMP2294)
								{

								String RX10_TEMP2292 = "Bad place access for array nSent";

								throw new RuntimeException(RX10_TEMP2292);

								}
							Program.setRefArrayValue1int(nSent, RX10_TEMP2287, X10_TEMP868,myUniquePlacePoint);
							}
						}
					}

				final int X10_TEMP870 = 4;


				final int X10_TEMP872 = 4;


				final Point1 RX10_TEMP2295 = new Point1(X10_TEMP872,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2295.hashCode());


				final Dist1 RX10_TEMP2296 = info.distValue;


				final Region1 RX10_TEMP2297 = RX10_TEMP2296.dReg;


				final int RX10_TEMP2298 = Program.searchPointInRegion1(RX10_TEMP2297, RX10_TEMP2295,myUniquePlacePoint);


				final int RX10_TEMP2299 = 0;


				final boolean RX10_TEMP2300 = RX10_TEMP2298 < RX10_TEMP2299;

				if(RX10_TEMP2300)
					{

					String RX10_TEMP2301 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP2301);

					}

				final int RX10_TEMP2302 = Program.getPlaceFromDist1(RX10_TEMP2296, RX10_TEMP2298,myUniquePlacePoint);


				final int RX10_TEMP2304 = 0;


				final boolean RX10_TEMP2305 = RX10_TEMP2302 != RX10_TEMP2304;

				if(RX10_TEMP2305)
					{

					String RX10_TEMP2303 = "Bad place access for array info";

					throw new RuntimeException(RX10_TEMP2303);

					}

				final int RX10_TEMP2306 = Program.getRefArrayValue1int(info, RX10_TEMP2298,myUniquePlacePoint);


				final int X10_TEMP875 = RX10_TEMP2306;


				final int X10_TEMP878 = Program.X10Util_maxInt(X10_TEMP875, mter,myUniquePlacePoint);


				final int X10_TEMP879 = X10_TEMP878;


				final Point1 RX10_TEMP2307 = new Point1(X10_TEMP870,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2307.hashCode());


				final Dist1 RX10_TEMP2308 = info.distValue;


				final Region1 RX10_TEMP2309 = RX10_TEMP2308.dReg;


				final int RX10_TEMP2310 = Program.searchPointInRegion1(RX10_TEMP2309, RX10_TEMP2307,myUniquePlacePoint);


				final int RX10_TEMP2311 = 0;


				final boolean RX10_TEMP2312 = RX10_TEMP2310 < RX10_TEMP2311;

				if(RX10_TEMP2312)
					{

					String RX10_TEMP2313 = "Array index out of bounds";

					throw new RuntimeException(RX10_TEMP2313);

					}

				final int RX10_TEMP2314 = Program.getPlaceFromDist1(RX10_TEMP2308, RX10_TEMP2310,myUniquePlacePoint);


				final int RX10_TEMP2316 = 0;


				final boolean RX10_TEMP2317 = RX10_TEMP2314 != RX10_TEMP2316;

				if(RX10_TEMP2317)
					{

					String RX10_TEMP2315 = "Bad place access for array info";

					throw new RuntimeException(RX10_TEMP2315);

					}
				Program.setRefArrayValue1int(info, RX10_TEMP2310, X10_TEMP879,myUniquePlacePoint);

				final int X10_TEMP881 = 1;


				final Point1 RX10_TEMP2318 = new Point1(X10_TEMP881,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2318.hashCode());


				final Dist1 RX10_TEMP2319 = ibflg.distValue;


				final Region1 RX10_TEMP2320 = RX10_TEMP2319.dReg;


				final int RX10_TEMP2321 = Program.searchPointInRegion1(RX10_TEMP2320, RX10_TEMP2318,myUniquePlacePoint);


				final int RX10_TEMP2322 = 0;


				final boolean RX10_TEMP2323 = RX10_TEMP2321 < RX10_TEMP2322;

				if(RX10_TEMP2323)
					{

					String RX10_TEMP2324 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP2324);

					}

				final int RX10_TEMP2325 = Program.getPlaceFromDist1(RX10_TEMP2319, RX10_TEMP2321,myUniquePlacePoint);


				final int RX10_TEMP2327 = 0;


				final boolean RX10_TEMP2328 = RX10_TEMP2325 != RX10_TEMP2327;

				if(RX10_TEMP2328)
					{

					String RX10_TEMP2326 = "Bad place access for array ibflg";

					throw new RuntimeException(RX10_TEMP2326);

					}

				final int RX10_TEMP2329 = Program.getRefArrayValue1int(ibflg, RX10_TEMP2321,myUniquePlacePoint);


				final int X10_TEMP882 = RX10_TEMP2329;


				final int X10_TEMP883 = 0;


				final boolean X10_TEMP885 = X10_TEMP882 > X10_TEMP883;

				if(X10_TEMP885)
					{

					final String X10_TEMP886 = "Info: particles being passed";


					final String X10_TEMP887 = " further = ";


					final String X10_TEMP890 = X10_TEMP886 + X10_TEMP887;


					final int X10_TEMP889 = 1;


					final Point1 RX10_TEMP2330 = new Point1(X10_TEMP889,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2330.hashCode());


					final Dist1 RX10_TEMP2331 = ibflg.distValue;


					final Region1 RX10_TEMP2332 = RX10_TEMP2331.dReg;


					final int RX10_TEMP2333 = Program.searchPointInRegion1(RX10_TEMP2332, RX10_TEMP2330,myUniquePlacePoint);


					final int RX10_TEMP2334 = 0;


					final boolean RX10_TEMP2335 = RX10_TEMP2333 < RX10_TEMP2334;

					if(RX10_TEMP2335)
						{

						String RX10_TEMP2336 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP2336);

						}

					final int RX10_TEMP2337 = Program.getPlaceFromDist1(RX10_TEMP2331, RX10_TEMP2333,myUniquePlacePoint);


					final int RX10_TEMP2339 = 0;


					final boolean RX10_TEMP2340 = RX10_TEMP2337 != RX10_TEMP2339;

					if(RX10_TEMP2340)
						{

						String RX10_TEMP2338 = "Bad place access for array ibflg";

						throw new RuntimeException(RX10_TEMP2338);

						}

					final int RX10_TEMP2341 = Program.getRefArrayValue1int(ibflg, RX10_TEMP2333,myUniquePlacePoint);


					final int X10_TEMP891 = RX10_TEMP2341;


					final String X10_TEMP893 = X10_TEMP890 + X10_TEMP891;

					System.err.println(X10_TEMP893);

					final int X10_TEMP895 = 2;


					final Point1 RX10_TEMP2342 = new Point1(X10_TEMP895,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2342.hashCode());


					final Dist1 RX10_TEMP2343 = ibflg.distValue;


					final Region1 RX10_TEMP2344 = RX10_TEMP2343.dReg;


					final int RX10_TEMP2345 = Program.searchPointInRegion1(RX10_TEMP2344, RX10_TEMP2342,myUniquePlacePoint);


					final int RX10_TEMP2346 = 0;


					final boolean RX10_TEMP2347 = RX10_TEMP2345 < RX10_TEMP2346;

					if(RX10_TEMP2347)
						{

						String RX10_TEMP2348 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP2348);

						}

					final int RX10_TEMP2349 = Program.getPlaceFromDist1(RX10_TEMP2343, RX10_TEMP2345,myUniquePlacePoint);


					final int RX10_TEMP2351 = 0;


					final boolean RX10_TEMP2352 = RX10_TEMP2349 != RX10_TEMP2351;

					if(RX10_TEMP2352)
						{

						String RX10_TEMP2350 = "Bad place access for array ibflg";

						throw new RuntimeException(RX10_TEMP2350);

						}

					final int RX10_TEMP2353 = Program.getRefArrayValue1int(ibflg, RX10_TEMP2345,myUniquePlacePoint);


					final int X10_TEMP896 = RX10_TEMP2353;


					final int X10_TEMP897 = 0;


					final boolean X10_TEMP899 = X10_TEMP896 > X10_TEMP897;

					if(X10_TEMP899)
						{

						final int X10_TEMP901 = 2;


						final int X10_TEMP904 = 1;


						final int X10_TEMP905 = X10_TEMP904;


						final Point1 RX10_TEMP2354 = new Point1(X10_TEMP901,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2354.hashCode());


						final Dist1 RX10_TEMP2355 = ibflg.distValue;


						final Region1 RX10_TEMP2356 = RX10_TEMP2355.dReg;


						final int RX10_TEMP2357 = Program.searchPointInRegion1(RX10_TEMP2356, RX10_TEMP2354,myUniquePlacePoint);


						final int RX10_TEMP2358 = 0;


						final boolean RX10_TEMP2359 = RX10_TEMP2357 < RX10_TEMP2358;

						if(RX10_TEMP2359)
							{

							String RX10_TEMP2360 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP2360);

							}

						final int RX10_TEMP2361 = Program.getPlaceFromDist1(RX10_TEMP2355, RX10_TEMP2357,myUniquePlacePoint);


						final int RX10_TEMP2363 = 0;


						final boolean RX10_TEMP2364 = RX10_TEMP2361 != RX10_TEMP2363;

						if(RX10_TEMP2364)
							{

							String RX10_TEMP2362 = "Bad place access for array ibflg";

							throw new RuntimeException(RX10_TEMP2362);

							}
						Program.setRefArrayValue1int(ibflg, RX10_TEMP2357, X10_TEMP905,myUniquePlacePoint);
						}

					final boolean X10_TEMP907 = iter >= ITER_MAX;

					if(X10_TEMP907)
						{

						final int X10_TEMP908 = 2;


						final int X10_TEMP909 = 2;


						final int X10_TEMP910 = X10_TEMP908 / X10_TEMP909;


						final int X10_TEMP912 = iter - X10_TEMP910;


						final int X10_TEMP914 = X10_TEMP912;


						final int X10_TEMP915 = 0;


						final int X10_TEMP917 = X10_TEMP915 - X10_TEMP914;


						err = X10_TEMP917;


						final String X10_TEMP918 = "Iteration overflow, ";


						final String X10_TEMP919 = "iter = ";


						final String X10_TEMP920 = X10_TEMP918 + X10_TEMP919;


						final String X10_TEMP922 = X10_TEMP920 + err;

						System.err.println(X10_TEMP922);

						final int X10_TEMP924 = 0;


						final int X10_TEMP927 = err;


						final Point1 RX10_TEMP2365 = new Point1(X10_TEMP924,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2365.hashCode());


						final Dist1 RX10_TEMP2366 = info.distValue;


						final Region1 RX10_TEMP2367 = RX10_TEMP2366.dReg;


						final int RX10_TEMP2368 = Program.searchPointInRegion1(RX10_TEMP2367, RX10_TEMP2365,myUniquePlacePoint);


						final int RX10_TEMP2369 = 0;


						final boolean RX10_TEMP2370 = RX10_TEMP2368 < RX10_TEMP2369;

						if(RX10_TEMP2370)
							{

							String RX10_TEMP2371 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP2371);

							}

						final int RX10_TEMP2372 = Program.getPlaceFromDist1(RX10_TEMP2366, RX10_TEMP2368,myUniquePlacePoint);


						final int RX10_TEMP2374 = 0;


						final boolean RX10_TEMP2375 = RX10_TEMP2372 != RX10_TEMP2374;

						if(RX10_TEMP2375)
							{

							String RX10_TEMP2373 = "Bad place access for array info";

							throw new RuntimeException(RX10_TEMP2373);

							}
						Program.setRefArrayValue1int(info, RX10_TEMP2368, X10_TEMP927,myUniquePlacePoint);

						final boolean X10_TEMP929 = true;


						doneInner = X10_TEMP929;


						final boolean X10_TEMP931 = true;


						doneOuter = X10_TEMP931;

						}
					}
				else
					{

					final boolean X10_TEMP933 = true;


					doneInner = X10_TEMP933;

					}
 
				X10_TEMP265 = ! doneInner;

				}
			
 while(X10_TEMP265);
			final boolean X10_TEMP939 = ! doneOuter;


			final int X10_TEMP936 = 2;


			final Point1 RX10_TEMP2376 = new Point1(X10_TEMP936,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2376.hashCode());


			final Dist1 RX10_TEMP2377 = ibflg.distValue;


			final Region1 RX10_TEMP2378 = RX10_TEMP2377.dReg;


			final int RX10_TEMP2379 = Program.searchPointInRegion1(RX10_TEMP2378, RX10_TEMP2376,myUniquePlacePoint);


			final int RX10_TEMP2380 = 0;


			final boolean RX10_TEMP2381 = RX10_TEMP2379 < RX10_TEMP2380;

			if(RX10_TEMP2381)
				{

				String RX10_TEMP2382 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP2382);

				}

			final int RX10_TEMP2383 = Program.getPlaceFromDist1(RX10_TEMP2377, RX10_TEMP2379,myUniquePlacePoint);


			final int RX10_TEMP2385 = 0;


			final boolean RX10_TEMP2386 = RX10_TEMP2383 != RX10_TEMP2385;

			if(RX10_TEMP2386)
				{

				String RX10_TEMP2384 = "Bad place access for array ibflg";

				throw new RuntimeException(RX10_TEMP2384);

				}

			final int RX10_TEMP2387 = Program.getRefArrayValue1int(ibflg, RX10_TEMP2379,myUniquePlacePoint);


			final int X10_TEMP937 = RX10_TEMP2387;


			final int X10_TEMP938 = 0;


			final boolean X10_TEMP940 = X10_TEMP937 > X10_TEMP938;


			final boolean X10_TEMP942 = X10_TEMP939 && X10_TEMP940;

			if(X10_TEMP942)
				{

				final int X10_TEMP943 = nter;


				final int X10_TEMP944 = 1;


				nter = nter + X10_TEMP944;


				final int X10_TEMP946 = 3;


				final int X10_TEMP949 = nter;


				final Point1 RX10_TEMP2388 = new Point1(X10_TEMP946,myUniquePlacePoint);
				
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2388.hashCode());


				final Dist1 RX10_TEMP2389 = info.distValue;


				final Region1 RX10_TEMP2390 = RX10_TEMP2389.dReg;


				final int RX10_TEMP2391 = Program.searchPointInRegion1(RX10_TEMP2390, RX10_TEMP2388,myUniquePlacePoint);


				final int RX10_TEMP2392 = 0;


				final boolean RX10_TEMP2393 = RX10_TEMP2391 < RX10_TEMP2392;

				if(RX10_TEMP2393)
					{

					String RX10_TEMP2394 = "Array index out of bounds";

					throw new RuntimeException(RX10_TEMP2394);

					}

				final int RX10_TEMP2395 = Program.getPlaceFromDist1(RX10_TEMP2389, RX10_TEMP2391,myUniquePlacePoint);


				final int RX10_TEMP2397 = 0;


				final boolean RX10_TEMP2398 = RX10_TEMP2395 != RX10_TEMP2397;

				if(RX10_TEMP2398)
					{

					String RX10_TEMP2396 = "Bad place access for array info";

					throw new RuntimeException(RX10_TEMP2396);

					}
				Program.setRefArrayValue1int(info, RX10_TEMP2391, X10_TEMP949,myUniquePlacePoint);
				}
			else
				{

				final boolean X10_TEMP951 = true;


				doneOuter = X10_TEMP951;

				}
 
			X10_TEMP123 = ! doneOuter;

			}
		
 while(X10_TEMP123);
		final int X10_TEMP954 = 5;


		final int X10_TEMP957 = Program.intrefArraySum1(nPart,myUniquePlacePoint);


		final int X10_TEMP958 = X10_TEMP957;


		final Point1 RX10_TEMP2399 = new Point1(X10_TEMP954,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2399.hashCode());


		final Dist1 RX10_TEMP2400 = info.distValue;


		final Region1 RX10_TEMP2401 = RX10_TEMP2400.dReg;


		final int RX10_TEMP2402 = Program.searchPointInRegion1(RX10_TEMP2401, RX10_TEMP2399,myUniquePlacePoint);


		final int RX10_TEMP2403 = 0;


		final boolean RX10_TEMP2404 = RX10_TEMP2402 < RX10_TEMP2403;

		if(RX10_TEMP2404)
			{

			String RX10_TEMP2405 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP2405);

			}

		final int RX10_TEMP2406 = Program.getPlaceFromDist1(RX10_TEMP2400, RX10_TEMP2402,myUniquePlacePoint);


		final int RX10_TEMP2408 = 0;


		final boolean RX10_TEMP2409 = RX10_TEMP2406 != RX10_TEMP2408;

		if(RX10_TEMP2409)
			{

			String RX10_TEMP2407 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP2407);

			}
		Program.setRefArrayValue1int(info, RX10_TEMP2402, X10_TEMP958,myUniquePlacePoint);

		final int X10_TEMP960 = 6;


		final int X10_TEMP963 = Program.intrefArraySum1(nPartOld,myUniquePlacePoint);


		final int X10_TEMP964 = X10_TEMP963;


		final Point1 RX10_TEMP2410 = new Point1(X10_TEMP960,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2410.hashCode());


		final Dist1 RX10_TEMP2411 = info.distValue;


		final Region1 RX10_TEMP2412 = RX10_TEMP2411.dReg;


		final int RX10_TEMP2413 = Program.searchPointInRegion1(RX10_TEMP2412, RX10_TEMP2410,myUniquePlacePoint);


		final int RX10_TEMP2414 = 0;


		final boolean RX10_TEMP2415 = RX10_TEMP2413 < RX10_TEMP2414;

		if(RX10_TEMP2415)
			{

			String RX10_TEMP2416 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP2416);

			}

		final int RX10_TEMP2417 = Program.getPlaceFromDist1(RX10_TEMP2411, RX10_TEMP2413,myUniquePlacePoint);


		final int RX10_TEMP2419 = 0;


		final boolean RX10_TEMP2420 = RX10_TEMP2417 != RX10_TEMP2419;

		if(RX10_TEMP2420)
			{

			String RX10_TEMP2418 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP2418);

			}
		Program.setRefArrayValue1int(info, RX10_TEMP2413, X10_TEMP964,myUniquePlacePoint);

		final int X10_TEMP966 = 5;


		final Point1 RX10_TEMP2421 = new Point1(X10_TEMP966,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2421.hashCode());


		final Dist1 RX10_TEMP2422 = info.distValue;


		final Region1 RX10_TEMP2423 = RX10_TEMP2422.dReg;


		final int RX10_TEMP2424 = Program.searchPointInRegion1(RX10_TEMP2423, RX10_TEMP2421,myUniquePlacePoint);


		final int RX10_TEMP2425 = 0;


		final boolean RX10_TEMP2426 = RX10_TEMP2424 < RX10_TEMP2425;

		if(RX10_TEMP2426)
			{

			String RX10_TEMP2427 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP2427);

			}

		final int RX10_TEMP2428 = Program.getPlaceFromDist1(RX10_TEMP2422, RX10_TEMP2424,myUniquePlacePoint);


		final int RX10_TEMP2430 = 0;


		final boolean RX10_TEMP2431 = RX10_TEMP2428 != RX10_TEMP2430;

		if(RX10_TEMP2431)
			{

			String RX10_TEMP2429 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP2429);

			}

		final int RX10_TEMP2432 = Program.getRefArrayValue1int(info, RX10_TEMP2424,myUniquePlacePoint);


		final int X10_TEMP969 = RX10_TEMP2432;


		final int X10_TEMP968 = 6;


		final Point1 RX10_TEMP2433 = new Point1(X10_TEMP968,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2433.hashCode());


		final Dist1 RX10_TEMP2434 = info.distValue;


		final Region1 RX10_TEMP2435 = RX10_TEMP2434.dReg;


		final int RX10_TEMP2436 = Program.searchPointInRegion1(RX10_TEMP2435, RX10_TEMP2433,myUniquePlacePoint);


		final int RX10_TEMP2437 = 0;


		final boolean RX10_TEMP2438 = RX10_TEMP2436 < RX10_TEMP2437;

		if(RX10_TEMP2438)
			{

			String RX10_TEMP2439 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP2439);

			}

		final int RX10_TEMP2440 = Program.getPlaceFromDist1(RX10_TEMP2434, RX10_TEMP2436,myUniquePlacePoint);


		final int RX10_TEMP2442 = 0;


		final boolean RX10_TEMP2443 = RX10_TEMP2440 != RX10_TEMP2442;

		if(RX10_TEMP2443)
			{

			String RX10_TEMP2441 = "Bad place access for array info";

			throw new RuntimeException(RX10_TEMP2441);

			}

		final int RX10_TEMP2444 = Program.getRefArrayValue1int(info, RX10_TEMP2436,myUniquePlacePoint);


		final int X10_TEMP970 = RX10_TEMP2444;


		final boolean X10_TEMP972 = X10_TEMP969 != X10_TEMP970;

		if(X10_TEMP972)
			{

			final String X10_TEMP975 = "Particle number error, old/new = ";


			final int X10_TEMP974 = 0;


			final Point1 RX10_TEMP2445 = new Point1(X10_TEMP974,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2445.hashCode());


			final Dist1 RX10_TEMP2446 = info.distValue;


			final Region1 RX10_TEMP2447 = RX10_TEMP2446.dReg;


			final int RX10_TEMP2448 = Program.searchPointInRegion1(RX10_TEMP2447, RX10_TEMP2445,myUniquePlacePoint);


			final int RX10_TEMP2449 = 0;


			final boolean RX10_TEMP2450 = RX10_TEMP2448 < RX10_TEMP2449;

			if(RX10_TEMP2450)
				{

				String RX10_TEMP2451 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP2451);

				}

			final int RX10_TEMP2452 = Program.getPlaceFromDist1(RX10_TEMP2446, RX10_TEMP2448,myUniquePlacePoint);


			final int RX10_TEMP2454 = 0;


			final boolean RX10_TEMP2455 = RX10_TEMP2452 != RX10_TEMP2454;

			if(RX10_TEMP2455)
				{

				String RX10_TEMP2453 = "Bad place access for array info";

				throw new RuntimeException(RX10_TEMP2453);

				}

			final int RX10_TEMP2456 = Program.getRefArrayValue1int(info, RX10_TEMP2448,myUniquePlacePoint);


			final int X10_TEMP976 = RX10_TEMP2456;


			final String X10_TEMP977 = X10_TEMP975 + X10_TEMP976;


			final String X10_TEMP978 = " ";


			final String X10_TEMP981 = X10_TEMP977 + X10_TEMP978;


			final int X10_TEMP980 = 1;


			final Point1 RX10_TEMP2457 = new Point1(X10_TEMP980,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2457.hashCode());


			final Dist1 RX10_TEMP2458 = info.distValue;


			final Region1 RX10_TEMP2459 = RX10_TEMP2458.dReg;


			final int RX10_TEMP2460 = Program.searchPointInRegion1(RX10_TEMP2459, RX10_TEMP2457,myUniquePlacePoint);


			final int RX10_TEMP2461 = 0;


			final boolean RX10_TEMP2462 = RX10_TEMP2460 < RX10_TEMP2461;

			if(RX10_TEMP2462)
				{

				String RX10_TEMP2463 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP2463);

				}

			final int RX10_TEMP2464 = Program.getPlaceFromDist1(RX10_TEMP2458, RX10_TEMP2460,myUniquePlacePoint);


			final int RX10_TEMP2466 = 0;


			final boolean RX10_TEMP2467 = RX10_TEMP2464 != RX10_TEMP2466;

			if(RX10_TEMP2467)
				{

				String RX10_TEMP2465 = "Bad place access for array info";

				throw new RuntimeException(RX10_TEMP2465);

				}

			final int RX10_TEMP2468 = Program.getRefArrayValue1int(info, RX10_TEMP2460,myUniquePlacePoint);


			final int X10_TEMP982 = RX10_TEMP2468;


			final String X10_TEMP984 = X10_TEMP981 + X10_TEMP982;

			System.err.println(X10_TEMP984);

			final int X10_TEMP986 = 0;


			final int X10_TEMP989 = 1;


			final int X10_TEMP990 = X10_TEMP989;


			final Point1 RX10_TEMP2469 = new Point1(X10_TEMP986,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP2469.hashCode());


			final Dist1 RX10_TEMP2470 = info.distValue;


			final Region1 RX10_TEMP2471 = RX10_TEMP2470.dReg;


			final int RX10_TEMP2472 = Program.searchPointInRegion1(RX10_TEMP2471, RX10_TEMP2469,myUniquePlacePoint);


			final int RX10_TEMP2473 = 0;


			final boolean RX10_TEMP2474 = RX10_TEMP2472 < RX10_TEMP2473;

			if(RX10_TEMP2474)
				{

				String RX10_TEMP2475 = "Array index out of bounds";

				throw new RuntimeException(RX10_TEMP2475);

				}

			final int RX10_TEMP2476 = Program.getPlaceFromDist1(RX10_TEMP2470, RX10_TEMP2472,myUniquePlacePoint);


			final int RX10_TEMP2478 = 0;


			final boolean RX10_TEMP2479 = RX10_TEMP2476 != RX10_TEMP2478;

			if(RX10_TEMP2479)
				{

				String RX10_TEMP2477 = "Bad place access for array info";

				throw new RuntimeException(RX10_TEMP2477);

				}
			Program.setRefArrayValue1int(info, RX10_TEMP2472, X10_TEMP990,myUniquePlacePoint);
			}

		final int X10_TEMP991 = 0;


		final boolean X10_TEMP993 = nter > X10_TEMP991;

		if(X10_TEMP993)
			{

			final String X10_TEMP994 = "Info: ";


			final String X10_TEMP995 = X10_TEMP994 + nter;


			final String X10_TEMP996 = " buffer overflows, ";


			final String X10_TEMP997 = X10_TEMP995 + X10_TEMP996;


			final String X10_TEMP998 = "nbmax = ";


			final String X10_TEMP999 = X10_TEMP997 + X10_TEMP998;


			final int X10_TEMP1000 = rBuffer.regSize;


			final String X10_TEMP1002 = X10_TEMP999 + X10_TEMP1000;

			System.err.println(X10_TEMP1002);
			}

		final ParticleRefArray1 X10_TEMP1006 = Program.LinearESOpenPIC2D_packParticleArray(X10_TEMP0, part, nPart,myUniquePlacePoint);

		return X10_TEMP1006;
		}
public static void LinearESOpenPIC2D_transferParticles ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray2 leftOutBuffer, final ParticleRefArray2 rightOutBuffer, final intRefArray1 outLeft, final intRefArray1 outRight, final ParticleRefArray2 leftInBuffer, final ParticleRefArray2 rightInBuffer, final intRefArray1 inLeft, final intRefArray1 inRight, int myUniquePlacePoint)
		{
		/*FINISH
*/			{

			final Dist1 X10_TEMP2 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP2.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 X10_TEMP3 = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final int pl = X10_TEMP3.f0;


				final Region1 RX10_TEMP6 = X10_TEMP2.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, X10_TEMP3,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point X10_TEMP3 not found in the distribution X10_TEMP2.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP2, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP4 = RX10_TEMP11;

				//async(X10_TEMP4)
					{

					final int X10_TEMP5 = 0;


					final int pLeft = 0;


					final int X10_TEMP7 = 0;


					final int pRight = 0;


					final int X10_TEMP14 = 0;


					final Point1 RX10_TEMP12 = new Point1(pl,X10_TEMP4);
					
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP12.hashCode());


					final Dist1 RX10_TEMP13 = outLeft.distValue;


					final Region1 RX10_TEMP14 = RX10_TEMP13.dReg;


					final int RX10_TEMP15 = Program.searchPointInRegion1(RX10_TEMP14, RX10_TEMP12,X10_TEMP4);


					final int RX10_TEMP16 = 0;


					final boolean RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16;

					if(RX10_TEMP17)
						{

						String RX10_TEMP18 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP18);

						}

					final int RX10_TEMP19 = Program.getPlaceFromDist1(RX10_TEMP13, RX10_TEMP15,X10_TEMP4);


					final int RX10_TEMP21 = 0;


					final boolean RX10_TEMP22 = RX10_TEMP19 != RX10_TEMP21;

					if(RX10_TEMP22)
						{

						String RX10_TEMP20 = "Bad place access for array outLeft";

						throw new RuntimeException(RX10_TEMP20);

						}

					final int RX10_TEMP23 = Program.getRefArrayValue1int(outLeft, RX10_TEMP15,X10_TEMP4);


					final int X10_TEMP11 = RX10_TEMP23;


					final int X10_TEMP12 = 1;


					final int X10_TEMP15 = X10_TEMP11 - X10_TEMP12;


					final Region1 rLeft = Program.createNewRegion1R(X10_TEMP14, X10_TEMP15,X10_TEMP4);


					final int X10_TEMP22 = 0;


					final Point1 RX10_TEMP24 = new Point1(pl,X10_TEMP4);
					
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP24.hashCode());


					final Dist1 RX10_TEMP25 = outRight.distValue;


					final Region1 RX10_TEMP26 = RX10_TEMP25.dReg;


					final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, RX10_TEMP24,X10_TEMP4);


					final int RX10_TEMP28 = 0;


					final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

					if(RX10_TEMP29)
						{

						String RX10_TEMP30 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP30);

						}

					final int RX10_TEMP31 = Program.getPlaceFromDist1(RX10_TEMP25, RX10_TEMP27,X10_TEMP4);


					final int RX10_TEMP33 = 0;


					final boolean RX10_TEMP34 = RX10_TEMP31 != RX10_TEMP33;

					if(RX10_TEMP34)
						{

						String RX10_TEMP32 = "Bad place access for array outRight";

						throw new RuntimeException(RX10_TEMP32);

						}

					final int RX10_TEMP35 = Program.getRefArrayValue1int(outRight, RX10_TEMP27,X10_TEMP4);


					final int X10_TEMP19 = RX10_TEMP35;


					final int X10_TEMP20 = 1;


					final int X10_TEMP23 = X10_TEMP19 - X10_TEMP20;


					final Region1 rRight = Program.createNewRegion1R(X10_TEMP22, X10_TEMP23,X10_TEMP4);


					final Region1 RX10_TEMP36 = rLeft;


					final int RX10_TEMP53 = rLeft.regSize;


					final int RX10_TEMP54 = 1;


					final int RX10_TEMP55 = RX10_TEMP53 - RX10_TEMP54;


					final int  RX10_TEMP52 = RX10_TEMP55+1;


					final Particle[] RX10_TEMP56 = (Particle[])(new Particle/*value*/[RX10_TEMP52]);
/*arrayInitBlock*/
for(int RX10_TEMP37= 0;RX10_TEMP37 <RX10_TEMP56.length ;RX10_TEMP37++ )						{

						final int RX10_TEMP39 = RX10_TEMP37;


						final Point1 RX10_TEMP38 = Program.regionOrdinalPoint1(RX10_TEMP36, RX10_TEMP39,X10_TEMP4);


						final int i = RX10_TEMP38.f0;


						final Point2 RX10_TEMP40 = new Point2(pl, i,X10_TEMP4);
						
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP40.hashCode());


						final Dist2 RX10_TEMP41 = leftOutBuffer.distValue;


						final Region2 RX10_TEMP42 = RX10_TEMP41.dReg;


						final int RX10_TEMP43 = Program.searchPointInRegion2(RX10_TEMP42, RX10_TEMP40,X10_TEMP4);


						final int RX10_TEMP44 = 0;


						final boolean RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44;

						if(RX10_TEMP45)
							{

							String RX10_TEMP46 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP46);

							}

						final int RX10_TEMP47 = Program.getPlaceFromDist2(RX10_TEMP41, RX10_TEMP43,X10_TEMP4);


						final int RX10_TEMP49 = 0;


						final boolean RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49;

						if(RX10_TEMP50)
							{

							String RX10_TEMP48 = "Bad place access for array leftOutBuffer";

							throw new RuntimeException(RX10_TEMP48);

							}

						final Particle RX10_TEMP51 = Program.getRefArrayValue2Particle(leftOutBuffer, RX10_TEMP43,X10_TEMP4);


						final Particle X10_TEMP28 = RX10_TEMP51;

						RX10_TEMP56[RX10_TEMP37] =X10_TEMP28;
						}

;


					final ParticleValArray1 RX10_TEMP57 = new ParticleValArray1(rLeft, RX10_TEMP56,X10_TEMP4);
					
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP57.hashCode());


					final ParticleValArray1 X10_TEMP29 = RX10_TEMP57;


					final ParticleValArray1 lBuffer = X10_TEMP29;


					final Region1 RX10_TEMP58 = rRight;


					final int RX10_TEMP75 = rRight.regSize;


					final int RX10_TEMP76 = 1;


					final int RX10_TEMP77 = RX10_TEMP75 - RX10_TEMP76;


					final int  RX10_TEMP74 = RX10_TEMP77+1;


					final Particle[] RX10_TEMP78 = (Particle[])(new Particle/*value*/[RX10_TEMP74]);
/*arrayInitBlock*/
for(int RX10_TEMP59= 0;RX10_TEMP59 <RX10_TEMP78.length ;RX10_TEMP59++ )						{

						final int RX10_TEMP61 = RX10_TEMP59;


						final Point1 RX10_TEMP60 = Program.regionOrdinalPoint1(RX10_TEMP58, RX10_TEMP61,X10_TEMP4);


						final int i = RX10_TEMP60.f0;


						final Point2 RX10_TEMP62 = new Point2(pl, i,X10_TEMP4);
						
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP62.hashCode());


						final Dist2 RX10_TEMP63 = rightOutBuffer.distValue;


						final Region2 RX10_TEMP64 = RX10_TEMP63.dReg;


						final int RX10_TEMP65 = Program.searchPointInRegion2(RX10_TEMP64, RX10_TEMP62,X10_TEMP4);


						final int RX10_TEMP66 = 0;


						final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

						if(RX10_TEMP67)
							{

							String RX10_TEMP68 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP68);

							}

						final int RX10_TEMP69 = Program.getPlaceFromDist2(RX10_TEMP63, RX10_TEMP65,X10_TEMP4);


						final int RX10_TEMP71 = 0;


						final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

						if(RX10_TEMP72)
							{

							String RX10_TEMP70 = "Bad place access for array rightOutBuffer";

							throw new RuntimeException(RX10_TEMP70);

							}

						final Particle RX10_TEMP73 = Program.getRefArrayValue2Particle(rightOutBuffer, RX10_TEMP65,X10_TEMP4);


						final Particle X10_TEMP34 = RX10_TEMP73;

						RX10_TEMP78[RX10_TEMP59] =X10_TEMP34;
						}

;


					final ParticleValArray1 RX10_TEMP79 = new ParticleValArray1(rRight, RX10_TEMP78,X10_TEMP4);
					
Program.globalPointerHashMap.get(X10_TEMP4).add(RX10_TEMP79.hashCode());


					final ParticleValArray1 X10_TEMP35 = RX10_TEMP79;


					final ParticleValArray1 rBuffer = X10_TEMP35;

					//async(pLeft)
						{

						final int X10_TEMP38 = 0;


						final int pid = 0;


						final Region1 RX10_TEMP80 = lBuffer.regionValue;


						final Region1 X10_TEMP41 = RX10_TEMP80;


						final int X10_TEMP44 = X10_TEMP41.regSize;


						final int X10_TEMP45 = X10_TEMP44;


						final Point1 RX10_TEMP81 = new Point1(pid,pLeft);
						
Program.globalPointerHashMap.get(pLeft).add(RX10_TEMP81.hashCode());


						final Dist1 RX10_TEMP82 = inRight.distValue;


						final Region1 RX10_TEMP83 = RX10_TEMP82.dReg;


						final int RX10_TEMP84 = Program.searchPointInRegion1(RX10_TEMP83, RX10_TEMP81,pLeft);


						final int RX10_TEMP85 = 0;


						final boolean RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85;

						if(RX10_TEMP86)
							{

							String RX10_TEMP87 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP87);

							}

						final int RX10_TEMP88 = Program.getPlaceFromDist1(RX10_TEMP82, RX10_TEMP84,pLeft);


						final int RX10_TEMP90 = 0;


						final boolean RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90;

						if(RX10_TEMP91)
							{

							String RX10_TEMP89 = "Bad place access for array inRight";

							throw new RuntimeException(RX10_TEMP89);

							}
						Program.setRefArrayValue1int(inRight, RX10_TEMP84, X10_TEMP45,pLeft);

						final int X10_TEMP47 = 0;


						final Region1 RX10_TEMP94 = lBuffer.regionValue;


						final int RX10_TEMP97 = 1;


						int RX10_TEMP95 = RX10_TEMP94.regSize;


						RX10_TEMP95 = RX10_TEMP95 - RX10_TEMP97;


						final int  RX10_TEMP96 = RX10_TEMP95+1;

						for(int RX10_TEMP92=0; RX10_TEMP92 < RX10_TEMP96; RX10_TEMP92++)
							{

							final int RX10_TEMP98 = RX10_TEMP92;


							final Point1 RX10_TEMP93 = Program.regionOrdinalPoint1(RX10_TEMP94, RX10_TEMP98,pLeft);


							final int i = RX10_TEMP93.f0;

							//async(X10_TEMP47)
								{

								final Point1 RX10_TEMP99 = new Point1(i,X10_TEMP47);
								
Program.globalPointerHashMap.get(X10_TEMP47).add(RX10_TEMP99.hashCode());


								final Region1 RX10_TEMP100 = lBuffer.regionValue;


								final int RX10_TEMP101 = Program.searchPointInRegion1(RX10_TEMP100, RX10_TEMP99,X10_TEMP47);


								final int RX10_TEMP102 = 0;


								final boolean RX10_TEMP103 = RX10_TEMP101 < RX10_TEMP102;

								if(RX10_TEMP103)
									{

									String RX10_TEMP104 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP104);

									}

								final Particle[] RX10_TEMP105 = (Particle[])(lBuffer.contents);


								final Particle X10_TEMP53 = RX10_TEMP105[RX10_TEMP101];


								final Particle X10_TEMP54 = X10_TEMP53;


								final Point2 RX10_TEMP106 = new Point2(pid, i,X10_TEMP47);
								
Program.globalPointerHashMap.get(X10_TEMP47).add(RX10_TEMP106.hashCode());


								final Dist2 RX10_TEMP107 = rightInBuffer.distValue;


								final Region2 RX10_TEMP108 = RX10_TEMP107.dReg;


								final int RX10_TEMP109 = Program.searchPointInRegion2(RX10_TEMP108, RX10_TEMP106,X10_TEMP47);


								final int RX10_TEMP110 = 0;


								final boolean RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110;

								if(RX10_TEMP111)
									{

									String RX10_TEMP112 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP112);

									}

								final int RX10_TEMP113 = Program.getPlaceFromDist2(RX10_TEMP107, RX10_TEMP109,X10_TEMP47);


								final int RX10_TEMP115 = 0;


								final boolean RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115;

								if(RX10_TEMP116)
									{

									String RX10_TEMP114 = "Bad place access for array rightInBuffer";

									throw new RuntimeException(RX10_TEMP114);

									}
								Program.setRefArrayValue2Particle(rightInBuffer, RX10_TEMP109, X10_TEMP54,X10_TEMP47);
								}
							}
						}
					//async(pRight)
						{

						final int X10_TEMP56 = 0;


						final int pid = 0;


						final Region1 RX10_TEMP117 = rBuffer.regionValue;


						final Region1 X10_TEMP59 = RX10_TEMP117;


						final int X10_TEMP62 = X10_TEMP59.regSize;


						final int X10_TEMP63 = X10_TEMP62;


						final Point1 RX10_TEMP118 = new Point1(pid,pRight);
						
Program.globalPointerHashMap.get(pRight).add(RX10_TEMP118.hashCode());


						final Dist1 RX10_TEMP119 = inLeft.distValue;


						final Region1 RX10_TEMP120 = RX10_TEMP119.dReg;


						final int RX10_TEMP121 = Program.searchPointInRegion1(RX10_TEMP120, RX10_TEMP118,pRight);


						final int RX10_TEMP122 = 0;


						final boolean RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122;

						if(RX10_TEMP123)
							{

							String RX10_TEMP124 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP124);

							}

						final int RX10_TEMP125 = Program.getPlaceFromDist1(RX10_TEMP119, RX10_TEMP121,pRight);


						final int RX10_TEMP127 = 0;


						final boolean RX10_TEMP128 = RX10_TEMP125 != RX10_TEMP127;

						if(RX10_TEMP128)
							{

							String RX10_TEMP126 = "Bad place access for array inLeft";

							throw new RuntimeException(RX10_TEMP126);

							}
						Program.setRefArrayValue1int(inLeft, RX10_TEMP121, X10_TEMP63,pRight);

						final int X10_TEMP65 = 0;


						final Region1 RX10_TEMP131 = rBuffer.regionValue;


						final int RX10_TEMP134 = 1;


						int RX10_TEMP132 = RX10_TEMP131.regSize;


						RX10_TEMP132 = RX10_TEMP132 - RX10_TEMP134;


						final int  RX10_TEMP133 = RX10_TEMP132+1;

						for(int RX10_TEMP129=0; RX10_TEMP129 < RX10_TEMP133; RX10_TEMP129++)
							{

							final int RX10_TEMP135 = RX10_TEMP129;


							final Point1 RX10_TEMP130 = Program.regionOrdinalPoint1(RX10_TEMP131, RX10_TEMP135,pRight);


							final int i = RX10_TEMP130.f0;

							//async(X10_TEMP65)
								{

								final Point1 RX10_TEMP136 = new Point1(i,X10_TEMP65);
								
Program.globalPointerHashMap.get(X10_TEMP65).add(RX10_TEMP136.hashCode());


								final Region1 RX10_TEMP137 = rBuffer.regionValue;


								final int RX10_TEMP138 = Program.searchPointInRegion1(RX10_TEMP137, RX10_TEMP136,X10_TEMP65);


								final int RX10_TEMP139 = 0;


								final boolean RX10_TEMP140 = RX10_TEMP138 < RX10_TEMP139;

								if(RX10_TEMP140)
									{

									String RX10_TEMP141 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP141);

									}

								final Particle[] RX10_TEMP142 = (Particle[])(rBuffer.contents);


								final Particle X10_TEMP71 = RX10_TEMP142[RX10_TEMP138];


								final Particle X10_TEMP72 = X10_TEMP71;


								final Point2 RX10_TEMP143 = new Point2(pid, i,X10_TEMP65);
								
Program.globalPointerHashMap.get(X10_TEMP65).add(RX10_TEMP143.hashCode());


								final Dist2 RX10_TEMP144 = leftInBuffer.distValue;


								final Region2 RX10_TEMP145 = RX10_TEMP144.dReg;


								final int RX10_TEMP146 = Program.searchPointInRegion2(RX10_TEMP145, RX10_TEMP143,X10_TEMP65);


								final int RX10_TEMP147 = 0;


								final boolean RX10_TEMP148 = RX10_TEMP146 < RX10_TEMP147;

								if(RX10_TEMP148)
									{

									String RX10_TEMP149 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP149);

									}

								final int RX10_TEMP150 = Program.getPlaceFromDist2(RX10_TEMP144, RX10_TEMP146,X10_TEMP65);


								final int RX10_TEMP152 = 0;


								final boolean RX10_TEMP153 = RX10_TEMP150 != RX10_TEMP152;

								if(RX10_TEMP153)
									{

									String RX10_TEMP151 = "Bad place access for array leftInBuffer";

									throw new RuntimeException(RX10_TEMP151);

									}
								Program.setRefArrayValue2Particle(leftInBuffer, RX10_TEMP146, X10_TEMP72,X10_TEMP65);
								}
							}
						}
					}
				}
			}
		}
public static ParticleRefArray1 LinearESOpenPIC2D_packParticleArray ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray2 part, final intRefArray1 nParticles, int myUniquePlacePoint)
		{

		int lb = 0;


		final int X10_TEMP2 = 0;


		final int X10_TEMP3 = 1;


		final int X10_TEMP4 = X10_TEMP2 - X10_TEMP3;


		final Region1 X10_TEMP5 = Program.createNewRegion1R(X10_TEMP2, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP6 = 0;


		final Dist1 X10_TEMP8 = Program.getPlaceDist1(X10_TEMP5, X10_TEMP6,myUniquePlacePoint);


		Dist1 dResult = X10_TEMP8;


		final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP11.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			int rsize = Program.X10Util_pullInt(nParticles, pt,myUniquePlacePoint);


			final int X10_TEMP17 = pt.f0;


			int p = 0;


			final int X10_TEMP20 = lb + rsize;


			final int X10_TEMP21 = 1;


			final int X10_TEMP23 = X10_TEMP20 - X10_TEMP21;


			final Region1 X10_TEMP24 = Program.createNewRegion1R(lb, X10_TEMP23,myUniquePlacePoint);


			final Dist1 X10_TEMP26 = Program.getPlaceDist1(X10_TEMP24, p,myUniquePlacePoint);


			final Dist1 X10_TEMP28 = Program.unionDist1(dResult, X10_TEMP26,myUniquePlacePoint);


			dResult = X10_TEMP28;


			final int X10_TEMP30 = lb + rsize;


			lb = X10_TEMP30;

			}

		final Region1 RX10_TEMP6 = dResult.dReg;


		final int RX10_TEMP7 = 0;


		final int RX10_TEMP8 = 1;


		int RX10_TEMP9 = 1;


		RX10_TEMP9 = RX10_TEMP9 - RX10_TEMP8;


		final int  RX10_TEMP10 = RX10_TEMP9+1;


		final int RX10_TEMP11 = RX10_TEMP9+1;


		final ParticleStub[] RX10_TEMP12 = new ParticleStub[RX10_TEMP11];

		/*FINISH
*/			{
			for(int RX10_TEMP13=0; RX10_TEMP13 < RX10_TEMP10; RX10_TEMP13++)
				{

				final int RX10_TEMP14 = 0;


				final int RX10_TEMP15 = RX10_TEMP13;


				final int RX10_TEMP16 = 0;


				final int RX10_TEMP17 = Program.getDistLocalCount1(dResult, RX10_TEMP15,myUniquePlacePoint);


				final int RX10_TEMP18 = RX10_TEMP17 - RX10_TEMP8;

				//async(RX10_TEMP16)
					{

					final int RX10_TEMP19 = RX10_TEMP18+1;


					final Particle[] RX10_TEMP20 = new Particle[RX10_TEMP19];


					final ParticleStub RX10_TEMP21 = new ParticleStub(RX10_TEMP20,RX10_TEMP16);
					
Program.globalPointerHashMap.get(RX10_TEMP16).add(RX10_TEMP21.hashCode());

					//async(RX10_TEMP14)
						{
						RX10_TEMP12[RX10_TEMP13] = RX10_TEMP21;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP22 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP10]);
/*arrayInitBlock*/
for(int RX10_TEMP24= 0;RX10_TEMP24 <RX10_TEMP22.length ;RX10_TEMP24++ )			{

			final ParticleStub RX10_TEMP23 = RX10_TEMP12[RX10_TEMP24];

			RX10_TEMP22[RX10_TEMP24] =RX10_TEMP23;
			}

;


		final ParticleRefArray1 RX10_TEMP25 = new ParticleRefArray1(dResult, RX10_TEMP22,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP25.hashCode());


		final ParticleRefArray1 result = RX10_TEMP25;

		/*FINISH
*/			{

			final Dist1 X10_TEMP33 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP27 = X10_TEMP33.dReg;


			final int RX10_TEMP30 = 1;


			int RX10_TEMP28 = RX10_TEMP27.regSize;


			RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30;


			final int  RX10_TEMP29 = RX10_TEMP28+1;

			for(int RX10_TEMP26=0; RX10_TEMP26 < RX10_TEMP29; RX10_TEMP26++)
				{

				final int RX10_TEMP31 = RX10_TEMP26;


				final Point1 X10_TEMP34 = Program.regionOrdinalPoint1(RX10_TEMP27, RX10_TEMP31,myUniquePlacePoint);


				final int pl = X10_TEMP34.f0;


				final Region1 RX10_TEMP32 = X10_TEMP33.dReg;


				final int RX10_TEMP33 = Program.searchPointInRegion1(RX10_TEMP32, X10_TEMP34,myUniquePlacePoint);


				final int RX10_TEMP34 = 0;


				final boolean RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34;

				if(RX10_TEMP35)
					{

					final String RX10_TEMP36 = "Point X10_TEMP34 not found in the distribution X10_TEMP33.";

					throw new RuntimeException(RX10_TEMP36);

					}

				final int RX10_TEMP37 = Program.getPlaceFromDist1(X10_TEMP33, RX10_TEMP33,myUniquePlacePoint);


				final int X10_TEMP35 = RX10_TEMP37;

				//async(X10_TEMP35)
					{

					final Dist1 RX10_TEMP38 = result.distValue;


					final Dist1 X10_TEMP36 = RX10_TEMP38;


					final int X10_TEMP37 = 0;


					final Dist1 X10_TEMP39 = Program.restrictDist1(X10_TEMP36, X10_TEMP37,X10_TEMP35);


					final Region1 RX10_TEMP39 = X10_TEMP39.dReg;


					final Region1 X10_TEMP40 = RX10_TEMP39;


					final Region1 rLocal = X10_TEMP40;


					final int X10_TEMP42 = rLocal.regSize;


					final int X10_TEMP43 = 0;


					final boolean X10_TEMP45 = X10_TEMP42 > X10_TEMP43;

					if(X10_TEMP45)
						{

						final int RX10_TEMP40 = rLocal.regSize;


						final int RX10_TEMP41 = 0;


						final boolean RX10_TEMP42 = RX10_TEMP40 <= RX10_TEMP41;

						if(RX10_TEMP42)
							{

							final String RX10_TEMP43 = "Operation low() not defined on empty region rLocal";

							throw new RuntimeException(RX10_TEMP43);

							}

						final int offset = Program.regionLow(rLocal,X10_TEMP35);


						final int X10_TEMP48 = 0;


						final int RX10_TEMP48 = 1;


						int RX10_TEMP46 = rLocal.regSize;


						RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP48;


						final int  RX10_TEMP47 = RX10_TEMP46+1;

						for(int RX10_TEMP44=0; RX10_TEMP44 < RX10_TEMP47; RX10_TEMP44++)
							{

							final int RX10_TEMP49 = RX10_TEMP44;


							final Point1 RX10_TEMP45 = Program.regionOrdinalPoint1(rLocal, RX10_TEMP49,X10_TEMP35);


							final int i = RX10_TEMP45.f0;

							//async(X10_TEMP48)
								{

								final int X10_TEMP52 = i - offset;


								final Point2 RX10_TEMP50 = new Point2(pl, X10_TEMP52,X10_TEMP48);
								
Program.globalPointerHashMap.get(X10_TEMP48).add(RX10_TEMP50.hashCode());


								final Dist2 RX10_TEMP51 = part.distValue;


								final Region2 RX10_TEMP52 = RX10_TEMP51.dReg;


								final int RX10_TEMP53 = Program.searchPointInRegion2(RX10_TEMP52, RX10_TEMP50,X10_TEMP48);


								final int RX10_TEMP54 = 0;


								final boolean RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54;

								if(RX10_TEMP55)
									{

									String RX10_TEMP56 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP56);

									}

								final int RX10_TEMP57 = Program.getPlaceFromDist2(RX10_TEMP51, RX10_TEMP53,X10_TEMP48);


								final int RX10_TEMP59 = 0;


								final boolean RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59;

								if(RX10_TEMP60)
									{

									String RX10_TEMP58 = "Bad place access for array part";

									throw new RuntimeException(RX10_TEMP58);

									}

								final Particle RX10_TEMP61 = Program.getRefArrayValue2Particle(part, RX10_TEMP53,X10_TEMP48);


								final Particle X10_TEMP55 = RX10_TEMP61;


								final Particle X10_TEMP56 = X10_TEMP55;


								final Point1 RX10_TEMP62 = new Point1(i,X10_TEMP48);
								
Program.globalPointerHashMap.get(X10_TEMP48).add(RX10_TEMP62.hashCode());


								final Dist1 RX10_TEMP63 = result.distValue;


								final Region1 RX10_TEMP64 = RX10_TEMP63.dReg;


								final int RX10_TEMP65 = Program.searchPointInRegion1(RX10_TEMP64, RX10_TEMP62,X10_TEMP48);


								final int RX10_TEMP66 = 0;


								final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

								if(RX10_TEMP67)
									{

									String RX10_TEMP68 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP68);

									}

								final int RX10_TEMP69 = Program.getPlaceFromDist1(RX10_TEMP63, RX10_TEMP65,X10_TEMP48);


								final int RX10_TEMP71 = 0;


								final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

								if(RX10_TEMP72)
									{

									String RX10_TEMP70 = "Bad place access for array result";

									throw new RuntimeException(RX10_TEMP70);

									}
								Program.setRefArrayValue1Particle(result, RX10_TEMP65, X10_TEMP56,X10_TEMP48);
								}
							}
						}
					}
				}
			}
		return result;
		}
public static double LinearESOpenPIC2D_pushParticles ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final doubleRefArray2 forceChargeX, final doubleRefArray2 fcGuardX, final doubleRefArray2 forceChargeY, final doubleRefArray2 fcGuardY, int myUniquePlacePoint)
		{

		double lx = 0.0;


		double ly = 0.0;


		double rx = 0.0;


		double ry = 0.0;


		final int X10_TEMP7 = 1;


		final int X10_TEMP10 = 2;


		final int X10_TEMP22 = 3;

		switch(_LinearESOpenPIC2D_BOUNDARY_CONDITION){
		case X10_TEMP7:			{

			rx = _LinearESOpenPIC2D_XLENGTH;

			break;
			}
		case X10_TEMP10:			{

			final double X10_TEMP12 = 1.0;


			lx = X10_TEMP12;


			final double X10_TEMP14 = 1.0;


			ly = X10_TEMP14;


			final double X10_TEMP15 = 1.0;


			final double X10_TEMP17 = _LinearESOpenPIC2D_XLENGTH - X10_TEMP15;


			rx = X10_TEMP17;


			final double X10_TEMP18 = 1.0;


			final double X10_TEMP20 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP18;


			ry = X10_TEMP20;

			break;
			}
		case X10_TEMP22:			{

			final double X10_TEMP24 = 1.0;


			lx = X10_TEMP24;


			final double X10_TEMP25 = 1.0;


			final double X10_TEMP27 = _LinearESOpenPIC2D_XLENGTH - X10_TEMP25;


			rx = X10_TEMP27;

			break;
			}

}
		final double edgelx = lx;


		final double edgely = ly;


		final double edgerx = rx;


		final double edgery = ry;


		final double quantum = _LinearESOpenPIC2D_ELECTRON_CHARGE * _LinearESOpenPIC2D_DELTA_TIME;


		final Dist1 RX10_TEMP0 = particles.distValue;


		final Dist1 dEnergy = RX10_TEMP0;


		final Region1 RX10_TEMP1 = dEnergy.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final doubleStub[] RX10_TEMP7 = new doubleStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount1(dEnergy, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP14 = RX10_TEMP13+1;


					final double[] RX10_TEMP15 = new double[RX10_TEMP14];


					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP16;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP17 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final doubleStub RX10_TEMP18 = RX10_TEMP7[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(dEnergy, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final doubleRefArray1 energy = RX10_TEMP20;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP22 = X10_TEMP36.dReg;


			final int RX10_TEMP25 = 1;


			int RX10_TEMP23 = RX10_TEMP22.regSize;


			RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


			final int  RX10_TEMP24 = RX10_TEMP23+1;

			for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
				{

				final int RX10_TEMP26 = RX10_TEMP21;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);


				final Region1 RX10_TEMP27 = X10_TEMP36.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, pl,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP28,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP32;

				//async(X10_TEMP37)
					{

					final doubleRefArray2 fcLocalX = Program.LinearESOpenPIC2D_makeLocalSpace(X10_TEMP0, forceChargeX, fcGuardX,X10_TEMP37);


					final doubleRefArray2 fcLocalY = Program.LinearESOpenPIC2D_makeLocalSpace(X10_TEMP0, forceChargeY, fcGuardY,X10_TEMP37);


					final Dist1 RX10_TEMP33 = particles.distValue;


					final Dist1 X10_TEMP44 = RX10_TEMP33;


					final int X10_TEMP45 = 0;


					final Dist1 X10_TEMP47 = Program.restrictDist1(X10_TEMP44, X10_TEMP45,X10_TEMP37);


					final int X10_TEMP48 = 0;


					final Region1 RX10_TEMP35 = X10_TEMP47.dReg;


					final int RX10_TEMP38 = 1;


					int RX10_TEMP36 = RX10_TEMP35.regSize;


					RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


					final int  RX10_TEMP37 = RX10_TEMP36+1;

					for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
						{

						final int RX10_TEMP39 = RX10_TEMP34;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP35, RX10_TEMP39,X10_TEMP37);

						//async(X10_TEMP48)
							{
							Program.LinearESOpenPIC2D_pushParticle(X10_TEMP0, particles, pt, fcLocalX, fcLocalY, quantum, edgelx, edgely, edgerx, edgery, energy,X10_TEMP48);
							}
						}
					}
				}
			}

		final double X10_TEMP59 = 0.125;


		final double X10_TEMP60 = Program.doublerefArraySum1(energy,myUniquePlacePoint);


		final double X10_TEMP62 = X10_TEMP59 * X10_TEMP60;

		return X10_TEMP62;
		}
public static doubleRefArray2 LinearESOpenPIC2D_makeLocalSpace ( final LinearESOpenPIC2D X10_TEMP0, final doubleRefArray2 data, final doubleRefArray2 guards, int myUniquePlacePoint)
		{

		final Dist2 RX10_TEMP0 = data.distValue;


		final Dist2 dData = RX10_TEMP0;


		final Dist2 RX10_TEMP1 = guards.distValue;


		final Dist2 dGuard = RX10_TEMP1;


		final Region2 rLocalD = Program.X10Util_get2DLRegion(dData,myUniquePlacePoint);


		final Region2 rLocalG = Program.X10Util_get2DLRegion(dGuard,myUniquePlacePoint);


		final Region2 X10_TEMP8 = Program.unionRegion2(rLocalD, rLocalG,myUniquePlacePoint);


		final int X10_TEMP9 = 0;


		final Dist2 X10_TEMP11 = Program.getPlaceDist2(X10_TEMP8, X10_TEMP9,myUniquePlacePoint);


		final Dist2 dResult = X10_TEMP11;


		final Region2 RX10_TEMP2 = dResult.dReg;


		final int RX10_TEMP3 = 0;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP5 = 1;


		RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4;


		final int  RX10_TEMP6 = RX10_TEMP5+1;


		final int RX10_TEMP7 = RX10_TEMP5+1;


		final doubleStub[] RX10_TEMP8 = new doubleStub[RX10_TEMP7];

		/*FINISH
*/			{
			for(int RX10_TEMP9=0; RX10_TEMP9 < RX10_TEMP6; RX10_TEMP9++)
				{

				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = RX10_TEMP9;


				final int RX10_TEMP12 = 0;


				final int RX10_TEMP13 = Program.getDistLocalCount2(dResult, RX10_TEMP11,myUniquePlacePoint);


				final int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4;

				//async(RX10_TEMP12)
					{

					final int RX10_TEMP15 = RX10_TEMP14+1;


					final double[] RX10_TEMP16 = new double[RX10_TEMP15];


					final doubleStub RX10_TEMP17 = new doubleStub(RX10_TEMP16,RX10_TEMP12);
					
Program.globalPointerHashMap.get(RX10_TEMP12).add(RX10_TEMP17.hashCode());

					//async(RX10_TEMP10)
						{
						RX10_TEMP8[RX10_TEMP9] = RX10_TEMP17;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP18 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP6]);
/*arrayInitBlock*/
for(int RX10_TEMP20= 0;RX10_TEMP20 <RX10_TEMP18.length ;RX10_TEMP20++ )			{

			final doubleStub RX10_TEMP19 = RX10_TEMP8[RX10_TEMP20];

			RX10_TEMP18[RX10_TEMP20] =RX10_TEMP19;
			}

;


		final doubleRefArray2 RX10_TEMP21 = new doubleRefArray2(dResult, RX10_TEMP18,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP21.hashCode());


		final doubleRefArray2 result = RX10_TEMP21;

		/*FINISH
*/			{

			final Dist2 RX10_TEMP22 = data.distValue;


			final Dist2 X10_TEMP14 = RX10_TEMP22;


			final int X10_TEMP15 = 0;


			final Dist2 X10_TEMP17 = Program.restrictDist2(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


			final int X10_TEMP18 = 0;


			final Region2 RX10_TEMP24 = X10_TEMP17.dReg;


			final int RX10_TEMP27 = 1;


			int RX10_TEMP25 = RX10_TEMP24.regSize;


			RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27;


			final int  RX10_TEMP26 = RX10_TEMP25+1;

			for(int RX10_TEMP23=0; RX10_TEMP23 < RX10_TEMP26; RX10_TEMP23++)
				{

				final int RX10_TEMP28 = RX10_TEMP23;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP24, RX10_TEMP28,myUniquePlacePoint);

				//async(X10_TEMP18)
					{

					final Dist2 RX10_TEMP29 = data.distValue;


					final Region2 RX10_TEMP30 = RX10_TEMP29.dReg;


					final int RX10_TEMP31 = Program.searchPointInRegion2(RX10_TEMP30, pt,X10_TEMP18);


					final int RX10_TEMP32 = 0;


					final boolean RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32;

					if(RX10_TEMP33)
						{

						String RX10_TEMP34 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP34);

						}

					final int RX10_TEMP35 = Program.getPlaceFromDist2(RX10_TEMP29, RX10_TEMP31,X10_TEMP18);


					final int RX10_TEMP37 = 0;


					final boolean RX10_TEMP38 = RX10_TEMP35 != RX10_TEMP37;

					if(RX10_TEMP38)
						{

						String RX10_TEMP36 = "Bad place access for array data";

						throw new RuntimeException(RX10_TEMP36);

						}

					final double RX10_TEMP39 = Program.getRefArrayValue2double(data, RX10_TEMP31,X10_TEMP18);


					final double X10_TEMP23 = RX10_TEMP39;


					final double X10_TEMP24 = X10_TEMP23;


					final Dist2 RX10_TEMP40 = result.distValue;


					final Region2 RX10_TEMP41 = RX10_TEMP40.dReg;


					final int RX10_TEMP42 = Program.searchPointInRegion2(RX10_TEMP41, pt,X10_TEMP18);


					final int RX10_TEMP43 = 0;


					final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

					if(RX10_TEMP44)
						{

						String RX10_TEMP45 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP45);

						}

					final int RX10_TEMP46 = Program.getPlaceFromDist2(RX10_TEMP40, RX10_TEMP42,X10_TEMP18);


					final int RX10_TEMP48 = 0;


					final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

					if(RX10_TEMP49)
						{

						String RX10_TEMP47 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP47);

						}
					Program.setRefArrayValue2double(result, RX10_TEMP42, X10_TEMP24,X10_TEMP18);
					}
				}

			final Dist2 RX10_TEMP50 = guards.distValue;


			final Dist2 X10_TEMP25 = RX10_TEMP50;


			final int X10_TEMP26 = 0;


			final Dist2 X10_TEMP28 = Program.restrictDist2(X10_TEMP25, X10_TEMP26,myUniquePlacePoint);


			final int X10_TEMP29 = 0;


			final Region2 RX10_TEMP52 = X10_TEMP28.dReg;


			final int RX10_TEMP55 = 1;


			int RX10_TEMP53 = RX10_TEMP52.regSize;


			RX10_TEMP53 = RX10_TEMP53 - RX10_TEMP55;


			final int  RX10_TEMP54 = RX10_TEMP53+1;

			for(int RX10_TEMP51=0; RX10_TEMP51 < RX10_TEMP54; RX10_TEMP51++)
				{

				final int RX10_TEMP56 = RX10_TEMP51;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP52, RX10_TEMP56,myUniquePlacePoint);

				//async(X10_TEMP29)
					{

					final Dist2 RX10_TEMP57 = guards.distValue;


					final Region2 RX10_TEMP58 = RX10_TEMP57.dReg;


					final int RX10_TEMP59 = Program.searchPointInRegion2(RX10_TEMP58, pt,X10_TEMP29);


					final int RX10_TEMP60 = 0;


					final boolean RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60;

					if(RX10_TEMP61)
						{

						String RX10_TEMP62 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP62);

						}

					final int RX10_TEMP63 = Program.getPlaceFromDist2(RX10_TEMP57, RX10_TEMP59,X10_TEMP29);


					final int RX10_TEMP65 = 0;


					final boolean RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65;

					if(RX10_TEMP66)
						{

						String RX10_TEMP64 = "Bad place access for array guards";

						throw new RuntimeException(RX10_TEMP64);

						}

					final double RX10_TEMP67 = Program.getRefArrayValue2double(guards, RX10_TEMP59,X10_TEMP29);


					final double X10_TEMP34 = RX10_TEMP67;


					final double X10_TEMP35 = X10_TEMP34;


					final Dist2 RX10_TEMP68 = result.distValue;


					final Region2 RX10_TEMP69 = RX10_TEMP68.dReg;


					final int RX10_TEMP70 = Program.searchPointInRegion2(RX10_TEMP69, pt,X10_TEMP29);


					final int RX10_TEMP71 = 0;


					final boolean RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71;

					if(RX10_TEMP72)
						{

						String RX10_TEMP73 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP73);

						}

					final int RX10_TEMP74 = Program.getPlaceFromDist2(RX10_TEMP68, RX10_TEMP70,X10_TEMP29);


					final int RX10_TEMP76 = 0;


					final boolean RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76;

					if(RX10_TEMP77)
						{

						String RX10_TEMP75 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP75);

						}
					Program.setRefArrayValue2double(result, RX10_TEMP70, X10_TEMP35,X10_TEMP29);
					}
				}
			}
		return result;
		}
public static void LinearESOpenPIC2D_pushParticle ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final Point1 pt, final doubleRefArray2 forceChargeX, final doubleRefArray2 forceChargeY, final double quantum, final double edgelx, final double edgely, final double edgerx, final double edgery, final doubleRefArray1 energy, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = particles.distValue;


		final Region1 RX10_TEMP1 = RX10_TEMP0.dReg;


		final int RX10_TEMP2 = Program.searchPointInRegion1(RX10_TEMP1, pt,myUniquePlacePoint);


		final int RX10_TEMP3 = 0;


		final boolean RX10_TEMP4 = RX10_TEMP2 < RX10_TEMP3;

		if(RX10_TEMP4)
			{

			String RX10_TEMP5 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP5);

			}

		final int RX10_TEMP6 = Program.getPlaceFromDist1(RX10_TEMP0, RX10_TEMP2,myUniquePlacePoint);


		final int RX10_TEMP8 = 0;


		final boolean RX10_TEMP9 = RX10_TEMP6 != RX10_TEMP8;

		if(RX10_TEMP9)
			{

			String RX10_TEMP7 = "Bad place access for array particles";

			throw new RuntimeException(RX10_TEMP7);

			}

		final Particle RX10_TEMP10 = Program.getRefArrayValue1Particle(particles, RX10_TEMP2,myUniquePlacePoint);


		final Particle p = RX10_TEMP10;


		final double X10_TEMP3 = Program.Particle_getX(p,myUniquePlacePoint);


		final int x = (int)X10_TEMP3;


		final double X10_TEMP5 = Program.Particle_getY(p,myUniquePlacePoint);


		final int y = (int)X10_TEMP5;


		final double X10_TEMP7 = Program.Particle_getX(p,myUniquePlacePoint);


		final double dx = X10_TEMP7 - x;


		final double X10_TEMP9 = Program.Particle_getY(p,myUniquePlacePoint);


		final double dy = X10_TEMP9 - y;


		final double X10_TEMP11 = 1.0;


		final double mx = X10_TEMP11 - dx;


		final double X10_TEMP13 = 1.0;


		final double my = X10_TEMP13 - dy;


		final int X10_TEMP15 = 1;


		final int X10_TEMP19 = y + X10_TEMP15;


		final int X10_TEMP17 = 1;


		final int X10_TEMP20 = x + X10_TEMP17;


		final Point2 RX10_TEMP11 = new Point2(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP11.hashCode());


		final Dist2 RX10_TEMP12 = forceChargeX.distValue;


		final Region2 RX10_TEMP13 = RX10_TEMP12.dReg;


		final int RX10_TEMP14 = Program.searchPointInRegion2(RX10_TEMP13, RX10_TEMP11,myUniquePlacePoint);


		final int RX10_TEMP15 = 0;


		final boolean RX10_TEMP16 = RX10_TEMP14 < RX10_TEMP15;

		if(RX10_TEMP16)
			{

			String RX10_TEMP17 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP17);

			}

		final int RX10_TEMP18 = Program.getPlaceFromDist2(RX10_TEMP12, RX10_TEMP14,myUniquePlacePoint);


		final int RX10_TEMP20 = 0;


		final boolean RX10_TEMP21 = RX10_TEMP18 != RX10_TEMP20;

		if(RX10_TEMP21)
			{

			String RX10_TEMP19 = "Bad place access for array forceChargeX";

			throw new RuntimeException(RX10_TEMP19);

			}

		final double RX10_TEMP22 = Program.getRefArrayValue2double(forceChargeX, RX10_TEMP14,myUniquePlacePoint);


		final double X10_TEMP21 = RX10_TEMP22;


		final double X10_TEMP27 = dx * X10_TEMP21;


		final int X10_TEMP22 = 1;


		final int X10_TEMP25 = y + X10_TEMP22;


		final Point2 RX10_TEMP23 = new Point2(X10_TEMP25, x,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP23.hashCode());


		final Dist2 RX10_TEMP24 = forceChargeX.distValue;


		final Region2 RX10_TEMP25 = RX10_TEMP24.dReg;


		final int RX10_TEMP26 = Program.searchPointInRegion2(RX10_TEMP25, RX10_TEMP23,myUniquePlacePoint);


		final int RX10_TEMP27 = 0;


		final boolean RX10_TEMP28 = RX10_TEMP26 < RX10_TEMP27;

		if(RX10_TEMP28)
			{

			String RX10_TEMP29 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP29);

			}

		final int RX10_TEMP30 = Program.getPlaceFromDist2(RX10_TEMP24, RX10_TEMP26,myUniquePlacePoint);


		final int RX10_TEMP32 = 0;


		final boolean RX10_TEMP33 = RX10_TEMP30 != RX10_TEMP32;

		if(RX10_TEMP33)
			{

			String RX10_TEMP31 = "Bad place access for array forceChargeX";

			throw new RuntimeException(RX10_TEMP31);

			}

		final double RX10_TEMP34 = Program.getRefArrayValue2double(forceChargeX, RX10_TEMP26,myUniquePlacePoint);


		final double X10_TEMP26 = RX10_TEMP34;


		final double X10_TEMP28 = mx * X10_TEMP26;


		final double X10_TEMP30 = X10_TEMP27 + X10_TEMP28;


		final double X10_TEMP43 = dy * X10_TEMP30;


		final int X10_TEMP32 = 1;


		final int X10_TEMP34 = x + X10_TEMP32;


		final Point2 RX10_TEMP35 = new Point2(y, X10_TEMP34,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP35.hashCode());


		final Dist2 RX10_TEMP36 = forceChargeX.distValue;


		final Region2 RX10_TEMP37 = RX10_TEMP36.dReg;


		final int RX10_TEMP38 = Program.searchPointInRegion2(RX10_TEMP37, RX10_TEMP35,myUniquePlacePoint);


		final int RX10_TEMP39 = 0;


		final boolean RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39;

		if(RX10_TEMP40)
			{

			String RX10_TEMP41 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP41);

			}

		final int RX10_TEMP42 = Program.getPlaceFromDist2(RX10_TEMP36, RX10_TEMP38,myUniquePlacePoint);


		final int RX10_TEMP44 = 0;


		final boolean RX10_TEMP45 = RX10_TEMP42 != RX10_TEMP44;

		if(RX10_TEMP45)
			{

			String RX10_TEMP43 = "Bad place access for array forceChargeX";

			throw new RuntimeException(RX10_TEMP43);

			}

		final double RX10_TEMP46 = Program.getRefArrayValue2double(forceChargeX, RX10_TEMP38,myUniquePlacePoint);


		final double X10_TEMP35 = RX10_TEMP46;


		final double X10_TEMP39 = dx * X10_TEMP35;


		final Point2 RX10_TEMP47 = new Point2(y, x,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP47.hashCode());


		final Dist2 RX10_TEMP48 = forceChargeX.distValue;


		final Region2 RX10_TEMP49 = RX10_TEMP48.dReg;


		final int RX10_TEMP50 = Program.searchPointInRegion2(RX10_TEMP49, RX10_TEMP47,myUniquePlacePoint);


		final int RX10_TEMP51 = 0;


		final boolean RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51;

		if(RX10_TEMP52)
			{

			String RX10_TEMP53 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP53);

			}

		final int RX10_TEMP54 = Program.getPlaceFromDist2(RX10_TEMP48, RX10_TEMP50,myUniquePlacePoint);


		final int RX10_TEMP56 = 0;


		final boolean RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56;

		if(RX10_TEMP57)
			{

			String RX10_TEMP55 = "Bad place access for array forceChargeX";

			throw new RuntimeException(RX10_TEMP55);

			}

		final double RX10_TEMP58 = Program.getRefArrayValue2double(forceChargeX, RX10_TEMP50,myUniquePlacePoint);


		final double X10_TEMP38 = RX10_TEMP58;


		final double X10_TEMP40 = mx * X10_TEMP38;


		final double X10_TEMP42 = X10_TEMP39 + X10_TEMP40;


		final double X10_TEMP44 = my * X10_TEMP42;


		final double X10_TEMP46 = X10_TEMP43 + X10_TEMP44;


		final double ax = X10_TEMP46;


		final int X10_TEMP48 = 1;


		final int X10_TEMP52 = y + X10_TEMP48;


		final int X10_TEMP50 = 1;


		final int X10_TEMP53 = x + X10_TEMP50;


		final Point2 RX10_TEMP59 = new Point2(X10_TEMP52, X10_TEMP53,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP59.hashCode());


		final Dist2 RX10_TEMP60 = forceChargeY.distValue;


		final Region2 RX10_TEMP61 = RX10_TEMP60.dReg;


		final int RX10_TEMP62 = Program.searchPointInRegion2(RX10_TEMP61, RX10_TEMP59,myUniquePlacePoint);


		final int RX10_TEMP63 = 0;


		final boolean RX10_TEMP64 = RX10_TEMP62 < RX10_TEMP63;

		if(RX10_TEMP64)
			{

			String RX10_TEMP65 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP65);

			}

		final int RX10_TEMP66 = Program.getPlaceFromDist2(RX10_TEMP60, RX10_TEMP62,myUniquePlacePoint);


		final int RX10_TEMP68 = 0;


		final boolean RX10_TEMP69 = RX10_TEMP66 != RX10_TEMP68;

		if(RX10_TEMP69)
			{

			String RX10_TEMP67 = "Bad place access for array forceChargeY";

			throw new RuntimeException(RX10_TEMP67);

			}

		final double RX10_TEMP70 = Program.getRefArrayValue2double(forceChargeY, RX10_TEMP62,myUniquePlacePoint);


		final double X10_TEMP54 = RX10_TEMP70;


		final double X10_TEMP60 = dx * X10_TEMP54;


		final int X10_TEMP55 = 1;


		final int X10_TEMP58 = y + X10_TEMP55;


		final Point2 RX10_TEMP71 = new Point2(X10_TEMP58, x,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP71.hashCode());


		final Dist2 RX10_TEMP72 = forceChargeY.distValue;


		final Region2 RX10_TEMP73 = RX10_TEMP72.dReg;


		final int RX10_TEMP74 = Program.searchPointInRegion2(RX10_TEMP73, RX10_TEMP71,myUniquePlacePoint);


		final int RX10_TEMP75 = 0;


		final boolean RX10_TEMP76 = RX10_TEMP74 < RX10_TEMP75;

		if(RX10_TEMP76)
			{

			String RX10_TEMP77 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP77);

			}

		final int RX10_TEMP78 = Program.getPlaceFromDist2(RX10_TEMP72, RX10_TEMP74,myUniquePlacePoint);


		final int RX10_TEMP80 = 0;


		final boolean RX10_TEMP81 = RX10_TEMP78 != RX10_TEMP80;

		if(RX10_TEMP81)
			{

			String RX10_TEMP79 = "Bad place access for array forceChargeY";

			throw new RuntimeException(RX10_TEMP79);

			}

		final double RX10_TEMP82 = Program.getRefArrayValue2double(forceChargeY, RX10_TEMP74,myUniquePlacePoint);


		final double X10_TEMP59 = RX10_TEMP82;


		final double X10_TEMP61 = mx * X10_TEMP59;


		final double X10_TEMP63 = X10_TEMP60 + X10_TEMP61;


		final double X10_TEMP76 = dy * X10_TEMP63;


		final int X10_TEMP65 = 1;


		final int X10_TEMP67 = x + X10_TEMP65;


		final Point2 RX10_TEMP83 = new Point2(y, X10_TEMP67,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP83.hashCode());


		final Dist2 RX10_TEMP84 = forceChargeY.distValue;


		final Region2 RX10_TEMP85 = RX10_TEMP84.dReg;


		final int RX10_TEMP86 = Program.searchPointInRegion2(RX10_TEMP85, RX10_TEMP83,myUniquePlacePoint);


		final int RX10_TEMP87 = 0;


		final boolean RX10_TEMP88 = RX10_TEMP86 < RX10_TEMP87;

		if(RX10_TEMP88)
			{

			String RX10_TEMP89 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP89);

			}

		final int RX10_TEMP90 = Program.getPlaceFromDist2(RX10_TEMP84, RX10_TEMP86,myUniquePlacePoint);


		final int RX10_TEMP92 = 0;


		final boolean RX10_TEMP93 = RX10_TEMP90 != RX10_TEMP92;

		if(RX10_TEMP93)
			{

			String RX10_TEMP91 = "Bad place access for array forceChargeY";

			throw new RuntimeException(RX10_TEMP91);

			}

		final double RX10_TEMP94 = Program.getRefArrayValue2double(forceChargeY, RX10_TEMP86,myUniquePlacePoint);


		final double X10_TEMP68 = RX10_TEMP94;


		final double X10_TEMP72 = dx * X10_TEMP68;


		final Point2 RX10_TEMP95 = new Point2(y, x,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP95.hashCode());


		final Dist2 RX10_TEMP96 = forceChargeY.distValue;


		final Region2 RX10_TEMP97 = RX10_TEMP96.dReg;


		final int RX10_TEMP98 = Program.searchPointInRegion2(RX10_TEMP97, RX10_TEMP95,myUniquePlacePoint);


		final int RX10_TEMP99 = 0;


		final boolean RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99;

		if(RX10_TEMP100)
			{

			String RX10_TEMP101 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP101);

			}

		final int RX10_TEMP102 = Program.getPlaceFromDist2(RX10_TEMP96, RX10_TEMP98,myUniquePlacePoint);


		final int RX10_TEMP104 = 0;


		final boolean RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104;

		if(RX10_TEMP105)
			{

			String RX10_TEMP103 = "Bad place access for array forceChargeY";

			throw new RuntimeException(RX10_TEMP103);

			}

		final double RX10_TEMP106 = Program.getRefArrayValue2double(forceChargeY, RX10_TEMP98,myUniquePlacePoint);


		final double X10_TEMP71 = RX10_TEMP106;


		final double X10_TEMP73 = mx * X10_TEMP71;


		final double X10_TEMP75 = X10_TEMP72 + X10_TEMP73;


		final double X10_TEMP77 = my * X10_TEMP75;


		final double X10_TEMP79 = X10_TEMP76 + X10_TEMP77;


		final double ay = X10_TEMP79;


		final double X10_TEMP81 = Program.Particle_getXVel(p,myUniquePlacePoint);


		final double X10_TEMP82 = quantum * ax;


		double vx = X10_TEMP81 + X10_TEMP82;


		final double X10_TEMP84 = Program.Particle_getYVel(p,myUniquePlacePoint);


		final double X10_TEMP85 = quantum * ay;


		double vy = X10_TEMP84 + X10_TEMP85;


		final double X10_TEMP87 = Program.Particle_getX(p,myUniquePlacePoint);


		final double X10_TEMP88 = vx * _LinearESOpenPIC2D_DELTA_TIME;


		double nx = X10_TEMP87 + X10_TEMP88;


		final double X10_TEMP90 = Program.Particle_getY(p,myUniquePlacePoint);


		final double X10_TEMP91 = vy * _LinearESOpenPIC2D_DELTA_TIME;


		double ny = X10_TEMP90 + X10_TEMP91;


		final double X10_TEMP94 = Program.Particle_getXVel(p,myUniquePlacePoint);


		final double X10_TEMP97 = vx + X10_TEMP94;


		final int X10_TEMP98 = 2;


		final double X10_TEMP104 = Math.pow(X10_TEMP97, X10_TEMP98);


		final double X10_TEMP99 = Program.Particle_getYVel(p,myUniquePlacePoint);


		final double X10_TEMP102 = vy + X10_TEMP99;


		final int X10_TEMP103 = 2;


		final double X10_TEMP105 = Math.pow(X10_TEMP102, X10_TEMP103);


		final double X10_TEMP107 = X10_TEMP104 + X10_TEMP105;


		final double X10_TEMP110 = X10_TEMP107;


		final Dist1 RX10_TEMP107 = energy.distValue;


		final Region1 RX10_TEMP108 = RX10_TEMP107.dReg;


		final int RX10_TEMP109 = Program.searchPointInRegion1(RX10_TEMP108, pt,myUniquePlacePoint);


		final int RX10_TEMP110 = 0;


		final boolean RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110;

		if(RX10_TEMP111)
			{

			String RX10_TEMP112 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP112);

			}

		final int RX10_TEMP113 = Program.getPlaceFromDist1(RX10_TEMP107, RX10_TEMP109,myUniquePlacePoint);


		final int RX10_TEMP115 = 0;


		final boolean RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115;

		if(RX10_TEMP116)
			{

			String RX10_TEMP114 = "Bad place access for array energy";

			throw new RuntimeException(RX10_TEMP114);

			}
		Program.setRefArrayValue1double(energy, RX10_TEMP109, X10_TEMP110,myUniquePlacePoint);

		final int X10_TEMP113 = 1;


		final int X10_TEMP123 = 2;


		final int X10_TEMP134 = 3;

		switch(_LinearESOpenPIC2D_BOUNDARY_CONDITION){
		case X10_TEMP113:			{

			final boolean X10_TEMP115 = nx < edgelx;

			if(X10_TEMP115)
				{

				final double X10_TEMP117 = nx + edgerx;


				nx = X10_TEMP117;

				}

			final boolean X10_TEMP119 = nx >= edgerx;

			if(X10_TEMP119)
				{

				final double X10_TEMP121 = nx - edgerx;


				nx = X10_TEMP121;

				}
			break;
			}
		case X10_TEMP123:			{

			final boolean X10_TEMP124 = ny < edgely;


			final boolean X10_TEMP125 = ny >= edgery;


			final boolean X10_TEMP127 = X10_TEMP124 || X10_TEMP125;

			if(X10_TEMP127)
				{

				final double X10_TEMP129 = Program.Particle_getY(p,myUniquePlacePoint);


				ny = X10_TEMP129;


				final int X10_TEMP130 = 0;


				final double X10_TEMP132 = X10_TEMP130 - vy;


				vy = X10_TEMP132;

				}
			}
		case X10_TEMP134:			{

			final boolean X10_TEMP135 = nx < edgelx;


			final boolean X10_TEMP136 = nx >= edgerx;


			final boolean X10_TEMP138 = X10_TEMP135 || X10_TEMP136;

			if(X10_TEMP138)
				{

				final double X10_TEMP140 = Program.Particle_getX(p,myUniquePlacePoint);


				nx = X10_TEMP140;


				final int X10_TEMP141 = 0;


				final double X10_TEMP143 = X10_TEMP141 - vx;


				vx = X10_TEMP143;

				}
			break;
			}

}
		final Particle X10_TEMP151 = new Particle(nx, ny, vx, vy,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP151.hashCode());


		final Particle X10_TEMP152 = X10_TEMP151;


		final Dist1 RX10_TEMP117 = particles.distValue;


		final Region1 RX10_TEMP118 = RX10_TEMP117.dReg;


		final int RX10_TEMP119 = Program.searchPointInRegion1(RX10_TEMP118, pt,myUniquePlacePoint);


		final int RX10_TEMP120 = 0;


		final boolean RX10_TEMP121 = RX10_TEMP119 < RX10_TEMP120;

		if(RX10_TEMP121)
			{

			String RX10_TEMP122 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP122);

			}

		final int RX10_TEMP123 = Program.getPlaceFromDist1(RX10_TEMP117, RX10_TEMP119,myUniquePlacePoint);


		final int RX10_TEMP125 = 0;


		final boolean RX10_TEMP126 = RX10_TEMP123 != RX10_TEMP125;

		if(RX10_TEMP126)
			{

			String RX10_TEMP124 = "Bad place access for array particles";

			throw new RuntimeException(RX10_TEMP124);

			}
		Program.setRefArrayValue1Particle(particles, RX10_TEMP119, X10_TEMP152,myUniquePlacePoint);
		}
public static intRefArray1 LinearESOpenPIC2D_countParticles ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final Dist2 dField, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 0;


		final Dist1 dCount = Program.X10Util_get2DDistRank(dField, X10_TEMP3,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = dCount.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final intStub[] RX10_TEMP6 = new intStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dCount, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final int[] RX10_TEMP15 = new int/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{

						final int X10_TEMP6 = 0;

						RX10_TEMP15[RX10_TEMP13] =X10_TEMP6;
						}

;


					final intStub RX10_TEMP16 = new intStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final intStub[] RX10_TEMP17 = (intStub[])(new intStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final intStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final intRefArray1 RX10_TEMP20 = new intRefArray1(dCount, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final intRefArray1 count = RX10_TEMP20;

		/*FINISH
*/			{

			final Dist1 X10_TEMP9 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP22 = X10_TEMP9.dReg;


			final int RX10_TEMP25 = 1;


			int RX10_TEMP23 = RX10_TEMP22.regSize;


			RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


			final int  RX10_TEMP24 = RX10_TEMP23+1;

			for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
				{

				final int RX10_TEMP26 = RX10_TEMP21;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);


				final Region1 RX10_TEMP27 = X10_TEMP9.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, pl,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP9.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(X10_TEMP9, RX10_TEMP28,myUniquePlacePoint);


				final int X10_TEMP10 = RX10_TEMP32;

				//async(X10_TEMP10)
					{

					final Dist1 RX10_TEMP33 = particles.distValue;


					final Dist1 X10_TEMP11 = RX10_TEMP33;


					final int X10_TEMP12 = 0;


					final Dist1 X10_TEMP14 = Program.restrictDist1(X10_TEMP11, X10_TEMP12,X10_TEMP10);


					final Region1 RX10_TEMP35 = X10_TEMP14.dReg;


					final int RX10_TEMP38 = 1;


					int RX10_TEMP36 = RX10_TEMP35.regSize;


					RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


					final int  RX10_TEMP37 = RX10_TEMP36+1;

					for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
						{

						final int RX10_TEMP39 = RX10_TEMP34;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP35, RX10_TEMP39,X10_TEMP10);


						final Dist1 RX10_TEMP40 = particles.distValue;


						final Region1 RX10_TEMP41 = RX10_TEMP40.dReg;


						final int RX10_TEMP42 = Program.searchPointInRegion1(RX10_TEMP41, pt,X10_TEMP10);


						final int RX10_TEMP43 = 0;


						final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

						if(RX10_TEMP44)
							{

							String RX10_TEMP45 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP45);

							}

						final int RX10_TEMP46 = Program.getPlaceFromDist1(RX10_TEMP40, RX10_TEMP42,X10_TEMP10);


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

						if(RX10_TEMP49)
							{

							String RX10_TEMP47 = "Bad place access for array particles";

							throw new RuntimeException(RX10_TEMP47);

							}

						final Particle RX10_TEMP50 = Program.getRefArrayValue1Particle(particles, RX10_TEMP42,X10_TEMP10);


						final Particle X10_TEMP16 = RX10_TEMP50;


						final double X10_TEMP17 = Program.Particle_getY(X10_TEMP16,X10_TEMP10);


						final int X10_TEMP19 = (int)X10_TEMP17;


						final Point1 RX10_TEMP51 = new Point1(X10_TEMP19,X10_TEMP10);
						
Program.globalPointerHashMap.get(X10_TEMP10).add(RX10_TEMP51.hashCode());


						final Dist1 RX10_TEMP52 = count.distValue;


						final Region1 RX10_TEMP53 = RX10_TEMP52.dReg;


						final int RX10_TEMP54 = Program.searchPointInRegion1(RX10_TEMP53, RX10_TEMP51,X10_TEMP10);


						final int RX10_TEMP55 = 0;


						final boolean RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55;

						if(RX10_TEMP56)
							{

							String RX10_TEMP57 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP57);

							}

						final int RX10_TEMP58 = Program.getPlaceFromDist1(RX10_TEMP52, RX10_TEMP54,X10_TEMP10);


						final int RX10_TEMP60 = 0;


						final boolean RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60;

						if(RX10_TEMP61)
							{

							String RX10_TEMP59 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP59);

							}

						final int RX10_TEMP62 = Program.getRefArrayValue1int(count, RX10_TEMP54,X10_TEMP10);


						final int X10_TEMP20 = RX10_TEMP62;


						final int X10_TEMP21 = 1;


						final Point1 RX10_TEMP63 = new Point1(X10_TEMP19,X10_TEMP10);
						
Program.globalPointerHashMap.get(X10_TEMP10).add(RX10_TEMP63.hashCode());


						final Dist1 RX10_TEMP64 = count.distValue;


						final Region1 RX10_TEMP65 = RX10_TEMP64.dReg;


						final int RX10_TEMP66 = Program.searchPointInRegion1(RX10_TEMP65, RX10_TEMP63,X10_TEMP10);


						final int RX10_TEMP67 = 0;


						final boolean RX10_TEMP68 = RX10_TEMP66 < RX10_TEMP67;

						if(RX10_TEMP68)
							{

							String RX10_TEMP69 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP69);

							}

						final int RX10_TEMP70 = Program.getPlaceFromDist1(RX10_TEMP64, RX10_TEMP66,X10_TEMP10);


						final int RX10_TEMP72 = 0;


						final boolean RX10_TEMP73 = RX10_TEMP70 != RX10_TEMP72;

						if(RX10_TEMP73)
							{

							String RX10_TEMP71 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP71);

							}

						final int RX10_TEMP74 = Program.getRefArrayValue1int(count, RX10_TEMP66,X10_TEMP10);


						final int X10_TEMP22 = RX10_TEMP74;


						final int X10_TEMP23 = X10_TEMP22 + X10_TEMP21;


						final Point1 RX10_TEMP75 = new Point1(X10_TEMP19,X10_TEMP10);
						
Program.globalPointerHashMap.get(X10_TEMP10).add(RX10_TEMP75.hashCode());


						final Dist1 RX10_TEMP76 = count.distValue;


						final Region1 RX10_TEMP77 = RX10_TEMP76.dReg;


						final int RX10_TEMP78 = Program.searchPointInRegion1(RX10_TEMP77, RX10_TEMP75,X10_TEMP10);


						final int RX10_TEMP79 = 0;


						final boolean RX10_TEMP80 = RX10_TEMP78 < RX10_TEMP79;

						if(RX10_TEMP80)
							{

							String RX10_TEMP81 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP81);

							}

						final int RX10_TEMP82 = Program.getPlaceFromDist1(RX10_TEMP76, RX10_TEMP78,X10_TEMP10);


						final int RX10_TEMP84 = 0;


						final boolean RX10_TEMP85 = RX10_TEMP82 != RX10_TEMP84;

						if(RX10_TEMP85)
							{

							String RX10_TEMP83 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP83);

							}
						Program.setRefArrayValue1int(count, RX10_TEMP78, X10_TEMP23,X10_TEMP10);
						}
					}
				}
			}
		return count;
		}
public static Dist2 LinearESOpenPIC2D_repartition ( final LinearESOpenPIC2D X10_TEMP0, final intRefArray1 particleCount, final Dist2 dField, final double countAve, int myUniquePlacePoint)
		{

		final int MAX = 32;


		final Dist1 X10_TEMP2 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP2;


		final int X10_TEMP6 = 0;


		final Dist1 dGrids = Program.X10Util_get2DDistRank(dField, X10_TEMP6,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dField.dReg;


		final Region2 rField = RX10_TEMP0;


		final int X10_TEMP11 = 1;


		final Region1 rRows = Program.X10Util_getRank2D(rField, X10_TEMP11,myUniquePlacePoint);


		final Region1 RX10_TEMP1 = dUnique.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final doubleStub[] RX10_TEMP7 = new doubleStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount1(dUnique, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP15 = RX10_TEMP13+1;


					final double[] RX10_TEMP16 = new double/*NewUpdatableArray*/[RX10_TEMP15];
/*arrayInitBlock*/
for(int RX10_TEMP14= 0;RX10_TEMP14 <RX10_TEMP16.length ;RX10_TEMP14++ )						{

						final double X10_TEMP14 = 0.0;

						RX10_TEMP16[RX10_TEMP14] =X10_TEMP14;
						}

;


					final doubleStub RX10_TEMP17 = new doubleStub(RX10_TEMP16,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP17.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP17;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP18 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP20= 0;RX10_TEMP20 <RX10_TEMP18.length ;RX10_TEMP20++ )			{

			final doubleStub RX10_TEMP19 = RX10_TEMP7[RX10_TEMP20];

			RX10_TEMP18[RX10_TEMP20] =RX10_TEMP19;
			}

;


		final doubleRefArray1 RX10_TEMP21 = new doubleRefArray1(dUnique, RX10_TEMP18,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP21.hashCode());


		final doubleRefArray1 border = RX10_TEMP21;


		final Region1 RX10_TEMP22 = dUnique.dReg;


		final int RX10_TEMP23 = 0;


		final int RX10_TEMP24 = 1;


		int RX10_TEMP25 = 1;


		RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP24;


		final int  RX10_TEMP26 = RX10_TEMP25+1;


		final int RX10_TEMP27 = RX10_TEMP25+1;


		final intStub[] RX10_TEMP28 = new intStub[RX10_TEMP27];

		/*FINISH
*/			{
			for(int RX10_TEMP29=0; RX10_TEMP29 < RX10_TEMP26; RX10_TEMP29++)
				{

				final int RX10_TEMP30 = 0;


				final int RX10_TEMP31 = RX10_TEMP29;


				final int RX10_TEMP32 = 0;


				final int RX10_TEMP33 = Program.getDistLocalCount1(dUnique, RX10_TEMP31,myUniquePlacePoint);


				final int RX10_TEMP34 = RX10_TEMP33 - RX10_TEMP24;

				//async(RX10_TEMP32)
					{

					final int RX10_TEMP36 = RX10_TEMP34+1;


					final int[] RX10_TEMP37 = new int/*NewUpdatableArray*/[RX10_TEMP36];
/*arrayInitBlock*/
for(int RX10_TEMP35= 0;RX10_TEMP35 <RX10_TEMP37.length ;RX10_TEMP35++ )						{

						final int X10_TEMP17 = 0;

						RX10_TEMP37[RX10_TEMP35] =X10_TEMP17;
						}

;


					final intStub RX10_TEMP38 = new intStub(RX10_TEMP37,RX10_TEMP32);
					
Program.globalPointerHashMap.get(RX10_TEMP32).add(RX10_TEMP38.hashCode());

					//async(RX10_TEMP30)
						{
						RX10_TEMP28[RX10_TEMP29] = RX10_TEMP38;
						}
					}
				}
			}

		final intStub[] RX10_TEMP39 = (intStub[])(new intStub/*value*/[RX10_TEMP26]);
/*arrayInitBlock*/
for(int RX10_TEMP41= 0;RX10_TEMP41 <RX10_TEMP39.length ;RX10_TEMP41++ )			{

			final intStub RX10_TEMP40 = RX10_TEMP28[RX10_TEMP41];

			RX10_TEMP39[RX10_TEMP41] =RX10_TEMP40;
			}

;


		final intRefArray1 RX10_TEMP42 = new intRefArray1(dUnique, RX10_TEMP39,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP42.hashCode());


		final intRefArray1 particleTotals = RX10_TEMP42;


		final Region1 RX10_TEMP43 = dUnique.dReg;


		final int RX10_TEMP44 = 0;


		final int RX10_TEMP45 = 1;


		int RX10_TEMP46 = 1;


		RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP45;


		final int  RX10_TEMP47 = RX10_TEMP46+1;


		final int RX10_TEMP48 = RX10_TEMP46+1;


		final intStub[] RX10_TEMP49 = new intStub[RX10_TEMP48];

		/*FINISH
*/			{
			for(int RX10_TEMP50=0; RX10_TEMP50 < RX10_TEMP47; RX10_TEMP50++)
				{

				final int RX10_TEMP51 = 0;


				final int RX10_TEMP52 = RX10_TEMP50;


				final int RX10_TEMP53 = 0;


				final int RX10_TEMP54 = Program.getDistLocalCount1(dUnique, RX10_TEMP52,myUniquePlacePoint);


				final int RX10_TEMP55 = RX10_TEMP54 - RX10_TEMP45;

				//async(RX10_TEMP53)
					{

					final int RX10_TEMP57 = RX10_TEMP55+1;


					final int[] RX10_TEMP58 = new int/*NewUpdatableArray*/[RX10_TEMP57];
/*arrayInitBlock*/
for(int RX10_TEMP56= 0;RX10_TEMP56 <RX10_TEMP58.length ;RX10_TEMP56++ )						{

						final int X10_TEMP20 = 0;

						RX10_TEMP58[RX10_TEMP56] =X10_TEMP20;
						}

;


					final intStub RX10_TEMP59 = new intStub(RX10_TEMP58,RX10_TEMP53);
					
Program.globalPointerHashMap.get(RX10_TEMP53).add(RX10_TEMP59.hashCode());

					//async(RX10_TEMP51)
						{
						RX10_TEMP49[RX10_TEMP50] = RX10_TEMP59;
						}
					}
				}
			}

		final intStub[] RX10_TEMP60 = (intStub[])(new intStub/*value*/[RX10_TEMP47]);
/*arrayInitBlock*/
for(int RX10_TEMP62= 0;RX10_TEMP62 <RX10_TEMP60.length ;RX10_TEMP62++ )			{

			final intStub RX10_TEMP61 = RX10_TEMP49[RX10_TEMP62];

			RX10_TEMP60[RX10_TEMP62] =RX10_TEMP61;
			}

;


		final intRefArray1 RX10_TEMP63 = new intRefArray1(dUnique, RX10_TEMP60,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP63.hashCode());


		final intRefArray1 gridTotals = RX10_TEMP63;


		final Dist1 X10_TEMP22 = Program.getUniqueDist(myUniquePlacePoint);


		final int X10_TEMP27 = 0;


		final int X10_TEMP25 = 1;


		final int X10_TEMP28 = MAX - X10_TEMP25;


		final Region1 X10_TEMP30 = Program.createNewRegion1R(X10_TEMP27, X10_TEMP28,myUniquePlacePoint);


		final Dist2 dBuffer = Program.X10Util_extendDistRank2D(X10_TEMP22, X10_TEMP30,myUniquePlacePoint);


		final Region2 RX10_TEMP64 = dBuffer.dReg;


		final int RX10_TEMP65 = 0;


		final int RX10_TEMP66 = 1;


		int RX10_TEMP67 = 1;


		RX10_TEMP67 = RX10_TEMP67 - RX10_TEMP66;


		final int  RX10_TEMP68 = RX10_TEMP67+1;


		final int RX10_TEMP69 = RX10_TEMP67+1;


		final intStub[] RX10_TEMP70 = new intStub[RX10_TEMP69];

		/*FINISH
*/			{
			for(int RX10_TEMP71=0; RX10_TEMP71 < RX10_TEMP68; RX10_TEMP71++)
				{

				final int RX10_TEMP72 = 0;


				final int RX10_TEMP73 = RX10_TEMP71;


				final int RX10_TEMP74 = 0;


				final int RX10_TEMP75 = Program.getDistLocalCount2(dBuffer, RX10_TEMP73,myUniquePlacePoint);


				final int RX10_TEMP76 = RX10_TEMP75 - RX10_TEMP66;

				//async(RX10_TEMP74)
					{

					final int RX10_TEMP77 = RX10_TEMP76+1;


					final int[] RX10_TEMP78 = new int[RX10_TEMP77];


					final intStub RX10_TEMP79 = new intStub(RX10_TEMP78,RX10_TEMP74);
					
Program.globalPointerHashMap.get(RX10_TEMP74).add(RX10_TEMP79.hashCode());

					//async(RX10_TEMP72)
						{
						RX10_TEMP70[RX10_TEMP71] = RX10_TEMP79;
						}
					}
				}
			}

		final intStub[] RX10_TEMP80 = (intStub[])(new intStub/*value*/[RX10_TEMP68]);
/*arrayInitBlock*/
for(int RX10_TEMP82= 0;RX10_TEMP82 <RX10_TEMP80.length ;RX10_TEMP82++ )			{

			final intStub RX10_TEMP81 = RX10_TEMP70[RX10_TEMP82];

			RX10_TEMP80[RX10_TEMP82] =RX10_TEMP81;
			}

;


		final intRefArray2 RX10_TEMP83 = new intRefArray2(dBuffer, RX10_TEMP80,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP83.hashCode());


		final intRefArray2 sCountBuffer = RX10_TEMP83;


		final Region2 RX10_TEMP84 = dBuffer.dReg;


		final int RX10_TEMP85 = 0;


		final int RX10_TEMP86 = 1;


		int RX10_TEMP87 = 1;


		RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP86;


		final int  RX10_TEMP88 = RX10_TEMP87+1;


		final int RX10_TEMP89 = RX10_TEMP87+1;


		final intStub[] RX10_TEMP90 = new intStub[RX10_TEMP89];

		/*FINISH
*/			{
			for(int RX10_TEMP91=0; RX10_TEMP91 < RX10_TEMP88; RX10_TEMP91++)
				{

				final int RX10_TEMP92 = 0;


				final int RX10_TEMP93 = RX10_TEMP91;


				final int RX10_TEMP94 = 0;


				final int RX10_TEMP95 = Program.getDistLocalCount2(dBuffer, RX10_TEMP93,myUniquePlacePoint);


				final int RX10_TEMP96 = RX10_TEMP95 - RX10_TEMP86;

				//async(RX10_TEMP94)
					{

					final int RX10_TEMP97 = RX10_TEMP96+1;


					final int[] RX10_TEMP98 = new int[RX10_TEMP97];


					final intStub RX10_TEMP99 = new intStub(RX10_TEMP98,RX10_TEMP94);
					
Program.globalPointerHashMap.get(RX10_TEMP94).add(RX10_TEMP99.hashCode());

					//async(RX10_TEMP92)
						{
						RX10_TEMP90[RX10_TEMP91] = RX10_TEMP99;
						}
					}
				}
			}

		final intStub[] RX10_TEMP100 = (intStub[])(new intStub/*value*/[RX10_TEMP88]);
/*arrayInitBlock*/
for(int RX10_TEMP102= 0;RX10_TEMP102 <RX10_TEMP100.length ;RX10_TEMP102++ )			{

			final intStub RX10_TEMP101 = RX10_TEMP90[RX10_TEMP102];

			RX10_TEMP100[RX10_TEMP102] =RX10_TEMP101;
			}

;


		final intRefArray2 RX10_TEMP103 = new intRefArray2(dBuffer, RX10_TEMP100,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP103.hashCode());


		final intRefArray2 rCountBuffer = RX10_TEMP103;


		final Region1 RX10_TEMP104 = dUnique.dReg;


		final int RX10_TEMP105 = 0;


		final int RX10_TEMP106 = 1;


		int RX10_TEMP107 = 1;


		RX10_TEMP107 = RX10_TEMP107 - RX10_TEMP106;


		final int  RX10_TEMP108 = RX10_TEMP107+1;


		final int RX10_TEMP109 = RX10_TEMP107+1;


		final intStub[] RX10_TEMP110 = new intStub[RX10_TEMP109];

		/*FINISH
*/			{
			for(int RX10_TEMP111=0; RX10_TEMP111 < RX10_TEMP108; RX10_TEMP111++)
				{

				final int RX10_TEMP112 = 0;


				final int RX10_TEMP113 = RX10_TEMP111;


				final int RX10_TEMP114 = 0;


				final int RX10_TEMP115 = Program.getDistLocalCount1(dUnique, RX10_TEMP113,myUniquePlacePoint);


				final int RX10_TEMP116 = RX10_TEMP115 - RX10_TEMP106;

				//async(RX10_TEMP114)
					{

					final int RX10_TEMP117 = RX10_TEMP116+1;


					final int[] RX10_TEMP118 = new int[RX10_TEMP117];


					final intStub RX10_TEMP119 = new intStub(RX10_TEMP118,RX10_TEMP114);
					
Program.globalPointerHashMap.get(RX10_TEMP114).add(RX10_TEMP119.hashCode());

					//async(RX10_TEMP112)
						{
						RX10_TEMP110[RX10_TEMP111] = RX10_TEMP119;
						}
					}
				}
			}

		final intStub[] RX10_TEMP120 = (intStub[])(new intStub/*value*/[RX10_TEMP108]);
/*arrayInitBlock*/
for(int RX10_TEMP122= 0;RX10_TEMP122 <RX10_TEMP120.length ;RX10_TEMP122++ )			{

			final intStub RX10_TEMP121 = RX10_TEMP110[RX10_TEMP122];

			RX10_TEMP120[RX10_TEMP122] =RX10_TEMP121;
			}

;


		final intRefArray1 RX10_TEMP123 = new intRefArray1(dUnique, RX10_TEMP120,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP123.hashCode());


		final intRefArray1 sendCount = RX10_TEMP123;


		final Region1 RX10_TEMP124 = dUnique.dReg;


		final int RX10_TEMP125 = 0;


		final int RX10_TEMP126 = 1;


		int RX10_TEMP127 = 1;


		RX10_TEMP127 = RX10_TEMP127 - RX10_TEMP126;


		final int  RX10_TEMP128 = RX10_TEMP127+1;


		final int RX10_TEMP129 = RX10_TEMP127+1;


		final intStub[] RX10_TEMP130 = new intStub[RX10_TEMP129];

		/*FINISH
*/			{
			for(int RX10_TEMP131=0; RX10_TEMP131 < RX10_TEMP128; RX10_TEMP131++)
				{

				final int RX10_TEMP132 = 0;


				final int RX10_TEMP133 = RX10_TEMP131;


				final int RX10_TEMP134 = 0;


				final int RX10_TEMP135 = Program.getDistLocalCount1(dUnique, RX10_TEMP133,myUniquePlacePoint);


				final int RX10_TEMP136 = RX10_TEMP135 - RX10_TEMP126;

				//async(RX10_TEMP134)
					{

					final int RX10_TEMP137 = RX10_TEMP136+1;


					final int[] RX10_TEMP138 = new int[RX10_TEMP137];


					final intStub RX10_TEMP139 = new intStub(RX10_TEMP138,RX10_TEMP134);
					
Program.globalPointerHashMap.get(RX10_TEMP134).add(RX10_TEMP139.hashCode());

					//async(RX10_TEMP132)
						{
						RX10_TEMP130[RX10_TEMP131] = RX10_TEMP139;
						}
					}
				}
			}

		final intStub[] RX10_TEMP140 = (intStub[])(new intStub/*value*/[RX10_TEMP128]);
/*arrayInitBlock*/
for(int RX10_TEMP142= 0;RX10_TEMP142 <RX10_TEMP140.length ;RX10_TEMP142++ )			{

			final intStub RX10_TEMP141 = RX10_TEMP130[RX10_TEMP142];

			RX10_TEMP140[RX10_TEMP142] =RX10_TEMP141;
			}

;


		final intRefArray1 RX10_TEMP143 = new intRefArray1(dUnique, RX10_TEMP140,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP143.hashCode());


		final intRefArray1 sendGrids = RX10_TEMP143;


		final Region1 RX10_TEMP144 = dUnique.dReg;


		final int RX10_TEMP145 = 0;


		final int RX10_TEMP146 = 1;


		int RX10_TEMP147 = 1;


		RX10_TEMP147 = RX10_TEMP147 - RX10_TEMP146;


		final int  RX10_TEMP148 = RX10_TEMP147+1;


		final int RX10_TEMP149 = RX10_TEMP147+1;


		final intStub[] RX10_TEMP150 = new intStub[RX10_TEMP149];

		/*FINISH
*/			{
			for(int RX10_TEMP151=0; RX10_TEMP151 < RX10_TEMP148; RX10_TEMP151++)
				{

				final int RX10_TEMP152 = 0;


				final int RX10_TEMP153 = RX10_TEMP151;


				final int RX10_TEMP154 = 0;


				final int RX10_TEMP155 = Program.getDistLocalCount1(dUnique, RX10_TEMP153,myUniquePlacePoint);


				final int RX10_TEMP156 = RX10_TEMP155 - RX10_TEMP146;

				//async(RX10_TEMP154)
					{

					final int RX10_TEMP157 = RX10_TEMP156+1;


					final int[] RX10_TEMP158 = new int[RX10_TEMP157];


					final intStub RX10_TEMP159 = new intStub(RX10_TEMP158,RX10_TEMP154);
					
Program.globalPointerHashMap.get(RX10_TEMP154).add(RX10_TEMP159.hashCode());

					//async(RX10_TEMP152)
						{
						RX10_TEMP150[RX10_TEMP151] = RX10_TEMP159;
						}
					}
				}
			}

		final intStub[] RX10_TEMP160 = (intStub[])(new intStub/*value*/[RX10_TEMP148]);
/*arrayInitBlock*/
for(int RX10_TEMP162= 0;RX10_TEMP162 <RX10_TEMP160.length ;RX10_TEMP162++ )			{

			final intStub RX10_TEMP161 = RX10_TEMP150[RX10_TEMP162];

			RX10_TEMP160[RX10_TEMP162] =RX10_TEMP161;
			}

;


		final intRefArray1 RX10_TEMP163 = new intRefArray1(dUnique, RX10_TEMP160,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP163.hashCode());


		final intRefArray1 recvCount = RX10_TEMP163;


		final Region1 RX10_TEMP164 = dUnique.dReg;


		final int RX10_TEMP165 = 0;


		final int RX10_TEMP166 = 1;


		int RX10_TEMP167 = 1;


		RX10_TEMP167 = RX10_TEMP167 - RX10_TEMP166;


		final int  RX10_TEMP168 = RX10_TEMP167+1;


		final int RX10_TEMP169 = RX10_TEMP167+1;


		final intStub[] RX10_TEMP170 = new intStub[RX10_TEMP169];

		/*FINISH
*/			{
			for(int RX10_TEMP171=0; RX10_TEMP171 < RX10_TEMP168; RX10_TEMP171++)
				{

				final int RX10_TEMP172 = 0;


				final int RX10_TEMP173 = RX10_TEMP171;


				final int RX10_TEMP174 = 0;


				final int RX10_TEMP175 = Program.getDistLocalCount1(dUnique, RX10_TEMP173,myUniquePlacePoint);


				final int RX10_TEMP176 = RX10_TEMP175 - RX10_TEMP166;

				//async(RX10_TEMP174)
					{

					final int RX10_TEMP177 = RX10_TEMP176+1;


					final int[] RX10_TEMP178 = new int[RX10_TEMP177];


					final intStub RX10_TEMP179 = new intStub(RX10_TEMP178,RX10_TEMP174);
					
Program.globalPointerHashMap.get(RX10_TEMP174).add(RX10_TEMP179.hashCode());

					//async(RX10_TEMP172)
						{
						RX10_TEMP170[RX10_TEMP171] = RX10_TEMP179;
						}
					}
				}
			}

		final intStub[] RX10_TEMP180 = (intStub[])(new intStub/*value*/[RX10_TEMP168]);
/*arrayInitBlock*/
for(int RX10_TEMP182= 0;RX10_TEMP182 <RX10_TEMP180.length ;RX10_TEMP182++ )			{

			final intStub RX10_TEMP181 = RX10_TEMP170[RX10_TEMP182];

			RX10_TEMP180[RX10_TEMP182] =RX10_TEMP181;
			}

;


		final intRefArray1 RX10_TEMP183 = new intRefArray1(dUnique, RX10_TEMP180,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP183.hashCode());


		final intRefArray1 recvGrids = RX10_TEMP183;


		final Region1 RX10_TEMP184 = dUnique.dReg;


		final int RX10_TEMP185 = 0;


		final int RX10_TEMP186 = 1;


		int RX10_TEMP187 = 1;


		RX10_TEMP187 = RX10_TEMP187 - RX10_TEMP186;


		final int  RX10_TEMP188 = RX10_TEMP187+1;


		final int RX10_TEMP189 = RX10_TEMP187+1;


		final intStub[] RX10_TEMP190 = new intStub[RX10_TEMP189];

		/*FINISH
*/			{
			for(int RX10_TEMP191=0; RX10_TEMP191 < RX10_TEMP188; RX10_TEMP191++)
				{

				final int RX10_TEMP192 = 0;


				final int RX10_TEMP193 = RX10_TEMP191;


				final int RX10_TEMP194 = 0;


				final int RX10_TEMP195 = Program.getDistLocalCount1(dUnique, RX10_TEMP193,myUniquePlacePoint);


				final int RX10_TEMP196 = RX10_TEMP195 - RX10_TEMP186;

				//async(RX10_TEMP194)
					{

					final int RX10_TEMP198 = RX10_TEMP196+1;


					final int[] RX10_TEMP199 = new int/*NewUpdatableArray*/[RX10_TEMP198];
/*arrayInitBlock*/
for(int RX10_TEMP197= 0;RX10_TEMP197 <RX10_TEMP199.length ;RX10_TEMP197++ )						{

						final int X10_TEMP39 = 0;

						RX10_TEMP199[RX10_TEMP197] =X10_TEMP39;
						}

;


					final intStub RX10_TEMP200 = new intStub(RX10_TEMP199,RX10_TEMP194);
					
Program.globalPointerHashMap.get(RX10_TEMP194).add(RX10_TEMP200.hashCode());

					//async(RX10_TEMP192)
						{
						RX10_TEMP190[RX10_TEMP191] = RX10_TEMP200;
						}
					}
				}
			}

		final intStub[] RX10_TEMP201 = (intStub[])(new intStub/*value*/[RX10_TEMP188]);
/*arrayInitBlock*/
for(int RX10_TEMP203= 0;RX10_TEMP203 <RX10_TEMP201.length ;RX10_TEMP203++ )			{

			final intStub RX10_TEMP202 = RX10_TEMP190[RX10_TEMP203];

			RX10_TEMP201[RX10_TEMP203] =RX10_TEMP202;
			}

;


		final intRefArray1 RX10_TEMP204 = new intRefArray1(dUnique, RX10_TEMP201,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP204.hashCode());


		final intRefArray1 finished = RX10_TEMP204;

		/*FINISH
*/			{

			final Dist1 X10_TEMP42 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP206 = X10_TEMP42.dReg;


			final int RX10_TEMP209 = 1;


			int RX10_TEMP207 = RX10_TEMP206.regSize;


			RX10_TEMP207 = RX10_TEMP207 - RX10_TEMP209;


			final int  RX10_TEMP208 = RX10_TEMP207+1;

			for(int RX10_TEMP205=0; RX10_TEMP205 < RX10_TEMP208; RX10_TEMP205++)
				{

				final int RX10_TEMP210 = RX10_TEMP205;


				final Point1 X10_TEMP43 = Program.regionOrdinalPoint1(RX10_TEMP206, RX10_TEMP210,myUniquePlacePoint);


				final int pl = X10_TEMP43.f0;


				final Region1 RX10_TEMP211 = X10_TEMP42.dReg;


				final int RX10_TEMP212 = Program.searchPointInRegion1(RX10_TEMP211, X10_TEMP43,myUniquePlacePoint);


				final int RX10_TEMP213 = 0;


				final boolean RX10_TEMP214 = RX10_TEMP212 < RX10_TEMP213;

				if(RX10_TEMP214)
					{

					final String RX10_TEMP215 = "Point X10_TEMP43 not found in the distribution X10_TEMP42.";

					throw new RuntimeException(RX10_TEMP215);

					}

				final int RX10_TEMP216 = Program.getPlaceFromDist1(X10_TEMP42, RX10_TEMP212,myUniquePlacePoint);


				final int X10_TEMP44 = RX10_TEMP216;

				//async(X10_TEMP44)
					{

					final Dist1 RX10_TEMP217 = particleCount.distValue;


					final Dist1 dPC = RX10_TEMP217;


					final Region1 rLocal = Program.X10Util_get1DLRegion(dPC,X10_TEMP44);


					final int rsize = rLocal.regSize;


					final int X10_TEMP49 = 0;


					final boolean X10_TEMP51 = rsize > X10_TEMP49;


					final boolean X10_TEMP52 = X10_TEMP51;


					int X10_TEMP55 = 0;

					if(X10_TEMP52)
						{

						final int RX10_TEMP218 = rLocal.regSize;


						final int RX10_TEMP219 = 0;


						final boolean RX10_TEMP220 = RX10_TEMP218 <= RX10_TEMP219;

						if(RX10_TEMP220)
							{

							final String RX10_TEMP221 = "Operation low() not defined on empty region rLocal";

							throw new RuntimeException(RX10_TEMP221);

							}

						X10_TEMP55 = Program.regionLow(rLocal,X10_TEMP44);

						}

					final int X10_TEMP56 = X10_TEMP55;


					final int offset = X10_TEMP56;


					int total = 0;


					final Dist1 RX10_TEMP222 = particleCount.distValue;


					final Dist1 X10_TEMP58 = RX10_TEMP222;


					final int X10_TEMP59 = 0;


					final Dist1 X10_TEMP61 = Program.restrictDist1(X10_TEMP58, X10_TEMP59,X10_TEMP44);


					final Region1 RX10_TEMP225 = X10_TEMP61.dReg;


					final int RX10_TEMP228 = 1;


					int RX10_TEMP226 = RX10_TEMP225.regSize;


					RX10_TEMP226 = RX10_TEMP226 - RX10_TEMP228;


					final int  RX10_TEMP227 = RX10_TEMP226+1;

					for(int RX10_TEMP223=0; RX10_TEMP223 < RX10_TEMP227; RX10_TEMP223++)
						{

						final int RX10_TEMP229 = RX10_TEMP223;


						final Point1 RX10_TEMP224 = Program.regionOrdinalPoint1(RX10_TEMP225, RX10_TEMP229,X10_TEMP44);


						final int i = RX10_TEMP224.f0;


						final Point1 RX10_TEMP230 = new Point1(i,X10_TEMP44);
						
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP230.hashCode());


						final Dist1 RX10_TEMP231 = particleCount.distValue;


						final Region1 RX10_TEMP232 = RX10_TEMP231.dReg;


						final int RX10_TEMP233 = Program.searchPointInRegion1(RX10_TEMP232, RX10_TEMP230,X10_TEMP44);


						final int RX10_TEMP234 = 0;


						final boolean RX10_TEMP235 = RX10_TEMP233 < RX10_TEMP234;

						if(RX10_TEMP235)
							{

							String RX10_TEMP236 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP236);

							}

						final int RX10_TEMP237 = Program.getPlaceFromDist1(RX10_TEMP231, RX10_TEMP233,X10_TEMP44);


						final int RX10_TEMP239 = 0;


						final boolean RX10_TEMP240 = RX10_TEMP237 != RX10_TEMP239;

						if(RX10_TEMP240)
							{

							String RX10_TEMP238 = "Bad place access for array particleCount";

							throw new RuntimeException(RX10_TEMP238);

							}

						final int RX10_TEMP241 = Program.getRefArrayValue1int(particleCount, RX10_TEMP233,X10_TEMP44);


						final int count = RX10_TEMP241;


						final int X10_TEMP66 = i - offset;


						final int X10_TEMP69 = count;


						final Point2 RX10_TEMP242 = new Point2(pl, X10_TEMP66,X10_TEMP44);
						
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP242.hashCode());


						final Dist2 RX10_TEMP243 = sCountBuffer.distValue;


						final Region2 RX10_TEMP244 = RX10_TEMP243.dReg;


						final int RX10_TEMP245 = Program.searchPointInRegion2(RX10_TEMP244, RX10_TEMP242,X10_TEMP44);


						final int RX10_TEMP246 = 0;


						final boolean RX10_TEMP247 = RX10_TEMP245 < RX10_TEMP246;

						if(RX10_TEMP247)
							{

							String RX10_TEMP248 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP248);

							}

						final int RX10_TEMP249 = Program.getPlaceFromDist2(RX10_TEMP243, RX10_TEMP245,X10_TEMP44);


						final int RX10_TEMP251 = 0;


						final boolean RX10_TEMP252 = RX10_TEMP249 != RX10_TEMP251;

						if(RX10_TEMP252)
							{

							String RX10_TEMP250 = "Bad place access for array sCountBuffer";

							throw new RuntimeException(RX10_TEMP250);

							}
						Program.setRefArrayValue2int(sCountBuffer, RX10_TEMP245, X10_TEMP69,X10_TEMP44);

						final int X10_TEMP71 = total + count;


						total = X10_TEMP71;

						}

					final int X10_TEMP75 = total;


					final Point1 RX10_TEMP253 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP253.hashCode());


					final Dist1 RX10_TEMP254 = particleTotals.distValue;


					final Region1 RX10_TEMP255 = RX10_TEMP254.dReg;


					final int RX10_TEMP256 = Program.searchPointInRegion1(RX10_TEMP255, RX10_TEMP253,X10_TEMP44);


					final int RX10_TEMP257 = 0;


					final boolean RX10_TEMP258 = RX10_TEMP256 < RX10_TEMP257;

					if(RX10_TEMP258)
						{

						String RX10_TEMP259 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP259);

						}

					final int RX10_TEMP260 = Program.getPlaceFromDist1(RX10_TEMP254, RX10_TEMP256,X10_TEMP44);


					final int RX10_TEMP262 = 0;


					final boolean RX10_TEMP263 = RX10_TEMP260 != RX10_TEMP262;

					if(RX10_TEMP263)
						{

						String RX10_TEMP261 = "Bad place access for array particleTotals";

						throw new RuntimeException(RX10_TEMP261);

						}
					Program.setRefArrayValue1int(particleTotals, RX10_TEMP256, X10_TEMP75,X10_TEMP44);

					final int X10_TEMP79 = rsize;


					final Point1 RX10_TEMP264 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP264.hashCode());


					final Dist1 RX10_TEMP265 = gridTotals.distValue;


					final Region1 RX10_TEMP266 = RX10_TEMP265.dReg;


					final int RX10_TEMP267 = Program.searchPointInRegion1(RX10_TEMP266, RX10_TEMP264,X10_TEMP44);


					final int RX10_TEMP268 = 0;


					final boolean RX10_TEMP269 = RX10_TEMP267 < RX10_TEMP268;

					if(RX10_TEMP269)
						{

						String RX10_TEMP270 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP270);

						}

					final int RX10_TEMP271 = Program.getPlaceFromDist1(RX10_TEMP265, RX10_TEMP267,X10_TEMP44);


					final int RX10_TEMP273 = 0;


					final boolean RX10_TEMP274 = RX10_TEMP271 != RX10_TEMP273;

					if(RX10_TEMP274)
						{

						String RX10_TEMP272 = "Bad place access for array gridTotals";

						throw new RuntimeException(RX10_TEMP272);

						}
					Program.setRefArrayValue1int(gridTotals, RX10_TEMP267, X10_TEMP79,X10_TEMP44);

					final int X10_TEMP83 = total;


					final Point1 RX10_TEMP275 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP275.hashCode());


					final Dist1 RX10_TEMP276 = sendCount.distValue;


					final Region1 RX10_TEMP277 = RX10_TEMP276.dReg;


					final int RX10_TEMP278 = Program.searchPointInRegion1(RX10_TEMP277, RX10_TEMP275,X10_TEMP44);


					final int RX10_TEMP279 = 0;


					final boolean RX10_TEMP280 = RX10_TEMP278 < RX10_TEMP279;

					if(RX10_TEMP280)
						{

						String RX10_TEMP281 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP281);

						}

					final int RX10_TEMP282 = Program.getPlaceFromDist1(RX10_TEMP276, RX10_TEMP278,X10_TEMP44);


					final int RX10_TEMP284 = 0;


					final boolean RX10_TEMP285 = RX10_TEMP282 != RX10_TEMP284;

					if(RX10_TEMP285)
						{

						String RX10_TEMP283 = "Bad place access for array sendCount";

						throw new RuntimeException(RX10_TEMP283);

						}
					Program.setRefArrayValue1int(sendCount, RX10_TEMP278, X10_TEMP83,X10_TEMP44);

					final int X10_TEMP87 = rsize;


					final Point1 RX10_TEMP286 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP286.hashCode());


					final Dist1 RX10_TEMP287 = sendGrids.distValue;


					final Region1 RX10_TEMP288 = RX10_TEMP287.dReg;


					final int RX10_TEMP289 = Program.searchPointInRegion1(RX10_TEMP288, RX10_TEMP286,X10_TEMP44);


					final int RX10_TEMP290 = 0;


					final boolean RX10_TEMP291 = RX10_TEMP289 < RX10_TEMP290;

					if(RX10_TEMP291)
						{

						String RX10_TEMP292 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP292);

						}

					final int RX10_TEMP293 = Program.getPlaceFromDist1(RX10_TEMP287, RX10_TEMP289,X10_TEMP44);


					final int RX10_TEMP295 = 0;


					final boolean RX10_TEMP296 = RX10_TEMP293 != RX10_TEMP295;

					if(RX10_TEMP296)
						{

						String RX10_TEMP294 = "Bad place access for array sendGrids";

						throw new RuntimeException(RX10_TEMP294);

						}
					Program.setRefArrayValue1int(sendGrids, RX10_TEMP289, X10_TEMP87,X10_TEMP44);

					final int X10_TEMP91 = 0;


					final int X10_TEMP92 = X10_TEMP91;


					final Point1 RX10_TEMP297 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP297.hashCode());


					final Dist1 RX10_TEMP298 = recvCount.distValue;


					final Region1 RX10_TEMP299 = RX10_TEMP298.dReg;


					final int RX10_TEMP300 = Program.searchPointInRegion1(RX10_TEMP299, RX10_TEMP297,X10_TEMP44);


					final int RX10_TEMP301 = 0;


					final boolean RX10_TEMP302 = RX10_TEMP300 < RX10_TEMP301;

					if(RX10_TEMP302)
						{

						String RX10_TEMP303 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP303);

						}

					final int RX10_TEMP304 = Program.getPlaceFromDist1(RX10_TEMP298, RX10_TEMP300,X10_TEMP44);


					final int RX10_TEMP306 = 0;


					final boolean RX10_TEMP307 = RX10_TEMP304 != RX10_TEMP306;

					if(RX10_TEMP307)
						{

						String RX10_TEMP305 = "Bad place access for array recvCount";

						throw new RuntimeException(RX10_TEMP305);

						}
					Program.setRefArrayValue1int(recvCount, RX10_TEMP300, X10_TEMP92,X10_TEMP44);

					final int X10_TEMP96 = 0;


					final int X10_TEMP97 = X10_TEMP96;


					final Point1 RX10_TEMP308 = new Point1(pl,X10_TEMP44);
					
Program.globalPointerHashMap.get(X10_TEMP44).add(RX10_TEMP308.hashCode());


					final Dist1 RX10_TEMP309 = recvGrids.distValue;


					final Region1 RX10_TEMP310 = RX10_TEMP309.dReg;


					final int RX10_TEMP311 = Program.searchPointInRegion1(RX10_TEMP310, RX10_TEMP308,X10_TEMP44);


					final int RX10_TEMP312 = 0;


					final boolean RX10_TEMP313 = RX10_TEMP311 < RX10_TEMP312;

					if(RX10_TEMP313)
						{

						String RX10_TEMP314 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP314);

						}

					final int RX10_TEMP315 = Program.getPlaceFromDist1(RX10_TEMP309, RX10_TEMP311,X10_TEMP44);


					final int RX10_TEMP317 = 0;


					final boolean RX10_TEMP318 = RX10_TEMP315 != RX10_TEMP317;

					if(RX10_TEMP318)
						{

						String RX10_TEMP316 = "Bad place access for array recvGrids";

						throw new RuntimeException(RX10_TEMP316);

						}
					Program.setRefArrayValue1int(recvGrids, RX10_TEMP311, X10_TEMP97,X10_TEMP44);
					}
				}
			}

		final intRefArray1 runningPTotals = Program.LinearESOpenPIC2D_parallelPrefix(X10_TEMP0, particleTotals,myUniquePlacePoint);


		final intRefArray1 runningGTotals = Program.LinearESOpenPIC2D_parallelPrefix(X10_TEMP0, gridTotals,myUniquePlacePoint);

		/*FINISH
*/			{

			final Dist1 X10_TEMP103 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP320 = X10_TEMP103.dReg;


			final int RX10_TEMP323 = 1;


			int RX10_TEMP321 = RX10_TEMP320.regSize;


			RX10_TEMP321 = RX10_TEMP321 - RX10_TEMP323;


			final int  RX10_TEMP322 = RX10_TEMP321+1;

			for(int RX10_TEMP319=0; RX10_TEMP319 < RX10_TEMP322; RX10_TEMP319++)
				{

				final int RX10_TEMP324 = RX10_TEMP319;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP320, RX10_TEMP324,myUniquePlacePoint);


				final Region1 RX10_TEMP325 = X10_TEMP103.dReg;


				final int RX10_TEMP326 = Program.searchPointInRegion1(RX10_TEMP325, pl,myUniquePlacePoint);


				final int RX10_TEMP327 = 0;


				final boolean RX10_TEMP328 = RX10_TEMP326 < RX10_TEMP327;

				if(RX10_TEMP328)
					{

					final String RX10_TEMP329 = "Point pl not found in the distribution X10_TEMP103.";

					throw new RuntimeException(RX10_TEMP329);

					}

				final int RX10_TEMP330 = Program.getPlaceFromDist1(X10_TEMP103, RX10_TEMP326,myUniquePlacePoint);


				final int X10_TEMP104 = RX10_TEMP330;

				//async(X10_TEMP104)
					{

					final Dist1 RX10_TEMP331 = runningPTotals.distValue;


					final Region1 RX10_TEMP332 = RX10_TEMP331.dReg;


					final int RX10_TEMP333 = Program.searchPointInRegion1(RX10_TEMP332, pl,X10_TEMP104);


					final int RX10_TEMP334 = 0;


					final boolean RX10_TEMP335 = RX10_TEMP333 < RX10_TEMP334;

					if(RX10_TEMP335)
						{

						String RX10_TEMP336 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP336);

						}

					final int RX10_TEMP337 = Program.getPlaceFromDist1(RX10_TEMP331, RX10_TEMP333,X10_TEMP104);


					final int RX10_TEMP339 = 0;


					final boolean RX10_TEMP340 = RX10_TEMP337 != RX10_TEMP339;

					if(RX10_TEMP340)
						{

						String RX10_TEMP338 = "Bad place access for array runningPTotals";

						throw new RuntimeException(RX10_TEMP338);

						}

					final int RX10_TEMP341 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP333,X10_TEMP104);


					final int X10_TEMP109 = RX10_TEMP341;


					final int X10_TEMP110 = X10_TEMP109;


					final Dist1 RX10_TEMP342 = particleTotals.distValue;


					final Region1 RX10_TEMP343 = RX10_TEMP342.dReg;


					final int RX10_TEMP344 = Program.searchPointInRegion1(RX10_TEMP343, pl,X10_TEMP104);


					final int RX10_TEMP345 = 0;


					final boolean RX10_TEMP346 = RX10_TEMP344 < RX10_TEMP345;

					if(RX10_TEMP346)
						{

						String RX10_TEMP347 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP347);

						}

					final int RX10_TEMP348 = Program.getPlaceFromDist1(RX10_TEMP342, RX10_TEMP344,X10_TEMP104);


					final int RX10_TEMP350 = 0;


					final boolean RX10_TEMP351 = RX10_TEMP348 != RX10_TEMP350;

					if(RX10_TEMP351)
						{

						String RX10_TEMP349 = "Bad place access for array particleTotals";

						throw new RuntimeException(RX10_TEMP349);

						}
					Program.setRefArrayValue1int(particleTotals, RX10_TEMP344, X10_TEMP110,X10_TEMP104);

					final Dist1 RX10_TEMP352 = runningGTotals.distValue;


					final Region1 RX10_TEMP353 = RX10_TEMP352.dReg;


					final int RX10_TEMP354 = Program.searchPointInRegion1(RX10_TEMP353, pl,X10_TEMP104);


					final int RX10_TEMP355 = 0;


					final boolean RX10_TEMP356 = RX10_TEMP354 < RX10_TEMP355;

					if(RX10_TEMP356)
						{

						String RX10_TEMP357 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP357);

						}

					final int RX10_TEMP358 = Program.getPlaceFromDist1(RX10_TEMP352, RX10_TEMP354,X10_TEMP104);


					final int RX10_TEMP360 = 0;


					final boolean RX10_TEMP361 = RX10_TEMP358 != RX10_TEMP360;

					if(RX10_TEMP361)
						{

						String RX10_TEMP359 = "Bad place access for array runningGTotals";

						throw new RuntimeException(RX10_TEMP359);

						}

					final int RX10_TEMP362 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP354,X10_TEMP104);


					final int X10_TEMP115 = RX10_TEMP362;


					final int X10_TEMP116 = X10_TEMP115;


					final Dist1 RX10_TEMP363 = gridTotals.distValue;


					final Region1 RX10_TEMP364 = RX10_TEMP363.dReg;


					final int RX10_TEMP365 = Program.searchPointInRegion1(RX10_TEMP364, pl,X10_TEMP104);


					final int RX10_TEMP366 = 0;


					final boolean RX10_TEMP367 = RX10_TEMP365 < RX10_TEMP366;

					if(RX10_TEMP367)
						{

						String RX10_TEMP368 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP368);

						}

					final int RX10_TEMP369 = Program.getPlaceFromDist1(RX10_TEMP363, RX10_TEMP365,X10_TEMP104);


					final int RX10_TEMP371 = 0;


					final boolean RX10_TEMP372 = RX10_TEMP369 != RX10_TEMP371;

					if(RX10_TEMP372)
						{

						String RX10_TEMP370 = "Bad place access for array gridTotals";

						throw new RuntimeException(RX10_TEMP370);

						}
					Program.setRefArrayValue1int(gridTotals, RX10_TEMP365, X10_TEMP116,X10_TEMP104);
					}
				}
			}

		boolean X10_TEMP117 = false;

		do 			{
			/*FINISH
*/				{

				final Dist1 X10_TEMP119 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP374 = X10_TEMP119.dReg;


				final int RX10_TEMP377 = 1;


				int RX10_TEMP375 = RX10_TEMP374.regSize;


				RX10_TEMP375 = RX10_TEMP375 - RX10_TEMP377;


				final int  RX10_TEMP376 = RX10_TEMP375+1;

				for(int RX10_TEMP373=0; RX10_TEMP373 < RX10_TEMP376; RX10_TEMP373++)
					{

					final int RX10_TEMP378 = RX10_TEMP373;


					final Point1 X10_TEMP120 = Program.regionOrdinalPoint1(RX10_TEMP374, RX10_TEMP378,myUniquePlacePoint);


					final int pl = X10_TEMP120.f0;


					final Region1 RX10_TEMP379 = X10_TEMP119.dReg;


					final int RX10_TEMP380 = Program.searchPointInRegion1(RX10_TEMP379, X10_TEMP120,myUniquePlacePoint);


					final int RX10_TEMP381 = 0;


					final boolean RX10_TEMP382 = RX10_TEMP380 < RX10_TEMP381;

					if(RX10_TEMP382)
						{

						final String RX10_TEMP383 = "Point X10_TEMP120 not found in the distribution X10_TEMP119.";

						throw new RuntimeException(RX10_TEMP383);

						}

					final int RX10_TEMP384 = Program.getPlaceFromDist1(X10_TEMP119, RX10_TEMP380,myUniquePlacePoint);


					final int X10_TEMP121 = RX10_TEMP384;

					//async(X10_TEMP121)
						{

						final int X10_TEMP122 = 1;


						final int X10_TEMP124 = pl + X10_TEMP122;


						final double X10_TEMP125 = X10_TEMP124 * countAve;


						final double X10_TEMP126 = 0.5;


						final double X10_TEMP128 = X10_TEMP125 + X10_TEMP126;


						final int expected = (int)X10_TEMP128;


						final Point1 RX10_TEMP385 = new Point1(pl,X10_TEMP121);
						
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP385.hashCode());


						final Dist1 RX10_TEMP386 = runningPTotals.distValue;


						final Region1 RX10_TEMP387 = RX10_TEMP386.dReg;


						final int RX10_TEMP388 = Program.searchPointInRegion1(RX10_TEMP387, RX10_TEMP385,X10_TEMP121);


						final int RX10_TEMP389 = 0;


						final boolean RX10_TEMP390 = RX10_TEMP388 < RX10_TEMP389;

						if(RX10_TEMP390)
							{

							String RX10_TEMP391 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP391);

							}

						final int RX10_TEMP392 = Program.getPlaceFromDist1(RX10_TEMP386, RX10_TEMP388,X10_TEMP121);


						final int RX10_TEMP394 = 0;


						final boolean RX10_TEMP395 = RX10_TEMP392 != RX10_TEMP394;

						if(RX10_TEMP395)
							{

							String RX10_TEMP393 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP393);

							}

						final int RX10_TEMP396 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP388,X10_TEMP121);


						final int X10_TEMP131 = RX10_TEMP396;


						final int surplus = X10_TEMP131 - expected;


						final double X10_TEMP133 = 0.0;


						final boolean X10_TEMP135 = surplus > X10_TEMP133;

						if(X10_TEMP135)
							{

							final int X10_TEMP141 = 0;


							final Point1 RX10_TEMP397 = new Point1(pl,X10_TEMP121);
							
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP397.hashCode());


							final Dist1 RX10_TEMP398 = sendGrids.distValue;


							final Region1 RX10_TEMP399 = RX10_TEMP398.dReg;


							final int RX10_TEMP400 = Program.searchPointInRegion1(RX10_TEMP399, RX10_TEMP397,X10_TEMP121);


							final int RX10_TEMP401 = 0;


							final boolean RX10_TEMP402 = RX10_TEMP400 < RX10_TEMP401;

							if(RX10_TEMP402)
								{

								String RX10_TEMP403 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP403);

								}

							final int RX10_TEMP404 = Program.getPlaceFromDist1(RX10_TEMP398, RX10_TEMP400,X10_TEMP121);


							final int RX10_TEMP406 = 0;


							final boolean RX10_TEMP407 = RX10_TEMP404 != RX10_TEMP406;

							if(RX10_TEMP407)
								{

								String RX10_TEMP405 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP405);

								}

							final int RX10_TEMP408 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP400,X10_TEMP121);


							final int X10_TEMP138 = RX10_TEMP408;


							final int X10_TEMP139 = 1;


							final int X10_TEMP142 = X10_TEMP138 - X10_TEMP139;


							final Region1 dSBuffer = Program.createNewRegion1R(X10_TEMP141, X10_TEMP142,X10_TEMP121);


							final Region1 RX10_TEMP409 = dSBuffer;


							final int RX10_TEMP426 = dSBuffer.regSize;


							final int RX10_TEMP427 = 1;


							final int RX10_TEMP428 = RX10_TEMP426 - RX10_TEMP427;


							final int  RX10_TEMP425 = RX10_TEMP428+1;


							final int[] RX10_TEMP429 = (int[])(new int/*value*/[RX10_TEMP425]);
/*arrayInitBlock*/
for(int RX10_TEMP410= 0;RX10_TEMP410 <RX10_TEMP429.length ;RX10_TEMP410++ )								{

								final int RX10_TEMP412 = RX10_TEMP410;


								final Point1 RX10_TEMP411 = Program.regionOrdinalPoint1(RX10_TEMP409, RX10_TEMP412,X10_TEMP121);


								final int i = RX10_TEMP411.f0;


								final Point2 RX10_TEMP413 = new Point2(pl, i,X10_TEMP121);
								
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP413.hashCode());


								final Dist2 RX10_TEMP414 = sCountBuffer.distValue;


								final Region2 RX10_TEMP415 = RX10_TEMP414.dReg;


								final int RX10_TEMP416 = Program.searchPointInRegion2(RX10_TEMP415, RX10_TEMP413,X10_TEMP121);


								final int RX10_TEMP417 = 0;


								final boolean RX10_TEMP418 = RX10_TEMP416 < RX10_TEMP417;

								if(RX10_TEMP418)
									{

									String RX10_TEMP419 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP419);

									}

								final int RX10_TEMP420 = Program.getPlaceFromDist2(RX10_TEMP414, RX10_TEMP416,X10_TEMP121);


								final int RX10_TEMP422 = 0;


								final boolean RX10_TEMP423 = RX10_TEMP420 != RX10_TEMP422;

								if(RX10_TEMP423)
									{

									String RX10_TEMP421 = "Bad place access for array sCountBuffer";

									throw new RuntimeException(RX10_TEMP421);

									}

								final int RX10_TEMP424 = Program.getRefArrayValue2int(sCountBuffer, RX10_TEMP416,X10_TEMP121);


								final int X10_TEMP147 = RX10_TEMP424;

								RX10_TEMP429[RX10_TEMP410] =X10_TEMP147;
								}

;


							final intValArray1 RX10_TEMP430 = new intValArray1(dSBuffer, RX10_TEMP429,X10_TEMP121);
							
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP430.hashCode());


							final intValArray1 X10_TEMP148 = RX10_TEMP430;


							final intValArray1 sBuffer = X10_TEMP148;


							final Point1 RX10_TEMP431 = new Point1(pl,X10_TEMP121);
							
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP431.hashCode());


							final Dist1 RX10_TEMP432 = sendCount.distValue;


							final Region1 RX10_TEMP433 = RX10_TEMP432.dReg;


							final int RX10_TEMP434 = Program.searchPointInRegion1(RX10_TEMP433, RX10_TEMP431,X10_TEMP121);


							final int RX10_TEMP435 = 0;


							final boolean RX10_TEMP436 = RX10_TEMP434 < RX10_TEMP435;

							if(RX10_TEMP436)
								{

								String RX10_TEMP437 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP437);

								}

							final int RX10_TEMP438 = Program.getPlaceFromDist1(RX10_TEMP432, RX10_TEMP434,X10_TEMP121);


							final int RX10_TEMP440 = 0;


							final boolean RX10_TEMP441 = RX10_TEMP438 != RX10_TEMP440;

							if(RX10_TEMP441)
								{

								String RX10_TEMP439 = "Bad place access for array sendCount";

								throw new RuntimeException(RX10_TEMP439);

								}

							final int RX10_TEMP442 = Program.getRefArrayValue1int(sendCount, RX10_TEMP434,X10_TEMP121);


							final int nCount = RX10_TEMP442;


							final Point1 RX10_TEMP443 = new Point1(pl,X10_TEMP121);
							
Program.globalPointerHashMap.get(X10_TEMP121).add(RX10_TEMP443.hashCode());


							final Dist1 RX10_TEMP444 = sendGrids.distValue;


							final Region1 RX10_TEMP445 = RX10_TEMP444.dReg;


							final int RX10_TEMP446 = Program.searchPointInRegion1(RX10_TEMP445, RX10_TEMP443,X10_TEMP121);


							final int RX10_TEMP447 = 0;


							final boolean RX10_TEMP448 = RX10_TEMP446 < RX10_TEMP447;

							if(RX10_TEMP448)
								{

								String RX10_TEMP449 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP449);

								}

							final int RX10_TEMP450 = Program.getPlaceFromDist1(RX10_TEMP444, RX10_TEMP446,X10_TEMP121);


							final int RX10_TEMP452 = 0;


							final boolean RX10_TEMP453 = RX10_TEMP450 != RX10_TEMP452;

							if(RX10_TEMP453)
								{

								String RX10_TEMP451 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP451);

								}

							final int RX10_TEMP454 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP446,X10_TEMP121);


							final int nGrids = RX10_TEMP454;

							/*FINISH
*/								{

								final int X10_TEMP154 = 0;


								final int X10_TEMP156 = 0;

								//async(X10_TEMP156)
									{

									final int X10_TEMP157 = 0;


									final int X10_TEMP159 = 0;


									final int X10_TEMP162 = nCount;


									final Point1 RX10_TEMP455 = new Point1(X10_TEMP159,X10_TEMP156);
									
Program.globalPointerHashMap.get(X10_TEMP156).add(RX10_TEMP455.hashCode());


									final Dist1 RX10_TEMP456 = recvCount.distValue;


									final Region1 RX10_TEMP457 = RX10_TEMP456.dReg;


									final int RX10_TEMP458 = Program.searchPointInRegion1(RX10_TEMP457, RX10_TEMP455,X10_TEMP156);


									final int RX10_TEMP459 = 0;


									final boolean RX10_TEMP460 = RX10_TEMP458 < RX10_TEMP459;

									if(RX10_TEMP460)
										{

										String RX10_TEMP461 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP461);

										}

									final int RX10_TEMP462 = Program.getPlaceFromDist1(RX10_TEMP456, RX10_TEMP458,X10_TEMP156);


									final int RX10_TEMP464 = 0;


									final boolean RX10_TEMP465 = RX10_TEMP462 != RX10_TEMP464;

									if(RX10_TEMP465)
										{

										String RX10_TEMP463 = "Bad place access for array recvCount";

										throw new RuntimeException(RX10_TEMP463);

										}
									Program.setRefArrayValue1int(recvCount, RX10_TEMP458, X10_TEMP162,X10_TEMP156);

									final int X10_TEMP163 = 0;


									final int X10_TEMP165 = 0;


									final int X10_TEMP168 = nGrids;


									final Point1 RX10_TEMP466 = new Point1(X10_TEMP165,X10_TEMP156);
									
Program.globalPointerHashMap.get(X10_TEMP156).add(RX10_TEMP466.hashCode());


									final Dist1 RX10_TEMP467 = recvGrids.distValue;


									final Region1 RX10_TEMP468 = RX10_TEMP467.dReg;


									final int RX10_TEMP469 = Program.searchPointInRegion1(RX10_TEMP468, RX10_TEMP466,X10_TEMP156);


									final int RX10_TEMP470 = 0;


									final boolean RX10_TEMP471 = RX10_TEMP469 < RX10_TEMP470;

									if(RX10_TEMP471)
										{

										String RX10_TEMP472 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP472);

										}

									final int RX10_TEMP473 = Program.getPlaceFromDist1(RX10_TEMP467, RX10_TEMP469,X10_TEMP156);


									final int RX10_TEMP475 = 0;


									final boolean RX10_TEMP476 = RX10_TEMP473 != RX10_TEMP475;

									if(RX10_TEMP476)
										{

										String RX10_TEMP474 = "Bad place access for array recvGrids";

										throw new RuntimeException(RX10_TEMP474);

										}
									Program.setRefArrayValue1int(recvGrids, RX10_TEMP469, X10_TEMP168,X10_TEMP156);
									/*FINISH
*/										{

										final int X10_TEMP170 = 0;


										final int RX10_TEMP481 = 1;


										int RX10_TEMP479 = dSBuffer.regSize;


										RX10_TEMP479 = RX10_TEMP479 - RX10_TEMP481;


										final int  RX10_TEMP480 = RX10_TEMP479+1;

										for(int RX10_TEMP477=0; RX10_TEMP477 < RX10_TEMP480; RX10_TEMP477++)
											{

											final int RX10_TEMP482 = RX10_TEMP477;


											final Point1 RX10_TEMP478 = Program.regionOrdinalPoint1(dSBuffer, RX10_TEMP482,X10_TEMP156);


											final int i = RX10_TEMP478.f0;

											//async(X10_TEMP170)
												{

												final int X10_TEMP171 = 0;


												final int X10_TEMP174 = 0;


												final Point1 RX10_TEMP483 = new Point1(i,X10_TEMP170);
												
Program.globalPointerHashMap.get(X10_TEMP170).add(RX10_TEMP483.hashCode());


												final Region1 RX10_TEMP484 = sBuffer.regionValue;


												final int RX10_TEMP485 = Program.searchPointInRegion1(RX10_TEMP484, RX10_TEMP483,X10_TEMP170);


												final int RX10_TEMP486 = 0;


												final boolean RX10_TEMP487 = RX10_TEMP485 < RX10_TEMP486;

												if(RX10_TEMP487)
													{

													String RX10_TEMP488 = "Array access index out of bounds";

													throw new RuntimeException(RX10_TEMP488);

													}

												final int[] RX10_TEMP489 = (int[])(sBuffer.contents);


												final int X10_TEMP178 = RX10_TEMP489[RX10_TEMP485];


												final int X10_TEMP179 = X10_TEMP178;


												final Point2 RX10_TEMP490 = new Point2(X10_TEMP174, i,X10_TEMP170);
												
Program.globalPointerHashMap.get(X10_TEMP170).add(RX10_TEMP490.hashCode());


												final Dist2 RX10_TEMP491 = rCountBuffer.distValue;


												final Region2 RX10_TEMP492 = RX10_TEMP491.dReg;


												final int RX10_TEMP493 = Program.searchPointInRegion2(RX10_TEMP492, RX10_TEMP490,X10_TEMP170);


												final int RX10_TEMP494 = 0;


												final boolean RX10_TEMP495 = RX10_TEMP493 < RX10_TEMP494;

												if(RX10_TEMP495)
													{

													String RX10_TEMP496 = "Array index out of bounds";

													throw new RuntimeException(RX10_TEMP496);

													}

												final int RX10_TEMP497 = Program.getPlaceFromDist2(RX10_TEMP491, RX10_TEMP493,X10_TEMP170);


												final int RX10_TEMP499 = 0;


												final boolean RX10_TEMP500 = RX10_TEMP497 != RX10_TEMP499;

												if(RX10_TEMP500)
													{

													String RX10_TEMP498 = "Bad place access for array rCountBuffer";

													throw new RuntimeException(RX10_TEMP498);

													}
												Program.setRefArrayValue2int(rCountBuffer, RX10_TEMP493, X10_TEMP179,X10_TEMP170);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP181 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP502 = X10_TEMP181.dReg;


				final int RX10_TEMP505 = 1;


				int RX10_TEMP503 = RX10_TEMP502.regSize;


				RX10_TEMP503 = RX10_TEMP503 - RX10_TEMP505;


				final int  RX10_TEMP504 = RX10_TEMP503+1;

				for(int RX10_TEMP501=0; RX10_TEMP501 < RX10_TEMP504; RX10_TEMP501++)
					{

					final int RX10_TEMP506 = RX10_TEMP501;


					final Point1 X10_TEMP182 = Program.regionOrdinalPoint1(RX10_TEMP502, RX10_TEMP506,myUniquePlacePoint);


					final int pl = X10_TEMP182.f0;


					final Region1 RX10_TEMP507 = X10_TEMP181.dReg;


					final int RX10_TEMP508 = Program.searchPointInRegion1(RX10_TEMP507, X10_TEMP182,myUniquePlacePoint);


					final int RX10_TEMP509 = 0;


					final boolean RX10_TEMP510 = RX10_TEMP508 < RX10_TEMP509;

					if(RX10_TEMP510)
						{

						final String RX10_TEMP511 = "Point X10_TEMP182 not found in the distribution X10_TEMP181.";

						throw new RuntimeException(RX10_TEMP511);

						}

					final int RX10_TEMP512 = Program.getPlaceFromDist1(X10_TEMP181, RX10_TEMP508,myUniquePlacePoint);


					final int X10_TEMP183 = RX10_TEMP512;

					//async(X10_TEMP183)
						{

						final int X10_TEMP187 = 0;


						final int X10_TEMP188 = X10_TEMP187;


						final Point1 RX10_TEMP513 = new Point1(pl,X10_TEMP183);
						
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP513.hashCode());


						final Dist1 RX10_TEMP514 = finished.distValue;


						final Region1 RX10_TEMP515 = RX10_TEMP514.dReg;


						final int RX10_TEMP516 = Program.searchPointInRegion1(RX10_TEMP515, RX10_TEMP513,X10_TEMP183);


						final int RX10_TEMP517 = 0;


						final boolean RX10_TEMP518 = RX10_TEMP516 < RX10_TEMP517;

						if(RX10_TEMP518)
							{

							String RX10_TEMP519 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP519);

							}

						final int RX10_TEMP520 = Program.getPlaceFromDist1(RX10_TEMP514, RX10_TEMP516,X10_TEMP183);


						final int RX10_TEMP522 = 0;


						final boolean RX10_TEMP523 = RX10_TEMP520 != RX10_TEMP522;

						if(RX10_TEMP523)
							{

							String RX10_TEMP521 = "Bad place access for array finished";

							throw new RuntimeException(RX10_TEMP521);

							}
						Program.setRefArrayValue1int(finished, RX10_TEMP516, X10_TEMP188,X10_TEMP183);

						final double X10_TEMP189 = pl * countAve;


						final double X10_TEMP190 = 0.5;


						final double X10_TEMP192 = X10_TEMP189 + X10_TEMP190;


						final int expected1 = (int)X10_TEMP192;


						final int X10_TEMP194 = 1;


						final int X10_TEMP196 = pl + X10_TEMP194;


						final double X10_TEMP197 = X10_TEMP196 * countAve;


						final double X10_TEMP198 = 0.5;


						final double X10_TEMP200 = X10_TEMP197 + X10_TEMP198;


						final int expected2 = (int)X10_TEMP200;


						final Point1 RX10_TEMP524 = new Point1(pl,X10_TEMP183);
						
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP524.hashCode());


						final Dist1 RX10_TEMP525 = runningPTotals.distValue;


						final Region1 RX10_TEMP526 = RX10_TEMP525.dReg;


						final int RX10_TEMP527 = Program.searchPointInRegion1(RX10_TEMP526, RX10_TEMP524,X10_TEMP183);


						final int RX10_TEMP528 = 0;


						final boolean RX10_TEMP529 = RX10_TEMP527 < RX10_TEMP528;

						if(RX10_TEMP529)
							{

							String RX10_TEMP530 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP530);

							}

						final int RX10_TEMP531 = Program.getPlaceFromDist1(RX10_TEMP525, RX10_TEMP527,X10_TEMP183);


						final int RX10_TEMP533 = 0;


						final boolean RX10_TEMP534 = RX10_TEMP531 != RX10_TEMP533;

						if(RX10_TEMP534)
							{

							String RX10_TEMP532 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP532);

							}

						final int RX10_TEMP535 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP527,X10_TEMP183);


						final int X10_TEMP203 = RX10_TEMP535;


						final int X10_TEMP205 = expected1 - X10_TEMP203;


						final Point1 RX10_TEMP536 = new Point1(pl,X10_TEMP183);
						
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP536.hashCode());


						final Dist1 RX10_TEMP537 = sendCount.distValue;


						final Region1 RX10_TEMP538 = RX10_TEMP537.dReg;


						final int RX10_TEMP539 = Program.searchPointInRegion1(RX10_TEMP538, RX10_TEMP536,X10_TEMP183);


						final int RX10_TEMP540 = 0;


						final boolean RX10_TEMP541 = RX10_TEMP539 < RX10_TEMP540;

						if(RX10_TEMP541)
							{

							String RX10_TEMP542 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP542);

							}

						final int RX10_TEMP543 = Program.getPlaceFromDist1(RX10_TEMP537, RX10_TEMP539,X10_TEMP183);


						final int RX10_TEMP545 = 0;


						final boolean RX10_TEMP546 = RX10_TEMP543 != RX10_TEMP545;

						if(RX10_TEMP546)
							{

							String RX10_TEMP544 = "Bad place access for array sendCount";

							throw new RuntimeException(RX10_TEMP544);

							}

						final int RX10_TEMP547 = Program.getRefArrayValue1int(sendCount, RX10_TEMP539,X10_TEMP183);


						final int X10_TEMP206 = RX10_TEMP547;


						final int lDeficit = X10_TEMP205 + X10_TEMP206;


						final Point1 RX10_TEMP548 = new Point1(pl,X10_TEMP183);
						
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP548.hashCode());


						final Dist1 RX10_TEMP549 = runningPTotals.distValue;


						final Region1 RX10_TEMP550 = RX10_TEMP549.dReg;


						final int RX10_TEMP551 = Program.searchPointInRegion1(RX10_TEMP550, RX10_TEMP548,X10_TEMP183);


						final int RX10_TEMP552 = 0;


						final boolean RX10_TEMP553 = RX10_TEMP551 < RX10_TEMP552;

						if(RX10_TEMP553)
							{

							String RX10_TEMP554 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP554);

							}

						final int RX10_TEMP555 = Program.getPlaceFromDist1(RX10_TEMP549, RX10_TEMP551,X10_TEMP183);


						final int RX10_TEMP557 = 0;


						final boolean RX10_TEMP558 = RX10_TEMP555 != RX10_TEMP557;

						if(RX10_TEMP558)
							{

							String RX10_TEMP556 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP556);

							}

						final int RX10_TEMP559 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP551,X10_TEMP183);


						final int X10_TEMP209 = RX10_TEMP559;


						final int rDeficit = X10_TEMP209 - expected2;


						final double X10_TEMP211 = 0.0;


						final boolean X10_TEMP213 = lDeficit < X10_TEMP211;

						if(X10_TEMP213)
							{

							final Point1 RX10_TEMP560 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP560.hashCode());


							final Dist1 RX10_TEMP561 = recvCount.distValue;


							final Region1 RX10_TEMP562 = RX10_TEMP561.dReg;


							final int RX10_TEMP563 = Program.searchPointInRegion1(RX10_TEMP562, RX10_TEMP560,X10_TEMP183);


							final int RX10_TEMP564 = 0;


							final boolean RX10_TEMP565 = RX10_TEMP563 < RX10_TEMP564;

							if(RX10_TEMP565)
								{

								String RX10_TEMP566 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP566);

								}

							final int RX10_TEMP567 = Program.getPlaceFromDist1(RX10_TEMP561, RX10_TEMP563,X10_TEMP183);


							final int RX10_TEMP569 = 0;


							final boolean RX10_TEMP570 = RX10_TEMP567 != RX10_TEMP569;

							if(RX10_TEMP570)
								{

								String RX10_TEMP568 = "Bad place access for array recvCount";

								throw new RuntimeException(RX10_TEMP568);

								}

							final int RX10_TEMP571 = Program.getRefArrayValue1int(recvCount, RX10_TEMP563,X10_TEMP183);


							final int X10_TEMP215 = RX10_TEMP571;


							final int X10_TEMP216 = lDeficit + X10_TEMP215;


							final double X10_TEMP217 = 0.0;


							final boolean X10_TEMP219 = X10_TEMP216 >= X10_TEMP217;

							if(X10_TEMP219)
								{

								int total = 0;


								int oldTotal = 0;


								final Point1 RX10_TEMP572 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP572.hashCode());


								final Dist1 RX10_TEMP573 = recvGrids.distValue;


								final Region1 RX10_TEMP574 = RX10_TEMP573.dReg;


								final int RX10_TEMP575 = Program.searchPointInRegion1(RX10_TEMP574, RX10_TEMP572,X10_TEMP183);


								final int RX10_TEMP576 = 0;


								final boolean RX10_TEMP577 = RX10_TEMP575 < RX10_TEMP576;

								if(RX10_TEMP577)
									{

									String RX10_TEMP578 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP578);

									}

								final int RX10_TEMP579 = Program.getPlaceFromDist1(RX10_TEMP573, RX10_TEMP575,X10_TEMP183);


								final int RX10_TEMP581 = 0;


								final boolean RX10_TEMP582 = RX10_TEMP579 != RX10_TEMP581;

								if(RX10_TEMP582)
									{

									String RX10_TEMP580 = "Bad place access for array recvGrids";

									throw new RuntimeException(RX10_TEMP580);

									}

								final int RX10_TEMP583 = Program.getRefArrayValue1int(recvGrids, RX10_TEMP575,X10_TEMP183);


								int gsize = RX10_TEMP583;


								int i = gsize;


								boolean X10_TEMP225 = false;

								do 									{

									final int X10_TEMP226 = i;


									final int X10_TEMP227 = 1;


									i = i - X10_TEMP227;


									oldTotal = total;


									final Point2 RX10_TEMP584 = new Point2(pl, i,X10_TEMP183);
									
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP584.hashCode());


									final Dist2 RX10_TEMP585 = rCountBuffer.distValue;


									final Region2 RX10_TEMP586 = RX10_TEMP585.dReg;


									final int RX10_TEMP587 = Program.searchPointInRegion2(RX10_TEMP586, RX10_TEMP584,X10_TEMP183);


									final int RX10_TEMP588 = 0;


									final boolean RX10_TEMP589 = RX10_TEMP587 < RX10_TEMP588;

									if(RX10_TEMP589)
										{

										String RX10_TEMP590 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP590);

										}

									final int RX10_TEMP591 = Program.getPlaceFromDist2(RX10_TEMP585, RX10_TEMP587,X10_TEMP183);


									final int RX10_TEMP593 = 0;


									final boolean RX10_TEMP594 = RX10_TEMP591 != RX10_TEMP593;

									if(RX10_TEMP594)
										{

										String RX10_TEMP592 = "Bad place access for array rCountBuffer";

										throw new RuntimeException(RX10_TEMP592);

										}

									final int RX10_TEMP595 = Program.getRefArrayValue2int(rCountBuffer, RX10_TEMP587,X10_TEMP183);


									final int X10_TEMP231 = RX10_TEMP595;


									final int X10_TEMP233 = total - X10_TEMP231;


									total = X10_TEMP233;


									final boolean X10_TEMP235 = total > lDeficit;


									final int X10_TEMP234 = 0;


									final boolean X10_TEMP236 = i >= X10_TEMP234;


									X10_TEMP225 = X10_TEMP235 && X10_TEMP236;

									}
								
 while(X10_TEMP225);
								final int X10_TEMP239 = gsize - i;


								final int X10_TEMP241 = lDeficit - oldTotal;


								final double X10_TEMP243 = (double)X10_TEMP241;


								final int X10_TEMP245 = total - oldTotal;


								final double X10_TEMP247 = (double)X10_TEMP245;


								final double X10_TEMP249 = X10_TEMP243 / X10_TEMP247;


								final double X10_TEMP251 = X10_TEMP239 + X10_TEMP249;


								double offset = X10_TEMP251;


								final Point1 RX10_TEMP596 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP596.hashCode());


								final Dist1 RX10_TEMP597 = runningGTotals.distValue;


								final Region1 RX10_TEMP598 = RX10_TEMP597.dReg;


								final int RX10_TEMP599 = Program.searchPointInRegion1(RX10_TEMP598, RX10_TEMP596,X10_TEMP183);


								final int RX10_TEMP600 = 0;


								final boolean RX10_TEMP601 = RX10_TEMP599 < RX10_TEMP600;

								if(RX10_TEMP601)
									{

									String RX10_TEMP602 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP602);

									}

								final int RX10_TEMP603 = Program.getPlaceFromDist1(RX10_TEMP597, RX10_TEMP599,X10_TEMP183);


								final int RX10_TEMP605 = 0;


								final boolean RX10_TEMP606 = RX10_TEMP603 != RX10_TEMP605;

								if(RX10_TEMP606)
									{

									String RX10_TEMP604 = "Bad place access for array runningGTotals";

									throw new RuntimeException(RX10_TEMP604);

									}

								final int RX10_TEMP607 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP599,X10_TEMP183);


								final int X10_TEMP256 = RX10_TEMP607;


								final Point1 RX10_TEMP608 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP608.hashCode());


								final Dist1 RX10_TEMP609 = sendGrids.distValue;


								final Region1 RX10_TEMP610 = RX10_TEMP609.dReg;


								final int RX10_TEMP611 = Program.searchPointInRegion1(RX10_TEMP610, RX10_TEMP608,X10_TEMP183);


								final int RX10_TEMP612 = 0;


								final boolean RX10_TEMP613 = RX10_TEMP611 < RX10_TEMP612;

								if(RX10_TEMP613)
									{

									String RX10_TEMP614 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP614);

									}

								final int RX10_TEMP615 = Program.getPlaceFromDist1(RX10_TEMP609, RX10_TEMP611,X10_TEMP183);


								final int RX10_TEMP617 = 0;


								final boolean RX10_TEMP618 = RX10_TEMP615 != RX10_TEMP617;

								if(RX10_TEMP618)
									{

									String RX10_TEMP616 = "Bad place access for array sendGrids";

									throw new RuntimeException(RX10_TEMP616);

									}

								final int RX10_TEMP619 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP611,X10_TEMP183);


								final int X10_TEMP257 = RX10_TEMP619;


								final double X10_TEMP258 = X10_TEMP256 - X10_TEMP257;


								final double X10_TEMP261 = X10_TEMP258 - offset;


								final double X10_TEMP262 = X10_TEMP261;


								final Point1 RX10_TEMP620 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP620.hashCode());


								final Dist1 RX10_TEMP621 = border.distValue;


								final Region1 RX10_TEMP622 = RX10_TEMP621.dReg;


								final int RX10_TEMP623 = Program.searchPointInRegion1(RX10_TEMP622, RX10_TEMP620,X10_TEMP183);


								final int RX10_TEMP624 = 0;


								final boolean RX10_TEMP625 = RX10_TEMP623 < RX10_TEMP624;

								if(RX10_TEMP625)
									{

									String RX10_TEMP626 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP626);

									}

								final int RX10_TEMP627 = Program.getPlaceFromDist1(RX10_TEMP621, RX10_TEMP623,X10_TEMP183);


								final int RX10_TEMP629 = 0;


								final boolean RX10_TEMP630 = RX10_TEMP627 != RX10_TEMP629;

								if(RX10_TEMP630)
									{

									String RX10_TEMP628 = "Bad place access for array border";

									throw new RuntimeException(RX10_TEMP628);

									}
								Program.setRefArrayValue1double(border, RX10_TEMP623, X10_TEMP262,X10_TEMP183);
								}
							else
								{

								final Point1 RX10_TEMP631 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP631.hashCode());


								final Dist1 RX10_TEMP632 = finished.distValue;


								final Region1 RX10_TEMP633 = RX10_TEMP632.dReg;


								final int RX10_TEMP634 = Program.searchPointInRegion1(RX10_TEMP633, RX10_TEMP631,X10_TEMP183);


								final int RX10_TEMP635 = 0;


								final boolean RX10_TEMP636 = RX10_TEMP634 < RX10_TEMP635;

								if(RX10_TEMP636)
									{

									String RX10_TEMP637 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP637);

									}

								final int RX10_TEMP638 = Program.getPlaceFromDist1(RX10_TEMP632, RX10_TEMP634,X10_TEMP183);


								final int RX10_TEMP640 = 0;


								final boolean RX10_TEMP641 = RX10_TEMP638 != RX10_TEMP640;

								if(RX10_TEMP641)
									{

									String RX10_TEMP639 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP639);

									}

								final int RX10_TEMP642 = Program.getRefArrayValue1int(finished, RX10_TEMP634,X10_TEMP183);


								final int X10_TEMP264 = RX10_TEMP642;


								final int X10_TEMP265 = 1;


								final Point1 RX10_TEMP643 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP643.hashCode());


								final Dist1 RX10_TEMP644 = finished.distValue;


								final Region1 RX10_TEMP645 = RX10_TEMP644.dReg;


								final int RX10_TEMP646 = Program.searchPointInRegion1(RX10_TEMP645, RX10_TEMP643,X10_TEMP183);


								final int RX10_TEMP647 = 0;


								final boolean RX10_TEMP648 = RX10_TEMP646 < RX10_TEMP647;

								if(RX10_TEMP648)
									{

									String RX10_TEMP649 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP649);

									}

								final int RX10_TEMP650 = Program.getPlaceFromDist1(RX10_TEMP644, RX10_TEMP646,X10_TEMP183);


								final int RX10_TEMP652 = 0;


								final boolean RX10_TEMP653 = RX10_TEMP650 != RX10_TEMP652;

								if(RX10_TEMP653)
									{

									String RX10_TEMP651 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP651);

									}

								final int RX10_TEMP654 = Program.getRefArrayValue1int(finished, RX10_TEMP646,X10_TEMP183);


								final int X10_TEMP266 = RX10_TEMP654;


								final int X10_TEMP267 = X10_TEMP266 + X10_TEMP265;


								final Point1 RX10_TEMP655 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP655.hashCode());


								final Dist1 RX10_TEMP656 = finished.distValue;


								final Region1 RX10_TEMP657 = RX10_TEMP656.dReg;


								final int RX10_TEMP658 = Program.searchPointInRegion1(RX10_TEMP657, RX10_TEMP655,X10_TEMP183);


								final int RX10_TEMP659 = 0;


								final boolean RX10_TEMP660 = RX10_TEMP658 < RX10_TEMP659;

								if(RX10_TEMP660)
									{

									String RX10_TEMP661 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP661);

									}

								final int RX10_TEMP662 = Program.getPlaceFromDist1(RX10_TEMP656, RX10_TEMP658,X10_TEMP183);


								final int RX10_TEMP664 = 0;


								final boolean RX10_TEMP665 = RX10_TEMP662 != RX10_TEMP664;

								if(RX10_TEMP665)
									{

									String RX10_TEMP663 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP663);

									}
								Program.setRefArrayValue1int(finished, RX10_TEMP658, X10_TEMP267,X10_TEMP183);
								}
 							}
						else
							{

							final Point1 RX10_TEMP666 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP666.hashCode());


							final Dist1 RX10_TEMP667 = runningPTotals.distValue;


							final Region1 RX10_TEMP668 = RX10_TEMP667.dReg;


							final int RX10_TEMP669 = Program.searchPointInRegion1(RX10_TEMP668, RX10_TEMP666,X10_TEMP183);


							final int RX10_TEMP670 = 0;


							final boolean RX10_TEMP671 = RX10_TEMP669 < RX10_TEMP670;

							if(RX10_TEMP671)
								{

								String RX10_TEMP672 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP672);

								}

							final int RX10_TEMP673 = Program.getPlaceFromDist1(RX10_TEMP667, RX10_TEMP669,X10_TEMP183);


							final int RX10_TEMP675 = 0;


							final boolean RX10_TEMP676 = RX10_TEMP673 != RX10_TEMP675;

							if(RX10_TEMP676)
								{

								String RX10_TEMP674 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP674);

								}

							final int RX10_TEMP677 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP669,X10_TEMP183);


							final int X10_TEMP269 = RX10_TEMP677;


							final boolean X10_TEMP271 = X10_TEMP269 >= expected1;

							if(X10_TEMP271)
								{

								final Point1 RX10_TEMP678 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP678.hashCode());


								final Dist1 RX10_TEMP679 = sendGrids.distValue;


								final Region1 RX10_TEMP680 = RX10_TEMP679.dReg;


								final int RX10_TEMP681 = Program.searchPointInRegion1(RX10_TEMP680, RX10_TEMP678,X10_TEMP183);


								final int RX10_TEMP682 = 0;


								final boolean RX10_TEMP683 = RX10_TEMP681 < RX10_TEMP682;

								if(RX10_TEMP683)
									{

									String RX10_TEMP684 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP684);

									}

								final int RX10_TEMP685 = Program.getPlaceFromDist1(RX10_TEMP679, RX10_TEMP681,X10_TEMP183);


								final int RX10_TEMP687 = 0;


								final boolean RX10_TEMP688 = RX10_TEMP685 != RX10_TEMP687;

								if(RX10_TEMP688)
									{

									String RX10_TEMP686 = "Bad place access for array sendGrids";

									throw new RuntimeException(RX10_TEMP686);

									}

								final int RX10_TEMP689 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP681,X10_TEMP183);


								int gsize = RX10_TEMP689;


								int i = 0;


								int total = 0;


								int oldTotal = 0;


								boolean X10_TEMP277 = false;

								do 									{

									oldTotal = total;


									final Point2 RX10_TEMP690 = new Point2(pl, i,X10_TEMP183);
									
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP690.hashCode());


									final Dist2 RX10_TEMP691 = sCountBuffer.distValue;


									final Region2 RX10_TEMP692 = RX10_TEMP691.dReg;


									final int RX10_TEMP693 = Program.searchPointInRegion2(RX10_TEMP692, RX10_TEMP690,X10_TEMP183);


									final int RX10_TEMP694 = 0;


									final boolean RX10_TEMP695 = RX10_TEMP693 < RX10_TEMP694;

									if(RX10_TEMP695)
										{

										String RX10_TEMP696 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP696);

										}

									final int RX10_TEMP697 = Program.getPlaceFromDist2(RX10_TEMP691, RX10_TEMP693,X10_TEMP183);


									final int RX10_TEMP699 = 0;


									final boolean RX10_TEMP700 = RX10_TEMP697 != RX10_TEMP699;

									if(RX10_TEMP700)
										{

										String RX10_TEMP698 = "Bad place access for array sCountBuffer";

										throw new RuntimeException(RX10_TEMP698);

										}

									final int RX10_TEMP701 = Program.getRefArrayValue2int(sCountBuffer, RX10_TEMP693,X10_TEMP183);


									final int X10_TEMP281 = RX10_TEMP701;


									final int X10_TEMP283 = total + X10_TEMP281;


									total = X10_TEMP283;


									final int X10_TEMP284 = i;


									final int X10_TEMP285 = 1;


									i = i + X10_TEMP285;


									final boolean X10_TEMP286 = total < lDeficit;


									final boolean X10_TEMP287 = i < gsize;


									X10_TEMP277 = X10_TEMP286 && X10_TEMP287;

									}
								
 while(X10_TEMP277);
								final int X10_TEMP289 = 1;


								double offset = i - X10_TEMP289;


								final boolean X10_TEMP292 = total > oldTotal;

								if(X10_TEMP292)
									{

									final int X10_TEMP294 = lDeficit - oldTotal;


									final double X10_TEMP296 = (double)X10_TEMP294;


									final int X10_TEMP298 = total - oldTotal;


									final double X10_TEMP300 = (double)X10_TEMP298;


									final double X10_TEMP302 = X10_TEMP296 / X10_TEMP300;


									final double X10_TEMP304 = offset + X10_TEMP302;


									offset = X10_TEMP304;

									}

								final Point1 RX10_TEMP702 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP702.hashCode());


								final Dist1 RX10_TEMP703 = runningGTotals.distValue;


								final Region1 RX10_TEMP704 = RX10_TEMP703.dReg;


								final int RX10_TEMP705 = Program.searchPointInRegion1(RX10_TEMP704, RX10_TEMP702,X10_TEMP183);


								final int RX10_TEMP706 = 0;


								final boolean RX10_TEMP707 = RX10_TEMP705 < RX10_TEMP706;

								if(RX10_TEMP707)
									{

									String RX10_TEMP708 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP708);

									}

								final int RX10_TEMP709 = Program.getPlaceFromDist1(RX10_TEMP703, RX10_TEMP705,X10_TEMP183);


								final int RX10_TEMP711 = 0;


								final boolean RX10_TEMP712 = RX10_TEMP709 != RX10_TEMP711;

								if(RX10_TEMP712)
									{

									String RX10_TEMP710 = "Bad place access for array runningGTotals";

									throw new RuntimeException(RX10_TEMP710);

									}

								final int RX10_TEMP713 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP705,X10_TEMP183);


								final int X10_TEMP308 = RX10_TEMP713;


								final Point1 RX10_TEMP714 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP714.hashCode());


								final Dist1 RX10_TEMP715 = sendGrids.distValue;


								final Region1 RX10_TEMP716 = RX10_TEMP715.dReg;


								final int RX10_TEMP717 = Program.searchPointInRegion1(RX10_TEMP716, RX10_TEMP714,X10_TEMP183);


								final int RX10_TEMP718 = 0;


								final boolean RX10_TEMP719 = RX10_TEMP717 < RX10_TEMP718;

								if(RX10_TEMP719)
									{

									String RX10_TEMP720 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP720);

									}

								final int RX10_TEMP721 = Program.getPlaceFromDist1(RX10_TEMP715, RX10_TEMP717,X10_TEMP183);


								final int RX10_TEMP723 = 0;


								final boolean RX10_TEMP724 = RX10_TEMP721 != RX10_TEMP723;

								if(RX10_TEMP724)
									{

									String RX10_TEMP722 = "Bad place access for array sendGrids";

									throw new RuntimeException(RX10_TEMP722);

									}

								final int RX10_TEMP725 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP717,X10_TEMP183);


								final int X10_TEMP309 = RX10_TEMP725;


								final int X10_TEMP310 = X10_TEMP308 - X10_TEMP309;


								final double X10_TEMP313 = X10_TEMP310 + offset;


								final double X10_TEMP314 = X10_TEMP313;


								final Point1 RX10_TEMP726 = new Point1(pl,X10_TEMP183);
								
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP726.hashCode());


								final Dist1 RX10_TEMP727 = border.distValue;


								final Region1 RX10_TEMP728 = RX10_TEMP727.dReg;


								final int RX10_TEMP729 = Program.searchPointInRegion1(RX10_TEMP728, RX10_TEMP726,X10_TEMP183);


								final int RX10_TEMP730 = 0;


								final boolean RX10_TEMP731 = RX10_TEMP729 < RX10_TEMP730;

								if(RX10_TEMP731)
									{

									String RX10_TEMP732 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP732);

									}

								final int RX10_TEMP733 = Program.getPlaceFromDist1(RX10_TEMP727, RX10_TEMP729,X10_TEMP183);


								final int RX10_TEMP735 = 0;


								final boolean RX10_TEMP736 = RX10_TEMP733 != RX10_TEMP735;

								if(RX10_TEMP736)
									{

									String RX10_TEMP734 = "Bad place access for array border";

									throw new RuntimeException(RX10_TEMP734);

									}
								Program.setRefArrayValue1double(border, RX10_TEMP729, X10_TEMP314,X10_TEMP183);
								}
							}
 
						final Point1 RX10_TEMP737 = new Point1(pl,X10_TEMP183);
						
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP737.hashCode());


						final Dist1 RX10_TEMP738 = sendCount.distValue;


						final Region1 RX10_TEMP739 = RX10_TEMP738.dReg;


						final int RX10_TEMP740 = Program.searchPointInRegion1(RX10_TEMP739, RX10_TEMP737,X10_TEMP183);


						final int RX10_TEMP741 = 0;


						final boolean RX10_TEMP742 = RX10_TEMP740 < RX10_TEMP741;

						if(RX10_TEMP742)
							{

							String RX10_TEMP743 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP743);

							}

						final int RX10_TEMP744 = Program.getPlaceFromDist1(RX10_TEMP738, RX10_TEMP740,X10_TEMP183);


						final int RX10_TEMP746 = 0;


						final boolean RX10_TEMP747 = RX10_TEMP744 != RX10_TEMP746;

						if(RX10_TEMP747)
							{

							String RX10_TEMP745 = "Bad place access for array sendCount";

							throw new RuntimeException(RX10_TEMP745);

							}

						final int RX10_TEMP748 = Program.getRefArrayValue1int(sendCount, RX10_TEMP740,X10_TEMP183);


						final int X10_TEMP316 = RX10_TEMP748;


						final boolean X10_TEMP318 = rDeficit > X10_TEMP316;

						if(X10_TEMP318)
							{

							final Point1 RX10_TEMP749 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP749.hashCode());


							final Dist1 RX10_TEMP750 = finished.distValue;


							final Region1 RX10_TEMP751 = RX10_TEMP750.dReg;


							final int RX10_TEMP752 = Program.searchPointInRegion1(RX10_TEMP751, RX10_TEMP749,X10_TEMP183);


							final int RX10_TEMP753 = 0;


							final boolean RX10_TEMP754 = RX10_TEMP752 < RX10_TEMP753;

							if(RX10_TEMP754)
								{

								String RX10_TEMP755 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP755);

								}

							final int RX10_TEMP756 = Program.getPlaceFromDist1(RX10_TEMP750, RX10_TEMP752,X10_TEMP183);


							final int RX10_TEMP758 = 0;


							final boolean RX10_TEMP759 = RX10_TEMP756 != RX10_TEMP758;

							if(RX10_TEMP759)
								{

								String RX10_TEMP757 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP757);

								}

							final int RX10_TEMP760 = Program.getRefArrayValue1int(finished, RX10_TEMP752,X10_TEMP183);


							final int X10_TEMP320 = RX10_TEMP760;


							final int X10_TEMP321 = 1;


							final Point1 RX10_TEMP761 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP761.hashCode());


							final Dist1 RX10_TEMP762 = finished.distValue;


							final Region1 RX10_TEMP763 = RX10_TEMP762.dReg;


							final int RX10_TEMP764 = Program.searchPointInRegion1(RX10_TEMP763, RX10_TEMP761,X10_TEMP183);


							final int RX10_TEMP765 = 0;


							final boolean RX10_TEMP766 = RX10_TEMP764 < RX10_TEMP765;

							if(RX10_TEMP766)
								{

								String RX10_TEMP767 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP767);

								}

							final int RX10_TEMP768 = Program.getPlaceFromDist1(RX10_TEMP762, RX10_TEMP764,X10_TEMP183);


							final int RX10_TEMP770 = 0;


							final boolean RX10_TEMP771 = RX10_TEMP768 != RX10_TEMP770;

							if(RX10_TEMP771)
								{

								String RX10_TEMP769 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP769);

								}

							final int RX10_TEMP772 = Program.getRefArrayValue1int(finished, RX10_TEMP764,X10_TEMP183);


							final int X10_TEMP322 = RX10_TEMP772;


							final int X10_TEMP323 = X10_TEMP322 + X10_TEMP321;


							final Point1 RX10_TEMP773 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP773.hashCode());


							final Dist1 RX10_TEMP774 = finished.distValue;


							final Region1 RX10_TEMP775 = RX10_TEMP774.dReg;


							final int RX10_TEMP776 = Program.searchPointInRegion1(RX10_TEMP775, RX10_TEMP773,X10_TEMP183);


							final int RX10_TEMP777 = 0;


							final boolean RX10_TEMP778 = RX10_TEMP776 < RX10_TEMP777;

							if(RX10_TEMP778)
								{

								String RX10_TEMP779 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP779);

								}

							final int RX10_TEMP780 = Program.getPlaceFromDist1(RX10_TEMP774, RX10_TEMP776,X10_TEMP183);


							final int RX10_TEMP782 = 0;


							final boolean RX10_TEMP783 = RX10_TEMP780 != RX10_TEMP782;

							if(RX10_TEMP783)
								{

								String RX10_TEMP781 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP781);

								}
							Program.setRefArrayValue1int(finished, RX10_TEMP776, X10_TEMP323,X10_TEMP183);
							}

						final int X10_TEMP324 = 0;


						final boolean X10_TEMP325 = true;


						final boolean X10_TEMP327 = ! X10_TEMP325;

						if(X10_TEMP327)
							{

							final Point1 RX10_TEMP784 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP784.hashCode());


							final Dist1 RX10_TEMP785 = recvGrids.distValue;


							final Region1 RX10_TEMP786 = RX10_TEMP785.dReg;


							final int RX10_TEMP787 = Program.searchPointInRegion1(RX10_TEMP786, RX10_TEMP784,X10_TEMP183);


							final int RX10_TEMP788 = 0;


							final boolean RX10_TEMP789 = RX10_TEMP787 < RX10_TEMP788;

							if(RX10_TEMP789)
								{

								String RX10_TEMP790 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP790);

								}

							final int RX10_TEMP791 = Program.getPlaceFromDist1(RX10_TEMP785, RX10_TEMP787,X10_TEMP183);


							final int RX10_TEMP793 = 0;


							final boolean RX10_TEMP794 = RX10_TEMP791 != RX10_TEMP793;

							if(RX10_TEMP794)
								{

								String RX10_TEMP792 = "Bad place access for array recvGrids";

								throw new RuntimeException(RX10_TEMP792);

								}

							final int RX10_TEMP795 = Program.getRefArrayValue1int(recvGrids, RX10_TEMP787,X10_TEMP183);


							int gsize = RX10_TEMP795;


							final Point1 RX10_TEMP796 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP796.hashCode());


							final Dist1 RX10_TEMP797 = runningPTotals.distValue;


							final Region1 RX10_TEMP798 = RX10_TEMP797.dReg;


							final int RX10_TEMP799 = Program.searchPointInRegion1(RX10_TEMP798, RX10_TEMP796,X10_TEMP183);


							final int RX10_TEMP800 = 0;


							final boolean RX10_TEMP801 = RX10_TEMP799 < RX10_TEMP800;

							if(RX10_TEMP801)
								{

								String RX10_TEMP802 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP802);

								}

							final int RX10_TEMP803 = Program.getPlaceFromDist1(RX10_TEMP797, RX10_TEMP799,X10_TEMP183);


							final int RX10_TEMP805 = 0;


							final boolean RX10_TEMP806 = RX10_TEMP803 != RX10_TEMP805;

							if(RX10_TEMP806)
								{

								String RX10_TEMP804 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP804);

								}

							final int RX10_TEMP807 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP799,X10_TEMP183);


							final int X10_TEMP333 = RX10_TEMP807;


							final Point1 RX10_TEMP808 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP808.hashCode());


							final Dist1 RX10_TEMP809 = sendCount.distValue;


							final Region1 RX10_TEMP810 = RX10_TEMP809.dReg;


							final int RX10_TEMP811 = Program.searchPointInRegion1(RX10_TEMP810, RX10_TEMP808,X10_TEMP183);


							final int RX10_TEMP812 = 0;


							final boolean RX10_TEMP813 = RX10_TEMP811 < RX10_TEMP812;

							if(RX10_TEMP813)
								{

								String RX10_TEMP814 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP814);

								}

							final int RX10_TEMP815 = Program.getPlaceFromDist1(RX10_TEMP809, RX10_TEMP811,X10_TEMP183);


							final int RX10_TEMP817 = 0;


							final boolean RX10_TEMP818 = RX10_TEMP815 != RX10_TEMP817;

							if(RX10_TEMP818)
								{

								String RX10_TEMP816 = "Bad place access for array sendCount";

								throw new RuntimeException(RX10_TEMP816);

								}

							final int RX10_TEMP819 = Program.getRefArrayValue1int(sendCount, RX10_TEMP811,X10_TEMP183);


							final int X10_TEMP334 = RX10_TEMP819;


							final int X10_TEMP337 = X10_TEMP333 - X10_TEMP334;


							final int X10_TEMP338 = X10_TEMP337;


							final Point1 RX10_TEMP820 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP820.hashCode());


							final Dist1 RX10_TEMP821 = runningPTotals.distValue;


							final Region1 RX10_TEMP822 = RX10_TEMP821.dReg;


							final int RX10_TEMP823 = Program.searchPointInRegion1(RX10_TEMP822, RX10_TEMP820,X10_TEMP183);


							final int RX10_TEMP824 = 0;


							final boolean RX10_TEMP825 = RX10_TEMP823 < RX10_TEMP824;

							if(RX10_TEMP825)
								{

								String RX10_TEMP826 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP826);

								}

							final int RX10_TEMP827 = Program.getPlaceFromDist1(RX10_TEMP821, RX10_TEMP823,X10_TEMP183);


							final int RX10_TEMP829 = 0;


							final boolean RX10_TEMP830 = RX10_TEMP827 != RX10_TEMP829;

							if(RX10_TEMP830)
								{

								String RX10_TEMP828 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP828);

								}
							Program.setRefArrayValue1int(runningPTotals, RX10_TEMP823, X10_TEMP338,X10_TEMP183);

							final Point1 RX10_TEMP831 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP831.hashCode());


							final Dist1 RX10_TEMP832 = runningGTotals.distValue;


							final Region1 RX10_TEMP833 = RX10_TEMP832.dReg;


							final int RX10_TEMP834 = Program.searchPointInRegion1(RX10_TEMP833, RX10_TEMP831,X10_TEMP183);


							final int RX10_TEMP835 = 0;


							final boolean RX10_TEMP836 = RX10_TEMP834 < RX10_TEMP835;

							if(RX10_TEMP836)
								{

								String RX10_TEMP837 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP837);

								}

							final int RX10_TEMP838 = Program.getPlaceFromDist1(RX10_TEMP832, RX10_TEMP834,X10_TEMP183);


							final int RX10_TEMP840 = 0;


							final boolean RX10_TEMP841 = RX10_TEMP838 != RX10_TEMP840;

							if(RX10_TEMP841)
								{

								String RX10_TEMP839 = "Bad place access for array runningGTotals";

								throw new RuntimeException(RX10_TEMP839);

								}

							final int RX10_TEMP842 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP834,X10_TEMP183);


							final int X10_TEMP342 = RX10_TEMP842;


							final Point1 RX10_TEMP843 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP843.hashCode());


							final Dist1 RX10_TEMP844 = sendGrids.distValue;


							final Region1 RX10_TEMP845 = RX10_TEMP844.dReg;


							final int RX10_TEMP846 = Program.searchPointInRegion1(RX10_TEMP845, RX10_TEMP843,X10_TEMP183);


							final int RX10_TEMP847 = 0;


							final boolean RX10_TEMP848 = RX10_TEMP846 < RX10_TEMP847;

							if(RX10_TEMP848)
								{

								String RX10_TEMP849 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP849);

								}

							final int RX10_TEMP850 = Program.getPlaceFromDist1(RX10_TEMP844, RX10_TEMP846,X10_TEMP183);


							final int RX10_TEMP852 = 0;


							final boolean RX10_TEMP853 = RX10_TEMP850 != RX10_TEMP852;

							if(RX10_TEMP853)
								{

								String RX10_TEMP851 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP851);

								}

							final int RX10_TEMP854 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP846,X10_TEMP183);


							final int X10_TEMP343 = RX10_TEMP854;


							final int X10_TEMP346 = X10_TEMP342 - X10_TEMP343;


							final int X10_TEMP347 = X10_TEMP346;


							final Point1 RX10_TEMP855 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP855.hashCode());


							final Dist1 RX10_TEMP856 = runningGTotals.distValue;


							final Region1 RX10_TEMP857 = RX10_TEMP856.dReg;


							final int RX10_TEMP858 = Program.searchPointInRegion1(RX10_TEMP857, RX10_TEMP855,X10_TEMP183);


							final int RX10_TEMP859 = 0;


							final boolean RX10_TEMP860 = RX10_TEMP858 < RX10_TEMP859;

							if(RX10_TEMP860)
								{

								String RX10_TEMP861 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP861);

								}

							final int RX10_TEMP862 = Program.getPlaceFromDist1(RX10_TEMP856, RX10_TEMP858,X10_TEMP183);


							final int RX10_TEMP864 = 0;


							final boolean RX10_TEMP865 = RX10_TEMP862 != RX10_TEMP864;

							if(RX10_TEMP865)
								{

								String RX10_TEMP863 = "Bad place access for array runningGTotals";

								throw new RuntimeException(RX10_TEMP863);

								}
							Program.setRefArrayValue1int(runningGTotals, RX10_TEMP858, X10_TEMP347,X10_TEMP183);

							final Point1 RX10_TEMP866 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP866.hashCode());


							final Dist1 RX10_TEMP867 = recvCount.distValue;


							final Region1 RX10_TEMP868 = RX10_TEMP867.dReg;


							final int RX10_TEMP869 = Program.searchPointInRegion1(RX10_TEMP868, RX10_TEMP866,X10_TEMP183);


							final int RX10_TEMP870 = 0;


							final boolean RX10_TEMP871 = RX10_TEMP869 < RX10_TEMP870;

							if(RX10_TEMP871)
								{

								String RX10_TEMP872 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP872);

								}

							final int RX10_TEMP873 = Program.getPlaceFromDist1(RX10_TEMP867, RX10_TEMP869,X10_TEMP183);


							final int RX10_TEMP875 = 0;


							final boolean RX10_TEMP876 = RX10_TEMP873 != RX10_TEMP875;

							if(RX10_TEMP876)
								{

								String RX10_TEMP874 = "Bad place access for array recvCount";

								throw new RuntimeException(RX10_TEMP874);

								}

							final int RX10_TEMP877 = Program.getRefArrayValue1int(recvCount, RX10_TEMP869,X10_TEMP183);


							final int X10_TEMP352 = RX10_TEMP877;


							final int X10_TEMP353 = X10_TEMP352;


							final Point1 RX10_TEMP878 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP878.hashCode());


							final Dist1 RX10_TEMP879 = sendCount.distValue;


							final Region1 RX10_TEMP880 = RX10_TEMP879.dReg;


							final int RX10_TEMP881 = Program.searchPointInRegion1(RX10_TEMP880, RX10_TEMP878,X10_TEMP183);


							final int RX10_TEMP882 = 0;


							final boolean RX10_TEMP883 = RX10_TEMP881 < RX10_TEMP882;

							if(RX10_TEMP883)
								{

								String RX10_TEMP884 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP884);

								}

							final int RX10_TEMP885 = Program.getPlaceFromDist1(RX10_TEMP879, RX10_TEMP881,X10_TEMP183);


							final int RX10_TEMP887 = 0;


							final boolean RX10_TEMP888 = RX10_TEMP885 != RX10_TEMP887;

							if(RX10_TEMP888)
								{

								String RX10_TEMP886 = "Bad place access for array sendCount";

								throw new RuntimeException(RX10_TEMP886);

								}
							Program.setRefArrayValue1int(sendCount, RX10_TEMP881, X10_TEMP353,X10_TEMP183);

							final Point1 RX10_TEMP889 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP889.hashCode());


							final Dist1 RX10_TEMP890 = recvGrids.distValue;


							final Region1 RX10_TEMP891 = RX10_TEMP890.dReg;


							final int RX10_TEMP892 = Program.searchPointInRegion1(RX10_TEMP891, RX10_TEMP889,X10_TEMP183);


							final int RX10_TEMP893 = 0;


							final boolean RX10_TEMP894 = RX10_TEMP892 < RX10_TEMP893;

							if(RX10_TEMP894)
								{

								String RX10_TEMP895 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP895);

								}

							final int RX10_TEMP896 = Program.getPlaceFromDist1(RX10_TEMP890, RX10_TEMP892,X10_TEMP183);


							final int RX10_TEMP898 = 0;


							final boolean RX10_TEMP899 = RX10_TEMP896 != RX10_TEMP898;

							if(RX10_TEMP899)
								{

								String RX10_TEMP897 = "Bad place access for array recvGrids";

								throw new RuntimeException(RX10_TEMP897);

								}

							final int RX10_TEMP900 = Program.getRefArrayValue1int(recvGrids, RX10_TEMP892,X10_TEMP183);


							final int X10_TEMP358 = RX10_TEMP900;


							final int X10_TEMP359 = X10_TEMP358;


							final Point1 RX10_TEMP901 = new Point1(pl,X10_TEMP183);
							
Program.globalPointerHashMap.get(X10_TEMP183).add(RX10_TEMP901.hashCode());


							final Dist1 RX10_TEMP902 = sendGrids.distValue;


							final Region1 RX10_TEMP903 = RX10_TEMP902.dReg;


							final int RX10_TEMP904 = Program.searchPointInRegion1(RX10_TEMP903, RX10_TEMP901,X10_TEMP183);


							final int RX10_TEMP905 = 0;


							final boolean RX10_TEMP906 = RX10_TEMP904 < RX10_TEMP905;

							if(RX10_TEMP906)
								{

								String RX10_TEMP907 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP907);

								}

							final int RX10_TEMP908 = Program.getPlaceFromDist1(RX10_TEMP902, RX10_TEMP904,X10_TEMP183);


							final int RX10_TEMP910 = 0;


							final boolean RX10_TEMP911 = RX10_TEMP908 != RX10_TEMP910;

							if(RX10_TEMP911)
								{

								String RX10_TEMP909 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP909);

								}
							Program.setRefArrayValue1int(sendGrids, RX10_TEMP904, X10_TEMP359,X10_TEMP183);
							/*FINISH
*/								{

								final int X10_TEMP365 = 0;


								final int X10_TEMP363 = 1;


								final int X10_TEMP366 = gsize - X10_TEMP363;


								final Region2 X10_TEMP368 = Program.createNewRegion2RR(pl, pl, X10_TEMP365, X10_TEMP366,X10_TEMP183);


								final int X10_TEMP369 = 0;


								final int RX10_TEMP915 = 1;


								int RX10_TEMP913 = X10_TEMP368.regSize;


								RX10_TEMP913 = RX10_TEMP913 - RX10_TEMP915;


								final int  RX10_TEMP914 = RX10_TEMP913+1;

								for(int RX10_TEMP912=0; RX10_TEMP912 < RX10_TEMP914; RX10_TEMP912++)
									{

									final int RX10_TEMP916 = RX10_TEMP912;


									final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP368, RX10_TEMP916,X10_TEMP183);

									//async(X10_TEMP369)
										{

										final Dist2 RX10_TEMP917 = rCountBuffer.distValue;


										final Region2 RX10_TEMP918 = RX10_TEMP917.dReg;


										final int RX10_TEMP919 = Program.searchPointInRegion2(RX10_TEMP918, pt,X10_TEMP369);


										final int RX10_TEMP920 = 0;


										final boolean RX10_TEMP921 = RX10_TEMP919 < RX10_TEMP920;

										if(RX10_TEMP921)
											{

											String RX10_TEMP922 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP922);

											}

										final int RX10_TEMP923 = Program.getPlaceFromDist2(RX10_TEMP917, RX10_TEMP919,X10_TEMP369);


										final int RX10_TEMP925 = 0;


										final boolean RX10_TEMP926 = RX10_TEMP923 != RX10_TEMP925;

										if(RX10_TEMP926)
											{

											String RX10_TEMP924 = "Bad place access for array rCountBuffer";

											throw new RuntimeException(RX10_TEMP924);

											}

										final int RX10_TEMP927 = Program.getRefArrayValue2int(rCountBuffer, RX10_TEMP919,X10_TEMP369);


										final int X10_TEMP374 = RX10_TEMP927;


										final int X10_TEMP375 = X10_TEMP374;


										final Dist2 RX10_TEMP928 = sCountBuffer.distValue;


										final Region2 RX10_TEMP929 = RX10_TEMP928.dReg;


										final int RX10_TEMP930 = Program.searchPointInRegion2(RX10_TEMP929, pt,X10_TEMP369);


										final int RX10_TEMP931 = 0;


										final boolean RX10_TEMP932 = RX10_TEMP930 < RX10_TEMP931;

										if(RX10_TEMP932)
											{

											String RX10_TEMP933 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP933);

											}

										final int RX10_TEMP934 = Program.getPlaceFromDist2(RX10_TEMP928, RX10_TEMP930,X10_TEMP369);


										final int RX10_TEMP936 = 0;


										final boolean RX10_TEMP937 = RX10_TEMP934 != RX10_TEMP936;

										if(RX10_TEMP937)
											{

											String RX10_TEMP935 = "Bad place access for array sCountBuffer";

											throw new RuntimeException(RX10_TEMP935);

											}
										Program.setRefArrayValue2int(sCountBuffer, RX10_TEMP930, X10_TEMP375,X10_TEMP369);
										}
									}
								}
							}
						}
					}
				}

			final int X10_TEMP376 = Program.intrefArraySum1(finished,myUniquePlacePoint);


			final int X10_TEMP377 = 0;


			X10_TEMP117 = X10_TEMP376 != X10_TEMP377;

			}
		
 while(X10_TEMP117);		/*FINISH
*/			{

			final Dist1 X10_TEMP380 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP939 = X10_TEMP380.dReg;


			final int RX10_TEMP942 = 1;


			int RX10_TEMP940 = RX10_TEMP939.regSize;


			RX10_TEMP940 = RX10_TEMP940 - RX10_TEMP942;


			final int  RX10_TEMP941 = RX10_TEMP940+1;

			for(int RX10_TEMP938=0; RX10_TEMP938 < RX10_TEMP941; RX10_TEMP938++)
				{

				final int RX10_TEMP943 = RX10_TEMP938;


				final Point1 X10_TEMP381 = Program.regionOrdinalPoint1(RX10_TEMP939, RX10_TEMP943,myUniquePlacePoint);


				final int pl = X10_TEMP381.f0;


				final Region1 RX10_TEMP944 = X10_TEMP380.dReg;


				final int RX10_TEMP945 = Program.searchPointInRegion1(RX10_TEMP944, X10_TEMP381,myUniquePlacePoint);


				final int RX10_TEMP946 = 0;


				final boolean RX10_TEMP947 = RX10_TEMP945 < RX10_TEMP946;

				if(RX10_TEMP947)
					{

					final String RX10_TEMP948 = "Point X10_TEMP381 not found in the distribution X10_TEMP380.";

					throw new RuntimeException(RX10_TEMP948);

					}

				final int RX10_TEMP949 = Program.getPlaceFromDist1(X10_TEMP380, RX10_TEMP945,myUniquePlacePoint);


				final int X10_TEMP382 = RX10_TEMP949;

				//async(X10_TEMP382)
					{

					final Dist1 RX10_TEMP950 = particleCount.distValue;


					final Dist1 dPC = RX10_TEMP950;


					final Region1 rLocal = Program.X10Util_get1DLRegion(dPC,X10_TEMP382);


					final int rsize = rLocal.regSize;


					final int X10_TEMP387 = 0;


					final boolean X10_TEMP389 = rsize > X10_TEMP387;


					final boolean X10_TEMP390 = X10_TEMP389;


					int X10_TEMP393 = 0;

					if(X10_TEMP390)
						{

						final int RX10_TEMP951 = rLocal.regSize;


						final int RX10_TEMP952 = 0;


						final boolean RX10_TEMP953 = RX10_TEMP951 <= RX10_TEMP952;

						if(RX10_TEMP953)
							{

							final String RX10_TEMP954 = "Operation low() not defined on empty region rLocal";

							throw new RuntimeException(RX10_TEMP954);

							}

						X10_TEMP393 = Program.regionLow(rLocal,X10_TEMP382);

						}

					final int X10_TEMP394 = X10_TEMP393;


					final int offset = X10_TEMP394;


					int total = 0;


					final Dist1 RX10_TEMP955 = particleCount.distValue;


					final Dist1 X10_TEMP396 = RX10_TEMP955;


					final int X10_TEMP397 = 0;


					final Dist1 X10_TEMP399 = Program.restrictDist1(X10_TEMP396, X10_TEMP397,X10_TEMP382);


					final Region1 RX10_TEMP958 = X10_TEMP399.dReg;


					final int RX10_TEMP961 = 1;


					int RX10_TEMP959 = RX10_TEMP958.regSize;


					RX10_TEMP959 = RX10_TEMP959 - RX10_TEMP961;


					final int  RX10_TEMP960 = RX10_TEMP959+1;

					for(int RX10_TEMP956=0; RX10_TEMP956 < RX10_TEMP960; RX10_TEMP956++)
						{

						final int RX10_TEMP962 = RX10_TEMP956;


						final Point1 RX10_TEMP957 = Program.regionOrdinalPoint1(RX10_TEMP958, RX10_TEMP962,X10_TEMP382);


						final int i = RX10_TEMP957.f0;


						final Point1 RX10_TEMP963 = new Point1(i,X10_TEMP382);
						
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP963.hashCode());


						final Dist1 RX10_TEMP964 = particleCount.distValue;


						final Region1 RX10_TEMP965 = RX10_TEMP964.dReg;


						final int RX10_TEMP966 = Program.searchPointInRegion1(RX10_TEMP965, RX10_TEMP963,X10_TEMP382);


						final int RX10_TEMP967 = 0;


						final boolean RX10_TEMP968 = RX10_TEMP966 < RX10_TEMP967;

						if(RX10_TEMP968)
							{

							String RX10_TEMP969 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP969);

							}

						final int RX10_TEMP970 = Program.getPlaceFromDist1(RX10_TEMP964, RX10_TEMP966,X10_TEMP382);


						final int RX10_TEMP972 = 0;


						final boolean RX10_TEMP973 = RX10_TEMP970 != RX10_TEMP972;

						if(RX10_TEMP973)
							{

							String RX10_TEMP971 = "Bad place access for array particleCount";

							throw new RuntimeException(RX10_TEMP971);

							}

						final int RX10_TEMP974 = Program.getRefArrayValue1int(particleCount, RX10_TEMP966,X10_TEMP382);


						final int count = RX10_TEMP974;


						final int X10_TEMP404 = i - offset;


						final int X10_TEMP407 = count;


						final Point2 RX10_TEMP975 = new Point2(pl, X10_TEMP404,X10_TEMP382);
						
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP975.hashCode());


						final Dist2 RX10_TEMP976 = sCountBuffer.distValue;


						final Region2 RX10_TEMP977 = RX10_TEMP976.dReg;


						final int RX10_TEMP978 = Program.searchPointInRegion2(RX10_TEMP977, RX10_TEMP975,X10_TEMP382);


						final int RX10_TEMP979 = 0;


						final boolean RX10_TEMP980 = RX10_TEMP978 < RX10_TEMP979;

						if(RX10_TEMP980)
							{

							String RX10_TEMP981 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP981);

							}

						final int RX10_TEMP982 = Program.getPlaceFromDist2(RX10_TEMP976, RX10_TEMP978,X10_TEMP382);


						final int RX10_TEMP984 = 0;


						final boolean RX10_TEMP985 = RX10_TEMP982 != RX10_TEMP984;

						if(RX10_TEMP985)
							{

							String RX10_TEMP983 = "Bad place access for array sCountBuffer";

							throw new RuntimeException(RX10_TEMP983);

							}
						Program.setRefArrayValue2int(sCountBuffer, RX10_TEMP978, X10_TEMP407,X10_TEMP382);

						final int X10_TEMP409 = total + count;


						total = X10_TEMP409;

						}

					final Point1 RX10_TEMP986 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP986.hashCode());


					final Dist1 RX10_TEMP987 = particleTotals.distValue;


					final Region1 RX10_TEMP988 = RX10_TEMP987.dReg;


					final int RX10_TEMP989 = Program.searchPointInRegion1(RX10_TEMP988, RX10_TEMP986,X10_TEMP382);


					final int RX10_TEMP990 = 0;


					final boolean RX10_TEMP991 = RX10_TEMP989 < RX10_TEMP990;

					if(RX10_TEMP991)
						{

						String RX10_TEMP992 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP992);

						}

					final int RX10_TEMP993 = Program.getPlaceFromDist1(RX10_TEMP987, RX10_TEMP989,X10_TEMP382);


					final int RX10_TEMP995 = 0;


					final boolean RX10_TEMP996 = RX10_TEMP993 != RX10_TEMP995;

					if(RX10_TEMP996)
						{

						String RX10_TEMP994 = "Bad place access for array particleTotals";

						throw new RuntimeException(RX10_TEMP994);

						}

					final int RX10_TEMP997 = Program.getRefArrayValue1int(particleTotals, RX10_TEMP989,X10_TEMP382);


					final int X10_TEMP414 = RX10_TEMP997;


					final int X10_TEMP415 = X10_TEMP414;


					final Point1 RX10_TEMP998 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP998.hashCode());


					final Dist1 RX10_TEMP999 = runningPTotals.distValue;


					final Region1 RX10_TEMP1000 = RX10_TEMP999.dReg;


					final int RX10_TEMP1001 = Program.searchPointInRegion1(RX10_TEMP1000, RX10_TEMP998,X10_TEMP382);


					final int RX10_TEMP1002 = 0;


					final boolean RX10_TEMP1003 = RX10_TEMP1001 < RX10_TEMP1002;

					if(RX10_TEMP1003)
						{

						String RX10_TEMP1004 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1004);

						}

					final int RX10_TEMP1005 = Program.getPlaceFromDist1(RX10_TEMP999, RX10_TEMP1001,X10_TEMP382);


					final int RX10_TEMP1007 = 0;


					final boolean RX10_TEMP1008 = RX10_TEMP1005 != RX10_TEMP1007;

					if(RX10_TEMP1008)
						{

						String RX10_TEMP1006 = "Bad place access for array runningPTotals";

						throw new RuntimeException(RX10_TEMP1006);

						}
					Program.setRefArrayValue1int(runningPTotals, RX10_TEMP1001, X10_TEMP415,X10_TEMP382);

					final Point1 RX10_TEMP1009 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1009.hashCode());


					final Dist1 RX10_TEMP1010 = gridTotals.distValue;


					final Region1 RX10_TEMP1011 = RX10_TEMP1010.dReg;


					final int RX10_TEMP1012 = Program.searchPointInRegion1(RX10_TEMP1011, RX10_TEMP1009,X10_TEMP382);


					final int RX10_TEMP1013 = 0;


					final boolean RX10_TEMP1014 = RX10_TEMP1012 < RX10_TEMP1013;

					if(RX10_TEMP1014)
						{

						String RX10_TEMP1015 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP1015);

						}

					final int RX10_TEMP1016 = Program.getPlaceFromDist1(RX10_TEMP1010, RX10_TEMP1012,X10_TEMP382);


					final int RX10_TEMP1018 = 0;


					final boolean RX10_TEMP1019 = RX10_TEMP1016 != RX10_TEMP1018;

					if(RX10_TEMP1019)
						{

						String RX10_TEMP1017 = "Bad place access for array gridTotals";

						throw new RuntimeException(RX10_TEMP1017);

						}

					final int RX10_TEMP1020 = Program.getRefArrayValue1int(gridTotals, RX10_TEMP1012,X10_TEMP382);


					final int X10_TEMP420 = RX10_TEMP1020;


					final int X10_TEMP421 = X10_TEMP420;


					final Point1 RX10_TEMP1021 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1021.hashCode());


					final Dist1 RX10_TEMP1022 = runningGTotals.distValue;


					final Region1 RX10_TEMP1023 = RX10_TEMP1022.dReg;


					final int RX10_TEMP1024 = Program.searchPointInRegion1(RX10_TEMP1023, RX10_TEMP1021,X10_TEMP382);


					final int RX10_TEMP1025 = 0;


					final boolean RX10_TEMP1026 = RX10_TEMP1024 < RX10_TEMP1025;

					if(RX10_TEMP1026)
						{

						String RX10_TEMP1027 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1027);

						}

					final int RX10_TEMP1028 = Program.getPlaceFromDist1(RX10_TEMP1022, RX10_TEMP1024,X10_TEMP382);


					final int RX10_TEMP1030 = 0;


					final boolean RX10_TEMP1031 = RX10_TEMP1028 != RX10_TEMP1030;

					if(RX10_TEMP1031)
						{

						String RX10_TEMP1029 = "Bad place access for array runningGTotals";

						throw new RuntimeException(RX10_TEMP1029);

						}
					Program.setRefArrayValue1int(runningGTotals, RX10_TEMP1024, X10_TEMP421,X10_TEMP382);

					final int X10_TEMP425 = total;


					final Point1 RX10_TEMP1032 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1032.hashCode());


					final Dist1 RX10_TEMP1033 = sendCount.distValue;


					final Region1 RX10_TEMP1034 = RX10_TEMP1033.dReg;


					final int RX10_TEMP1035 = Program.searchPointInRegion1(RX10_TEMP1034, RX10_TEMP1032,X10_TEMP382);


					final int RX10_TEMP1036 = 0;


					final boolean RX10_TEMP1037 = RX10_TEMP1035 < RX10_TEMP1036;

					if(RX10_TEMP1037)
						{

						String RX10_TEMP1038 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1038);

						}

					final int RX10_TEMP1039 = Program.getPlaceFromDist1(RX10_TEMP1033, RX10_TEMP1035,X10_TEMP382);


					final int RX10_TEMP1041 = 0;


					final boolean RX10_TEMP1042 = RX10_TEMP1039 != RX10_TEMP1041;

					if(RX10_TEMP1042)
						{

						String RX10_TEMP1040 = "Bad place access for array sendCount";

						throw new RuntimeException(RX10_TEMP1040);

						}
					Program.setRefArrayValue1int(sendCount, RX10_TEMP1035, X10_TEMP425,X10_TEMP382);

					final int X10_TEMP429 = rsize;


					final Point1 RX10_TEMP1043 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1043.hashCode());


					final Dist1 RX10_TEMP1044 = sendGrids.distValue;


					final Region1 RX10_TEMP1045 = RX10_TEMP1044.dReg;


					final int RX10_TEMP1046 = Program.searchPointInRegion1(RX10_TEMP1045, RX10_TEMP1043,X10_TEMP382);


					final int RX10_TEMP1047 = 0;


					final boolean RX10_TEMP1048 = RX10_TEMP1046 < RX10_TEMP1047;

					if(RX10_TEMP1048)
						{

						String RX10_TEMP1049 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1049);

						}

					final int RX10_TEMP1050 = Program.getPlaceFromDist1(RX10_TEMP1044, RX10_TEMP1046,X10_TEMP382);


					final int RX10_TEMP1052 = 0;


					final boolean RX10_TEMP1053 = RX10_TEMP1050 != RX10_TEMP1052;

					if(RX10_TEMP1053)
						{

						String RX10_TEMP1051 = "Bad place access for array sendGrids";

						throw new RuntimeException(RX10_TEMP1051);

						}
					Program.setRefArrayValue1int(sendGrids, RX10_TEMP1046, X10_TEMP429,X10_TEMP382);

					final int X10_TEMP433 = 0;


					final int X10_TEMP434 = X10_TEMP433;


					final Point1 RX10_TEMP1054 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1054.hashCode());


					final Dist1 RX10_TEMP1055 = recvCount.distValue;


					final Region1 RX10_TEMP1056 = RX10_TEMP1055.dReg;


					final int RX10_TEMP1057 = Program.searchPointInRegion1(RX10_TEMP1056, RX10_TEMP1054,X10_TEMP382);


					final int RX10_TEMP1058 = 0;


					final boolean RX10_TEMP1059 = RX10_TEMP1057 < RX10_TEMP1058;

					if(RX10_TEMP1059)
						{

						String RX10_TEMP1060 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1060);

						}

					final int RX10_TEMP1061 = Program.getPlaceFromDist1(RX10_TEMP1055, RX10_TEMP1057,X10_TEMP382);


					final int RX10_TEMP1063 = 0;


					final boolean RX10_TEMP1064 = RX10_TEMP1061 != RX10_TEMP1063;

					if(RX10_TEMP1064)
						{

						String RX10_TEMP1062 = "Bad place access for array recvCount";

						throw new RuntimeException(RX10_TEMP1062);

						}
					Program.setRefArrayValue1int(recvCount, RX10_TEMP1057, X10_TEMP434,X10_TEMP382);

					final int X10_TEMP438 = 0;


					final int X10_TEMP439 = X10_TEMP438;


					final Point1 RX10_TEMP1065 = new Point1(pl,X10_TEMP382);
					
Program.globalPointerHashMap.get(X10_TEMP382).add(RX10_TEMP1065.hashCode());


					final Dist1 RX10_TEMP1066 = recvGrids.distValue;


					final Region1 RX10_TEMP1067 = RX10_TEMP1066.dReg;


					final int RX10_TEMP1068 = Program.searchPointInRegion1(RX10_TEMP1067, RX10_TEMP1065,X10_TEMP382);


					final int RX10_TEMP1069 = 0;


					final boolean RX10_TEMP1070 = RX10_TEMP1068 < RX10_TEMP1069;

					if(RX10_TEMP1070)
						{

						String RX10_TEMP1071 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1071);

						}

					final int RX10_TEMP1072 = Program.getPlaceFromDist1(RX10_TEMP1066, RX10_TEMP1068,X10_TEMP382);


					final int RX10_TEMP1074 = 0;


					final boolean RX10_TEMP1075 = RX10_TEMP1072 != RX10_TEMP1074;

					if(RX10_TEMP1075)
						{

						String RX10_TEMP1073 = "Bad place access for array recvGrids";

						throw new RuntimeException(RX10_TEMP1073);

						}
					Program.setRefArrayValue1int(recvGrids, RX10_TEMP1068, X10_TEMP439,X10_TEMP382);
					}
				}
			}

		boolean X10_TEMP440 = false;

		do 			{
			/*FINISH
*/				{

				final Dist1 X10_TEMP442 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP1077 = X10_TEMP442.dReg;


				final int RX10_TEMP1080 = 1;


				int RX10_TEMP1078 = RX10_TEMP1077.regSize;


				RX10_TEMP1078 = RX10_TEMP1078 - RX10_TEMP1080;


				final int  RX10_TEMP1079 = RX10_TEMP1078+1;

				for(int RX10_TEMP1076=0; RX10_TEMP1076 < RX10_TEMP1079; RX10_TEMP1076++)
					{

					final int RX10_TEMP1081 = RX10_TEMP1076;


					final Point1 X10_TEMP443 = Program.regionOrdinalPoint1(RX10_TEMP1077, RX10_TEMP1081,myUniquePlacePoint);


					final int pl = X10_TEMP443.f0;


					final Region1 RX10_TEMP1082 = X10_TEMP442.dReg;


					final int RX10_TEMP1083 = Program.searchPointInRegion1(RX10_TEMP1082, X10_TEMP443,myUniquePlacePoint);


					final int RX10_TEMP1084 = 0;


					final boolean RX10_TEMP1085 = RX10_TEMP1083 < RX10_TEMP1084;

					if(RX10_TEMP1085)
						{

						final String RX10_TEMP1086 = "Point X10_TEMP443 not found in the distribution X10_TEMP442.";

						throw new RuntimeException(RX10_TEMP1086);

						}

					final int RX10_TEMP1087 = Program.getPlaceFromDist1(X10_TEMP442, RX10_TEMP1083,myUniquePlacePoint);


					final int X10_TEMP444 = RX10_TEMP1087;

					//async(X10_TEMP444)
						{

						final double X10_TEMP445 = pl * countAve;


						final double X10_TEMP446 = 0.5;


						final double X10_TEMP448 = X10_TEMP445 + X10_TEMP446;


						final int expected = (int)X10_TEMP448;


						final int X10_TEMP450 = 1;


						final int X10_TEMP452 = pl - X10_TEMP450;


						final double X10_TEMP453 = X10_TEMP452 * countAve;


						final double X10_TEMP454 = 0.5;


						final double X10_TEMP456 = X10_TEMP453 + X10_TEMP454;


						final int X10_TEMP458 = (int)X10_TEMP456;


						final Point1 RX10_TEMP1088 = new Point1(pl,X10_TEMP444);
						
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1088.hashCode());


						final Dist1 RX10_TEMP1089 = runningPTotals.distValue;


						final Region1 RX10_TEMP1090 = RX10_TEMP1089.dReg;


						final int RX10_TEMP1091 = Program.searchPointInRegion1(RX10_TEMP1090, RX10_TEMP1088,X10_TEMP444);


						final int RX10_TEMP1092 = 0;


						final boolean RX10_TEMP1093 = RX10_TEMP1091 < RX10_TEMP1092;

						if(RX10_TEMP1093)
							{

							String RX10_TEMP1094 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1094);

							}

						final int RX10_TEMP1095 = Program.getPlaceFromDist1(RX10_TEMP1089, RX10_TEMP1091,X10_TEMP444);


						final int RX10_TEMP1097 = 0;


						final boolean RX10_TEMP1098 = RX10_TEMP1095 != RX10_TEMP1097;

						if(RX10_TEMP1098)
							{

							String RX10_TEMP1096 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP1096);

							}

						final int RX10_TEMP1099 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1091,X10_TEMP444);


						final int X10_TEMP460 = RX10_TEMP1099;


						final int X10_TEMP462 = X10_TEMP458 - X10_TEMP460;


						final Point1 RX10_TEMP1100 = new Point1(pl,X10_TEMP444);
						
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1100.hashCode());


						final Dist1 RX10_TEMP1101 = sendCount.distValue;


						final Region1 RX10_TEMP1102 = RX10_TEMP1101.dReg;


						final int RX10_TEMP1103 = Program.searchPointInRegion1(RX10_TEMP1102, RX10_TEMP1100,X10_TEMP444);


						final int RX10_TEMP1104 = 0;


						final boolean RX10_TEMP1105 = RX10_TEMP1103 < RX10_TEMP1104;

						if(RX10_TEMP1105)
							{

							String RX10_TEMP1106 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1106);

							}

						final int RX10_TEMP1107 = Program.getPlaceFromDist1(RX10_TEMP1101, RX10_TEMP1103,X10_TEMP444);


						final int RX10_TEMP1109 = 0;


						final boolean RX10_TEMP1110 = RX10_TEMP1107 != RX10_TEMP1109;

						if(RX10_TEMP1110)
							{

							String RX10_TEMP1108 = "Bad place access for array sendCount";

							throw new RuntimeException(RX10_TEMP1108);

							}

						final int RX10_TEMP1111 = Program.getRefArrayValue1int(sendCount, RX10_TEMP1103,X10_TEMP444);


						final int X10_TEMP463 = RX10_TEMP1111;


						final int X10_TEMP465 = X10_TEMP462 + X10_TEMP463;


						final int lDeficit = X10_TEMP465;


						final int X10_TEMP467 = 0;


						final boolean X10_TEMP469 = lDeficit > X10_TEMP467;

						if(X10_TEMP469)
							{

							final int X10_TEMP475 = 0;


							final Point1 RX10_TEMP1112 = new Point1(pl,X10_TEMP444);
							
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1112.hashCode());


							final Dist1 RX10_TEMP1113 = sendGrids.distValue;


							final Region1 RX10_TEMP1114 = RX10_TEMP1113.dReg;


							final int RX10_TEMP1115 = Program.searchPointInRegion1(RX10_TEMP1114, RX10_TEMP1112,X10_TEMP444);


							final int RX10_TEMP1116 = 0;


							final boolean RX10_TEMP1117 = RX10_TEMP1115 < RX10_TEMP1116;

							if(RX10_TEMP1117)
								{

								String RX10_TEMP1118 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1118);

								}

							final int RX10_TEMP1119 = Program.getPlaceFromDist1(RX10_TEMP1113, RX10_TEMP1115,X10_TEMP444);


							final int RX10_TEMP1121 = 0;


							final boolean RX10_TEMP1122 = RX10_TEMP1119 != RX10_TEMP1121;

							if(RX10_TEMP1122)
								{

								String RX10_TEMP1120 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP1120);

								}

							final int RX10_TEMP1123 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP1115,X10_TEMP444);


							final int X10_TEMP472 = RX10_TEMP1123;


							final int X10_TEMP473 = 1;


							final int X10_TEMP476 = X10_TEMP472 - X10_TEMP473;


							final Region1 dSBuffer = Program.createNewRegion1R(X10_TEMP475, X10_TEMP476,X10_TEMP444);


							final Region1 RX10_TEMP1124 = dSBuffer;


							final int RX10_TEMP1141 = dSBuffer.regSize;


							final int RX10_TEMP1142 = 1;


							final int RX10_TEMP1143 = RX10_TEMP1141 - RX10_TEMP1142;


							final int  RX10_TEMP1140 = RX10_TEMP1143+1;


							final int[] RX10_TEMP1144 = (int[])(new int/*value*/[RX10_TEMP1140]);
/*arrayInitBlock*/
for(int RX10_TEMP1125= 0;RX10_TEMP1125 <RX10_TEMP1144.length ;RX10_TEMP1125++ )								{

								final int RX10_TEMP1127 = RX10_TEMP1125;


								final Point1 RX10_TEMP1126 = Program.regionOrdinalPoint1(RX10_TEMP1124, RX10_TEMP1127,X10_TEMP444);


								final int i = RX10_TEMP1126.f0;


								final Point2 RX10_TEMP1128 = new Point2(pl, i,X10_TEMP444);
								
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1128.hashCode());


								final Dist2 RX10_TEMP1129 = sCountBuffer.distValue;


								final Region2 RX10_TEMP1130 = RX10_TEMP1129.dReg;


								final int RX10_TEMP1131 = Program.searchPointInRegion2(RX10_TEMP1130, RX10_TEMP1128,X10_TEMP444);


								final int RX10_TEMP1132 = 0;


								final boolean RX10_TEMP1133 = RX10_TEMP1131 < RX10_TEMP1132;

								if(RX10_TEMP1133)
									{

									String RX10_TEMP1134 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1134);

									}

								final int RX10_TEMP1135 = Program.getPlaceFromDist2(RX10_TEMP1129, RX10_TEMP1131,X10_TEMP444);


								final int RX10_TEMP1137 = 0;


								final boolean RX10_TEMP1138 = RX10_TEMP1135 != RX10_TEMP1137;

								if(RX10_TEMP1138)
									{

									String RX10_TEMP1136 = "Bad place access for array sCountBuffer";

									throw new RuntimeException(RX10_TEMP1136);

									}

								final int RX10_TEMP1139 = Program.getRefArrayValue2int(sCountBuffer, RX10_TEMP1131,X10_TEMP444);


								final int X10_TEMP481 = RX10_TEMP1139;

								RX10_TEMP1144[RX10_TEMP1125] =X10_TEMP481;
								}

;


							final intValArray1 RX10_TEMP1145 = new intValArray1(dSBuffer, RX10_TEMP1144,X10_TEMP444);
							
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1145.hashCode());


							final intValArray1 X10_TEMP482 = RX10_TEMP1145;


							final intValArray1 sBuffer = X10_TEMP482;


							final Point1 RX10_TEMP1146 = new Point1(pl,X10_TEMP444);
							
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1146.hashCode());


							final Dist1 RX10_TEMP1147 = sendCount.distValue;


							final Region1 RX10_TEMP1148 = RX10_TEMP1147.dReg;


							final int RX10_TEMP1149 = Program.searchPointInRegion1(RX10_TEMP1148, RX10_TEMP1146,X10_TEMP444);


							final int RX10_TEMP1150 = 0;


							final boolean RX10_TEMP1151 = RX10_TEMP1149 < RX10_TEMP1150;

							if(RX10_TEMP1151)
								{

								String RX10_TEMP1152 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1152);

								}

							final int RX10_TEMP1153 = Program.getPlaceFromDist1(RX10_TEMP1147, RX10_TEMP1149,X10_TEMP444);


							final int RX10_TEMP1155 = 0;


							final boolean RX10_TEMP1156 = RX10_TEMP1153 != RX10_TEMP1155;

							if(RX10_TEMP1156)
								{

								String RX10_TEMP1154 = "Bad place access for array sendCount";

								throw new RuntimeException(RX10_TEMP1154);

								}

							final int RX10_TEMP1157 = Program.getRefArrayValue1int(sendCount, RX10_TEMP1149,X10_TEMP444);


							final int nCount = RX10_TEMP1157;


							final Point1 RX10_TEMP1158 = new Point1(pl,X10_TEMP444);
							
Program.globalPointerHashMap.get(X10_TEMP444).add(RX10_TEMP1158.hashCode());


							final Dist1 RX10_TEMP1159 = sendGrids.distValue;


							final Region1 RX10_TEMP1160 = RX10_TEMP1159.dReg;


							final int RX10_TEMP1161 = Program.searchPointInRegion1(RX10_TEMP1160, RX10_TEMP1158,X10_TEMP444);


							final int RX10_TEMP1162 = 0;


							final boolean RX10_TEMP1163 = RX10_TEMP1161 < RX10_TEMP1162;

							if(RX10_TEMP1163)
								{

								String RX10_TEMP1164 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1164);

								}

							final int RX10_TEMP1165 = Program.getPlaceFromDist1(RX10_TEMP1159, RX10_TEMP1161,X10_TEMP444);


							final int RX10_TEMP1167 = 0;


							final boolean RX10_TEMP1168 = RX10_TEMP1165 != RX10_TEMP1167;

							if(RX10_TEMP1168)
								{

								String RX10_TEMP1166 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP1166);

								}

							final int RX10_TEMP1169 = Program.getRefArrayValue1int(sendGrids, RX10_TEMP1161,X10_TEMP444);


							final int nGrids = RX10_TEMP1169;

							/*FINISH
*/								{

								final int X10_TEMP488 = 0;


								final int X10_TEMP490 = 0;

								//async(X10_TEMP490)
									{

									final int X10_TEMP491 = 0;


									final int X10_TEMP493 = 0;


									final int X10_TEMP496 = nCount;


									final Point1 RX10_TEMP1170 = new Point1(X10_TEMP493,X10_TEMP490);
									
Program.globalPointerHashMap.get(X10_TEMP490).add(RX10_TEMP1170.hashCode());


									final Dist1 RX10_TEMP1171 = recvCount.distValue;


									final Region1 RX10_TEMP1172 = RX10_TEMP1171.dReg;


									final int RX10_TEMP1173 = Program.searchPointInRegion1(RX10_TEMP1172, RX10_TEMP1170,X10_TEMP490);


									final int RX10_TEMP1174 = 0;


									final boolean RX10_TEMP1175 = RX10_TEMP1173 < RX10_TEMP1174;

									if(RX10_TEMP1175)
										{

										String RX10_TEMP1176 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1176);

										}

									final int RX10_TEMP1177 = Program.getPlaceFromDist1(RX10_TEMP1171, RX10_TEMP1173,X10_TEMP490);


									final int RX10_TEMP1179 = 0;


									final boolean RX10_TEMP1180 = RX10_TEMP1177 != RX10_TEMP1179;

									if(RX10_TEMP1180)
										{

										String RX10_TEMP1178 = "Bad place access for array recvCount";

										throw new RuntimeException(RX10_TEMP1178);

										}
									Program.setRefArrayValue1int(recvCount, RX10_TEMP1173, X10_TEMP496,X10_TEMP490);

									final int X10_TEMP497 = 0;


									final int X10_TEMP499 = 0;


									final int X10_TEMP502 = nGrids;


									final Point1 RX10_TEMP1181 = new Point1(X10_TEMP499,X10_TEMP490);
									
Program.globalPointerHashMap.get(X10_TEMP490).add(RX10_TEMP1181.hashCode());


									final Dist1 RX10_TEMP1182 = recvGrids.distValue;


									final Region1 RX10_TEMP1183 = RX10_TEMP1182.dReg;


									final int RX10_TEMP1184 = Program.searchPointInRegion1(RX10_TEMP1183, RX10_TEMP1181,X10_TEMP490);


									final int RX10_TEMP1185 = 0;


									final boolean RX10_TEMP1186 = RX10_TEMP1184 < RX10_TEMP1185;

									if(RX10_TEMP1186)
										{

										String RX10_TEMP1187 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1187);

										}

									final int RX10_TEMP1188 = Program.getPlaceFromDist1(RX10_TEMP1182, RX10_TEMP1184,X10_TEMP490);


									final int RX10_TEMP1190 = 0;


									final boolean RX10_TEMP1191 = RX10_TEMP1188 != RX10_TEMP1190;

									if(RX10_TEMP1191)
										{

										String RX10_TEMP1189 = "Bad place access for array recvGrids";

										throw new RuntimeException(RX10_TEMP1189);

										}
									Program.setRefArrayValue1int(recvGrids, RX10_TEMP1184, X10_TEMP502,X10_TEMP490);

									final int X10_TEMP504 = 0;


									final int RX10_TEMP1196 = 1;


									int RX10_TEMP1194 = dSBuffer.regSize;


									RX10_TEMP1194 = RX10_TEMP1194 - RX10_TEMP1196;


									final int  RX10_TEMP1195 = RX10_TEMP1194+1;

									for(int RX10_TEMP1192=0; RX10_TEMP1192 < RX10_TEMP1195; RX10_TEMP1192++)
										{

										final int RX10_TEMP1197 = RX10_TEMP1192;


										final Point1 RX10_TEMP1193 = Program.regionOrdinalPoint1(dSBuffer, RX10_TEMP1197,X10_TEMP490);


										final int i = RX10_TEMP1193.f0;

										//async(X10_TEMP504)
											{

											final int X10_TEMP505 = 0;


											final int X10_TEMP508 = 0;


											final Point1 RX10_TEMP1198 = new Point1(i,X10_TEMP504);
											
Program.globalPointerHashMap.get(X10_TEMP504).add(RX10_TEMP1198.hashCode());


											final Region1 RX10_TEMP1199 = sBuffer.regionValue;


											final int RX10_TEMP1200 = Program.searchPointInRegion1(RX10_TEMP1199, RX10_TEMP1198,X10_TEMP504);


											final int RX10_TEMP1201 = 0;


											final boolean RX10_TEMP1202 = RX10_TEMP1200 < RX10_TEMP1201;

											if(RX10_TEMP1202)
												{

												String RX10_TEMP1203 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP1203);

												}

											final int[] RX10_TEMP1204 = (int[])(sBuffer.contents);


											final int X10_TEMP512 = RX10_TEMP1204[RX10_TEMP1200];


											final int X10_TEMP513 = X10_TEMP512;


											final Point2 RX10_TEMP1205 = new Point2(X10_TEMP508, i,X10_TEMP504);
											
Program.globalPointerHashMap.get(X10_TEMP504).add(RX10_TEMP1205.hashCode());


											final Dist2 RX10_TEMP1206 = rCountBuffer.distValue;


											final Region2 RX10_TEMP1207 = RX10_TEMP1206.dReg;


											final int RX10_TEMP1208 = Program.searchPointInRegion2(RX10_TEMP1207, RX10_TEMP1205,X10_TEMP504);


											final int RX10_TEMP1209 = 0;


											final boolean RX10_TEMP1210 = RX10_TEMP1208 < RX10_TEMP1209;

											if(RX10_TEMP1210)
												{

												String RX10_TEMP1211 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP1211);

												}

											final int RX10_TEMP1212 = Program.getPlaceFromDist2(RX10_TEMP1206, RX10_TEMP1208,X10_TEMP504);


											final int RX10_TEMP1214 = 0;


											final boolean RX10_TEMP1215 = RX10_TEMP1212 != RX10_TEMP1214;

											if(RX10_TEMP1215)
												{

												String RX10_TEMP1213 = "Bad place access for array rCountBuffer";

												throw new RuntimeException(RX10_TEMP1213);

												}
											Program.setRefArrayValue2int(rCountBuffer, RX10_TEMP1208, X10_TEMP513,X10_TEMP504);
											}
										}
									}
								}
							}
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP515 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP1217 = X10_TEMP515.dReg;


				final int RX10_TEMP1220 = 1;


				int RX10_TEMP1218 = RX10_TEMP1217.regSize;


				RX10_TEMP1218 = RX10_TEMP1218 - RX10_TEMP1220;


				final int  RX10_TEMP1219 = RX10_TEMP1218+1;

				for(int RX10_TEMP1216=0; RX10_TEMP1216 < RX10_TEMP1219; RX10_TEMP1216++)
					{

					final int RX10_TEMP1221 = RX10_TEMP1216;


					final Point1 X10_TEMP516 = Program.regionOrdinalPoint1(RX10_TEMP1217, RX10_TEMP1221,myUniquePlacePoint);


					final int pl = X10_TEMP516.f0;


					final Region1 RX10_TEMP1222 = X10_TEMP515.dReg;


					final int RX10_TEMP1223 = Program.searchPointInRegion1(RX10_TEMP1222, X10_TEMP516,myUniquePlacePoint);


					final int RX10_TEMP1224 = 0;


					final boolean RX10_TEMP1225 = RX10_TEMP1223 < RX10_TEMP1224;

					if(RX10_TEMP1225)
						{

						final String RX10_TEMP1226 = "Point X10_TEMP516 not found in the distribution X10_TEMP515.";

						throw new RuntimeException(RX10_TEMP1226);

						}

					final int RX10_TEMP1227 = Program.getPlaceFromDist1(X10_TEMP515, RX10_TEMP1223,myUniquePlacePoint);


					final int X10_TEMP517 = RX10_TEMP1227;

					//async(X10_TEMP517)
						{

						final int X10_TEMP521 = 0;


						final int X10_TEMP522 = X10_TEMP521;


						final Point1 RX10_TEMP1228 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1228.hashCode());


						final Dist1 RX10_TEMP1229 = finished.distValue;


						final Region1 RX10_TEMP1230 = RX10_TEMP1229.dReg;


						final int RX10_TEMP1231 = Program.searchPointInRegion1(RX10_TEMP1230, RX10_TEMP1228,X10_TEMP517);


						final int RX10_TEMP1232 = 0;


						final boolean RX10_TEMP1233 = RX10_TEMP1231 < RX10_TEMP1232;

						if(RX10_TEMP1233)
							{

							String RX10_TEMP1234 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1234);

							}

						final int RX10_TEMP1235 = Program.getPlaceFromDist1(RX10_TEMP1229, RX10_TEMP1231,X10_TEMP517);


						final int RX10_TEMP1237 = 0;


						final boolean RX10_TEMP1238 = RX10_TEMP1235 != RX10_TEMP1237;

						if(RX10_TEMP1238)
							{

							String RX10_TEMP1236 = "Bad place access for array finished";

							throw new RuntimeException(RX10_TEMP1236);

							}
						Program.setRefArrayValue1int(finished, RX10_TEMP1231, X10_TEMP522,X10_TEMP517);

						final double X10_TEMP523 = pl * countAve;


						final double X10_TEMP524 = 0.5;


						final double X10_TEMP526 = X10_TEMP523 + X10_TEMP524;


						final int expected1 = (int)X10_TEMP526;


						final int X10_TEMP528 = 1;


						final int X10_TEMP530 = pl - X10_TEMP528;


						final double X10_TEMP531 = X10_TEMP530 * countAve;


						final double X10_TEMP532 = 0.5;


						final double X10_TEMP534 = X10_TEMP531 + X10_TEMP532;


						final int expected2 = (int)X10_TEMP534;


						final Point1 RX10_TEMP1239 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1239.hashCode());


						final Dist1 RX10_TEMP1240 = runningPTotals.distValue;


						final Region1 RX10_TEMP1241 = RX10_TEMP1240.dReg;


						final int RX10_TEMP1242 = Program.searchPointInRegion1(RX10_TEMP1241, RX10_TEMP1239,X10_TEMP517);


						final int RX10_TEMP1243 = 0;


						final boolean RX10_TEMP1244 = RX10_TEMP1242 < RX10_TEMP1243;

						if(RX10_TEMP1244)
							{

							String RX10_TEMP1245 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1245);

							}

						final int RX10_TEMP1246 = Program.getPlaceFromDist1(RX10_TEMP1240, RX10_TEMP1242,X10_TEMP517);


						final int RX10_TEMP1248 = 0;


						final boolean RX10_TEMP1249 = RX10_TEMP1246 != RX10_TEMP1248;

						if(RX10_TEMP1249)
							{

							String RX10_TEMP1247 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP1247);

							}

						final int RX10_TEMP1250 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1242,X10_TEMP517);


						final int X10_TEMP537 = RX10_TEMP1250;


						final int X10_TEMP539 = expected2 - X10_TEMP537;


						final Point1 RX10_TEMP1251 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1251.hashCode());


						final Dist1 RX10_TEMP1252 = sendCount.distValue;


						final Region1 RX10_TEMP1253 = RX10_TEMP1252.dReg;


						final int RX10_TEMP1254 = Program.searchPointInRegion1(RX10_TEMP1253, RX10_TEMP1251,X10_TEMP517);


						final int RX10_TEMP1255 = 0;


						final boolean RX10_TEMP1256 = RX10_TEMP1254 < RX10_TEMP1255;

						if(RX10_TEMP1256)
							{

							String RX10_TEMP1257 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1257);

							}

						final int RX10_TEMP1258 = Program.getPlaceFromDist1(RX10_TEMP1252, RX10_TEMP1254,X10_TEMP517);


						final int RX10_TEMP1260 = 0;


						final boolean RX10_TEMP1261 = RX10_TEMP1258 != RX10_TEMP1260;

						if(RX10_TEMP1261)
							{

							String RX10_TEMP1259 = "Bad place access for array sendCount";

							throw new RuntimeException(RX10_TEMP1259);

							}

						final int RX10_TEMP1262 = Program.getRefArrayValue1int(sendCount, RX10_TEMP1254,X10_TEMP517);


						final int X10_TEMP540 = RX10_TEMP1262;


						final int lDeficit = X10_TEMP539 + X10_TEMP540;


						final Point1 RX10_TEMP1263 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1263.hashCode());


						final Dist1 RX10_TEMP1264 = runningPTotals.distValue;


						final Region1 RX10_TEMP1265 = RX10_TEMP1264.dReg;


						final int RX10_TEMP1266 = Program.searchPointInRegion1(RX10_TEMP1265, RX10_TEMP1263,X10_TEMP517);


						final int RX10_TEMP1267 = 0;


						final boolean RX10_TEMP1268 = RX10_TEMP1266 < RX10_TEMP1267;

						if(RX10_TEMP1268)
							{

							String RX10_TEMP1269 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1269);

							}

						final int RX10_TEMP1270 = Program.getPlaceFromDist1(RX10_TEMP1264, RX10_TEMP1266,X10_TEMP517);


						final int RX10_TEMP1272 = 0;


						final boolean RX10_TEMP1273 = RX10_TEMP1270 != RX10_TEMP1272;

						if(RX10_TEMP1273)
							{

							String RX10_TEMP1271 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP1271);

							}

						final int RX10_TEMP1274 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1266,X10_TEMP517);


						final int X10_TEMP543 = RX10_TEMP1274;


						final int rDeficit = X10_TEMP543 - expected1;


						final Point1 RX10_TEMP1275 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1275.hashCode());


						final Dist1 RX10_TEMP1276 = runningPTotals.distValue;


						final Region1 RX10_TEMP1277 = RX10_TEMP1276.dReg;


						final int RX10_TEMP1278 = Program.searchPointInRegion1(RX10_TEMP1277, RX10_TEMP1275,X10_TEMP517);


						final int RX10_TEMP1279 = 0;


						final boolean RX10_TEMP1280 = RX10_TEMP1278 < RX10_TEMP1279;

						if(RX10_TEMP1280)
							{

							String RX10_TEMP1281 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1281);

							}

						final int RX10_TEMP1282 = Program.getPlaceFromDist1(RX10_TEMP1276, RX10_TEMP1278,X10_TEMP517);


						final int RX10_TEMP1284 = 0;


						final boolean RX10_TEMP1285 = RX10_TEMP1282 != RX10_TEMP1284;

						if(RX10_TEMP1285)
							{

							String RX10_TEMP1283 = "Bad place access for array runningPTotals";

							throw new RuntimeException(RX10_TEMP1283);

							}

						final int RX10_TEMP1286 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1278,X10_TEMP517);


						final int X10_TEMP546 = RX10_TEMP1286;


						final boolean X10_TEMP548 = X10_TEMP546 < expected1;

						if(X10_TEMP548)
							{

							final Point1 RX10_TEMP1287 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1287.hashCode());


							final Dist1 RX10_TEMP1288 = runningPTotals.distValue;


							final Region1 RX10_TEMP1289 = RX10_TEMP1288.dReg;


							final int RX10_TEMP1290 = Program.searchPointInRegion1(RX10_TEMP1289, RX10_TEMP1287,X10_TEMP517);


							final int RX10_TEMP1291 = 0;


							final boolean RX10_TEMP1292 = RX10_TEMP1290 < RX10_TEMP1291;

							if(RX10_TEMP1292)
								{

								String RX10_TEMP1293 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1293);

								}

							final int RX10_TEMP1294 = Program.getPlaceFromDist1(RX10_TEMP1288, RX10_TEMP1290,X10_TEMP517);


							final int RX10_TEMP1296 = 0;


							final boolean RX10_TEMP1297 = RX10_TEMP1294 != RX10_TEMP1296;

							if(RX10_TEMP1297)
								{

								String RX10_TEMP1295 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP1295);

								}

							final int RX10_TEMP1298 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1290,X10_TEMP517);


							final int X10_TEMP551 = RX10_TEMP1298;


							final Point1 RX10_TEMP1299 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1299.hashCode());


							final Dist1 RX10_TEMP1300 = recvCount.distValue;


							final Region1 RX10_TEMP1301 = RX10_TEMP1300.dReg;


							final int RX10_TEMP1302 = Program.searchPointInRegion1(RX10_TEMP1301, RX10_TEMP1299,X10_TEMP517);


							final int RX10_TEMP1303 = 0;


							final boolean RX10_TEMP1304 = RX10_TEMP1302 < RX10_TEMP1303;

							if(RX10_TEMP1304)
								{

								String RX10_TEMP1305 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1305);

								}

							final int RX10_TEMP1306 = Program.getPlaceFromDist1(RX10_TEMP1300, RX10_TEMP1302,X10_TEMP517);


							final int RX10_TEMP1308 = 0;


							final boolean RX10_TEMP1309 = RX10_TEMP1306 != RX10_TEMP1308;

							if(RX10_TEMP1309)
								{

								String RX10_TEMP1307 = "Bad place access for array recvCount";

								throw new RuntimeException(RX10_TEMP1307);

								}

							final int RX10_TEMP1310 = Program.getRefArrayValue1int(recvCount, RX10_TEMP1302,X10_TEMP517);


							final int X10_TEMP552 = RX10_TEMP1310;


							final int X10_TEMP553 = X10_TEMP551 + X10_TEMP552;


							final boolean X10_TEMP555 = X10_TEMP553 >= expected1;

							if(X10_TEMP555)
								{

								final Point1 RX10_TEMP1311 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1311.hashCode());


								final Dist1 RX10_TEMP1312 = recvGrids.distValue;


								final Region1 RX10_TEMP1313 = RX10_TEMP1312.dReg;


								final int RX10_TEMP1314 = Program.searchPointInRegion1(RX10_TEMP1313, RX10_TEMP1311,X10_TEMP517);


								final int RX10_TEMP1315 = 0;


								final boolean RX10_TEMP1316 = RX10_TEMP1314 < RX10_TEMP1315;

								if(RX10_TEMP1316)
									{

									String RX10_TEMP1317 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1317);

									}

								final int RX10_TEMP1318 = Program.getPlaceFromDist1(RX10_TEMP1312, RX10_TEMP1314,X10_TEMP517);


								final int RX10_TEMP1320 = 0;


								final boolean RX10_TEMP1321 = RX10_TEMP1318 != RX10_TEMP1320;

								if(RX10_TEMP1321)
									{

									String RX10_TEMP1319 = "Bad place access for array recvGrids";

									throw new RuntimeException(RX10_TEMP1319);

									}

								final int RX10_TEMP1322 = Program.getRefArrayValue1int(recvGrids, RX10_TEMP1314,X10_TEMP517);


								final int gsize = RX10_TEMP1322;


								int oldTotal = 0;


								int total = 0;


								int i = 0;


								boolean X10_TEMP561 = false;

								do 									{

									oldTotal = total;


									final Point2 RX10_TEMP1323 = new Point2(pl, i,X10_TEMP517);
									
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1323.hashCode());


									final Dist2 RX10_TEMP1324 = rCountBuffer.distValue;


									final Region2 RX10_TEMP1325 = RX10_TEMP1324.dReg;


									final int RX10_TEMP1326 = Program.searchPointInRegion2(RX10_TEMP1325, RX10_TEMP1323,X10_TEMP517);


									final int RX10_TEMP1327 = 0;


									final boolean RX10_TEMP1328 = RX10_TEMP1326 < RX10_TEMP1327;

									if(RX10_TEMP1328)
										{

										String RX10_TEMP1329 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1329);

										}

									final int RX10_TEMP1330 = Program.getPlaceFromDist2(RX10_TEMP1324, RX10_TEMP1326,X10_TEMP517);


									final int RX10_TEMP1332 = 0;


									final boolean RX10_TEMP1333 = RX10_TEMP1330 != RX10_TEMP1332;

									if(RX10_TEMP1333)
										{

										String RX10_TEMP1331 = "Bad place access for array rCountBuffer";

										throw new RuntimeException(RX10_TEMP1331);

										}

									final int RX10_TEMP1334 = Program.getRefArrayValue2int(rCountBuffer, RX10_TEMP1326,X10_TEMP517);


									final int X10_TEMP565 = RX10_TEMP1334;


									final int X10_TEMP567 = total + X10_TEMP565;


									total = X10_TEMP567;


									final int X10_TEMP568 = i;


									final int X10_TEMP569 = 1;


									i = i + X10_TEMP569;


									final int X10_TEMP570 = 0;


									final int X10_TEMP571 = X10_TEMP570 - rDeficit;


									final boolean X10_TEMP572 = total < X10_TEMP571;


									final boolean X10_TEMP573 = i < gsize;


									X10_TEMP561 = X10_TEMP572 && X10_TEMP573;

									}
								
 while(X10_TEMP561);
								final int X10_TEMP575 = 1;


								final int X10_TEMP588 = i - X10_TEMP575;


								final int X10_TEMP576 = 0;


								final int X10_TEMP577 = X10_TEMP576 - rDeficit;


								final int X10_TEMP579 = X10_TEMP577 - oldTotal;


								final double X10_TEMP581 = (double)X10_TEMP579;


								final int X10_TEMP583 = total - oldTotal;


								final double X10_TEMP585 = (double)X10_TEMP583;


								final double X10_TEMP587 = X10_TEMP581 / X10_TEMP585;


								final double X10_TEMP590 = X10_TEMP588 + X10_TEMP587;


								final int offset = (int)X10_TEMP590;


								final Point1 RX10_TEMP1335 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1335.hashCode());


								final Dist1 RX10_TEMP1336 = runningGTotals.distValue;


								final Region1 RX10_TEMP1337 = RX10_TEMP1336.dReg;


								final int RX10_TEMP1338 = Program.searchPointInRegion1(RX10_TEMP1337, RX10_TEMP1335,X10_TEMP517);


								final int RX10_TEMP1339 = 0;


								final boolean RX10_TEMP1340 = RX10_TEMP1338 < RX10_TEMP1339;

								if(RX10_TEMP1340)
									{

									String RX10_TEMP1341 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1341);

									}

								final int RX10_TEMP1342 = Program.getPlaceFromDist1(RX10_TEMP1336, RX10_TEMP1338,X10_TEMP517);


								final int RX10_TEMP1344 = 0;


								final boolean RX10_TEMP1345 = RX10_TEMP1342 != RX10_TEMP1344;

								if(RX10_TEMP1345)
									{

									String RX10_TEMP1343 = "Bad place access for array runningGTotals";

									throw new RuntimeException(RX10_TEMP1343);

									}

								final int RX10_TEMP1346 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP1338,X10_TEMP517);


								final int X10_TEMP594 = RX10_TEMP1346;


								final double X10_TEMP597 = X10_TEMP594 + offset;


								final double X10_TEMP598 = X10_TEMP597;


								final Point1 RX10_TEMP1347 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1347.hashCode());


								final Dist1 RX10_TEMP1348 = border.distValue;


								final Region1 RX10_TEMP1349 = RX10_TEMP1348.dReg;


								final int RX10_TEMP1350 = Program.searchPointInRegion1(RX10_TEMP1349, RX10_TEMP1347,X10_TEMP517);


								final int RX10_TEMP1351 = 0;


								final boolean RX10_TEMP1352 = RX10_TEMP1350 < RX10_TEMP1351;

								if(RX10_TEMP1352)
									{

									String RX10_TEMP1353 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1353);

									}

								final int RX10_TEMP1354 = Program.getPlaceFromDist1(RX10_TEMP1348, RX10_TEMP1350,X10_TEMP517);


								final int RX10_TEMP1356 = 0;


								final boolean RX10_TEMP1357 = RX10_TEMP1354 != RX10_TEMP1356;

								if(RX10_TEMP1357)
									{

									String RX10_TEMP1355 = "Bad place access for array border";

									throw new RuntimeException(RX10_TEMP1355);

									}
								Program.setRefArrayValue1double(border, RX10_TEMP1350, X10_TEMP598,X10_TEMP517);
								}
							else
								{

								final Point1 RX10_TEMP1358 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1358.hashCode());


								final Dist1 RX10_TEMP1359 = finished.distValue;


								final Region1 RX10_TEMP1360 = RX10_TEMP1359.dReg;


								final int RX10_TEMP1361 = Program.searchPointInRegion1(RX10_TEMP1360, RX10_TEMP1358,X10_TEMP517);


								final int RX10_TEMP1362 = 0;


								final boolean RX10_TEMP1363 = RX10_TEMP1361 < RX10_TEMP1362;

								if(RX10_TEMP1363)
									{

									String RX10_TEMP1364 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1364);

									}

								final int RX10_TEMP1365 = Program.getPlaceFromDist1(RX10_TEMP1359, RX10_TEMP1361,X10_TEMP517);


								final int RX10_TEMP1367 = 0;


								final boolean RX10_TEMP1368 = RX10_TEMP1365 != RX10_TEMP1367;

								if(RX10_TEMP1368)
									{

									String RX10_TEMP1366 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP1366);

									}

								final int RX10_TEMP1369 = Program.getRefArrayValue1int(finished, RX10_TEMP1361,X10_TEMP517);


								final int X10_TEMP600 = RX10_TEMP1369;


								final int X10_TEMP601 = 1;


								final Point1 RX10_TEMP1370 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1370.hashCode());


								final Dist1 RX10_TEMP1371 = finished.distValue;


								final Region1 RX10_TEMP1372 = RX10_TEMP1371.dReg;


								final int RX10_TEMP1373 = Program.searchPointInRegion1(RX10_TEMP1372, RX10_TEMP1370,X10_TEMP517);


								final int RX10_TEMP1374 = 0;


								final boolean RX10_TEMP1375 = RX10_TEMP1373 < RX10_TEMP1374;

								if(RX10_TEMP1375)
									{

									String RX10_TEMP1376 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP1376);

									}

								final int RX10_TEMP1377 = Program.getPlaceFromDist1(RX10_TEMP1371, RX10_TEMP1373,X10_TEMP517);


								final int RX10_TEMP1379 = 0;


								final boolean RX10_TEMP1380 = RX10_TEMP1377 != RX10_TEMP1379;

								if(RX10_TEMP1380)
									{

									String RX10_TEMP1378 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP1378);

									}

								final int RX10_TEMP1381 = Program.getRefArrayValue1int(finished, RX10_TEMP1373,X10_TEMP517);


								final int X10_TEMP602 = RX10_TEMP1381;


								final int X10_TEMP603 = X10_TEMP602 + X10_TEMP601;


								final Point1 RX10_TEMP1382 = new Point1(pl,X10_TEMP517);
								
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1382.hashCode());


								final Dist1 RX10_TEMP1383 = finished.distValue;


								final Region1 RX10_TEMP1384 = RX10_TEMP1383.dReg;


								final int RX10_TEMP1385 = Program.searchPointInRegion1(RX10_TEMP1384, RX10_TEMP1382,X10_TEMP517);


								final int RX10_TEMP1386 = 0;


								final boolean RX10_TEMP1387 = RX10_TEMP1385 < RX10_TEMP1386;

								if(RX10_TEMP1387)
									{

									String RX10_TEMP1388 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP1388);

									}

								final int RX10_TEMP1389 = Program.getPlaceFromDist1(RX10_TEMP1383, RX10_TEMP1385,X10_TEMP517);


								final int RX10_TEMP1391 = 0;


								final boolean RX10_TEMP1392 = RX10_TEMP1389 != RX10_TEMP1391;

								if(RX10_TEMP1392)
									{

									String RX10_TEMP1390 = "Bad place access for array finished";

									throw new RuntimeException(RX10_TEMP1390);

									}
								Program.setRefArrayValue1int(finished, RX10_TEMP1385, X10_TEMP603,X10_TEMP517);
								}
 							}

						final Point1 RX10_TEMP1393 = new Point1(pl,X10_TEMP517);
						
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1393.hashCode());


						final Dist1 RX10_TEMP1394 = sendCount.distValue;


						final Region1 RX10_TEMP1395 = RX10_TEMP1394.dReg;


						final int RX10_TEMP1396 = Program.searchPointInRegion1(RX10_TEMP1395, RX10_TEMP1393,X10_TEMP517);


						final int RX10_TEMP1397 = 0;


						final boolean RX10_TEMP1398 = RX10_TEMP1396 < RX10_TEMP1397;

						if(RX10_TEMP1398)
							{

							String RX10_TEMP1399 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP1399);

							}

						final int RX10_TEMP1400 = Program.getPlaceFromDist1(RX10_TEMP1394, RX10_TEMP1396,X10_TEMP517);


						final int RX10_TEMP1402 = 0;


						final boolean RX10_TEMP1403 = RX10_TEMP1400 != RX10_TEMP1402;

						if(RX10_TEMP1403)
							{

							String RX10_TEMP1401 = "Bad place access for array sendCount";

							throw new RuntimeException(RX10_TEMP1401);

							}

						final int RX10_TEMP1404 = Program.getRefArrayValue1int(sendCount, RX10_TEMP1396,X10_TEMP517);


						final int X10_TEMP605 = RX10_TEMP1404;


						final boolean X10_TEMP607 = lDeficit > X10_TEMP605;

						if(X10_TEMP607)
							{

							final Point1 RX10_TEMP1405 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1405.hashCode());


							final Dist1 RX10_TEMP1406 = finished.distValue;


							final Region1 RX10_TEMP1407 = RX10_TEMP1406.dReg;


							final int RX10_TEMP1408 = Program.searchPointInRegion1(RX10_TEMP1407, RX10_TEMP1405,X10_TEMP517);


							final int RX10_TEMP1409 = 0;


							final boolean RX10_TEMP1410 = RX10_TEMP1408 < RX10_TEMP1409;

							if(RX10_TEMP1410)
								{

								String RX10_TEMP1411 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1411);

								}

							final int RX10_TEMP1412 = Program.getPlaceFromDist1(RX10_TEMP1406, RX10_TEMP1408,X10_TEMP517);


							final int RX10_TEMP1414 = 0;


							final boolean RX10_TEMP1415 = RX10_TEMP1412 != RX10_TEMP1414;

							if(RX10_TEMP1415)
								{

								String RX10_TEMP1413 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP1413);

								}

							final int RX10_TEMP1416 = Program.getRefArrayValue1int(finished, RX10_TEMP1408,X10_TEMP517);


							final int X10_TEMP609 = RX10_TEMP1416;


							final int X10_TEMP610 = 1;


							final Point1 RX10_TEMP1417 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1417.hashCode());


							final Dist1 RX10_TEMP1418 = finished.distValue;


							final Region1 RX10_TEMP1419 = RX10_TEMP1418.dReg;


							final int RX10_TEMP1420 = Program.searchPointInRegion1(RX10_TEMP1419, RX10_TEMP1417,X10_TEMP517);


							final int RX10_TEMP1421 = 0;


							final boolean RX10_TEMP1422 = RX10_TEMP1420 < RX10_TEMP1421;

							if(RX10_TEMP1422)
								{

								String RX10_TEMP1423 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1423);

								}

							final int RX10_TEMP1424 = Program.getPlaceFromDist1(RX10_TEMP1418, RX10_TEMP1420,X10_TEMP517);


							final int RX10_TEMP1426 = 0;


							final boolean RX10_TEMP1427 = RX10_TEMP1424 != RX10_TEMP1426;

							if(RX10_TEMP1427)
								{

								String RX10_TEMP1425 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP1425);

								}

							final int RX10_TEMP1428 = Program.getRefArrayValue1int(finished, RX10_TEMP1420,X10_TEMP517);


							final int X10_TEMP611 = RX10_TEMP1428;


							final int X10_TEMP612 = X10_TEMP611 + X10_TEMP610;


							final Point1 RX10_TEMP1429 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1429.hashCode());


							final Dist1 RX10_TEMP1430 = finished.distValue;


							final Region1 RX10_TEMP1431 = RX10_TEMP1430.dReg;


							final int RX10_TEMP1432 = Program.searchPointInRegion1(RX10_TEMP1431, RX10_TEMP1429,X10_TEMP517);


							final int RX10_TEMP1433 = 0;


							final boolean RX10_TEMP1434 = RX10_TEMP1432 < RX10_TEMP1433;

							if(RX10_TEMP1434)
								{

								String RX10_TEMP1435 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1435);

								}

							final int RX10_TEMP1436 = Program.getPlaceFromDist1(RX10_TEMP1430, RX10_TEMP1432,X10_TEMP517);


							final int RX10_TEMP1438 = 0;


							final boolean RX10_TEMP1439 = RX10_TEMP1436 != RX10_TEMP1438;

							if(RX10_TEMP1439)
								{

								String RX10_TEMP1437 = "Bad place access for array finished";

								throw new RuntimeException(RX10_TEMP1437);

								}
							Program.setRefArrayValue1int(finished, RX10_TEMP1432, X10_TEMP612,X10_TEMP517);
							}

						final int X10_TEMP613 = 0;


						final boolean X10_TEMP614 = true;


						final boolean X10_TEMP616 = ! X10_TEMP614;

						if(X10_TEMP616)
							{

							final Point1 RX10_TEMP1440 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1440.hashCode());


							final Dist1 RX10_TEMP1441 = recvCount.distValue;


							final Region1 RX10_TEMP1442 = RX10_TEMP1441.dReg;


							final int RX10_TEMP1443 = Program.searchPointInRegion1(RX10_TEMP1442, RX10_TEMP1440,X10_TEMP517);


							final int RX10_TEMP1444 = 0;


							final boolean RX10_TEMP1445 = RX10_TEMP1443 < RX10_TEMP1444;

							if(RX10_TEMP1445)
								{

								String RX10_TEMP1446 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1446);

								}

							final int RX10_TEMP1447 = Program.getPlaceFromDist1(RX10_TEMP1441, RX10_TEMP1443,X10_TEMP517);


							final int RX10_TEMP1449 = 0;


							final boolean RX10_TEMP1450 = RX10_TEMP1447 != RX10_TEMP1449;

							if(RX10_TEMP1450)
								{

								String RX10_TEMP1448 = "Bad place access for array recvCount";

								throw new RuntimeException(RX10_TEMP1448);

								}

							final int RX10_TEMP1451 = Program.getRefArrayValue1int(recvCount, RX10_TEMP1443,X10_TEMP517);


							final int count = RX10_TEMP1451;


							final Point1 RX10_TEMP1452 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1452.hashCode());


							final Dist1 RX10_TEMP1453 = recvGrids.distValue;


							final Region1 RX10_TEMP1454 = RX10_TEMP1453.dReg;


							final int RX10_TEMP1455 = Program.searchPointInRegion1(RX10_TEMP1454, RX10_TEMP1452,X10_TEMP517);


							final int RX10_TEMP1456 = 0;


							final boolean RX10_TEMP1457 = RX10_TEMP1455 < RX10_TEMP1456;

							if(RX10_TEMP1457)
								{

								String RX10_TEMP1458 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1458);

								}

							final int RX10_TEMP1459 = Program.getPlaceFromDist1(RX10_TEMP1453, RX10_TEMP1455,X10_TEMP517);


							final int RX10_TEMP1461 = 0;


							final boolean RX10_TEMP1462 = RX10_TEMP1459 != RX10_TEMP1461;

							if(RX10_TEMP1462)
								{

								String RX10_TEMP1460 = "Bad place access for array recvGrids";

								throw new RuntimeException(RX10_TEMP1460);

								}

							final int RX10_TEMP1463 = Program.getRefArrayValue1int(recvGrids, RX10_TEMP1455,X10_TEMP517);


							final int gsize = RX10_TEMP1463;


							final Point1 RX10_TEMP1464 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1464.hashCode());


							final Dist1 RX10_TEMP1465 = runningPTotals.distValue;


							final Region1 RX10_TEMP1466 = RX10_TEMP1465.dReg;


							final int RX10_TEMP1467 = Program.searchPointInRegion1(RX10_TEMP1466, RX10_TEMP1464,X10_TEMP517);


							final int RX10_TEMP1468 = 0;


							final boolean RX10_TEMP1469 = RX10_TEMP1467 < RX10_TEMP1468;

							if(RX10_TEMP1469)
								{

								String RX10_TEMP1470 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1470);

								}

							final int RX10_TEMP1471 = Program.getPlaceFromDist1(RX10_TEMP1465, RX10_TEMP1467,X10_TEMP517);


							final int RX10_TEMP1473 = 0;


							final boolean RX10_TEMP1474 = RX10_TEMP1471 != RX10_TEMP1473;

							if(RX10_TEMP1474)
								{

								String RX10_TEMP1472 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP1472);

								}

							final int RX10_TEMP1475 = Program.getRefArrayValue1int(runningPTotals, RX10_TEMP1467,X10_TEMP517);


							final int X10_TEMP623 = RX10_TEMP1475;


							final int X10_TEMP626 = X10_TEMP623 + count;


							final int X10_TEMP627 = X10_TEMP626;


							final Point1 RX10_TEMP1476 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1476.hashCode());


							final Dist1 RX10_TEMP1477 = runningPTotals.distValue;


							final Region1 RX10_TEMP1478 = RX10_TEMP1477.dReg;


							final int RX10_TEMP1479 = Program.searchPointInRegion1(RX10_TEMP1478, RX10_TEMP1476,X10_TEMP517);


							final int RX10_TEMP1480 = 0;


							final boolean RX10_TEMP1481 = RX10_TEMP1479 < RX10_TEMP1480;

							if(RX10_TEMP1481)
								{

								String RX10_TEMP1482 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1482);

								}

							final int RX10_TEMP1483 = Program.getPlaceFromDist1(RX10_TEMP1477, RX10_TEMP1479,X10_TEMP517);


							final int RX10_TEMP1485 = 0;


							final boolean RX10_TEMP1486 = RX10_TEMP1483 != RX10_TEMP1485;

							if(RX10_TEMP1486)
								{

								String RX10_TEMP1484 = "Bad place access for array runningPTotals";

								throw new RuntimeException(RX10_TEMP1484);

								}
							Program.setRefArrayValue1int(runningPTotals, RX10_TEMP1479, X10_TEMP627,X10_TEMP517);

							final Point1 RX10_TEMP1487 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1487.hashCode());


							final Dist1 RX10_TEMP1488 = runningGTotals.distValue;


							final Region1 RX10_TEMP1489 = RX10_TEMP1488.dReg;


							final int RX10_TEMP1490 = Program.searchPointInRegion1(RX10_TEMP1489, RX10_TEMP1487,X10_TEMP517);


							final int RX10_TEMP1491 = 0;


							final boolean RX10_TEMP1492 = RX10_TEMP1490 < RX10_TEMP1491;

							if(RX10_TEMP1492)
								{

								String RX10_TEMP1493 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1493);

								}

							final int RX10_TEMP1494 = Program.getPlaceFromDist1(RX10_TEMP1488, RX10_TEMP1490,X10_TEMP517);


							final int RX10_TEMP1496 = 0;


							final boolean RX10_TEMP1497 = RX10_TEMP1494 != RX10_TEMP1496;

							if(RX10_TEMP1497)
								{

								String RX10_TEMP1495 = "Bad place access for array runningGTotals";

								throw new RuntimeException(RX10_TEMP1495);

								}

							final int RX10_TEMP1498 = Program.getRefArrayValue1int(runningGTotals, RX10_TEMP1490,X10_TEMP517);


							final int X10_TEMP630 = RX10_TEMP1498;


							final int X10_TEMP633 = X10_TEMP630 + gsize;


							final int X10_TEMP634 = X10_TEMP633;


							final Point1 RX10_TEMP1499 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1499.hashCode());


							final Dist1 RX10_TEMP1500 = runningGTotals.distValue;


							final Region1 RX10_TEMP1501 = RX10_TEMP1500.dReg;


							final int RX10_TEMP1502 = Program.searchPointInRegion1(RX10_TEMP1501, RX10_TEMP1499,X10_TEMP517);


							final int RX10_TEMP1503 = 0;


							final boolean RX10_TEMP1504 = RX10_TEMP1502 < RX10_TEMP1503;

							if(RX10_TEMP1504)
								{

								String RX10_TEMP1505 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1505);

								}

							final int RX10_TEMP1506 = Program.getPlaceFromDist1(RX10_TEMP1500, RX10_TEMP1502,X10_TEMP517);


							final int RX10_TEMP1508 = 0;


							final boolean RX10_TEMP1509 = RX10_TEMP1506 != RX10_TEMP1508;

							if(RX10_TEMP1509)
								{

								String RX10_TEMP1507 = "Bad place access for array runningGTotals";

								throw new RuntimeException(RX10_TEMP1507);

								}
							Program.setRefArrayValue1int(runningGTotals, RX10_TEMP1502, X10_TEMP634,X10_TEMP517);

							final int X10_TEMP638 = count;


							final Point1 RX10_TEMP1510 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1510.hashCode());


							final Dist1 RX10_TEMP1511 = sendCount.distValue;


							final Region1 RX10_TEMP1512 = RX10_TEMP1511.dReg;


							final int RX10_TEMP1513 = Program.searchPointInRegion1(RX10_TEMP1512, RX10_TEMP1510,X10_TEMP517);


							final int RX10_TEMP1514 = 0;


							final boolean RX10_TEMP1515 = RX10_TEMP1513 < RX10_TEMP1514;

							if(RX10_TEMP1515)
								{

								String RX10_TEMP1516 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1516);

								}

							final int RX10_TEMP1517 = Program.getPlaceFromDist1(RX10_TEMP1511, RX10_TEMP1513,X10_TEMP517);


							final int RX10_TEMP1519 = 0;


							final boolean RX10_TEMP1520 = RX10_TEMP1517 != RX10_TEMP1519;

							if(RX10_TEMP1520)
								{

								String RX10_TEMP1518 = "Bad place access for array sendCount";

								throw new RuntimeException(RX10_TEMP1518);

								}
							Program.setRefArrayValue1int(sendCount, RX10_TEMP1513, X10_TEMP638,X10_TEMP517);

							final int X10_TEMP642 = gsize;


							final Point1 RX10_TEMP1521 = new Point1(pl,X10_TEMP517);
							
Program.globalPointerHashMap.get(X10_TEMP517).add(RX10_TEMP1521.hashCode());


							final Dist1 RX10_TEMP1522 = sendGrids.distValue;


							final Region1 RX10_TEMP1523 = RX10_TEMP1522.dReg;


							final int RX10_TEMP1524 = Program.searchPointInRegion1(RX10_TEMP1523, RX10_TEMP1521,X10_TEMP517);


							final int RX10_TEMP1525 = 0;


							final boolean RX10_TEMP1526 = RX10_TEMP1524 < RX10_TEMP1525;

							if(RX10_TEMP1526)
								{

								String RX10_TEMP1527 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1527);

								}

							final int RX10_TEMP1528 = Program.getPlaceFromDist1(RX10_TEMP1522, RX10_TEMP1524,X10_TEMP517);


							final int RX10_TEMP1530 = 0;


							final boolean RX10_TEMP1531 = RX10_TEMP1528 != RX10_TEMP1530;

							if(RX10_TEMP1531)
								{

								String RX10_TEMP1529 = "Bad place access for array sendGrids";

								throw new RuntimeException(RX10_TEMP1529);

								}
							Program.setRefArrayValue1int(sendGrids, RX10_TEMP1524, X10_TEMP642,X10_TEMP517);

							final int X10_TEMP648 = 0;


							final int X10_TEMP646 = 1;


							final int X10_TEMP649 = gsize - X10_TEMP646;


							final Region2 X10_TEMP651 = Program.createNewRegion2RR(pl, pl, X10_TEMP648, X10_TEMP649,X10_TEMP517);


							final int X10_TEMP652 = 0;


							final int RX10_TEMP1535 = 1;


							int RX10_TEMP1533 = X10_TEMP651.regSize;


							RX10_TEMP1533 = RX10_TEMP1533 - RX10_TEMP1535;


							final int  RX10_TEMP1534 = RX10_TEMP1533+1;

							for(int RX10_TEMP1532=0; RX10_TEMP1532 < RX10_TEMP1534; RX10_TEMP1532++)
								{

								final int RX10_TEMP1536 = RX10_TEMP1532;


								final Point2 pt = Program.regionOrdinalPoint2(X10_TEMP651, RX10_TEMP1536,X10_TEMP517);

								//async(X10_TEMP652)
									{

									final Dist2 RX10_TEMP1537 = rCountBuffer.distValue;


									final Region2 RX10_TEMP1538 = RX10_TEMP1537.dReg;


									final int RX10_TEMP1539 = Program.searchPointInRegion2(RX10_TEMP1538, pt,X10_TEMP652);


									final int RX10_TEMP1540 = 0;


									final boolean RX10_TEMP1541 = RX10_TEMP1539 < RX10_TEMP1540;

									if(RX10_TEMP1541)
										{

										String RX10_TEMP1542 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP1542);

										}

									final int RX10_TEMP1543 = Program.getPlaceFromDist2(RX10_TEMP1537, RX10_TEMP1539,X10_TEMP652);


									final int RX10_TEMP1545 = 0;


									final boolean RX10_TEMP1546 = RX10_TEMP1543 != RX10_TEMP1545;

									if(RX10_TEMP1546)
										{

										String RX10_TEMP1544 = "Bad place access for array rCountBuffer";

										throw new RuntimeException(RX10_TEMP1544);

										}

									final int RX10_TEMP1547 = Program.getRefArrayValue2int(rCountBuffer, RX10_TEMP1539,X10_TEMP652);


									final int X10_TEMP657 = RX10_TEMP1547;


									final int X10_TEMP658 = X10_TEMP657;


									final Dist2 RX10_TEMP1548 = sCountBuffer.distValue;


									final Region2 RX10_TEMP1549 = RX10_TEMP1548.dReg;


									final int RX10_TEMP1550 = Program.searchPointInRegion2(RX10_TEMP1549, pt,X10_TEMP652);


									final int RX10_TEMP1551 = 0;


									final boolean RX10_TEMP1552 = RX10_TEMP1550 < RX10_TEMP1551;

									if(RX10_TEMP1552)
										{

										String RX10_TEMP1553 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP1553);

										}

									final int RX10_TEMP1554 = Program.getPlaceFromDist2(RX10_TEMP1548, RX10_TEMP1550,X10_TEMP652);


									final int RX10_TEMP1556 = 0;


									final boolean RX10_TEMP1557 = RX10_TEMP1554 != RX10_TEMP1556;

									if(RX10_TEMP1557)
										{

										String RX10_TEMP1555 = "Bad place access for array sCountBuffer";

										throw new RuntimeException(RX10_TEMP1555);

										}
									Program.setRefArrayValue2int(sCountBuffer, RX10_TEMP1550, X10_TEMP658,X10_TEMP652);
									}
								}
							}
						}
					}
				}

			final int X10_TEMP659 = Program.intrefArraySum1(finished,myUniquePlacePoint);


			final int X10_TEMP660 = 0;


			X10_TEMP440 = X10_TEMP659 != X10_TEMP660;

			}
		
 while(X10_TEMP440);
		final int pHere = 0;


		final int X10_TEMP665 = 0;


		final int X10_TEMP666 = 1;


		final Region1 X10_TEMP667 = Program.createNewRegion1R(X10_TEMP665, X10_TEMP666,myUniquePlacePoint);


		final int X10_TEMP668 = 0;


		final Dist1 dBounds = Program.getPlaceDist1(X10_TEMP667, X10_TEMP668,myUniquePlacePoint);


		final Region1 RX10_TEMP1558 = dBounds.dReg;


		final int RX10_TEMP1559 = 0;


		final int RX10_TEMP1560 = 1;


		int RX10_TEMP1561 = 1;


		RX10_TEMP1561 = RX10_TEMP1561 - RX10_TEMP1560;


		final int  RX10_TEMP1562 = RX10_TEMP1561+1;


		final int RX10_TEMP1563 = RX10_TEMP1561+1;


		final intStub[] RX10_TEMP1564 = new intStub[RX10_TEMP1563];

		/*FINISH
*/			{
			for(int RX10_TEMP1565=0; RX10_TEMP1565 < RX10_TEMP1562; RX10_TEMP1565++)
				{

				final int RX10_TEMP1566 = 0;


				final int RX10_TEMP1567 = RX10_TEMP1565;


				final int RX10_TEMP1568 = 0;


				final int RX10_TEMP1569 = Program.getDistLocalCount1(dBounds, RX10_TEMP1567,myUniquePlacePoint);


				final int RX10_TEMP1570 = RX10_TEMP1569 - RX10_TEMP1560;

				//async(RX10_TEMP1568)
					{

					final int RX10_TEMP1571 = RX10_TEMP1570+1;


					final int[] RX10_TEMP1572 = new int[RX10_TEMP1571];


					final intStub RX10_TEMP1573 = new intStub(RX10_TEMP1572,RX10_TEMP1568);
					
Program.globalPointerHashMap.get(RX10_TEMP1568).add(RX10_TEMP1573.hashCode());

					//async(RX10_TEMP1566)
						{
						RX10_TEMP1564[RX10_TEMP1565] = RX10_TEMP1573;
						}
					}
				}
			}

		final intStub[] RX10_TEMP1574 = (intStub[])(new intStub/*value*/[RX10_TEMP1562]);
/*arrayInitBlock*/
for(int RX10_TEMP1576= 0;RX10_TEMP1576 <RX10_TEMP1574.length ;RX10_TEMP1576++ )			{

			final intStub RX10_TEMP1575 = RX10_TEMP1564[RX10_TEMP1576];

			RX10_TEMP1574[RX10_TEMP1576] =RX10_TEMP1575;
			}

;


		final intRefArray1 RX10_TEMP1577 = new intRefArray1(dBounds, RX10_TEMP1574,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1577.hashCode());


		final intRefArray1 lowerbounds = RX10_TEMP1577;


		final Region1 RX10_TEMP1578 = dBounds.dReg;


		final int RX10_TEMP1579 = 0;


		final int RX10_TEMP1580 = 1;


		int RX10_TEMP1581 = 1;


		RX10_TEMP1581 = RX10_TEMP1581 - RX10_TEMP1580;


		final int  RX10_TEMP1582 = RX10_TEMP1581+1;


		final int RX10_TEMP1583 = RX10_TEMP1581+1;


		final intStub[] RX10_TEMP1584 = new intStub[RX10_TEMP1583];

		/*FINISH
*/			{
			for(int RX10_TEMP1585=0; RX10_TEMP1585 < RX10_TEMP1582; RX10_TEMP1585++)
				{

				final int RX10_TEMP1586 = 0;


				final int RX10_TEMP1587 = RX10_TEMP1585;


				final int RX10_TEMP1588 = 0;


				final int RX10_TEMP1589 = Program.getDistLocalCount1(dBounds, RX10_TEMP1587,myUniquePlacePoint);


				final int RX10_TEMP1590 = RX10_TEMP1589 - RX10_TEMP1580;

				//async(RX10_TEMP1588)
					{

					final int RX10_TEMP1591 = RX10_TEMP1590+1;


					final int[] RX10_TEMP1592 = new int[RX10_TEMP1591];


					final intStub RX10_TEMP1593 = new intStub(RX10_TEMP1592,RX10_TEMP1588);
					
Program.globalPointerHashMap.get(RX10_TEMP1588).add(RX10_TEMP1593.hashCode());

					//async(RX10_TEMP1586)
						{
						RX10_TEMP1584[RX10_TEMP1585] = RX10_TEMP1593;
						}
					}
				}
			}

		final intStub[] RX10_TEMP1594 = (intStub[])(new intStub/*value*/[RX10_TEMP1582]);
/*arrayInitBlock*/
for(int RX10_TEMP1596= 0;RX10_TEMP1596 <RX10_TEMP1594.length ;RX10_TEMP1596++ )			{

			final intStub RX10_TEMP1595 = RX10_TEMP1584[RX10_TEMP1596];

			RX10_TEMP1594[RX10_TEMP1596] =RX10_TEMP1595;
			}

;


		final intRefArray1 RX10_TEMP1597 = new intRefArray1(dBounds, RX10_TEMP1594,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1597.hashCode());


		final intRefArray1 upperbounds = RX10_TEMP1597;

		/*FINISH
*/			{

			final Dist1 X10_TEMP673 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1599 = X10_TEMP673.dReg;


			final int RX10_TEMP1602 = 1;


			int RX10_TEMP1600 = RX10_TEMP1599.regSize;


			RX10_TEMP1600 = RX10_TEMP1600 - RX10_TEMP1602;


			final int  RX10_TEMP1601 = RX10_TEMP1600+1;

			for(int RX10_TEMP1598=0; RX10_TEMP1598 < RX10_TEMP1601; RX10_TEMP1598++)
				{

				final int RX10_TEMP1603 = RX10_TEMP1598;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1599, RX10_TEMP1603,myUniquePlacePoint);


				final Region1 RX10_TEMP1604 = X10_TEMP673.dReg;


				final int RX10_TEMP1605 = Program.searchPointInRegion1(RX10_TEMP1604, pl,myUniquePlacePoint);


				final int RX10_TEMP1606 = 0;


				final boolean RX10_TEMP1607 = RX10_TEMP1605 < RX10_TEMP1606;

				if(RX10_TEMP1607)
					{

					final String RX10_TEMP1608 = "Point pl not found in the distribution X10_TEMP673.";

					throw new RuntimeException(RX10_TEMP1608);

					}

				final int RX10_TEMP1609 = Program.getPlaceFromDist1(X10_TEMP673, RX10_TEMP1605,myUniquePlacePoint);


				final int X10_TEMP674 = RX10_TEMP1609;

				//async(X10_TEMP674)
					{

					final Dist1 RX10_TEMP1610 = border.distValue;


					final Region1 RX10_TEMP1611 = RX10_TEMP1610.dReg;


					final int RX10_TEMP1612 = Program.searchPointInRegion1(RX10_TEMP1611, pl,X10_TEMP674);


					final int RX10_TEMP1613 = 0;


					final boolean RX10_TEMP1614 = RX10_TEMP1612 < RX10_TEMP1613;

					if(RX10_TEMP1614)
						{

						String RX10_TEMP1615 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP1615);

						}

					final int RX10_TEMP1616 = Program.getPlaceFromDist1(RX10_TEMP1610, RX10_TEMP1612,X10_TEMP674);


					final int RX10_TEMP1618 = 0;


					final boolean RX10_TEMP1619 = RX10_TEMP1616 != RX10_TEMP1618;

					if(RX10_TEMP1619)
						{

						String RX10_TEMP1617 = "Bad place access for array border";

						throw new RuntimeException(RX10_TEMP1617);

						}

					final double RX10_TEMP1620 = Program.getRefArrayValue1double(border, RX10_TEMP1612,X10_TEMP674);


					final double edge = RX10_TEMP1620;

					//async(pHere)
						{

						final double X10_TEMP679 = 0.5;


						final double X10_TEMP681 = edge + X10_TEMP679;


						final int X10_TEMP684 = (int)X10_TEMP681;


						final int X10_TEMP685 = X10_TEMP684;


						final Dist1 RX10_TEMP1621 = lowerbounds.distValue;


						final Region1 RX10_TEMP1622 = RX10_TEMP1621.dReg;


						final int RX10_TEMP1623 = Program.searchPointInRegion1(RX10_TEMP1622, pl,pHere);


						final int RX10_TEMP1624 = 0;


						final boolean RX10_TEMP1625 = RX10_TEMP1623 < RX10_TEMP1624;

						if(RX10_TEMP1625)
							{

							String RX10_TEMP1626 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP1626);

							}

						final int RX10_TEMP1627 = Program.getPlaceFromDist1(RX10_TEMP1621, RX10_TEMP1623,pHere);


						final int RX10_TEMP1629 = 0;


						final boolean RX10_TEMP1630 = RX10_TEMP1627 != RX10_TEMP1629;

						if(RX10_TEMP1630)
							{

							String RX10_TEMP1628 = "Bad place access for array lowerbounds";

							throw new RuntimeException(RX10_TEMP1628);

							}
						Program.setRefArrayValue1int(lowerbounds, RX10_TEMP1623, X10_TEMP685,pHere);
						}
					}
				}
			}

		final int X10_TEMP690 = 0;


		final int X10_TEMP687 = 1;


		final int X10_TEMP688 = 1;


		final int X10_TEMP691 = X10_TEMP687 - X10_TEMP688;


		final Region1 X10_TEMP693 = Program.createNewRegion1R(X10_TEMP690, X10_TEMP691,myUniquePlacePoint);


		final int RX10_TEMP1634 = 1;


		int RX10_TEMP1632 = X10_TEMP693.regSize;


		RX10_TEMP1632 = RX10_TEMP1632 - RX10_TEMP1634;


		final int  RX10_TEMP1633 = RX10_TEMP1632+1;

		for(int RX10_TEMP1631=0; RX10_TEMP1631 < RX10_TEMP1633; RX10_TEMP1631++)
			{

			final int RX10_TEMP1635 = RX10_TEMP1631;


			final Point1 i = Program.regionOrdinalPoint1(X10_TEMP693, RX10_TEMP1635,myUniquePlacePoint);


			final Dist1 RX10_TEMP1636 = lowerbounds.distValue;


			final Region1 RX10_TEMP1637 = RX10_TEMP1636.dReg;


			final int RX10_TEMP1638 = Program.searchPointInRegion1(RX10_TEMP1637, i,myUniquePlacePoint);


			final int RX10_TEMP1639 = 0;


			final boolean RX10_TEMP1640 = RX10_TEMP1638 < RX10_TEMP1639;

			if(RX10_TEMP1640)
				{

				String RX10_TEMP1641 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1641);

				}

			final int RX10_TEMP1642 = Program.getPlaceFromDist1(RX10_TEMP1636, RX10_TEMP1638,myUniquePlacePoint);


			final int RX10_TEMP1644 = 0;


			final boolean RX10_TEMP1645 = RX10_TEMP1642 != RX10_TEMP1644;

			if(RX10_TEMP1645)
				{

				String RX10_TEMP1643 = "Bad place access for array lowerbounds";

				throw new RuntimeException(RX10_TEMP1643);

				}

			final int RX10_TEMP1646 = Program.getRefArrayValue1int(lowerbounds, RX10_TEMP1638,myUniquePlacePoint);


			final int lb = RX10_TEMP1646;


			final int X10_TEMP697 = i.f0;


			final int X10_TEMP698 = 1;


			final int X10_TEMP703 = X10_TEMP697 + X10_TEMP698;


			final int X10_TEMP700 = 1;


			final int X10_TEMP701 = 1;


			final int X10_TEMP704 = X10_TEMP700 - X10_TEMP701;


			final Region1 X10_TEMP706 = Program.createNewRegion1R(X10_TEMP703, X10_TEMP704,myUniquePlacePoint);


			final int RX10_TEMP1650 = 1;


			int RX10_TEMP1648 = X10_TEMP706.regSize;


			RX10_TEMP1648 = RX10_TEMP1648 - RX10_TEMP1650;


			final int  RX10_TEMP1649 = RX10_TEMP1648+1;

			for(int RX10_TEMP1647=0; RX10_TEMP1647 < RX10_TEMP1649; RX10_TEMP1647++)
				{

				final int RX10_TEMP1651 = RX10_TEMP1647;


				final Point1 j = Program.regionOrdinalPoint1(X10_TEMP706, RX10_TEMP1651,myUniquePlacePoint);


				final Dist1 RX10_TEMP1652 = lowerbounds.distValue;


				final Region1 RX10_TEMP1653 = RX10_TEMP1652.dReg;


				final int RX10_TEMP1654 = Program.searchPointInRegion1(RX10_TEMP1653, j,myUniquePlacePoint);


				final int RX10_TEMP1655 = 0;


				final boolean RX10_TEMP1656 = RX10_TEMP1654 < RX10_TEMP1655;

				if(RX10_TEMP1656)
					{

					String RX10_TEMP1657 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP1657);

					}

				final int RX10_TEMP1658 = Program.getPlaceFromDist1(RX10_TEMP1652, RX10_TEMP1654,myUniquePlacePoint);


				final int RX10_TEMP1660 = 0;


				final boolean RX10_TEMP1661 = RX10_TEMP1658 != RX10_TEMP1660;

				if(RX10_TEMP1661)
					{

					String RX10_TEMP1659 = "Bad place access for array lowerbounds";

					throw new RuntimeException(RX10_TEMP1659);

					}

				final int RX10_TEMP1662 = Program.getRefArrayValue1int(lowerbounds, RX10_TEMP1654,myUniquePlacePoint);


				final int X10_TEMP708 = RX10_TEMP1662;


				final boolean X10_TEMP710 = X10_TEMP708 <= lb;

				if(X10_TEMP710)
					{

					final int X10_TEMP712 = 1;


					final int X10_TEMP715 = lb + X10_TEMP712;


					final int X10_TEMP716 = X10_TEMP715;


					final Dist1 RX10_TEMP1663 = lowerbounds.distValue;


					final Region1 RX10_TEMP1664 = RX10_TEMP1663.dReg;


					final int RX10_TEMP1665 = Program.searchPointInRegion1(RX10_TEMP1664, j,myUniquePlacePoint);


					final int RX10_TEMP1666 = 0;


					final boolean RX10_TEMP1667 = RX10_TEMP1665 < RX10_TEMP1666;

					if(RX10_TEMP1667)
						{

						String RX10_TEMP1668 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP1668);

						}

					final int RX10_TEMP1669 = Program.getPlaceFromDist1(RX10_TEMP1663, RX10_TEMP1665,myUniquePlacePoint);


					final int RX10_TEMP1671 = 0;


					final boolean RX10_TEMP1672 = RX10_TEMP1669 != RX10_TEMP1671;

					if(RX10_TEMP1672)
						{

						String RX10_TEMP1670 = "Bad place access for array lowerbounds";

						throw new RuntimeException(RX10_TEMP1670);

						}
					Program.setRefArrayValue1int(lowerbounds, RX10_TEMP1665, X10_TEMP716,myUniquePlacePoint);
					}
				}
			}

		final int X10_TEMP721 = 0;


		final int X10_TEMP718 = 1;


		final int X10_TEMP719 = 2;


		final int X10_TEMP722 = X10_TEMP718 - X10_TEMP719;


		final Region1 X10_TEMP724 = Program.createNewRegion1R(X10_TEMP721, X10_TEMP722,myUniquePlacePoint);


		final int RX10_TEMP1676 = 1;


		int RX10_TEMP1674 = X10_TEMP724.regSize;


		RX10_TEMP1674 = RX10_TEMP1674 - RX10_TEMP1676;


		final int  RX10_TEMP1675 = RX10_TEMP1674+1;

		for(int RX10_TEMP1673=0; RX10_TEMP1673 < RX10_TEMP1675; RX10_TEMP1673++)
			{

			final int RX10_TEMP1677 = RX10_TEMP1673;


			final Point1 i = Program.regionOrdinalPoint1(X10_TEMP724, RX10_TEMP1677,myUniquePlacePoint);


			int X10_TEMP727 = 1;


			int RX10_TEMP1678 = i.f0;


			RX10_TEMP1678 = RX10_TEMP1678 + X10_TEMP727;


			final Point1 X10_TEMP729 = new Point1(RX10_TEMP1678,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP729.hashCode());


			final Dist1 RX10_TEMP1679 = lowerbounds.distValue;


			final Region1 RX10_TEMP1680 = RX10_TEMP1679.dReg;


			final int RX10_TEMP1681 = Program.searchPointInRegion1(RX10_TEMP1680, X10_TEMP729,myUniquePlacePoint);


			final int RX10_TEMP1682 = 0;


			final boolean RX10_TEMP1683 = RX10_TEMP1681 < RX10_TEMP1682;

			if(RX10_TEMP1683)
				{

				String RX10_TEMP1684 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1684);

				}

			final int RX10_TEMP1685 = Program.getPlaceFromDist1(RX10_TEMP1679, RX10_TEMP1681,myUniquePlacePoint);


			final int RX10_TEMP1687 = 0;


			final boolean RX10_TEMP1688 = RX10_TEMP1685 != RX10_TEMP1687;

			if(RX10_TEMP1688)
				{

				String RX10_TEMP1686 = "Bad place access for array lowerbounds";

				throw new RuntimeException(RX10_TEMP1686);

				}

			final int RX10_TEMP1689 = Program.getRefArrayValue1int(lowerbounds, RX10_TEMP1681,myUniquePlacePoint);


			final int X10_TEMP730 = RX10_TEMP1689;


			final int X10_TEMP731 = 1;


			final int X10_TEMP734 = X10_TEMP730 - X10_TEMP731;


			final int X10_TEMP735 = X10_TEMP734;


			final Dist1 RX10_TEMP1690 = upperbounds.distValue;


			final Region1 RX10_TEMP1691 = RX10_TEMP1690.dReg;


			final int RX10_TEMP1692 = Program.searchPointInRegion1(RX10_TEMP1691, i,myUniquePlacePoint);


			final int RX10_TEMP1693 = 0;


			final boolean RX10_TEMP1694 = RX10_TEMP1692 < RX10_TEMP1693;

			if(RX10_TEMP1694)
				{

				String RX10_TEMP1695 = "Array index out of bounds";

				throw new RuntimeException(RX10_TEMP1695);

				}

			final int RX10_TEMP1696 = Program.getPlaceFromDist1(RX10_TEMP1690, RX10_TEMP1692,myUniquePlacePoint);


			final int RX10_TEMP1698 = 0;


			final boolean RX10_TEMP1699 = RX10_TEMP1696 != RX10_TEMP1698;

			if(RX10_TEMP1699)
				{

				String RX10_TEMP1697 = "Bad place access for array upperbounds";

				throw new RuntimeException(RX10_TEMP1697);

				}
			Program.setRefArrayValue1int(upperbounds, RX10_TEMP1692, X10_TEMP735,myUniquePlacePoint);
			}

		final int X10_TEMP736 = 1;


		final int X10_TEMP737 = 1;


		final int X10_TEMP739 = X10_TEMP736 - X10_TEMP737;


		final int X10_TEMP740 = 1;


		final int X10_TEMP743 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP740;


		final int X10_TEMP744 = X10_TEMP743;


		final Point1 RX10_TEMP1700 = new Point1(X10_TEMP739,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP1700.hashCode());


		final Dist1 RX10_TEMP1701 = upperbounds.distValue;


		final Region1 RX10_TEMP1702 = RX10_TEMP1701.dReg;


		final int RX10_TEMP1703 = Program.searchPointInRegion1(RX10_TEMP1702, RX10_TEMP1700,myUniquePlacePoint);


		final int RX10_TEMP1704 = 0;


		final boolean RX10_TEMP1705 = RX10_TEMP1703 < RX10_TEMP1704;

		if(RX10_TEMP1705)
			{

			String RX10_TEMP1706 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP1706);

			}

		final int RX10_TEMP1707 = Program.getPlaceFromDist1(RX10_TEMP1701, RX10_TEMP1703,myUniquePlacePoint);


		final int RX10_TEMP1709 = 0;


		final boolean RX10_TEMP1710 = RX10_TEMP1707 != RX10_TEMP1709;

		if(RX10_TEMP1710)
			{

			String RX10_TEMP1708 = "Bad place access for array upperbounds";

			throw new RuntimeException(RX10_TEMP1708);

			}
		Program.setRefArrayValue1int(upperbounds, RX10_TEMP1703, X10_TEMP744,myUniquePlacePoint);

		final int X10_TEMP745 = 0;


		final int X10_TEMP746 = 1;


		final int X10_TEMP747 = X10_TEMP745 - X10_TEMP746;


		final Region2 X10_TEMP748 = Program.createNewRegion2RR(X10_TEMP745, X10_TEMP747, X10_TEMP745, X10_TEMP747,myUniquePlacePoint);


		final int X10_TEMP749 = 0;


		final Dist2 X10_TEMP751 = Program.getPlaceDist2(X10_TEMP748, X10_TEMP749,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP751;


		final Dist1 X10_TEMP754 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1712 = X10_TEMP754.dReg;


		final int RX10_TEMP1715 = 1;


		int RX10_TEMP1713 = RX10_TEMP1712.regSize;


		RX10_TEMP1713 = RX10_TEMP1713 - RX10_TEMP1715;


		final int  RX10_TEMP1714 = RX10_TEMP1713+1;

		for(int RX10_TEMP1711=0; RX10_TEMP1711 < RX10_TEMP1714; RX10_TEMP1711++)
			{

			final int RX10_TEMP1716 = RX10_TEMP1711;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1712, RX10_TEMP1716,myUniquePlacePoint);


			final Dist1 X10_TEMP755 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1717 = X10_TEMP755.dReg;


			final int RX10_TEMP1718 = Program.searchPointInRegion1(RX10_TEMP1717, pl,myUniquePlacePoint);


			final int RX10_TEMP1719 = 0;


			final boolean RX10_TEMP1720 = RX10_TEMP1718 < RX10_TEMP1719;

			if(RX10_TEMP1720)
				{

				final String RX10_TEMP1721 = "Point pl not found in the distribution X10_TEMP755.";

				throw new RuntimeException(RX10_TEMP1721);

				}

			final int RX10_TEMP1722 = Program.getPlaceFromDist1(X10_TEMP755, RX10_TEMP1718,myUniquePlacePoint);


			final int p = RX10_TEMP1722;


			final Dist1 RX10_TEMP1723 = lowerbounds.distValue;


			final Region1 RX10_TEMP1724 = RX10_TEMP1723.dReg;


			final int RX10_TEMP1725 = Program.searchPointInRegion1(RX10_TEMP1724, pl,myUniquePlacePoint);


			final int RX10_TEMP1726 = 0;


			final boolean RX10_TEMP1727 = RX10_TEMP1725 < RX10_TEMP1726;

			if(RX10_TEMP1727)
				{

				String RX10_TEMP1728 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1728);

				}

			final int RX10_TEMP1729 = Program.getPlaceFromDist1(RX10_TEMP1723, RX10_TEMP1725,myUniquePlacePoint);


			final int RX10_TEMP1731 = 0;


			final boolean RX10_TEMP1732 = RX10_TEMP1729 != RX10_TEMP1731;

			if(RX10_TEMP1732)
				{

				String RX10_TEMP1730 = "Bad place access for array lowerbounds";

				throw new RuntimeException(RX10_TEMP1730);

				}

			final int RX10_TEMP1733 = Program.getRefArrayValue1int(lowerbounds, RX10_TEMP1725,myUniquePlacePoint);


			final int X10_TEMP762 = RX10_TEMP1733;


			final Dist1 RX10_TEMP1734 = upperbounds.distValue;


			final Region1 RX10_TEMP1735 = RX10_TEMP1734.dReg;


			final int RX10_TEMP1736 = Program.searchPointInRegion1(RX10_TEMP1735, pl,myUniquePlacePoint);


			final int RX10_TEMP1737 = 0;


			final boolean RX10_TEMP1738 = RX10_TEMP1736 < RX10_TEMP1737;

			if(RX10_TEMP1738)
				{

				String RX10_TEMP1739 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP1739);

				}

			final int RX10_TEMP1740 = Program.getPlaceFromDist1(RX10_TEMP1734, RX10_TEMP1736,myUniquePlacePoint);


			final int RX10_TEMP1742 = 0;


			final boolean RX10_TEMP1743 = RX10_TEMP1740 != RX10_TEMP1742;

			if(RX10_TEMP1743)
				{

				String RX10_TEMP1741 = "Bad place access for array upperbounds";

				throw new RuntimeException(RX10_TEMP1741);

				}

			final int RX10_TEMP1744 = Program.getRefArrayValue1int(upperbounds, RX10_TEMP1736,myUniquePlacePoint);


			final int X10_TEMP763 = RX10_TEMP1744;


			final Region2 X10_TEMP765 = Program.createNewRegion2RA(X10_TEMP762, X10_TEMP763, rRows,myUniquePlacePoint);


			final Dist2 X10_TEMP767 = Program.getPlaceDist2(X10_TEMP765, p,myUniquePlacePoint);


			final Dist2 X10_TEMP769 = Program.unionDist2(dResult, X10_TEMP767,myUniquePlacePoint);


			dResult = X10_TEMP769;

			}
		return dResult;
		}
public static ParticleRefArray1 LinearESOpenPIC2D_sortParticles ( final LinearESOpenPIC2D X10_TEMP0, final ParticleRefArray1 particles, final Dist2 dField, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = particles.distValue;


		final Dist1 dParticles = RX10_TEMP0;


		final Region1 RX10_TEMP1 = dParticles.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final ParticleStub[] RX10_TEMP7 = new ParticleStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount1(dParticles, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP14 = RX10_TEMP13+1;


					final Particle[] RX10_TEMP15 = new Particle[RX10_TEMP14];


					final ParticleStub RX10_TEMP16 = new ParticleStub(RX10_TEMP15,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP16;
						}
					}
				}
			}

		final ParticleStub[] RX10_TEMP17 = (ParticleStub[])(new ParticleStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final ParticleStub RX10_TEMP18 = RX10_TEMP7[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final ParticleRefArray1 RX10_TEMP20 = new ParticleRefArray1(dParticles, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final ParticleRefArray1 result = RX10_TEMP20;


		final Region1 RX10_TEMP21 = dParticles.dReg;


		final int RX10_TEMP22 = 0;


		final int RX10_TEMP23 = 1;


		int RX10_TEMP24 = 1;


		RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP23;


		final int  RX10_TEMP25 = RX10_TEMP24+1;


		final int RX10_TEMP26 = RX10_TEMP24+1;


		final intStub[] RX10_TEMP27 = new intStub[RX10_TEMP26];

		/*FINISH
*/			{
			for(int RX10_TEMP28=0; RX10_TEMP28 < RX10_TEMP25; RX10_TEMP28++)
				{

				final int RX10_TEMP29 = 0;


				final int RX10_TEMP30 = RX10_TEMP28;


				final int RX10_TEMP31 = 0;


				final int RX10_TEMP32 = Program.getDistLocalCount1(dParticles, RX10_TEMP30,myUniquePlacePoint);


				final int RX10_TEMP33 = RX10_TEMP32 - RX10_TEMP23;

				//async(RX10_TEMP31)
					{

					final int RX10_TEMP34 = RX10_TEMP33+1;


					final int[] RX10_TEMP35 = new int[RX10_TEMP34];


					final intStub RX10_TEMP36 = new intStub(RX10_TEMP35,RX10_TEMP31);
					
Program.globalPointerHashMap.get(RX10_TEMP31).add(RX10_TEMP36.hashCode());

					//async(RX10_TEMP29)
						{
						RX10_TEMP27[RX10_TEMP28] = RX10_TEMP36;
						}
					}
				}
			}

		final intStub[] RX10_TEMP37 = (intStub[])(new intStub/*value*/[RX10_TEMP25]);
/*arrayInitBlock*/
for(int RX10_TEMP39= 0;RX10_TEMP39 <RX10_TEMP37.length ;RX10_TEMP39++ )			{

			final intStub RX10_TEMP38 = RX10_TEMP27[RX10_TEMP39];

			RX10_TEMP37[RX10_TEMP39] =RX10_TEMP38;
			}

;


		final intRefArray1 RX10_TEMP40 = new intRefArray1(dParticles, RX10_TEMP37,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP40.hashCode());


		final intRefArray1 indices = RX10_TEMP40;


		final int X10_TEMP6 = 0;


		final Dist1 dCount = Program.X10Util_get2DDistRank(dField, X10_TEMP6,myUniquePlacePoint);


		final Region1 RX10_TEMP41 = dCount.dReg;


		final int RX10_TEMP42 = 0;


		final int RX10_TEMP43 = 1;


		int RX10_TEMP44 = 1;


		RX10_TEMP44 = RX10_TEMP44 - RX10_TEMP43;


		final int  RX10_TEMP45 = RX10_TEMP44+1;


		final int RX10_TEMP46 = RX10_TEMP44+1;


		final intStub[] RX10_TEMP47 = new intStub[RX10_TEMP46];

		/*FINISH
*/			{
			for(int RX10_TEMP48=0; RX10_TEMP48 < RX10_TEMP45; RX10_TEMP48++)
				{

				final int RX10_TEMP49 = 0;


				final int RX10_TEMP50 = RX10_TEMP48;


				final int RX10_TEMP51 = 0;


				final int RX10_TEMP52 = Program.getDistLocalCount1(dCount, RX10_TEMP50,myUniquePlacePoint);


				final int RX10_TEMP53 = RX10_TEMP52 - RX10_TEMP43;

				//async(RX10_TEMP51)
					{

					final int RX10_TEMP55 = RX10_TEMP53+1;


					final int[] RX10_TEMP56 = new int/*NewUpdatableArray*/[RX10_TEMP55];
/*arrayInitBlock*/
for(int RX10_TEMP54= 0;RX10_TEMP54 <RX10_TEMP56.length ;RX10_TEMP54++ )						{

						final int X10_TEMP9 = 0;

						RX10_TEMP56[RX10_TEMP54] =X10_TEMP9;
						}

;


					final intStub RX10_TEMP57 = new intStub(RX10_TEMP56,RX10_TEMP51);
					
Program.globalPointerHashMap.get(RX10_TEMP51).add(RX10_TEMP57.hashCode());

					//async(RX10_TEMP49)
						{
						RX10_TEMP47[RX10_TEMP48] = RX10_TEMP57;
						}
					}
				}
			}

		final intStub[] RX10_TEMP58 = (intStub[])(new intStub/*value*/[RX10_TEMP45]);
/*arrayInitBlock*/
for(int RX10_TEMP60= 0;RX10_TEMP60 <RX10_TEMP58.length ;RX10_TEMP60++ )			{

			final intStub RX10_TEMP59 = RX10_TEMP47[RX10_TEMP60];

			RX10_TEMP58[RX10_TEMP60] =RX10_TEMP59;
			}

;


		final intRefArray1 RX10_TEMP61 = new intRefArray1(dCount, RX10_TEMP58,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP61.hashCode());


		final intRefArray1 count = RX10_TEMP61;

		/*FINISH
*/			{

			final Dist1 X10_TEMP12 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP63 = X10_TEMP12.dReg;


			final int RX10_TEMP66 = 1;


			int RX10_TEMP64 = RX10_TEMP63.regSize;


			RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66;


			final int  RX10_TEMP65 = RX10_TEMP64+1;

			for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP65; RX10_TEMP62++)
				{

				final int RX10_TEMP67 = RX10_TEMP62;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP63, RX10_TEMP67,myUniquePlacePoint);


				final Region1 RX10_TEMP68 = X10_TEMP12.dReg;


				final int RX10_TEMP69 = Program.searchPointInRegion1(RX10_TEMP68, pl,myUniquePlacePoint);


				final int RX10_TEMP70 = 0;


				final boolean RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70;

				if(RX10_TEMP71)
					{

					final String RX10_TEMP72 = "Point pl not found in the distribution X10_TEMP12.";

					throw new RuntimeException(RX10_TEMP72);

					}

				final int RX10_TEMP73 = Program.getPlaceFromDist1(X10_TEMP12, RX10_TEMP69,myUniquePlacePoint);


				final int X10_TEMP13 = RX10_TEMP73;

				//async(X10_TEMP13)
					{

					final Dist1 RX10_TEMP74 = particles.distValue;


					final Dist1 dP = RX10_TEMP74;


					final Region1 rLocalP = Program.X10Util_get1DLRegion(dP,X10_TEMP13);


					final Region1 rLocalC = Program.X10Util_get1DLRegion(dCount,X10_TEMP13);


					final Dist1 RX10_TEMP75 = particles.distValue;


					final Dist1 X10_TEMP19 = RX10_TEMP75;


					final int X10_TEMP20 = 0;


					final Dist1 X10_TEMP22 = Program.restrictDist1(X10_TEMP19, X10_TEMP20,X10_TEMP13);


					final Region1 RX10_TEMP77 = X10_TEMP22.dReg;


					final int RX10_TEMP80 = 1;


					int RX10_TEMP78 = RX10_TEMP77.regSize;


					RX10_TEMP78 = RX10_TEMP78 - RX10_TEMP80;


					final int  RX10_TEMP79 = RX10_TEMP78+1;

					for(int RX10_TEMP76=0; RX10_TEMP76 < RX10_TEMP79; RX10_TEMP76++)
						{

						final int RX10_TEMP81 = RX10_TEMP76;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP77, RX10_TEMP81,X10_TEMP13);


						final Dist1 RX10_TEMP82 = particles.distValue;


						final Region1 RX10_TEMP83 = RX10_TEMP82.dReg;


						final int RX10_TEMP84 = Program.searchPointInRegion1(RX10_TEMP83, pt,X10_TEMP13);


						final int RX10_TEMP85 = 0;


						final boolean RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85;

						if(RX10_TEMP86)
							{

							String RX10_TEMP87 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP87);

							}

						final int RX10_TEMP88 = Program.getPlaceFromDist1(RX10_TEMP82, RX10_TEMP84,X10_TEMP13);


						final int RX10_TEMP90 = 0;


						final boolean RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90;

						if(RX10_TEMP91)
							{

							String RX10_TEMP89 = "Bad place access for array particles";

							throw new RuntimeException(RX10_TEMP89);

							}

						final Particle RX10_TEMP92 = Program.getRefArrayValue1Particle(particles, RX10_TEMP84,X10_TEMP13);


						final Particle X10_TEMP24 = RX10_TEMP92;


						final double X10_TEMP25 = Program.Particle_getY(X10_TEMP24,X10_TEMP13);


						final int y = (int)X10_TEMP25;


						final Point1 RX10_TEMP93 = new Point1(y,X10_TEMP13);
						
Program.globalPointerHashMap.get(X10_TEMP13).add(RX10_TEMP93.hashCode());


						final Dist1 RX10_TEMP94 = count.distValue;


						final Region1 RX10_TEMP95 = RX10_TEMP94.dReg;


						final int RX10_TEMP96 = Program.searchPointInRegion1(RX10_TEMP95, RX10_TEMP93,X10_TEMP13);


						final int RX10_TEMP97 = 0;


						final boolean RX10_TEMP98 = RX10_TEMP96 < RX10_TEMP97;

						if(RX10_TEMP98)
							{

							String RX10_TEMP99 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP99);

							}

						final int RX10_TEMP100 = Program.getPlaceFromDist1(RX10_TEMP94, RX10_TEMP96,X10_TEMP13);


						final int RX10_TEMP102 = 0;


						final boolean RX10_TEMP103 = RX10_TEMP100 != RX10_TEMP102;

						if(RX10_TEMP103)
							{

							String RX10_TEMP101 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP101);

							}

						final int RX10_TEMP104 = Program.getRefArrayValue1int(count, RX10_TEMP96,X10_TEMP13);


						final int X10_TEMP28 = RX10_TEMP104;


						final int X10_TEMP29 = 1;


						final Point1 RX10_TEMP105 = new Point1(y,X10_TEMP13);
						
Program.globalPointerHashMap.get(X10_TEMP13).add(RX10_TEMP105.hashCode());


						final Dist1 RX10_TEMP106 = count.distValue;


						final Region1 RX10_TEMP107 = RX10_TEMP106.dReg;


						final int RX10_TEMP108 = Program.searchPointInRegion1(RX10_TEMP107, RX10_TEMP105,X10_TEMP13);


						final int RX10_TEMP109 = 0;


						final boolean RX10_TEMP110 = RX10_TEMP108 < RX10_TEMP109;

						if(RX10_TEMP110)
							{

							String RX10_TEMP111 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP111);

							}

						final int RX10_TEMP112 = Program.getPlaceFromDist1(RX10_TEMP106, RX10_TEMP108,X10_TEMP13);


						final int RX10_TEMP114 = 0;


						final boolean RX10_TEMP115 = RX10_TEMP112 != RX10_TEMP114;

						if(RX10_TEMP115)
							{

							String RX10_TEMP113 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP113);

							}

						final int RX10_TEMP116 = Program.getRefArrayValue1int(count, RX10_TEMP108,X10_TEMP13);


						final int X10_TEMP30 = RX10_TEMP116;


						final int X10_TEMP31 = X10_TEMP30 + X10_TEMP29;


						final Point1 RX10_TEMP117 = new Point1(y,X10_TEMP13);
						
Program.globalPointerHashMap.get(X10_TEMP13).add(RX10_TEMP117.hashCode());


						final Dist1 RX10_TEMP118 = count.distValue;


						final Region1 RX10_TEMP119 = RX10_TEMP118.dReg;


						final int RX10_TEMP120 = Program.searchPointInRegion1(RX10_TEMP119, RX10_TEMP117,X10_TEMP13);


						final int RX10_TEMP121 = 0;


						final boolean RX10_TEMP122 = RX10_TEMP120 < RX10_TEMP121;

						if(RX10_TEMP122)
							{

							String RX10_TEMP123 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP123);

							}

						final int RX10_TEMP124 = Program.getPlaceFromDist1(RX10_TEMP118, RX10_TEMP120,X10_TEMP13);


						final int RX10_TEMP126 = 0;


						final boolean RX10_TEMP127 = RX10_TEMP124 != RX10_TEMP126;

						if(RX10_TEMP127)
							{

							String RX10_TEMP125 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP125);

							}
						Program.setRefArrayValue1int(count, RX10_TEMP120, X10_TEMP31,X10_TEMP13);

						final int X10_TEMP35 = y;


						final Dist1 RX10_TEMP128 = indices.distValue;


						final Region1 RX10_TEMP129 = RX10_TEMP128.dReg;


						final int RX10_TEMP130 = Program.searchPointInRegion1(RX10_TEMP129, pt,X10_TEMP13);


						final int RX10_TEMP131 = 0;


						final boolean RX10_TEMP132 = RX10_TEMP130 < RX10_TEMP131;

						if(RX10_TEMP132)
							{

							String RX10_TEMP133 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP133);

							}

						final int RX10_TEMP134 = Program.getPlaceFromDist1(RX10_TEMP128, RX10_TEMP130,X10_TEMP13);


						final int RX10_TEMP136 = 0;


						final boolean RX10_TEMP137 = RX10_TEMP134 != RX10_TEMP136;

						if(RX10_TEMP137)
							{

							String RX10_TEMP135 = "Bad place access for array indices";

							throw new RuntimeException(RX10_TEMP135);

							}
						Program.setRefArrayValue1int(indices, RX10_TEMP130, X10_TEMP35,X10_TEMP13);
						}

					final int X10_TEMP36 = 0;


					final Dist1 dLocalC = Program.getPlaceDist1(rLocalC, X10_TEMP36,X10_TEMP13);


					final int X10_TEMP38 = rLocalP.regSize;


					final int X10_TEMP39 = 0;


					final boolean X10_TEMP41 = X10_TEMP38 > X10_TEMP39;


					final boolean X10_TEMP42 = X10_TEMP41;


					int X10_TEMP45 = 0;

					if(X10_TEMP42)
						{

						final int RX10_TEMP138 = rLocalP.regSize;


						final int RX10_TEMP139 = 0;


						final boolean RX10_TEMP140 = RX10_TEMP138 <= RX10_TEMP139;

						if(RX10_TEMP140)
							{

							final String RX10_TEMP141 = "Operation low() not defined on empty region rLocalP";

							throw new RuntimeException(RX10_TEMP141);

							}

						X10_TEMP45 = Program.regionLow(rLocalP,X10_TEMP13);

						}

					final int X10_TEMP46 = X10_TEMP45;


					int offset = X10_TEMP46;


					final Region1 RX10_TEMP142 = dLocalC.dReg;


					final int RX10_TEMP143 = 0;


					final int RX10_TEMP144 = 1;


					int RX10_TEMP145 = 1;


					RX10_TEMP145 = RX10_TEMP145 - RX10_TEMP144;


					final int  RX10_TEMP146 = RX10_TEMP145+1;


					final int RX10_TEMP147 = RX10_TEMP145+1;


					final intStub[] RX10_TEMP148 = new intStub[RX10_TEMP147];

					/*FINISH
*/						{
						for(int RX10_TEMP149=0; RX10_TEMP149 < RX10_TEMP146; RX10_TEMP149++)
							{

							final int RX10_TEMP150 = 0;


							final int RX10_TEMP151 = RX10_TEMP149;


							final int RX10_TEMP152 = 0;


							final int RX10_TEMP153 = Program.getDistLocalCount1(dLocalC, RX10_TEMP151,X10_TEMP13);


							final int RX10_TEMP154 = RX10_TEMP153 - RX10_TEMP144;

							//async(RX10_TEMP152)
								{

								final int RX10_TEMP155 = RX10_TEMP154+1;


								final int[] RX10_TEMP156 = new int[RX10_TEMP155];


								final intStub RX10_TEMP157 = new intStub(RX10_TEMP156,RX10_TEMP152);
								
Program.globalPointerHashMap.get(RX10_TEMP152).add(RX10_TEMP157.hashCode());

								//async(RX10_TEMP150)
									{
									RX10_TEMP148[RX10_TEMP149] = RX10_TEMP157;
									}
								}
							}
						}

					final intStub[] RX10_TEMP158 = (intStub[])(new intStub/*value*/[RX10_TEMP146]);
/*arrayInitBlock*/
for(int RX10_TEMP160= 0;RX10_TEMP160 <RX10_TEMP158.length ;RX10_TEMP160++ )						{

						final intStub RX10_TEMP159 = RX10_TEMP148[RX10_TEMP160];

						RX10_TEMP158[RX10_TEMP160] =RX10_TEMP159;
						}

;


					final intRefArray1 RX10_TEMP161 = new intRefArray1(dLocalC, RX10_TEMP158,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP161.hashCode());


					intRefArray1 offsets = RX10_TEMP161;


					final int RX10_TEMP165 = 1;


					int RX10_TEMP163 = rLocalC.regSize;


					RX10_TEMP163 = RX10_TEMP163 - RX10_TEMP165;


					final int  RX10_TEMP164 = RX10_TEMP163+1;

					for(int RX10_TEMP162=0; RX10_TEMP162 < RX10_TEMP164; RX10_TEMP162++)
						{

						final int RX10_TEMP166 = RX10_TEMP162;


						final Point1 pt = Program.regionOrdinalPoint1(rLocalC, RX10_TEMP166,myUniquePlacePoint);


						final Dist1 RX10_TEMP167 = count.distValue;


						final Region1 RX10_TEMP168 = RX10_TEMP167.dReg;


						final int RX10_TEMP169 = Program.searchPointInRegion1(RX10_TEMP168, pt,myUniquePlacePoint);


						final int RX10_TEMP170 = 0;


						final boolean RX10_TEMP171 = RX10_TEMP169 < RX10_TEMP170;

						if(RX10_TEMP171)
							{

							String RX10_TEMP172 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP172);

							}

						final int RX10_TEMP173 = Program.getPlaceFromDist1(RX10_TEMP167, RX10_TEMP169,myUniquePlacePoint);


						final int RX10_TEMP175 = 0;


						final boolean RX10_TEMP176 = RX10_TEMP173 != RX10_TEMP175;

						if(RX10_TEMP176)
							{

							String RX10_TEMP174 = "Bad place access for array count";

							throw new RuntimeException(RX10_TEMP174);

							}

						final int RX10_TEMP177 = Program.getRefArrayValue1int(count, RX10_TEMP169,myUniquePlacePoint);


						final int n = RX10_TEMP177;


						final int X10_TEMP54 = offset;


						final Dist1 RX10_TEMP178 = offsets.distValue;


						final Region1 RX10_TEMP179 = RX10_TEMP178.dReg;


						final int RX10_TEMP180 = Program.searchPointInRegion1(RX10_TEMP179, pt,myUniquePlacePoint);


						final int RX10_TEMP181 = 0;


						final boolean RX10_TEMP182 = RX10_TEMP180 < RX10_TEMP181;

						if(RX10_TEMP182)
							{

							String RX10_TEMP183 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP183);

							}

						final int RX10_TEMP184 = Program.getPlaceFromDist1(RX10_TEMP178, RX10_TEMP180,myUniquePlacePoint);


						final int RX10_TEMP186 = 0;


						final boolean RX10_TEMP187 = RX10_TEMP184 != RX10_TEMP186;

						if(RX10_TEMP187)
							{

							String RX10_TEMP185 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP185);

							}
						Program.setRefArrayValue1int(offsets, RX10_TEMP180, X10_TEMP54,myUniquePlacePoint);

						final int X10_TEMP56 = offset + n;


						offset = X10_TEMP56;

						}

					final int RX10_TEMP191 = 1;


					int RX10_TEMP189 = rLocalP.regSize;


					RX10_TEMP189 = RX10_TEMP189 - RX10_TEMP191;


					final int  RX10_TEMP190 = RX10_TEMP189+1;

					for(int RX10_TEMP188=0; RX10_TEMP188 < RX10_TEMP190; RX10_TEMP188++)
						{

						final int RX10_TEMP192 = RX10_TEMP188;


						final Point1 pt = Program.regionOrdinalPoint1(rLocalP, RX10_TEMP192,myUniquePlacePoint);


						final Dist1 RX10_TEMP193 = indices.distValue;


						final Region1 RX10_TEMP194 = RX10_TEMP193.dReg;


						final int RX10_TEMP195 = Program.searchPointInRegion1(RX10_TEMP194, pt,myUniquePlacePoint);


						final int RX10_TEMP196 = 0;


						final boolean RX10_TEMP197 = RX10_TEMP195 < RX10_TEMP196;

						if(RX10_TEMP197)
							{

							String RX10_TEMP198 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP198);

							}

						final int RX10_TEMP199 = Program.getPlaceFromDist1(RX10_TEMP193, RX10_TEMP195,myUniquePlacePoint);


						final int RX10_TEMP201 = 0;


						final boolean RX10_TEMP202 = RX10_TEMP199 != RX10_TEMP201;

						if(RX10_TEMP202)
							{

							String RX10_TEMP200 = "Bad place access for array indices";

							throw new RuntimeException(RX10_TEMP200);

							}

						final int RX10_TEMP203 = Program.getRefArrayValue1int(indices, RX10_TEMP195,myUniquePlacePoint);


						final int index = RX10_TEMP203;


						final Point1 RX10_TEMP204 = new Point1(index,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP204.hashCode());


						final Dist1 RX10_TEMP205 = offsets.distValue;


						final Region1 RX10_TEMP206 = RX10_TEMP205.dReg;


						final int RX10_TEMP207 = Program.searchPointInRegion1(RX10_TEMP206, RX10_TEMP204,myUniquePlacePoint);


						final int RX10_TEMP208 = 0;


						final boolean RX10_TEMP209 = RX10_TEMP207 < RX10_TEMP208;

						if(RX10_TEMP209)
							{

							String RX10_TEMP210 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP210);

							}

						final int RX10_TEMP211 = Program.getPlaceFromDist1(RX10_TEMP205, RX10_TEMP207,myUniquePlacePoint);


						final int RX10_TEMP213 = 0;


						final boolean RX10_TEMP214 = RX10_TEMP211 != RX10_TEMP213;

						if(RX10_TEMP214)
							{

							String RX10_TEMP212 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP212);

							}

						final int RX10_TEMP215 = Program.getRefArrayValue1int(offsets, RX10_TEMP207,myUniquePlacePoint);


						final int X10_TEMP64 = RX10_TEMP215;


						final int X10_TEMP65 = X10_TEMP64;


						final Dist1 RX10_TEMP216 = indices.distValue;


						final Region1 RX10_TEMP217 = RX10_TEMP216.dReg;


						final int RX10_TEMP218 = Program.searchPointInRegion1(RX10_TEMP217, pt,myUniquePlacePoint);


						final int RX10_TEMP219 = 0;


						final boolean RX10_TEMP220 = RX10_TEMP218 < RX10_TEMP219;

						if(RX10_TEMP220)
							{

							String RX10_TEMP221 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP221);

							}

						final int RX10_TEMP222 = Program.getPlaceFromDist1(RX10_TEMP216, RX10_TEMP218,myUniquePlacePoint);


						final int RX10_TEMP224 = 0;


						final boolean RX10_TEMP225 = RX10_TEMP222 != RX10_TEMP224;

						if(RX10_TEMP225)
							{

							String RX10_TEMP223 = "Bad place access for array indices";

							throw new RuntimeException(RX10_TEMP223);

							}
						Program.setRefArrayValue1int(indices, RX10_TEMP218, X10_TEMP65,myUniquePlacePoint);

						final Point1 RX10_TEMP226 = new Point1(index,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP226.hashCode());


						final Dist1 RX10_TEMP227 = offsets.distValue;


						final Region1 RX10_TEMP228 = RX10_TEMP227.dReg;


						final int RX10_TEMP229 = Program.searchPointInRegion1(RX10_TEMP228, RX10_TEMP226,myUniquePlacePoint);


						final int RX10_TEMP230 = 0;


						final boolean RX10_TEMP231 = RX10_TEMP229 < RX10_TEMP230;

						if(RX10_TEMP231)
							{

							String RX10_TEMP232 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP232);

							}

						final int RX10_TEMP233 = Program.getPlaceFromDist1(RX10_TEMP227, RX10_TEMP229,myUniquePlacePoint);


						final int RX10_TEMP235 = 0;


						final boolean RX10_TEMP236 = RX10_TEMP233 != RX10_TEMP235;

						if(RX10_TEMP236)
							{

							String RX10_TEMP234 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP234);

							}

						final int RX10_TEMP237 = Program.getRefArrayValue1int(offsets, RX10_TEMP229,myUniquePlacePoint);


						final int X10_TEMP67 = RX10_TEMP237;


						final int X10_TEMP68 = 1;


						final Point1 RX10_TEMP238 = new Point1(index,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP238.hashCode());


						final Dist1 RX10_TEMP239 = offsets.distValue;


						final Region1 RX10_TEMP240 = RX10_TEMP239.dReg;


						final int RX10_TEMP241 = Program.searchPointInRegion1(RX10_TEMP240, RX10_TEMP238,myUniquePlacePoint);


						final int RX10_TEMP242 = 0;


						final boolean RX10_TEMP243 = RX10_TEMP241 < RX10_TEMP242;

						if(RX10_TEMP243)
							{

							String RX10_TEMP244 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP244);

							}

						final int RX10_TEMP245 = Program.getPlaceFromDist1(RX10_TEMP239, RX10_TEMP241,myUniquePlacePoint);


						final int RX10_TEMP247 = 0;


						final boolean RX10_TEMP248 = RX10_TEMP245 != RX10_TEMP247;

						if(RX10_TEMP248)
							{

							String RX10_TEMP246 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP246);

							}

						final int RX10_TEMP249 = Program.getRefArrayValue1int(offsets, RX10_TEMP241,myUniquePlacePoint);


						final int X10_TEMP69 = RX10_TEMP249;


						final int X10_TEMP70 = X10_TEMP69 + X10_TEMP68;


						final Point1 RX10_TEMP250 = new Point1(index,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP250.hashCode());


						final Dist1 RX10_TEMP251 = offsets.distValue;


						final Region1 RX10_TEMP252 = RX10_TEMP251.dReg;


						final int RX10_TEMP253 = Program.searchPointInRegion1(RX10_TEMP252, RX10_TEMP250,myUniquePlacePoint);


						final int RX10_TEMP254 = 0;


						final boolean RX10_TEMP255 = RX10_TEMP253 < RX10_TEMP254;

						if(RX10_TEMP255)
							{

							String RX10_TEMP256 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP256);

							}

						final int RX10_TEMP257 = Program.getPlaceFromDist1(RX10_TEMP251, RX10_TEMP253,myUniquePlacePoint);


						final int RX10_TEMP259 = 0;


						final boolean RX10_TEMP260 = RX10_TEMP257 != RX10_TEMP259;

						if(RX10_TEMP260)
							{

							String RX10_TEMP258 = "Bad place access for array offsets";

							throw new RuntimeException(RX10_TEMP258);

							}
						Program.setRefArrayValue1int(offsets, RX10_TEMP253, X10_TEMP70,myUniquePlacePoint);
						}

					final int X10_TEMP72 = 0;


					final int RX10_TEMP264 = 1;


					int RX10_TEMP262 = rLocalP.regSize;


					RX10_TEMP262 = RX10_TEMP262 - RX10_TEMP264;


					final int  RX10_TEMP263 = RX10_TEMP262+1;

					for(int RX10_TEMP261=0; RX10_TEMP261 < RX10_TEMP263; RX10_TEMP261++)
						{

						final int RX10_TEMP265 = RX10_TEMP261;


						final Point1 i = Program.regionOrdinalPoint1(rLocalP, RX10_TEMP265,myUniquePlacePoint);

						//async(X10_TEMP72)
							{

							final Dist1 RX10_TEMP266 = indices.distValue;


							final Region1 RX10_TEMP267 = RX10_TEMP266.dReg;


							final int RX10_TEMP268 = Program.searchPointInRegion1(RX10_TEMP267, i,X10_TEMP72);


							final int RX10_TEMP269 = 0;


							final boolean RX10_TEMP270 = RX10_TEMP268 < RX10_TEMP269;

							if(RX10_TEMP270)
								{

								String RX10_TEMP271 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP271);

								}

							final int RX10_TEMP272 = Program.getPlaceFromDist1(RX10_TEMP266, RX10_TEMP268,X10_TEMP72);


							final int RX10_TEMP274 = 0;


							final boolean RX10_TEMP275 = RX10_TEMP272 != RX10_TEMP274;

							if(RX10_TEMP275)
								{

								String RX10_TEMP273 = "Bad place access for array indices";

								throw new RuntimeException(RX10_TEMP273);

								}

							final int RX10_TEMP276 = Program.getRefArrayValue1int(indices, RX10_TEMP268,X10_TEMP72);


							final int X10_TEMP75 = RX10_TEMP276;


							final Dist1 RX10_TEMP277 = particles.distValue;


							final Region1 RX10_TEMP278 = RX10_TEMP277.dReg;


							final int RX10_TEMP279 = Program.searchPointInRegion1(RX10_TEMP278, i,X10_TEMP72);


							final int RX10_TEMP280 = 0;


							final boolean RX10_TEMP281 = RX10_TEMP279 < RX10_TEMP280;

							if(RX10_TEMP281)
								{

								String RX10_TEMP282 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP282);

								}

							final int RX10_TEMP283 = Program.getPlaceFromDist1(RX10_TEMP277, RX10_TEMP279,X10_TEMP72);


							final int RX10_TEMP285 = 0;


							final boolean RX10_TEMP286 = RX10_TEMP283 != RX10_TEMP285;

							if(RX10_TEMP286)
								{

								String RX10_TEMP284 = "Bad place access for array particles";

								throw new RuntimeException(RX10_TEMP284);

								}

							final Particle RX10_TEMP287 = Program.getRefArrayValue1Particle(particles, RX10_TEMP279,X10_TEMP72);


							final Particle X10_TEMP79 = RX10_TEMP287;


							final Particle X10_TEMP80 = X10_TEMP79;


							final Point1 RX10_TEMP288 = new Point1(X10_TEMP75,X10_TEMP72);
							
Program.globalPointerHashMap.get(X10_TEMP72).add(RX10_TEMP288.hashCode());


							final Dist1 RX10_TEMP289 = result.distValue;


							final Region1 RX10_TEMP290 = RX10_TEMP289.dReg;


							final int RX10_TEMP291 = Program.searchPointInRegion1(RX10_TEMP290, RX10_TEMP288,X10_TEMP72);


							final int RX10_TEMP292 = 0;


							final boolean RX10_TEMP293 = RX10_TEMP291 < RX10_TEMP292;

							if(RX10_TEMP293)
								{

								String RX10_TEMP294 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP294);

								}

							final int RX10_TEMP295 = Program.getPlaceFromDist1(RX10_TEMP289, RX10_TEMP291,X10_TEMP72);


							final int RX10_TEMP297 = 0;


							final boolean RX10_TEMP298 = RX10_TEMP295 != RX10_TEMP297;

							if(RX10_TEMP298)
								{

								String RX10_TEMP296 = "Bad place access for array result";

								throw new RuntimeException(RX10_TEMP296);

								}
							Program.setRefArrayValue1Particle(result, RX10_TEMP291, X10_TEMP80,X10_TEMP72);
							}
						}
					}
				}
			}
		return result;
		}
public static intRefArray1 LinearESOpenPIC2D_parallelPrefix ( final LinearESOpenPIC2D X10_TEMP0, final intRefArray1 data, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = data.distValue;


		final Dist1 dData = RX10_TEMP0;


		final Region1 RX10_TEMP1 = dData.dReg;


		final int RX10_TEMP2 = 0;


		final int RX10_TEMP3 = 1;


		int RX10_TEMP4 = 1;


		RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3;


		final int  RX10_TEMP5 = RX10_TEMP4+1;


		final int RX10_TEMP6 = RX10_TEMP4+1;


		final intStub[] RX10_TEMP7 = new intStub[RX10_TEMP6];

		/*FINISH
*/			{
			for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP5; RX10_TEMP8++)
				{

				final int RX10_TEMP9 = 0;


				final int RX10_TEMP10 = RX10_TEMP8;


				final int RX10_TEMP11 = 0;


				final int RX10_TEMP12 = Program.getDistLocalCount1(dData, RX10_TEMP10,myUniquePlacePoint);


				final int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3;


				final Point1[] RX10_TEMP14 = Program.getDistLocalArray1(dData, RX10_TEMP10,myUniquePlacePoint);

				//async(RX10_TEMP11)
					{

					final int RX10_TEMP27 = RX10_TEMP13+1;


					final int[] RX10_TEMP28 = new int/*NewUpdatableArray*/[RX10_TEMP27];
/*arrayInitBlock*/
for(int RX10_TEMP15= 0;RX10_TEMP15 <RX10_TEMP28.length ;RX10_TEMP15++ )						{

						final Point1 pt = RX10_TEMP14[RX10_TEMP15];


						final Dist1 RX10_TEMP16 = data.distValue;


						final Region1 RX10_TEMP17 = RX10_TEMP16.dReg;


						final int RX10_TEMP18 = Program.searchPointInRegion1(RX10_TEMP17, pt,RX10_TEMP11);


						final int RX10_TEMP19 = 0;


						final boolean RX10_TEMP20 = RX10_TEMP18 < RX10_TEMP19;

						if(RX10_TEMP20)
							{

							String RX10_TEMP21 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP21);

							}

						final int RX10_TEMP22 = Program.getPlaceFromDist1(RX10_TEMP16, RX10_TEMP18,RX10_TEMP11);


						final int RX10_TEMP24 = 0;


						final boolean RX10_TEMP25 = RX10_TEMP22 != RX10_TEMP24;

						if(RX10_TEMP25)
							{

							String RX10_TEMP23 = "Bad place access for array data";

							throw new RuntimeException(RX10_TEMP23);

							}

						final int RX10_TEMP26 = Program.getRefArrayValue1int(data, RX10_TEMP18,RX10_TEMP11);


						final int X10_TEMP4 = RX10_TEMP26;

						RX10_TEMP28[RX10_TEMP15] =X10_TEMP4;
						}

;


					final intStub RX10_TEMP29 = new intStub(RX10_TEMP28,RX10_TEMP11);
					
Program.globalPointerHashMap.get(RX10_TEMP11).add(RX10_TEMP29.hashCode());

					//async(RX10_TEMP9)
						{
						RX10_TEMP7[RX10_TEMP8] = RX10_TEMP29;
						}
					}
				}
			}

		final intStub[] RX10_TEMP30 = (intStub[])(new intStub/*value*/[RX10_TEMP5]);
/*arrayInitBlock*/
for(int RX10_TEMP32= 0;RX10_TEMP32 <RX10_TEMP30.length ;RX10_TEMP32++ )			{

			final intStub RX10_TEMP31 = RX10_TEMP7[RX10_TEMP32];

			RX10_TEMP30[RX10_TEMP32] =RX10_TEMP31;
			}

;


		final intRefArray1 RX10_TEMP33 = new intRefArray1(dData, RX10_TEMP30,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP33.hashCode());


		final intRefArray1 result = RX10_TEMP33;


		final Region1 RX10_TEMP34 = dData.dReg;


		final int RX10_TEMP35 = 0;


		final int RX10_TEMP36 = 1;


		int RX10_TEMP37 = 1;


		RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP36;


		final int  RX10_TEMP38 = RX10_TEMP37+1;


		final int RX10_TEMP39 = RX10_TEMP37+1;


		final intStub[] RX10_TEMP40 = new intStub[RX10_TEMP39];

		/*FINISH
*/			{
			for(int RX10_TEMP41=0; RX10_TEMP41 < RX10_TEMP38; RX10_TEMP41++)
				{

				final int RX10_TEMP42 = 0;


				final int RX10_TEMP43 = RX10_TEMP41;


				final int RX10_TEMP44 = 0;


				final int RX10_TEMP45 = Program.getDistLocalCount1(dData, RX10_TEMP43,myUniquePlacePoint);


				final int RX10_TEMP46 = RX10_TEMP45 - RX10_TEMP36;


				final Point1[] RX10_TEMP47 = Program.getDistLocalArray1(dData, RX10_TEMP43,myUniquePlacePoint);

				//async(RX10_TEMP44)
					{

					final int RX10_TEMP60 = RX10_TEMP46+1;


					final int[] RX10_TEMP61 = new int/*NewUpdatableArray*/[RX10_TEMP60];
/*arrayInitBlock*/
for(int RX10_TEMP48= 0;RX10_TEMP48 <RX10_TEMP61.length ;RX10_TEMP48++ )						{

						final Point1 pt = RX10_TEMP47[RX10_TEMP48];


						final Dist1 RX10_TEMP49 = data.distValue;


						final Region1 RX10_TEMP50 = RX10_TEMP49.dReg;


						final int RX10_TEMP51 = Program.searchPointInRegion1(RX10_TEMP50, pt,RX10_TEMP44);


						final int RX10_TEMP52 = 0;


						final boolean RX10_TEMP53 = RX10_TEMP51 < RX10_TEMP52;

						if(RX10_TEMP53)
							{

							String RX10_TEMP54 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP54);

							}

						final int RX10_TEMP55 = Program.getPlaceFromDist1(RX10_TEMP49, RX10_TEMP51,RX10_TEMP44);


						final int RX10_TEMP57 = 0;


						final boolean RX10_TEMP58 = RX10_TEMP55 != RX10_TEMP57;

						if(RX10_TEMP58)
							{

							String RX10_TEMP56 = "Bad place access for array data";

							throw new RuntimeException(RX10_TEMP56);

							}

						final int RX10_TEMP59 = Program.getRefArrayValue1int(data, RX10_TEMP51,RX10_TEMP44);


						final int X10_TEMP8 = RX10_TEMP59;

						RX10_TEMP61[RX10_TEMP48] =X10_TEMP8;
						}

;


					final intStub RX10_TEMP62 = new intStub(RX10_TEMP61,RX10_TEMP44);
					
Program.globalPointerHashMap.get(RX10_TEMP44).add(RX10_TEMP62.hashCode());

					//async(RX10_TEMP42)
						{
						RX10_TEMP40[RX10_TEMP41] = RX10_TEMP62;
						}
					}
				}
			}

		final intStub[] RX10_TEMP63 = (intStub[])(new intStub/*value*/[RX10_TEMP38]);
/*arrayInitBlock*/
for(int RX10_TEMP65= 0;RX10_TEMP65 <RX10_TEMP63.length ;RX10_TEMP65++ )			{

			final intStub RX10_TEMP64 = RX10_TEMP40[RX10_TEMP65];

			RX10_TEMP63[RX10_TEMP65] =RX10_TEMP64;
			}

;


		final intRefArray1 RX10_TEMP66 = new intRefArray1(dData, RX10_TEMP63,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP66.hashCode());


		final intRefArray1 tmp1 = RX10_TEMP66;


		final Region1 RX10_TEMP67 = dData.dReg;


		final int RX10_TEMP68 = 0;


		final int RX10_TEMP69 = 1;


		int RX10_TEMP70 = 1;


		RX10_TEMP70 = RX10_TEMP70 - RX10_TEMP69;


		final int  RX10_TEMP71 = RX10_TEMP70+1;


		final int RX10_TEMP72 = RX10_TEMP70+1;


		final intStub[] RX10_TEMP73 = new intStub[RX10_TEMP72];

		/*FINISH
*/			{
			for(int RX10_TEMP74=0; RX10_TEMP74 < RX10_TEMP71; RX10_TEMP74++)
				{

				final int RX10_TEMP75 = 0;


				final int RX10_TEMP76 = RX10_TEMP74;


				final int RX10_TEMP77 = 0;


				final int RX10_TEMP78 = Program.getDistLocalCount1(dData, RX10_TEMP76,myUniquePlacePoint);


				final int RX10_TEMP79 = RX10_TEMP78 - RX10_TEMP69;

				//async(RX10_TEMP77)
					{

					final int RX10_TEMP81 = RX10_TEMP79+1;


					final int[] RX10_TEMP82 = new int/*NewUpdatableArray*/[RX10_TEMP81];
/*arrayInitBlock*/
for(int RX10_TEMP80= 0;RX10_TEMP80 <RX10_TEMP82.length ;RX10_TEMP80++ )						{

						final int X10_TEMP11 = 0;

						RX10_TEMP82[RX10_TEMP80] =X10_TEMP11;
						}

;


					final intStub RX10_TEMP83 = new intStub(RX10_TEMP82,RX10_TEMP77);
					
Program.globalPointerHashMap.get(RX10_TEMP77).add(RX10_TEMP83.hashCode());

					//async(RX10_TEMP75)
						{
						RX10_TEMP73[RX10_TEMP74] = RX10_TEMP83;
						}
					}
				}
			}

		final intStub[] RX10_TEMP84 = (intStub[])(new intStub/*value*/[RX10_TEMP71]);
/*arrayInitBlock*/
for(int RX10_TEMP86= 0;RX10_TEMP86 <RX10_TEMP84.length ;RX10_TEMP86++ )			{

			final intStub RX10_TEMP85 = RX10_TEMP73[RX10_TEMP86];

			RX10_TEMP84[RX10_TEMP86] =RX10_TEMP85;
			}

;


		final intRefArray1 RX10_TEMP87 = new intRefArray1(dData, RX10_TEMP84,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP87.hashCode());


		final intRefArray1 tmp2 = RX10_TEMP87;


		int strides = 1;


		final int X10_TEMP14 = 1;


		boolean X10_TEMP18 = strides < X10_TEMP14;

		while(X10_TEMP18)
			{

			final int stride = strides;

			/*FINISH
*/				{

				final Dist1 X10_TEMP21 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP89 = X10_TEMP21.dReg;


				final int RX10_TEMP92 = 1;


				int RX10_TEMP90 = RX10_TEMP89.regSize;


				RX10_TEMP90 = RX10_TEMP90 - RX10_TEMP92;


				final int  RX10_TEMP91 = RX10_TEMP90+1;

				for(int RX10_TEMP88=0; RX10_TEMP88 < RX10_TEMP91; RX10_TEMP88++)
					{

					final int RX10_TEMP93 = RX10_TEMP88;


					final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP89, RX10_TEMP93,myUniquePlacePoint);


					final Region1 RX10_TEMP94 = X10_TEMP21.dReg;


					final int RX10_TEMP95 = Program.searchPointInRegion1(RX10_TEMP94, pl,myUniquePlacePoint);


					final int RX10_TEMP96 = 0;


					final boolean RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96;

					if(RX10_TEMP97)
						{

						final String RX10_TEMP98 = "Point pl not found in the distribution X10_TEMP21.";

						throw new RuntimeException(RX10_TEMP98);

						}

					final int RX10_TEMP99 = Program.getPlaceFromDist1(X10_TEMP21, RX10_TEMP95,myUniquePlacePoint);


					final int X10_TEMP22 = RX10_TEMP99;

					//async(X10_TEMP22)
						{

						final int X10_TEMP24 = pl.f0;


						final int X10_TEMP26 = X10_TEMP24 / stride;


						final int X10_TEMP27 = 2;


						final int dir = X10_TEMP26 % X10_TEMP27;


						final Dist1 RX10_TEMP100 = tmp1.distValue;


						final Region1 RX10_TEMP101 = RX10_TEMP100.dReg;


						final int RX10_TEMP102 = Program.searchPointInRegion1(RX10_TEMP101, pl,X10_TEMP22);


						final int RX10_TEMP103 = 0;


						final boolean RX10_TEMP104 = RX10_TEMP102 < RX10_TEMP103;

						if(RX10_TEMP104)
							{

							String RX10_TEMP105 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP105);

							}

						final int RX10_TEMP106 = Program.getPlaceFromDist1(RX10_TEMP100, RX10_TEMP102,X10_TEMP22);


						final int RX10_TEMP108 = 0;


						final boolean RX10_TEMP109 = RX10_TEMP106 != RX10_TEMP108;

						if(RX10_TEMP109)
							{

							String RX10_TEMP107 = "Bad place access for array tmp1";

							throw new RuntimeException(RX10_TEMP107);

							}

						final int RX10_TEMP110 = Program.getRefArrayValue1int(tmp1, RX10_TEMP102,X10_TEMP22);


						final int val = RX10_TEMP110;


						final int X10_TEMP43 = pl.f0;


						final int X10_TEMP32 = 0;


						final boolean X10_TEMP34 = dir == X10_TEMP32;


						final boolean X10_TEMP35 = X10_TEMP34;


						final int X10_TEMP37 = 1;


						final int X10_TEMP38 = 0;


						int X10_TEMP40 = X10_TEMP38 - X10_TEMP37;

						if(X10_TEMP35)
							{

							X10_TEMP40 = 1;

							}

						final int X10_TEMP41 = X10_TEMP40;


						final int X10_TEMP42 = X10_TEMP41;


						final int X10_TEMP44 = X10_TEMP42 * stride;


						final int X10_TEMP46 = X10_TEMP43 + X10_TEMP44;


						final int pDst = 0;

						/*FINISH
*/							{
							//async(pDst)
								{

								final int X10_TEMP49 = 0;


								final boolean X10_TEMP51 = dir == X10_TEMP49;

								if(X10_TEMP51)
									{

									final int X10_TEMP52 = 0;


									final int X10_TEMP54 = 0;


									final int X10_TEMP55 = 0;


									final int X10_TEMP57 = 0;


									final Point1 RX10_TEMP111 = new Point1(X10_TEMP57,pDst);
									
Program.globalPointerHashMap.get(pDst).add(RX10_TEMP111.hashCode());


									final Dist1 RX10_TEMP112 = result.distValue;


									final Region1 RX10_TEMP113 = RX10_TEMP112.dReg;


									final int RX10_TEMP114 = Program.searchPointInRegion1(RX10_TEMP113, RX10_TEMP111,pDst);


									final int RX10_TEMP115 = 0;


									final boolean RX10_TEMP116 = RX10_TEMP114 < RX10_TEMP115;

									if(RX10_TEMP116)
										{

										String RX10_TEMP117 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP117);

										}

									final int RX10_TEMP118 = Program.getPlaceFromDist1(RX10_TEMP112, RX10_TEMP114,pDst);


									final int RX10_TEMP120 = 0;


									final boolean RX10_TEMP121 = RX10_TEMP118 != RX10_TEMP120;

									if(RX10_TEMP121)
										{

										String RX10_TEMP119 = "Bad place access for array result";

										throw new RuntimeException(RX10_TEMP119);

										}

									final int RX10_TEMP122 = Program.getRefArrayValue1int(result, RX10_TEMP114,pDst);


									final int X10_TEMP58 = RX10_TEMP122;


									final int X10_TEMP61 = X10_TEMP58 + val;


									final int X10_TEMP62 = X10_TEMP61;


									final Point1 RX10_TEMP123 = new Point1(X10_TEMP54,pDst);
									
Program.globalPointerHashMap.get(pDst).add(RX10_TEMP123.hashCode());


									final Dist1 RX10_TEMP124 = result.distValue;


									final Region1 RX10_TEMP125 = RX10_TEMP124.dReg;


									final int RX10_TEMP126 = Program.searchPointInRegion1(RX10_TEMP125, RX10_TEMP123,pDst);


									final int RX10_TEMP127 = 0;


									final boolean RX10_TEMP128 = RX10_TEMP126 < RX10_TEMP127;

									if(RX10_TEMP128)
										{

										String RX10_TEMP129 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP129);

										}

									final int RX10_TEMP130 = Program.getPlaceFromDist1(RX10_TEMP124, RX10_TEMP126,pDst);


									final int RX10_TEMP132 = 0;


									final boolean RX10_TEMP133 = RX10_TEMP130 != RX10_TEMP132;

									if(RX10_TEMP133)
										{

										String RX10_TEMP131 = "Bad place access for array result";

										throw new RuntimeException(RX10_TEMP131);

										}
									Program.setRefArrayValue1int(result, RX10_TEMP126, X10_TEMP62,pDst);
									}

								final int X10_TEMP63 = 0;


								final int X10_TEMP65 = 0;


								final int X10_TEMP68 = val;


								final Point1 RX10_TEMP134 = new Point1(X10_TEMP65,pDst);
								
Program.globalPointerHashMap.get(pDst).add(RX10_TEMP134.hashCode());


								final Dist1 RX10_TEMP135 = tmp2.distValue;


								final Region1 RX10_TEMP136 = RX10_TEMP135.dReg;


								final int RX10_TEMP137 = Program.searchPointInRegion1(RX10_TEMP136, RX10_TEMP134,pDst);


								final int RX10_TEMP138 = 0;


								final boolean RX10_TEMP139 = RX10_TEMP137 < RX10_TEMP138;

								if(RX10_TEMP139)
									{

									String RX10_TEMP140 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP140);

									}

								final int RX10_TEMP141 = Program.getPlaceFromDist1(RX10_TEMP135, RX10_TEMP137,pDst);


								final int RX10_TEMP143 = 0;


								final boolean RX10_TEMP144 = RX10_TEMP141 != RX10_TEMP143;

								if(RX10_TEMP144)
									{

									String RX10_TEMP142 = "Bad place access for array tmp2";

									throw new RuntimeException(RX10_TEMP142);

									}
								Program.setRefArrayValue1int(tmp2, RX10_TEMP137, X10_TEMP68,pDst);
								}
							}
						}
					}
				}
			/*FINISH
*/				{

				final Dist1 X10_TEMP70 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP146 = X10_TEMP70.dReg;


				final int RX10_TEMP149 = 1;


				int RX10_TEMP147 = RX10_TEMP146.regSize;


				RX10_TEMP147 = RX10_TEMP147 - RX10_TEMP149;


				final int  RX10_TEMP148 = RX10_TEMP147+1;

				for(int RX10_TEMP145=0; RX10_TEMP145 < RX10_TEMP148; RX10_TEMP145++)
					{

					final int RX10_TEMP150 = RX10_TEMP145;


					final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP146, RX10_TEMP150,myUniquePlacePoint);


					final Region1 RX10_TEMP151 = X10_TEMP70.dReg;


					final int RX10_TEMP152 = Program.searchPointInRegion1(RX10_TEMP151, pl,myUniquePlacePoint);


					final int RX10_TEMP153 = 0;


					final boolean RX10_TEMP154 = RX10_TEMP152 < RX10_TEMP153;

					if(RX10_TEMP154)
						{

						final String RX10_TEMP155 = "Point pl not found in the distribution X10_TEMP70.";

						throw new RuntimeException(RX10_TEMP155);

						}

					final int RX10_TEMP156 = Program.getPlaceFromDist1(X10_TEMP70, RX10_TEMP152,myUniquePlacePoint);


					final int X10_TEMP71 = RX10_TEMP156;

					//async(X10_TEMP71)
						{

						final Dist1 RX10_TEMP157 = tmp1.distValue;


						final Region1 RX10_TEMP158 = RX10_TEMP157.dReg;


						final int RX10_TEMP159 = Program.searchPointInRegion1(RX10_TEMP158, pl,X10_TEMP71);


						final int RX10_TEMP160 = 0;


						final boolean RX10_TEMP161 = RX10_TEMP159 < RX10_TEMP160;

						if(RX10_TEMP161)
							{

							String RX10_TEMP162 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP162);

							}

						final int RX10_TEMP163 = Program.getPlaceFromDist1(RX10_TEMP157, RX10_TEMP159,X10_TEMP71);


						final int RX10_TEMP165 = 0;


						final boolean RX10_TEMP166 = RX10_TEMP163 != RX10_TEMP165;

						if(RX10_TEMP166)
							{

							String RX10_TEMP164 = "Bad place access for array tmp1";

							throw new RuntimeException(RX10_TEMP164);

							}

						final int RX10_TEMP167 = Program.getRefArrayValue1int(tmp1, RX10_TEMP159,X10_TEMP71);


						final int X10_TEMP75 = RX10_TEMP167;


						final Dist1 RX10_TEMP168 = tmp2.distValue;


						final Region1 RX10_TEMP169 = RX10_TEMP168.dReg;


						final int RX10_TEMP170 = Program.searchPointInRegion1(RX10_TEMP169, pl,X10_TEMP71);


						final int RX10_TEMP171 = 0;


						final boolean RX10_TEMP172 = RX10_TEMP170 < RX10_TEMP171;

						if(RX10_TEMP172)
							{

							String RX10_TEMP173 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP173);

							}

						final int RX10_TEMP174 = Program.getPlaceFromDist1(RX10_TEMP168, RX10_TEMP170,X10_TEMP71);


						final int RX10_TEMP176 = 0;


						final boolean RX10_TEMP177 = RX10_TEMP174 != RX10_TEMP176;

						if(RX10_TEMP177)
							{

							String RX10_TEMP175 = "Bad place access for array tmp2";

							throw new RuntimeException(RX10_TEMP175);

							}

						final int RX10_TEMP178 = Program.getRefArrayValue1int(tmp2, RX10_TEMP170,X10_TEMP71);


						final int X10_TEMP76 = RX10_TEMP178;


						final int X10_TEMP79 = X10_TEMP75 + X10_TEMP76;


						final int X10_TEMP80 = X10_TEMP79;


						final Dist1 RX10_TEMP179 = tmp1.distValue;


						final Region1 RX10_TEMP180 = RX10_TEMP179.dReg;


						final int RX10_TEMP181 = Program.searchPointInRegion1(RX10_TEMP180, pl,X10_TEMP71);


						final int RX10_TEMP182 = 0;


						final boolean RX10_TEMP183 = RX10_TEMP181 < RX10_TEMP182;

						if(RX10_TEMP183)
							{

							String RX10_TEMP184 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP184);

							}

						final int RX10_TEMP185 = Program.getPlaceFromDist1(RX10_TEMP179, RX10_TEMP181,X10_TEMP71);


						final int RX10_TEMP187 = 0;


						final boolean RX10_TEMP188 = RX10_TEMP185 != RX10_TEMP187;

						if(RX10_TEMP188)
							{

							String RX10_TEMP186 = "Bad place access for array tmp1";

							throw new RuntimeException(RX10_TEMP186);

							}
						Program.setRefArrayValue1int(tmp1, RX10_TEMP181, X10_TEMP80,X10_TEMP71);
						}
					}
				}

			final int X10_TEMP82 = strides + strides;


			strides = X10_TEMP82;


			final int X10_TEMP16 = 1;


			X10_TEMP18 = strides < X10_TEMP16;

			}
		return result;
		}
public static double Particle_getX ( final Particle X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.x;

		return X10_TEMP2;
		}
public static double Particle_getY ( final Particle X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.y;

		return X10_TEMP2;
		}
public static double Particle_getXVel ( final Particle X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.xVel;

		return X10_TEMP2;
		}
public static double Particle_getYVel ( final Particle X10_TEMP0, int myUniquePlacePoint)
		{

		final double X10_TEMP2 = X10_TEMP0.yVel;

		return X10_TEMP2;
		}
public static Particle Particle_setX ( final Particle X10_TEMP0, final double x, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.y;


		double X10_TEMP7 = X10_TEMP0.xVel;


		double X10_TEMP8 = X10_TEMP0.yVel;


		int X10_TEMP9 = X10_TEMP0.pid;


		final Particle X10_TEMP11 = new Particle(x, X10_TEMP6, X10_TEMP7, X10_TEMP8, X10_TEMP9,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP11.hashCode());

		return X10_TEMP11;
		}
public static Particle Particle_setY ( final Particle X10_TEMP0, final double y, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.x;


		double X10_TEMP7 = X10_TEMP0.xVel;


		double X10_TEMP8 = X10_TEMP0.yVel;


		int X10_TEMP9 = X10_TEMP0.pid;


		final Particle X10_TEMP11 = new Particle(X10_TEMP6, y, X10_TEMP7, X10_TEMP8, X10_TEMP9,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP11.hashCode());

		return X10_TEMP11;
		}
public static Particle Particle_setXVel ( final Particle X10_TEMP0, final double xVel, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.x;


		double X10_TEMP7 = X10_TEMP0.y;


		double X10_TEMP8 = X10_TEMP0.yVel;


		int X10_TEMP9 = X10_TEMP0.pid;


		final Particle X10_TEMP11 = new Particle(X10_TEMP6, X10_TEMP7, xVel, X10_TEMP8, X10_TEMP9,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP11.hashCode());

		return X10_TEMP11;
		}
public static Particle Particle_setYVel ( final Particle X10_TEMP0, final double yVel, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.x;


		double X10_TEMP7 = X10_TEMP0.y;


		double X10_TEMP8 = X10_TEMP0.xVel;


		int X10_TEMP9 = X10_TEMP0.pid;


		final Particle X10_TEMP11 = new Particle(X10_TEMP6, X10_TEMP7, X10_TEMP8, yVel, X10_TEMP9,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP11.hashCode());

		return X10_TEMP11;
		}
public static Particle Particle_setPos ( final Particle X10_TEMP0, final double x, final double y, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.xVel;


		double X10_TEMP7 = X10_TEMP0.yVel;


		int X10_TEMP8 = X10_TEMP0.pid;


		final Particle X10_TEMP10 = new Particle(x, y, X10_TEMP6, X10_TEMP7, X10_TEMP8,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP10.hashCode());

		return X10_TEMP10;
		}
public static Particle Particle_setVel ( final Particle X10_TEMP0, final double xVel, final double yVel, int myUniquePlacePoint)
		{

		double X10_TEMP6 = X10_TEMP0.x;


		double X10_TEMP7 = X10_TEMP0.y;


		int X10_TEMP8 = X10_TEMP0.pid;


		final Particle X10_TEMP10 = new Particle(X10_TEMP6, X10_TEMP7, xVel, yVel, X10_TEMP8,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP10.hashCode());

		return X10_TEMP10;
		}
public static String Particle_toString ( final Particle X10_TEMP0, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = X10_TEMP0.pid;


		final int X10_TEMP2 = 0;


		final boolean X10_TEMP4 = X10_TEMP1 >= X10_TEMP2;


		final boolean X10_TEMP5 = X10_TEMP4;


		final String X10_TEMP6 = "p";


		final int X10_TEMP7 = X10_TEMP0.pid;


		String X10_TEMP10 = "";

		if(X10_TEMP5)
			{

			X10_TEMP10 = X10_TEMP6 + X10_TEMP7;

			}

		final String X10_TEMP11 = X10_TEMP10;


		String result = X10_TEMP11;


		final String X10_TEMP12 = "(";


		final String X10_TEMP13 = result + X10_TEMP12;


		final double X10_TEMP14 = X10_TEMP0.x;


		final String X10_TEMP15 = X10_TEMP13 + X10_TEMP14;


		final String X10_TEMP16 = ",";


		final String X10_TEMP17 = X10_TEMP15 + X10_TEMP16;


		final double X10_TEMP18 = X10_TEMP0.y;


		final String X10_TEMP19 = X10_TEMP17 + X10_TEMP18;


		final String X10_TEMP20 = ",";


		final String X10_TEMP21 = X10_TEMP19 + X10_TEMP20;


		final double X10_TEMP22 = X10_TEMP0.xVel;


		final String X10_TEMP23 = X10_TEMP21 + X10_TEMP22;


		final String X10_TEMP24 = ",";


		final String X10_TEMP25 = X10_TEMP23 + X10_TEMP24;


		final double X10_TEMP26 = X10_TEMP0.yVel;


		final String X10_TEMP27 = X10_TEMP25 + X10_TEMP26;


		final String X10_TEMP28 = ")";


		final String X10_TEMP30 = X10_TEMP27 + X10_TEMP28;


		result = X10_TEMP30;

		return result;
		}
public static boolean Particle_particleEquals ( final Particle X10_TEMP0, final Particle p, int myUniquePlacePoint)
		{

		final double error = _X10Util_ERROR;


		final int X10_TEMP2 = X10_TEMP0.pid;


		final int X10_TEMP3 = 0;


		final boolean X10_TEMP6 = X10_TEMP2 >= X10_TEMP3;


		final int X10_TEMP4 = X10_TEMP0.pid;


		final int X10_TEMP5 = p.pid;


		final boolean X10_TEMP7 = X10_TEMP4 != X10_TEMP5;


		final boolean X10_TEMP9 = X10_TEMP6 && X10_TEMP7;

		if(X10_TEMP9)
			{

			final boolean X10_TEMP11 = false;

			return X10_TEMP11;
			}

		final double X10_TEMP12 = Program.Particle_getX(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP13 = Program.Particle_getX(p,myUniquePlacePoint);


		final double X10_TEMP15 = X10_TEMP12 - X10_TEMP13;


		final double X10_TEMP16 = Math.abs(X10_TEMP15);


		final boolean X10_TEMP18 = X10_TEMP16 < error;


		final double X10_TEMP19 = Program.Particle_getY(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP20 = Program.Particle_getY(p,myUniquePlacePoint);


		final double X10_TEMP22 = X10_TEMP19 - X10_TEMP20;


		final double X10_TEMP23 = Math.abs(X10_TEMP22);


		final boolean X10_TEMP25 = X10_TEMP23 < error;


		final boolean X10_TEMP33 = X10_TEMP18 && X10_TEMP25;


		final double X10_TEMP26 = Program.Particle_getXVel(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP27 = Program.Particle_getXVel(p,myUniquePlacePoint);


		final double X10_TEMP29 = X10_TEMP26 - X10_TEMP27;


		final double X10_TEMP30 = Math.abs(X10_TEMP29);


		final boolean X10_TEMP32 = X10_TEMP30 < error;


		final boolean X10_TEMP41 = X10_TEMP33 && X10_TEMP32;


		final double X10_TEMP34 = Program.Particle_getYVel(X10_TEMP0,myUniquePlacePoint);


		final double X10_TEMP35 = Program.Particle_getYVel(p,myUniquePlacePoint);


		final double X10_TEMP37 = X10_TEMP34 - X10_TEMP35;


		final double X10_TEMP38 = Math.abs(X10_TEMP37);


		final boolean X10_TEMP40 = X10_TEMP38 < error;


		final boolean X10_TEMP43 = X10_TEMP41 && X10_TEMP40;

		return X10_TEMP43;
		}
public static double _PoissonSolver_PI4I_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP1 = 0.5;


		final double X10_TEMP2 = 6.28318530717959;


		final double X10_TEMP4 = X10_TEMP1 / X10_TEMP2;

		return X10_TEMP4;
		}
public static double _PoissonSolver_SQT2I_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 0.707106781186548;

		return X10_TEMP2;
		}
public static double _PoissonSolver_SQT2PI_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 0.797884560802865;

		return X10_TEMP2;
		}
public static int _PoissonSolver_GREENS_IDX_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 0;

		return X10_TEMP2;
		}
public static int _PoissonSolver_SHAPE_IDX_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 1;

		return X10_TEMP2;
		}
public static int _PoissonSolver_ELECX_IDX_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 2;

		return X10_TEMP2;
		}
public static int _PoissonSolver_ELECY_IDX_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 3;

		return X10_TEMP2;
		}
public static double _PoissonSolver_AR_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 0.912871;

		return X10_TEMP2;
		}
public static ComplexRefArray2 PoissonSolver_makeForceArray ( final PoissonSolver X10_TEMP0, int myUniquePlacePoint)
		{

		final int X10_TEMP7 = 0;


		final int X10_TEMP2 = 2;


		final int X10_TEMP3 = X10_TEMP0.y;


		final int X10_TEMP4 = X10_TEMP2 * X10_TEMP3;


		final int X10_TEMP5 = 1;


		final int X10_TEMP8 = X10_TEMP4 - X10_TEMP5;


		final int X10_TEMP13 = 0;


		final int X10_TEMP10 = X10_TEMP0.x;


		final int X10_TEMP11 = 1;


		final int X10_TEMP14 = X10_TEMP10 - X10_TEMP11;


		final Region2 X10_TEMP16 = Program.createNewRegion2RR(X10_TEMP7, X10_TEMP8, X10_TEMP13, X10_TEMP14,myUniquePlacePoint);


		final Dist2 dResult = Program.X10Util_distBlockStar1(X10_TEMP16,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dResult.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final ComplexStub[] RX10_TEMP6 = new ComplexStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dResult, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final Complex[] RX10_TEMP14 = new Complex[RX10_TEMP13];


					final ComplexStub RX10_TEMP15 = new ComplexStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP16 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final ComplexStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final ComplexRefArray2 RX10_TEMP19 = new ComplexRefArray2(dResult, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final ComplexRefArray2 X10_TEMP19 = RX10_TEMP19;

		return X10_TEMP19;
		}
public static double PoissonSolver_getForceCharge ( final PoissonSolver X10_TEMP0, final ComplexRefArray2 q, final ComplexRefArray2 forceX, final ComplexRefArray2 forceY, int myUniquePlacePoint)
		{

		final int X10_TEMP5 = 0;


		final int X10_TEMP2 = X10_TEMP0.x;


		final int X10_TEMP3 = 1;


		final int X10_TEMP6 = X10_TEMP2 - X10_TEMP3;


		final int X10_TEMP13 = 0;


		final int X10_TEMP8 = 2;


		final int X10_TEMP9 = X10_TEMP0.y;


		final int X10_TEMP10 = X10_TEMP8 * X10_TEMP9;


		final int X10_TEMP11 = 1;


		final int X10_TEMP14 = X10_TEMP10 - X10_TEMP11;


		final Region2 X10_TEMP16 = Program.createNewRegion2RR(X10_TEMP5, X10_TEMP6, X10_TEMP13, X10_TEMP14,myUniquePlacePoint);


		final Dist2 dForce = Program.X10Util_distBlockStar1(X10_TEMP16,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dForce.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final ComplexStub[] RX10_TEMP6 = new ComplexStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dForce, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final Complex[] RX10_TEMP14 = new Complex[RX10_TEMP13];


					final ComplexStub RX10_TEMP15 = new ComplexStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP16 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final ComplexStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final ComplexRefArray2 RX10_TEMP19 = new ComplexRefArray2(dForce, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final ComplexRefArray2 fxfft = RX10_TEMP19;


		final Region2 RX10_TEMP20 = dForce.dReg;


		final int RX10_TEMP21 = 0;


		final int RX10_TEMP22 = 1;


		int RX10_TEMP23 = 1;


		RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP22;


		final int  RX10_TEMP24 = RX10_TEMP23+1;


		final int RX10_TEMP25 = RX10_TEMP23+1;


		final ComplexStub[] RX10_TEMP26 = new ComplexStub[RX10_TEMP25];

		/*FINISH
*/			{
			for(int RX10_TEMP27=0; RX10_TEMP27 < RX10_TEMP24; RX10_TEMP27++)
				{

				final int RX10_TEMP28 = 0;


				final int RX10_TEMP29 = RX10_TEMP27;


				final int RX10_TEMP30 = 0;


				final int RX10_TEMP31 = Program.getDistLocalCount2(dForce, RX10_TEMP29,myUniquePlacePoint);


				final int RX10_TEMP32 = RX10_TEMP31 - RX10_TEMP22;

				//async(RX10_TEMP30)
					{

					final int RX10_TEMP33 = RX10_TEMP32+1;


					final Complex[] RX10_TEMP34 = new Complex[RX10_TEMP33];


					final ComplexStub RX10_TEMP35 = new ComplexStub(RX10_TEMP34,RX10_TEMP30);
					
Program.globalPointerHashMap.get(RX10_TEMP30).add(RX10_TEMP35.hashCode());

					//async(RX10_TEMP28)
						{
						RX10_TEMP26[RX10_TEMP27] = RX10_TEMP35;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP36 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP24]);
/*arrayInitBlock*/
for(int RX10_TEMP38= 0;RX10_TEMP38 <RX10_TEMP36.length ;RX10_TEMP38++ )			{

			final ComplexStub RX10_TEMP37 = RX10_TEMP26[RX10_TEMP38];

			RX10_TEMP36[RX10_TEMP38] =RX10_TEMP37;
			}

;


		final ComplexRefArray2 RX10_TEMP39 = new ComplexRefArray2(dForce, RX10_TEMP36,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP39.hashCode());


		final ComplexRefArray2 fyfft = RX10_TEMP39;


		final FourierTransform2D X10_TEMP20 = X10_TEMP0.fft;


		final ComplexRefArray2 qfft = Program.FourierTransform2D_inverseTransformC(X10_TEMP20, q,myUniquePlacePoint);


		final double we = Program.PoissonSolver_solveForceCharge(X10_TEMP0, qfft, fxfft, fyfft,myUniquePlacePoint);


		final FourierTransform2D X10_TEMP27 = X10_TEMP0.fft;


		final ComplexRefArray2 fx = Program.FourierTransform2D_transformC(X10_TEMP27, fxfft,myUniquePlacePoint);


		final FourierTransform2D X10_TEMP30 = X10_TEMP0.fft;


		final ComplexRefArray2 fy = Program.FourierTransform2D_transformC(X10_TEMP30, fyfft,myUniquePlacePoint);

		/*FINISH
*/			{

			final Dist2 RX10_TEMP41 = forceX.distValue;


			final Region2 RX10_TEMP42 = RX10_TEMP41.dReg;


			final int RX10_TEMP45 = 1;


			int RX10_TEMP43 = RX10_TEMP42.regSize;


			RX10_TEMP43 = RX10_TEMP43 - RX10_TEMP45;


			final int  RX10_TEMP44 = RX10_TEMP43+1;

			for(int RX10_TEMP40=0; RX10_TEMP40 < RX10_TEMP44; RX10_TEMP40++)
				{

				final int RX10_TEMP46 = RX10_TEMP40;


				final Point2 pt = Program.regionOrdinalPoint2(RX10_TEMP42, RX10_TEMP46,myUniquePlacePoint);


				final Dist2 RX10_TEMP47 = forceX.distValue;


				final Dist2 X10_TEMP34 = RX10_TEMP47;


				final Region2 RX10_TEMP48 = X10_TEMP34.dReg;


				final int RX10_TEMP49 = Program.searchPointInRegion2(RX10_TEMP48, pt,myUniquePlacePoint);


				final int RX10_TEMP50 = 0;


				final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

				if(RX10_TEMP51)
					{

					final String RX10_TEMP52 = "Point pt not found in the distribution X10_TEMP34.";

					throw new RuntimeException(RX10_TEMP52);

					}

				final int RX10_TEMP53 = Program.getPlaceFromDist2(X10_TEMP34, RX10_TEMP49,myUniquePlacePoint);


				final int X10_TEMP35 = RX10_TEMP53;

				//async(X10_TEMP35)
					{

					final Dist2 RX10_TEMP54 = fx.distValue;


					final Region2 RX10_TEMP55 = RX10_TEMP54.dReg;


					final int RX10_TEMP56 = Program.searchPointInRegion2(RX10_TEMP55, pt,X10_TEMP35);


					final int RX10_TEMP57 = 0;


					final boolean RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57;

					if(RX10_TEMP58)
						{

						String RX10_TEMP59 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP59);

						}

					final int RX10_TEMP60 = Program.getPlaceFromDist2(RX10_TEMP54, RX10_TEMP56,X10_TEMP35);


					final int RX10_TEMP62 = 0;


					final boolean RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62;

					if(RX10_TEMP63)
						{

						String RX10_TEMP61 = "Bad place access for array fx";

						throw new RuntimeException(RX10_TEMP61);

						}

					final Complex RX10_TEMP64 = Program.getRefArrayValue2Complex(fx, RX10_TEMP56,X10_TEMP35);


					final Complex X10_TEMP40 = RX10_TEMP64;


					final Complex X10_TEMP41 = X10_TEMP40;


					final Dist2 RX10_TEMP65 = forceX.distValue;


					final Region2 RX10_TEMP66 = RX10_TEMP65.dReg;


					final int RX10_TEMP67 = Program.searchPointInRegion2(RX10_TEMP66, pt,X10_TEMP35);


					final int RX10_TEMP68 = 0;


					final boolean RX10_TEMP69 = RX10_TEMP67 < RX10_TEMP68;

					if(RX10_TEMP69)
						{

						String RX10_TEMP70 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP70);

						}

					final int RX10_TEMP71 = Program.getPlaceFromDist2(RX10_TEMP65, RX10_TEMP67,X10_TEMP35);


					final int RX10_TEMP73 = 0;


					final boolean RX10_TEMP74 = RX10_TEMP71 != RX10_TEMP73;

					if(RX10_TEMP74)
						{

						String RX10_TEMP72 = "Bad place access for array forceX";

						throw new RuntimeException(RX10_TEMP72);

						}
					Program.setRefArrayValue2Complex(forceX, RX10_TEMP67, X10_TEMP41,X10_TEMP35);

					final Dist2 RX10_TEMP75 = fy.distValue;


					final Region2 RX10_TEMP76 = RX10_TEMP75.dReg;


					final int RX10_TEMP77 = Program.searchPointInRegion2(RX10_TEMP76, pt,X10_TEMP35);


					final int RX10_TEMP78 = 0;


					final boolean RX10_TEMP79 = RX10_TEMP77 < RX10_TEMP78;

					if(RX10_TEMP79)
						{

						String RX10_TEMP80 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP80);

						}

					final int RX10_TEMP81 = Program.getPlaceFromDist2(RX10_TEMP75, RX10_TEMP77,X10_TEMP35);


					final int RX10_TEMP83 = 0;


					final boolean RX10_TEMP84 = RX10_TEMP81 != RX10_TEMP83;

					if(RX10_TEMP84)
						{

						String RX10_TEMP82 = "Bad place access for array fy";

						throw new RuntimeException(RX10_TEMP82);

						}

					final Complex RX10_TEMP85 = Program.getRefArrayValue2Complex(fy, RX10_TEMP77,X10_TEMP35);


					final Complex X10_TEMP46 = RX10_TEMP85;


					final Complex X10_TEMP47 = X10_TEMP46;


					final Dist2 RX10_TEMP86 = forceY.distValue;


					final Region2 RX10_TEMP87 = RX10_TEMP86.dReg;


					final int RX10_TEMP88 = Program.searchPointInRegion2(RX10_TEMP87, pt,X10_TEMP35);


					final int RX10_TEMP89 = 0;


					final boolean RX10_TEMP90 = RX10_TEMP88 < RX10_TEMP89;

					if(RX10_TEMP90)
						{

						String RX10_TEMP91 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP91);

						}

					final int RX10_TEMP92 = Program.getPlaceFromDist2(RX10_TEMP86, RX10_TEMP88,X10_TEMP35);


					final int RX10_TEMP94 = 0;


					final boolean RX10_TEMP95 = RX10_TEMP92 != RX10_TEMP94;

					if(RX10_TEMP95)
						{

						String RX10_TEMP93 = "Bad place access for array forceY";

						throw new RuntimeException(RX10_TEMP93);

						}
					Program.setRefArrayValue2Complex(forceY, RX10_TEMP88, X10_TEMP47,X10_TEMP35);
					}
				}
			}
		return we;
		}
public static double PoissonSolver_solveForceCharge ( final PoissonSolver X10_TEMP0, final ComplexRefArray2 q, final ComplexRefArray2 forceX, final ComplexRefArray2 forceY, int myUniquePlacePoint)
		{

		final Dist1 X10_TEMP1 = Program.getUniqueDist(myUniquePlacePoint);


		final Dist1 dUnique = X10_TEMP1;


		final Region1 RX10_TEMP0 = dUnique.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dUnique, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final double[] RX10_TEMP15 = new double/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{

						final double X10_TEMP4 = 0.0;

						RX10_TEMP15[RX10_TEMP13] =X10_TEMP4;
						}

;


					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP17 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final doubleStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(dUnique, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final doubleRefArray1 energy = RX10_TEMP20;


		final Dist1 X10_TEMP7 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP22 = X10_TEMP7.dReg;


		final int RX10_TEMP25 = 1;


		int RX10_TEMP23 = RX10_TEMP22.regSize;


		RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


		final int  RX10_TEMP24 = RX10_TEMP23+1;

		for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
			{

			final int RX10_TEMP26 = RX10_TEMP21;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);

			/*FINISH
*/				{

				final Dist1 X10_TEMP8 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP27 = X10_TEMP8.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, pl,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP8.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(X10_TEMP8, RX10_TEMP28,myUniquePlacePoint);


				final int X10_TEMP11 = RX10_TEMP32;

				//async(X10_TEMP11)
					{

					final int X10_TEMP13 = pl.f0;


					final int X10_TEMP14 = X10_TEMP0.x;


					final boolean X10_TEMP16 = X10_TEMP13 <= X10_TEMP14;

					if(X10_TEMP16)
						{

						final doubleRefArray3 X10_TEMP17 = X10_TEMP0.ffg;


						final Dist3 RX10_TEMP33 = X10_TEMP17.distValue;


						final Dist3 dFFG = RX10_TEMP33;


						final Region3 rLocal = Program.X10Util_get3DLRegion(dFFG,X10_TEMP11);


						final int X10_TEMP23 = 0;


						final Region1 rLocal1 = Program.X10Util_getRank3D(rLocal, X10_TEMP23,X10_TEMP11);


						final int X10_TEMP27 = 1;


						final Region1 rLocal2 = Program.X10Util_getRank3D(rLocal, X10_TEMP27,X10_TEMP11);


						final double X10_TEMP29 = 1.0;


						final int X10_TEMP30 = 0;


						double tmp3 = X10_TEMP30 - X10_TEMP29;


						final int RX10_TEMP38 = 1;


						int RX10_TEMP36 = rLocal1.regSize;


						RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


						final int  RX10_TEMP37 = RX10_TEMP36+1;

						for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
							{

							final int RX10_TEMP39 = RX10_TEMP34;


							final Point1 RX10_TEMP35 = Program.regionOrdinalPoint1(rLocal1, RX10_TEMP39,X10_TEMP11);


							final int i = RX10_TEMP35.f0;


							final int X10_TEMP33 = 2;


							final int X10_TEMP34 = i % X10_TEMP33;


							final int X10_TEMP35 = 0;


							final boolean X10_TEMP37 = X10_TEMP34 == X10_TEMP35;


							final boolean X10_TEMP38 = X10_TEMP37;


							final double X10_TEMP40 = 1.0;


							final int X10_TEMP41 = 0;


							double X10_TEMP43 = X10_TEMP41 - X10_TEMP40;

							if(X10_TEMP38)
								{

								X10_TEMP43 = 1.0;

								}

							final double X10_TEMP44 = X10_TEMP43;


							tmp3 = X10_TEMP44;


							final int X10_TEMP45 = 0;


							final boolean X10_TEMP47 = i > X10_TEMP45;

							if(X10_TEMP47)
								{

								final doubleRefArray3 X10_TEMP48 = X10_TEMP0.ffg;


								final int X10_TEMP52 = 0;


								final Point3 RX10_TEMP40 = new Point3(i, X10_TEMP52, _PoissonSolver_ELECY_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP40.hashCode());


								final Dist3 RX10_TEMP41 = X10_TEMP48.distValue;


								final Region3 RX10_TEMP42 = RX10_TEMP41.dReg;


								final int RX10_TEMP43 = Program.searchPointInRegion3(RX10_TEMP42, RX10_TEMP40,X10_TEMP11);


								final int RX10_TEMP44 = 0;


								final boolean RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44;

								if(RX10_TEMP45)
									{

									String RX10_TEMP46 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP46);

									}

								final int RX10_TEMP47 = Program.getPlaceFromDist3(RX10_TEMP41, RX10_TEMP43,X10_TEMP11);


								final int RX10_TEMP49 = 0;


								final boolean RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49;

								if(RX10_TEMP50)
									{

									String RX10_TEMP48 = "Bad place access for array X10_TEMP48";

									throw new RuntimeException(RX10_TEMP48);

									}

								final double RX10_TEMP51 = Program.getRefArrayValue3double(X10_TEMP48, RX10_TEMP43,X10_TEMP11);


								double tmp2 = RX10_TEMP51;


								final int X10_TEMP58 = 1;


								final int X10_TEMP55 = X10_TEMP0.y;


								final int X10_TEMP56 = 1;


								final int X10_TEMP59 = X10_TEMP55 - X10_TEMP56;


								final Region1 X10_TEMP61 = Program.createNewRegion1R(X10_TEMP58, X10_TEMP59,X10_TEMP11);


								final int RX10_TEMP56 = 1;


								int RX10_TEMP54 = X10_TEMP61.regSize;


								RX10_TEMP54 = RX10_TEMP54 - RX10_TEMP56;


								final int  RX10_TEMP55 = RX10_TEMP54+1;

								for(int RX10_TEMP52=0; RX10_TEMP52 < RX10_TEMP55; RX10_TEMP52++)
									{

									final int RX10_TEMP57 = RX10_TEMP52;


									final Point1 RX10_TEMP53 = Program.regionOrdinalPoint1(X10_TEMP61, RX10_TEMP57,X10_TEMP11);


									final int j1 = RX10_TEMP53.f0;


									final int X10_TEMP62 = 2;


									final int X10_TEMP63 = X10_TEMP0.y;


									final int X10_TEMP64 = X10_TEMP62 * X10_TEMP63;


									final int j2 = X10_TEMP64 - j1;


									final int X10_TEMP66 = 0;


									final boolean X10_TEMP68 = true;


									final boolean X10_TEMP69 = X10_TEMP68;


									final doubleRefArray3 X10_TEMP70 = X10_TEMP0.ffg;


									final int X10_TEMP74 = 0;


									final doubleValArray2 X10_TEMP76 = X10_TEMP0.ffg2;


									final Point2 RX10_TEMP58 = new Point2(j1, _PoissonSolver_ELECX_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP58.hashCode());


									final Region2 RX10_TEMP59 = X10_TEMP76.regionValue;


									final int RX10_TEMP60 = Program.searchPointInRegion2(RX10_TEMP59, RX10_TEMP58,X10_TEMP11);


									final int RX10_TEMP61 = 0;


									final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

									if(RX10_TEMP62)
										{

										String RX10_TEMP63 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP63);

										}

									final double[] RX10_TEMP64 = (double[])(X10_TEMP76.contents);


									double X10_TEMP80 = RX10_TEMP64[RX10_TEMP60];

									if(X10_TEMP69)
										{

										final Point3 RX10_TEMP65 = new Point3(X10_TEMP74, j1, _PoissonSolver_ELECX_IDX,X10_TEMP11);
										
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP65.hashCode());


										final Dist3 RX10_TEMP66 = X10_TEMP70.distValue;


										final Region3 RX10_TEMP67 = RX10_TEMP66.dReg;


										final int RX10_TEMP68 = Program.searchPointInRegion3(RX10_TEMP67, RX10_TEMP65,X10_TEMP11);


										final int RX10_TEMP69 = 0;


										final boolean RX10_TEMP70 = RX10_TEMP68 < RX10_TEMP69;

										if(RX10_TEMP70)
											{

											String RX10_TEMP71 = "Array access index out of bounds";

											throw new RuntimeException(RX10_TEMP71);

											}

										final int RX10_TEMP72 = Program.getPlaceFromDist3(RX10_TEMP66, RX10_TEMP68,X10_TEMP11);


										final int RX10_TEMP74 = 0;


										final boolean RX10_TEMP75 = RX10_TEMP72 != RX10_TEMP74;

										if(RX10_TEMP75)
											{

											String RX10_TEMP73 = "Bad place access for array X10_TEMP70";

											throw new RuntimeException(RX10_TEMP73);

											}

										final double RX10_TEMP76 = Program.getRefArrayValue3double(X10_TEMP70, RX10_TEMP68,X10_TEMP11);


										X10_TEMP80 = RX10_TEMP76;

										}

									final double X10_TEMP81 = X10_TEMP80;


									final double X10_TEMP82 = X10_TEMP81;


									final double tmp0 = X10_TEMP82;


									final double tmp1 = tmp3 * tmp0;


									final int X10_TEMP85 = 0;


									final double X10_TEMP87 = X10_TEMP85 - tmp2;


									tmp2 = X10_TEMP87;


									final doubleRefArray3 X10_TEMP89 = X10_TEMP0.ffg;


									final Point3 RX10_TEMP77 = new Point3(i, j1, _PoissonSolver_ELECX_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP77.hashCode());


									final Dist3 RX10_TEMP78 = X10_TEMP89.distValue;


									final Region3 RX10_TEMP79 = RX10_TEMP78.dReg;


									final int RX10_TEMP80 = Program.searchPointInRegion3(RX10_TEMP79, RX10_TEMP77,X10_TEMP11);


									final int RX10_TEMP81 = 0;


									final boolean RX10_TEMP82 = RX10_TEMP80 < RX10_TEMP81;

									if(RX10_TEMP82)
										{

										String RX10_TEMP83 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP83);

										}

									final int RX10_TEMP84 = Program.getPlaceFromDist3(RX10_TEMP78, RX10_TEMP80,X10_TEMP11);


									final int RX10_TEMP86 = 0;


									final boolean RX10_TEMP87 = RX10_TEMP84 != RX10_TEMP86;

									if(RX10_TEMP87)
										{

										String RX10_TEMP85 = "Bad place access for array X10_TEMP89";

										throw new RuntimeException(RX10_TEMP85);

										}

									final double RX10_TEMP88 = Program.getRefArrayValue3double(X10_TEMP89, RX10_TEMP80,X10_TEMP11);


									double X10_TEMP94 = RX10_TEMP88;


									final Complex cx = new Complex(tmp1, X10_TEMP94,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(cx.hashCode());


									final doubleRefArray3 X10_TEMP97 = X10_TEMP0.ffg;


									final Point3 RX10_TEMP89 = new Point3(i, j1, _PoissonSolver_ELECY_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP89.hashCode());


									final Dist3 RX10_TEMP90 = X10_TEMP97.distValue;


									final Region3 RX10_TEMP91 = RX10_TEMP90.dReg;


									final int RX10_TEMP92 = Program.searchPointInRegion3(RX10_TEMP91, RX10_TEMP89,X10_TEMP11);


									final int RX10_TEMP93 = 0;


									final boolean RX10_TEMP94 = RX10_TEMP92 < RX10_TEMP93;

									if(RX10_TEMP94)
										{

										String RX10_TEMP95 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP95);

										}

									final int RX10_TEMP96 = Program.getPlaceFromDist3(RX10_TEMP90, RX10_TEMP92,X10_TEMP11);


									final int RX10_TEMP98 = 0;


									final boolean RX10_TEMP99 = RX10_TEMP96 != RX10_TEMP98;

									if(RX10_TEMP99)
										{

										String RX10_TEMP97 = "Bad place access for array X10_TEMP97";

										throw new RuntimeException(RX10_TEMP97);

										}

									final double RX10_TEMP100 = Program.getRefArrayValue3double(X10_TEMP97, RX10_TEMP92,X10_TEMP11);


									double X10_TEMP102 = RX10_TEMP100;


									final Complex cy = new Complex(tmp2, X10_TEMP102,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(cy.hashCode());


									final Point2 RX10_TEMP101 = new Point2(i, j1,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP101.hashCode());


									final Dist2 RX10_TEMP102 = q.distValue;


									final Region2 RX10_TEMP103 = RX10_TEMP102.dReg;


									final int RX10_TEMP104 = Program.searchPointInRegion2(RX10_TEMP103, RX10_TEMP101,X10_TEMP11);


									final int RX10_TEMP105 = 0;


									final boolean RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105;

									if(RX10_TEMP106)
										{

										String RX10_TEMP107 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP107);

										}

									final int RX10_TEMP108 = Program.getPlaceFromDist2(RX10_TEMP102, RX10_TEMP104,X10_TEMP11);


									final int RX10_TEMP110 = 0;


									final boolean RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110;

									if(RX10_TEMP111)
										{

										String RX10_TEMP109 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP109);

										}

									final Complex RX10_TEMP112 = Program.getRefArrayValue2Complex(q, RX10_TEMP104,X10_TEMP11);


									final Complex X10_TEMP109 = RX10_TEMP112;


									final Complex X10_TEMP112 = Program.Complex_mult(cx, X10_TEMP109,X10_TEMP11);


									final Complex X10_TEMP113 = X10_TEMP112;


									final Point2 RX10_TEMP113 = new Point2(i, j1,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP113.hashCode());


									final Dist2 RX10_TEMP114 = forceX.distValue;


									final Region2 RX10_TEMP115 = RX10_TEMP114.dReg;


									final int RX10_TEMP116 = Program.searchPointInRegion2(RX10_TEMP115, RX10_TEMP113,X10_TEMP11);


									final int RX10_TEMP117 = 0;


									final boolean RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117;

									if(RX10_TEMP118)
										{

										String RX10_TEMP119 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP119);

										}

									final int RX10_TEMP120 = Program.getPlaceFromDist2(RX10_TEMP114, RX10_TEMP116,X10_TEMP11);


									final int RX10_TEMP122 = 0;


									final boolean RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122;

									if(RX10_TEMP123)
										{

										String RX10_TEMP121 = "Bad place access for array forceX";

										throw new RuntimeException(RX10_TEMP121);

										}
									Program.setRefArrayValue2Complex(forceX, RX10_TEMP116, X10_TEMP113,X10_TEMP11);

									final Point2 RX10_TEMP124 = new Point2(i, j2,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP124.hashCode());


									final Dist2 RX10_TEMP125 = q.distValue;


									final Region2 RX10_TEMP126 = RX10_TEMP125.dReg;


									final int RX10_TEMP127 = Program.searchPointInRegion2(RX10_TEMP126, RX10_TEMP124,X10_TEMP11);


									final int RX10_TEMP128 = 0;


									final boolean RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128;

									if(RX10_TEMP129)
										{

										String RX10_TEMP130 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP130);

										}

									final int RX10_TEMP131 = Program.getPlaceFromDist2(RX10_TEMP125, RX10_TEMP127,X10_TEMP11);


									final int RX10_TEMP133 = 0;


									final boolean RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133;

									if(RX10_TEMP134)
										{

										String RX10_TEMP132 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP132);

										}

									final Complex RX10_TEMP135 = Program.getRefArrayValue2Complex(q, RX10_TEMP127,X10_TEMP11);


									final Complex X10_TEMP119 = RX10_TEMP135;


									final Complex X10_TEMP122 = Program.Complex_mult(cx, X10_TEMP119,X10_TEMP11);


									final Complex X10_TEMP123 = X10_TEMP122;


									final Point2 RX10_TEMP136 = new Point2(i, j2,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP136.hashCode());


									final Dist2 RX10_TEMP137 = forceX.distValue;


									final Region2 RX10_TEMP138 = RX10_TEMP137.dReg;


									final int RX10_TEMP139 = Program.searchPointInRegion2(RX10_TEMP138, RX10_TEMP136,X10_TEMP11);


									final int RX10_TEMP140 = 0;


									final boolean RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140;

									if(RX10_TEMP141)
										{

										String RX10_TEMP142 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP142);

										}

									final int RX10_TEMP143 = Program.getPlaceFromDist2(RX10_TEMP137, RX10_TEMP139,X10_TEMP11);


									final int RX10_TEMP145 = 0;


									final boolean RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145;

									if(RX10_TEMP146)
										{

										String RX10_TEMP144 = "Bad place access for array forceX";

										throw new RuntimeException(RX10_TEMP144);

										}
									Program.setRefArrayValue2Complex(forceX, RX10_TEMP139, X10_TEMP123,X10_TEMP11);

									final Point2 RX10_TEMP147 = new Point2(i, j1,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP147.hashCode());


									final Dist2 RX10_TEMP148 = q.distValue;


									final Region2 RX10_TEMP149 = RX10_TEMP148.dReg;


									final int RX10_TEMP150 = Program.searchPointInRegion2(RX10_TEMP149, RX10_TEMP147,X10_TEMP11);


									final int RX10_TEMP151 = 0;


									final boolean RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151;

									if(RX10_TEMP152)
										{

										String RX10_TEMP153 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP153);

										}

									final int RX10_TEMP154 = Program.getPlaceFromDist2(RX10_TEMP148, RX10_TEMP150,X10_TEMP11);


									final int RX10_TEMP156 = 0;


									final boolean RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156;

									if(RX10_TEMP157)
										{

										String RX10_TEMP155 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP155);

										}

									final Complex RX10_TEMP158 = Program.getRefArrayValue2Complex(q, RX10_TEMP150,X10_TEMP11);


									final Complex X10_TEMP129 = RX10_TEMP158;


									final Complex X10_TEMP132 = Program.Complex_mult(cy, X10_TEMP129,X10_TEMP11);


									final Complex X10_TEMP133 = X10_TEMP132;


									final Point2 RX10_TEMP159 = new Point2(i, j1,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP159.hashCode());


									final Dist2 RX10_TEMP160 = forceY.distValue;


									final Region2 RX10_TEMP161 = RX10_TEMP160.dReg;


									final int RX10_TEMP162 = Program.searchPointInRegion2(RX10_TEMP161, RX10_TEMP159,X10_TEMP11);


									final int RX10_TEMP163 = 0;


									final boolean RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163;

									if(RX10_TEMP164)
										{

										String RX10_TEMP165 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP165);

										}

									final int RX10_TEMP166 = Program.getPlaceFromDist2(RX10_TEMP160, RX10_TEMP162,X10_TEMP11);


									final int RX10_TEMP168 = 0;


									final boolean RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168;

									if(RX10_TEMP169)
										{

										String RX10_TEMP167 = "Bad place access for array forceY";

										throw new RuntimeException(RX10_TEMP167);

										}
									Program.setRefArrayValue2Complex(forceY, RX10_TEMP162, X10_TEMP133,X10_TEMP11);

									final Complex X10_TEMP137 = Program.Complex_getConjg(cy,X10_TEMP11);


									final Point2 RX10_TEMP170 = new Point2(i, j2,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP170.hashCode());


									final Dist2 RX10_TEMP171 = q.distValue;


									final Region2 RX10_TEMP172 = RX10_TEMP171.dReg;


									final int RX10_TEMP173 = Program.searchPointInRegion2(RX10_TEMP172, RX10_TEMP170,X10_TEMP11);


									final int RX10_TEMP174 = 0;


									final boolean RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174;

									if(RX10_TEMP175)
										{

										String RX10_TEMP176 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP176);

										}

									final int RX10_TEMP177 = Program.getPlaceFromDist2(RX10_TEMP171, RX10_TEMP173,X10_TEMP11);


									final int RX10_TEMP179 = 0;


									final boolean RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179;

									if(RX10_TEMP180)
										{

										String RX10_TEMP178 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP178);

										}

									final Complex RX10_TEMP181 = Program.getRefArrayValue2Complex(q, RX10_TEMP173,X10_TEMP11);


									final Complex X10_TEMP141 = RX10_TEMP181;


									final Complex X10_TEMP144 = Program.Complex_mult(X10_TEMP137, X10_TEMP141,X10_TEMP11);


									final Complex X10_TEMP145 = X10_TEMP144;


									final Point2 RX10_TEMP182 = new Point2(i, j2,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP182.hashCode());


									final Dist2 RX10_TEMP183 = forceY.distValue;


									final Region2 RX10_TEMP184 = RX10_TEMP183.dReg;


									final int RX10_TEMP185 = Program.searchPointInRegion2(RX10_TEMP184, RX10_TEMP182,X10_TEMP11);


									final int RX10_TEMP186 = 0;


									final boolean RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186;

									if(RX10_TEMP187)
										{

										String RX10_TEMP188 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP188);

										}

									final int RX10_TEMP189 = Program.getPlaceFromDist2(RX10_TEMP183, RX10_TEMP185,X10_TEMP11);


									final int RX10_TEMP191 = 0;


									final boolean RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191;

									if(RX10_TEMP192)
										{

										String RX10_TEMP190 = "Bad place access for array forceY";

										throw new RuntimeException(RX10_TEMP190);

										}
									Program.setRefArrayValue2Complex(forceY, RX10_TEMP185, X10_TEMP145,X10_TEMP11);

									final Dist1 RX10_TEMP193 = energy.distValue;


									final Region1 RX10_TEMP194 = RX10_TEMP193.dReg;


									final int RX10_TEMP195 = Program.searchPointInRegion1(RX10_TEMP194, pl,X10_TEMP11);


									final int RX10_TEMP196 = 0;


									final boolean RX10_TEMP197 = RX10_TEMP195 < RX10_TEMP196;

									if(RX10_TEMP197)
										{

										String RX10_TEMP198 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP198);

										}

									final int RX10_TEMP199 = Program.getPlaceFromDist1(RX10_TEMP193, RX10_TEMP195,X10_TEMP11);


									final int RX10_TEMP201 = 0;


									final boolean RX10_TEMP202 = RX10_TEMP199 != RX10_TEMP201;

									if(RX10_TEMP202)
										{

										String RX10_TEMP200 = "Bad place access for array energy";

										throw new RuntimeException(RX10_TEMP200);

										}

									final double RX10_TEMP203 = Program.getRefArrayValue1double(energy, RX10_TEMP195,X10_TEMP11);


									final double X10_TEMP165 = RX10_TEMP203;


									final doubleRefArray3 X10_TEMP148 = X10_TEMP0.ffg;


									final Point3 RX10_TEMP204 = new Point3(i, j1, _PoissonSolver_GREENS_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP204.hashCode());


									final Dist3 RX10_TEMP205 = X10_TEMP148.distValue;


									final Region3 RX10_TEMP206 = RX10_TEMP205.dReg;


									final int RX10_TEMP207 = Program.searchPointInRegion3(RX10_TEMP206, RX10_TEMP204,X10_TEMP11);


									final int RX10_TEMP208 = 0;


									final boolean RX10_TEMP209 = RX10_TEMP207 < RX10_TEMP208;

									if(RX10_TEMP209)
										{

										String RX10_TEMP210 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP210);

										}

									final int RX10_TEMP211 = Program.getPlaceFromDist3(RX10_TEMP205, RX10_TEMP207,X10_TEMP11);


									final int RX10_TEMP213 = 0;


									final boolean RX10_TEMP214 = RX10_TEMP211 != RX10_TEMP213;

									if(RX10_TEMP214)
										{

										String RX10_TEMP212 = "Bad place access for array X10_TEMP148";

										throw new RuntimeException(RX10_TEMP212);

										}

									final double RX10_TEMP215 = Program.getRefArrayValue3double(X10_TEMP148, RX10_TEMP207,X10_TEMP11);


									final double X10_TEMP162 = RX10_TEMP215;


									final Point2 RX10_TEMP216 = new Point2(i, j1,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP216.hashCode());


									final Dist2 RX10_TEMP217 = q.distValue;


									final Region2 RX10_TEMP218 = RX10_TEMP217.dReg;


									final int RX10_TEMP219 = Program.searchPointInRegion2(RX10_TEMP218, RX10_TEMP216,X10_TEMP11);


									final int RX10_TEMP220 = 0;


									final boolean RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220;

									if(RX10_TEMP221)
										{

										String RX10_TEMP222 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP222);

										}

									final int RX10_TEMP223 = Program.getPlaceFromDist2(RX10_TEMP217, RX10_TEMP219,X10_TEMP11);


									final int RX10_TEMP225 = 0;


									final boolean RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225;

									if(RX10_TEMP226)
										{

										String RX10_TEMP224 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP224);

										}

									final Complex RX10_TEMP227 = Program.getRefArrayValue2Complex(q, RX10_TEMP219,X10_TEMP11);


									final Complex X10_TEMP154 = RX10_TEMP227;


									final double X10_TEMP158 = Program.Complex_multConjg(X10_TEMP154,X10_TEMP11);


									final Point2 RX10_TEMP228 = new Point2(i, j2,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP228.hashCode());


									final Dist2 RX10_TEMP229 = q.distValue;


									final Region2 RX10_TEMP230 = RX10_TEMP229.dReg;


									final int RX10_TEMP231 = Program.searchPointInRegion2(RX10_TEMP230, RX10_TEMP228,X10_TEMP11);


									final int RX10_TEMP232 = 0;


									final boolean RX10_TEMP233 = RX10_TEMP231 < RX10_TEMP232;

									if(RX10_TEMP233)
										{

										String RX10_TEMP234 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP234);

										}

									final int RX10_TEMP235 = Program.getPlaceFromDist2(RX10_TEMP229, RX10_TEMP231,X10_TEMP11);


									final int RX10_TEMP237 = 0;


									final boolean RX10_TEMP238 = RX10_TEMP235 != RX10_TEMP237;

									if(RX10_TEMP238)
										{

										String RX10_TEMP236 = "Bad place access for array q";

										throw new RuntimeException(RX10_TEMP236);

										}

									final Complex RX10_TEMP239 = Program.getRefArrayValue2Complex(q, RX10_TEMP231,X10_TEMP11);


									final Complex X10_TEMP157 = RX10_TEMP239;


									final double X10_TEMP159 = Program.Complex_multConjg(X10_TEMP157,X10_TEMP11);


									final double X10_TEMP161 = X10_TEMP158 + X10_TEMP159;


									final double X10_TEMP164 = X10_TEMP162 * X10_TEMP161;


									final double X10_TEMP168 = X10_TEMP165 + X10_TEMP164;


									final double X10_TEMP169 = X10_TEMP168;


									final Dist1 RX10_TEMP240 = energy.distValue;


									final Region1 RX10_TEMP241 = RX10_TEMP240.dReg;


									final int RX10_TEMP242 = Program.searchPointInRegion1(RX10_TEMP241, pl,X10_TEMP11);


									final int RX10_TEMP243 = 0;


									final boolean RX10_TEMP244 = RX10_TEMP242 < RX10_TEMP243;

									if(RX10_TEMP244)
										{

										String RX10_TEMP245 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP245);

										}

									final int RX10_TEMP246 = Program.getPlaceFromDist1(RX10_TEMP240, RX10_TEMP242,X10_TEMP11);


									final int RX10_TEMP248 = 0;


									final boolean RX10_TEMP249 = RX10_TEMP246 != RX10_TEMP248;

									if(RX10_TEMP249)
										{

										String RX10_TEMP247 = "Bad place access for array energy";

										throw new RuntimeException(RX10_TEMP247);

										}
									Program.setRefArrayValue1double(energy, RX10_TEMP242, X10_TEMP169,X10_TEMP11);
									}

								final int X10_TEMP170 = 0;


								final boolean X10_TEMP172 = true;


								final boolean X10_TEMP173 = X10_TEMP172;


								final doubleRefArray3 X10_TEMP174 = X10_TEMP0.ffg;


								final int X10_TEMP178 = 0;


								final int X10_TEMP179 = 0;


								final doubleValArray2 X10_TEMP181 = X10_TEMP0.ffg2;


								final int X10_TEMP184 = 0;


								final Point2 RX10_TEMP250 = new Point2(X10_TEMP184, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP250.hashCode());


								final Region2 RX10_TEMP251 = X10_TEMP181.regionValue;


								final int RX10_TEMP252 = Program.searchPointInRegion2(RX10_TEMP251, RX10_TEMP250,X10_TEMP11);


								final int RX10_TEMP253 = 0;


								final boolean RX10_TEMP254 = RX10_TEMP252 < RX10_TEMP253;

								if(RX10_TEMP254)
									{

									String RX10_TEMP255 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP255);

									}

								final double[] RX10_TEMP256 = (double[])(X10_TEMP181.contents);


								double X10_TEMP186 = RX10_TEMP256[RX10_TEMP252];

								if(X10_TEMP173)
									{

									final Point3 RX10_TEMP257 = new Point3(X10_TEMP178, X10_TEMP179, _PoissonSolver_ELECX_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP257.hashCode());


									final Dist3 RX10_TEMP258 = X10_TEMP174.distValue;


									final Region3 RX10_TEMP259 = RX10_TEMP258.dReg;


									final int RX10_TEMP260 = Program.searchPointInRegion3(RX10_TEMP259, RX10_TEMP257,X10_TEMP11);


									final int RX10_TEMP261 = 0;


									final boolean RX10_TEMP262 = RX10_TEMP260 < RX10_TEMP261;

									if(RX10_TEMP262)
										{

										String RX10_TEMP263 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP263);

										}

									final int RX10_TEMP264 = Program.getPlaceFromDist3(RX10_TEMP258, RX10_TEMP260,X10_TEMP11);


									final int RX10_TEMP266 = 0;


									final boolean RX10_TEMP267 = RX10_TEMP264 != RX10_TEMP266;

									if(RX10_TEMP267)
										{

										String RX10_TEMP265 = "Bad place access for array X10_TEMP174";

										throw new RuntimeException(RX10_TEMP265);

										}

									final double RX10_TEMP268 = Program.getRefArrayValue3double(X10_TEMP174, RX10_TEMP260,X10_TEMP11);


									X10_TEMP186 = RX10_TEMP268;

									}

								final double X10_TEMP187 = X10_TEMP186;


								final double X10_TEMP188 = X10_TEMP187;


								double tmp0 = X10_TEMP188;


								double tmp1 = tmp3 * tmp0;


								final doubleRefArray3 X10_TEMP192 = X10_TEMP0.ffg;


								final int X10_TEMP196 = 0;


								final Point3 RX10_TEMP269 = new Point3(i, X10_TEMP196, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP269.hashCode());


								final Dist3 RX10_TEMP270 = X10_TEMP192.distValue;


								final Region3 RX10_TEMP271 = RX10_TEMP270.dReg;


								final int RX10_TEMP272 = Program.searchPointInRegion3(RX10_TEMP271, RX10_TEMP269,X10_TEMP11);


								final int RX10_TEMP273 = 0;


								final boolean RX10_TEMP274 = RX10_TEMP272 < RX10_TEMP273;

								if(RX10_TEMP274)
									{

									String RX10_TEMP275 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP275);

									}

								final int RX10_TEMP276 = Program.getPlaceFromDist3(RX10_TEMP270, RX10_TEMP272,X10_TEMP11);


								final int RX10_TEMP278 = 0;


								final boolean RX10_TEMP279 = RX10_TEMP276 != RX10_TEMP278;

								if(RX10_TEMP279)
									{

									String RX10_TEMP277 = "Bad place access for array X10_TEMP192";

									throw new RuntimeException(RX10_TEMP277);

									}

								final double RX10_TEMP280 = Program.getRefArrayValue3double(X10_TEMP192, RX10_TEMP272,X10_TEMP11);


								double X10_TEMP198 = RX10_TEMP280;


								final Complex x0 = new Complex(tmp1, X10_TEMP198,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(x0.hashCode());


								final int X10_TEMP202 = 0;


								final int X10_TEMP205 = 0;


								final Point2 RX10_TEMP281 = new Point2(i, X10_TEMP205,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP281.hashCode());


								final Dist2 RX10_TEMP282 = q.distValue;


								final Region2 RX10_TEMP283 = RX10_TEMP282.dReg;


								final int RX10_TEMP284 = Program.searchPointInRegion2(RX10_TEMP283, RX10_TEMP281,X10_TEMP11);


								final int RX10_TEMP285 = 0;


								final boolean RX10_TEMP286 = RX10_TEMP284 < RX10_TEMP285;

								if(RX10_TEMP286)
									{

									String RX10_TEMP287 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP287);

									}

								final int RX10_TEMP288 = Program.getPlaceFromDist2(RX10_TEMP282, RX10_TEMP284,X10_TEMP11);


								final int RX10_TEMP290 = 0;


								final boolean RX10_TEMP291 = RX10_TEMP288 != RX10_TEMP290;

								if(RX10_TEMP291)
									{

									String RX10_TEMP289 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP289);

									}

								final Complex RX10_TEMP292 = Program.getRefArrayValue2Complex(q, RX10_TEMP284,X10_TEMP11);


								final Complex X10_TEMP207 = RX10_TEMP292;


								final Complex X10_TEMP210 = Program.Complex_mult(x0, X10_TEMP207,X10_TEMP11);


								final Complex X10_TEMP211 = X10_TEMP210;


								final Point2 RX10_TEMP293 = new Point2(i, X10_TEMP202,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP293.hashCode());


								final Dist2 RX10_TEMP294 = forceX.distValue;


								final Region2 RX10_TEMP295 = RX10_TEMP294.dReg;


								final int RX10_TEMP296 = Program.searchPointInRegion2(RX10_TEMP295, RX10_TEMP293,X10_TEMP11);


								final int RX10_TEMP297 = 0;


								final boolean RX10_TEMP298 = RX10_TEMP296 < RX10_TEMP297;

								if(RX10_TEMP298)
									{

									String RX10_TEMP299 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP299);

									}

								final int RX10_TEMP300 = Program.getPlaceFromDist2(RX10_TEMP294, RX10_TEMP296,X10_TEMP11);


								final int RX10_TEMP302 = 0;


								final boolean RX10_TEMP303 = RX10_TEMP300 != RX10_TEMP302;

								if(RX10_TEMP303)
									{

									String RX10_TEMP301 = "Bad place access for array forceX";

									throw new RuntimeException(RX10_TEMP301);

									}
								Program.setRefArrayValue2Complex(forceX, RX10_TEMP296, X10_TEMP211,X10_TEMP11);

								final int X10_TEMP214 = 0;


								final int X10_TEMP217 = 0;


								final Point2 RX10_TEMP304 = new Point2(i, X10_TEMP217,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP304.hashCode());


								final Dist2 RX10_TEMP305 = q.distValue;


								final Region2 RX10_TEMP306 = RX10_TEMP305.dReg;


								final int RX10_TEMP307 = Program.searchPointInRegion2(RX10_TEMP306, RX10_TEMP304,X10_TEMP11);


								final int RX10_TEMP308 = 0;


								final boolean RX10_TEMP309 = RX10_TEMP307 < RX10_TEMP308;

								if(RX10_TEMP309)
									{

									String RX10_TEMP310 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP310);

									}

								final int RX10_TEMP311 = Program.getPlaceFromDist2(RX10_TEMP305, RX10_TEMP307,X10_TEMP11);


								final int RX10_TEMP313 = 0;


								final boolean RX10_TEMP314 = RX10_TEMP311 != RX10_TEMP313;

								if(RX10_TEMP314)
									{

									String RX10_TEMP312 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP312);

									}

								final Complex RX10_TEMP315 = Program.getRefArrayValue2Complex(q, RX10_TEMP307,X10_TEMP11);


								final Complex X10_TEMP218 = RX10_TEMP315;


								final doubleRefArray3 X10_TEMP219 = X10_TEMP0.ffg;


								final int X10_TEMP223 = 0;


								final Point3 RX10_TEMP316 = new Point3(i, X10_TEMP223, _PoissonSolver_ELECY_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP316.hashCode());


								final Dist3 RX10_TEMP317 = X10_TEMP219.distValue;


								final Region3 RX10_TEMP318 = RX10_TEMP317.dReg;


								final int RX10_TEMP319 = Program.searchPointInRegion3(RX10_TEMP318, RX10_TEMP316,X10_TEMP11);


								final int RX10_TEMP320 = 0;


								final boolean RX10_TEMP321 = RX10_TEMP319 < RX10_TEMP320;

								if(RX10_TEMP321)
									{

									String RX10_TEMP322 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP322);

									}

								final int RX10_TEMP323 = Program.getPlaceFromDist3(RX10_TEMP317, RX10_TEMP319,X10_TEMP11);


								final int RX10_TEMP325 = 0;


								final boolean RX10_TEMP326 = RX10_TEMP323 != RX10_TEMP325;

								if(RX10_TEMP326)
									{

									String RX10_TEMP324 = "Bad place access for array X10_TEMP219";

									throw new RuntimeException(RX10_TEMP324);

									}

								final double RX10_TEMP327 = Program.getRefArrayValue3double(X10_TEMP219, RX10_TEMP319,X10_TEMP11);


								final double X10_TEMP225 = RX10_TEMP327;


								final Complex X10_TEMP228 = Program.Complex_multS(X10_TEMP218, X10_TEMP225,X10_TEMP11);


								final Complex X10_TEMP229 = X10_TEMP228;


								final Point2 RX10_TEMP328 = new Point2(i, X10_TEMP214,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP328.hashCode());


								final Dist2 RX10_TEMP329 = forceY.distValue;


								final Region2 RX10_TEMP330 = RX10_TEMP329.dReg;


								final int RX10_TEMP331 = Program.searchPointInRegion2(RX10_TEMP330, RX10_TEMP328,X10_TEMP11);


								final int RX10_TEMP332 = 0;


								final boolean RX10_TEMP333 = RX10_TEMP331 < RX10_TEMP332;

								if(RX10_TEMP333)
									{

									String RX10_TEMP334 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP334);

									}

								final int RX10_TEMP335 = Program.getPlaceFromDist2(RX10_TEMP329, RX10_TEMP331,X10_TEMP11);


								final int RX10_TEMP337 = 0;


								final boolean RX10_TEMP338 = RX10_TEMP335 != RX10_TEMP337;

								if(RX10_TEMP338)
									{

									String RX10_TEMP336 = "Bad place access for array forceY";

									throw new RuntimeException(RX10_TEMP336);

									}
								Program.setRefArrayValue2Complex(forceY, RX10_TEMP331, X10_TEMP229,X10_TEMP11);

								final Dist1 RX10_TEMP339 = energy.distValue;


								final Region1 RX10_TEMP340 = RX10_TEMP339.dReg;


								final int RX10_TEMP341 = Program.searchPointInRegion1(RX10_TEMP340, pl,X10_TEMP11);


								final int RX10_TEMP342 = 0;


								final boolean RX10_TEMP343 = RX10_TEMP341 < RX10_TEMP342;

								if(RX10_TEMP343)
									{

									String RX10_TEMP344 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP344);

									}

								final int RX10_TEMP345 = Program.getPlaceFromDist1(RX10_TEMP339, RX10_TEMP341,X10_TEMP11);


								final int RX10_TEMP347 = 0;


								final boolean RX10_TEMP348 = RX10_TEMP345 != RX10_TEMP347;

								if(RX10_TEMP348)
									{

									String RX10_TEMP346 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP346);

									}

								final double RX10_TEMP349 = Program.getRefArrayValue1double(energy, RX10_TEMP341,X10_TEMP11);


								final double X10_TEMP245 = RX10_TEMP349;


								final doubleRefArray3 X10_TEMP232 = X10_TEMP0.ffg;


								final int X10_TEMP236 = 0;


								final Point3 RX10_TEMP350 = new Point3(i, X10_TEMP236, _PoissonSolver_GREENS_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP350.hashCode());


								final Dist3 RX10_TEMP351 = X10_TEMP232.distValue;


								final Region3 RX10_TEMP352 = RX10_TEMP351.dReg;


								final int RX10_TEMP353 = Program.searchPointInRegion3(RX10_TEMP352, RX10_TEMP350,X10_TEMP11);


								final int RX10_TEMP354 = 0;


								final boolean RX10_TEMP355 = RX10_TEMP353 < RX10_TEMP354;

								if(RX10_TEMP355)
									{

									String RX10_TEMP356 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP356);

									}

								final int RX10_TEMP357 = Program.getPlaceFromDist3(RX10_TEMP351, RX10_TEMP353,X10_TEMP11);


								final int RX10_TEMP359 = 0;


								final boolean RX10_TEMP360 = RX10_TEMP357 != RX10_TEMP359;

								if(RX10_TEMP360)
									{

									String RX10_TEMP358 = "Bad place access for array X10_TEMP232";

									throw new RuntimeException(RX10_TEMP358);

									}

								final double RX10_TEMP361 = Program.getRefArrayValue3double(X10_TEMP232, RX10_TEMP353,X10_TEMP11);


								final double X10_TEMP241 = RX10_TEMP361;


								final int X10_TEMP239 = 0;


								final Point2 RX10_TEMP362 = new Point2(i, X10_TEMP239,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP362.hashCode());


								final Dist2 RX10_TEMP363 = q.distValue;


								final Region2 RX10_TEMP364 = RX10_TEMP363.dReg;


								final int RX10_TEMP365 = Program.searchPointInRegion2(RX10_TEMP364, RX10_TEMP362,X10_TEMP11);


								final int RX10_TEMP366 = 0;


								final boolean RX10_TEMP367 = RX10_TEMP365 < RX10_TEMP366;

								if(RX10_TEMP367)
									{

									String RX10_TEMP368 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP368);

									}

								final int RX10_TEMP369 = Program.getPlaceFromDist2(RX10_TEMP363, RX10_TEMP365,X10_TEMP11);


								final int RX10_TEMP371 = 0;


								final boolean RX10_TEMP372 = RX10_TEMP369 != RX10_TEMP371;

								if(RX10_TEMP372)
									{

									String RX10_TEMP370 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP370);

									}

								final Complex RX10_TEMP373 = Program.getRefArrayValue2Complex(q, RX10_TEMP365,X10_TEMP11);


								final Complex X10_TEMP240 = RX10_TEMP373;


								final double X10_TEMP242 = Program.Complex_multConjg(X10_TEMP240,X10_TEMP11);


								final double X10_TEMP244 = X10_TEMP241 * X10_TEMP242;


								final double X10_TEMP248 = X10_TEMP245 + X10_TEMP244;


								final double X10_TEMP249 = X10_TEMP248;


								final Dist1 RX10_TEMP374 = energy.distValue;


								final Region1 RX10_TEMP375 = RX10_TEMP374.dReg;


								final int RX10_TEMP376 = Program.searchPointInRegion1(RX10_TEMP375, pl,X10_TEMP11);


								final int RX10_TEMP377 = 0;


								final boolean RX10_TEMP378 = RX10_TEMP376 < RX10_TEMP377;

								if(RX10_TEMP378)
									{

									String RX10_TEMP379 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP379);

									}

								final int RX10_TEMP380 = Program.getPlaceFromDist1(RX10_TEMP374, RX10_TEMP376,X10_TEMP11);


								final int RX10_TEMP382 = 0;


								final boolean RX10_TEMP383 = RX10_TEMP380 != RX10_TEMP382;

								if(RX10_TEMP383)
									{

									String RX10_TEMP381 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP381);

									}
								Program.setRefArrayValue1double(energy, RX10_TEMP376, X10_TEMP249,X10_TEMP11);

								final int X10_TEMP250 = 0;


								final boolean X10_TEMP252 = true;


								final boolean X10_TEMP253 = X10_TEMP252;


								final doubleRefArray3 X10_TEMP254 = X10_TEMP0.ffg;


								final int X10_TEMP258 = 0;


								final int X10_TEMP259 = X10_TEMP0.y;


								final doubleValArray2 X10_TEMP261 = X10_TEMP0.ffg2;


								final int X10_TEMP264 = X10_TEMP0.y;


								final Point2 RX10_TEMP384 = new Point2(X10_TEMP264, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP384.hashCode());


								final Region2 RX10_TEMP385 = X10_TEMP261.regionValue;


								final int RX10_TEMP386 = Program.searchPointInRegion2(RX10_TEMP385, RX10_TEMP384,X10_TEMP11);


								final int RX10_TEMP387 = 0;


								final boolean RX10_TEMP388 = RX10_TEMP386 < RX10_TEMP387;

								if(RX10_TEMP388)
									{

									String RX10_TEMP389 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP389);

									}

								final double[] RX10_TEMP390 = (double[])(X10_TEMP261.contents);


								double X10_TEMP266 = RX10_TEMP390[RX10_TEMP386];

								if(X10_TEMP253)
									{

									final Point3 RX10_TEMP391 = new Point3(X10_TEMP258, X10_TEMP259, _PoissonSolver_ELECX_IDX,X10_TEMP11);
									
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP391.hashCode());


									final Dist3 RX10_TEMP392 = X10_TEMP254.distValue;


									final Region3 RX10_TEMP393 = RX10_TEMP392.dReg;


									final int RX10_TEMP394 = Program.searchPointInRegion3(RX10_TEMP393, RX10_TEMP391,X10_TEMP11);


									final int RX10_TEMP395 = 0;


									final boolean RX10_TEMP396 = RX10_TEMP394 < RX10_TEMP395;

									if(RX10_TEMP396)
										{

										String RX10_TEMP397 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP397);

										}

									final int RX10_TEMP398 = Program.getPlaceFromDist3(RX10_TEMP392, RX10_TEMP394,X10_TEMP11);


									final int RX10_TEMP400 = 0;


									final boolean RX10_TEMP401 = RX10_TEMP398 != RX10_TEMP400;

									if(RX10_TEMP401)
										{

										String RX10_TEMP399 = "Bad place access for array X10_TEMP254";

										throw new RuntimeException(RX10_TEMP399);

										}

									final double RX10_TEMP402 = Program.getRefArrayValue3double(X10_TEMP254, RX10_TEMP394,X10_TEMP11);


									X10_TEMP266 = RX10_TEMP402;

									}

								final double X10_TEMP267 = X10_TEMP266;


								final double X10_TEMP268 = X10_TEMP267;


								tmp0 = X10_TEMP268;


								final double X10_TEMP271 = tmp3 * tmp0;


								tmp1 = X10_TEMP271;


								final doubleRefArray3 X10_TEMP273 = X10_TEMP0.ffg;


								final int X10_TEMP277 = X10_TEMP0.y;


								final Point3 RX10_TEMP403 = new Point3(i, X10_TEMP277, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP403.hashCode());


								final Dist3 RX10_TEMP404 = X10_TEMP273.distValue;


								final Region3 RX10_TEMP405 = RX10_TEMP404.dReg;


								final int RX10_TEMP406 = Program.searchPointInRegion3(RX10_TEMP405, RX10_TEMP403,X10_TEMP11);


								final int RX10_TEMP407 = 0;


								final boolean RX10_TEMP408 = RX10_TEMP406 < RX10_TEMP407;

								if(RX10_TEMP408)
									{

									String RX10_TEMP409 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP409);

									}

								final int RX10_TEMP410 = Program.getPlaceFromDist3(RX10_TEMP404, RX10_TEMP406,X10_TEMP11);


								final int RX10_TEMP412 = 0;


								final boolean RX10_TEMP413 = RX10_TEMP410 != RX10_TEMP412;

								if(RX10_TEMP413)
									{

									String RX10_TEMP411 = "Bad place access for array X10_TEMP273";

									throw new RuntimeException(RX10_TEMP411);

									}

								final double RX10_TEMP414 = Program.getRefArrayValue3double(X10_TEMP273, RX10_TEMP406,X10_TEMP11);


								double X10_TEMP279 = RX10_TEMP414;


								final Complex xNY = new Complex(tmp1, X10_TEMP279,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(xNY.hashCode());


								final int X10_TEMP283 = X10_TEMP0.y;


								final int X10_TEMP286 = X10_TEMP0.y;


								final Point2 RX10_TEMP415 = new Point2(i, X10_TEMP286,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP415.hashCode());


								final Dist2 RX10_TEMP416 = q.distValue;


								final Region2 RX10_TEMP417 = RX10_TEMP416.dReg;


								final int RX10_TEMP418 = Program.searchPointInRegion2(RX10_TEMP417, RX10_TEMP415,X10_TEMP11);


								final int RX10_TEMP419 = 0;


								final boolean RX10_TEMP420 = RX10_TEMP418 < RX10_TEMP419;

								if(RX10_TEMP420)
									{

									String RX10_TEMP421 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP421);

									}

								final int RX10_TEMP422 = Program.getPlaceFromDist2(RX10_TEMP416, RX10_TEMP418,X10_TEMP11);


								final int RX10_TEMP424 = 0;


								final boolean RX10_TEMP425 = RX10_TEMP422 != RX10_TEMP424;

								if(RX10_TEMP425)
									{

									String RX10_TEMP423 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP423);

									}

								final Complex RX10_TEMP426 = Program.getRefArrayValue2Complex(q, RX10_TEMP418,X10_TEMP11);


								final Complex X10_TEMP288 = RX10_TEMP426;


								final Complex X10_TEMP291 = Program.Complex_mult(xNY, X10_TEMP288,X10_TEMP11);


								final Complex X10_TEMP292 = X10_TEMP291;


								final Point2 RX10_TEMP427 = new Point2(i, X10_TEMP283,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP427.hashCode());


								final Dist2 RX10_TEMP428 = forceX.distValue;


								final Region2 RX10_TEMP429 = RX10_TEMP428.dReg;


								final int RX10_TEMP430 = Program.searchPointInRegion2(RX10_TEMP429, RX10_TEMP427,X10_TEMP11);


								final int RX10_TEMP431 = 0;


								final boolean RX10_TEMP432 = RX10_TEMP430 < RX10_TEMP431;

								if(RX10_TEMP432)
									{

									String RX10_TEMP433 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP433);

									}

								final int RX10_TEMP434 = Program.getPlaceFromDist2(RX10_TEMP428, RX10_TEMP430,X10_TEMP11);


								final int RX10_TEMP436 = 0;


								final boolean RX10_TEMP437 = RX10_TEMP434 != RX10_TEMP436;

								if(RX10_TEMP437)
									{

									String RX10_TEMP435 = "Bad place access for array forceX";

									throw new RuntimeException(RX10_TEMP435);

									}
								Program.setRefArrayValue2Complex(forceX, RX10_TEMP430, X10_TEMP292,X10_TEMP11);

								final int X10_TEMP295 = X10_TEMP0.y;


								final int X10_TEMP298 = X10_TEMP0.y;


								final Point2 RX10_TEMP438 = new Point2(i, X10_TEMP298,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP438.hashCode());


								final Dist2 RX10_TEMP439 = q.distValue;


								final Region2 RX10_TEMP440 = RX10_TEMP439.dReg;


								final int RX10_TEMP441 = Program.searchPointInRegion2(RX10_TEMP440, RX10_TEMP438,X10_TEMP11);


								final int RX10_TEMP442 = 0;


								final boolean RX10_TEMP443 = RX10_TEMP441 < RX10_TEMP442;

								if(RX10_TEMP443)
									{

									String RX10_TEMP444 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP444);

									}

								final int RX10_TEMP445 = Program.getPlaceFromDist2(RX10_TEMP439, RX10_TEMP441,X10_TEMP11);


								final int RX10_TEMP447 = 0;


								final boolean RX10_TEMP448 = RX10_TEMP445 != RX10_TEMP447;

								if(RX10_TEMP448)
									{

									String RX10_TEMP446 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP446);

									}

								final Complex RX10_TEMP449 = Program.getRefArrayValue2Complex(q, RX10_TEMP441,X10_TEMP11);


								final Complex X10_TEMP299 = RX10_TEMP449;


								final doubleRefArray3 X10_TEMP300 = X10_TEMP0.ffg;


								final int X10_TEMP304 = X10_TEMP0.y;


								final Point3 RX10_TEMP450 = new Point3(i, X10_TEMP304, _PoissonSolver_ELECY_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP450.hashCode());


								final Dist3 RX10_TEMP451 = X10_TEMP300.distValue;


								final Region3 RX10_TEMP452 = RX10_TEMP451.dReg;


								final int RX10_TEMP453 = Program.searchPointInRegion3(RX10_TEMP452, RX10_TEMP450,X10_TEMP11);


								final int RX10_TEMP454 = 0;


								final boolean RX10_TEMP455 = RX10_TEMP453 < RX10_TEMP454;

								if(RX10_TEMP455)
									{

									String RX10_TEMP456 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP456);

									}

								final int RX10_TEMP457 = Program.getPlaceFromDist3(RX10_TEMP451, RX10_TEMP453,X10_TEMP11);


								final int RX10_TEMP459 = 0;


								final boolean RX10_TEMP460 = RX10_TEMP457 != RX10_TEMP459;

								if(RX10_TEMP460)
									{

									String RX10_TEMP458 = "Bad place access for array X10_TEMP300";

									throw new RuntimeException(RX10_TEMP458);

									}

								final double RX10_TEMP461 = Program.getRefArrayValue3double(X10_TEMP300, RX10_TEMP453,X10_TEMP11);


								final double X10_TEMP306 = RX10_TEMP461;


								final Complex X10_TEMP309 = Program.Complex_multS(X10_TEMP299, X10_TEMP306,X10_TEMP11);


								final Complex X10_TEMP310 = X10_TEMP309;


								final Point2 RX10_TEMP462 = new Point2(i, X10_TEMP295,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP462.hashCode());


								final Dist2 RX10_TEMP463 = forceY.distValue;


								final Region2 RX10_TEMP464 = RX10_TEMP463.dReg;


								final int RX10_TEMP465 = Program.searchPointInRegion2(RX10_TEMP464, RX10_TEMP462,X10_TEMP11);


								final int RX10_TEMP466 = 0;


								final boolean RX10_TEMP467 = RX10_TEMP465 < RX10_TEMP466;

								if(RX10_TEMP467)
									{

									String RX10_TEMP468 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP468);

									}

								final int RX10_TEMP469 = Program.getPlaceFromDist2(RX10_TEMP463, RX10_TEMP465,X10_TEMP11);


								final int RX10_TEMP471 = 0;


								final boolean RX10_TEMP472 = RX10_TEMP469 != RX10_TEMP471;

								if(RX10_TEMP472)
									{

									String RX10_TEMP470 = "Bad place access for array forceY";

									throw new RuntimeException(RX10_TEMP470);

									}
								Program.setRefArrayValue2Complex(forceY, RX10_TEMP465, X10_TEMP310,X10_TEMP11);

								final Dist1 RX10_TEMP473 = energy.distValue;


								final Region1 RX10_TEMP474 = RX10_TEMP473.dReg;


								final int RX10_TEMP475 = Program.searchPointInRegion1(RX10_TEMP474, pl,X10_TEMP11);


								final int RX10_TEMP476 = 0;


								final boolean RX10_TEMP477 = RX10_TEMP475 < RX10_TEMP476;

								if(RX10_TEMP477)
									{

									String RX10_TEMP478 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP478);

									}

								final int RX10_TEMP479 = Program.getPlaceFromDist1(RX10_TEMP473, RX10_TEMP475,X10_TEMP11);


								final int RX10_TEMP481 = 0;


								final boolean RX10_TEMP482 = RX10_TEMP479 != RX10_TEMP481;

								if(RX10_TEMP482)
									{

									String RX10_TEMP480 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP480);

									}

								final double RX10_TEMP483 = Program.getRefArrayValue1double(energy, RX10_TEMP475,X10_TEMP11);


								final double X10_TEMP326 = RX10_TEMP483;


								final doubleRefArray3 X10_TEMP313 = X10_TEMP0.ffg;


								final int X10_TEMP317 = X10_TEMP0.y;


								final Point3 RX10_TEMP484 = new Point3(i, X10_TEMP317, _PoissonSolver_GREENS_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP484.hashCode());


								final Dist3 RX10_TEMP485 = X10_TEMP313.distValue;


								final Region3 RX10_TEMP486 = RX10_TEMP485.dReg;


								final int RX10_TEMP487 = Program.searchPointInRegion3(RX10_TEMP486, RX10_TEMP484,X10_TEMP11);


								final int RX10_TEMP488 = 0;


								final boolean RX10_TEMP489 = RX10_TEMP487 < RX10_TEMP488;

								if(RX10_TEMP489)
									{

									String RX10_TEMP490 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP490);

									}

								final int RX10_TEMP491 = Program.getPlaceFromDist3(RX10_TEMP485, RX10_TEMP487,X10_TEMP11);


								final int RX10_TEMP493 = 0;


								final boolean RX10_TEMP494 = RX10_TEMP491 != RX10_TEMP493;

								if(RX10_TEMP494)
									{

									String RX10_TEMP492 = "Bad place access for array X10_TEMP313";

									throw new RuntimeException(RX10_TEMP492);

									}

								final double RX10_TEMP495 = Program.getRefArrayValue3double(X10_TEMP313, RX10_TEMP487,X10_TEMP11);


								final double X10_TEMP322 = RX10_TEMP495;


								final int X10_TEMP320 = X10_TEMP0.y;


								final Point2 RX10_TEMP496 = new Point2(i, X10_TEMP320,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP496.hashCode());


								final Dist2 RX10_TEMP497 = q.distValue;


								final Region2 RX10_TEMP498 = RX10_TEMP497.dReg;


								final int RX10_TEMP499 = Program.searchPointInRegion2(RX10_TEMP498, RX10_TEMP496,X10_TEMP11);


								final int RX10_TEMP500 = 0;


								final boolean RX10_TEMP501 = RX10_TEMP499 < RX10_TEMP500;

								if(RX10_TEMP501)
									{

									String RX10_TEMP502 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP502);

									}

								final int RX10_TEMP503 = Program.getPlaceFromDist2(RX10_TEMP497, RX10_TEMP499,X10_TEMP11);


								final int RX10_TEMP505 = 0;


								final boolean RX10_TEMP506 = RX10_TEMP503 != RX10_TEMP505;

								if(RX10_TEMP506)
									{

									String RX10_TEMP504 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP504);

									}

								final Complex RX10_TEMP507 = Program.getRefArrayValue2Complex(q, RX10_TEMP499,X10_TEMP11);


								final Complex X10_TEMP321 = RX10_TEMP507;


								final double X10_TEMP323 = Program.Complex_multConjg(X10_TEMP321,X10_TEMP11);


								final double X10_TEMP325 = X10_TEMP322 * X10_TEMP323;


								final double X10_TEMP329 = X10_TEMP326 + X10_TEMP325;


								final double X10_TEMP330 = X10_TEMP329;


								final Dist1 RX10_TEMP508 = energy.distValue;


								final Region1 RX10_TEMP509 = RX10_TEMP508.dReg;


								final int RX10_TEMP510 = Program.searchPointInRegion1(RX10_TEMP509, pl,X10_TEMP11);


								final int RX10_TEMP511 = 0;


								final boolean RX10_TEMP512 = RX10_TEMP510 < RX10_TEMP511;

								if(RX10_TEMP512)
									{

									String RX10_TEMP513 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP513);

									}

								final int RX10_TEMP514 = Program.getPlaceFromDist1(RX10_TEMP508, RX10_TEMP510,X10_TEMP11);


								final int RX10_TEMP516 = 0;


								final boolean RX10_TEMP517 = RX10_TEMP514 != RX10_TEMP516;

								if(RX10_TEMP517)
									{

									String RX10_TEMP515 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP515);

									}
								Program.setRefArrayValue1double(energy, RX10_TEMP510, X10_TEMP330,X10_TEMP11);
								}
							}

						final int X10_TEMP331 = 0;


						final boolean X10_TEMP333 = true;

						if(X10_TEMP333)
							{

							final doubleRefArray3 X10_TEMP334 = X10_TEMP0.ffg;


							final int X10_TEMP338 = 0;


							final int X10_TEMP339 = 0;


							final Point3 RX10_TEMP518 = new Point3(X10_TEMP338, X10_TEMP339, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP518.hashCode());


							final Dist3 RX10_TEMP519 = X10_TEMP334.distValue;


							final Region3 RX10_TEMP520 = RX10_TEMP519.dReg;


							final int RX10_TEMP521 = Program.searchPointInRegion3(RX10_TEMP520, RX10_TEMP518,X10_TEMP11);


							final int RX10_TEMP522 = 0;


							final boolean RX10_TEMP523 = RX10_TEMP521 < RX10_TEMP522;

							if(RX10_TEMP523)
								{

								String RX10_TEMP524 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP524);

								}

							final int RX10_TEMP525 = Program.getPlaceFromDist3(RX10_TEMP519, RX10_TEMP521,X10_TEMP11);


							final int RX10_TEMP527 = 0;


							final boolean RX10_TEMP528 = RX10_TEMP525 != RX10_TEMP527;

							if(RX10_TEMP528)
								{

								String RX10_TEMP526 = "Bad place access for array X10_TEMP334";

								throw new RuntimeException(RX10_TEMP526);

								}

							final double RX10_TEMP529 = Program.getRefArrayValue3double(X10_TEMP334, RX10_TEMP521,X10_TEMP11);


							final double X10_TEMP341 = RX10_TEMP529;


							tmp3 = X10_TEMP341;


							final int X10_TEMP346 = 1;


							final int X10_TEMP343 = X10_TEMP0.y;


							final int X10_TEMP344 = 1;


							final int X10_TEMP347 = X10_TEMP343 - X10_TEMP344;


							final Region1 X10_TEMP349 = Program.createNewRegion1R(X10_TEMP346, X10_TEMP347,X10_TEMP11);


							final int RX10_TEMP534 = 1;


							int RX10_TEMP532 = X10_TEMP349.regSize;


							RX10_TEMP532 = RX10_TEMP532 - RX10_TEMP534;


							final int  RX10_TEMP533 = RX10_TEMP532+1;

							for(int RX10_TEMP530=0; RX10_TEMP530 < RX10_TEMP533; RX10_TEMP530++)
								{

								final int RX10_TEMP535 = RX10_TEMP530;


								final Point1 RX10_TEMP531 = Program.regionOrdinalPoint1(X10_TEMP349, RX10_TEMP535,X10_TEMP11);


								final int j = RX10_TEMP531.f0;


								final int X10_TEMP350 = 0;


								final double X10_TEMP352 = X10_TEMP350 - tmp3;


								tmp3 = X10_TEMP352;


								final doubleRefArray3 X10_TEMP354 = X10_TEMP0.ffg;


								final int X10_TEMP358 = 0;


								final Point3 RX10_TEMP536 = new Point3(X10_TEMP358, j, _PoissonSolver_ELECY_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP536.hashCode());


								final Dist3 RX10_TEMP537 = X10_TEMP354.distValue;


								final Region3 RX10_TEMP538 = RX10_TEMP537.dReg;


								final int RX10_TEMP539 = Program.searchPointInRegion3(RX10_TEMP538, RX10_TEMP536,X10_TEMP11);


								final int RX10_TEMP540 = 0;


								final boolean RX10_TEMP541 = RX10_TEMP539 < RX10_TEMP540;

								if(RX10_TEMP541)
									{

									String RX10_TEMP542 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP542);

									}

								final int RX10_TEMP543 = Program.getPlaceFromDist3(RX10_TEMP537, RX10_TEMP539,X10_TEMP11);


								final int RX10_TEMP545 = 0;


								final boolean RX10_TEMP546 = RX10_TEMP543 != RX10_TEMP545;

								if(RX10_TEMP546)
									{

									String RX10_TEMP544 = "Bad place access for array X10_TEMP354";

									throw new RuntimeException(RX10_TEMP544);

									}

								final double RX10_TEMP547 = Program.getRefArrayValue3double(X10_TEMP354, RX10_TEMP539,X10_TEMP11);


								double X10_TEMP360 = RX10_TEMP547;


								final Complex s = new Complex(tmp3, X10_TEMP360,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(s.hashCode());


								final int X10_TEMP364 = 0;


								final int X10_TEMP367 = 0;


								final Point2 RX10_TEMP548 = new Point2(X10_TEMP367, j,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP548.hashCode());


								final Dist2 RX10_TEMP549 = q.distValue;


								final Region2 RX10_TEMP550 = RX10_TEMP549.dReg;


								final int RX10_TEMP551 = Program.searchPointInRegion2(RX10_TEMP550, RX10_TEMP548,X10_TEMP11);


								final int RX10_TEMP552 = 0;


								final boolean RX10_TEMP553 = RX10_TEMP551 < RX10_TEMP552;

								if(RX10_TEMP553)
									{

									String RX10_TEMP554 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP554);

									}

								final int RX10_TEMP555 = Program.getPlaceFromDist2(RX10_TEMP549, RX10_TEMP551,X10_TEMP11);


								final int RX10_TEMP557 = 0;


								final boolean RX10_TEMP558 = RX10_TEMP555 != RX10_TEMP557;

								if(RX10_TEMP558)
									{

									String RX10_TEMP556 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP556);

									}

								final Complex RX10_TEMP559 = Program.getRefArrayValue2Complex(q, RX10_TEMP551,X10_TEMP11);


								final Complex X10_TEMP368 = RX10_TEMP559;


								final doubleRefArray3 X10_TEMP369 = X10_TEMP0.ffg;


								final int X10_TEMP373 = 0;


								final Point3 RX10_TEMP560 = new Point3(X10_TEMP373, j, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP560.hashCode());


								final Dist3 RX10_TEMP561 = X10_TEMP369.distValue;


								final Region3 RX10_TEMP562 = RX10_TEMP561.dReg;


								final int RX10_TEMP563 = Program.searchPointInRegion3(RX10_TEMP562, RX10_TEMP560,X10_TEMP11);


								final int RX10_TEMP564 = 0;


								final boolean RX10_TEMP565 = RX10_TEMP563 < RX10_TEMP564;

								if(RX10_TEMP565)
									{

									String RX10_TEMP566 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP566);

									}

								final int RX10_TEMP567 = Program.getPlaceFromDist3(RX10_TEMP561, RX10_TEMP563,X10_TEMP11);


								final int RX10_TEMP569 = 0;


								final boolean RX10_TEMP570 = RX10_TEMP567 != RX10_TEMP569;

								if(RX10_TEMP570)
									{

									String RX10_TEMP568 = "Bad place access for array X10_TEMP369";

									throw new RuntimeException(RX10_TEMP568);

									}

								final double RX10_TEMP571 = Program.getRefArrayValue3double(X10_TEMP369, RX10_TEMP563,X10_TEMP11);


								final double X10_TEMP375 = RX10_TEMP571;


								final Complex X10_TEMP378 = Program.Complex_multS(X10_TEMP368, X10_TEMP375,X10_TEMP11);


								final Complex X10_TEMP379 = X10_TEMP378;


								final Point2 RX10_TEMP572 = new Point2(X10_TEMP364, j,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP572.hashCode());


								final Dist2 RX10_TEMP573 = forceX.distValue;


								final Region2 RX10_TEMP574 = RX10_TEMP573.dReg;


								final int RX10_TEMP575 = Program.searchPointInRegion2(RX10_TEMP574, RX10_TEMP572,X10_TEMP11);


								final int RX10_TEMP576 = 0;


								final boolean RX10_TEMP577 = RX10_TEMP575 < RX10_TEMP576;

								if(RX10_TEMP577)
									{

									String RX10_TEMP578 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP578);

									}

								final int RX10_TEMP579 = Program.getPlaceFromDist2(RX10_TEMP573, RX10_TEMP575,X10_TEMP11);


								final int RX10_TEMP581 = 0;


								final boolean RX10_TEMP582 = RX10_TEMP579 != RX10_TEMP581;

								if(RX10_TEMP582)
									{

									String RX10_TEMP580 = "Bad place access for array forceX";

									throw new RuntimeException(RX10_TEMP580);

									}
								Program.setRefArrayValue2Complex(forceX, RX10_TEMP575, X10_TEMP379,X10_TEMP11);

								final int X10_TEMP382 = 0;


								final int X10_TEMP385 = 0;


								final Point2 RX10_TEMP583 = new Point2(X10_TEMP385, j,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP583.hashCode());


								final Dist2 RX10_TEMP584 = q.distValue;


								final Region2 RX10_TEMP585 = RX10_TEMP584.dReg;


								final int RX10_TEMP586 = Program.searchPointInRegion2(RX10_TEMP585, RX10_TEMP583,X10_TEMP11);


								final int RX10_TEMP587 = 0;


								final boolean RX10_TEMP588 = RX10_TEMP586 < RX10_TEMP587;

								if(RX10_TEMP588)
									{

									String RX10_TEMP589 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP589);

									}

								final int RX10_TEMP590 = Program.getPlaceFromDist2(RX10_TEMP584, RX10_TEMP586,X10_TEMP11);


								final int RX10_TEMP592 = 0;


								final boolean RX10_TEMP593 = RX10_TEMP590 != RX10_TEMP592;

								if(RX10_TEMP593)
									{

									String RX10_TEMP591 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP591);

									}

								final Complex RX10_TEMP594 = Program.getRefArrayValue2Complex(q, RX10_TEMP586,X10_TEMP11);


								final Complex X10_TEMP387 = RX10_TEMP594;


								final Complex X10_TEMP390 = Program.Complex_mult(s, X10_TEMP387,X10_TEMP11);


								final Complex X10_TEMP391 = X10_TEMP390;


								final Point2 RX10_TEMP595 = new Point2(X10_TEMP382, j,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP595.hashCode());


								final Dist2 RX10_TEMP596 = forceY.distValue;


								final Region2 RX10_TEMP597 = RX10_TEMP596.dReg;


								final int RX10_TEMP598 = Program.searchPointInRegion2(RX10_TEMP597, RX10_TEMP595,X10_TEMP11);


								final int RX10_TEMP599 = 0;


								final boolean RX10_TEMP600 = RX10_TEMP598 < RX10_TEMP599;

								if(RX10_TEMP600)
									{

									String RX10_TEMP601 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP601);

									}

								final int RX10_TEMP602 = Program.getPlaceFromDist2(RX10_TEMP596, RX10_TEMP598,X10_TEMP11);


								final int RX10_TEMP604 = 0;


								final boolean RX10_TEMP605 = RX10_TEMP602 != RX10_TEMP604;

								if(RX10_TEMP605)
									{

									String RX10_TEMP603 = "Bad place access for array forceY";

									throw new RuntimeException(RX10_TEMP603);

									}
								Program.setRefArrayValue2Complex(forceY, RX10_TEMP598, X10_TEMP391,X10_TEMP11);

								final Dist1 RX10_TEMP606 = energy.distValue;


								final Region1 RX10_TEMP607 = RX10_TEMP606.dReg;


								final int RX10_TEMP608 = Program.searchPointInRegion1(RX10_TEMP607, pl,X10_TEMP11);


								final int RX10_TEMP609 = 0;


								final boolean RX10_TEMP610 = RX10_TEMP608 < RX10_TEMP609;

								if(RX10_TEMP610)
									{

									String RX10_TEMP611 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP611);

									}

								final int RX10_TEMP612 = Program.getPlaceFromDist1(RX10_TEMP606, RX10_TEMP608,X10_TEMP11);


								final int RX10_TEMP614 = 0;


								final boolean RX10_TEMP615 = RX10_TEMP612 != RX10_TEMP614;

								if(RX10_TEMP615)
									{

									String RX10_TEMP613 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP613);

									}

								final double RX10_TEMP616 = Program.getRefArrayValue1double(energy, RX10_TEMP608,X10_TEMP11);


								final double X10_TEMP407 = RX10_TEMP616;


								final doubleRefArray3 X10_TEMP394 = X10_TEMP0.ffg;


								final int X10_TEMP398 = 0;


								final Point3 RX10_TEMP617 = new Point3(X10_TEMP398, j, _PoissonSolver_GREENS_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP617.hashCode());


								final Dist3 RX10_TEMP618 = X10_TEMP394.distValue;


								final Region3 RX10_TEMP619 = RX10_TEMP618.dReg;


								final int RX10_TEMP620 = Program.searchPointInRegion3(RX10_TEMP619, RX10_TEMP617,X10_TEMP11);


								final int RX10_TEMP621 = 0;


								final boolean RX10_TEMP622 = RX10_TEMP620 < RX10_TEMP621;

								if(RX10_TEMP622)
									{

									String RX10_TEMP623 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP623);

									}

								final int RX10_TEMP624 = Program.getPlaceFromDist3(RX10_TEMP618, RX10_TEMP620,X10_TEMP11);


								final int RX10_TEMP626 = 0;


								final boolean RX10_TEMP627 = RX10_TEMP624 != RX10_TEMP626;

								if(RX10_TEMP627)
									{

									String RX10_TEMP625 = "Bad place access for array X10_TEMP394";

									throw new RuntimeException(RX10_TEMP625);

									}

								final double RX10_TEMP628 = Program.getRefArrayValue3double(X10_TEMP394, RX10_TEMP620,X10_TEMP11);


								final double X10_TEMP403 = RX10_TEMP628;


								final int X10_TEMP401 = 0;


								final Point2 RX10_TEMP629 = new Point2(X10_TEMP401, j,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP629.hashCode());


								final Dist2 RX10_TEMP630 = q.distValue;


								final Region2 RX10_TEMP631 = RX10_TEMP630.dReg;


								final int RX10_TEMP632 = Program.searchPointInRegion2(RX10_TEMP631, RX10_TEMP629,X10_TEMP11);


								final int RX10_TEMP633 = 0;


								final boolean RX10_TEMP634 = RX10_TEMP632 < RX10_TEMP633;

								if(RX10_TEMP634)
									{

									String RX10_TEMP635 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP635);

									}

								final int RX10_TEMP636 = Program.getPlaceFromDist2(RX10_TEMP630, RX10_TEMP632,X10_TEMP11);


								final int RX10_TEMP638 = 0;


								final boolean RX10_TEMP639 = RX10_TEMP636 != RX10_TEMP638;

								if(RX10_TEMP639)
									{

									String RX10_TEMP637 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP637);

									}

								final Complex RX10_TEMP640 = Program.getRefArrayValue2Complex(q, RX10_TEMP632,X10_TEMP11);


								final Complex X10_TEMP402 = RX10_TEMP640;


								final double X10_TEMP404 = Program.Complex_multConjg(X10_TEMP402,X10_TEMP11);


								final double X10_TEMP406 = X10_TEMP403 * X10_TEMP404;


								final double X10_TEMP410 = X10_TEMP407 + X10_TEMP406;


								final double X10_TEMP411 = X10_TEMP410;


								final Dist1 RX10_TEMP641 = energy.distValue;


								final Region1 RX10_TEMP642 = RX10_TEMP641.dReg;


								final int RX10_TEMP643 = Program.searchPointInRegion1(RX10_TEMP642, pl,X10_TEMP11);


								final int RX10_TEMP644 = 0;


								final boolean RX10_TEMP645 = RX10_TEMP643 < RX10_TEMP644;

								if(RX10_TEMP645)
									{

									String RX10_TEMP646 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP646);

									}

								final int RX10_TEMP647 = Program.getPlaceFromDist1(RX10_TEMP641, RX10_TEMP643,X10_TEMP11);


								final int RX10_TEMP649 = 0;


								final boolean RX10_TEMP650 = RX10_TEMP647 != RX10_TEMP649;

								if(RX10_TEMP650)
									{

									String RX10_TEMP648 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP648);

									}
								Program.setRefArrayValue1double(energy, RX10_TEMP643, X10_TEMP411,X10_TEMP11);
								}

							final doubleValArray2 X10_TEMP412 = X10_TEMP0.ffg2;


							final int X10_TEMP415 = 0;


							final Point2 RX10_TEMP651 = new Point2(X10_TEMP415, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP651.hashCode());


							final Region2 RX10_TEMP652 = X10_TEMP412.regionValue;


							final int RX10_TEMP653 = Program.searchPointInRegion2(RX10_TEMP652, RX10_TEMP651,X10_TEMP11);


							final int RX10_TEMP654 = 0;


							final boolean RX10_TEMP655 = RX10_TEMP653 < RX10_TEMP654;

							if(RX10_TEMP655)
								{

								String RX10_TEMP656 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP656);

								}

							final double[] RX10_TEMP657 = (double[])(X10_TEMP412.contents);


							final double X10_TEMP417 = RX10_TEMP657[RX10_TEMP653];


							tmp3 = X10_TEMP417;


							final int X10_TEMP422 = 1;


							final int X10_TEMP419 = X10_TEMP0.y;


							final int X10_TEMP420 = 1;


							final int X10_TEMP423 = X10_TEMP419 - X10_TEMP420;


							final Region1 X10_TEMP425 = Program.createNewRegion1R(X10_TEMP422, X10_TEMP423,X10_TEMP11);


							final int RX10_TEMP662 = 1;


							int RX10_TEMP660 = X10_TEMP425.regSize;


							RX10_TEMP660 = RX10_TEMP660 - RX10_TEMP662;


							final int  RX10_TEMP661 = RX10_TEMP660+1;

							for(int RX10_TEMP658=0; RX10_TEMP658 < RX10_TEMP661; RX10_TEMP658++)
								{

								final int RX10_TEMP663 = RX10_TEMP658;


								final Point1 RX10_TEMP659 = Program.regionOrdinalPoint1(X10_TEMP425, RX10_TEMP663,X10_TEMP11);


								final int j1 = RX10_TEMP659.f0;


								final int X10_TEMP426 = 0;


								final double X10_TEMP428 = X10_TEMP426 - tmp3;


								tmp3 = X10_TEMP428;


								final int X10_TEMP429 = 2;


								final int X10_TEMP430 = X10_TEMP0.y;


								final int X10_TEMP431 = X10_TEMP429 * X10_TEMP430;


								final int j2 = X10_TEMP431 - j1;


								final doubleValArray2 X10_TEMP434 = X10_TEMP0.ffg2;


								final Point2 RX10_TEMP664 = new Point2(j1, _PoissonSolver_ELECY_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP664.hashCode());


								final Region2 RX10_TEMP665 = X10_TEMP434.regionValue;


								final int RX10_TEMP666 = Program.searchPointInRegion2(RX10_TEMP665, RX10_TEMP664,X10_TEMP11);


								final int RX10_TEMP667 = 0;


								final boolean RX10_TEMP668 = RX10_TEMP666 < RX10_TEMP667;

								if(RX10_TEMP668)
									{

									String RX10_TEMP669 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP669);

									}

								final double[] RX10_TEMP670 = (double[])(X10_TEMP434.contents);


								double X10_TEMP438 = RX10_TEMP670[RX10_TEMP666];


								final Complex s = new Complex(tmp3, X10_TEMP438,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(s.hashCode());


								final int X10_TEMP442 = 0;


								final int X10_TEMP445 = 0;


								final Point2 RX10_TEMP671 = new Point2(X10_TEMP445, j2,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP671.hashCode());


								final Dist2 RX10_TEMP672 = q.distValue;


								final Region2 RX10_TEMP673 = RX10_TEMP672.dReg;


								final int RX10_TEMP674 = Program.searchPointInRegion2(RX10_TEMP673, RX10_TEMP671,X10_TEMP11);


								final int RX10_TEMP675 = 0;


								final boolean RX10_TEMP676 = RX10_TEMP674 < RX10_TEMP675;

								if(RX10_TEMP676)
									{

									String RX10_TEMP677 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP677);

									}

								final int RX10_TEMP678 = Program.getPlaceFromDist2(RX10_TEMP672, RX10_TEMP674,X10_TEMP11);


								final int RX10_TEMP680 = 0;


								final boolean RX10_TEMP681 = RX10_TEMP678 != RX10_TEMP680;

								if(RX10_TEMP681)
									{

									String RX10_TEMP679 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP679);

									}

								final Complex RX10_TEMP682 = Program.getRefArrayValue2Complex(q, RX10_TEMP674,X10_TEMP11);


								final Complex X10_TEMP446 = RX10_TEMP682;


								final doubleRefArray3 X10_TEMP447 = X10_TEMP0.ffg;


								final int X10_TEMP451 = 0;


								final Point3 RX10_TEMP683 = new Point3(X10_TEMP451, j1, _PoissonSolver_ELECX_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP683.hashCode());


								final Dist3 RX10_TEMP684 = X10_TEMP447.distValue;


								final Region3 RX10_TEMP685 = RX10_TEMP684.dReg;


								final int RX10_TEMP686 = Program.searchPointInRegion3(RX10_TEMP685, RX10_TEMP683,X10_TEMP11);


								final int RX10_TEMP687 = 0;


								final boolean RX10_TEMP688 = RX10_TEMP686 < RX10_TEMP687;

								if(RX10_TEMP688)
									{

									String RX10_TEMP689 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP689);

									}

								final int RX10_TEMP690 = Program.getPlaceFromDist3(RX10_TEMP684, RX10_TEMP686,X10_TEMP11);


								final int RX10_TEMP692 = 0;


								final boolean RX10_TEMP693 = RX10_TEMP690 != RX10_TEMP692;

								if(RX10_TEMP693)
									{

									String RX10_TEMP691 = "Bad place access for array X10_TEMP447";

									throw new RuntimeException(RX10_TEMP691);

									}

								final double RX10_TEMP694 = Program.getRefArrayValue3double(X10_TEMP447, RX10_TEMP686,X10_TEMP11);


								final double X10_TEMP453 = RX10_TEMP694;


								final Complex X10_TEMP456 = Program.Complex_multS(X10_TEMP446, X10_TEMP453,X10_TEMP11);


								final Complex X10_TEMP457 = X10_TEMP456;


								final Point2 RX10_TEMP695 = new Point2(X10_TEMP442, j2,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP695.hashCode());


								final Dist2 RX10_TEMP696 = forceX.distValue;


								final Region2 RX10_TEMP697 = RX10_TEMP696.dReg;


								final int RX10_TEMP698 = Program.searchPointInRegion2(RX10_TEMP697, RX10_TEMP695,X10_TEMP11);


								final int RX10_TEMP699 = 0;


								final boolean RX10_TEMP700 = RX10_TEMP698 < RX10_TEMP699;

								if(RX10_TEMP700)
									{

									String RX10_TEMP701 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP701);

									}

								final int RX10_TEMP702 = Program.getPlaceFromDist2(RX10_TEMP696, RX10_TEMP698,X10_TEMP11);


								final int RX10_TEMP704 = 0;


								final boolean RX10_TEMP705 = RX10_TEMP702 != RX10_TEMP704;

								if(RX10_TEMP705)
									{

									String RX10_TEMP703 = "Bad place access for array forceX";

									throw new RuntimeException(RX10_TEMP703);

									}
								Program.setRefArrayValue2Complex(forceX, RX10_TEMP698, X10_TEMP457,X10_TEMP11);

								final int X10_TEMP460 = 0;


								final int X10_TEMP463 = 0;


								final Point2 RX10_TEMP706 = new Point2(X10_TEMP463, j2,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP706.hashCode());


								final Dist2 RX10_TEMP707 = q.distValue;


								final Region2 RX10_TEMP708 = RX10_TEMP707.dReg;


								final int RX10_TEMP709 = Program.searchPointInRegion2(RX10_TEMP708, RX10_TEMP706,X10_TEMP11);


								final int RX10_TEMP710 = 0;


								final boolean RX10_TEMP711 = RX10_TEMP709 < RX10_TEMP710;

								if(RX10_TEMP711)
									{

									String RX10_TEMP712 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP712);

									}

								final int RX10_TEMP713 = Program.getPlaceFromDist2(RX10_TEMP707, RX10_TEMP709,X10_TEMP11);


								final int RX10_TEMP715 = 0;


								final boolean RX10_TEMP716 = RX10_TEMP713 != RX10_TEMP715;

								if(RX10_TEMP716)
									{

									String RX10_TEMP714 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP714);

									}

								final Complex RX10_TEMP717 = Program.getRefArrayValue2Complex(q, RX10_TEMP709,X10_TEMP11);


								final Complex X10_TEMP465 = RX10_TEMP717;


								final Complex X10_TEMP468 = Program.Complex_mult(s, X10_TEMP465,X10_TEMP11);


								final Complex X10_TEMP469 = X10_TEMP468;


								final Point2 RX10_TEMP718 = new Point2(X10_TEMP460, j2,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP718.hashCode());


								final Dist2 RX10_TEMP719 = forceY.distValue;


								final Region2 RX10_TEMP720 = RX10_TEMP719.dReg;


								final int RX10_TEMP721 = Program.searchPointInRegion2(RX10_TEMP720, RX10_TEMP718,X10_TEMP11);


								final int RX10_TEMP722 = 0;


								final boolean RX10_TEMP723 = RX10_TEMP721 < RX10_TEMP722;

								if(RX10_TEMP723)
									{

									String RX10_TEMP724 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP724);

									}

								final int RX10_TEMP725 = Program.getPlaceFromDist2(RX10_TEMP719, RX10_TEMP721,X10_TEMP11);


								final int RX10_TEMP727 = 0;


								final boolean RX10_TEMP728 = RX10_TEMP725 != RX10_TEMP727;

								if(RX10_TEMP728)
									{

									String RX10_TEMP726 = "Bad place access for array forceY";

									throw new RuntimeException(RX10_TEMP726);

									}
								Program.setRefArrayValue2Complex(forceY, RX10_TEMP721, X10_TEMP469,X10_TEMP11);

								final Dist1 RX10_TEMP729 = energy.distValue;


								final Region1 RX10_TEMP730 = RX10_TEMP729.dReg;


								final int RX10_TEMP731 = Program.searchPointInRegion1(RX10_TEMP730, pl,X10_TEMP11);


								final int RX10_TEMP732 = 0;


								final boolean RX10_TEMP733 = RX10_TEMP731 < RX10_TEMP732;

								if(RX10_TEMP733)
									{

									String RX10_TEMP734 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP734);

									}

								final int RX10_TEMP735 = Program.getPlaceFromDist1(RX10_TEMP729, RX10_TEMP731,X10_TEMP11);


								final int RX10_TEMP737 = 0;


								final boolean RX10_TEMP738 = RX10_TEMP735 != RX10_TEMP737;

								if(RX10_TEMP738)
									{

									String RX10_TEMP736 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP736);

									}

								final double RX10_TEMP739 = Program.getRefArrayValue1double(energy, RX10_TEMP731,X10_TEMP11);


								final double X10_TEMP483 = RX10_TEMP739;


								final doubleValArray2 X10_TEMP472 = X10_TEMP0.ffg2;


								final Point2 RX10_TEMP740 = new Point2(j1, _PoissonSolver_GREENS_IDX,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP740.hashCode());


								final Region2 RX10_TEMP741 = X10_TEMP472.regionValue;


								final int RX10_TEMP742 = Program.searchPointInRegion2(RX10_TEMP741, RX10_TEMP740,X10_TEMP11);


								final int RX10_TEMP743 = 0;


								final boolean RX10_TEMP744 = RX10_TEMP742 < RX10_TEMP743;

								if(RX10_TEMP744)
									{

									String RX10_TEMP745 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP745);

									}

								final double[] RX10_TEMP746 = (double[])(X10_TEMP472.contents);


								final double X10_TEMP479 = RX10_TEMP746[RX10_TEMP742];


								final int X10_TEMP477 = 0;


								final Point2 RX10_TEMP747 = new Point2(X10_TEMP477, j2,X10_TEMP11);
								
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP747.hashCode());


								final Dist2 RX10_TEMP748 = q.distValue;


								final Region2 RX10_TEMP749 = RX10_TEMP748.dReg;


								final int RX10_TEMP750 = Program.searchPointInRegion2(RX10_TEMP749, RX10_TEMP747,X10_TEMP11);


								final int RX10_TEMP751 = 0;


								final boolean RX10_TEMP752 = RX10_TEMP750 < RX10_TEMP751;

								if(RX10_TEMP752)
									{

									String RX10_TEMP753 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP753);

									}

								final int RX10_TEMP754 = Program.getPlaceFromDist2(RX10_TEMP748, RX10_TEMP750,X10_TEMP11);


								final int RX10_TEMP756 = 0;


								final boolean RX10_TEMP757 = RX10_TEMP754 != RX10_TEMP756;

								if(RX10_TEMP757)
									{

									String RX10_TEMP755 = "Bad place access for array q";

									throw new RuntimeException(RX10_TEMP755);

									}

								final Complex RX10_TEMP758 = Program.getRefArrayValue2Complex(q, RX10_TEMP750,X10_TEMP11);


								final Complex X10_TEMP478 = RX10_TEMP758;


								final double X10_TEMP480 = Program.Complex_multConjg(X10_TEMP478,X10_TEMP11);


								final double X10_TEMP482 = X10_TEMP479 * X10_TEMP480;


								final double X10_TEMP486 = X10_TEMP483 + X10_TEMP482;


								final double X10_TEMP487 = X10_TEMP486;


								final Dist1 RX10_TEMP759 = energy.distValue;


								final Region1 RX10_TEMP760 = RX10_TEMP759.dReg;


								final int RX10_TEMP761 = Program.searchPointInRegion1(RX10_TEMP760, pl,X10_TEMP11);


								final int RX10_TEMP762 = 0;


								final boolean RX10_TEMP763 = RX10_TEMP761 < RX10_TEMP762;

								if(RX10_TEMP763)
									{

									String RX10_TEMP764 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP764);

									}

								final int RX10_TEMP765 = Program.getPlaceFromDist1(RX10_TEMP759, RX10_TEMP761,X10_TEMP11);


								final int RX10_TEMP767 = 0;


								final boolean RX10_TEMP768 = RX10_TEMP765 != RX10_TEMP767;

								if(RX10_TEMP768)
									{

									String RX10_TEMP766 = "Bad place access for array energy";

									throw new RuntimeException(RX10_TEMP766);

									}
								Program.setRefArrayValue1double(energy, RX10_TEMP761, X10_TEMP487,X10_TEMP11);
								}

							final int X10_TEMP490 = 0;


							final int X10_TEMP491 = 0;


							final Point2 RX10_TEMP769 = new Point2(X10_TEMP490, X10_TEMP491,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP769.hashCode());


							final Dist2 RX10_TEMP770 = q.distValue;


							final Region2 RX10_TEMP771 = RX10_TEMP770.dReg;


							final int RX10_TEMP772 = Program.searchPointInRegion2(RX10_TEMP771, RX10_TEMP769,X10_TEMP11);


							final int RX10_TEMP773 = 0;


							final boolean RX10_TEMP774 = RX10_TEMP772 < RX10_TEMP773;

							if(RX10_TEMP774)
								{

								String RX10_TEMP775 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP775);

								}

							final int RX10_TEMP776 = Program.getPlaceFromDist2(RX10_TEMP770, RX10_TEMP772,X10_TEMP11);


							final int RX10_TEMP778 = 0;


							final boolean RX10_TEMP779 = RX10_TEMP776 != RX10_TEMP778;

							if(RX10_TEMP779)
								{

								String RX10_TEMP777 = "Bad place access for array q";

								throw new RuntimeException(RX10_TEMP777);

								}

							final Complex RX10_TEMP780 = Program.getRefArrayValue2Complex(q, RX10_TEMP772,X10_TEMP11);


							final Complex X10_TEMP492 = RX10_TEMP780;


							final double q00R = Program.Complex_getReal(X10_TEMP492,X10_TEMP11);


							final int X10_TEMP496 = 0;


							final int X10_TEMP497 = 0;


							final Point2 RX10_TEMP781 = new Point2(X10_TEMP496, X10_TEMP497,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP781.hashCode());


							final Dist2 RX10_TEMP782 = q.distValue;


							final Region2 RX10_TEMP783 = RX10_TEMP782.dReg;


							final int RX10_TEMP784 = Program.searchPointInRegion2(RX10_TEMP783, RX10_TEMP781,X10_TEMP11);


							final int RX10_TEMP785 = 0;


							final boolean RX10_TEMP786 = RX10_TEMP784 < RX10_TEMP785;

							if(RX10_TEMP786)
								{

								String RX10_TEMP787 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP787);

								}

							final int RX10_TEMP788 = Program.getPlaceFromDist2(RX10_TEMP782, RX10_TEMP784,X10_TEMP11);


							final int RX10_TEMP790 = 0;


							final boolean RX10_TEMP791 = RX10_TEMP788 != RX10_TEMP790;

							if(RX10_TEMP791)
								{

								String RX10_TEMP789 = "Bad place access for array q";

								throw new RuntimeException(RX10_TEMP789);

								}

							final Complex RX10_TEMP792 = Program.getRefArrayValue2Complex(q, RX10_TEMP784,X10_TEMP11);


							final Complex X10_TEMP498 = RX10_TEMP792;


							final double q00I = Program.Complex_getImag(X10_TEMP498,X10_TEMP11);


							final int X10_TEMP502 = 0;


							final int X10_TEMP503 = 0;


							final doubleRefArray3 X10_TEMP504 = X10_TEMP0.ffg;


							final int X10_TEMP508 = 0;


							final int X10_TEMP509 = 0;


							final Point3 RX10_TEMP793 = new Point3(X10_TEMP508, X10_TEMP509, _PoissonSolver_ELECX_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP793.hashCode());


							final Dist3 RX10_TEMP794 = X10_TEMP504.distValue;


							final Region3 RX10_TEMP795 = RX10_TEMP794.dReg;


							final int RX10_TEMP796 = Program.searchPointInRegion3(RX10_TEMP795, RX10_TEMP793,X10_TEMP11);


							final int RX10_TEMP797 = 0;


							final boolean RX10_TEMP798 = RX10_TEMP796 < RX10_TEMP797;

							if(RX10_TEMP798)
								{

								String RX10_TEMP799 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP799);

								}

							final int RX10_TEMP800 = Program.getPlaceFromDist3(RX10_TEMP794, RX10_TEMP796,X10_TEMP11);


							final int RX10_TEMP802 = 0;


							final boolean RX10_TEMP803 = RX10_TEMP800 != RX10_TEMP802;

							if(RX10_TEMP803)
								{

								String RX10_TEMP801 = "Bad place access for array X10_TEMP504";

								throw new RuntimeException(RX10_TEMP801);

								}

							final double RX10_TEMP804 = Program.getRefArrayValue3double(X10_TEMP504, RX10_TEMP796,X10_TEMP11);


							final double X10_TEMP510 = RX10_TEMP804;


							double X10_TEMP518 = X10_TEMP510 * q00R;


							final doubleValArray2 X10_TEMP512 = X10_TEMP0.ffg2;


							final int X10_TEMP515 = 0;


							final Point2 RX10_TEMP805 = new Point2(X10_TEMP515, _PoissonSolver_ELECX_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP805.hashCode());


							final Region2 RX10_TEMP806 = X10_TEMP512.regionValue;


							final int RX10_TEMP807 = Program.searchPointInRegion2(RX10_TEMP806, RX10_TEMP805,X10_TEMP11);


							final int RX10_TEMP808 = 0;


							final boolean RX10_TEMP809 = RX10_TEMP807 < RX10_TEMP808;

							if(RX10_TEMP809)
								{

								String RX10_TEMP810 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP810);

								}

							final double[] RX10_TEMP811 = (double[])(X10_TEMP512.contents);


							final double X10_TEMP516 = RX10_TEMP811[RX10_TEMP807];


							double X10_TEMP519 = X10_TEMP516 * q00I;


							final Complex X10_TEMP522 = new Complex(X10_TEMP518, X10_TEMP519,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(X10_TEMP522.hashCode());


							final Complex X10_TEMP523 = X10_TEMP522;


							final Point2 RX10_TEMP812 = new Point2(X10_TEMP502, X10_TEMP503,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP812.hashCode());


							final Dist2 RX10_TEMP813 = forceX.distValue;


							final Region2 RX10_TEMP814 = RX10_TEMP813.dReg;


							final int RX10_TEMP815 = Program.searchPointInRegion2(RX10_TEMP814, RX10_TEMP812,X10_TEMP11);


							final int RX10_TEMP816 = 0;


							final boolean RX10_TEMP817 = RX10_TEMP815 < RX10_TEMP816;

							if(RX10_TEMP817)
								{

								String RX10_TEMP818 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP818);

								}

							final int RX10_TEMP819 = Program.getPlaceFromDist2(RX10_TEMP813, RX10_TEMP815,X10_TEMP11);


							final int RX10_TEMP821 = 0;


							final boolean RX10_TEMP822 = RX10_TEMP819 != RX10_TEMP821;

							if(RX10_TEMP822)
								{

								String RX10_TEMP820 = "Bad place access for array forceX";

								throw new RuntimeException(RX10_TEMP820);

								}
							Program.setRefArrayValue2Complex(forceX, RX10_TEMP815, X10_TEMP523,X10_TEMP11);

							final int X10_TEMP526 = 0;


							final int X10_TEMP527 = 0;


							final doubleRefArray3 X10_TEMP528 = X10_TEMP0.ffg;


							final int X10_TEMP532 = 0;


							final int X10_TEMP533 = 0;


							final Point3 RX10_TEMP823 = new Point3(X10_TEMP532, X10_TEMP533, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP823.hashCode());


							final Dist3 RX10_TEMP824 = X10_TEMP528.distValue;


							final Region3 RX10_TEMP825 = RX10_TEMP824.dReg;


							final int RX10_TEMP826 = Program.searchPointInRegion3(RX10_TEMP825, RX10_TEMP823,X10_TEMP11);


							final int RX10_TEMP827 = 0;


							final boolean RX10_TEMP828 = RX10_TEMP826 < RX10_TEMP827;

							if(RX10_TEMP828)
								{

								String RX10_TEMP829 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP829);

								}

							final int RX10_TEMP830 = Program.getPlaceFromDist3(RX10_TEMP824, RX10_TEMP826,X10_TEMP11);


							final int RX10_TEMP832 = 0;


							final boolean RX10_TEMP833 = RX10_TEMP830 != RX10_TEMP832;

							if(RX10_TEMP833)
								{

								String RX10_TEMP831 = "Bad place access for array X10_TEMP528";

								throw new RuntimeException(RX10_TEMP831);

								}

							final double RX10_TEMP834 = Program.getRefArrayValue3double(X10_TEMP528, RX10_TEMP826,X10_TEMP11);


							final double X10_TEMP534 = RX10_TEMP834;


							double X10_TEMP542 = X10_TEMP534 * q00R;


							final doubleValArray2 X10_TEMP536 = X10_TEMP0.ffg2;


							final int X10_TEMP539 = 0;


							final Point2 RX10_TEMP835 = new Point2(X10_TEMP539, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP835.hashCode());


							final Region2 RX10_TEMP836 = X10_TEMP536.regionValue;


							final int RX10_TEMP837 = Program.searchPointInRegion2(RX10_TEMP836, RX10_TEMP835,X10_TEMP11);


							final int RX10_TEMP838 = 0;


							final boolean RX10_TEMP839 = RX10_TEMP837 < RX10_TEMP838;

							if(RX10_TEMP839)
								{

								String RX10_TEMP840 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP840);

								}

							final double[] RX10_TEMP841 = (double[])(X10_TEMP536.contents);


							final double X10_TEMP540 = RX10_TEMP841[RX10_TEMP837];


							double X10_TEMP543 = X10_TEMP540 * q00I;


							final Complex X10_TEMP546 = new Complex(X10_TEMP542, X10_TEMP543,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(X10_TEMP546.hashCode());


							final Complex X10_TEMP547 = X10_TEMP546;


							final Point2 RX10_TEMP842 = new Point2(X10_TEMP526, X10_TEMP527,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP842.hashCode());


							final Dist2 RX10_TEMP843 = forceY.distValue;


							final Region2 RX10_TEMP844 = RX10_TEMP843.dReg;


							final int RX10_TEMP845 = Program.searchPointInRegion2(RX10_TEMP844, RX10_TEMP842,X10_TEMP11);


							final int RX10_TEMP846 = 0;


							final boolean RX10_TEMP847 = RX10_TEMP845 < RX10_TEMP846;

							if(RX10_TEMP847)
								{

								String RX10_TEMP848 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP848);

								}

							final int RX10_TEMP849 = Program.getPlaceFromDist2(RX10_TEMP843, RX10_TEMP845,X10_TEMP11);


							final int RX10_TEMP851 = 0;


							final boolean RX10_TEMP852 = RX10_TEMP849 != RX10_TEMP851;

							if(RX10_TEMP852)
								{

								String RX10_TEMP850 = "Bad place access for array forceY";

								throw new RuntimeException(RX10_TEMP850);

								}
							Program.setRefArrayValue2Complex(forceY, RX10_TEMP845, X10_TEMP547,X10_TEMP11);

							final Dist1 RX10_TEMP853 = energy.distValue;


							final Region1 RX10_TEMP854 = RX10_TEMP853.dReg;


							final int RX10_TEMP855 = Program.searchPointInRegion1(RX10_TEMP854, pl,X10_TEMP11);


							final int RX10_TEMP856 = 0;


							final boolean RX10_TEMP857 = RX10_TEMP855 < RX10_TEMP856;

							if(RX10_TEMP857)
								{

								String RX10_TEMP858 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP858);

								}

							final int RX10_TEMP859 = Program.getPlaceFromDist1(RX10_TEMP853, RX10_TEMP855,X10_TEMP11);


							final int RX10_TEMP861 = 0;


							final boolean RX10_TEMP862 = RX10_TEMP859 != RX10_TEMP861;

							if(RX10_TEMP862)
								{

								String RX10_TEMP860 = "Bad place access for array energy";

								throw new RuntimeException(RX10_TEMP860);

								}

							final double RX10_TEMP863 = Program.getRefArrayValue1double(energy, RX10_TEMP855,X10_TEMP11);


							final double X10_TEMP577 = RX10_TEMP863;


							final double X10_TEMP576 = 0.5;


							final doubleRefArray3 X10_TEMP550 = X10_TEMP0.ffg;


							final int X10_TEMP554 = 0;


							final int X10_TEMP555 = 0;


							final Point3 RX10_TEMP864 = new Point3(X10_TEMP554, X10_TEMP555, _PoissonSolver_GREENS_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP864.hashCode());


							final Dist3 RX10_TEMP865 = X10_TEMP550.distValue;


							final Region3 RX10_TEMP866 = RX10_TEMP865.dReg;


							final int RX10_TEMP867 = Program.searchPointInRegion3(RX10_TEMP866, RX10_TEMP864,X10_TEMP11);


							final int RX10_TEMP868 = 0;


							final boolean RX10_TEMP869 = RX10_TEMP867 < RX10_TEMP868;

							if(RX10_TEMP869)
								{

								String RX10_TEMP870 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP870);

								}

							final int RX10_TEMP871 = Program.getPlaceFromDist3(RX10_TEMP865, RX10_TEMP867,X10_TEMP11);


							final int RX10_TEMP873 = 0;


							final boolean RX10_TEMP874 = RX10_TEMP871 != RX10_TEMP873;

							if(RX10_TEMP874)
								{

								String RX10_TEMP872 = "Bad place access for array X10_TEMP550";

								throw new RuntimeException(RX10_TEMP872);

								}

							final double RX10_TEMP875 = Program.getRefArrayValue3double(X10_TEMP550, RX10_TEMP867,X10_TEMP11);


							final double X10_TEMP559 = RX10_TEMP875;


							final int X10_TEMP558 = 2;


							final double X10_TEMP560 = Math.pow(q00R, X10_TEMP558);


							final double X10_TEMP562 = X10_TEMP559 * X10_TEMP560;


							final doubleValArray2 X10_TEMP563 = X10_TEMP0.ffg2;


							final int X10_TEMP566 = 0;


							final Point2 RX10_TEMP876 = new Point2(X10_TEMP566, _PoissonSolver_GREENS_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP876.hashCode());


							final Region2 RX10_TEMP877 = X10_TEMP563.regionValue;


							final int RX10_TEMP878 = Program.searchPointInRegion2(RX10_TEMP877, RX10_TEMP876,X10_TEMP11);


							final int RX10_TEMP879 = 0;


							final boolean RX10_TEMP880 = RX10_TEMP878 < RX10_TEMP879;

							if(RX10_TEMP880)
								{

								String RX10_TEMP881 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP881);

								}

							final double[] RX10_TEMP882 = (double[])(X10_TEMP563.contents);


							final double X10_TEMP570 = RX10_TEMP882[RX10_TEMP878];


							final int X10_TEMP569 = 2;


							final double X10_TEMP571 = Math.pow(q00I, X10_TEMP569);


							final double X10_TEMP573 = X10_TEMP570 * X10_TEMP571;


							final double X10_TEMP575 = X10_TEMP562 + X10_TEMP573;


							final double X10_TEMP578 = X10_TEMP576 * X10_TEMP575;


							final double X10_TEMP581 = X10_TEMP577 + X10_TEMP578;


							final double X10_TEMP582 = X10_TEMP581;


							final Dist1 RX10_TEMP883 = energy.distValue;


							final Region1 RX10_TEMP884 = RX10_TEMP883.dReg;


							final int RX10_TEMP885 = Program.searchPointInRegion1(RX10_TEMP884, pl,X10_TEMP11);


							final int RX10_TEMP886 = 0;


							final boolean RX10_TEMP887 = RX10_TEMP885 < RX10_TEMP886;

							if(RX10_TEMP887)
								{

								String RX10_TEMP888 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP888);

								}

							final int RX10_TEMP889 = Program.getPlaceFromDist1(RX10_TEMP883, RX10_TEMP885,X10_TEMP11);


							final int RX10_TEMP891 = 0;


							final boolean RX10_TEMP892 = RX10_TEMP889 != RX10_TEMP891;

							if(RX10_TEMP892)
								{

								String RX10_TEMP890 = "Bad place access for array energy";

								throw new RuntimeException(RX10_TEMP890);

								}
							Program.setRefArrayValue1double(energy, RX10_TEMP885, X10_TEMP582,X10_TEMP11);

							final int X10_TEMP585 = 0;


							final int X10_TEMP586 = X10_TEMP0.y;


							final Point2 RX10_TEMP893 = new Point2(X10_TEMP585, X10_TEMP586,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP893.hashCode());


							final Dist2 RX10_TEMP894 = q.distValue;


							final Region2 RX10_TEMP895 = RX10_TEMP894.dReg;


							final int RX10_TEMP896 = Program.searchPointInRegion2(RX10_TEMP895, RX10_TEMP893,X10_TEMP11);


							final int RX10_TEMP897 = 0;


							final boolean RX10_TEMP898 = RX10_TEMP896 < RX10_TEMP897;

							if(RX10_TEMP898)
								{

								String RX10_TEMP899 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP899);

								}

							final int RX10_TEMP900 = Program.getPlaceFromDist2(RX10_TEMP894, RX10_TEMP896,X10_TEMP11);


							final int RX10_TEMP902 = 0;


							final boolean RX10_TEMP903 = RX10_TEMP900 != RX10_TEMP902;

							if(RX10_TEMP903)
								{

								String RX10_TEMP901 = "Bad place access for array q";

								throw new RuntimeException(RX10_TEMP901);

								}

							final Complex RX10_TEMP904 = Program.getRefArrayValue2Complex(q, RX10_TEMP896,X10_TEMP11);


							final Complex X10_TEMP587 = RX10_TEMP904;


							final double q0NYR = Program.Complex_getReal(X10_TEMP587,X10_TEMP11);


							final int X10_TEMP591 = 0;


							final int X10_TEMP592 = X10_TEMP0.y;


							final Point2 RX10_TEMP905 = new Point2(X10_TEMP591, X10_TEMP592,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP905.hashCode());


							final Dist2 RX10_TEMP906 = q.distValue;


							final Region2 RX10_TEMP907 = RX10_TEMP906.dReg;


							final int RX10_TEMP908 = Program.searchPointInRegion2(RX10_TEMP907, RX10_TEMP905,X10_TEMP11);


							final int RX10_TEMP909 = 0;


							final boolean RX10_TEMP910 = RX10_TEMP908 < RX10_TEMP909;

							if(RX10_TEMP910)
								{

								String RX10_TEMP911 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP911);

								}

							final int RX10_TEMP912 = Program.getPlaceFromDist2(RX10_TEMP906, RX10_TEMP908,X10_TEMP11);


							final int RX10_TEMP914 = 0;


							final boolean RX10_TEMP915 = RX10_TEMP912 != RX10_TEMP914;

							if(RX10_TEMP915)
								{

								String RX10_TEMP913 = "Bad place access for array q";

								throw new RuntimeException(RX10_TEMP913);

								}

							final Complex RX10_TEMP916 = Program.getRefArrayValue2Complex(q, RX10_TEMP908,X10_TEMP11);


							final Complex X10_TEMP593 = RX10_TEMP916;


							final double q0NYI = Program.Complex_getImag(X10_TEMP593,X10_TEMP11);


							final int X10_TEMP597 = 0;


							final int X10_TEMP598 = X10_TEMP0.y;


							final doubleRefArray3 X10_TEMP599 = X10_TEMP0.ffg;


							final int X10_TEMP603 = 0;


							final int X10_TEMP604 = X10_TEMP0.y;


							final Point3 RX10_TEMP917 = new Point3(X10_TEMP603, X10_TEMP604, _PoissonSolver_ELECX_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP917.hashCode());


							final Dist3 RX10_TEMP918 = X10_TEMP599.distValue;


							final Region3 RX10_TEMP919 = RX10_TEMP918.dReg;


							final int RX10_TEMP920 = Program.searchPointInRegion3(RX10_TEMP919, RX10_TEMP917,X10_TEMP11);


							final int RX10_TEMP921 = 0;


							final boolean RX10_TEMP922 = RX10_TEMP920 < RX10_TEMP921;

							if(RX10_TEMP922)
								{

								String RX10_TEMP923 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP923);

								}

							final int RX10_TEMP924 = Program.getPlaceFromDist3(RX10_TEMP918, RX10_TEMP920,X10_TEMP11);


							final int RX10_TEMP926 = 0;


							final boolean RX10_TEMP927 = RX10_TEMP924 != RX10_TEMP926;

							if(RX10_TEMP927)
								{

								String RX10_TEMP925 = "Bad place access for array X10_TEMP599";

								throw new RuntimeException(RX10_TEMP925);

								}

							final double RX10_TEMP928 = Program.getRefArrayValue3double(X10_TEMP599, RX10_TEMP920,X10_TEMP11);


							final double X10_TEMP605 = RX10_TEMP928;


							double X10_TEMP613 = X10_TEMP605 * q0NYR;


							final doubleValArray2 X10_TEMP607 = X10_TEMP0.ffg2;


							final int X10_TEMP610 = X10_TEMP0.y;


							final Point2 RX10_TEMP929 = new Point2(X10_TEMP610, _PoissonSolver_ELECX_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP929.hashCode());


							final Region2 RX10_TEMP930 = X10_TEMP607.regionValue;


							final int RX10_TEMP931 = Program.searchPointInRegion2(RX10_TEMP930, RX10_TEMP929,X10_TEMP11);


							final int RX10_TEMP932 = 0;


							final boolean RX10_TEMP933 = RX10_TEMP931 < RX10_TEMP932;

							if(RX10_TEMP933)
								{

								String RX10_TEMP934 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP934);

								}

							final double[] RX10_TEMP935 = (double[])(X10_TEMP607.contents);


							final double X10_TEMP611 = RX10_TEMP935[RX10_TEMP931];


							double X10_TEMP614 = X10_TEMP611 * q0NYI;


							final Complex X10_TEMP617 = new Complex(X10_TEMP613, X10_TEMP614,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(X10_TEMP617.hashCode());


							final Complex X10_TEMP618 = X10_TEMP617;


							final Point2 RX10_TEMP936 = new Point2(X10_TEMP597, X10_TEMP598,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP936.hashCode());


							final Dist2 RX10_TEMP937 = forceX.distValue;


							final Region2 RX10_TEMP938 = RX10_TEMP937.dReg;


							final int RX10_TEMP939 = Program.searchPointInRegion2(RX10_TEMP938, RX10_TEMP936,X10_TEMP11);


							final int RX10_TEMP940 = 0;


							final boolean RX10_TEMP941 = RX10_TEMP939 < RX10_TEMP940;

							if(RX10_TEMP941)
								{

								String RX10_TEMP942 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP942);

								}

							final int RX10_TEMP943 = Program.getPlaceFromDist2(RX10_TEMP937, RX10_TEMP939,X10_TEMP11);


							final int RX10_TEMP945 = 0;


							final boolean RX10_TEMP946 = RX10_TEMP943 != RX10_TEMP945;

							if(RX10_TEMP946)
								{

								String RX10_TEMP944 = "Bad place access for array forceX";

								throw new RuntimeException(RX10_TEMP944);

								}
							Program.setRefArrayValue2Complex(forceX, RX10_TEMP939, X10_TEMP618,X10_TEMP11);

							final int X10_TEMP621 = 0;


							final int X10_TEMP622 = X10_TEMP0.y;


							final doubleRefArray3 X10_TEMP623 = X10_TEMP0.ffg;


							final int X10_TEMP627 = 0;


							final int X10_TEMP628 = X10_TEMP0.y;


							final Point3 RX10_TEMP947 = new Point3(X10_TEMP627, X10_TEMP628, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP947.hashCode());


							final Dist3 RX10_TEMP948 = X10_TEMP623.distValue;


							final Region3 RX10_TEMP949 = RX10_TEMP948.dReg;


							final int RX10_TEMP950 = Program.searchPointInRegion3(RX10_TEMP949, RX10_TEMP947,X10_TEMP11);


							final int RX10_TEMP951 = 0;


							final boolean RX10_TEMP952 = RX10_TEMP950 < RX10_TEMP951;

							if(RX10_TEMP952)
								{

								String RX10_TEMP953 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP953);

								}

							final int RX10_TEMP954 = Program.getPlaceFromDist3(RX10_TEMP948, RX10_TEMP950,X10_TEMP11);


							final int RX10_TEMP956 = 0;


							final boolean RX10_TEMP957 = RX10_TEMP954 != RX10_TEMP956;

							if(RX10_TEMP957)
								{

								String RX10_TEMP955 = "Bad place access for array X10_TEMP623";

								throw new RuntimeException(RX10_TEMP955);

								}

							final double RX10_TEMP958 = Program.getRefArrayValue3double(X10_TEMP623, RX10_TEMP950,X10_TEMP11);


							final double X10_TEMP629 = RX10_TEMP958;


							double X10_TEMP637 = X10_TEMP629 * q0NYR;


							final doubleValArray2 X10_TEMP631 = X10_TEMP0.ffg2;


							final int X10_TEMP634 = X10_TEMP0.y;


							final Point2 RX10_TEMP959 = new Point2(X10_TEMP634, _PoissonSolver_ELECY_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP959.hashCode());


							final Region2 RX10_TEMP960 = X10_TEMP631.regionValue;


							final int RX10_TEMP961 = Program.searchPointInRegion2(RX10_TEMP960, RX10_TEMP959,X10_TEMP11);


							final int RX10_TEMP962 = 0;


							final boolean RX10_TEMP963 = RX10_TEMP961 < RX10_TEMP962;

							if(RX10_TEMP963)
								{

								String RX10_TEMP964 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP964);

								}

							final double[] RX10_TEMP965 = (double[])(X10_TEMP631.contents);


							final double X10_TEMP635 = RX10_TEMP965[RX10_TEMP961];


							double X10_TEMP638 = X10_TEMP635 * q0NYI;


							final Complex X10_TEMP641 = new Complex(X10_TEMP637, X10_TEMP638,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(X10_TEMP641.hashCode());


							final Complex X10_TEMP642 = X10_TEMP641;


							final Point2 RX10_TEMP966 = new Point2(X10_TEMP621, X10_TEMP622,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP966.hashCode());


							final Dist2 RX10_TEMP967 = forceY.distValue;


							final Region2 RX10_TEMP968 = RX10_TEMP967.dReg;


							final int RX10_TEMP969 = Program.searchPointInRegion2(RX10_TEMP968, RX10_TEMP966,X10_TEMP11);


							final int RX10_TEMP970 = 0;


							final boolean RX10_TEMP971 = RX10_TEMP969 < RX10_TEMP970;

							if(RX10_TEMP971)
								{

								String RX10_TEMP972 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP972);

								}

							final int RX10_TEMP973 = Program.getPlaceFromDist2(RX10_TEMP967, RX10_TEMP969,X10_TEMP11);


							final int RX10_TEMP975 = 0;


							final boolean RX10_TEMP976 = RX10_TEMP973 != RX10_TEMP975;

							if(RX10_TEMP976)
								{

								String RX10_TEMP974 = "Bad place access for array forceY";

								throw new RuntimeException(RX10_TEMP974);

								}
							Program.setRefArrayValue2Complex(forceY, RX10_TEMP969, X10_TEMP642,X10_TEMP11);

							final Dist1 RX10_TEMP977 = energy.distValue;


							final Region1 RX10_TEMP978 = RX10_TEMP977.dReg;


							final int RX10_TEMP979 = Program.searchPointInRegion1(RX10_TEMP978, pl,X10_TEMP11);


							final int RX10_TEMP980 = 0;


							final boolean RX10_TEMP981 = RX10_TEMP979 < RX10_TEMP980;

							if(RX10_TEMP981)
								{

								String RX10_TEMP982 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP982);

								}

							final int RX10_TEMP983 = Program.getPlaceFromDist1(RX10_TEMP977, RX10_TEMP979,X10_TEMP11);


							final int RX10_TEMP985 = 0;


							final boolean RX10_TEMP986 = RX10_TEMP983 != RX10_TEMP985;

							if(RX10_TEMP986)
								{

								String RX10_TEMP984 = "Bad place access for array energy";

								throw new RuntimeException(RX10_TEMP984);

								}

							final double RX10_TEMP987 = Program.getRefArrayValue1double(energy, RX10_TEMP979,X10_TEMP11);


							final double X10_TEMP672 = RX10_TEMP987;


							final double X10_TEMP671 = 0.5;


							final doubleRefArray3 X10_TEMP645 = X10_TEMP0.ffg;


							final int X10_TEMP649 = 0;


							final int X10_TEMP650 = X10_TEMP0.y;


							final Point3 RX10_TEMP988 = new Point3(X10_TEMP649, X10_TEMP650, _PoissonSolver_GREENS_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP988.hashCode());


							final Dist3 RX10_TEMP989 = X10_TEMP645.distValue;


							final Region3 RX10_TEMP990 = RX10_TEMP989.dReg;


							final int RX10_TEMP991 = Program.searchPointInRegion3(RX10_TEMP990, RX10_TEMP988,X10_TEMP11);


							final int RX10_TEMP992 = 0;


							final boolean RX10_TEMP993 = RX10_TEMP991 < RX10_TEMP992;

							if(RX10_TEMP993)
								{

								String RX10_TEMP994 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP994);

								}

							final int RX10_TEMP995 = Program.getPlaceFromDist3(RX10_TEMP989, RX10_TEMP991,X10_TEMP11);


							final int RX10_TEMP997 = 0;


							final boolean RX10_TEMP998 = RX10_TEMP995 != RX10_TEMP997;

							if(RX10_TEMP998)
								{

								String RX10_TEMP996 = "Bad place access for array X10_TEMP645";

								throw new RuntimeException(RX10_TEMP996);

								}

							final double RX10_TEMP999 = Program.getRefArrayValue3double(X10_TEMP645, RX10_TEMP991,X10_TEMP11);


							final double X10_TEMP654 = RX10_TEMP999;


							final int X10_TEMP653 = 2;


							final double X10_TEMP655 = Math.pow(q0NYR, X10_TEMP653);


							final double X10_TEMP657 = X10_TEMP654 * X10_TEMP655;


							final doubleValArray2 X10_TEMP658 = X10_TEMP0.ffg2;


							final int X10_TEMP661 = X10_TEMP0.y;


							final Point2 RX10_TEMP1000 = new Point2(X10_TEMP661, _PoissonSolver_GREENS_IDX,X10_TEMP11);
							
Program.globalPointerHashMap.get(X10_TEMP11).add(RX10_TEMP1000.hashCode());


							final Region2 RX10_TEMP1001 = X10_TEMP658.regionValue;


							final int RX10_TEMP1002 = Program.searchPointInRegion2(RX10_TEMP1001, RX10_TEMP1000,X10_TEMP11);


							final int RX10_TEMP1003 = 0;


							final boolean RX10_TEMP1004 = RX10_TEMP1002 < RX10_TEMP1003;

							if(RX10_TEMP1004)
								{

								String RX10_TEMP1005 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP1005);

								}

							final double[] RX10_TEMP1006 = (double[])(X10_TEMP658.contents);


							final double X10_TEMP665 = RX10_TEMP1006[RX10_TEMP1002];


							final int X10_TEMP664 = 2;


							final double X10_TEMP666 = Math.pow(q0NYI, X10_TEMP664);


							final double X10_TEMP668 = X10_TEMP665 * X10_TEMP666;


							final double X10_TEMP670 = X10_TEMP657 + X10_TEMP668;


							final double X10_TEMP673 = X10_TEMP671 * X10_TEMP670;


							final double X10_TEMP676 = X10_TEMP672 + X10_TEMP673;


							final double X10_TEMP677 = X10_TEMP676;


							final Dist1 RX10_TEMP1007 = energy.distValue;


							final Region1 RX10_TEMP1008 = RX10_TEMP1007.dReg;


							final int RX10_TEMP1009 = Program.searchPointInRegion1(RX10_TEMP1008, pl,X10_TEMP11);


							final int RX10_TEMP1010 = 0;


							final boolean RX10_TEMP1011 = RX10_TEMP1009 < RX10_TEMP1010;

							if(RX10_TEMP1011)
								{

								String RX10_TEMP1012 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP1012);

								}

							final int RX10_TEMP1013 = Program.getPlaceFromDist1(RX10_TEMP1007, RX10_TEMP1009,X10_TEMP11);


							final int RX10_TEMP1015 = 0;


							final boolean RX10_TEMP1016 = RX10_TEMP1013 != RX10_TEMP1015;

							if(RX10_TEMP1016)
								{

								String RX10_TEMP1014 = "Bad place access for array energy";

								throw new RuntimeException(RX10_TEMP1014);

								}
							Program.setRefArrayValue1double(energy, RX10_TEMP1009, X10_TEMP677,X10_TEMP11);
							}
						}
					}
				}
			}

		final double X10_TEMP678 = 4.0;


		final int X10_TEMP679 = X10_TEMP0.x;


		final double X10_TEMP680 = X10_TEMP678 * X10_TEMP679;


		final int X10_TEMP681 = X10_TEMP0.y;


		final double X10_TEMP682 = X10_TEMP680 * X10_TEMP681;


		final double X10_TEMP683 = Program.doublerefArraySum1(energy,myUniquePlacePoint);


		final double X10_TEMP685 = X10_TEMP682 * X10_TEMP683;

		return X10_TEMP685;
		}
public static double PoissonSolver_expIntNL ( final PoissonSolver X10_TEMP0, final double x, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = 0.57721566;


		final int X10_TEMP2 = 0;


		final double a0 = X10_TEMP2 - X10_TEMP1;


		final double a1 = 0.99999193;


		final double X10_TEMP5 = 0.24991055;


		final int X10_TEMP6 = 0;


		final double a2 = X10_TEMP6 - X10_TEMP5;


		final double a3 = 0.05519968;


		final double X10_TEMP9 = 0.00976004;


		final int X10_TEMP10 = 0;


		final double a4 = X10_TEMP10 - X10_TEMP9;


		final double a5 = 0.00107857;


		final double b1 = 8.5733287401;


		final double b2 = 18.0590169730;


		final double b3 = 8.6347608925;


		final double b4 = 0.2677737343;


		final double c1 = 9.5733223454;


		final double c2 = 25.6329561486;


		final double c3 = 21.0996530827;


		final double c4 = 3.9584969228;


		final double X10_TEMP21 = 1.0;


		final boolean X10_TEMP23 = x < X10_TEMP21;

		if(X10_TEMP23)
			{

			final double X10_TEMP24 = x * a5;


			final double X10_TEMP26 = a4 + X10_TEMP24;


			final double X10_TEMP27 = x * X10_TEMP26;


			final double X10_TEMP29 = a3 + X10_TEMP27;


			final double X10_TEMP30 = x * X10_TEMP29;


			final double X10_TEMP32 = a2 + X10_TEMP30;


			final double X10_TEMP33 = x * X10_TEMP32;


			final double X10_TEMP35 = a1 + X10_TEMP33;


			final double X10_TEMP36 = x * X10_TEMP35;


			final double X10_TEMP38 = a0 + X10_TEMP36;

			return X10_TEMP38;
			}
		else
			{

			final double X10_TEMP39 = 50.0;


			final boolean X10_TEMP41 = x < X10_TEMP39;

			if(X10_TEMP41)
				{

				final double X10_TEMP75 = Math.log(x);


				final int X10_TEMP43 = 0;


				final double X10_TEMP45 = X10_TEMP43 - x;


				final double X10_TEMP46 = Math.exp(X10_TEMP45);


				final double X10_TEMP48 = X10_TEMP46 / x;


				final double X10_TEMP50 = b1 + x;


				final double X10_TEMP51 = x * X10_TEMP50;


				final double X10_TEMP53 = b2 + X10_TEMP51;


				final double X10_TEMP54 = x * X10_TEMP53;


				final double X10_TEMP56 = b3 + X10_TEMP54;


				final double X10_TEMP57 = x * X10_TEMP56;


				final double X10_TEMP59 = b4 + X10_TEMP57;


				final double X10_TEMP61 = c1 + x;


				final double X10_TEMP62 = x * X10_TEMP61;


				final double X10_TEMP64 = c2 + X10_TEMP62;


				final double X10_TEMP65 = x * X10_TEMP64;


				final double X10_TEMP67 = c3 + X10_TEMP65;


				final double X10_TEMP68 = x * X10_TEMP67;


				final double X10_TEMP70 = c4 + X10_TEMP68;


				final double X10_TEMP72 = X10_TEMP59 / X10_TEMP70;


				final double X10_TEMP74 = X10_TEMP48 * X10_TEMP72;


				final double X10_TEMP77 = X10_TEMP75 + X10_TEMP74;

				return X10_TEMP77;
				}
			else
				{

				final double X10_TEMP80 = Math.log(x);

				return X10_TEMP80;
				}
 			}
 		}
public static String PoissonSolver_toString ( final PoissonSolver X10_TEMP0, int myUniquePlacePoint)
		{

		final String X10_TEMP1 = "PoisonSolver: xbits = ";


		final int X10_TEMP2 = X10_TEMP0.xBits;


		final String X10_TEMP3 = X10_TEMP1 + X10_TEMP2;


		final String X10_TEMP4 = " ybits = ";


		final String X10_TEMP5 = X10_TEMP3 + X10_TEMP4;


		final int X10_TEMP6 = X10_TEMP0.yBits;


		final String X10_TEMP8 = X10_TEMP5 + X10_TEMP6;

		return X10_TEMP8;
		}
public static double Random_nextNormal ( final Random X10_TEMP0, int myUniquePlacePoint)
		{

		double ret = 0.0;


		final int X10_TEMP2 = X10_TEMP0.flag;


		final int X10_TEMP3 = 0;


		final boolean X10_TEMP5 = X10_TEMP2 != X10_TEMP3;

		if(X10_TEMP5)
			{

			final double X10_TEMP7 = X10_TEMP0.r0;


			ret = X10_TEMP7;


			final double X10_TEMP10 = 0.0;


			final double X10_TEMP11 = X10_TEMP10;

			X10_TEMP0.r0 = (X10_TEMP11);

			final int X10_TEMP14 = 0;


			final int X10_TEMP15 = X10_TEMP14;

			X10_TEMP0.flag = (X10_TEMP15);
			}
		else
			{

			int isc = 65536;


			double asc = isc;


			double bsc = asc * asc;


			final int X10_TEMP22 = X10_TEMP0.r1;


			final int X10_TEMP19 = X10_TEMP0.r1;


			final int X10_TEMP21 = X10_TEMP19 / isc;


			final int X10_TEMP23 = X10_TEMP21 * isc;


			int i1 = X10_TEMP22 - X10_TEMP23;


			final double X10_TEMP25 = X10_TEMP0.h1l;


			final int X10_TEMP26 = X10_TEMP0.r1;


			final double X10_TEMP29 = X10_TEMP25 * X10_TEMP26;


			final double X10_TEMP27 = X10_TEMP0.h1u;


			final double X10_TEMP28 = asc * X10_TEMP27;


			final double X10_TEMP30 = X10_TEMP28 * i1;


			double r3 = X10_TEMP29 + X10_TEMP30;


			final double X10_TEMP33 = r3 / bsc;


			final int X10_TEMP35 = (int)X10_TEMP33;


			i1 = X10_TEMP35;


			final double X10_TEMP37 = i1 * bsc;


			final double X10_TEMP39 = r3 - X10_TEMP37;


			r3 = X10_TEMP39;


			final double X10_TEMP40 = 0.5;


			final double X10_TEMP42 = X10_TEMP40 * bsc;


			bsc = X10_TEMP42;


			final int X10_TEMP43 = X10_TEMP0.r2;


			final int X10_TEMP45 = X10_TEMP43 / isc;


			i1 = X10_TEMP45;


			final int X10_TEMP46 = X10_TEMP0.r2;


			final int X10_TEMP47 = i1 * isc;


			final int X10_TEMP49 = X10_TEMP46 - X10_TEMP47;


			isc = X10_TEMP49;


			final double X10_TEMP50 = X10_TEMP0.h1l;


			final int X10_TEMP51 = X10_TEMP0.r2;


			final double X10_TEMP54 = X10_TEMP50 * X10_TEMP51;


			final double X10_TEMP52 = X10_TEMP0.h1u;


			final double X10_TEMP53 = asc * X10_TEMP52;


			final double X10_TEMP55 = X10_TEMP53 * isc;


			final double X10_TEMP58 = X10_TEMP54 + X10_TEMP55;


			final double X10_TEMP59 = X10_TEMP58;

			X10_TEMP0.r0 = (X10_TEMP59);

			final double X10_TEMP60 = 1.0;


			final double X10_TEMP62 = X10_TEMP60 / bsc;


			asc = X10_TEMP62;


			final double X10_TEMP63 = X10_TEMP0.r0;


			final double X10_TEMP65 = X10_TEMP63 * asc;


			final int X10_TEMP67 = (int)X10_TEMP65;


			isc = X10_TEMP67;


			final double X10_TEMP68 = X10_TEMP0.r0;


			final double X10_TEMP69 = isc * bsc;


			final double X10_TEMP71 = X10_TEMP68 - X10_TEMP69;


			final int X10_TEMP74 = (int)X10_TEMP71;


			final int X10_TEMP75 = X10_TEMP74;

			X10_TEMP0.r2 = (X10_TEMP75);

			final double X10_TEMP79 = r3 + isc;


			final double X10_TEMP76 = 2.0;


			final double X10_TEMP77 = X10_TEMP0.h1u;


			final double X10_TEMP78 = X10_TEMP76 * X10_TEMP77;


			final double X10_TEMP80 = X10_TEMP78 * i1;


			final double X10_TEMP82 = X10_TEMP79 + X10_TEMP80;


			r3 = X10_TEMP82;


			final double X10_TEMP84 = r3 * asc;


			final int X10_TEMP86 = (int)X10_TEMP84;


			isc = X10_TEMP86;


			final double X10_TEMP87 = isc * bsc;


			final double X10_TEMP89 = r3 - X10_TEMP87;


			final int X10_TEMP92 = (int)X10_TEMP89;


			final int X10_TEMP93 = X10_TEMP92;

			X10_TEMP0.r1 = (X10_TEMP93);

			final double X10_TEMP94 = 2.0;


			final int X10_TEMP95 = 0;


			final double X10_TEMP103 = X10_TEMP95 - X10_TEMP94;


			final int X10_TEMP97 = X10_TEMP0.r1;


			final double X10_TEMP96 = X10_TEMP0.r2;


			final double X10_TEMP98 = X10_TEMP96 * asc;


			final double X10_TEMP100 = X10_TEMP97 + X10_TEMP98;


			final double X10_TEMP102 = X10_TEMP100 * asc;


			final double X10_TEMP104 = Math.log(X10_TEMP102);


			final double X10_TEMP106 = X10_TEMP103 * X10_TEMP104;


			double temp = Math.sqrt(X10_TEMP106);


			final int X10_TEMP109 = 65536;


			isc = X10_TEMP109;


			asc = isc;


			final double X10_TEMP112 = asc * asc;


			bsc = X10_TEMP112;


			final int X10_TEMP116 = X10_TEMP0.r4;


			final int X10_TEMP113 = X10_TEMP0.r4;


			final int X10_TEMP115 = X10_TEMP113 / isc;


			final int X10_TEMP117 = X10_TEMP115 * isc;


			final int X10_TEMP119 = X10_TEMP116 - X10_TEMP117;


			i1 = X10_TEMP119;


			final double X10_TEMP120 = X10_TEMP0.h2l;


			final int X10_TEMP121 = X10_TEMP0.r4;


			final double X10_TEMP124 = X10_TEMP120 * X10_TEMP121;


			final double X10_TEMP122 = X10_TEMP0.h1u;


			final double X10_TEMP123 = asc * X10_TEMP122;


			final double X10_TEMP125 = X10_TEMP123 * i1;


			final double X10_TEMP127 = X10_TEMP124 + X10_TEMP125;


			r3 = X10_TEMP127;


			final double X10_TEMP129 = r3 / bsc;


			final int X10_TEMP131 = (int)X10_TEMP129;


			i1 = X10_TEMP131;


			final double X10_TEMP133 = i1 * bsc;


			final double X10_TEMP135 = r3 - X10_TEMP133;


			r3 = X10_TEMP135;


			final double X10_TEMP136 = 0.5;


			final double X10_TEMP138 = X10_TEMP136 * bsc;


			bsc = X10_TEMP138;


			final int X10_TEMP139 = X10_TEMP0.r5;


			final int X10_TEMP141 = X10_TEMP139 / isc;


			i1 = X10_TEMP141;


			final int X10_TEMP142 = X10_TEMP0.r5;


			final int X10_TEMP143 = i1 * isc;


			final int X10_TEMP145 = X10_TEMP142 - X10_TEMP143;


			isc = X10_TEMP145;


			final double X10_TEMP146 = X10_TEMP0.h2l;


			final int X10_TEMP147 = X10_TEMP0.r5;


			final double X10_TEMP150 = X10_TEMP146 * X10_TEMP147;


			final double X10_TEMP148 = X10_TEMP0.h1u;


			final double X10_TEMP149 = asc * X10_TEMP148;


			final double X10_TEMP151 = X10_TEMP149 * isc;


			final double X10_TEMP154 = X10_TEMP150 + X10_TEMP151;


			final double X10_TEMP155 = X10_TEMP154;

			X10_TEMP0.r0 = (X10_TEMP155);

			final double X10_TEMP156 = 1.0;


			final double X10_TEMP158 = X10_TEMP156 / bsc;


			asc = X10_TEMP158;


			final double X10_TEMP159 = X10_TEMP0.r0;


			final double X10_TEMP161 = X10_TEMP159 * asc;


			final int X10_TEMP163 = (int)X10_TEMP161;


			isc = X10_TEMP163;


			final double X10_TEMP164 = X10_TEMP0.r0;


			final double X10_TEMP165 = isc * bsc;


			final double X10_TEMP167 = X10_TEMP164 - X10_TEMP165;


			final int X10_TEMP170 = (int)X10_TEMP167;


			final int X10_TEMP171 = X10_TEMP170;

			X10_TEMP0.r5 = (X10_TEMP171);

			final double X10_TEMP172 = 2.0;


			final double X10_TEMP173 = X10_TEMP0.h1u;


			final double X10_TEMP174 = X10_TEMP172 * X10_TEMP173;


			final double X10_TEMP175 = X10_TEMP174 * i1;


			final double X10_TEMP177 = isc + X10_TEMP175;


			final double X10_TEMP179 = r3 + X10_TEMP177;


			r3 = X10_TEMP179;


			final double X10_TEMP181 = r3 * asc;


			final int X10_TEMP183 = (int)X10_TEMP181;


			isc = X10_TEMP183;


			final double X10_TEMP184 = isc * bsc;


			final double X10_TEMP186 = r3 - X10_TEMP184;


			final int X10_TEMP189 = (int)X10_TEMP186;


			final int X10_TEMP190 = X10_TEMP189;

			X10_TEMP0.r4 = (X10_TEMP190);

			final double X10_TEMP198 = 6.28318530717959;


			final int X10_TEMP192 = X10_TEMP0.r4;


			final double X10_TEMP191 = X10_TEMP0.r5;


			final double X10_TEMP193 = X10_TEMP191 * asc;


			final double X10_TEMP195 = X10_TEMP192 + X10_TEMP193;


			final double X10_TEMP197 = X10_TEMP195 * asc;


			final double X10_TEMP201 = X10_TEMP198 * X10_TEMP197;


			final double X10_TEMP202 = X10_TEMP201;

			X10_TEMP0.r0 = (X10_TEMP202);

			final double X10_TEMP204 = X10_TEMP0.r0;


			final double X10_TEMP205 = Math.sin(X10_TEMP204);


			final double X10_TEMP207 = temp * X10_TEMP205;


			ret = X10_TEMP207;


			final double X10_TEMP209 = X10_TEMP0.r0;


			final double X10_TEMP210 = Math.cos(X10_TEMP209);


			final double X10_TEMP213 = temp * X10_TEMP210;


			final double X10_TEMP214 = X10_TEMP213;

			X10_TEMP0.r0 = (X10_TEMP214);

			final int X10_TEMP217 = 1;


			final int X10_TEMP218 = X10_TEMP217;

			X10_TEMP0.flag = (X10_TEMP218);
			}
 		return ret;
		}
public static int _Timer_max_counters_init (  int myUniquePlacePoint)
		{

		final int X10_TEMP2 = 64;

		return X10_TEMP2;
		}
public static void Timer_start ( final Timer X10_TEMP0, final int n, int myUniquePlacePoint)
		{

		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.start_time;


		final double X10_TEMP5 = System.currentTimeMillis();


		final double X10_TEMP6 = X10_TEMP5;


		final Point1 RX10_TEMP0 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP0.hashCode());


		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;


		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;


		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0,myUniquePlacePoint);


		final int RX10_TEMP4 = 0;


		final boolean RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4;

		if(RX10_TEMP5)
			{

			String RX10_TEMP6 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP6);

			}

		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3,myUniquePlacePoint);


		final int RX10_TEMP9 = 0;


		final boolean RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9;

		if(RX10_TEMP10)
			{

			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";

			throw new RuntimeException(RX10_TEMP8);

			}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP3, X10_TEMP6,myUniquePlacePoint);
		}
public static void Timer_stop ( final Timer X10_TEMP0, final int n, int myUniquePlacePoint)
		{

		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.elapsed_time;


		final double X10_TEMP5 = System.currentTimeMillis();


		final doubleRefArray1 X10_TEMP3 = X10_TEMP0.start_time;


		final Point1 RX10_TEMP0 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP0.hashCode());


		final Dist1 RX10_TEMP1 = X10_TEMP3.distValue;


		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;


		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0,myUniquePlacePoint);


		final int RX10_TEMP4 = 0;


		final boolean RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4;

		if(RX10_TEMP5)
			{

			String RX10_TEMP6 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP6);

			}

		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3,myUniquePlacePoint);


		final int RX10_TEMP9 = 0;


		final boolean RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9;

		if(RX10_TEMP10)
			{

			String RX10_TEMP8 = "Bad place access for array X10_TEMP3";

			throw new RuntimeException(RX10_TEMP8);

			}

		final double RX10_TEMP11 = Program.getRefArrayValue1double(X10_TEMP3, RX10_TEMP3,myUniquePlacePoint);


		final double X10_TEMP6 = RX10_TEMP11;


		final double X10_TEMP9 = X10_TEMP5 - X10_TEMP6;


		final double X10_TEMP10 = X10_TEMP9;


		final Point1 RX10_TEMP12 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP12.hashCode());


		final Dist1 RX10_TEMP13 = X10_TEMP1.distValue;


		final Region1 RX10_TEMP14 = RX10_TEMP13.dReg;


		final int RX10_TEMP15 = Program.searchPointInRegion1(RX10_TEMP14, RX10_TEMP12,myUniquePlacePoint);


		final int RX10_TEMP16 = 0;


		final boolean RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16;

		if(RX10_TEMP17)
			{

			String RX10_TEMP18 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP18);

			}

		final int RX10_TEMP19 = Program.getPlaceFromDist1(RX10_TEMP13, RX10_TEMP15,myUniquePlacePoint);


		final int RX10_TEMP21 = 0;


		final boolean RX10_TEMP22 = RX10_TEMP19 != RX10_TEMP21;

		if(RX10_TEMP22)
			{

			String RX10_TEMP20 = "Bad place access for array X10_TEMP1";

			throw new RuntimeException(RX10_TEMP20);

			}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP15, X10_TEMP10,myUniquePlacePoint);

		final doubleRefArray1 X10_TEMP11 = X10_TEMP0.elapsed_time;


		final doubleRefArray1 X10_TEMP13 = X10_TEMP0.elapsed_time;


		final Point1 RX10_TEMP23 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP23.hashCode());


		final Dist1 RX10_TEMP24 = X10_TEMP13.distValue;


		final Region1 RX10_TEMP25 = RX10_TEMP24.dReg;


		final int RX10_TEMP26 = Program.searchPointInRegion1(RX10_TEMP25, RX10_TEMP23,myUniquePlacePoint);


		final int RX10_TEMP27 = 0;


		final boolean RX10_TEMP28 = RX10_TEMP26 < RX10_TEMP27;

		if(RX10_TEMP28)
			{

			String RX10_TEMP29 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP29);

			}

		final int RX10_TEMP30 = Program.getPlaceFromDist1(RX10_TEMP24, RX10_TEMP26,myUniquePlacePoint);


		final int RX10_TEMP32 = 0;


		final boolean RX10_TEMP33 = RX10_TEMP30 != RX10_TEMP32;

		if(RX10_TEMP33)
			{

			String RX10_TEMP31 = "Bad place access for array X10_TEMP13";

			throw new RuntimeException(RX10_TEMP31);

			}

		final double RX10_TEMP34 = Program.getRefArrayValue1double(X10_TEMP13, RX10_TEMP26,myUniquePlacePoint);


		final double X10_TEMP15 = RX10_TEMP34;


		final int X10_TEMP16 = 1000;


		final double X10_TEMP19 = X10_TEMP15 / X10_TEMP16;


		final double X10_TEMP20 = X10_TEMP19;


		final Point1 RX10_TEMP35 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP35.hashCode());


		final Dist1 RX10_TEMP36 = X10_TEMP11.distValue;


		final Region1 RX10_TEMP37 = RX10_TEMP36.dReg;


		final int RX10_TEMP38 = Program.searchPointInRegion1(RX10_TEMP37, RX10_TEMP35,myUniquePlacePoint);


		final int RX10_TEMP39 = 0;


		final boolean RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39;

		if(RX10_TEMP40)
			{

			String RX10_TEMP41 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP41);

			}

		final int RX10_TEMP42 = Program.getPlaceFromDist1(RX10_TEMP36, RX10_TEMP38,myUniquePlacePoint);


		final int RX10_TEMP44 = 0;


		final boolean RX10_TEMP45 = RX10_TEMP42 != RX10_TEMP44;

		if(RX10_TEMP45)
			{

			String RX10_TEMP43 = "Bad place access for array X10_TEMP11";

			throw new RuntimeException(RX10_TEMP43);

			}
		Program.setRefArrayValue1double(X10_TEMP11, RX10_TEMP38, X10_TEMP20,myUniquePlacePoint);

		final doubleRefArray1 X10_TEMP21 = X10_TEMP0.total_time;


		final doubleRefArray1 X10_TEMP23 = X10_TEMP0.total_time;


		final Point1 RX10_TEMP46 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP46.hashCode());


		final Dist1 RX10_TEMP47 = X10_TEMP23.distValue;


		final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;


		final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46,myUniquePlacePoint);


		final int RX10_TEMP50 = 0;


		final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

		if(RX10_TEMP51)
			{

			String RX10_TEMP52 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP52);

			}

		final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49,myUniquePlacePoint);


		final int RX10_TEMP55 = 0;


		final boolean RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55;

		if(RX10_TEMP56)
			{

			String RX10_TEMP54 = "Bad place access for array X10_TEMP23";

			throw new RuntimeException(RX10_TEMP54);

			}

		final double RX10_TEMP57 = Program.getRefArrayValue1double(X10_TEMP23, RX10_TEMP49,myUniquePlacePoint);


		final double X10_TEMP27 = RX10_TEMP57;


		final doubleRefArray1 X10_TEMP25 = X10_TEMP0.elapsed_time;


		final Point1 RX10_TEMP58 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP58.hashCode());


		final Dist1 RX10_TEMP59 = X10_TEMP25.distValue;


		final Region1 RX10_TEMP60 = RX10_TEMP59.dReg;


		final int RX10_TEMP61 = Program.searchPointInRegion1(RX10_TEMP60, RX10_TEMP58,myUniquePlacePoint);


		final int RX10_TEMP62 = 0;


		final boolean RX10_TEMP63 = RX10_TEMP61 < RX10_TEMP62;

		if(RX10_TEMP63)
			{

			String RX10_TEMP64 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP64);

			}

		final int RX10_TEMP65 = Program.getPlaceFromDist1(RX10_TEMP59, RX10_TEMP61,myUniquePlacePoint);


		final int RX10_TEMP67 = 0;


		final boolean RX10_TEMP68 = RX10_TEMP65 != RX10_TEMP67;

		if(RX10_TEMP68)
			{

			String RX10_TEMP66 = "Bad place access for array X10_TEMP25";

			throw new RuntimeException(RX10_TEMP66);

			}

		final double RX10_TEMP69 = Program.getRefArrayValue1double(X10_TEMP25, RX10_TEMP61,myUniquePlacePoint);


		final double X10_TEMP28 = RX10_TEMP69;


		final double X10_TEMP31 = X10_TEMP27 + X10_TEMP28;


		final double X10_TEMP32 = X10_TEMP31;


		final Point1 RX10_TEMP70 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP70.hashCode());


		final Dist1 RX10_TEMP71 = X10_TEMP21.distValue;


		final Region1 RX10_TEMP72 = RX10_TEMP71.dReg;


		final int RX10_TEMP73 = Program.searchPointInRegion1(RX10_TEMP72, RX10_TEMP70,myUniquePlacePoint);


		final int RX10_TEMP74 = 0;


		final boolean RX10_TEMP75 = RX10_TEMP73 < RX10_TEMP74;

		if(RX10_TEMP75)
			{

			String RX10_TEMP76 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP76);

			}

		final int RX10_TEMP77 = Program.getPlaceFromDist1(RX10_TEMP71, RX10_TEMP73,myUniquePlacePoint);


		final int RX10_TEMP79 = 0;


		final boolean RX10_TEMP80 = RX10_TEMP77 != RX10_TEMP79;

		if(RX10_TEMP80)
			{

			String RX10_TEMP78 = "Bad place access for array X10_TEMP21";

			throw new RuntimeException(RX10_TEMP78);

			}
		Program.setRefArrayValue1double(X10_TEMP21, RX10_TEMP73, X10_TEMP32,myUniquePlacePoint);
		}
public static double Timer_readTimer ( final Timer X10_TEMP0, final int n, int myUniquePlacePoint)
		{

		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.total_time;


		final Point1 RX10_TEMP0 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP0.hashCode());


		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;


		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;


		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0,myUniquePlacePoint);


		final int RX10_TEMP4 = 0;


		final boolean RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4;

		if(RX10_TEMP5)
			{

			String RX10_TEMP6 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP6);

			}

		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3,myUniquePlacePoint);


		final int RX10_TEMP9 = 0;


		final boolean RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9;

		if(RX10_TEMP10)
			{

			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";

			throw new RuntimeException(RX10_TEMP8);

			}

		final double RX10_TEMP11 = Program.getRefArrayValue1double(X10_TEMP1, RX10_TEMP3,myUniquePlacePoint);


		final double X10_TEMP4 = RX10_TEMP11;

		return X10_TEMP4;
		}
public static void Timer_resetTimer ( final Timer X10_TEMP0, final int n, int myUniquePlacePoint)
		{

		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.total_time;


		final double X10_TEMP5 = 0;


		final double X10_TEMP6 = X10_TEMP5;


		final Point1 RX10_TEMP0 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP0.hashCode());


		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;


		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;


		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0,myUniquePlacePoint);


		final int RX10_TEMP4 = 0;


		final boolean RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4;

		if(RX10_TEMP5)
			{

			String RX10_TEMP6 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP6);

			}

		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3,myUniquePlacePoint);


		final int RX10_TEMP9 = 0;


		final boolean RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9;

		if(RX10_TEMP10)
			{

			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";

			throw new RuntimeException(RX10_TEMP8);

			}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP3, X10_TEMP6,myUniquePlacePoint);

		final doubleRefArray1 X10_TEMP7 = X10_TEMP0.start_time;


		final double X10_TEMP11 = 0;


		final double X10_TEMP12 = X10_TEMP11;


		final Point1 RX10_TEMP11 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP11.hashCode());


		final Dist1 RX10_TEMP12 = X10_TEMP7.distValue;


		final Region1 RX10_TEMP13 = RX10_TEMP12.dReg;


		final int RX10_TEMP14 = Program.searchPointInRegion1(RX10_TEMP13, RX10_TEMP11,myUniquePlacePoint);


		final int RX10_TEMP15 = 0;


		final boolean RX10_TEMP16 = RX10_TEMP14 < RX10_TEMP15;

		if(RX10_TEMP16)
			{

			String RX10_TEMP17 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP17);

			}

		final int RX10_TEMP18 = Program.getPlaceFromDist1(RX10_TEMP12, RX10_TEMP14,myUniquePlacePoint);


		final int RX10_TEMP20 = 0;


		final boolean RX10_TEMP21 = RX10_TEMP18 != RX10_TEMP20;

		if(RX10_TEMP21)
			{

			String RX10_TEMP19 = "Bad place access for array X10_TEMP7";

			throw new RuntimeException(RX10_TEMP19);

			}
		Program.setRefArrayValue1double(X10_TEMP7, RX10_TEMP14, X10_TEMP12,myUniquePlacePoint);

		final doubleRefArray1 X10_TEMP13 = X10_TEMP0.elapsed_time;


		final double X10_TEMP17 = 0;


		final double X10_TEMP18 = X10_TEMP17;


		final Point1 RX10_TEMP22 = new Point1(n,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP22.hashCode());


		final Dist1 RX10_TEMP23 = X10_TEMP13.distValue;


		final Region1 RX10_TEMP24 = RX10_TEMP23.dReg;


		final int RX10_TEMP25 = Program.searchPointInRegion1(RX10_TEMP24, RX10_TEMP22,myUniquePlacePoint);


		final int RX10_TEMP26 = 0;


		final boolean RX10_TEMP27 = RX10_TEMP25 < RX10_TEMP26;

		if(RX10_TEMP27)
			{

			String RX10_TEMP28 = "Array index out of bounds";

			throw new RuntimeException(RX10_TEMP28);

			}

		final int RX10_TEMP29 = Program.getPlaceFromDist1(RX10_TEMP23, RX10_TEMP25,myUniquePlacePoint);


		final int RX10_TEMP31 = 0;


		final boolean RX10_TEMP32 = RX10_TEMP29 != RX10_TEMP31;

		if(RX10_TEMP32)
			{

			String RX10_TEMP30 = "Bad place access for array X10_TEMP13";

			throw new RuntimeException(RX10_TEMP30);

			}
		Program.setRefArrayValue1double(X10_TEMP13, RX10_TEMP25, X10_TEMP18,myUniquePlacePoint);
		}
public static void Timer_resetAllTimers ( final Timer X10_TEMP0, int myUniquePlacePoint)
		{

		int i = 0;


		boolean X10_TEMP4 = i < _Timer_max_counters;

		while(X10_TEMP4)
			{
			Program.Timer_resetTimer(X10_TEMP0, i,myUniquePlacePoint);

			final int X10_TEMP6 = i;


			final int X10_TEMP7 = 1;


			i = i + X10_TEMP7;


			X10_TEMP4 = i < _Timer_max_counters;

			}
		}
public static boolean _X10Util_DEBUG_init (  int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = true;

		return X10_TEMP2;
		}
public static boolean _X10Util_ENABLE_CHECKS_init (  int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = true;

		return X10_TEMP2;
		}
public static double _X10Util_ERROR_init (  int myUniquePlacePoint)
		{

		final double X10_TEMP2 = 1.0e-13;

		return X10_TEMP2;
		}
public static double X10Util_maxDouble ( final double d1, final double d2, int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = d1 >= d2;


		final boolean X10_TEMP3 = X10_TEMP2;


		double X10_TEMP6 = d2;

		if(X10_TEMP3)
			{

			X10_TEMP6 = d1;

			}

		final double X10_TEMP7 = X10_TEMP6;

		return X10_TEMP7;
		}
public static double X10Util_minDouble ( final double d1, final double d2, int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = d1 >= d2;


		final boolean X10_TEMP3 = X10_TEMP2;


		double X10_TEMP6 = d1;

		if(X10_TEMP3)
			{

			X10_TEMP6 = d2;

			}

		final double X10_TEMP7 = X10_TEMP6;

		return X10_TEMP7;
		}
public static int X10Util_maxInt ( final int i1, final int i2, int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = i1 >= i2;


		final boolean X10_TEMP3 = X10_TEMP2;


		int X10_TEMP6 = i2;

		if(X10_TEMP3)
			{

			X10_TEMP6 = i1;

			}

		final int X10_TEMP7 = X10_TEMP6;

		return X10_TEMP7;
		}
public static int X10Util_minInt ( final int i1, final int i2, int myUniquePlacePoint)
		{

		final boolean X10_TEMP2 = i1 >= i2;


		final boolean X10_TEMP3 = X10_TEMP2;


		int X10_TEMP6 = i1;

		if(X10_TEMP3)
			{

			X10_TEMP6 = i2;

			}

		final int X10_TEMP7 = X10_TEMP6;

		return X10_TEMP7;
		}
public static Region2 X10Util_prependRegionRank2D ( final Region1 r1, final Region1 r2, int myUniquePlacePoint)
		{

		final Region2 X10_TEMP4 = Program.X10Util_extendRegionRank2D(r1, r2,myUniquePlacePoint);

		return X10_TEMP4;
		}
public static Region3 X10Util_prependRegionRank3D ( final Region1 r1, final Region2 r2, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final Region1 X10_TEMP6 = Program.X10Util_getRank2D(r2, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP9 = 1;


		final Region1 X10_TEMP11 = Program.X10Util_getRank2D(r2, X10_TEMP9,myUniquePlacePoint);


		final Region3 X10_TEMP13 = Program.createNewRegion3AAA(r1, X10_TEMP6, X10_TEMP11,myUniquePlacePoint);

		return X10_TEMP13;
		}
public static Region2 X10Util_extendRegionRank2D ( final Region1 r1, final Region1 r2, int myUniquePlacePoint)
		{

		final Region2 X10_TEMP4 = Program.createNewRegion2AA(r1, r2,myUniquePlacePoint);

		return X10_TEMP4;
		}
public static Region3 X10Util_extendRegionRank3D ( final Region2 r1, final Region1 r2, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 0;


		final Region1 X10_TEMP5 = Program.X10Util_getRank2D(r1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP8 = 1;


		final Region1 X10_TEMP10 = Program.X10Util_getRank2D(r1, X10_TEMP8,myUniquePlacePoint);


		final Region3 X10_TEMP13 = Program.createNewRegion3AAA(X10_TEMP5, X10_TEMP10, r2,myUniquePlacePoint);

		return X10_TEMP13;
		}
public static Dist2 X10Util_prependDistRank2D ( final Region1 r1, final Dist1 d2, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region2 X10_TEMP4 = Program.createNewRegion2RR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist2 X10_TEMP7 = Program.getPlaceDist2(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist1 X10_TEMP15 = Program.restrictDist1(d2, p,myUniquePlacePoint);


			final Region1 RX10_TEMP12 = X10_TEMP15.dReg;


			final Region1 X10_TEMP16 = RX10_TEMP12;


			final Region1 rLocal = X10_TEMP16;


			final Region2 X10_TEMP20 = Program.X10Util_prependRegionRank2D(r1, rLocal,myUniquePlacePoint);


			final Dist2 X10_TEMP22 = Program.getPlaceDist2(X10_TEMP20, p,myUniquePlacePoint);


			final Dist2 X10_TEMP24 = Program.unionDist2(dResult, X10_TEMP22,myUniquePlacePoint);


			dResult = X10_TEMP24;

			}
		return dResult;
		}
public static Dist3 X10Util_prependDistRank3D ( final Region1 r1, final Dist2 d2, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region3 X10_TEMP4 = Program.createNewRegion3RRR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist3 X10_TEMP7 = Program.getPlaceDist3(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist3 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist2 X10_TEMP15 = Program.restrictDist2(d2, p,myUniquePlacePoint);


			final Region2 RX10_TEMP12 = X10_TEMP15.dReg;


			final Region2 X10_TEMP16 = RX10_TEMP12;


			final Region2 rLocal = X10_TEMP16;


			final Region3 X10_TEMP20 = Program.X10Util_prependRegionRank3D(r1, rLocal,myUniquePlacePoint);


			final Dist3 X10_TEMP22 = Program.getPlaceDist3(X10_TEMP20, p,myUniquePlacePoint);


			final Dist3 X10_TEMP24 = Program.unionDist3(dResult, X10_TEMP22,myUniquePlacePoint);


			dResult = X10_TEMP24;

			}
		return dResult;
		}
public static Dist2 X10Util_extendDistRank2D ( final Dist1 d1, final Region1 r2, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region2 X10_TEMP4 = Program.createNewRegion2RR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist2 X10_TEMP7 = Program.getPlaceDist2(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist1 X10_TEMP15 = Program.restrictDist1(d1, p,myUniquePlacePoint);


			final Region1 RX10_TEMP12 = X10_TEMP15.dReg;


			final Region1 X10_TEMP16 = RX10_TEMP12;


			final Region1 rLocal = X10_TEMP16;


			final Region2 X10_TEMP20 = Program.X10Util_extendRegionRank2D(rLocal, r2,myUniquePlacePoint);


			final Dist2 X10_TEMP22 = Program.getPlaceDist2(X10_TEMP20, p,myUniquePlacePoint);


			final Dist2 X10_TEMP24 = Program.unionDist2(dResult, X10_TEMP22,myUniquePlacePoint);


			dResult = X10_TEMP24;

			}
		return dResult;
		}
public static Dist3 X10Util_extendDistRank3D ( final Dist2 d1, final Region1 r2, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region3 X10_TEMP4 = Program.createNewRegion3RRR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist3 X10_TEMP7 = Program.getPlaceDist3(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist3 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist2 X10_TEMP15 = Program.restrictDist2(d1, p,myUniquePlacePoint);


			final Region2 RX10_TEMP12 = X10_TEMP15.dReg;


			final Region2 X10_TEMP16 = RX10_TEMP12;


			final Region2 rLocal = X10_TEMP16;


			final Region3 X10_TEMP20 = Program.X10Util_extendRegionRank3D(rLocal, r2,myUniquePlacePoint);


			final Dist3 X10_TEMP22 = Program.getPlaceDist3(X10_TEMP20, p,myUniquePlacePoint);


			final Dist3 X10_TEMP24 = Program.unionDist3(dResult, X10_TEMP22,myUniquePlacePoint);


			dResult = X10_TEMP24;

			}
		return dResult;
		}
public static Dist1 X10Util_distBlock ( final Region1 r, int myUniquePlacePoint)
		{

		final int RX10_TEMP0 = r.regSize;


		final int RX10_TEMP1 = 0;


		final boolean RX10_TEMP2 = RX10_TEMP0 <= RX10_TEMP1;

		if(RX10_TEMP2)
			{

			final String RX10_TEMP3 = "Operation low() not defined on empty region r";

			throw new RuntimeException(RX10_TEMP3);

			}

		final int X10_TEMP1 = Program.regionLow(r,myUniquePlacePoint);


		final int X10_TEMP2 = 0;


		final boolean X10_TEMP4 = X10_TEMP1 != X10_TEMP2;

		if(X10_TEMP4)
			{

			final String X10_TEMP6 = "distBlock only applies to rails";

			throw new RuntimeException(X10_TEMP6);

			}

		final int RX10_TEMP4 = r.regSize;


		final int RX10_TEMP5 = 0;


		final boolean RX10_TEMP6 = RX10_TEMP4 <= RX10_TEMP5;

		if(RX10_TEMP6)
			{

			final String RX10_TEMP7 = "Operation high() not defined on empty region r";

			throw new RuntimeException(RX10_TEMP7);

			}

		final int X10_TEMP9 = Program.regionHigh(r,myUniquePlacePoint);


		final int X10_TEMP7 = r.regSize;


		final int X10_TEMP8 = 1;


		final int X10_TEMP10 = X10_TEMP7 - X10_TEMP8;


		final boolean X10_TEMP12 = X10_TEMP9 != X10_TEMP10;

		if(X10_TEMP12)
			{

			final String X10_TEMP14 = "distblock only applies to rails";

			throw new RuntimeException(X10_TEMP14);

			}

		final int X10_TEMP15 = r.regSize;


		final int X10_TEMP16 = 1;


		int blockSize = X10_TEMP15 / X10_TEMP16;


		final int X10_TEMP18 = 0;


		final int X10_TEMP19 = 1;


		final int X10_TEMP20 = X10_TEMP18 - X10_TEMP19;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP18, X10_TEMP20,myUniquePlacePoint);


		final int X10_TEMP22 = 0;


		final Dist1 X10_TEMP24 = Program.getPlaceDist1(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


		Dist1 dResult = X10_TEMP24;


		final Dist1 X10_TEMP27 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP9 = X10_TEMP27.dReg;


		final int RX10_TEMP12 = 1;


		int RX10_TEMP10 = RX10_TEMP9.regSize;


		RX10_TEMP10 = RX10_TEMP10 - RX10_TEMP12;


		final int  RX10_TEMP11 = RX10_TEMP10+1;

		for(int RX10_TEMP8=0; RX10_TEMP8 < RX10_TEMP11; RX10_TEMP8++)
			{

			final int RX10_TEMP13 = RX10_TEMP8;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP9, RX10_TEMP13,myUniquePlacePoint);


			final Dist1 X10_TEMP28 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP14 = X10_TEMP28.dReg;


			final int RX10_TEMP15 = Program.searchPointInRegion1(RX10_TEMP14, pl,myUniquePlacePoint);


			final int RX10_TEMP16 = 0;


			final boolean RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16;

			if(RX10_TEMP17)
				{

				final String RX10_TEMP18 = "Point pl not found in the distribution X10_TEMP28.";

				throw new RuntimeException(RX10_TEMP18);

				}

			final int RX10_TEMP19 = Program.getPlaceFromDist1(X10_TEMP28, RX10_TEMP15,myUniquePlacePoint);


			final int p = RX10_TEMP19;


			final int X10_TEMP32 = pl.f0;


			final int X10_TEMP43 = X10_TEMP32 * blockSize;


			final int X10_TEMP35 = pl.f0;


			final int X10_TEMP36 = 1;


			final int X10_TEMP38 = X10_TEMP35 + X10_TEMP36;


			final int X10_TEMP40 = X10_TEMP38 * blockSize;


			final int X10_TEMP41 = 1;


			final int X10_TEMP44 = X10_TEMP40 - X10_TEMP41;


			final Region1 X10_TEMP45 = Program.createNewRegion1R(X10_TEMP43, X10_TEMP44,myUniquePlacePoint);


			final Dist1 X10_TEMP47 = Program.getPlaceDist1(X10_TEMP45, p,myUniquePlacePoint);


			Dist1 ext = X10_TEMP47;


			final Dist1 X10_TEMP50 = Program.unionDist1(dResult, ext,myUniquePlacePoint);


			dResult = X10_TEMP50;

			}

		final int X10_TEMP52 = r.regSize;


		final int X10_TEMP51 = 1;


		final int X10_TEMP53 = blockSize * X10_TEMP51;


		int diff = X10_TEMP52 - X10_TEMP53;


		final int X10_TEMP55 = 1;


		final int X10_TEMP56 = blockSize * X10_TEMP55;


		final int X10_TEMP57 = r.regSize;


		final boolean X10_TEMP59 = X10_TEMP56 != X10_TEMP57;

		if(X10_TEMP59)
			{

			final int X10_TEMP60 = 1;


			final int X10_TEMP61 = 1;


			final int X10_TEMP63 = X10_TEMP60 - X10_TEMP61;


			int l = 0;


			final int X10_TEMP65 = r.regSize;


			final int X10_TEMP70 = X10_TEMP65 - diff;


			final int X10_TEMP67 = r.regSize;


			final int X10_TEMP68 = 1;


			final int X10_TEMP71 = X10_TEMP67 - X10_TEMP68;


			final Region1 X10_TEMP72 = Program.createNewRegion1R(X10_TEMP70, X10_TEMP71,myUniquePlacePoint);


			final Dist1 X10_TEMP74 = Program.getPlaceDist1(X10_TEMP72, l,myUniquePlacePoint);


			Dist1 ext = X10_TEMP74;


			final Dist1 X10_TEMP77 = Program.unionDist1(dResult, ext,myUniquePlacePoint);


			dResult = X10_TEMP77;

			}
		return dResult;
		}
public static Dist2 X10Util_distBlockStar1 ( final Region2 r, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 0;


		final Region1 r1 = Program.X10Util_getRank2D(r, X10_TEMP3,myUniquePlacePoint);


		final Dist1 d1 = Program.X10Util_distBlock(r1,myUniquePlacePoint);


		final int X10_TEMP10 = 1;


		final Region1 X10_TEMP12 = Program.X10Util_getRank2D(r, X10_TEMP10,myUniquePlacePoint);


		final Dist2 X10_TEMP14 = Program.X10Util_extendDistRank2D(d1, X10_TEMP12,myUniquePlacePoint);

		return X10_TEMP14;
		}
public static Dist2 X10Util_distBlockStar2 ( final Region1 r1, final Region1 r2, int myUniquePlacePoint)
		{

		final Region2 X10_TEMP4 = Program.createNewRegion2AA(r1, r2,myUniquePlacePoint);


		final Dist2 X10_TEMP6 = Program.X10Util_distBlockStar1(X10_TEMP4,myUniquePlacePoint);

		return X10_TEMP6;
		}
public static Dist2 X10Util_distStarBlock1 ( final Region2 r, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 1;


		final Region1 r2 = Program.X10Util_getRank2D(r, X10_TEMP3,myUniquePlacePoint);


		final Dist1 d2 = Program.X10Util_distBlock(r2,myUniquePlacePoint);


		final int X10_TEMP9 = 0;


		final Region1 X10_TEMP12 = Program.X10Util_getRank2D(r, X10_TEMP9,myUniquePlacePoint);


		final Dist2 X10_TEMP14 = Program.X10Util_prependDistRank2D(X10_TEMP12, d2,myUniquePlacePoint);

		return X10_TEMP14;
		}
public static Dist2 X10Util_distStarBlock2 ( final Region1 r1, final Region1 r2, int myUniquePlacePoint)
		{

		final Region2 X10_TEMP4 = Program.createNewRegion2AA(r1, r2,myUniquePlacePoint);


		final Dist2 X10_TEMP6 = Program.X10Util_distStarBlock1(X10_TEMP4,myUniquePlacePoint);

		return X10_TEMP6;
		}
public static boolean X10Util_isDistBlockStar ( final Dist2 d, int myUniquePlacePoint)
		{
		if(_X10Util_ENABLE_CHECKS)
			{

			final Region2 RX10_TEMP0 = d.dReg;


			final Region2 rd = RX10_TEMP0;


			final int X10_TEMP5 = 0;


			final Region1 r1 = Program.X10Util_getRank2D(rd, X10_TEMP5,myUniquePlacePoint);


			final int X10_TEMP9 = 1;


			final Region1 r2 = Program.X10Util_getRank2D(rd, X10_TEMP9,myUniquePlacePoint);


			final Dist1 X10_TEMP12 = Program.getBlockDist1(r1,myUniquePlacePoint);


			final Dist1 dRef = X10_TEMP12;


			final Dist1 X10_TEMP15 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP2 = X10_TEMP15.dReg;


			final int RX10_TEMP5 = 1;


			int RX10_TEMP3 = RX10_TEMP2.regSize;


			RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5;


			final int  RX10_TEMP4 = RX10_TEMP3+1;

			for(int RX10_TEMP1=0; RX10_TEMP1 < RX10_TEMP4; RX10_TEMP1++)
				{

				final int RX10_TEMP6 = RX10_TEMP1;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP2, RX10_TEMP6,myUniquePlacePoint);


				final Dist1 X10_TEMP16 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP7 = X10_TEMP16.dReg;


				final int RX10_TEMP8 = Program.searchPointInRegion1(RX10_TEMP7, pl,myUniquePlacePoint);


				final int RX10_TEMP9 = 0;


				final boolean RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9;

				if(RX10_TEMP10)
					{

					final String RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP16.";

					throw new RuntimeException(RX10_TEMP11);

					}

				final int RX10_TEMP12 = Program.getPlaceFromDist1(X10_TEMP16, RX10_TEMP8,myUniquePlacePoint);


				final int p = RX10_TEMP12;


				final Dist2 X10_TEMP20 = Program.restrictDist2(d, p,myUniquePlacePoint);


				final Region2 RX10_TEMP13 = X10_TEMP20.dReg;


				final Region2 X10_TEMP21 = RX10_TEMP13;


				final Region2 rLocal = X10_TEMP21;


				final Dist1 X10_TEMP24 = Program.restrictDist1(dRef, p,myUniquePlacePoint);


				final Region1 RX10_TEMP14 = X10_TEMP24.dReg;


				final Region1 X10_TEMP25 = RX10_TEMP14;


				final Region1 rRefLocal = X10_TEMP25;


				final int X10_TEMP29 = 0;


				final Region1 X10_TEMP31 = Program.X10Util_getRank2D(rLocal, X10_TEMP29,myUniquePlacePoint);


				final int X10_TEMP34 = 0;


				final boolean X10_TEMP35 = false;


				final int X10_TEMP32 = X10_TEMP31.regSize;


				final int X10_TEMP33 = rRefLocal.regSize;


				boolean X10_TEMP36 = X10_TEMP32 == X10_TEMP33;

				if(X10_TEMP36)
					{

					final Region1 X10_TEMP37 = Program.createNewRegion1R(X10_TEMP34, X10_TEMP34,myUniquePlacePoint);


					final int X10_TEMP38 = 0;


					final Dist1 X10_TEMP39 = Program.getPlaceDist1(X10_TEMP37, X10_TEMP38,myUniquePlacePoint);


					final Region1 RX10_TEMP15 = X10_TEMP39.dReg;


					final int RX10_TEMP16 = 0;


					final int RX10_TEMP17 = 1;


					int RX10_TEMP18 = 1;


					RX10_TEMP18 = RX10_TEMP18 - RX10_TEMP17;


					final int  RX10_TEMP19 = RX10_TEMP18+1;


					final int RX10_TEMP20 = RX10_TEMP18+1;


					final booleanStub[] RX10_TEMP21 = new booleanStub[RX10_TEMP20];

					/*FINISH
*/						{
						for(int RX10_TEMP22=0; RX10_TEMP22 < RX10_TEMP19; RX10_TEMP22++)
							{

							final int RX10_TEMP23 = 0;


							final int RX10_TEMP24 = RX10_TEMP22;


							final int RX10_TEMP25 = 0;


							final int RX10_TEMP26 = Program.getDistLocalCount1(X10_TEMP39, RX10_TEMP24,myUniquePlacePoint);


							final int RX10_TEMP27 = RX10_TEMP26 - RX10_TEMP17;

							//async(RX10_TEMP25)
								{

								final int RX10_TEMP29 = RX10_TEMP27+1;


								final boolean[] RX10_TEMP30 = new boolean/*NewUpdatableArray*/[RX10_TEMP29];
/*arrayInitBlock*/
for(int RX10_TEMP28= 0;RX10_TEMP28 <RX10_TEMP30.length ;RX10_TEMP28++ )									{

									final boolean X10_TEMP42 = true;

									RX10_TEMP30[RX10_TEMP28] =X10_TEMP42;
									}

;


								final booleanStub RX10_TEMP31 = new booleanStub(RX10_TEMP30,RX10_TEMP25);
								
Program.globalPointerHashMap.get(RX10_TEMP25).add(RX10_TEMP31.hashCode());

								//async(RX10_TEMP23)
									{
									RX10_TEMP21[RX10_TEMP22] = RX10_TEMP31;
									}
								}
							}
						}

					final booleanStub[] RX10_TEMP32 = (booleanStub[])(new booleanStub/*value*/[RX10_TEMP19]);
/*arrayInitBlock*/
for(int RX10_TEMP34= 0;RX10_TEMP34 <RX10_TEMP32.length ;RX10_TEMP34++ )						{

						final booleanStub RX10_TEMP33 = RX10_TEMP21[RX10_TEMP34];

						RX10_TEMP32[RX10_TEMP34] =RX10_TEMP33;
						}

;


					final booleanRefArray1 RX10_TEMP35 = new booleanRefArray1(X10_TEMP39, RX10_TEMP32,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP35.hashCode());


					final booleanRefArray1 X10_TEMP40 = RX10_TEMP35;

					/*FINISH
*/						{

						final int RX10_TEMP39 = 1;


						int RX10_TEMP37 = X10_TEMP31.regSize;


						RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39;


						final int  RX10_TEMP38 = RX10_TEMP37+1;

						for(int RX10_TEMP36=0; RX10_TEMP36 < RX10_TEMP38; RX10_TEMP36++)
							{

							final int RX10_TEMP40 = RX10_TEMP36;


							final Point1 X10_TEMP43 = Program.regionOrdinalPoint1(X10_TEMP31, RX10_TEMP40,myUniquePlacePoint);

							//async(X10_TEMP38)
								{

								final boolean RX10_TEMP41 = Program.regionContainsPoint1(rRefLocal, X10_TEMP43,X10_TEMP38);


								boolean X10_TEMP44 = RX10_TEMP41;


								X10_TEMP44 = ! X10_TEMP44;

								if(X10_TEMP44)
									{

									final Point1 RX10_TEMP42 = new Point1(X10_TEMP34,X10_TEMP38);
									
Program.globalPointerHashMap.get(X10_TEMP38).add(RX10_TEMP42.hashCode());


									final Dist1 RX10_TEMP43 = X10_TEMP40.distValue;


									final Region1 RX10_TEMP44 = RX10_TEMP43.dReg;


									final int RX10_TEMP45 = Program.searchPointInRegion1(RX10_TEMP44, RX10_TEMP42,X10_TEMP38);


									final int RX10_TEMP46 = 0;


									final boolean RX10_TEMP47 = RX10_TEMP45 < RX10_TEMP46;

									if(RX10_TEMP47)
										{

										String RX10_TEMP48 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP48);

										}

									final int RX10_TEMP49 = Program.getPlaceFromDist1(RX10_TEMP43, RX10_TEMP45,X10_TEMP38);


									final int RX10_TEMP51 = 0;


									final boolean RX10_TEMP52 = RX10_TEMP49 != RX10_TEMP51;

									if(RX10_TEMP52)
										{

										String RX10_TEMP50 = "Bad place access for array X10_TEMP40";

										throw new RuntimeException(RX10_TEMP50);

										}
									Program.setRefArrayValue1boolean(X10_TEMP40, RX10_TEMP45, X10_TEMP35,X10_TEMP38);
									}
								}
							}
						}

					final Point1 RX10_TEMP53 = new Point1(X10_TEMP34,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP53.hashCode());


					final Dist1 RX10_TEMP54 = X10_TEMP40.distValue;


					final Region1 RX10_TEMP55 = RX10_TEMP54.dReg;


					final int RX10_TEMP56 = Program.searchPointInRegion1(RX10_TEMP55, RX10_TEMP53,myUniquePlacePoint);


					final int RX10_TEMP57 = 0;


					final boolean RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57;

					if(RX10_TEMP58)
						{

						String RX10_TEMP59 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP59);

						}

					final int RX10_TEMP60 = Program.getPlaceFromDist1(RX10_TEMP54, RX10_TEMP56,myUniquePlacePoint);


					final int RX10_TEMP62 = 0;


					final boolean RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62;

					if(RX10_TEMP63)
						{

						String RX10_TEMP61 = "Bad place access for array X10_TEMP40";

						throw new RuntimeException(RX10_TEMP61);

						}

					final boolean RX10_TEMP64 = Program.getRefArrayValue1boolean(X10_TEMP40, RX10_TEMP56,myUniquePlacePoint);


					X10_TEMP36 = RX10_TEMP64;

					}

				final boolean X10_TEMP45 = X10_TEMP36;


				final boolean X10_TEMP47 = X10_TEMP45;


				final boolean X10_TEMP49 = ! X10_TEMP47;

				if(X10_TEMP49)
					{

					final boolean X10_TEMP51 = false;

					return X10_TEMP51;
					}
				else
					{

					final int X10_TEMP54 = 1;


					final Region1 X10_TEMP56 = Program.X10Util_getRank2D(rLocal, X10_TEMP54,myUniquePlacePoint);


					final int X10_TEMP59 = 0;


					final boolean X10_TEMP60 = false;


					final int X10_TEMP57 = X10_TEMP56.regSize;


					final int X10_TEMP58 = r2.regSize;


					boolean X10_TEMP61 = X10_TEMP57 == X10_TEMP58;

					if(X10_TEMP61)
						{

						final Region1 X10_TEMP62 = Program.createNewRegion1R(X10_TEMP59, X10_TEMP59,myUniquePlacePoint);


						final int X10_TEMP63 = 0;


						final Dist1 X10_TEMP64 = Program.getPlaceDist1(X10_TEMP62, X10_TEMP63,myUniquePlacePoint);


						final Region1 RX10_TEMP65 = X10_TEMP64.dReg;


						final int RX10_TEMP66 = 0;


						final int RX10_TEMP67 = 1;


						int RX10_TEMP68 = 1;


						RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67;


						final int  RX10_TEMP69 = RX10_TEMP68+1;


						final int RX10_TEMP70 = RX10_TEMP68+1;


						final booleanStub[] RX10_TEMP71 = new booleanStub[RX10_TEMP70];

						/*FINISH
*/							{
							for(int RX10_TEMP72=0; RX10_TEMP72 < RX10_TEMP69; RX10_TEMP72++)
								{

								final int RX10_TEMP73 = 0;


								final int RX10_TEMP74 = RX10_TEMP72;


								final int RX10_TEMP75 = 0;


								final int RX10_TEMP76 = Program.getDistLocalCount1(X10_TEMP64, RX10_TEMP74,myUniquePlacePoint);


								final int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67;

								//async(RX10_TEMP75)
									{

									final int RX10_TEMP79 = RX10_TEMP77+1;


									final boolean[] RX10_TEMP80 = new boolean/*NewUpdatableArray*/[RX10_TEMP79];
/*arrayInitBlock*/
for(int RX10_TEMP78= 0;RX10_TEMP78 <RX10_TEMP80.length ;RX10_TEMP78++ )										{

										final boolean X10_TEMP67 = true;

										RX10_TEMP80[RX10_TEMP78] =X10_TEMP67;
										}

;


									final booleanStub RX10_TEMP81 = new booleanStub(RX10_TEMP80,RX10_TEMP75);
									
Program.globalPointerHashMap.get(RX10_TEMP75).add(RX10_TEMP81.hashCode());

									//async(RX10_TEMP73)
										{
										RX10_TEMP71[RX10_TEMP72] = RX10_TEMP81;
										}
									}
								}
							}

						final booleanStub[] RX10_TEMP82 = (booleanStub[])(new booleanStub/*value*/[RX10_TEMP69]);
/*arrayInitBlock*/
for(int RX10_TEMP84= 0;RX10_TEMP84 <RX10_TEMP82.length ;RX10_TEMP84++ )							{

							final booleanStub RX10_TEMP83 = RX10_TEMP71[RX10_TEMP84];

							RX10_TEMP82[RX10_TEMP84] =RX10_TEMP83;
							}

;


						final booleanRefArray1 RX10_TEMP85 = new booleanRefArray1(X10_TEMP64, RX10_TEMP82,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP85.hashCode());


						final booleanRefArray1 X10_TEMP65 = RX10_TEMP85;

						/*FINISH
*/							{

							final int RX10_TEMP89 = 1;


							int RX10_TEMP87 = X10_TEMP56.regSize;


							RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP89;


							final int  RX10_TEMP88 = RX10_TEMP87+1;

							for(int RX10_TEMP86=0; RX10_TEMP86 < RX10_TEMP88; RX10_TEMP86++)
								{

								final int RX10_TEMP90 = RX10_TEMP86;


								final Point1 X10_TEMP68 = Program.regionOrdinalPoint1(X10_TEMP56, RX10_TEMP90,myUniquePlacePoint);

								//async(X10_TEMP63)
									{

									final boolean RX10_TEMP91 = Program.regionContainsPoint1(r2, X10_TEMP68,X10_TEMP63);


									boolean X10_TEMP69 = RX10_TEMP91;


									X10_TEMP69 = ! X10_TEMP69;

									if(X10_TEMP69)
										{

										final Point1 RX10_TEMP92 = new Point1(X10_TEMP59,X10_TEMP63);
										
Program.globalPointerHashMap.get(X10_TEMP63).add(RX10_TEMP92.hashCode());


										final Dist1 RX10_TEMP93 = X10_TEMP65.distValue;


										final Region1 RX10_TEMP94 = RX10_TEMP93.dReg;


										final int RX10_TEMP95 = Program.searchPointInRegion1(RX10_TEMP94, RX10_TEMP92,X10_TEMP63);


										final int RX10_TEMP96 = 0;


										final boolean RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96;

										if(RX10_TEMP97)
											{

											String RX10_TEMP98 = "Array index out of bounds";

											throw new RuntimeException(RX10_TEMP98);

											}

										final int RX10_TEMP99 = Program.getPlaceFromDist1(RX10_TEMP93, RX10_TEMP95,X10_TEMP63);


										final int RX10_TEMP101 = 0;


										final boolean RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101;

										if(RX10_TEMP102)
											{

											String RX10_TEMP100 = "Bad place access for array X10_TEMP65";

											throw new RuntimeException(RX10_TEMP100);

											}
										Program.setRefArrayValue1boolean(X10_TEMP65, RX10_TEMP95, X10_TEMP60,X10_TEMP63);
										}
									}
								}
							}

						final Point1 RX10_TEMP103 = new Point1(X10_TEMP59,myUniquePlacePoint);
						
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP103.hashCode());


						final Dist1 RX10_TEMP104 = X10_TEMP65.distValue;


						final Region1 RX10_TEMP105 = RX10_TEMP104.dReg;


						final int RX10_TEMP106 = Program.searchPointInRegion1(RX10_TEMP105, RX10_TEMP103,myUniquePlacePoint);


						final int RX10_TEMP107 = 0;


						final boolean RX10_TEMP108 = RX10_TEMP106 < RX10_TEMP107;

						if(RX10_TEMP108)
							{

							String RX10_TEMP109 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP109);

							}

						final int RX10_TEMP110 = Program.getPlaceFromDist1(RX10_TEMP104, RX10_TEMP106,myUniquePlacePoint);


						final int RX10_TEMP112 = 0;


						final boolean RX10_TEMP113 = RX10_TEMP110 != RX10_TEMP112;

						if(RX10_TEMP113)
							{

							String RX10_TEMP111 = "Bad place access for array X10_TEMP65";

							throw new RuntimeException(RX10_TEMP111);

							}

						final boolean RX10_TEMP114 = Program.getRefArrayValue1boolean(X10_TEMP65, RX10_TEMP106,myUniquePlacePoint);


						X10_TEMP61 = RX10_TEMP114;

						}

					final boolean X10_TEMP70 = X10_TEMP61;


					final boolean X10_TEMP72 = X10_TEMP70;


					final boolean X10_TEMP74 = ! X10_TEMP72;

					if(X10_TEMP74)
						{

						final int X10_TEMP75 = rRefLocal.regSize;


						final int X10_TEMP76 = 0;


						final boolean X10_TEMP78 = X10_TEMP75 > X10_TEMP76;

						if(X10_TEMP78)
							{

							final boolean X10_TEMP80 = false;

							return X10_TEMP80;
							}
						}
					}
 				}
			}

		final boolean X10_TEMP82 = true;

		return X10_TEMP82;
		}
public static boolean X10Util_isDistStarBlock ( final Dist2 d, int myUniquePlacePoint)
		{
		if(_X10Util_ENABLE_CHECKS)
			{

			final Region2 RX10_TEMP0 = d.dReg;


			final Region2 rd = RX10_TEMP0;


			final int X10_TEMP5 = 0;


			final Region1 r1 = Program.X10Util_getRank2D(rd, X10_TEMP5,myUniquePlacePoint);


			final int X10_TEMP9 = 1;


			final Region1 r2 = Program.X10Util_getRank2D(rd, X10_TEMP9,myUniquePlacePoint);


			final Dist1 X10_TEMP12 = Program.getBlockDist1(r2,myUniquePlacePoint);


			final Dist1 dRef = X10_TEMP12;


			final Dist1 X10_TEMP15 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP2 = X10_TEMP15.dReg;


			final int RX10_TEMP5 = 1;


			int RX10_TEMP3 = RX10_TEMP2.regSize;


			RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5;


			final int  RX10_TEMP4 = RX10_TEMP3+1;

			for(int RX10_TEMP1=0; RX10_TEMP1 < RX10_TEMP4; RX10_TEMP1++)
				{

				final int RX10_TEMP6 = RX10_TEMP1;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP2, RX10_TEMP6,myUniquePlacePoint);


				final Dist1 X10_TEMP16 = Program.getUniqueDist(myUniquePlacePoint);


				final Region1 RX10_TEMP7 = X10_TEMP16.dReg;


				final int RX10_TEMP8 = Program.searchPointInRegion1(RX10_TEMP7, pl,myUniquePlacePoint);


				final int RX10_TEMP9 = 0;


				final boolean RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9;

				if(RX10_TEMP10)
					{

					final String RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP16.";

					throw new RuntimeException(RX10_TEMP11);

					}

				final int RX10_TEMP12 = Program.getPlaceFromDist1(X10_TEMP16, RX10_TEMP8,myUniquePlacePoint);


				final int p = RX10_TEMP12;


				final Dist2 X10_TEMP20 = Program.restrictDist2(d, p,myUniquePlacePoint);


				final Region2 RX10_TEMP13 = X10_TEMP20.dReg;


				final Region2 X10_TEMP21 = RX10_TEMP13;


				final Region2 rLocal = X10_TEMP21;


				final Dist1 X10_TEMP24 = Program.restrictDist1(dRef, p,myUniquePlacePoint);


				final Region1 RX10_TEMP14 = X10_TEMP24.dReg;


				final Region1 X10_TEMP25 = RX10_TEMP14;


				final Region1 rRefLocal = X10_TEMP25;


				final int X10_TEMP29 = 0;


				final Region1 X10_TEMP31 = Program.X10Util_getRank2D(rLocal, X10_TEMP29,myUniquePlacePoint);


				final int X10_TEMP34 = 0;


				final boolean X10_TEMP35 = false;


				final int X10_TEMP32 = X10_TEMP31.regSize;


				final int X10_TEMP33 = r1.regSize;


				boolean X10_TEMP36 = X10_TEMP32 == X10_TEMP33;

				if(X10_TEMP36)
					{

					final Region1 X10_TEMP37 = Program.createNewRegion1R(X10_TEMP34, X10_TEMP34,myUniquePlacePoint);


					final int X10_TEMP38 = 0;


					final Dist1 X10_TEMP39 = Program.getPlaceDist1(X10_TEMP37, X10_TEMP38,myUniquePlacePoint);


					final Region1 RX10_TEMP15 = X10_TEMP39.dReg;


					final int RX10_TEMP16 = 0;


					final int RX10_TEMP17 = 1;


					int RX10_TEMP18 = 1;


					RX10_TEMP18 = RX10_TEMP18 - RX10_TEMP17;


					final int  RX10_TEMP19 = RX10_TEMP18+1;


					final int RX10_TEMP20 = RX10_TEMP18+1;


					final booleanStub[] RX10_TEMP21 = new booleanStub[RX10_TEMP20];

					/*FINISH
*/						{
						for(int RX10_TEMP22=0; RX10_TEMP22 < RX10_TEMP19; RX10_TEMP22++)
							{

							final int RX10_TEMP23 = 0;


							final int RX10_TEMP24 = RX10_TEMP22;


							final int RX10_TEMP25 = 0;


							final int RX10_TEMP26 = Program.getDistLocalCount1(X10_TEMP39, RX10_TEMP24,myUniquePlacePoint);


							final int RX10_TEMP27 = RX10_TEMP26 - RX10_TEMP17;

							//async(RX10_TEMP25)
								{

								final int RX10_TEMP29 = RX10_TEMP27+1;


								final boolean[] RX10_TEMP30 = new boolean/*NewUpdatableArray*/[RX10_TEMP29];
/*arrayInitBlock*/
for(int RX10_TEMP28= 0;RX10_TEMP28 <RX10_TEMP30.length ;RX10_TEMP28++ )									{

									final boolean X10_TEMP42 = true;

									RX10_TEMP30[RX10_TEMP28] =X10_TEMP42;
									}

;


								final booleanStub RX10_TEMP31 = new booleanStub(RX10_TEMP30,RX10_TEMP25);
								
Program.globalPointerHashMap.get(RX10_TEMP25).add(RX10_TEMP31.hashCode());

								//async(RX10_TEMP23)
									{
									RX10_TEMP21[RX10_TEMP22] = RX10_TEMP31;
									}
								}
							}
						}

					final booleanStub[] RX10_TEMP32 = (booleanStub[])(new booleanStub/*value*/[RX10_TEMP19]);
/*arrayInitBlock*/
for(int RX10_TEMP34= 0;RX10_TEMP34 <RX10_TEMP32.length ;RX10_TEMP34++ )						{

						final booleanStub RX10_TEMP33 = RX10_TEMP21[RX10_TEMP34];

						RX10_TEMP32[RX10_TEMP34] =RX10_TEMP33;
						}

;


					final booleanRefArray1 RX10_TEMP35 = new booleanRefArray1(X10_TEMP39, RX10_TEMP32,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP35.hashCode());


					final booleanRefArray1 X10_TEMP40 = RX10_TEMP35;

					/*FINISH
*/						{

						final int RX10_TEMP39 = 1;


						int RX10_TEMP37 = X10_TEMP31.regSize;


						RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39;


						final int  RX10_TEMP38 = RX10_TEMP37+1;

						for(int RX10_TEMP36=0; RX10_TEMP36 < RX10_TEMP38; RX10_TEMP36++)
							{

							final int RX10_TEMP40 = RX10_TEMP36;


							final Point1 X10_TEMP43 = Program.regionOrdinalPoint1(X10_TEMP31, RX10_TEMP40,myUniquePlacePoint);

							//async(X10_TEMP38)
								{

								final boolean RX10_TEMP41 = Program.regionContainsPoint1(r1, X10_TEMP43,X10_TEMP38);


								boolean X10_TEMP44 = RX10_TEMP41;


								X10_TEMP44 = ! X10_TEMP44;

								if(X10_TEMP44)
									{

									final Point1 RX10_TEMP42 = new Point1(X10_TEMP34,X10_TEMP38);
									
Program.globalPointerHashMap.get(X10_TEMP38).add(RX10_TEMP42.hashCode());


									final Dist1 RX10_TEMP43 = X10_TEMP40.distValue;


									final Region1 RX10_TEMP44 = RX10_TEMP43.dReg;


									final int RX10_TEMP45 = Program.searchPointInRegion1(RX10_TEMP44, RX10_TEMP42,X10_TEMP38);


									final int RX10_TEMP46 = 0;


									final boolean RX10_TEMP47 = RX10_TEMP45 < RX10_TEMP46;

									if(RX10_TEMP47)
										{

										String RX10_TEMP48 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP48);

										}

									final int RX10_TEMP49 = Program.getPlaceFromDist1(RX10_TEMP43, RX10_TEMP45,X10_TEMP38);


									final int RX10_TEMP51 = 0;


									final boolean RX10_TEMP52 = RX10_TEMP49 != RX10_TEMP51;

									if(RX10_TEMP52)
										{

										String RX10_TEMP50 = "Bad place access for array X10_TEMP40";

										throw new RuntimeException(RX10_TEMP50);

										}
									Program.setRefArrayValue1boolean(X10_TEMP40, RX10_TEMP45, X10_TEMP35,X10_TEMP38);
									}
								}
							}
						}

					final Point1 RX10_TEMP53 = new Point1(X10_TEMP34,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP53.hashCode());


					final Dist1 RX10_TEMP54 = X10_TEMP40.distValue;


					final Region1 RX10_TEMP55 = RX10_TEMP54.dReg;


					final int RX10_TEMP56 = Program.searchPointInRegion1(RX10_TEMP55, RX10_TEMP53,myUniquePlacePoint);


					final int RX10_TEMP57 = 0;


					final boolean RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57;

					if(RX10_TEMP58)
						{

						String RX10_TEMP59 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP59);

						}

					final int RX10_TEMP60 = Program.getPlaceFromDist1(RX10_TEMP54, RX10_TEMP56,myUniquePlacePoint);


					final int RX10_TEMP62 = 0;


					final boolean RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62;

					if(RX10_TEMP63)
						{

						String RX10_TEMP61 = "Bad place access for array X10_TEMP40";

						throw new RuntimeException(RX10_TEMP61);

						}

					final boolean RX10_TEMP64 = Program.getRefArrayValue1boolean(X10_TEMP40, RX10_TEMP56,myUniquePlacePoint);


					X10_TEMP36 = RX10_TEMP64;

					}

				final boolean X10_TEMP45 = X10_TEMP36;


				final int X10_TEMP48 = 1;


				final Region1 X10_TEMP50 = Program.X10Util_getRank2D(rLocal, X10_TEMP48,myUniquePlacePoint);


				final int X10_TEMP53 = 0;


				final boolean X10_TEMP54 = false;


				final int X10_TEMP51 = X10_TEMP50.regSize;


				final int X10_TEMP52 = rRefLocal.regSize;


				boolean X10_TEMP55 = X10_TEMP51 == X10_TEMP52;

				if(X10_TEMP55)
					{

					final Region1 X10_TEMP56 = Program.createNewRegion1R(X10_TEMP53, X10_TEMP53,myUniquePlacePoint);


					final int X10_TEMP57 = 0;


					final Dist1 X10_TEMP58 = Program.getPlaceDist1(X10_TEMP56, X10_TEMP57,myUniquePlacePoint);


					final Region1 RX10_TEMP65 = X10_TEMP58.dReg;


					final int RX10_TEMP66 = 0;


					final int RX10_TEMP67 = 1;


					int RX10_TEMP68 = 1;


					RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67;


					final int  RX10_TEMP69 = RX10_TEMP68+1;


					final int RX10_TEMP70 = RX10_TEMP68+1;


					final booleanStub[] RX10_TEMP71 = new booleanStub[RX10_TEMP70];

					/*FINISH
*/						{
						for(int RX10_TEMP72=0; RX10_TEMP72 < RX10_TEMP69; RX10_TEMP72++)
							{

							final int RX10_TEMP73 = 0;


							final int RX10_TEMP74 = RX10_TEMP72;


							final int RX10_TEMP75 = 0;


							final int RX10_TEMP76 = Program.getDistLocalCount1(X10_TEMP58, RX10_TEMP74,myUniquePlacePoint);


							final int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67;

							//async(RX10_TEMP75)
								{

								final int RX10_TEMP79 = RX10_TEMP77+1;


								final boolean[] RX10_TEMP80 = new boolean/*NewUpdatableArray*/[RX10_TEMP79];
/*arrayInitBlock*/
for(int RX10_TEMP78= 0;RX10_TEMP78 <RX10_TEMP80.length ;RX10_TEMP78++ )									{

									final boolean X10_TEMP61 = true;

									RX10_TEMP80[RX10_TEMP78] =X10_TEMP61;
									}

;


								final booleanStub RX10_TEMP81 = new booleanStub(RX10_TEMP80,RX10_TEMP75);
								
Program.globalPointerHashMap.get(RX10_TEMP75).add(RX10_TEMP81.hashCode());

								//async(RX10_TEMP73)
									{
									RX10_TEMP71[RX10_TEMP72] = RX10_TEMP81;
									}
								}
							}
						}

					final booleanStub[] RX10_TEMP82 = (booleanStub[])(new booleanStub/*value*/[RX10_TEMP69]);
/*arrayInitBlock*/
for(int RX10_TEMP84= 0;RX10_TEMP84 <RX10_TEMP82.length ;RX10_TEMP84++ )						{

						final booleanStub RX10_TEMP83 = RX10_TEMP71[RX10_TEMP84];

						RX10_TEMP82[RX10_TEMP84] =RX10_TEMP83;
						}

;


					final booleanRefArray1 RX10_TEMP85 = new booleanRefArray1(X10_TEMP58, RX10_TEMP82,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP85.hashCode());


					final booleanRefArray1 X10_TEMP59 = RX10_TEMP85;

					/*FINISH
*/						{

						final int RX10_TEMP89 = 1;


						int RX10_TEMP87 = X10_TEMP50.regSize;


						RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP89;


						final int  RX10_TEMP88 = RX10_TEMP87+1;

						for(int RX10_TEMP86=0; RX10_TEMP86 < RX10_TEMP88; RX10_TEMP86++)
							{

							final int RX10_TEMP90 = RX10_TEMP86;


							final Point1 X10_TEMP62 = Program.regionOrdinalPoint1(X10_TEMP50, RX10_TEMP90,myUniquePlacePoint);

							//async(X10_TEMP57)
								{

								final boolean RX10_TEMP91 = Program.regionContainsPoint1(rRefLocal, X10_TEMP62,X10_TEMP57);


								boolean X10_TEMP63 = RX10_TEMP91;


								X10_TEMP63 = ! X10_TEMP63;

								if(X10_TEMP63)
									{

									final Point1 RX10_TEMP92 = new Point1(X10_TEMP53,X10_TEMP57);
									
Program.globalPointerHashMap.get(X10_TEMP57).add(RX10_TEMP92.hashCode());


									final Dist1 RX10_TEMP93 = X10_TEMP59.distValue;


									final Region1 RX10_TEMP94 = RX10_TEMP93.dReg;


									final int RX10_TEMP95 = Program.searchPointInRegion1(RX10_TEMP94, RX10_TEMP92,X10_TEMP57);


									final int RX10_TEMP96 = 0;


									final boolean RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96;

									if(RX10_TEMP97)
										{

										String RX10_TEMP98 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP98);

										}

									final int RX10_TEMP99 = Program.getPlaceFromDist1(RX10_TEMP93, RX10_TEMP95,X10_TEMP57);


									final int RX10_TEMP101 = 0;


									final boolean RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101;

									if(RX10_TEMP102)
										{

										String RX10_TEMP100 = "Bad place access for array X10_TEMP59";

										throw new RuntimeException(RX10_TEMP100);

										}
									Program.setRefArrayValue1boolean(X10_TEMP59, RX10_TEMP95, X10_TEMP54,X10_TEMP57);
									}
								}
							}
						}

					final Point1 RX10_TEMP103 = new Point1(X10_TEMP53,myUniquePlacePoint);
					
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP103.hashCode());


					final Dist1 RX10_TEMP104 = X10_TEMP59.distValue;


					final Region1 RX10_TEMP105 = RX10_TEMP104.dReg;


					final int RX10_TEMP106 = Program.searchPointInRegion1(RX10_TEMP105, RX10_TEMP103,myUniquePlacePoint);


					final int RX10_TEMP107 = 0;


					final boolean RX10_TEMP108 = RX10_TEMP106 < RX10_TEMP107;

					if(RX10_TEMP108)
						{

						String RX10_TEMP109 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP109);

						}

					final int RX10_TEMP110 = Program.getPlaceFromDist1(RX10_TEMP104, RX10_TEMP106,myUniquePlacePoint);


					final int RX10_TEMP112 = 0;


					final boolean RX10_TEMP113 = RX10_TEMP110 != RX10_TEMP112;

					if(RX10_TEMP113)
						{

						String RX10_TEMP111 = "Bad place access for array X10_TEMP59";

						throw new RuntimeException(RX10_TEMP111);

						}

					final boolean RX10_TEMP114 = Program.getRefArrayValue1boolean(X10_TEMP59, RX10_TEMP106,myUniquePlacePoint);


					X10_TEMP55 = RX10_TEMP114;

					}

				final boolean X10_TEMP64 = X10_TEMP55;


				final boolean X10_TEMP66 = X10_TEMP45 && X10_TEMP64;


				final boolean X10_TEMP68 = ! X10_TEMP66;

				if(X10_TEMP68)
					{

					final boolean X10_TEMP70 = false;

					return X10_TEMP70;
					}
				}
			}

		final boolean X10_TEMP72 = true;

		return X10_TEMP72;
		}
public static Dist1 X10Util_get2DDistRank ( final Dist2 d, final int n, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 2;


		final boolean X10_TEMP3 = n > X10_TEMP1;


		final int X10_TEMP2 = 0;


		final boolean X10_TEMP4 = n < X10_TEMP2;


		final boolean X10_TEMP6 = X10_TEMP3 || X10_TEMP4;

		if(X10_TEMP6)
			{

			final String X10_TEMP8 = "Rank must within bounds";

			throw new RuntimeException(X10_TEMP8);

			}

		final int X10_TEMP9 = 0;


		final int X10_TEMP10 = 1;


		final int X10_TEMP11 = X10_TEMP9 - X10_TEMP10;


		final Region1 X10_TEMP12 = Program.createNewRegion1R(X10_TEMP9, X10_TEMP11,myUniquePlacePoint);


		final int X10_TEMP13 = 0;


		final Dist1 X10_TEMP15 = Program.getPlaceDist1(X10_TEMP12, X10_TEMP13,myUniquePlacePoint);


		Dist1 dResult = X10_TEMP15;


		final Dist1 X10_TEMP18 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP18.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP19 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP19.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP19.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP19, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist2 X10_TEMP23 = Program.restrictDist2(d, p,myUniquePlacePoint);


			final Region2 RX10_TEMP12 = X10_TEMP23.dReg;


			final Region2 rLocal = RX10_TEMP12;


			final Region1 rLocalN = Program.X10Util_getRank2D(rLocal, n,myUniquePlacePoint);


			final Region1 RX10_TEMP13 = dResult.dReg;


			final Region1 X10_TEMP28 = RX10_TEMP13;


			final int X10_TEMP29 = 0;


			final int X10_TEMP30 = 1;


			final int X10_TEMP31 = X10_TEMP29 - X10_TEMP30;


			final int X10_TEMP32 = 0;


			Region1 X10_TEMP33 = Program.createNewRegion1R(X10_TEMP29, X10_TEMP31,myUniquePlacePoint);


			final int RX10_TEMP17 = 1;


			int RX10_TEMP15 = rLocalN.regSize;


			RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17;


			final int  RX10_TEMP16 = RX10_TEMP15+1;

			for(int RX10_TEMP14=0; RX10_TEMP14 < RX10_TEMP16; RX10_TEMP14++)
				{

				final int RX10_TEMP18 = RX10_TEMP14;


				final Point1 X10_TEMP34 = Program.regionOrdinalPoint1(rLocalN, RX10_TEMP18,myUniquePlacePoint);


				final int X10_TEMP35 = X10_TEMP34.f0;


				final boolean RX10_TEMP19 = Program.regionContainsPoint1(X10_TEMP28, X10_TEMP34,myUniquePlacePoint);


				boolean X10_TEMP36 = RX10_TEMP19;


				X10_TEMP36 = ! X10_TEMP36;

				if(X10_TEMP36)
					{

					final Region1 X10_TEMP37 = Program.createNewRegion1R(X10_TEMP35, X10_TEMP35,myUniquePlacePoint);


					X10_TEMP33 = Program.unionRegion1(X10_TEMP33, X10_TEMP37,myUniquePlacePoint);

					}
				}

			final Region1 X10_TEMP38 = X10_TEMP33;


			final Region1 X10_TEMP40 = X10_TEMP38;


			final Dist1 X10_TEMP42 = Program.getPlaceDist1(X10_TEMP40, p,myUniquePlacePoint);


			final Dist1 X10_TEMP44 = Program.unionDist1(dResult, X10_TEMP42,myUniquePlacePoint);


			dResult = X10_TEMP44;

			}
		return dResult;
		}
public static Region2 X10Util_transposeRegion ( final Region2 r, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 1;


		final Region1 X10_TEMP5 = Program.X10Util_getRank2D(r, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP8 = 0;


		final Region1 X10_TEMP10 = Program.X10Util_getRank2D(r, X10_TEMP8,myUniquePlacePoint);


		final Region2 X10_TEMP12 = Program.createNewRegion2AA(X10_TEMP5, X10_TEMP10,myUniquePlacePoint);

		return X10_TEMP12;
		}
public static Dist2 X10Util_transposeDist ( final Dist2 d, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP3 = X10_TEMP1 - X10_TEMP2;


		final Region2 X10_TEMP4 = Program.createNewRegion2RR(X10_TEMP1, X10_TEMP3, X10_TEMP1, X10_TEMP3,myUniquePlacePoint);


		final int X10_TEMP5 = 0;


		final Dist2 X10_TEMP7 = Program.getPlaceDist2(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		Dist2 dResult = X10_TEMP7;


		final Dist1 X10_TEMP10 = Program.getUniqueDist(myUniquePlacePoint);


		final Region1 RX10_TEMP1 = X10_TEMP10.dReg;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = RX10_TEMP1.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


			final Dist1 X10_TEMP11 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP6 = X10_TEMP11.dReg;


			final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


			final int RX10_TEMP8 = 0;


			final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

			if(RX10_TEMP9)
				{

				final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11.";

				throw new RuntimeException(RX10_TEMP10);

				}

			final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP11, RX10_TEMP7,myUniquePlacePoint);


			final int p = RX10_TEMP11;


			final Dist2 X10_TEMP15 = Program.restrictDist2(d, p,myUniquePlacePoint);


			final Region2 RX10_TEMP12 = X10_TEMP15.dReg;


			final Region2 X10_TEMP16 = RX10_TEMP12;


			final Region2 rLocal = X10_TEMP16;


			final Region2 X10_TEMP19 = Program.X10Util_transposeRegion(rLocal,myUniquePlacePoint);


			final Dist2 X10_TEMP21 = Program.getPlaceDist2(X10_TEMP19, p,myUniquePlacePoint);


			final Dist2 X10_TEMP23 = Program.unionDist2(dResult, X10_TEMP21,myUniquePlacePoint);


			dResult = X10_TEMP23;

			}
		return dResult;
		}
public static Dist2 X10Util_transposeBlockStar ( final Dist2 d, int myUniquePlacePoint)
		{

		final Region2 RX10_TEMP0 = d.dReg;


		final Region2 rd = RX10_TEMP0;


		final int X10_TEMP4 = 0;


		final Region1 r1 = Program.X10Util_getRank2D(rd, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP8 = 1;


		final Region1 r2 = Program.X10Util_getRank2D(rd, X10_TEMP8,myUniquePlacePoint);


		final Dist1 X10_TEMP13 = Program.X10Util_distBlock(r2,myUniquePlacePoint);


		final Dist2 X10_TEMP15 = Program.X10Util_extendDistRank2D(X10_TEMP13, r1,myUniquePlacePoint);

		return X10_TEMP15;
		}
public static boolean X10Util_pullBoolean ( final booleanRefArray1 b, final Point1 pt, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = b.distValue;


		final Region1 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region1 X10_TEMP1 = RX10_TEMP1;


		final boolean RX10_TEMP2 = Program.regionContainsPoint1(X10_TEMP1, pt,myUniquePlacePoint);


		final boolean X10_TEMP3 = RX10_TEMP2;


		final boolean X10_TEMP5 = ! X10_TEMP3;

		if(X10_TEMP5)
			{

			final String X10_TEMP6 = "pt must be contained in b.region: ";


			final Dist1 RX10_TEMP3 = b.distValue;


			final Region1 RX10_TEMP4 = RX10_TEMP3.dReg;


			final Region1 X10_TEMP7 = RX10_TEMP4;


			final String RX10_TEMP5 = Program.toStringRegion1(X10_TEMP7,myUniquePlacePoint);


			final String X10_TEMP8 = X10_TEMP6 + RX10_TEMP5;


			final String X10_TEMP9 = " ";


			final String X10_TEMP10 = X10_TEMP8 + X10_TEMP9;


			final String RX10_TEMP6 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP12 = X10_TEMP10 + RX10_TEMP6;

			Program.X10Util_println(X10_TEMP12,myUniquePlacePoint);

			final String X10_TEMP13 = "pullBoolean Exception: ";


			final String RX10_TEMP7 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP15 = X10_TEMP13 + RX10_TEMP7;

			throw new RuntimeException(X10_TEMP15);

			}

		final int pHere = 0;


		final int X10_TEMP19 = 0;


		final int X10_TEMP20 = 0;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


		final int X10_TEMP22 = 0;


		final Dist1 dDst = Program.getPlaceDist1(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


		final Region1 RX10_TEMP8 = dDst.dReg;


		final int RX10_TEMP9 = 0;


		final int RX10_TEMP10 = 1;


		int RX10_TEMP11 = 1;


		RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10;


		final int  RX10_TEMP12 = RX10_TEMP11+1;


		final int RX10_TEMP13 = RX10_TEMP11+1;


		final booleanStub[] RX10_TEMP14 = new booleanStub[RX10_TEMP13];

		/*FINISH
*/			{
			for(int RX10_TEMP15=0; RX10_TEMP15 < RX10_TEMP12; RX10_TEMP15++)
				{

				final int RX10_TEMP16 = 0;


				final int RX10_TEMP17 = RX10_TEMP15;


				final int RX10_TEMP18 = 0;


				final int RX10_TEMP19 = Program.getDistLocalCount1(dDst, RX10_TEMP17,myUniquePlacePoint);


				final int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10;

				//async(RX10_TEMP18)
					{

					final int RX10_TEMP21 = RX10_TEMP20+1;


					final boolean[] RX10_TEMP22 = new boolean[RX10_TEMP21];


					final booleanStub RX10_TEMP23 = new booleanStub(RX10_TEMP22,RX10_TEMP18);
					
Program.globalPointerHashMap.get(RX10_TEMP18).add(RX10_TEMP23.hashCode());

					//async(RX10_TEMP16)
						{
						RX10_TEMP14[RX10_TEMP15] = RX10_TEMP23;
						}
					}
				}
			}

		final booleanStub[] RX10_TEMP24 = (booleanStub[])(new booleanStub/*value*/[RX10_TEMP12]);
/*arrayInitBlock*/
for(int RX10_TEMP26= 0;RX10_TEMP26 <RX10_TEMP24.length ;RX10_TEMP26++ )			{

			final booleanStub RX10_TEMP25 = RX10_TEMP14[RX10_TEMP26];

			RX10_TEMP24[RX10_TEMP26] =RX10_TEMP25;
			}

;


		final booleanRefArray1 RX10_TEMP27 = new booleanRefArray1(dDst, RX10_TEMP24,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP27.hashCode());


		final booleanRefArray1 result = RX10_TEMP27;

		/*FINISH
*/			{

			final Dist1 RX10_TEMP28 = b.distValue;


			final Dist1 X10_TEMP25 = RX10_TEMP28;


			final Region1 RX10_TEMP29 = X10_TEMP25.dReg;


			final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pt,myUniquePlacePoint);


			final int RX10_TEMP31 = 0;


			final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

			if(RX10_TEMP32)
				{

				final String RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25.";

				throw new RuntimeException(RX10_TEMP33);

				}

			final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP25, RX10_TEMP30,myUniquePlacePoint);


			final int X10_TEMP28 = RX10_TEMP34;

			//async(X10_TEMP28)
				{

				final Dist1 RX10_TEMP35 = b.distValue;


				final Region1 RX10_TEMP36 = RX10_TEMP35.dReg;


				final int RX10_TEMP37 = Program.searchPointInRegion1(RX10_TEMP36, pt,X10_TEMP28);


				final int RX10_TEMP38 = 0;


				final boolean RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38;

				if(RX10_TEMP39)
					{

					String RX10_TEMP40 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP40);

					}

				final int RX10_TEMP41 = Program.getPlaceFromDist1(RX10_TEMP35, RX10_TEMP37,X10_TEMP28);


				final int RX10_TEMP43 = 0;


				final boolean RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43;

				if(RX10_TEMP44)
					{

					String RX10_TEMP42 = "Bad place access for array b";

					throw new RuntimeException(RX10_TEMP42);

					}

				final boolean RX10_TEMP45 = Program.getRefArrayValue1boolean(b, RX10_TEMP37,X10_TEMP28);


				final boolean val = RX10_TEMP45;

				//async(pHere)
					{

					final int X10_TEMP33 = 0;


					final boolean X10_TEMP36 = val;


					final Point1 RX10_TEMP46 = new Point1(X10_TEMP33,pHere);
					
Program.globalPointerHashMap.get(pHere).add(RX10_TEMP46.hashCode());


					final Dist1 RX10_TEMP47 = result.distValue;


					final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;


					final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46,pHere);


					final int RX10_TEMP50 = 0;


					final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

					if(RX10_TEMP51)
						{

						String RX10_TEMP52 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP52);

						}

					final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49,pHere);


					final int RX10_TEMP55 = 0;


					final boolean RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55;

					if(RX10_TEMP56)
						{

						String RX10_TEMP54 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP54);

						}
					Program.setRefArrayValue1boolean(result, RX10_TEMP49, X10_TEMP36,pHere);
					}
				}
			}

		final int X10_TEMP38 = 0;


		final Point1 RX10_TEMP57 = new Point1(X10_TEMP38,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP57.hashCode());


		final Dist1 RX10_TEMP58 = result.distValue;


		final Region1 RX10_TEMP59 = RX10_TEMP58.dReg;


		final int RX10_TEMP60 = Program.searchPointInRegion1(RX10_TEMP59, RX10_TEMP57,myUniquePlacePoint);


		final int RX10_TEMP61 = 0;


		final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

		if(RX10_TEMP62)
			{

			String RX10_TEMP63 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP63);

			}

		final int RX10_TEMP64 = Program.getPlaceFromDist1(RX10_TEMP58, RX10_TEMP60,myUniquePlacePoint);


		final int RX10_TEMP66 = 0;


		final boolean RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66;

		if(RX10_TEMP67)
			{

			String RX10_TEMP65 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP65);

			}

		final boolean RX10_TEMP68 = Program.getRefArrayValue1boolean(result, RX10_TEMP60,myUniquePlacePoint);


		final boolean X10_TEMP40 = RX10_TEMP68;

		return X10_TEMP40;
		}
public static Complex X10Util_pullComplex ( final ComplexRefArray1 c, final Point1 pt, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = c.distValue;


		final Region1 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region1 X10_TEMP1 = RX10_TEMP1;


		final boolean RX10_TEMP2 = Program.regionContainsPoint1(X10_TEMP1, pt,myUniquePlacePoint);


		final boolean X10_TEMP3 = RX10_TEMP2;


		final boolean X10_TEMP5 = ! X10_TEMP3;

		if(X10_TEMP5)
			{

			final String X10_TEMP6 = "pt must be contained in c.region: ";


			final Dist1 RX10_TEMP3 = c.distValue;


			final Region1 RX10_TEMP4 = RX10_TEMP3.dReg;


			final Region1 X10_TEMP7 = RX10_TEMP4;


			final String RX10_TEMP5 = Program.toStringRegion1(X10_TEMP7,myUniquePlacePoint);


			final String X10_TEMP8 = X10_TEMP6 + RX10_TEMP5;


			final String X10_TEMP9 = " ";


			final String X10_TEMP10 = X10_TEMP8 + X10_TEMP9;


			final String RX10_TEMP6 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP12 = X10_TEMP10 + RX10_TEMP6;

			Program.X10Util_println(X10_TEMP12,myUniquePlacePoint);

			final String X10_TEMP13 = "Complex Exception: ";


			final String RX10_TEMP7 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP15 = X10_TEMP13 + RX10_TEMP7;

			throw new RuntimeException(X10_TEMP15);

			}

		final int pHere = 0;


		final int X10_TEMP19 = 0;


		final int X10_TEMP20 = 0;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


		final int X10_TEMP22 = 0;


		final Dist1 dDst = Program.getPlaceDist1(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


		final Region1 RX10_TEMP8 = dDst.dReg;


		final int RX10_TEMP9 = 0;


		final int RX10_TEMP10 = 1;


		int RX10_TEMP11 = 1;


		RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10;


		final int  RX10_TEMP12 = RX10_TEMP11+1;


		final int RX10_TEMP13 = RX10_TEMP11+1;


		final ComplexStub[] RX10_TEMP14 = new ComplexStub[RX10_TEMP13];

		/*FINISH
*/			{
			for(int RX10_TEMP15=0; RX10_TEMP15 < RX10_TEMP12; RX10_TEMP15++)
				{

				final int RX10_TEMP16 = 0;


				final int RX10_TEMP17 = RX10_TEMP15;


				final int RX10_TEMP18 = 0;


				final int RX10_TEMP19 = Program.getDistLocalCount1(dDst, RX10_TEMP17,myUniquePlacePoint);


				final int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10;

				//async(RX10_TEMP18)
					{

					final int RX10_TEMP21 = RX10_TEMP20+1;


					final Complex[] RX10_TEMP22 = new Complex[RX10_TEMP21];


					final ComplexStub RX10_TEMP23 = new ComplexStub(RX10_TEMP22,RX10_TEMP18);
					
Program.globalPointerHashMap.get(RX10_TEMP18).add(RX10_TEMP23.hashCode());

					//async(RX10_TEMP16)
						{
						RX10_TEMP14[RX10_TEMP15] = RX10_TEMP23;
						}
					}
				}
			}

		final ComplexStub[] RX10_TEMP24 = (ComplexStub[])(new ComplexStub/*value*/[RX10_TEMP12]);
/*arrayInitBlock*/
for(int RX10_TEMP26= 0;RX10_TEMP26 <RX10_TEMP24.length ;RX10_TEMP26++ )			{

			final ComplexStub RX10_TEMP25 = RX10_TEMP14[RX10_TEMP26];

			RX10_TEMP24[RX10_TEMP26] =RX10_TEMP25;
			}

;


		final ComplexRefArray1 RX10_TEMP27 = new ComplexRefArray1(dDst, RX10_TEMP24,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP27.hashCode());


		final ComplexRefArray1 result = RX10_TEMP27;

		/*FINISH
*/			{

			final Dist1 RX10_TEMP28 = c.distValue;


			final Dist1 X10_TEMP25 = RX10_TEMP28;


			final Region1 RX10_TEMP29 = X10_TEMP25.dReg;


			final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pt,myUniquePlacePoint);


			final int RX10_TEMP31 = 0;


			final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

			if(RX10_TEMP32)
				{

				final String RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25.";

				throw new RuntimeException(RX10_TEMP33);

				}

			final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP25, RX10_TEMP30,myUniquePlacePoint);


			final int X10_TEMP28 = RX10_TEMP34;

			//async(X10_TEMP28)
				{

				final Dist1 RX10_TEMP35 = c.distValue;


				final Region1 RX10_TEMP36 = RX10_TEMP35.dReg;


				final int RX10_TEMP37 = Program.searchPointInRegion1(RX10_TEMP36, pt,X10_TEMP28);


				final int RX10_TEMP38 = 0;


				final boolean RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38;

				if(RX10_TEMP39)
					{

					String RX10_TEMP40 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP40);

					}

				final int RX10_TEMP41 = Program.getPlaceFromDist1(RX10_TEMP35, RX10_TEMP37,X10_TEMP28);


				final int RX10_TEMP43 = 0;


				final boolean RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43;

				if(RX10_TEMP44)
					{

					String RX10_TEMP42 = "Bad place access for array c";

					throw new RuntimeException(RX10_TEMP42);

					}

				final Complex RX10_TEMP45 = Program.getRefArrayValue1Complex(c, RX10_TEMP37,X10_TEMP28);


				final Complex val = RX10_TEMP45;

				//async(pHere)
					{

					final int X10_TEMP33 = 0;


					final Complex X10_TEMP36 = val;


					final Point1 RX10_TEMP46 = new Point1(X10_TEMP33,pHere);
					
Program.globalPointerHashMap.get(pHere).add(RX10_TEMP46.hashCode());


					final Dist1 RX10_TEMP47 = result.distValue;


					final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;


					final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46,pHere);


					final int RX10_TEMP50 = 0;


					final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

					if(RX10_TEMP51)
						{

						String RX10_TEMP52 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP52);

						}

					final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49,pHere);


					final int RX10_TEMP55 = 0;


					final boolean RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55;

					if(RX10_TEMP56)
						{

						String RX10_TEMP54 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP54);

						}
					Program.setRefArrayValue1Complex(result, RX10_TEMP49, X10_TEMP36,pHere);
					}
				}
			}

		final int X10_TEMP38 = 0;


		final Point1 RX10_TEMP57 = new Point1(X10_TEMP38,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP57.hashCode());


		final Dist1 RX10_TEMP58 = result.distValue;


		final Region1 RX10_TEMP59 = RX10_TEMP58.dReg;


		final int RX10_TEMP60 = Program.searchPointInRegion1(RX10_TEMP59, RX10_TEMP57,myUniquePlacePoint);


		final int RX10_TEMP61 = 0;


		final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

		if(RX10_TEMP62)
			{

			String RX10_TEMP63 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP63);

			}

		final int RX10_TEMP64 = Program.getPlaceFromDist1(RX10_TEMP58, RX10_TEMP60,myUniquePlacePoint);


		final int RX10_TEMP66 = 0;


		final boolean RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66;

		if(RX10_TEMP67)
			{

			String RX10_TEMP65 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP65);

			}

		final Complex RX10_TEMP68 = Program.getRefArrayValue1Complex(result, RX10_TEMP60,myUniquePlacePoint);


		final Complex X10_TEMP40 = RX10_TEMP68;

		return X10_TEMP40;
		}
public static int X10Util_pullInt ( final intRefArray1 i, final Point1 pt, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = i.distValue;


		final Region1 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region1 X10_TEMP1 = RX10_TEMP1;


		final boolean RX10_TEMP2 = Program.regionContainsPoint1(X10_TEMP1, pt,myUniquePlacePoint);


		final boolean X10_TEMP3 = RX10_TEMP2;


		final boolean X10_TEMP5 = ! X10_TEMP3;

		if(X10_TEMP5)
			{

			final String X10_TEMP6 = "pt must be contained in i.region: ";


			final Dist1 RX10_TEMP3 = i.distValue;


			final Region1 RX10_TEMP4 = RX10_TEMP3.dReg;


			final Region1 X10_TEMP7 = RX10_TEMP4;


			final String RX10_TEMP5 = Program.toStringRegion1(X10_TEMP7,myUniquePlacePoint);


			final String X10_TEMP8 = X10_TEMP6 + RX10_TEMP5;


			final String X10_TEMP9 = " ";


			final String X10_TEMP10 = X10_TEMP8 + X10_TEMP9;


			final String RX10_TEMP6 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP12 = X10_TEMP10 + RX10_TEMP6;

			Program.X10Util_println(X10_TEMP12,myUniquePlacePoint);

			final String X10_TEMP13 = "pullDouble Exception: ";


			final String RX10_TEMP7 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP15 = X10_TEMP13 + RX10_TEMP7;

			throw new RuntimeException(X10_TEMP15);

			}

		final int pHere = 0;


		final int X10_TEMP19 = 0;


		final int X10_TEMP20 = 0;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


		final int X10_TEMP22 = 0;


		final Dist1 dDst = Program.getPlaceDist1(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


		final Region1 RX10_TEMP8 = dDst.dReg;


		final int RX10_TEMP9 = 0;


		final int RX10_TEMP10 = 1;


		int RX10_TEMP11 = 1;


		RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10;


		final int  RX10_TEMP12 = RX10_TEMP11+1;


		final int RX10_TEMP13 = RX10_TEMP11+1;


		final intStub[] RX10_TEMP14 = new intStub[RX10_TEMP13];

		/*FINISH
*/			{
			for(int RX10_TEMP15=0; RX10_TEMP15 < RX10_TEMP12; RX10_TEMP15++)
				{

				final int RX10_TEMP16 = 0;


				final int RX10_TEMP17 = RX10_TEMP15;


				final int RX10_TEMP18 = 0;


				final int RX10_TEMP19 = Program.getDistLocalCount1(dDst, RX10_TEMP17,myUniquePlacePoint);


				final int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10;

				//async(RX10_TEMP18)
					{

					final int RX10_TEMP21 = RX10_TEMP20+1;


					final int[] RX10_TEMP22 = new int[RX10_TEMP21];


					final intStub RX10_TEMP23 = new intStub(RX10_TEMP22,RX10_TEMP18);
					
Program.globalPointerHashMap.get(RX10_TEMP18).add(RX10_TEMP23.hashCode());

					//async(RX10_TEMP16)
						{
						RX10_TEMP14[RX10_TEMP15] = RX10_TEMP23;
						}
					}
				}
			}

		final intStub[] RX10_TEMP24 = (intStub[])(new intStub/*value*/[RX10_TEMP12]);
/*arrayInitBlock*/
for(int RX10_TEMP26= 0;RX10_TEMP26 <RX10_TEMP24.length ;RX10_TEMP26++ )			{

			final intStub RX10_TEMP25 = RX10_TEMP14[RX10_TEMP26];

			RX10_TEMP24[RX10_TEMP26] =RX10_TEMP25;
			}

;


		final intRefArray1 RX10_TEMP27 = new intRefArray1(dDst, RX10_TEMP24,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP27.hashCode());


		final intRefArray1 result = RX10_TEMP27;

		/*FINISH
*/			{

			final Dist1 RX10_TEMP28 = i.distValue;


			final Dist1 X10_TEMP25 = RX10_TEMP28;


			final Region1 RX10_TEMP29 = X10_TEMP25.dReg;


			final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pt,myUniquePlacePoint);


			final int RX10_TEMP31 = 0;


			final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

			if(RX10_TEMP32)
				{

				final String RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25.";

				throw new RuntimeException(RX10_TEMP33);

				}

			final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP25, RX10_TEMP30,myUniquePlacePoint);


			final int X10_TEMP28 = RX10_TEMP34;

			//async(X10_TEMP28)
				{

				final Dist1 RX10_TEMP35 = i.distValue;


				final Region1 RX10_TEMP36 = RX10_TEMP35.dReg;


				final int RX10_TEMP37 = Program.searchPointInRegion1(RX10_TEMP36, pt,X10_TEMP28);


				final int RX10_TEMP38 = 0;


				final boolean RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38;

				if(RX10_TEMP39)
					{

					String RX10_TEMP40 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP40);

					}

				final int RX10_TEMP41 = Program.getPlaceFromDist1(RX10_TEMP35, RX10_TEMP37,X10_TEMP28);


				final int RX10_TEMP43 = 0;


				final boolean RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43;

				if(RX10_TEMP44)
					{

					String RX10_TEMP42 = "Bad place access for array i";

					throw new RuntimeException(RX10_TEMP42);

					}

				final int RX10_TEMP45 = Program.getRefArrayValue1int(i, RX10_TEMP37,X10_TEMP28);


				final int val = RX10_TEMP45;

				//async(pHere)
					{

					final int X10_TEMP33 = 0;


					final int X10_TEMP36 = val;


					final Point1 RX10_TEMP46 = new Point1(X10_TEMP33,pHere);
					
Program.globalPointerHashMap.get(pHere).add(RX10_TEMP46.hashCode());


					final Dist1 RX10_TEMP47 = result.distValue;


					final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;


					final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46,pHere);


					final int RX10_TEMP50 = 0;


					final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

					if(RX10_TEMP51)
						{

						String RX10_TEMP52 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP52);

						}

					final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49,pHere);


					final int RX10_TEMP55 = 0;


					final boolean RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55;

					if(RX10_TEMP56)
						{

						String RX10_TEMP54 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP54);

						}
					Program.setRefArrayValue1int(result, RX10_TEMP49, X10_TEMP36,pHere);
					}
				}
			}

		final int X10_TEMP38 = 0;


		final Point1 RX10_TEMP57 = new Point1(X10_TEMP38,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP57.hashCode());


		final Dist1 RX10_TEMP58 = result.distValue;


		final Region1 RX10_TEMP59 = RX10_TEMP58.dReg;


		final int RX10_TEMP60 = Program.searchPointInRegion1(RX10_TEMP59, RX10_TEMP57,myUniquePlacePoint);


		final int RX10_TEMP61 = 0;


		final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

		if(RX10_TEMP62)
			{

			String RX10_TEMP63 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP63);

			}

		final int RX10_TEMP64 = Program.getPlaceFromDist1(RX10_TEMP58, RX10_TEMP60,myUniquePlacePoint);


		final int RX10_TEMP66 = 0;


		final boolean RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66;

		if(RX10_TEMP67)
			{

			String RX10_TEMP65 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP65);

			}

		final int RX10_TEMP68 = Program.getRefArrayValue1int(result, RX10_TEMP60,myUniquePlacePoint);


		final int X10_TEMP40 = RX10_TEMP68;

		return X10_TEMP40;
		}
public static double X10Util_pullDouble ( final doubleRefArray1 d, final Point1 pt, int myUniquePlacePoint)
		{

		final Dist1 RX10_TEMP0 = d.distValue;


		final Region1 RX10_TEMP1 = RX10_TEMP0.dReg;


		final Region1 X10_TEMP1 = RX10_TEMP1;


		final boolean RX10_TEMP2 = Program.regionContainsPoint1(X10_TEMP1, pt,myUniquePlacePoint);


		final boolean X10_TEMP3 = RX10_TEMP2;


		final boolean X10_TEMP5 = ! X10_TEMP3;

		if(X10_TEMP5)
			{

			final String X10_TEMP6 = "pt must be contained in d.region: ";


			final Dist1 RX10_TEMP3 = d.distValue;


			final Region1 RX10_TEMP4 = RX10_TEMP3.dReg;


			final Region1 X10_TEMP7 = RX10_TEMP4;


			final String RX10_TEMP5 = Program.toStringRegion1(X10_TEMP7,myUniquePlacePoint);


			final String X10_TEMP8 = X10_TEMP6 + RX10_TEMP5;


			final String X10_TEMP9 = " ";


			final String X10_TEMP10 = X10_TEMP8 + X10_TEMP9;


			final String RX10_TEMP6 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP12 = X10_TEMP10 + RX10_TEMP6;

			Program.X10Util_println(X10_TEMP12,myUniquePlacePoint);

			final String X10_TEMP13 = "pullDouble Exception: ";


			final String RX10_TEMP7 = Program.toStringPoint1(pt,myUniquePlacePoint);


			final String X10_TEMP15 = X10_TEMP13 + RX10_TEMP7;

			throw new RuntimeException(X10_TEMP15);

			}

		final int pHere = 0;


		final int X10_TEMP19 = 0;


		final int X10_TEMP20 = 0;


		final Region1 X10_TEMP21 = Program.createNewRegion1R(X10_TEMP19, X10_TEMP20,myUniquePlacePoint);


		final int X10_TEMP22 = 0;


		final Dist1 dDst = Program.getPlaceDist1(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


		final Region1 RX10_TEMP8 = dDst.dReg;


		final int RX10_TEMP9 = 0;


		final int RX10_TEMP10 = 1;


		int RX10_TEMP11 = 1;


		RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10;


		final int  RX10_TEMP12 = RX10_TEMP11+1;


		final int RX10_TEMP13 = RX10_TEMP11+1;


		final doubleStub[] RX10_TEMP14 = new doubleStub[RX10_TEMP13];

		/*FINISH
*/			{
			for(int RX10_TEMP15=0; RX10_TEMP15 < RX10_TEMP12; RX10_TEMP15++)
				{

				final int RX10_TEMP16 = 0;


				final int RX10_TEMP17 = RX10_TEMP15;


				final int RX10_TEMP18 = 0;


				final int RX10_TEMP19 = Program.getDistLocalCount1(dDst, RX10_TEMP17,myUniquePlacePoint);


				final int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10;

				//async(RX10_TEMP18)
					{

					final int RX10_TEMP21 = RX10_TEMP20+1;


					final double[] RX10_TEMP22 = new double[RX10_TEMP21];


					final doubleStub RX10_TEMP23 = new doubleStub(RX10_TEMP22,RX10_TEMP18);
					
Program.globalPointerHashMap.get(RX10_TEMP18).add(RX10_TEMP23.hashCode());

					//async(RX10_TEMP16)
						{
						RX10_TEMP14[RX10_TEMP15] = RX10_TEMP23;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP24 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP12]);
/*arrayInitBlock*/
for(int RX10_TEMP26= 0;RX10_TEMP26 <RX10_TEMP24.length ;RX10_TEMP26++ )			{

			final doubleStub RX10_TEMP25 = RX10_TEMP14[RX10_TEMP26];

			RX10_TEMP24[RX10_TEMP26] =RX10_TEMP25;
			}

;


		final doubleRefArray1 RX10_TEMP27 = new doubleRefArray1(dDst, RX10_TEMP24,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP27.hashCode());


		final doubleRefArray1 result = RX10_TEMP27;

		/*FINISH
*/			{

			final Dist1 RX10_TEMP28 = d.distValue;


			final Dist1 X10_TEMP25 = RX10_TEMP28;


			final Region1 RX10_TEMP29 = X10_TEMP25.dReg;


			final int RX10_TEMP30 = Program.searchPointInRegion1(RX10_TEMP29, pt,myUniquePlacePoint);


			final int RX10_TEMP31 = 0;


			final boolean RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31;

			if(RX10_TEMP32)
				{

				final String RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25.";

				throw new RuntimeException(RX10_TEMP33);

				}

			final int RX10_TEMP34 = Program.getPlaceFromDist1(X10_TEMP25, RX10_TEMP30,myUniquePlacePoint);


			final int X10_TEMP28 = RX10_TEMP34;

			//async(X10_TEMP28)
				{

				final Dist1 RX10_TEMP35 = d.distValue;


				final Region1 RX10_TEMP36 = RX10_TEMP35.dReg;


				final int RX10_TEMP37 = Program.searchPointInRegion1(RX10_TEMP36, pt,X10_TEMP28);


				final int RX10_TEMP38 = 0;


				final boolean RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38;

				if(RX10_TEMP39)
					{

					String RX10_TEMP40 = "Array access index out of bounds";

					throw new RuntimeException(RX10_TEMP40);

					}

				final int RX10_TEMP41 = Program.getPlaceFromDist1(RX10_TEMP35, RX10_TEMP37,X10_TEMP28);


				final int RX10_TEMP43 = 0;


				final boolean RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43;

				if(RX10_TEMP44)
					{

					String RX10_TEMP42 = "Bad place access for array d";

					throw new RuntimeException(RX10_TEMP42);

					}

				final double RX10_TEMP45 = Program.getRefArrayValue1double(d, RX10_TEMP37,X10_TEMP28);


				final double val = RX10_TEMP45;

				//async(pHere)
					{

					final int X10_TEMP33 = 0;


					final double X10_TEMP36 = val;


					final Point1 RX10_TEMP46 = new Point1(X10_TEMP33,pHere);
					
Program.globalPointerHashMap.get(pHere).add(RX10_TEMP46.hashCode());


					final Dist1 RX10_TEMP47 = result.distValue;


					final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;


					final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46,pHere);


					final int RX10_TEMP50 = 0;


					final boolean RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50;

					if(RX10_TEMP51)
						{

						String RX10_TEMP52 = "Array index out of bounds";

						throw new RuntimeException(RX10_TEMP52);

						}

					final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49,pHere);


					final int RX10_TEMP55 = 0;


					final boolean RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55;

					if(RX10_TEMP56)
						{

						String RX10_TEMP54 = "Bad place access for array result";

						throw new RuntimeException(RX10_TEMP54);

						}
					Program.setRefArrayValue1double(result, RX10_TEMP49, X10_TEMP36,pHere);
					}
				}
			}

		final int X10_TEMP38 = 0;


		final Point1 RX10_TEMP57 = new Point1(X10_TEMP38,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP57.hashCode());


		final Dist1 RX10_TEMP58 = result.distValue;


		final Region1 RX10_TEMP59 = RX10_TEMP58.dReg;


		final int RX10_TEMP60 = Program.searchPointInRegion1(RX10_TEMP59, RX10_TEMP57,myUniquePlacePoint);


		final int RX10_TEMP61 = 0;


		final boolean RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61;

		if(RX10_TEMP62)
			{

			String RX10_TEMP63 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP63);

			}

		final int RX10_TEMP64 = Program.getPlaceFromDist1(RX10_TEMP58, RX10_TEMP60,myUniquePlacePoint);


		final int RX10_TEMP66 = 0;


		final boolean RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66;

		if(RX10_TEMP67)
			{

			String RX10_TEMP65 = "Bad place access for array result";

			throw new RuntimeException(RX10_TEMP65);

			}

		final double RX10_TEMP68 = Program.getRefArrayValue1double(result, RX10_TEMP60,myUniquePlacePoint);


		final double X10_TEMP40 = RX10_TEMP68;

		return X10_TEMP40;
		}
public static Region1 X10Util_getRank2D ( final Region2 r, final int n, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 2;


		final boolean X10_TEMP2 = n >= X10_TEMP3;

		if(X10_TEMP2)
			{

			final String X10_TEMP4 = "Invalid dimension for rank projection. Got ";


			final String X10_TEMP5 = ", expected 2";


			String X10_TEMP6 = X10_TEMP4 + n;


			X10_TEMP6 = X10_TEMP6 + X10_TEMP5;

			throw new RuntimeException(X10_TEMP6);

			}

		final int X10_TEMP7 = 0;


		final int X10_TEMP8 = 1;


		final int X10_TEMP10 = X10_TEMP7 - X10_TEMP8;


		Region1 X10_TEMP9 = Program.createNewRegion1R(X10_TEMP7, X10_TEMP10,myUniquePlacePoint);


		final int X10_TEMP11 = 0;


		final boolean X10_TEMP13 = n == X10_TEMP11;


		final int X10_TEMP12 = 1;


		final boolean X10_TEMP14 = n == X10_TEMP12;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = r.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point2 RX10_TEMP1 = Program.regionOrdinalPoint2(r, RX10_TEMP5,myUniquePlacePoint);


			final int X10_TEMP15 = RX10_TEMP1.f0;


			final int X10_TEMP16 = RX10_TEMP1.f1;

			if(X10_TEMP13)
				{

				final Region1 X10_TEMP17 = Program.createNewRegion1R(X10_TEMP15, X10_TEMP15,myUniquePlacePoint);


				X10_TEMP9 = Program.unionRegion1(X10_TEMP9, X10_TEMP17,myUniquePlacePoint);

				}
			else
				{
				if(X10_TEMP14)
					{

					final Region1 X10_TEMP17 = Program.createNewRegion1R(X10_TEMP16, X10_TEMP16,myUniquePlacePoint);


					X10_TEMP9 = Program.unionRegion1(X10_TEMP9, X10_TEMP17,myUniquePlacePoint);

					}
				}
 			}

		final Region1 X10_TEMP18 = X10_TEMP9;

		return X10_TEMP18;
		}
public static Region1 X10Util_getRank3D ( final Region3 r, final int n, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 3;


		final boolean X10_TEMP2 = n >= X10_TEMP3;

		if(X10_TEMP2)
			{

			final String X10_TEMP4 = "Invalid dimension for rank projection. Got ";


			final String X10_TEMP5 = ", expected 3";


			String X10_TEMP6 = X10_TEMP4 + n;


			X10_TEMP6 = X10_TEMP6 + X10_TEMP5;

			throw new RuntimeException(X10_TEMP6);

			}

		final int X10_TEMP7 = 0;


		final int X10_TEMP8 = 1;


		final int X10_TEMP10 = X10_TEMP7 - X10_TEMP8;


		Region1 X10_TEMP9 = Program.createNewRegion1R(X10_TEMP7, X10_TEMP10,myUniquePlacePoint);


		final int X10_TEMP11 = 0;


		final boolean X10_TEMP14 = n == X10_TEMP11;


		final int X10_TEMP12 = 1;


		final boolean X10_TEMP15 = n == X10_TEMP12;


		final int X10_TEMP13 = 2;


		final boolean X10_TEMP16 = n == X10_TEMP13;


		final int RX10_TEMP4 = 1;


		int RX10_TEMP2 = r.regSize;


		RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


		final int  RX10_TEMP3 = RX10_TEMP2+1;

		for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
			{

			final int RX10_TEMP5 = RX10_TEMP0;


			final Point3 RX10_TEMP1 = Program.regionOrdinalPoint3(r, RX10_TEMP5,myUniquePlacePoint);


			final int X10_TEMP17 = RX10_TEMP1.f0;


			final int X10_TEMP18 = RX10_TEMP1.f1;


			final int X10_TEMP19 = RX10_TEMP1.f2;

			if(X10_TEMP14)
				{

				final Region1 X10_TEMP20 = Program.createNewRegion1R(X10_TEMP17, X10_TEMP17,myUniquePlacePoint);


				X10_TEMP9 = Program.unionRegion1(X10_TEMP9, X10_TEMP20,myUniquePlacePoint);

				}
			else
				{
				if(X10_TEMP15)
					{

					final Region1 X10_TEMP20 = Program.createNewRegion1R(X10_TEMP18, X10_TEMP18,myUniquePlacePoint);


					X10_TEMP9 = Program.unionRegion1(X10_TEMP9, X10_TEMP20,myUniquePlacePoint);

					}
				else
					{
					if(X10_TEMP16)
						{

						final Region1 X10_TEMP20 = Program.createNewRegion1R(X10_TEMP19, X10_TEMP19,myUniquePlacePoint);


						X10_TEMP9 = Program.unionRegion1(X10_TEMP9, X10_TEMP20,myUniquePlacePoint);

						}
					}
 				}
 			}

		final Region1 X10_TEMP21 = X10_TEMP9;

		return X10_TEMP21;
		}
public static Region1 X10Util_getLRank2D ( final Dist2 d, final int n, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final Region1 X10_TEMP6 = Program.X10Util_getPRank2D(d, X10_TEMP4, n,myUniquePlacePoint);

		return X10_TEMP6;
		}
public static Region1 X10Util_getLRank3D ( final Dist3 d, final int n, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final Region1 X10_TEMP6 = Program.X10Util_getPRank3D(d, X10_TEMP4, n,myUniquePlacePoint);

		return X10_TEMP6;
		}
public static Region1 X10Util_getPRank2D ( final Dist2 d, final int p, final int n, int myUniquePlacePoint)
		{

		final Dist2 X10_TEMP2 = Program.restrictDist2(d, p,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = X10_TEMP2.dReg;


		final Region2 X10_TEMP5 = RX10_TEMP0;


		final Region1 X10_TEMP7 = Program.X10Util_getRank2D(X10_TEMP5, n,myUniquePlacePoint);

		return X10_TEMP7;
		}
public static Region1 X10Util_getPRank3D ( final Dist3 d, final int p, final int n, int myUniquePlacePoint)
		{

		final Dist3 X10_TEMP2 = Program.restrictDist3(d, p,myUniquePlacePoint);


		final Region3 RX10_TEMP0 = X10_TEMP2.dReg;


		final Region3 X10_TEMP5 = RX10_TEMP0;


		final Region1 X10_TEMP7 = Program.X10Util_getRank3D(X10_TEMP5, n,myUniquePlacePoint);

		return X10_TEMP7;
		}
public static Region1 X10Util_get1DLRegion ( final Dist1 d, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final Dist1 X10_TEMP3 = Program.restrictDist1(d, X10_TEMP1,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = X10_TEMP3.dReg;


		final Region1 X10_TEMP4 = RX10_TEMP0;

		return X10_TEMP4;
		}
public static Region1 X10Util_get1DPRegion ( final Dist1 d, final int p, int myUniquePlacePoint)
		{

		final Dist1 X10_TEMP2 = Program.restrictDist1(d, p,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = X10_TEMP2.dReg;


		final Region1 X10_TEMP3 = RX10_TEMP0;

		return X10_TEMP3;
		}
public static Region2 X10Util_get2DLRegion ( final Dist2 d, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final Dist2 X10_TEMP3 = Program.restrictDist2(d, X10_TEMP1,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = X10_TEMP3.dReg;


		final Region2 X10_TEMP4 = RX10_TEMP0;

		return X10_TEMP4;
		}
public static Region2 X10Util_get2DPRegion ( final Dist2 d, final int p, int myUniquePlacePoint)
		{

		final Dist2 X10_TEMP2 = Program.restrictDist2(d, p,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = X10_TEMP2.dReg;


		final Region2 X10_TEMP3 = RX10_TEMP0;

		return X10_TEMP3;
		}
public static Region3 X10Util_get3DLRegion ( final Dist3 d, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 0;


		final Dist3 X10_TEMP3 = Program.restrictDist3(d, X10_TEMP1,myUniquePlacePoint);


		final Region3 RX10_TEMP0 = X10_TEMP3.dReg;


		final Region3 X10_TEMP4 = RX10_TEMP0;

		return X10_TEMP4;
		}
public static Region3 X10Util_get3DPRegion ( final Dist3 d, final int p, int myUniquePlacePoint)
		{

		final Dist3 X10_TEMP2 = Program.restrictDist3(d, p,myUniquePlacePoint);


		final Region3 RX10_TEMP0 = X10_TEMP2.dReg;


		final Region3 X10_TEMP3 = RX10_TEMP0;

		return X10_TEMP3;
		}
public static void X10Util_print ( final String s, int myUniquePlacePoint)
		{
		if(_X10Util_DEBUG)
			{
			System.out.print(s);
			}
		}
public static void X10Util_println ( final String s, int myUniquePlacePoint)
		{
		Program.X10Util_print(s,myUniquePlacePoint);
		Program.X10Util_newline(myUniquePlacePoint);
		}
public static void X10Util_newline (  int myUniquePlacePoint)
		{

		final String X10_TEMP2 = "\n";

		Program.X10Util_print(X10_TEMP2,myUniquePlacePoint);
		}
public static double doublerefArraySum1 ( final doubleRefArray1 sumArray, int myUniquePlacePoint)
		{

		final int maxPlaces = 1;


		final int one = 1;


		final int zero = 0;


		final int maxPlacesMinusOne = maxPlaces - one;


		final Region1 dReg = Program.createNewRegion1R(zero, maxPlacesMinusOne,myUniquePlacePoint);


		final int source = 0;


		final Dist1 dSum = Program.getPlaceDist1(dReg, source,myUniquePlacePoint);


		final double initVal = 0;


		final Region1 RX10_TEMP0 = dSum.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dSum, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final double[] RX10_TEMP15 = new double/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{
						RX10_TEMP15[RX10_TEMP13] =initVal;
						}

;


					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP17 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final doubleStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(dSum, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final doubleRefArray1 localSumArray = RX10_TEMP20;


		final Dist1 dUnique = Program.getUniqueDist(myUniquePlacePoint);

		/*FINISH
*/			{

			final Region1 RX10_TEMP22 = dUnique.dReg;


			final int RX10_TEMP25 = 1;


			int RX10_TEMP23 = RX10_TEMP22.regSize;


			RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


			final int  RX10_TEMP24 = RX10_TEMP23+1;

			for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
				{

				final int RX10_TEMP26 = RX10_TEMP21;


				final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);


				final Region1 RX10_TEMP27 = dUnique.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, p,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point p not found in the distribution dUnique.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(dUnique, RX10_TEMP28,myUniquePlacePoint);


				final int nthPlace = RX10_TEMP32;

				//async(nthPlace)
					{

					double localSumTemp = 0;


					final int thisPlace = 0;


					final Dist1 RX10_TEMP33 = sumArray.distValue;


					final Dist1 sumArrayDist = RX10_TEMP33;


					final Dist1 sumArrayDistHere = Program.restrictDist1(sumArrayDist, thisPlace,nthPlace);


					final Region1 RX10_TEMP35 = sumArrayDistHere.dReg;


					final int RX10_TEMP38 = 1;


					int RX10_TEMP36 = RX10_TEMP35.regSize;


					RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


					final int  RX10_TEMP37 = RX10_TEMP36+1;

					for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
						{

						final int RX10_TEMP39 = RX10_TEMP34;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP35, RX10_TEMP39,nthPlace);


						final Dist1 RX10_TEMP40 = sumArray.distValue;


						final Region1 RX10_TEMP41 = RX10_TEMP40.dReg;


						final int RX10_TEMP42 = Program.searchPointInRegion1(RX10_TEMP41, pt,nthPlace);


						final int RX10_TEMP43 = 0;


						final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

						if(RX10_TEMP44)
							{

							String RX10_TEMP45 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP45);

							}

						final int RX10_TEMP46 = Program.getPlaceFromDist1(RX10_TEMP40, RX10_TEMP42,nthPlace);


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

						if(RX10_TEMP49)
							{

							String RX10_TEMP47 = "Bad place access for array sumArray";

							throw new RuntimeException(RX10_TEMP47);

							}

						final double RX10_TEMP50 = Program.getRefArrayValue1double(sumArray, RX10_TEMP42,nthPlace);


						final double localSumCurr = RX10_TEMP50;


						localSumTemp = localSumTemp + localSumCurr;

						}

					final boolean isNotEqual = localSumTemp != zero;

					if(isNotEqual)
						{

						final int index = 0;


						final double localSum = localSumTemp;

						//async(source)
							{

							final Point1 RX10_TEMP51 = new Point1(index,source);
							
Program.globalPointerHashMap.get(source).add(RX10_TEMP51.hashCode());


							final Dist1 RX10_TEMP52 = localSumArray.distValue;


							final Region1 RX10_TEMP53 = RX10_TEMP52.dReg;


							final int RX10_TEMP54 = Program.searchPointInRegion1(RX10_TEMP53, RX10_TEMP51,source);


							final int RX10_TEMP55 = 0;


							final boolean RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55;

							if(RX10_TEMP56)
								{

								String RX10_TEMP57 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP57);

								}

							final int RX10_TEMP58 = Program.getPlaceFromDist1(RX10_TEMP52, RX10_TEMP54,source);


							final int RX10_TEMP60 = 0;


							final boolean RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60;

							if(RX10_TEMP61)
								{

								String RX10_TEMP59 = "Bad place access for array localSumArray";

								throw new RuntimeException(RX10_TEMP59);

								}
							Program.setRefArrayValue1double(localSumArray, RX10_TEMP54, localSum,source);
							}
						}
					}
				}
			}

		double globalSum = 0;


		final Dist1 RX10_TEMP63 = localSumArray.distValue;


		final Region1 RX10_TEMP64 = RX10_TEMP63.dReg;


		final int RX10_TEMP67 = 1;


		int RX10_TEMP65 = RX10_TEMP64.regSize;


		RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67;


		final int  RX10_TEMP66 = RX10_TEMP65+1;

		for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP66; RX10_TEMP62++)
			{

			final int RX10_TEMP68 = RX10_TEMP62;


			final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP64, RX10_TEMP68,myUniquePlacePoint);


			final Dist1 RX10_TEMP69 = localSumArray.distValue;


			final Region1 RX10_TEMP70 = RX10_TEMP69.dReg;


			final int RX10_TEMP71 = Program.searchPointInRegion1(RX10_TEMP70, p,myUniquePlacePoint);


			final int RX10_TEMP72 = 0;


			final boolean RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72;

			if(RX10_TEMP73)
				{

				String RX10_TEMP74 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP74);

				}

			final int RX10_TEMP75 = Program.getPlaceFromDist1(RX10_TEMP69, RX10_TEMP71,myUniquePlacePoint);


			final int RX10_TEMP77 = 0;


			final boolean RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77;

			if(RX10_TEMP78)
				{

				String RX10_TEMP76 = "Bad place access for array localSumArray";

				throw new RuntimeException(RX10_TEMP76);

				}

			final double RX10_TEMP79 = Program.getRefArrayValue1double(localSumArray, RX10_TEMP71,myUniquePlacePoint);


			final double localSumCurr = RX10_TEMP79;


			globalSum = globalSum + localSumCurr;

			}
		return globalSum;
		}
public static int intrefArrayMax1 ( final intRefArray1 maxArray, int myUniquePlacePoint)
		{

		final int maxPlaces = 1;


		final int one = 1;


		final int zero = 0;


		final int maxPlacesMinusOne = maxPlaces - one;


		final Region1 dReg = Program.createNewRegion1R(zero, maxPlacesMinusOne,myUniquePlacePoint);


		final int source = 0;


		final Dist1 dMax = Program.getPlaceDist1(dReg, source,myUniquePlacePoint);


		final int zeroVal = 0;


		final int maxVal = 2147483647;


		final int initVal = zeroVal - maxVal;


		final Region1 RX10_TEMP0 = dMax.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final intStub[] RX10_TEMP6 = new intStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dMax, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final int[] RX10_TEMP15 = new int/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{
						RX10_TEMP15[RX10_TEMP13] =initVal;
						}

;


					final intStub RX10_TEMP16 = new intStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final intStub[] RX10_TEMP17 = (intStub[])(new intStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final intStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final intRefArray1 RX10_TEMP20 = new intRefArray1(dMax, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final intRefArray1 localMaxArray = RX10_TEMP20;


		final Dist1 dUnique = Program.getUniqueDist(myUniquePlacePoint);

		/*FINISH
*/			{

			final Region1 RX10_TEMP22 = dUnique.dReg;


			final int RX10_TEMP25 = 1;


			int RX10_TEMP23 = RX10_TEMP22.regSize;


			RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


			final int  RX10_TEMP24 = RX10_TEMP23+1;

			for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
				{

				final int RX10_TEMP26 = RX10_TEMP21;


				final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);


				final Region1 RX10_TEMP27 = dUnique.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, p,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point p not found in the distribution dUnique.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(dUnique, RX10_TEMP28,myUniquePlacePoint);


				final int nthPlace = RX10_TEMP32;

				//async(nthPlace)
					{

					int localMaxTemp = initVal;


					final int thisPlace = 0;


					final Dist1 RX10_TEMP33 = maxArray.distValue;


					final Dist1 maxArrayDist = RX10_TEMP33;


					final Dist1 maxArrayDistHere = Program.restrictDist1(maxArrayDist, thisPlace,nthPlace);


					final Region1 RX10_TEMP35 = maxArrayDistHere.dReg;


					final int RX10_TEMP38 = 1;


					int RX10_TEMP36 = RX10_TEMP35.regSize;


					RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


					final int  RX10_TEMP37 = RX10_TEMP36+1;

					for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
						{

						final int RX10_TEMP39 = RX10_TEMP34;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP35, RX10_TEMP39,nthPlace);


						final Dist1 RX10_TEMP40 = maxArray.distValue;


						final Region1 RX10_TEMP41 = RX10_TEMP40.dReg;


						final int RX10_TEMP42 = Program.searchPointInRegion1(RX10_TEMP41, pt,nthPlace);


						final int RX10_TEMP43 = 0;


						final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

						if(RX10_TEMP44)
							{

							String RX10_TEMP45 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP45);

							}

						final int RX10_TEMP46 = Program.getPlaceFromDist1(RX10_TEMP40, RX10_TEMP42,nthPlace);


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

						if(RX10_TEMP49)
							{

							String RX10_TEMP47 = "Bad place access for array maxArray";

							throw new RuntimeException(RX10_TEMP47);

							}

						final int RX10_TEMP50 = Program.getRefArrayValue1int(maxArray, RX10_TEMP42,nthPlace);


						final int localMaxCurr = RX10_TEMP50;


						final boolean isGreater = localMaxCurr > localMaxTemp;

						if(isGreater)
							{

							localMaxTemp = localMaxCurr;

							}
						}

					final int index = 0;


					final int localMax = localMaxTemp;

					//async(source)
						{

						final Point1 RX10_TEMP51 = new Point1(index,source);
						
Program.globalPointerHashMap.get(source).add(RX10_TEMP51.hashCode());


						final Dist1 RX10_TEMP52 = localMaxArray.distValue;


						final Region1 RX10_TEMP53 = RX10_TEMP52.dReg;


						final int RX10_TEMP54 = Program.searchPointInRegion1(RX10_TEMP53, RX10_TEMP51,source);


						final int RX10_TEMP55 = 0;


						final boolean RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55;

						if(RX10_TEMP56)
							{

							String RX10_TEMP57 = "Array index out of bounds";

							throw new RuntimeException(RX10_TEMP57);

							}

						final int RX10_TEMP58 = Program.getPlaceFromDist1(RX10_TEMP52, RX10_TEMP54,source);


						final int RX10_TEMP60 = 0;


						final boolean RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60;

						if(RX10_TEMP61)
							{

							String RX10_TEMP59 = "Bad place access for array localMaxArray";

							throw new RuntimeException(RX10_TEMP59);

							}
						Program.setRefArrayValue1int(localMaxArray, RX10_TEMP54, localMax,source);
						}
					}
				}
			}

		final Point1 RX10_TEMP62 = new Point1(zero,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP62.hashCode());


		final Dist1 RX10_TEMP63 = localMaxArray.distValue;


		final Region1 RX10_TEMP64 = RX10_TEMP63.dReg;


		final int RX10_TEMP65 = Program.searchPointInRegion1(RX10_TEMP64, RX10_TEMP62,myUniquePlacePoint);


		final int RX10_TEMP66 = 0;


		final boolean RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66;

		if(RX10_TEMP67)
			{

			String RX10_TEMP68 = "Array access index out of bounds";

			throw new RuntimeException(RX10_TEMP68);

			}

		final int RX10_TEMP69 = Program.getPlaceFromDist1(RX10_TEMP63, RX10_TEMP65,myUniquePlacePoint);


		final int RX10_TEMP71 = 0;


		final boolean RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71;

		if(RX10_TEMP72)
			{

			String RX10_TEMP70 = "Bad place access for array localMaxArray";

			throw new RuntimeException(RX10_TEMP70);

			}

		final int RX10_TEMP73 = Program.getRefArrayValue1int(localMaxArray, RX10_TEMP65,myUniquePlacePoint);


		int globalMax = RX10_TEMP73;


		final Dist1 RX10_TEMP75 = localMaxArray.distValue;


		final Region1 RX10_TEMP76 = RX10_TEMP75.dReg;


		final int RX10_TEMP79 = 1;


		int RX10_TEMP77 = RX10_TEMP76.regSize;


		RX10_TEMP77 = RX10_TEMP77 - RX10_TEMP79;


		final int  RX10_TEMP78 = RX10_TEMP77+1;

		for(int RX10_TEMP74=0; RX10_TEMP74 < RX10_TEMP78; RX10_TEMP74++)
			{

			final int RX10_TEMP80 = RX10_TEMP74;


			final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP76, RX10_TEMP80,myUniquePlacePoint);


			final Dist1 RX10_TEMP81 = localMaxArray.distValue;


			final Region1 RX10_TEMP82 = RX10_TEMP81.dReg;


			final int RX10_TEMP83 = Program.searchPointInRegion1(RX10_TEMP82, p,myUniquePlacePoint);


			final int RX10_TEMP84 = 0;


			final boolean RX10_TEMP85 = RX10_TEMP83 < RX10_TEMP84;

			if(RX10_TEMP85)
				{

				String RX10_TEMP86 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP86);

				}

			final int RX10_TEMP87 = Program.getPlaceFromDist1(RX10_TEMP81, RX10_TEMP83,myUniquePlacePoint);


			final int RX10_TEMP89 = 0;


			final boolean RX10_TEMP90 = RX10_TEMP87 != RX10_TEMP89;

			if(RX10_TEMP90)
				{

				String RX10_TEMP88 = "Bad place access for array localMaxArray";

				throw new RuntimeException(RX10_TEMP88);

				}

			final int RX10_TEMP91 = Program.getRefArrayValue1int(localMaxArray, RX10_TEMP83,myUniquePlacePoint);


			final int localMaxCurr = RX10_TEMP91;


			final boolean isGreater = localMaxCurr > globalMax;

			if(isGreater)
				{

				globalMax = localMaxCurr;

				}
			}
		return globalMax;
		}
public static int intrefArraySum1 ( final intRefArray1 sumArray, int myUniquePlacePoint)
		{

		final int maxPlaces = 1;


		final int one = 1;


		final int zero = 0;


		final int maxPlacesMinusOne = maxPlaces - one;


		final Region1 dReg = Program.createNewRegion1R(zero, maxPlacesMinusOne,myUniquePlacePoint);


		final int source = 0;


		final Dist1 dSum = Program.getPlaceDist1(dReg, source,myUniquePlacePoint);


		final int initVal = 0;


		final Region1 RX10_TEMP0 = dSum.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final intStub[] RX10_TEMP6 = new intStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(dSum, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final int[] RX10_TEMP15 = new int/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{
						RX10_TEMP15[RX10_TEMP13] =initVal;
						}

;


					final intStub RX10_TEMP16 = new intStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final intStub[] RX10_TEMP17 = (intStub[])(new intStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			final intStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final intRefArray1 RX10_TEMP20 = new intRefArray1(dSum, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final intRefArray1 localSumArray = RX10_TEMP20;


		final Dist1 dUnique = Program.getUniqueDist(myUniquePlacePoint);

		/*FINISH
*/			{

			final Region1 RX10_TEMP22 = dUnique.dReg;


			final int RX10_TEMP25 = 1;


			int RX10_TEMP23 = RX10_TEMP22.regSize;


			RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25;


			final int  RX10_TEMP24 = RX10_TEMP23+1;

			for(int RX10_TEMP21=0; RX10_TEMP21 < RX10_TEMP24; RX10_TEMP21++)
				{

				final int RX10_TEMP26 = RX10_TEMP21;


				final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP22, RX10_TEMP26,myUniquePlacePoint);


				final Region1 RX10_TEMP27 = dUnique.dReg;


				final int RX10_TEMP28 = Program.searchPointInRegion1(RX10_TEMP27, p,myUniquePlacePoint);


				final int RX10_TEMP29 = 0;


				final boolean RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29;

				if(RX10_TEMP30)
					{

					final String RX10_TEMP31 = "Point p not found in the distribution dUnique.";

					throw new RuntimeException(RX10_TEMP31);

					}

				final int RX10_TEMP32 = Program.getPlaceFromDist1(dUnique, RX10_TEMP28,myUniquePlacePoint);


				final int nthPlace = RX10_TEMP32;

				//async(nthPlace)
					{

					int localSumTemp = 0;


					final int thisPlace = 0;


					final Dist1 RX10_TEMP33 = sumArray.distValue;


					final Dist1 sumArrayDist = RX10_TEMP33;


					final Dist1 sumArrayDistHere = Program.restrictDist1(sumArrayDist, thisPlace,nthPlace);


					final Region1 RX10_TEMP35 = sumArrayDistHere.dReg;


					final int RX10_TEMP38 = 1;


					int RX10_TEMP36 = RX10_TEMP35.regSize;


					RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38;


					final int  RX10_TEMP37 = RX10_TEMP36+1;

					for(int RX10_TEMP34=0; RX10_TEMP34 < RX10_TEMP37; RX10_TEMP34++)
						{

						final int RX10_TEMP39 = RX10_TEMP34;


						final Point1 pt = Program.regionOrdinalPoint1(RX10_TEMP35, RX10_TEMP39,nthPlace);


						final Dist1 RX10_TEMP40 = sumArray.distValue;


						final Region1 RX10_TEMP41 = RX10_TEMP40.dReg;


						final int RX10_TEMP42 = Program.searchPointInRegion1(RX10_TEMP41, pt,nthPlace);


						final int RX10_TEMP43 = 0;


						final boolean RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43;

						if(RX10_TEMP44)
							{

							String RX10_TEMP45 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP45);

							}

						final int RX10_TEMP46 = Program.getPlaceFromDist1(RX10_TEMP40, RX10_TEMP42,nthPlace);


						final int RX10_TEMP48 = 0;


						final boolean RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48;

						if(RX10_TEMP49)
							{

							String RX10_TEMP47 = "Bad place access for array sumArray";

							throw new RuntimeException(RX10_TEMP47);

							}

						final int RX10_TEMP50 = Program.getRefArrayValue1int(sumArray, RX10_TEMP42,nthPlace);


						final int localSumCurr = RX10_TEMP50;


						localSumTemp = localSumTemp + localSumCurr;

						}

					final boolean isNotEqual = localSumTemp != zero;

					if(isNotEqual)
						{

						final int index = 0;


						final int localSum = localSumTemp;

						//async(source)
							{

							final Point1 RX10_TEMP51 = new Point1(index,source);
							
Program.globalPointerHashMap.get(source).add(RX10_TEMP51.hashCode());


							final Dist1 RX10_TEMP52 = localSumArray.distValue;


							final Region1 RX10_TEMP53 = RX10_TEMP52.dReg;


							final int RX10_TEMP54 = Program.searchPointInRegion1(RX10_TEMP53, RX10_TEMP51,source);


							final int RX10_TEMP55 = 0;


							final boolean RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55;

							if(RX10_TEMP56)
								{

								String RX10_TEMP57 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP57);

								}

							final int RX10_TEMP58 = Program.getPlaceFromDist1(RX10_TEMP52, RX10_TEMP54,source);


							final int RX10_TEMP60 = 0;


							final boolean RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60;

							if(RX10_TEMP61)
								{

								String RX10_TEMP59 = "Bad place access for array localSumArray";

								throw new RuntimeException(RX10_TEMP59);

								}
							Program.setRefArrayValue1int(localSumArray, RX10_TEMP54, localSum,source);
							}
						}
					}
				}
			}

		int globalSum = 0;


		final Dist1 RX10_TEMP63 = localSumArray.distValue;


		final Region1 RX10_TEMP64 = RX10_TEMP63.dReg;


		final int RX10_TEMP67 = 1;


		int RX10_TEMP65 = RX10_TEMP64.regSize;


		RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67;


		final int  RX10_TEMP66 = RX10_TEMP65+1;

		for(int RX10_TEMP62=0; RX10_TEMP62 < RX10_TEMP66; RX10_TEMP62++)
			{

			final int RX10_TEMP68 = RX10_TEMP62;


			final Point1 p = Program.regionOrdinalPoint1(RX10_TEMP64, RX10_TEMP68,myUniquePlacePoint);


			final Dist1 RX10_TEMP69 = localSumArray.distValue;


			final Region1 RX10_TEMP70 = RX10_TEMP69.dReg;


			final int RX10_TEMP71 = Program.searchPointInRegion1(RX10_TEMP70, p,myUniquePlacePoint);


			final int RX10_TEMP72 = 0;


			final boolean RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72;

			if(RX10_TEMP73)
				{

				String RX10_TEMP74 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP74);

				}

			final int RX10_TEMP75 = Program.getPlaceFromDist1(RX10_TEMP69, RX10_TEMP71,myUniquePlacePoint);


			final int RX10_TEMP77 = 0;


			final boolean RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77;

			if(RX10_TEMP78)
				{

				String RX10_TEMP76 = "Bad place access for array localSumArray";

				throw new RuntimeException(RX10_TEMP76);

				}

			final int RX10_TEMP79 = Program.getRefArrayValue1int(localSumArray, RX10_TEMP71,myUniquePlacePoint);


			final int localSumCurr = RX10_TEMP79;


			globalSum = globalSum + localSumCurr;

			}
		return globalSum;
		}
public static int constantSearchRegion1 ( final Region1 r, final Point1 target, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int dim0 = r.dim0;


		final int low0 = r.low0;


		final int high0 = low0 + dim0;


		int pt0 = target.f0;


		final boolean lbound0 = pt0 < low0;


		final boolean hbound0 = pt0 >= high0;


		final int dim1 = 1;


		boolean outRegion = false;


		outRegion = outRegion || lbound0;


		outRegion = outRegion || hbound0;

		if(outRegion)
			{

			int notFound = 0;


			notFound = notFound - one;

			return notFound;
			}

		final int stride1 = 1;


		final int stride0 = stride1 * dim1;


		pt0 = pt0 - low0;


		final int offset0 = stride0 * pt0;


		int found = 0;


		found = found + offset0;

		return found;
		}
public static int constantSearchRegion3 ( final Region3 r, final Point3 target, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int dim0 = r.dim0;


		final int low0 = r.low0;


		final int high0 = low0 + dim0;


		int pt0 = target.f0;


		final boolean lbound0 = pt0 < low0;


		final boolean hbound0 = pt0 >= high0;


		final int dim1 = r.dim1;


		final int low1 = r.low1;


		final int high1 = low1 + dim1;


		int pt1 = target.f1;


		final boolean lbound1 = pt1 < low1;


		final boolean hbound1 = pt1 >= high1;


		final int dim2 = r.dim2;


		final int low2 = r.low2;


		final int high2 = low2 + dim2;


		int pt2 = target.f2;


		final boolean lbound2 = pt2 < low2;


		final boolean hbound2 = pt2 >= high2;


		final int dim3 = 1;


		boolean outRegion = false;


		outRegion = outRegion || lbound0;


		outRegion = outRegion || hbound0;


		outRegion = outRegion || lbound1;


		outRegion = outRegion || hbound1;


		outRegion = outRegion || lbound2;


		outRegion = outRegion || hbound2;

		if(outRegion)
			{

			int notFound = 0;


			notFound = notFound - one;

			return notFound;
			}

		final int stride3 = 1;


		final int stride2 = stride3 * dim3;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		pt0 = pt0 - low0;


		final int offset0 = stride0 * pt0;


		pt1 = pt1 - low1;


		final int offset1 = stride1 * pt1;


		pt2 = pt2 - low2;


		final int offset2 = stride2 * pt2;


		int found = 0;


		found = found + offset0;


		found = found + offset1;


		found = found + offset2;

		return found;
		}
public static int constantSearchRegion2 ( final Region2 r, final Point2 target, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int dim0 = r.dim0;


		final int low0 = r.low0;


		final int high0 = low0 + dim0;


		int pt0 = target.f0;


		final boolean lbound0 = pt0 < low0;


		final boolean hbound0 = pt0 >= high0;


		final int dim1 = r.dim1;


		final int low1 = r.low1;


		final int high1 = low1 + dim1;


		int pt1 = target.f1;


		final boolean lbound1 = pt1 < low1;


		final boolean hbound1 = pt1 >= high1;


		final int dim2 = 1;


		boolean outRegion = false;


		outRegion = outRegion || lbound0;


		outRegion = outRegion || hbound0;


		outRegion = outRegion || lbound1;


		outRegion = outRegion || hbound1;

		if(outRegion)
			{

			int notFound = 0;


			notFound = notFound - one;

			return notFound;
			}

		final int stride2 = 1;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		pt0 = pt0 - low0;


		final int offset0 = stride0 * pt0;


		pt1 = pt1 - low1;


		final int offset1 = stride1 * pt1;


		int found = 0;


		found = found + offset0;


		found = found + offset1;

		return found;
		}
public static String toStringPoint1 ( final Point1 p, int myUniquePlacePoint)
		{

		String str = "";


		final int f0 = p.f0;


		String lSq = "[";


		String rSq = "]";


		str = str + lSq;


		str = str + f0;


		str = str + rSq;

		return str;
		}
public static String toStringPoint2 ( final Point2 p, int myUniquePlacePoint)
		{

		String str = "";


		final int f0 = p.f0;


		final int f1 = p.f1;


		String lSq = "[";


		String comma = ",";


		String rSq = "]";


		str = str + lSq;


		str = str + f0;


		str = str + comma;


		str = str + f1;


		str = str + rSq;

		return str;
		}
public static void setRefArrayValue2Complex ( final ComplexRefArray2 array, final int index, final Complex val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ComplexStub[] contents = array.contents;


		final ComplexStub indexStub = contents[placeIndex];


		final Complex[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static void setRefArrayValue1double ( final doubleRefArray1 array, final int index, final double val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int getPlaceFromDist3 ( final Dist3 dn, final int index, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] placeArray = d.placeArray;


		final int retPlace = placeArray[index];

		return retPlace;
		}
public static void setRefArrayValue1Region1 ( final Region1RefArray1 array, final int index, final Region1 val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final Region1Stub[] contents = array.contents;


		final Region1Stub indexStub = contents[placeIndex];


		final Region1[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int getPlaceFromDist1 ( final Dist1 dn, final int index, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] placeArray = d.placeArray;


		final int retPlace = placeArray[index];

		return retPlace;
		}
public static int getPlaceFromDist2 ( final Dist2 dn, final int index, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] placeArray = d.placeArray;


		final int retPlace = placeArray[index];

		return retPlace;
		}
public static Particle getRefArrayValue1Particle ( final ParticleRefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ParticleStub[] contents = array.contents;


		final ParticleStub indexStub = contents[placeIndex];


		final Particle[] localArray = indexStub.localArray;


		final Particle returnValue = localArray[localIndex];

		return returnValue;
		}
public static void setRefArrayValue1Complex ( final ComplexRefArray1 array, final int index, final Complex val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ComplexStub[] contents = array.contents;


		final ComplexStub indexStub = contents[placeIndex];


		final Complex[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static Complex getRefArrayValue2Complex ( final ComplexRefArray2 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ComplexStub[] contents = array.contents;


		final ComplexStub indexStub = contents[placeIndex];


		final Complex[] localArray = indexStub.localArray;


		final Complex returnValue = localArray[localIndex];

		return returnValue;
		}
public static Complex getRefArrayValue1Complex ( final ComplexRefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ComplexStub[] contents = array.contents;


		final ComplexStub indexStub = contents[placeIndex];


		final Complex[] localArray = indexStub.localArray;


		final Complex returnValue = localArray[localIndex];

		return returnValue;
		}
public static int regionLow ( final Region1 r, int myUniquePlacePoint)
		{

		final int index = 0;


		final Point1[] array = r.pointArray;


		final Point1 lowPoint = array[index];


		final int lw = lowPoint.f0;

		return lw;
		}
public static double getRefArrayValue1double ( final doubleRefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;


		final double returnValue = localArray[localIndex];

		return returnValue;
		}
public static Dist1 restrictDist1 ( final Dist1 d, final int p, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int h = 0;


		final Region1 dReg = d.dReg;


		final Dist dDist = d.dDist;


		final int dim = dReg.regSize;


		final int dimMinusOne = dim - one;


		final int  dRegReg = dimMinusOne+1;


		final Point1[] dArray = (Point1[])(dReg.pointArray);


		final int[] dPlace = (int[])(dDist.placeArray);


		final int[] dCounts = (int[])(dDist.counts);


		final int index = 0;


		int numPoints = dCounts[index];


		final int rSizeNumPoints = numPoints;


		final int rSize = numPoints - one;


		final int  tempReg = rSize+1;


		final int tempDist = rSize+1;


		final int[] rPlace = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <rPlace.length ;pt++ )			{
			rPlace[pt] =p;
			}

;


		final int[] tempArray = new int[tempDist];


		final boolean cond1 = numPoints > zero;

		if(cond1)
			{

			numPoints = 0;

			for(int pt=0; pt < dRegReg; pt++)
				{

				final int dP = dPlace[pt];


				final boolean cond2 = p == dP;

				if(cond2)
					{

					final int i = pt;

					tempArray[numPoints] = i;

					numPoints = numPoints + one;

					}
				}
			}

		final Point1[] pointArray = (Point1[])(new Point1/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <pointArray.length ;pt++ )			{

			final int idx = tempArray[pt];


			final Point1 dpt = dArray[idx];

			pointArray[pt] =dpt;
			}

;


		final Region1 dpReg = new Region1(pointArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpReg.hashCode());


		final Dist dpDist = new Dist(rPlace, rSizeNumPoints,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDist.hashCode());


		final Dist1 dpDistn = new Dist1(dpReg, dpDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDistn.hashCode());

		return dpDistn;
		}
public static Region2 unionRegion2 ( final Region2 reg1, final Region2 reg2, int myUniquePlacePoint)
		{

		int index1 = 0;


		int index2 = 0;


		int index = 0;


		final Point2[] arr1 = (Point2[])(reg1.pointArray);


		final Point2[] arr2 = (Point2[])(reg2.pointArray);


		final int size1 = reg1.regSize;


		final int size2 = reg2.regSize;


		boolean cond1 = index1 < size1;


		boolean cond2 = index2 < size2;


		final int zero = 0;


		final int one = 1;


		final int two = 2;


		boolean cond = cond1 && cond2;

		while(cond)
			{

			final Point2 p1 = arr1[index1];


			final Point2 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint2(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;


			final boolean gt = pointCompare == two;

			if(eq)
				{

				index1 = index1 + one;


				index2 = index2 + one;

				}
			if(lt)
				{

				index1 = index1 + one;

				}
			if(gt)
				{

				index2 = index2 + one;

				}

			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final int rSize = index;


		final int sizeMinusOne = rSize - one;


		final int  tempReg = sizeMinusOne+1;


		final int tempDist = sizeMinusOne+1;


		final Point2[] tempArr = new Point2[tempDist];


		index1 = 0;


		index2 = 0;


		index = 0;


		cond1 = index1 < size1;


		cond2 = index2 < size2;


		cond = cond1 && cond2;

		while(cond)
			{

			final Point2 p1 = arr1[index1];


			final Point2 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint2(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;


			final boolean gt = pointCompare == two;

			if(eq)
				{
				tempArr[index] = p1;

				index1 = index1 + one;


				index2 = index2 + one;

				}
			if(lt)
				{
				tempArr[index] = p1;

				index1 = index1 + one;

				}
			if(gt)
				{
				tempArr[index] = p2;

				index2 = index2 + one;

				}

			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			final Point2 tempArrPt = arr1[index1];

			tempArr[index] = tempArrPt;

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			final Point2 tempArrPt = arr2[index2];

			tempArr[index] = tempArrPt;

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final Point2[] arr = (Point2[])(new Point2/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <arr.length ;pt++ )			{

			final Point2 retPoint = tempArr[pt];

			arr[pt] =retPoint;
			}

;


		final Region2 unionReg = new Region2(arr,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionReg.hashCode());

		return unionReg;
		}
public static Region1 unionRegion1 ( final Region1 reg1, final Region1 reg2, int myUniquePlacePoint)
		{

		int index1 = 0;


		int index2 = 0;


		int index = 0;


		final Point1[] arr1 = (Point1[])(reg1.pointArray);


		final Point1[] arr2 = (Point1[])(reg2.pointArray);


		final int size1 = reg1.regSize;


		final int size2 = reg2.regSize;


		boolean cond1 = index1 < size1;


		boolean cond2 = index2 < size2;


		final int zero = 0;


		final int one = 1;


		final int two = 2;


		boolean cond = cond1 && cond2;

		while(cond)
			{

			final Point1 p1 = arr1[index1];


			final Point1 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint1(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;


			final boolean gt = pointCompare == two;

			if(eq)
				{

				index1 = index1 + one;


				index2 = index2 + one;

				}
			if(lt)
				{

				index1 = index1 + one;

				}
			if(gt)
				{

				index2 = index2 + one;

				}

			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final int rSize = index;


		final int sizeMinusOne = rSize - one;


		final int  tempReg = sizeMinusOne+1;


		final int tempDist = sizeMinusOne+1;


		final Point1[] tempArr = new Point1[tempDist];


		index1 = 0;


		index2 = 0;


		index = 0;


		cond1 = index1 < size1;


		cond2 = index2 < size2;


		cond = cond1 && cond2;

		while(cond)
			{

			final Point1 p1 = arr1[index1];


			final Point1 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint1(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;


			final boolean gt = pointCompare == two;

			if(eq)
				{
				tempArr[index] = p1;

				index1 = index1 + one;


				index2 = index2 + one;

				}
			if(lt)
				{
				tempArr[index] = p1;

				index1 = index1 + one;

				}
			if(gt)
				{
				tempArr[index] = p2;

				index2 = index2 + one;

				}

			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			final Point1 tempArrPt = arr1[index1];

			tempArr[index] = tempArrPt;

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			final Point1 tempArrPt = arr2[index2];

			tempArr[index] = tempArrPt;

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final Point1[] arr = (Point1[])(new Point1/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <arr.length ;pt++ )			{

			final Point1 retPoint = tempArr[pt];

			arr[pt] =retPoint;
			}

;


		final Region1 unionReg = new Region1(arr,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionReg.hashCode());

		return unionReg;
		}
public static void setRefArrayValue1Particle ( final ParticleRefArray1 array, final int index, final Particle val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ParticleStub[] contents = array.contents;


		final ParticleStub indexStub = contents[placeIndex];


		final Particle[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static String toStringRegion1 ( final Region1 r, int myUniquePlacePoint)
		{

		String str = "";


		final int dim = r.regSize;


		final int one = 1;


		final int dimMinusOne = dim - one;


		final int  rReg = dimMinusOne+1;


		final Point1[] regArray = (Point1[])(r.pointArray);

		for(int pt1=0; pt1 < rReg; pt1++)
			{

			Point1 pt = regArray[pt1];


			String ptStr = Program.toStringPoint1(pt,myUniquePlacePoint);


			String lBrace = "{";


			String rBrace = "}";


			String endLine = "\n";


			String colon = ":";


			str = str + lBrace;


			str = str + pt1;


			str = str + colon;


			str = str + ptStr;


			str = str + rBrace;


			str = str + endLine;

			}
		return str;
		}
public static boolean regionContainsPoint1 ( final Region1 r, final Point1 target, int myUniquePlacePoint)
		{

		final int temp = Program.searchPointInRegion1(r, target,myUniquePlacePoint);


		final int zero = 0;


		final boolean containsPt = temp >= zero;

		return containsPt;
		}
public static boolean regionContainsPoint2 ( final Region2 r, final Point2 target, int myUniquePlacePoint)
		{

		final int temp = Program.searchPointInRegion2(r, target,myUniquePlacePoint);


		final int zero = 0;


		final boolean containsPt = temp >= zero;

		return containsPt;
		}
public static int getDistLocalCount2 ( final Dist2 dn, final int placeIndex, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] counts = d.counts;


		final int localCount = counts[placeIndex];

		return localCount;
		}
public static int getDistLocalCount3 ( final Dist3 dn, final int placeIndex, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] counts = d.counts;


		final int localCount = counts[placeIndex];

		return localCount;
		}
public static Region1 getRefArrayValue1Region1 ( final Region1RefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final Region1Stub[] contents = array.contents;


		final Region1Stub indexStub = contents[placeIndex];


		final Region1[] localArray = indexStub.localArray;


		final Region1 returnValue = localArray[localIndex];

		return returnValue;
		}
public static int getDistLocalCount1 ( final Dist1 dn, final int placeIndex, int myUniquePlacePoint)
		{

		final Dist d = dn.dDist;


		final int[] counts = d.counts;


		final int localCount = counts[placeIndex];

		return localCount;
		}
public static Dist2 getPlaceDist2 ( final Region2 r, final int p, int myUniquePlacePoint)
		{

		final int rSize = r.regSize;


		final int one = 1;


		final int rSizeMinusOne = rSize - one;


		final int  dReg = rSizeMinusOne+1;


		final int[] vPlaceArray = (int[])(new int/*value*/[dReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{
			vPlaceArray[pt] =p;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist2 retDist = new Dist2(r, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

		return retDist;
		}
public static Dist1 getPlaceDist1 ( final Region1 r, final int p, int myUniquePlacePoint)
		{

		final int rSize = r.regSize;


		final int one = 1;


		final int rSizeMinusOne = rSize - one;


		final int  dReg = rSizeMinusOne+1;


		final int[] vPlaceArray = (int[])(new int/*value*/[dReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{
			vPlaceArray[pt] =p;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist1 retDist = new Dist1(r, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

		return retDist;
		}
public static Dist2 restrictDist2 ( final Dist2 d, final int p, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int h = 0;


		final Region2 dReg = d.dReg;


		final Dist dDist = d.dDist;


		final int dim = dReg.regSize;


		final int dimMinusOne = dim - one;


		final int  dRegReg = dimMinusOne+1;


		final Point2[] dArray = (Point2[])(dReg.pointArray);


		final int[] dPlace = (int[])(dDist.placeArray);


		final int[] dCounts = (int[])(dDist.counts);


		final int index = 0;


		int numPoints = dCounts[index];


		final int rSizeNumPoints = numPoints;


		final int rSize = numPoints - one;


		final int  tempReg = rSize+1;


		final int tempDist = rSize+1;


		final int[] rPlace = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <rPlace.length ;pt++ )			{
			rPlace[pt] =p;
			}

;


		final int[] tempArray = new int[tempDist];


		final boolean cond1 = numPoints > zero;

		if(cond1)
			{

			numPoints = 0;

			for(int pt=0; pt < dRegReg; pt++)
				{

				final int dP = dPlace[pt];


				final boolean cond2 = p == dP;

				if(cond2)
					{

					final int i = pt;

					tempArray[numPoints] = i;

					numPoints = numPoints + one;

					}
				}
			}

		final Point2[] pointArray = (Point2[])(new Point2/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <pointArray.length ;pt++ )			{

			final int idx = tempArray[pt];


			final Point2 dpt = dArray[idx];

			pointArray[pt] =dpt;
			}

;


		final Region2 dpReg = new Region2(pointArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpReg.hashCode());


		final Dist dpDist = new Dist(rPlace, rSizeNumPoints,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDist.hashCode());


		final Dist2 dpDistn = new Dist2(dpReg, dpDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDistn.hashCode());

		return dpDistn;
		}
public static Dist3 restrictDist3 ( final Dist3 d, final int p, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int h = 0;


		final Region3 dReg = d.dReg;


		final Dist dDist = d.dDist;


		final int dim = dReg.regSize;


		final int dimMinusOne = dim - one;


		final int  dRegReg = dimMinusOne+1;


		final Point3[] dArray = (Point3[])(dReg.pointArray);


		final int[] dPlace = (int[])(dDist.placeArray);


		final int[] dCounts = (int[])(dDist.counts);


		final int index = 0;


		int numPoints = dCounts[index];


		final int rSizeNumPoints = numPoints;


		final int rSize = numPoints - one;


		final int  tempReg = rSize+1;


		final int tempDist = rSize+1;


		final int[] rPlace = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <rPlace.length ;pt++ )			{
			rPlace[pt] =p;
			}

;


		final int[] tempArray = new int[tempDist];


		final boolean cond1 = numPoints > zero;

		if(cond1)
			{

			numPoints = 0;

			for(int pt=0; pt < dRegReg; pt++)
				{

				final int dP = dPlace[pt];


				final boolean cond2 = p == dP;

				if(cond2)
					{

					final int i = pt;

					tempArray[numPoints] = i;

					numPoints = numPoints + one;

					}
				}
			}

		final Point3[] pointArray = (Point3[])(new Point3/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <pointArray.length ;pt++ )			{

			final int idx = tempArray[pt];


			final Point3 dpt = dArray[idx];

			pointArray[pt] =dpt;
			}

;


		final Region3 dpReg = new Region3(pointArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpReg.hashCode());


		final Dist dpDist = new Dist(rPlace, rSizeNumPoints,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDist.hashCode());


		final Dist3 dpDistn = new Dist3(dpReg, dpDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(dpDistn.hashCode());

		return dpDistn;
		}
public static Dist3 getPlaceDist3 ( final Region3 r, final int p, int myUniquePlacePoint)
		{

		final int rSize = r.regSize;


		final int one = 1;


		final int rSizeMinusOne = rSize - one;


		final int  dReg = rSizeMinusOne+1;


		final int[] vPlaceArray = (int[])(new int/*value*/[dReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{
			vPlaceArray[pt] =p;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist3 retDist = new Dist3(r, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

		return retDist;
		}
public static void setRefArrayValue2double ( final doubleRefArray2 array, final int index, final double val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int binarySearchRegion2 ( final Region2 r, final Point2 target, int myUniquePlacePoint)
		{

		final Point2[] pointArray = (Point2[])(r.pointArray);


		int start = 0;


		int end = r.regSize;


		final int zero = 0;


		final int one = 1;


		final int two = 2;


		end = end - one;


		int result = zero - one;


		boolean notDone = start <= end;

		while(notDone)
			{

			int mid = start + end;


			mid = mid / two;


			final Point2 temp = pointArray[mid];


			final int pointCompare = Program.comparePoint2(target, temp,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{
				return mid;
				}
			else
				{
				if(lt)
					{

					end = mid - one;

					}
				else
					{

					start = mid + one;

					}
 				}
 
			notDone = start <= end;

			}
		return result;
		}
public static int binarySearchRegion1 ( final Region1 r, final Point1 target, int myUniquePlacePoint)
		{

		final Point1[] pointArray = (Point1[])(r.pointArray);


		int start = 0;


		int end = r.regSize;


		final int zero = 0;


		final int one = 1;


		final int two = 2;


		end = end - one;


		int result = zero - one;


		boolean notDone = start <= end;

		while(notDone)
			{

			int mid = start + end;


			mid = mid / two;


			final Point1 temp = pointArray[mid];


			final int pointCompare = Program.comparePoint1(target, temp,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{
				return mid;
				}
			else
				{
				if(lt)
					{

					end = mid - one;

					}
				else
					{

					start = mid + one;

					}
 				}
 
			notDone = start <= end;

			}
		return result;
		}
public static void setRefArrayValue2Particle ( final ParticleRefArray2 array, final int index, final Particle val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ParticleStub[] contents = array.contents;


		final ParticleStub indexStub = contents[placeIndex];


		final Particle[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int binarySearchRegion3 ( final Region3 r, final Point3 target, int myUniquePlacePoint)
		{

		final Point3[] pointArray = (Point3[])(r.pointArray);


		int start = 0;


		int end = r.regSize;


		final int zero = 0;


		final int one = 1;


		final int two = 2;


		end = end - one;


		int result = zero - one;


		boolean notDone = start <= end;

		while(notDone)
			{

			int mid = start + end;


			mid = mid / two;


			final Point3 temp = pointArray[mid];


			final int pointCompare = Program.comparePoint3(target, temp,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{
				return mid;
				}
			else
				{
				if(lt)
					{

					end = mid - one;

					}
				else
					{

					start = mid + one;

					}
 				}
 
			notDone = start <= end;

			}
		return result;
		}
public static Dist1 getUniqueDist (  int myUniquePlacePoint)
		{

		final int one = 1;


		final int zero = 0;


		final int maxPlaces = 1;


		final int rSize = maxPlaces - one;


		final int  placeRegion = rSize+1;


		final Point1[] pointArray = (Point1[])(new Point1/*value*/[placeRegion]);
/*arrayInitBlock*/
for(int p= 0;p <pointArray.length ;p++ )			{

			final int i = p;


			final Point1 pt1 = new Point1(i,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pt1.hashCode());

			pointArray[p] =pt1;
			}

;


		final int[] vPlaceArray = (int[])(new int/*value*/[placeRegion]);
/*arrayInitBlock*/
for(int p= 0;p <vPlaceArray.length ;p++ )			{

			final int i = p;


			final int pl1 = 0;

			vPlaceArray[p] =pl1;
			}

;


		final Region1 reg = new Region1(pointArray, zero, maxPlaces,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(reg.hashCode());


		final Dist pointDist1 = new Dist(vPlaceArray, maxPlaces,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist1.hashCode());


		final Dist1 retDist = new Dist1(reg, pointDist1,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

		return retDist;
		}
public static void setRefArrayValue3double ( final doubleRefArray3 array, final int index, final double val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist3 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int regionHigh ( final Region1 r, int myUniquePlacePoint)
		{

		final Point1[] array = r.pointArray;


		int index = r.regSize;


		final int one = 1;


		index = index - one;


		final Point1 highPoint = array[index];


		final int hgh = highPoint.f0;

		return hgh;
		}
public static int getRefArrayValue1int ( final intRefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final intStub[] contents = array.contents;


		final intStub indexStub = contents[placeIndex];


		final int[] localArray = indexStub.localArray;


		final int returnValue = localArray[localIndex];

		return returnValue;
		}
public static int comparePoint1 ( final Point1 pt1, final Point1 pt2, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int two = 2;


		int point1 = 0;


		int point2 = 0;


		boolean lt = false;


		boolean gt = false;


		point1 = pt1.f0;


		point2 = pt2.f0;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}
		return zero;
		}
public static int comparePoint2 ( final Point2 pt1, final Point2 pt2, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int two = 2;


		int point1 = 0;


		int point2 = 0;


		boolean lt = false;


		boolean gt = false;


		point1 = pt1.f0;


		point2 = pt2.f0;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}

		point1 = pt1.f1;


		point2 = pt2.f1;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}
		return zero;
		}
public static Point2 regionOrdinalPoint2 ( final Region2 reg, final int ordl, int myUniquePlacePoint)
		{

		final Point2[] pointArray = reg.pointArray;


		final Point2 pt = pointArray[ordl];

		return pt;
		}
public static Point1 regionOrdinalPoint1 ( final Region1 reg, final int ordl, int myUniquePlacePoint)
		{

		final Point1[] pointArray = reg.pointArray;


		final Point1 pt = pointArray[ordl];

		return pt;
		}
public static int comparePoint3 ( final Point3 pt1, final Point3 pt2, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		final int two = 2;


		int point1 = 0;


		int point2 = 0;


		boolean lt = false;


		boolean gt = false;


		point1 = pt1.f0;


		point2 = pt2.f0;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}

		point1 = pt1.f1;


		point2 = pt2.f1;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}

		point1 = pt1.f2;


		point2 = pt2.f2;


		lt = point1 < point2;


		gt = point1 > point2;

		if(lt)
			{
			return one;
			}
		if(gt)
			{
			return two;
			}
		return zero;
		}
public static void setRefArrayValue1int ( final intRefArray1 array, final int index, final int val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final intStub[] contents = array.contents;


		final intStub indexStub = contents[placeIndex];


		final int[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static double getRefArrayValue3double ( final doubleRefArray3 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist3 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;


		final double returnValue = localArray[localIndex];

		return returnValue;
		}
public static String toStringDist2 ( final Dist2 d, int myUniquePlacePoint)
		{

		String str = "";


		final Region2 r = d.dReg;


		final Dist pointDist = d.dDist;


		final int[] placeDist = pointDist.placeArray;


		final int dim = r.regSize;


		final int one = 1;


		final int dimMinusOne = dim - one;


		final int  rReg = dimMinusOne+1;


		final Point2[] regArray = (Point2[])(r.pointArray);

		for(int pt1=0; pt1 < rReg; pt1++)
			{

			Point2 pt = regArray[pt1];


			String ptStr = Program.toStringPoint2(pt,myUniquePlacePoint);


			int plStr = placeDist[pt1];


			String lBrace = "{";


			String arrow = "->";


			String rBrace = "}";


			String endLine = "\n";


			String colon = ":";


			str = str + lBrace;


			str = str + pt1;


			str = str + colon;


			str = str + ptStr;


			str = str + arrow;


			str = str + plStr;


			str = str + rBrace;


			str = str + endLine;

			}
		return str;
		}
public static Point3[] getDistLocalArray3 ( final Dist3 dn, final int placeIndex, int myUniquePlacePoint)
		{

		final Region3 r = dn.dReg;


		final Point3[] pointArray = r.pointArray;


		final int rSize = r.regSize;


		final Dist d = dn.dDist;


		final int[] placeArray = d.placeArray;


		final int one = 1;


		final int currPlace = 0;


		final int[] counts = d.counts;


		final int localCount = counts[placeIndex];


		final int localCountMinusOne = localCount - one;


		final int rSizeMinusOne = rSize - one;


		final int  localRegion = localCountMinusOne+1;


		final int  placeRegion = rSizeMinusOne+1;


		final int localDist = localCountMinusOne+1;


		final Point3[] tempPointArray = new Point3[localDist];


		int tempCount = 0;

		for(int p=0; p < placeRegion; p++)
			{

			final int pl = placeArray[p];


			final boolean cond = pl == currPlace;

			if(cond)
				{

				final Point3 tempPoint = pointArray[p];

				tempPointArray[tempCount] = tempPoint;

				tempCount = tempCount + one;

				}
			}

		final Point3[] vPointArray = (Point3[])(new Point3/*value*/[localRegion]);
/*arrayInitBlock*/
for(int p= 0;p <vPointArray.length ;p++ )			{

			final Point3 tempPoint = tempPointArray[p];

			vPointArray[p] =tempPoint;
			}

;

		return vPointArray;
		}
public static boolean getRefArrayValue1boolean ( final booleanRefArray1 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final booleanStub[] contents = array.contents;


		final booleanStub indexStub = contents[placeIndex];


		final boolean[] localArray = indexStub.localArray;


		final boolean returnValue = localArray[localIndex];

		return returnValue;
		}
public static Dist1 getBlockDist1 ( final Region1 r, int myUniquePlacePoint)
		{

		final int rSize = r.regSize;


		final int zero = 0;


		final int one = 1;


		final int rSizeMinusOne = rSize - one;


		final int  dReg = rSizeMinusOne+1;


		final int dDist = rSizeMinusOne+1;


		final int[] placeArray = new int[dDist];


		final int N = 1;


		final int q = rSize % N;


		final int p = rSize / N;


		int blockSize = p + one;


		int arraySize = q * blockSize;


		int offset = 0;


		int initPlace = 0;

		Program.getCyclic(placeArray, arraySize, initPlace, blockSize,myUniquePlacePoint);

		int remainingPlaces = N - q;


		final boolean cond = remainingPlaces == zero;

		if(cond)
			{

			final int[] vPlaceArray = (int[])(new int/*value*/[dReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )				{

				final int tempPl = placeArray[pt];

				vPlaceArray[pt] =tempPl;
				}

;


			final Dist pointDist1 = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist1.hashCode());


			final Dist1 retDist = new Dist1(r, pointDist1,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

			return retDist;
			}

		offset = arraySize;


		blockSize = p;


		arraySize = remainingPlaces * blockSize;


		initPlace = 0;


		int chunk = blockSize;


		final boolean ifCond = blockSize > arraySize;

		if(ifCond)
			{

			chunk = arraySize;

			}

		int index = offset;


		int dSize = index + chunk;


		dSize = dSize - one;


		final int ub0 = chunk - one;


		final int  pointReg0 = ub0+1;

		for(int pt=0; pt < pointReg0; pt++)
			{

			final int tempPt = pt +index;

			placeArray[tempPt] = initPlace;
			}

		index = index + chunk;


		arraySize = arraySize - chunk;


		int pl = 0;


		boolean whileCond = arraySize != zero;

		while(whileCond)
			{

			final boolean tailCond = chunk > arraySize;

			if(tailCond)
				{

				dSize = index + arraySize;


				dSize = dSize - one;


				final int ub = arraySize - one;


				final int  pointReg1 = ub+1;

				for(int pt=0; pt < pointReg1; pt++)
					{

					final int tempPt = pt +index;

					placeArray[tempPt] = pl;
					}

				arraySize = 0;

				}
			else
				{

				dSize = index + chunk;


				dSize = dSize - one;


				final int ub = chunk - one;


				final int  pointReg1 = ub+1;

				for(int pt=0; pt < pointReg1; pt++)
					{

					final int tempPt = pt +index;

					placeArray[tempPt] = pl;
					}

				index = index + chunk;


				arraySize = arraySize - chunk;

				}
 
			pl = 0;


			whileCond = arraySize != zero;

			}

		final int[] vPlaceArray = (int[])(new int/*value*/[dReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{

			final int tempPl = placeArray[pt];

			vPlaceArray[pt] =tempPl;
			}

;


		final Dist pointDist1 = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist1.hashCode());


		final Dist1 retDist = new Dist1(r, pointDist1,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retDist.hashCode());

		return retDist;
		}
public static Dist1 unionDist1 ( final Dist1 d1, final Dist1 d2, int myUniquePlacePoint)
		{

		int index1 = 0;


		int index2 = 0;


		int index = 0;


		final Region1 reg1 = d1.dReg;


		final Point1[] arr1 = (Point1[])(reg1.pointArray);


		final Region1 reg2 = d2.dReg;


		final Point1[] arr2 = (Point1[])(reg2.pointArray);


		final Dist dDist1 = d1.dDist;


		final int[] dPlaceArray1 = dDist1.placeArray;


		final Dist dDist2 = d2.dDist;


		final int[] dPlaceArray2 = dDist2.placeArray;


		final int size1 = reg1.regSize;


		final int size2 = reg2.regSize;


		final int rSize = size1 + size2;


		final int zero = 0;


		final int one = 1;


		final int sizeMinusOne = rSize - one;


		final int  tempReg = sizeMinusOne+1;


		final int tempDist = sizeMinusOne+1;


		final Point1[] tempArr = new Point1[tempDist];


		final int[] placeArray = new int[tempDist];


		boolean cond1 = index1 < size1;


		boolean cond2 = index2 < size2;


		boolean cond = cond1 && cond2;

		while(cond)
			{

			final Point1 p1 = arr1[index1];


			final Point1 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint1(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{

				final String errMsg = "Non-disjoint region in a disjoint union";

				throw new RuntimeException(errMsg);

				}
			if(lt)
				{
				tempArr[index] = p1;

				final int pPlace = dPlaceArray1[index1];

				placeArray[index] = pPlace;

				index1 = index1 + one;

				}
			else
				{
				tempArr[index] = p2;

				final int pPlace = dPlaceArray2[index2];

				placeArray[index] = pPlace;

				index2 = index2 + one;

				}
 
			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			final Point1 tempArrPt = arr1[index1];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray1[index1];

			placeArray[index] = pPlace;

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			final Point1 tempArrPt = arr2[index2];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray2[index2];

			placeArray[index] = pPlace;

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final Point1[] arr = (Point1[])(new Point1/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <arr.length ;pt++ )			{

			final Point1 retPoint = tempArr[pt];

			arr[pt] =retPoint;
			}

;


		final Region1 unionReg = new Region1(arr,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionReg.hashCode());


		final int[] vPlaceArray = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{

			final int tempPl = placeArray[pt];

			vPlaceArray[pt] =tempPl;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist1 unionDist = new Dist1(unionReg, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionDist.hashCode());

		return unionDist;
		}
public static Dist2 unionDist2 ( final Dist2 d1, final Dist2 d2, int myUniquePlacePoint)
		{

		int index1 = 0;


		int index2 = 0;


		int index = 0;


		final Region2 reg1 = d1.dReg;


		final Point2[] arr1 = (Point2[])(reg1.pointArray);


		final Region2 reg2 = d2.dReg;


		final Point2[] arr2 = (Point2[])(reg2.pointArray);


		final Dist dDist1 = d1.dDist;


		final int[] dPlaceArray1 = dDist1.placeArray;


		final Dist dDist2 = d2.dDist;


		final int[] dPlaceArray2 = dDist2.placeArray;


		final int size1 = reg1.regSize;


		final int size2 = reg2.regSize;


		final int rSize = size1 + size2;


		final int zero = 0;


		final int one = 1;


		final int sizeMinusOne = rSize - one;


		final int  tempReg = sizeMinusOne+1;


		final int tempDist = sizeMinusOne+1;


		final Point2[] tempArr = new Point2[tempDist];


		final int[] placeArray = new int[tempDist];


		boolean cond1 = index1 < size1;


		boolean cond2 = index2 < size2;


		boolean cond = cond1 && cond2;

		while(cond)
			{

			final Point2 p1 = arr1[index1];


			final Point2 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint2(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{

				final String errMsg = "Non-disjoint region in a disjoint union";

				throw new RuntimeException(errMsg);

				}
			if(lt)
				{
				tempArr[index] = p1;

				final int pPlace = dPlaceArray1[index1];

				placeArray[index] = pPlace;

				index1 = index1 + one;

				}
			else
				{
				tempArr[index] = p2;

				final int pPlace = dPlaceArray2[index2];

				placeArray[index] = pPlace;

				index2 = index2 + one;

				}
 
			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			final Point2 tempArrPt = arr1[index1];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray1[index1];

			placeArray[index] = pPlace;

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			final Point2 tempArrPt = arr2[index2];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray2[index2];

			placeArray[index] = pPlace;

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final Point2[] arr = (Point2[])(new Point2/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <arr.length ;pt++ )			{

			final Point2 retPoint = tempArr[pt];

			arr[pt] =retPoint;
			}

;


		final Region2 unionReg = new Region2(arr,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionReg.hashCode());


		final int[] vPlaceArray = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{

			final int tempPl = placeArray[pt];

			vPlaceArray[pt] =tempPl;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist2 unionDist = new Dist2(unionReg, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionDist.hashCode());

		return unionDist;
		}
public static Dist3 unionDist3 ( final Dist3 d1, final Dist3 d2, int myUniquePlacePoint)
		{

		int index1 = 0;


		int index2 = 0;


		int index = 0;


		final Region3 reg1 = d1.dReg;


		final Point3[] arr1 = (Point3[])(reg1.pointArray);


		final Region3 reg2 = d2.dReg;


		final Point3[] arr2 = (Point3[])(reg2.pointArray);


		final Dist dDist1 = d1.dDist;


		final int[] dPlaceArray1 = dDist1.placeArray;


		final Dist dDist2 = d2.dDist;


		final int[] dPlaceArray2 = dDist2.placeArray;


		final int size1 = reg1.regSize;


		final int size2 = reg2.regSize;


		final int rSize = size1 + size2;


		final int zero = 0;


		final int one = 1;


		final int sizeMinusOne = rSize - one;


		final int  tempReg = sizeMinusOne+1;


		final int tempDist = sizeMinusOne+1;


		final Point3[] tempArr = new Point3[tempDist];


		final int[] placeArray = new int[tempDist];


		boolean cond1 = index1 < size1;


		boolean cond2 = index2 < size2;


		boolean cond = cond1 && cond2;

		while(cond)
			{

			final Point3 p1 = arr1[index1];


			final Point3 p2 = arr2[index2];


			final int pointCompare = Program.comparePoint3(p1, p2,myUniquePlacePoint);


			final boolean eq = pointCompare == zero;


			final boolean lt = pointCompare == one;

			if(eq)
				{

				final String errMsg = "Non-disjoint region in a disjoint union";

				throw new RuntimeException(errMsg);

				}
			if(lt)
				{
				tempArr[index] = p1;

				final int pPlace = dPlaceArray1[index1];

				placeArray[index] = pPlace;

				index1 = index1 + one;

				}
			else
				{
				tempArr[index] = p2;

				final int pPlace = dPlaceArray2[index2];

				placeArray[index] = pPlace;

				index2 = index2 + one;

				}
 
			index = index + one;


			cond1 = index1 < size1;


			cond2 = index2 < size2;


			cond = cond1 && cond2;

			}

		cond1 = index1 < size1;

		while(cond1)
			{

			final Point3 tempArrPt = arr1[index1];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray1[index1];

			placeArray[index] = pPlace;

			index1 = index1 + one;


			index = index + one;


			cond1 = index1 < size1;

			}

		cond2 = index2 < size2;

		while(cond2)
			{

			final Point3 tempArrPt = arr2[index2];

			tempArr[index] = tempArrPt;

			final int pPlace = dPlaceArray2[index2];

			placeArray[index] = pPlace;

			index2 = index2 + one;


			index = index + one;


			cond2 = index2 < size2;

			}

		final Point3[] arr = (Point3[])(new Point3/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <arr.length ;pt++ )			{

			final Point3 retPoint = tempArr[pt];

			arr[pt] =retPoint;
			}

;


		final Region3 unionReg = new Region3(arr,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionReg.hashCode());


		final int[] vPlaceArray = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int pt= 0;pt <vPlaceArray.length ;pt++ )			{

			final int tempPl = placeArray[pt];

			vPlaceArray[pt] =tempPl;
			}

;


		final Dist pointDist = new Dist(vPlaceArray, rSize,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(pointDist.hashCode());


		final Dist3 unionDist = new Dist3(unionReg, pointDist,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(unionDist.hashCode());

		return unionDist;
		}
public static Point3 regionOrdinalPoint3 ( final Region3 reg, final int ordl, int myUniquePlacePoint)
		{

		final Point3[] pointArray = reg.pointArray;


		final Point3 pt = pointArray[ordl];

		return pt;
		}
public static Point1[] getDistLocalArray1 ( final Dist1 dn, final int placeIndex, int myUniquePlacePoint)
		{

		final Region1 r = dn.dReg;


		final Point1[] pointArray = r.pointArray;


		final int rSize = r.regSize;


		final Dist d = dn.dDist;


		final int[] placeArray = d.placeArray;


		final int one = 1;


		final int currPlace = 0;


		final int[] counts = d.counts;


		final int localCount = counts[placeIndex];


		final int localCountMinusOne = localCount - one;


		final int rSizeMinusOne = rSize - one;


		final int  localRegion = localCountMinusOne+1;


		final int  placeRegion = rSizeMinusOne+1;


		final int localDist = localCountMinusOne+1;


		final Point1[] tempPointArray = new Point1[localDist];


		int tempCount = 0;

		for(int p=0; p < placeRegion; p++)
			{

			final int pl = placeArray[p];


			final boolean cond = pl == currPlace;

			if(cond)
				{

				final Point1 tempPoint = pointArray[p];

				tempPointArray[tempCount] = tempPoint;

				tempCount = tempCount + one;

				}
			}

		final Point1[] vPointArray = (Point1[])(new Point1/*value*/[localRegion]);
/*arrayInitBlock*/
for(int p= 0;p <vPointArray.length ;p++ )			{

			final Point1 tempPoint = tempPointArray[p];

			vPointArray[p] =tempPoint;
			}

;

		return vPointArray;
		}
public static void getCyclic ( final int[] placeArray, final int arraySize, final int initPlace, final int blockSize, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		int N = arraySize;


		int chunk = blockSize;


		final boolean ifCond = blockSize > N;

		if(ifCond)
			{

			chunk = N;

			}

		int index = 0;


		int dSize = index + chunk;


		dSize = dSize - one;


		final int  pointReg = dSize+1;

		for(int p=0; p < pointReg; p++)
			{
			placeArray[p] = initPlace;
			}

		index = index + chunk;


		N = N - chunk;


		int pl = 0;


		boolean whileCond = N != zero;

		while(whileCond)
			{

			final boolean tailCond = chunk > N;

			if(tailCond)
				{

				dSize = index + N;


				dSize = dSize - one;


				final int ub = N - one;


				final int  pointReg1 = ub+1;

				for(int p=0; p < pointReg1; p++)
					{

					final int tempPt = p +index;

					placeArray[tempPt] = pl;
					}

				N = 0;

				}
			else
				{

				dSize = index + chunk;


				dSize = dSize - one;


				final int ub = chunk - one;


				final int  pointReg1 = ub+1;

				for(int p=0; p < pointReg1; p++)
					{

					final int tempPt = p +index;

					placeArray[tempPt] = pl;
					}

				index = index + chunk;


				N = N - chunk;

				}
 
			pl = 0;


			whileCond = N != zero;

			}
		}
public static void setRefArrayValue1boolean ( final booleanRefArray1 array, final int index, final boolean val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist1 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final booleanStub[] contents = array.contents;


		final booleanStub indexStub = contents[placeIndex];


		final boolean[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static int searchPointInRegion2 ( final Region2 r, final Point2 target, int myUniquePlacePoint)
		{

		final boolean regType = r.regType;

		if(regType)
			{

			final int constantSearch = Program.constantSearchRegion2(r, target,myUniquePlacePoint);

			return constantSearch;
			}

		final int binarySearch = Program.binarySearchRegion2(r, target,myUniquePlacePoint);

		return binarySearch;
		}
public static int searchPointInRegion1 ( final Region1 r, final Point1 target, int myUniquePlacePoint)
		{

		final boolean regType = r.regType;

		if(regType)
			{

			final int constantSearch = Program.constantSearchRegion1(r, target,myUniquePlacePoint);

			return constantSearch;
			}

		final int binarySearch = Program.binarySearchRegion1(r, target,myUniquePlacePoint);

		return binarySearch;
		}
public static int searchPointInRegion3 ( final Region3 r, final Point3 target, int myUniquePlacePoint)
		{

		final boolean regType = r.regType;

		if(regType)
			{

			final int constantSearch = Program.constantSearchRegion3(r, target,myUniquePlacePoint);

			return constantSearch;
			}

		final int binarySearch = Program.binarySearchRegion3(r, target,myUniquePlacePoint);

		return binarySearch;
		}
public static void setRefArrayValue2int ( final intRefArray2 array, final int index, final int val, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final intStub[] contents = array.contents;


		final intStub indexStub = contents[placeIndex];


		final int[] localArray = indexStub.localArray;

		localArray[localIndex] = val;
		}
public static Particle getRefArrayValue2Particle ( final ParticleRefArray2 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final ParticleStub[] contents = array.contents;


		final ParticleStub indexStub = contents[placeIndex];


		final Particle[] localArray = indexStub.localArray;


		final Particle returnValue = localArray[localIndex];

		return returnValue;
		}
public static double getRefArrayValue2double ( final doubleRefArray2 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final doubleStub[] contents = array.contents;


		final doubleStub indexStub = contents[placeIndex];


		final double[] localArray = indexStub.localArray;


		final double returnValue = localArray[localIndex];

		return returnValue;
		}
public static int[] initDist ( final int[] tempArr, final int  tempReg, int myUniquePlacePoint)
		{

		final int[] vTemp = (int[])(new int/*value*/[tempReg]);
/*arrayInitBlock*/
for(int p= 0;p <vTemp.length ;p++ )			{

			final int tempInt = tempArr[p];

			vTemp[p] =tempInt;
			}

;

		return vTemp;
		}
public static int getRefArrayValue2int ( final intRefArray2 array, final int index, int myUniquePlacePoint)
		{

		final int pl = 0;


		final int placeIndex = 0;


		final Dist2 dArray = array.distValue;


		final Dist dDist = dArray.dDist;


		final int[] runSum = dDist.runningSum;


		final int localIndex = runSum[index];


		final intStub[] contents = array.contents;


		final intStub indexStub = contents[placeIndex];


		final int[] localArray = indexStub.localArray;


		final int returnValue = localArray[localIndex];

		return returnValue;
		}
public static Region3 createNewRegion3RRR ( final int v1_0, final int v1_1, final int v2_0, final int v2_1, final int v3_0, final int v3_1, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = true;


		final boolean tempBool2 = true;


		final boolean tempBool3 = true;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		regType = regType && tempBool3;


		final int l1 = v1_1 - v1_0;


		final int dim1 = l1 + one;


		final int l2 = v2_1 - v2_0;


		final int dim2 = l2 + one;


		final int l3 = v3_1 - v3_0;


		final int dim3 = l3 + one;


		final int stride3 = 1;


		final int stride2 = stride3 * dim3;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point3[] ptArray = (Point3[])(new Point3/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			f1 = f1 + v1_0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			f2 = f2 + v2_0;


			int f3 = p / stride3;


			f3 = f3 % dim3;


			f3 = f3 + v3_0;


			final Point3 retPoint = new Point3(f1, f2, f3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region3 retRegRegular = new Region3(ptArray, v1_0, dim1, v2_0, dim2, v3_0, dim3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region3 retReg = new Region3(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region2 createNewRegion2RR ( final int v1_0, final int v1_1, final int v2_0, final int v2_1, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = true;


		final boolean tempBool2 = true;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		final int l1 = v1_1 - v1_0;


		final int dim1 = l1 + one;


		final int l2 = v2_1 - v2_0;


		final int dim2 = l2 + one;


		final int stride2 = 1;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point2[] ptArray = (Point2[])(new Point2/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			f1 = f1 + v1_0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			f2 = f2 + v2_0;


			final Point2 retPoint = new Point2(f1, f2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region2 retRegRegular = new Region2(ptArray, v1_0, dim1, v2_0, dim2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region2 retReg = new Region2(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region1 createNewRegion1R ( final int v1_0, final int v1_1, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = true;


		regType = regType && tempBool1;


		final int l1 = v1_1 - v1_0;


		final int dim1 = l1 + one;


		final int stride1 = 1;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point1[] ptArray = (Point1[])(new Point1/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			f1 = f1 + v1_0;


			final Point1 retPoint = new Point1(f1,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region1 retRegRegular = new Region1(ptArray, v1_0, dim1,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region1 retReg = new Region1(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region3 createNewRegion3RRA ( final int v1_0, final int v1_1, final int v2_0, final int v2_1, final Region1 v3_0, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = true;


		final boolean tempBool2 = true;


		final boolean tempBool3 = v3_0.regType;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		regType = regType && tempBool3;


		final int tempRegSize3 = v3_0.regSize;


		final boolean cond3 = tempRegSize3 <= zero;


		int tempLow3 = 0;

		if(cond3)
			{

			tempLow3 = zero;

			}
		else
			{

			final Point1[] tempArray3 = v3_0.pointArray;


			final Point1 tempArrayPt3 = tempArray3[zero];


			tempLow3 = tempArrayPt3.f0;

			}
 
		final int low3 = tempLow3;


		final int l1 = v1_1 - v1_0;


		final int dim1 = l1 + one;


		final int l2 = v2_1 - v2_0;


		final int dim2 = l2 + one;


		final int l3 = v3_0.regSize;


		final int dim3 = l3;


		final int stride3 = 1;


		final int stride2 = stride3 * dim3;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point3[] ptArray = (Point3[])(new Point3/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			f1 = f1 + v1_0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			f2 = f2 + v2_0;


			int f3 = p / stride3;


			f3 = f3 % dim3;


			final Point1[] rArray3 = v3_0.pointArray;


			final Point1 rArrayPt3 = rArray3[f3];


			f3 = rArrayPt3.f0;


			final Point3 retPoint = new Point3(f1, f2, f3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region3 retRegRegular = new Region3(ptArray, v1_0, dim1, v2_0, dim2, low3, dim3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region3 retReg = new Region3(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region2 createNewRegion2RA ( final int v1_0, final int v1_1, final Region1 v2_0, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = true;


		final boolean tempBool2 = v2_0.regType;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		final int tempRegSize2 = v2_0.regSize;


		final boolean cond2 = tempRegSize2 <= zero;


		int tempLow2 = 0;

		if(cond2)
			{

			tempLow2 = zero;

			}
		else
			{

			final Point1[] tempArray2 = v2_0.pointArray;


			final Point1 tempArrayPt2 = tempArray2[zero];


			tempLow2 = tempArrayPt2.f0;

			}
 
		final int low2 = tempLow2;


		final int l1 = v1_1 - v1_0;


		final int dim1 = l1 + one;


		final int l2 = v2_0.regSize;


		final int dim2 = l2;


		final int stride2 = 1;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point2[] ptArray = (Point2[])(new Point2/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			f1 = f1 + v1_0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			final Point1[] rArray2 = v2_0.pointArray;


			final Point1 rArrayPt2 = rArray2[f2];


			f2 = rArrayPt2.f0;


			final Point2 retPoint = new Point2(f1, f2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region2 retRegRegular = new Region2(ptArray, v1_0, dim1, low2, dim2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region2 retReg = new Region2(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region2 createNewRegion2AA ( final Region1 v1_0, final Region1 v2_0, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = v1_0.regType;


		final boolean tempBool2 = v2_0.regType;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		final int tempRegSize1 = v1_0.regSize;


		final boolean cond1 = tempRegSize1 <= zero;


		int tempLow1 = 0;

		if(cond1)
			{

			tempLow1 = zero;

			}
		else
			{

			final Point1[] tempArray1 = v1_0.pointArray;


			final Point1 tempArrayPt1 = tempArray1[zero];


			tempLow1 = tempArrayPt1.f0;

			}
 
		final int low1 = tempLow1;


		final int tempRegSize2 = v2_0.regSize;


		final boolean cond2 = tempRegSize2 <= zero;


		int tempLow2 = 0;

		if(cond2)
			{

			tempLow2 = zero;

			}
		else
			{

			final Point1[] tempArray2 = v2_0.pointArray;


			final Point1 tempArrayPt2 = tempArray2[zero];


			tempLow2 = tempArrayPt2.f0;

			}
 
		final int low2 = tempLow2;


		final int l1 = v1_0.regSize;


		final int dim1 = l1;


		final int l2 = v2_0.regSize;


		final int dim2 = l2;


		final int stride2 = 1;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point2[] ptArray = (Point2[])(new Point2/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			final Point1[] rArray1 = v1_0.pointArray;


			final Point1 rArrayPt1 = rArray1[f1];


			f1 = rArrayPt1.f0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			final Point1[] rArray2 = v2_0.pointArray;


			final Point1 rArrayPt2 = rArray2[f2];


			f2 = rArrayPt2.f0;


			final Point2 retPoint = new Point2(f1, f2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region2 retRegRegular = new Region2(ptArray, low1, dim1, low2, dim2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region2 retReg = new Region2(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region2 createNewRegion2AR ( final Region1 v1_0, final int v2_0, final int v2_1, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = v1_0.regType;


		final boolean tempBool2 = true;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		final int tempRegSize1 = v1_0.regSize;


		final boolean cond1 = tempRegSize1 <= zero;


		int tempLow1 = 0;

		if(cond1)
			{

			tempLow1 = zero;

			}
		else
			{

			final Point1[] tempArray1 = v1_0.pointArray;


			final Point1 tempArrayPt1 = tempArray1[zero];


			tempLow1 = tempArrayPt1.f0;

			}
 
		final int low1 = tempLow1;


		final int l1 = v1_0.regSize;


		final int dim1 = l1;


		final int l2 = v2_1 - v2_0;


		final int dim2 = l2 + one;


		final int stride2 = 1;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point2[] ptArray = (Point2[])(new Point2/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			final Point1[] rArray1 = v1_0.pointArray;


			final Point1 rArrayPt1 = rArray1[f1];


			f1 = rArrayPt1.f0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			f2 = f2 + v2_0;


			final Point2 retPoint = new Point2(f1, f2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region2 retRegRegular = new Region2(ptArray, low1, dim1, v2_0, dim2,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region2 retReg = new Region2(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}
public static Region3 createNewRegion3AAA ( final Region1 v1_0, final Region1 v2_0, final Region1 v3_0, int myUniquePlacePoint)
		{

		final int zero = 0;


		final int one = 1;


		boolean regType = true;


		final boolean tempBool1 = v1_0.regType;


		final boolean tempBool2 = v2_0.regType;


		final boolean tempBool3 = v3_0.regType;


		regType = regType && tempBool1;


		regType = regType && tempBool2;


		regType = regType && tempBool3;


		final int tempRegSize1 = v1_0.regSize;


		final boolean cond1 = tempRegSize1 <= zero;


		int tempLow1 = 0;

		if(cond1)
			{

			tempLow1 = zero;

			}
		else
			{

			final Point1[] tempArray1 = v1_0.pointArray;


			final Point1 tempArrayPt1 = tempArray1[zero];


			tempLow1 = tempArrayPt1.f0;

			}
 
		final int low1 = tempLow1;


		final int tempRegSize2 = v2_0.regSize;


		final boolean cond2 = tempRegSize2 <= zero;


		int tempLow2 = 0;

		if(cond2)
			{

			tempLow2 = zero;

			}
		else
			{

			final Point1[] tempArray2 = v2_0.pointArray;


			final Point1 tempArrayPt2 = tempArray2[zero];


			tempLow2 = tempArrayPt2.f0;

			}
 
		final int low2 = tempLow2;


		final int tempRegSize3 = v3_0.regSize;


		final boolean cond3 = tempRegSize3 <= zero;


		int tempLow3 = 0;

		if(cond3)
			{

			tempLow3 = zero;

			}
		else
			{

			final Point1[] tempArray3 = v3_0.pointArray;


			final Point1 tempArrayPt3 = tempArray3[zero];


			tempLow3 = tempArrayPt3.f0;

			}
 
		final int low3 = tempLow3;


		final int l1 = v1_0.regSize;


		final int dim1 = l1;


		final int l2 = v2_0.regSize;


		final int dim2 = l2;


		final int l3 = v3_0.regSize;


		final int dim3 = l3;


		final int stride3 = 1;


		final int stride2 = stride3 * dim3;


		final int stride1 = stride2 * dim2;


		final int stride0 = stride1 * dim1;


		final int rSize = stride0 - one;


		final int  regArr = rSize+1;


		final Point3[] ptArray = (Point3[])(new Point3/*value*/[regArr]);
/*arrayInitBlock*/
for(int pt= 0;pt <ptArray.length ;pt++ )			{

			final int p = pt;


			int f1 = p / stride1;


			f1 = f1 % dim1;


			final Point1[] rArray1 = v1_0.pointArray;


			final Point1 rArrayPt1 = rArray1[f1];


			f1 = rArrayPt1.f0;


			int f2 = p / stride2;


			f2 = f2 % dim2;


			final Point1[] rArray2 = v2_0.pointArray;


			final Point1 rArrayPt2 = rArray2[f2];


			f2 = rArrayPt2.f0;


			int f3 = p / stride3;


			f3 = f3 % dim3;


			final Point1[] rArray3 = v3_0.pointArray;


			final Point1 rArrayPt3 = rArray3[f3];


			f3 = rArrayPt3.f0;


			final Point3 retPoint = new Point3(f1, f2, f3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retPoint.hashCode());

			ptArray[pt] =retPoint;
			}

;

		if(regType)
			{

			final Region3 retRegRegular = new Region3(ptArray, low1, dim1, low2, dim2, low3, dim3,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retRegRegular.hashCode());

			return retRegRegular;
			}

		final Region3 retReg = new Region3(ptArray,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(retReg.hashCode());

		return retReg;
		}

}
	class ArrayUtil   {
 

}
	/*value*/ class Complex 
	 {
 
	public final double real;
	public final double imag;


	public Complex ( final double real, final double imag, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final double X10_TEMP3 = real;

		this.real = (X10_TEMP3);

		final double X10_TEMP6 = imag;

		this.imag = (X10_TEMP6);
		}


	}
	/*value*/ class FourierTransform2D 
	 {
 
	public final int maxBits;
	public final int nBits1;
	public final int nBits2;
	public final int length1;
	public final int length2;
	public final double invN;
	public final intValArray1 tableBitReverse;
	public final ComplexValArray1 tableSineCosine;


	public FourierTransform2D ( final int nBits1, final int nBits2, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int X10_TEMP3 = nBits1;

		this.nBits1 = (X10_TEMP3);

		final int X10_TEMP6 = nBits2;

		this.nBits2 = (X10_TEMP6);

		final int X10_TEMP8 = 1;


		final int X10_TEMP10 = nBits2 - X10_TEMP8;


		final int X10_TEMP12 = Program.X10Util_maxInt(nBits1, X10_TEMP10,myUniquePlacePoint);


		maxBits = X10_TEMP12;


		final int X10_TEMP13 = 1;


		final int len1 = X10_TEMP13 << nBits1;


		final int X10_TEMP15 = 1;


		final int len2 = X10_TEMP15 << nBits2;


		length1 = len1;


		length2 = len2;


		final double X10_TEMP23 = 1.0;


		final int X10_TEMP19 = 2;


		final int X10_TEMP20 = X10_TEMP19 * len1;


		final int X10_TEMP22 = X10_TEMP20 * len2;


		final double X10_TEMP25 = X10_TEMP23 / X10_TEMP22;


		invN = X10_TEMP25;


		final intValArray1 X10_TEMP30 = this.FourierTransform2D_initBitReverse(nBits1, nBits2,myUniquePlacePoint);


		tableBitReverse = X10_TEMP30;


		final ComplexValArray1 X10_TEMP35 = this.FourierTransform2D_initSineCosine(len1, len2,myUniquePlacePoint);


		tableSineCosine = X10_TEMP35;

		}


public intValArray1 FourierTransform2D_initBitReverse ( final int nBits1, final int nBits2, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 1;


		final int X10_TEMP4 = nBits2 - X10_TEMP1;


		final int maxBits = Program.X10Util_maxInt(X10_TEMP4, nBits1,myUniquePlacePoint);


		final int X10_TEMP12 = 0;


		final int X10_TEMP7 = 1;


		final int X10_TEMP9 = X10_TEMP7 << maxBits;


		final int X10_TEMP10 = 1;


		final int X10_TEMP13 = X10_TEMP9 - X10_TEMP10;


		final Region1 r = Program.createNewRegion1R(X10_TEMP12, X10_TEMP13,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = r;


		final int RX10_TEMP4 = r.regSize;


		final int RX10_TEMP5 = 1;


		final int RX10_TEMP6 = RX10_TEMP4 - RX10_TEMP5;


		final int  RX10_TEMP3 = RX10_TEMP6+1;


		final int[] RX10_TEMP7 = (int[])(new int/*value*/[RX10_TEMP3]);
/*arrayInitBlock*/
for(int RX10_TEMP1= 0;RX10_TEMP1 <RX10_TEMP7.length ;RX10_TEMP1++ )			{

			final int RX10_TEMP2 = RX10_TEMP1;


			final Point1 i = Program.regionOrdinalPoint1(RX10_TEMP0, RX10_TEMP2,myUniquePlacePoint);


			final int i0 = i.f0;


			final int X10_TEMP17 = 0x0000FFFF;


			final int X10_TEMP19 = i0 & X10_TEMP17;


			final int X10_TEMP20 = 16;


			final int X10_TEMP22 = X10_TEMP19 << X10_TEMP20;


			final int X10_TEMP23 = 16;


			final int X10_TEMP25 = i0 >> X10_TEMP23;


			final int X10_TEMP26 = 0x0000FFFF;


			final int X10_TEMP28 = X10_TEMP25 & X10_TEMP26;


			final int X10_TEMP30 = X10_TEMP22 | X10_TEMP28;


			final int i1 = X10_TEMP30;


			final int X10_TEMP32 = 0x00FF00FF;


			final int X10_TEMP34 = i1 & X10_TEMP32;


			final int X10_TEMP35 = 8;


			final int X10_TEMP37 = X10_TEMP34 << X10_TEMP35;


			final int X10_TEMP38 = 8;


			final int X10_TEMP40 = i1 >> X10_TEMP38;


			final int X10_TEMP41 = 0x00FF00FF;


			final int X10_TEMP43 = X10_TEMP40 & X10_TEMP41;


			final int X10_TEMP45 = X10_TEMP37 | X10_TEMP43;


			final int i2 = X10_TEMP45;


			final int X10_TEMP47 = 0x0F0F0F0F;


			final int X10_TEMP49 = i2 & X10_TEMP47;


			final int X10_TEMP50 = 4;


			final int X10_TEMP52 = X10_TEMP49 << X10_TEMP50;


			final int X10_TEMP53 = 4;


			final int X10_TEMP55 = i2 >> X10_TEMP53;


			final int X10_TEMP56 = 0x0F0F0F0F;


			final int X10_TEMP58 = X10_TEMP55 & X10_TEMP56;


			final int X10_TEMP60 = X10_TEMP52 | X10_TEMP58;


			final int i3 = X10_TEMP60;


			final int X10_TEMP62 = 0x33333333;


			final int X10_TEMP64 = i3 & X10_TEMP62;


			final int X10_TEMP65 = 2;


			final int X10_TEMP67 = X10_TEMP64 << X10_TEMP65;


			final int X10_TEMP68 = 2;


			final int X10_TEMP70 = i3 >> X10_TEMP68;


			final int X10_TEMP71 = 0x33333333;


			final int X10_TEMP73 = X10_TEMP70 & X10_TEMP71;


			final int X10_TEMP75 = X10_TEMP67 | X10_TEMP73;


			final int i4 = X10_TEMP75;


			final int X10_TEMP77 = 0x55555555;


			final int X10_TEMP79 = i4 & X10_TEMP77;


			final int X10_TEMP80 = 1;


			final int X10_TEMP82 = X10_TEMP79 << X10_TEMP80;


			final int X10_TEMP83 = 1;


			final int X10_TEMP85 = i4 >> X10_TEMP83;


			final int X10_TEMP86 = 0x55555555;


			final int X10_TEMP88 = X10_TEMP85 & X10_TEMP86;


			final int X10_TEMP90 = X10_TEMP82 | X10_TEMP88;


			final int i5 = X10_TEMP90;


			final int X10_TEMP92 = java.lang.Integer.SIZE;


			final int X10_TEMP94 = X10_TEMP92 - maxBits;


			final int X10_TEMP96 = i5 >>> X10_TEMP94;

			RX10_TEMP7[RX10_TEMP1] =X10_TEMP96;
			}

;


		final intValArray1 RX10_TEMP8 = new intValArray1(r, RX10_TEMP7,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP8.hashCode());


		final intValArray1 X10_TEMP97 = RX10_TEMP8;

		return X10_TEMP97;
		}
public ComplexValArray1 FourierTransform2D_initSineCosine ( final int length1, final int length2, int myUniquePlacePoint)
		{

		final int maxLength = Program.X10Util_maxInt(length1, length2,myUniquePlacePoint);


		final double PI2 = 6.28318530717959;


		final double k = PI2 / maxLength;


		final int X10_TEMP12 = 0;


		final int X10_TEMP7 = 2;


		final int X10_TEMP9 = maxLength / X10_TEMP7;


		final int X10_TEMP10 = 1;


		final int X10_TEMP13 = X10_TEMP9 - X10_TEMP10;


		final Region1 r = Program.createNewRegion1R(X10_TEMP12, X10_TEMP13,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = r;


		final int RX10_TEMP4 = r.regSize;


		final int RX10_TEMP5 = 1;


		final int RX10_TEMP6 = RX10_TEMP4 - RX10_TEMP5;


		final int  RX10_TEMP3 = RX10_TEMP6+1;


		final Complex[] RX10_TEMP7 = (Complex[])(new Complex/*value*/[RX10_TEMP3]);
/*arrayInitBlock*/
for(int RX10_TEMP1= 0;RX10_TEMP1 <RX10_TEMP7.length ;RX10_TEMP1++ )			{

			final int RX10_TEMP2 = RX10_TEMP1;


			final Point1 i = Program.regionOrdinalPoint1(RX10_TEMP0, RX10_TEMP2,myUniquePlacePoint);


			final int X10_TEMP16 = i.f0;


			final double theta = k * X10_TEMP16;


			double X10_TEMP24 = Math.cos(theta);


			final double X10_TEMP21 = Math.sin(theta);


			final int X10_TEMP22 = 0;


			double X10_TEMP25 = X10_TEMP22 - X10_TEMP21;


			final Complex X10_TEMP27 = new Complex(X10_TEMP24, X10_TEMP25,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP27.hashCode());

			RX10_TEMP7[RX10_TEMP1] =X10_TEMP27;
			}

;


		final ComplexValArray1 RX10_TEMP8 = new ComplexValArray1(r, RX10_TEMP7,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP8.hashCode());


		final ComplexValArray1 X10_TEMP28 = RX10_TEMP8;

		return X10_TEMP28;
		}
	}
	class LinearESOpenPIC2D   {
 
	public final Random r;
	public final PoissonSolver solver;


	public ParticleRefArray1 particles;
	public doubleRefArray2 backgroundCharge;
	public long totalTime;
	public long initTime;
	public long depositTime;
	public long redistTime;
	public long solverTime;
	public long pushTime;
	public long moveTime;


	public LinearESOpenPIC2D (  int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final Random X10_TEMP2 = new Random(myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP2.hashCode());


		r = X10_TEMP2;


		final double X10_TEMP3 = Program._LinearESOpenPIC2D_XLENGTH;


		final double X10_TEMP4 = 2.0;


		final double X10_TEMP6 = X10_TEMP3 - X10_TEMP4;


		final double X10_TEMP7 = Program._LinearESOpenPIC2D_YLENGTH;


		final double X10_TEMP8 = 2.0;


		final double X10_TEMP10 = X10_TEMP7 - X10_TEMP8;


		final double X10_TEMP12 = X10_TEMP6 * X10_TEMP10;


		final int X10_TEMP13 = Program._LinearESOpenPIC2D_NPARTICLES;


		double affp = X10_TEMP12 / X10_TEMP13;


		int X10_TEMP18 = Program._LinearESOpenPIC2D_NUMBER_OF_XBITS;


		int X10_TEMP19 = Program._LinearESOpenPIC2D_NUMBER_OF_YBITS;


		final PoissonSolver X10_TEMP21 = new PoissonSolver(X10_TEMP18, X10_TEMP19, affp,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(X10_TEMP21.hashCode());


		solver = X10_TEMP21;


		final long X10_TEMP23 = 0;


		totalTime = X10_TEMP23;


		final long X10_TEMP25 = 0;


		initTime = X10_TEMP25;


		final long X10_TEMP27 = 0;


		depositTime = X10_TEMP27;


		final long X10_TEMP29 = 0;


		redistTime = X10_TEMP29;


		final long X10_TEMP31 = 0;


		pushTime = X10_TEMP31;


		final long X10_TEMP33 = 0;


		moveTime = X10_TEMP33;

		}



}
	/*value*/ class Particle 
	 {
 
	public final double x;
	public final double y;
	public final double xVel;
	public final double yVel;
	public final int pid;


	public Particle (  int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final double X10_TEMP2 = 0.0;


		x = X10_TEMP2;


		final double X10_TEMP4 = 0.0;


		y = X10_TEMP4;


		final double X10_TEMP6 = 0.0;


		xVel = X10_TEMP6;


		final double X10_TEMP8 = 0.0;


		yVel = X10_TEMP8;


		final int X10_TEMP9 = 1;


		final int X10_TEMP10 = 0;


		final int X10_TEMP12 = X10_TEMP10 - X10_TEMP9;


		pid = X10_TEMP12;

		}
	public Particle ( final double x, final double y, final double xVel, final double yVel, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final double X10_TEMP3 = x;

		this.x = (X10_TEMP3);

		final double X10_TEMP6 = y;

		this.y = (X10_TEMP6);

		final double X10_TEMP9 = xVel;

		this.xVel = (X10_TEMP9);

		final double X10_TEMP12 = yVel;

		this.yVel = (X10_TEMP12);

		final int X10_TEMP13 = 1;


		final int X10_TEMP14 = 0;


		final int X10_TEMP16 = X10_TEMP14 - X10_TEMP13;


		pid = X10_TEMP16;

		}
	public Particle ( final double x, final double y, final double xVel, final double yVel, final int pid, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final double X10_TEMP3 = x;

		this.x = (X10_TEMP3);

		final double X10_TEMP6 = y;

		this.y = (X10_TEMP6);

		final double X10_TEMP9 = xVel;

		this.xVel = (X10_TEMP9);

		final double X10_TEMP12 = yVel;

		this.yVel = (X10_TEMP12);

		final int X10_TEMP15 = pid;

		this.pid = (X10_TEMP15);
		}


	}
	/*value*/ class PoissonSolver 
	 {
 
	public final int x;
	public final int y;
	public final int xBits;
	public final int yBits;
	public final double ari;
	public final double affp;
	public final FourierTransform2D fft;
	public final doubleRefArray3 ffg;
	public final doubleValArray2 ffg2;


	public PoissonSolver ( final int xBits, final int yBits, final double affp, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int X10_TEMP3 = xBits;

		this.xBits = (X10_TEMP3);

		final int X10_TEMP6 = yBits;

		this.yBits = (X10_TEMP6);

		final double X10_TEMP9 = affp;

		this.affp = (X10_TEMP9);

		final int X10_TEMP10 = 1;


		final int x0 = X10_TEMP10 << xBits;


		final int X10_TEMP12 = 1;


		final int y0 = X10_TEMP12 << yBits;


		x = x0;


		y = y0;


		final double X10_TEMP17 = 0;


		ari = X10_TEMP17;


		final int X10_TEMP18 = 1;


		int X10_TEMP22 = yBits + X10_TEMP18;


		final int X10_TEMP20 = 1;


		int X10_TEMP23 = xBits + X10_TEMP20;


		final FourierTransform2D fft0 = new FourierTransform2D(X10_TEMP22, X10_TEMP23,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(fft0.hashCode());


		fft = fft0;


		final doubleRefArray3 tables = this.PoissonSolver_initTables(fft0, x0, y0, affp,myUniquePlacePoint);


		final doubleRefArray3 X10_TEMP37 = this.PoissonSolver_makeFFG(tables, x0, y0,myUniquePlacePoint);


		ffg = X10_TEMP37;


		final doubleValArray2 X10_TEMP43 = this.PoissonSolver_makeFFG2(tables, x0, y0,myUniquePlacePoint);


		ffg2 = X10_TEMP43;


		final String X10_TEMP45 = "Poisson Solver initialized";

		System.out.println(X10_TEMP45);
		}


public doubleRefArray3 PoissonSolver_initTables ( final FourierTransform2D fft, final int x, final int y, final double affp, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP5 = x - X10_TEMP2;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		final int X10_TEMP9 = 0;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP9, y,myUniquePlacePoint);


		final int X10_TEMP13 = 0;


		final int X10_TEMP14 = 3;


		final Region1 r3 = Program.createNewRegion1R(X10_TEMP13, X10_TEMP14,myUniquePlacePoint);


		final Dist2 X10_TEMP20 = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Dist3 dTable1 = Program.X10Util_extendDistRank3D(X10_TEMP20, r3,myUniquePlacePoint);


		final int first = 0;


		final int X10_TEMP27 = 0;


		final int X10_TEMP30 = 0;


		final int X10_TEMP31 = 3;


		final Region3 X10_TEMP32 = Program.createNewRegion3RRR(x, x, X10_TEMP27, y, X10_TEMP30, X10_TEMP31,myUniquePlacePoint);


		final Dist3 X10_TEMP34 = Program.getPlaceDist3(X10_TEMP32, first,myUniquePlacePoint);


		final Dist3 dTable2 = X10_TEMP34;


		final Dist3 dTable = Program.unionDist3(dTable1, dTable2,myUniquePlacePoint);


		final Region3 RX10_TEMP0 = dTable.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount3(dTable, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray3 RX10_TEMP19 = new doubleRefArray3(dTable, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray3 table = RX10_TEMP19;


		final String X10_TEMP39 = "Init: Green's function";

		System.out.println(X10_TEMP39);
		this.PoissonSolver_initGreensFnTable(table, fft, x, y, affp,myUniquePlacePoint);

		final String X10_TEMP47 = "Init: Shape factor";

		System.out.println(X10_TEMP47);
		this.PoissonSolver_initShapeFactorTable(table, fft, x, y, affp,myUniquePlacePoint);

		final String X10_TEMP55 = "Init: X Electric field";

		System.out.println(X10_TEMP55);
		this.PoissonSolver_initElectricFieldXTable(table, fft, x, y, affp,myUniquePlacePoint);

		final String X10_TEMP63 = "Init: Y Electric field";

		System.out.println(X10_TEMP63);
		this.PoissonSolver_initElectricFieldYTable(table, fft, x, y, affp,myUniquePlacePoint);
		return table;
		}
public doubleRefArray3 PoissonSolver_makeFFG ( final doubleRefArray3 table, final int x, final int y, int myUniquePlacePoint)
		{

		final int X10_TEMP4 = 0;


		final int X10_TEMP2 = 1;


		final int X10_TEMP5 = x - X10_TEMP2;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP4, X10_TEMP5,myUniquePlacePoint);


		final int X10_TEMP9 = 0;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP9, y,myUniquePlacePoint);


		final int X10_TEMP13 = 0;


		final int X10_TEMP14 = 3;


		final Region1 r3 = Program.createNewRegion1R(X10_TEMP13, X10_TEMP14,myUniquePlacePoint);


		final Dist2 X10_TEMP20 = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Dist3 dResult = Program.X10Util_extendDistRank3D(X10_TEMP20, r3,myUniquePlacePoint);


		final Region3 RX10_TEMP0 = dResult.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount3(dResult, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;


				final Point3[] RX10_TEMP13 = Program.getDistLocalArray3(dResult, RX10_TEMP9,myUniquePlacePoint);

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP26 = RX10_TEMP12+1;


					final double[] RX10_TEMP27 = new double/*NewUpdatableArray*/[RX10_TEMP26];
/*arrayInitBlock*/
for(int RX10_TEMP14= 0;RX10_TEMP14 <RX10_TEMP27.length ;RX10_TEMP14++ )						{

						final Point3 pt = RX10_TEMP13[RX10_TEMP14];


						final Dist3 RX10_TEMP15 = table.distValue;


						final Region3 RX10_TEMP16 = RX10_TEMP15.dReg;


						final int RX10_TEMP17 = Program.searchPointInRegion3(RX10_TEMP16, pt,RX10_TEMP10);


						final int RX10_TEMP18 = 0;


						final boolean RX10_TEMP19 = RX10_TEMP17 < RX10_TEMP18;

						if(RX10_TEMP19)
							{

							String RX10_TEMP20 = "Array access index out of bounds";

							throw new RuntimeException(RX10_TEMP20);

							}

						final int RX10_TEMP21 = Program.getPlaceFromDist3(RX10_TEMP15, RX10_TEMP17,RX10_TEMP10);


						final int RX10_TEMP23 = 0;


						final boolean RX10_TEMP24 = RX10_TEMP21 != RX10_TEMP23;

						if(RX10_TEMP24)
							{

							String RX10_TEMP22 = "Bad place access for array table";

							throw new RuntimeException(RX10_TEMP22);

							}

						final double RX10_TEMP25 = Program.getRefArrayValue3double(table, RX10_TEMP17,RX10_TEMP10);


						final double X10_TEMP24 = RX10_TEMP25;

						RX10_TEMP27[RX10_TEMP14] =X10_TEMP24;
						}

;


					final doubleStub RX10_TEMP28 = new doubleStub(RX10_TEMP27,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP28.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP28;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP29 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP31= 0;RX10_TEMP31 <RX10_TEMP29.length ;RX10_TEMP31++ )			{

			final doubleStub RX10_TEMP30 = RX10_TEMP6[RX10_TEMP31];

			RX10_TEMP29[RX10_TEMP31] =RX10_TEMP30;
			}

;


		final doubleRefArray3 RX10_TEMP32 = new doubleRefArray3(dResult, RX10_TEMP29,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP32.hashCode());


		final doubleRefArray3 X10_TEMP26 = RX10_TEMP32;

		return X10_TEMP26;
		}
public doubleValArray2 PoissonSolver_makeFFG2 ( final doubleRefArray3 table, final int x, final int y, int myUniquePlacePoint)
		{

		final int X10_TEMP3 = 0;


		final int X10_TEMP6 = 0;


		final int X10_TEMP7 = 3;


		final Region2 rResult = Program.createNewRegion2RR(X10_TEMP3, y, X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = rResult;


		final int RX10_TEMP60 = rResult.regSize;


		final int RX10_TEMP61 = 1;


		final int RX10_TEMP62 = RX10_TEMP60 - RX10_TEMP61;


		final int  RX10_TEMP59 = RX10_TEMP62+1;


		final double[] RX10_TEMP63 = (double[])(new double/*value*/[RX10_TEMP59]);
/*arrayInitBlock*/
for(int RX10_TEMP1= 0;RX10_TEMP1 <RX10_TEMP63.length ;RX10_TEMP1++ )			{

			final int RX10_TEMP3 = RX10_TEMP1;


			final Point2 RX10_TEMP2 = Program.regionOrdinalPoint2(RX10_TEMP0, RX10_TEMP3,myUniquePlacePoint);


			final int i = RX10_TEMP2.f0;


			final int j = RX10_TEMP2.f1;


			final int pHere = 0;


			final int X10_TEMP12 = 0;


			final int X10_TEMP13 = 0;


			final Region1 X10_TEMP14 = Program.createNewRegion1R(X10_TEMP12, X10_TEMP13,myUniquePlacePoint);


			final int X10_TEMP15 = 0;


			final Dist1 dDst = Program.getPlaceDist1(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


			final Region1 RX10_TEMP4 = dDst.dReg;


			final int RX10_TEMP5 = 0;


			final int RX10_TEMP6 = 1;


			int RX10_TEMP7 = 1;


			RX10_TEMP7 = RX10_TEMP7 - RX10_TEMP6;


			final int  RX10_TEMP8 = RX10_TEMP7+1;


			final int RX10_TEMP9 = RX10_TEMP7+1;


			final doubleStub[] RX10_TEMP10 = new doubleStub[RX10_TEMP9];

			/*FINISH
*/				{
				for(int RX10_TEMP11=0; RX10_TEMP11 < RX10_TEMP8; RX10_TEMP11++)
					{

					final int RX10_TEMP12 = 0;


					final int RX10_TEMP13 = RX10_TEMP11;


					final int RX10_TEMP14 = 0;


					final int RX10_TEMP15 = Program.getDistLocalCount1(dDst, RX10_TEMP13,myUniquePlacePoint);


					final int RX10_TEMP16 = RX10_TEMP15 - RX10_TEMP6;

					//async(RX10_TEMP14)
						{

						final int RX10_TEMP17 = RX10_TEMP16+1;


						final double[] RX10_TEMP18 = new double[RX10_TEMP17];


						final doubleStub RX10_TEMP19 = new doubleStub(RX10_TEMP18,RX10_TEMP14);
						
Program.globalPointerHashMap.get(RX10_TEMP14).add(RX10_TEMP19.hashCode());

						//async(RX10_TEMP12)
							{
							RX10_TEMP10[RX10_TEMP11] = RX10_TEMP19;
							}
						}
					}
				}

			final doubleStub[] RX10_TEMP20 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP8]);
/*arrayInitBlock*/
for(int RX10_TEMP22= 0;RX10_TEMP22 <RX10_TEMP20.length ;RX10_TEMP22++ )				{

				final doubleStub RX10_TEMP21 = RX10_TEMP10[RX10_TEMP22];

				RX10_TEMP20[RX10_TEMP22] =RX10_TEMP21;
				}

;


			final doubleRefArray1 RX10_TEMP23 = new doubleRefArray1(dDst, RX10_TEMP20,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP23.hashCode());


			final doubleRefArray1 rcv = RX10_TEMP23;

			/*FINISH
*/				{

				final int X10_TEMP19 = 0;

				//async(X10_TEMP19)
					{

					final Point3 RX10_TEMP24 = new Point3(x, i, j,X10_TEMP19);
					
Program.globalPointerHashMap.get(X10_TEMP19).add(RX10_TEMP24.hashCode());


					final Dist3 RX10_TEMP25 = table.distValue;


					final Region3 RX10_TEMP26 = RX10_TEMP25.dReg;


					final int RX10_TEMP27 = Program.searchPointInRegion3(RX10_TEMP26, RX10_TEMP24,X10_TEMP19);


					final int RX10_TEMP28 = 0;


					final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

					if(RX10_TEMP29)
						{

						String RX10_TEMP30 = "Array access index out of bounds";

						throw new RuntimeException(RX10_TEMP30);

						}

					final int RX10_TEMP31 = Program.getPlaceFromDist3(RX10_TEMP25, RX10_TEMP27,X10_TEMP19);


					final int RX10_TEMP33 = 0;


					final boolean RX10_TEMP34 = RX10_TEMP31 != RX10_TEMP33;

					if(RX10_TEMP34)
						{

						String RX10_TEMP32 = "Bad place access for array table";

						throw new RuntimeException(RX10_TEMP32);

						}

					final double RX10_TEMP35 = Program.getRefArrayValue3double(table, RX10_TEMP27,X10_TEMP19);


					final double val = RX10_TEMP35;

					/*FINISH
*/						{
						//async(pHere)
							{

							final int X10_TEMP26 = 0;


							final double X10_TEMP29 = val;


							final Point1 RX10_TEMP36 = new Point1(X10_TEMP26,pHere);
							
Program.globalPointerHashMap.get(pHere).add(RX10_TEMP36.hashCode());


							final Dist1 RX10_TEMP37 = rcv.distValue;


							final Region1 RX10_TEMP38 = RX10_TEMP37.dReg;


							final int RX10_TEMP39 = Program.searchPointInRegion1(RX10_TEMP38, RX10_TEMP36,pHere);


							final int RX10_TEMP40 = 0;


							final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

							if(RX10_TEMP41)
								{

								String RX10_TEMP42 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP42);

								}

							final int RX10_TEMP43 = Program.getPlaceFromDist1(RX10_TEMP37, RX10_TEMP39,pHere);


							final int RX10_TEMP45 = 0;


							final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

							if(RX10_TEMP46)
								{

								String RX10_TEMP44 = "Bad place access for array rcv";

								throw new RuntimeException(RX10_TEMP44);

								}
							Program.setRefArrayValue1double(rcv, RX10_TEMP39, X10_TEMP29,pHere);
							}
						}
					}
				}

			final int X10_TEMP31 = 0;


			final Point1 RX10_TEMP47 = new Point1(X10_TEMP31,myUniquePlacePoint);
			
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP47.hashCode());


			final Dist1 RX10_TEMP48 = rcv.distValue;


			final Region1 RX10_TEMP49 = RX10_TEMP48.dReg;


			final int RX10_TEMP50 = Program.searchPointInRegion1(RX10_TEMP49, RX10_TEMP47,myUniquePlacePoint);


			final int RX10_TEMP51 = 0;


			final boolean RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51;

			if(RX10_TEMP52)
				{

				String RX10_TEMP53 = "Array access index out of bounds";

				throw new RuntimeException(RX10_TEMP53);

				}

			final int RX10_TEMP54 = Program.getPlaceFromDist1(RX10_TEMP48, RX10_TEMP50,myUniquePlacePoint);


			final int RX10_TEMP56 = 0;


			final boolean RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56;

			if(RX10_TEMP57)
				{

				String RX10_TEMP55 = "Bad place access for array rcv";

				throw new RuntimeException(RX10_TEMP55);

				}

			final double RX10_TEMP58 = Program.getRefArrayValue1double(rcv, RX10_TEMP50,myUniquePlacePoint);


			final double X10_TEMP33 = RX10_TEMP58;

			RX10_TEMP63[RX10_TEMP1] =X10_TEMP33;
			}

;


		final doubleValArray2 RX10_TEMP64 = new doubleValArray2(rResult, RX10_TEMP63,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP64.hashCode());


		final doubleValArray2 X10_TEMP34 = RX10_TEMP64;

		return X10_TEMP34;
		}
public void PoissonSolver_initGreensFnTable ( final doubleRefArray3 table, final FourierTransform2D fft, final int x, final int y, final double affp, int myUniquePlacePoint)
		{

		final int X10_TEMP6 = 0;


		final int X10_TEMP2 = 2;


		final int X10_TEMP3 = X10_TEMP2 * y;


		final int X10_TEMP4 = 1;


		final int X10_TEMP7 = X10_TEMP3 - X10_TEMP4;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final int X10_TEMP14 = 0;


		final int X10_TEMP10 = 2;


		final int X10_TEMP11 = X10_TEMP10 * x;


		final int X10_TEMP12 = 1;


		final int X10_TEMP15 = X10_TEMP11 - X10_TEMP12;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


		final Dist2 dGreen = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dGreen.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dGreen, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dGreen, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 f = RX10_TEMP19;


		final double X10_TEMP21 = Program._PoissonSolver_AR;


		final double X10_TEMP22 = 0.0;


		final boolean X10_TEMP24 = X10_TEMP21 > X10_TEMP22;


		final boolean X10_TEMP25 = X10_TEMP24;


		final double X10_TEMP26 = 1.0;


		final double X10_TEMP27 = Program._PoissonSolver_AR;


		double X10_TEMP30 = 0.0;

		if(X10_TEMP25)
			{

			X10_TEMP30 = X10_TEMP26 / X10_TEMP27;

			}

		final double X10_TEMP31 = X10_TEMP30;


		final double invRadius = X10_TEMP31;


		final int X10_TEMP32 = 4;


		final int X10_TEMP33 = X10_TEMP32 * x;


		final double N = X10_TEMP33 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP36.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP36.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP31;

				//async(X10_TEMP37)
					{

					final int X10_TEMP40 = pl.f0;


					final int X10_TEMP39 = 2;


					final int X10_TEMP41 = X10_TEMP39 * y;


					final boolean X10_TEMP43 = X10_TEMP40 <= X10_TEMP41;

					if(X10_TEMP43)
						{

						final Region2 rLocal = Program.X10Util_get2DLRegion(dGreen,X10_TEMP37);


						final int X10_TEMP47 = 0;


						final int RX10_TEMP35 = 1;


						int RX10_TEMP33 = rLocal.regSize;


						RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35;


						final int  RX10_TEMP34 = RX10_TEMP33+1;

						for(int RX10_TEMP32=0; RX10_TEMP32 < RX10_TEMP34; RX10_TEMP32++)
							{

							final int RX10_TEMP36 = RX10_TEMP32;


							final Point2 p = Program.regionOrdinalPoint2(rLocal, RX10_TEMP36,X10_TEMP37);

							//async(X10_TEMP47)
								{

								final int X10_TEMP49 = p.f0;


								final boolean X10_TEMP51 = X10_TEMP49 > y;


								final boolean X10_TEMP52 = X10_TEMP51;


								final int X10_TEMP57 = p.f0;


								final int X10_TEMP54 = 2;


								final int X10_TEMP56 = X10_TEMP54 * y;


								int X10_TEMP61 = p.f0;

								if(X10_TEMP52)
									{

									X10_TEMP61 = X10_TEMP57 - X10_TEMP56;

									}

								final int X10_TEMP62 = X10_TEMP61;


								final int X10_TEMP64 = 2;


								final double x1 = Math.pow(X10_TEMP62, X10_TEMP64);


								final int X10_TEMP67 = p.f1;


								final boolean X10_TEMP69 = X10_TEMP67 > x;


								final boolean X10_TEMP70 = X10_TEMP69;


								final int X10_TEMP75 = p.f1;


								final int X10_TEMP72 = 2;


								final int X10_TEMP74 = X10_TEMP72 * x;


								int X10_TEMP79 = p.f1;

								if(X10_TEMP70)
									{

									X10_TEMP79 = X10_TEMP75 - X10_TEMP74;

									}

								final int X10_TEMP80 = X10_TEMP79;


								final int X10_TEMP82 = 2;


								final double x2 = Math.pow(X10_TEMP80, X10_TEMP82);


								final double X10_TEMP85 = x1 + x2;


								final double r = Math.sqrt(X10_TEMP85);


								final double X10_TEMP94 = this.PoissonSolver_potentialField(r, invRadius, affp,X10_TEMP47);


								final double X10_TEMP95 = X10_TEMP94;


								final Dist2 RX10_TEMP37 = f.distValue;


								final Region2 RX10_TEMP38 = RX10_TEMP37.dReg;


								final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, p,X10_TEMP47);


								final int RX10_TEMP40 = 0;


								final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

								if(RX10_TEMP41)
									{

									String RX10_TEMP42 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP42);

									}

								final int RX10_TEMP43 = Program.getPlaceFromDist2(RX10_TEMP37, RX10_TEMP39,X10_TEMP47);


								final int RX10_TEMP45 = 0;


								final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

								if(RX10_TEMP46)
									{

									String RX10_TEMP44 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP44);

									}
								Program.setRefArrayValue2double(f, RX10_TEMP39, X10_TEMP95,X10_TEMP47);
								}
							}
						}
					}
				}
			}

		final ComplexRefArray2 ft = Program.FourierTransform2D_inverseTransformD(fft, f,myUniquePlacePoint);


		final int X10_TEMP104 = Program._PoissonSolver_GREENS_IDX;

		this.PoissonSolver_genTable1(table, ft, X10_TEMP104, x, y,myUniquePlacePoint);
		}
public void PoissonSolver_initShapeFactorTable ( final doubleRefArray3 table, final FourierTransform2D fft, final int x, final int y, final double affp, int myUniquePlacePoint)
		{

		final int X10_TEMP6 = 0;


		final int X10_TEMP2 = 2;


		final int X10_TEMP3 = X10_TEMP2 * y;


		final int X10_TEMP4 = 1;


		final int X10_TEMP7 = X10_TEMP3 - X10_TEMP4;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final int X10_TEMP14 = 0;


		final int X10_TEMP10 = 2;


		final int X10_TEMP11 = X10_TEMP10 * x;


		final int X10_TEMP12 = 1;


		final int X10_TEMP15 = X10_TEMP11 - X10_TEMP12;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


		final Dist2 dShape = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dShape.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dShape, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dShape, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 f = RX10_TEMP19;


		final double X10_TEMP21 = Program._PoissonSolver_AR;


		final double X10_TEMP22 = 0.0;


		final boolean X10_TEMP24 = X10_TEMP21 > X10_TEMP22;


		final boolean X10_TEMP25 = X10_TEMP24;


		final double X10_TEMP26 = 1.0;


		final double X10_TEMP27 = Program._PoissonSolver_AR;


		double X10_TEMP30 = 0.0;

		if(X10_TEMP25)
			{

			X10_TEMP30 = X10_TEMP26 / X10_TEMP27;

			}

		final double X10_TEMP31 = X10_TEMP30;


		final double invRadius = X10_TEMP31;


		final int X10_TEMP32 = 4;


		final int X10_TEMP33 = X10_TEMP32 * x;


		final double N = X10_TEMP33 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP36.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP36.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP31;

				//async(X10_TEMP37)
					{

					final int X10_TEMP40 = pl.f0;


					final int X10_TEMP39 = 2;


					final int X10_TEMP41 = X10_TEMP39 * y;


					final boolean X10_TEMP43 = X10_TEMP40 <= X10_TEMP41;

					if(X10_TEMP43)
						{

						final Region2 rLocal = Program.X10Util_get2DLRegion(dShape,X10_TEMP37);


						final int X10_TEMP47 = 0;


						final int RX10_TEMP35 = 1;


						int RX10_TEMP33 = rLocal.regSize;


						RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35;


						final int  RX10_TEMP34 = RX10_TEMP33+1;

						for(int RX10_TEMP32=0; RX10_TEMP32 < RX10_TEMP34; RX10_TEMP32++)
							{

							final int RX10_TEMP36 = RX10_TEMP32;


							final Point2 p = Program.regionOrdinalPoint2(rLocal, RX10_TEMP36,X10_TEMP37);

							//async(X10_TEMP47)
								{

								final int X10_TEMP49 = p.f0;


								final boolean X10_TEMP51 = X10_TEMP49 > y;


								final boolean X10_TEMP52 = X10_TEMP51;


								final int X10_TEMP57 = p.f0;


								final int X10_TEMP54 = 2;


								final int X10_TEMP56 = X10_TEMP54 * y;


								int X10_TEMP61 = p.f0;

								if(X10_TEMP52)
									{

									X10_TEMP61 = X10_TEMP57 - X10_TEMP56;

									}

								final int X10_TEMP62 = X10_TEMP61;


								final int X10_TEMP64 = 2;


								final double x1 = Math.pow(X10_TEMP62, X10_TEMP64);


								final int X10_TEMP67 = p.f1;


								final boolean X10_TEMP69 = X10_TEMP67 > x;


								final boolean X10_TEMP70 = X10_TEMP69;


								final int X10_TEMP75 = p.f1;


								final int X10_TEMP72 = 2;


								final int X10_TEMP74 = X10_TEMP72 * x;


								int X10_TEMP79 = p.f1;

								if(X10_TEMP70)
									{

									X10_TEMP79 = X10_TEMP75 - X10_TEMP74;

									}

								final int X10_TEMP80 = X10_TEMP79;


								final int X10_TEMP82 = 2;


								final double x2 = Math.pow(X10_TEMP80, X10_TEMP82);


								final double X10_TEMP85 = x1 + x2;


								final double r = Math.sqrt(X10_TEMP85);


								final double X10_TEMP94 = this.PoissonSolver_particleShape(r, invRadius, affp,X10_TEMP47);


								final double X10_TEMP95 = X10_TEMP94;


								final Dist2 RX10_TEMP37 = f.distValue;


								final Region2 RX10_TEMP38 = RX10_TEMP37.dReg;


								final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, p,X10_TEMP47);


								final int RX10_TEMP40 = 0;


								final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

								if(RX10_TEMP41)
									{

									String RX10_TEMP42 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP42);

									}

								final int RX10_TEMP43 = Program.getPlaceFromDist2(RX10_TEMP37, RX10_TEMP39,X10_TEMP47);


								final int RX10_TEMP45 = 0;


								final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

								if(RX10_TEMP46)
									{

									String RX10_TEMP44 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP44);

									}
								Program.setRefArrayValue2double(f, RX10_TEMP39, X10_TEMP95,X10_TEMP47);
								}
							}
						}
					}
				}
			}

		final ComplexRefArray2 ft = Program.FourierTransform2D_inverseTransformD(fft, f,myUniquePlacePoint);


		final int X10_TEMP104 = Program._PoissonSolver_SHAPE_IDX;

		this.PoissonSolver_genTable1(table, ft, X10_TEMP104, x, y,myUniquePlacePoint);
		}
public void PoissonSolver_initElectricFieldXTable ( final doubleRefArray3 table, final FourierTransform2D fft, final int x, final int y, final double affp, int myUniquePlacePoint)
		{

		final int X10_TEMP6 = 0;


		final int X10_TEMP2 = 2;


		final int X10_TEMP3 = X10_TEMP2 * y;


		final int X10_TEMP4 = 1;


		final int X10_TEMP7 = X10_TEMP3 - X10_TEMP4;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final int X10_TEMP14 = 0;


		final int X10_TEMP10 = 2;


		final int X10_TEMP11 = X10_TEMP10 * x;


		final int X10_TEMP12 = 1;


		final int X10_TEMP15 = X10_TEMP11 - X10_TEMP12;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


		final Dist2 dElecX = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dElecX.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dElecX, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dElecX, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 f = RX10_TEMP19;


		final double X10_TEMP21 = Program._PoissonSolver_AR;


		final double X10_TEMP22 = 0.0;


		final boolean X10_TEMP24 = X10_TEMP21 > X10_TEMP22;


		final boolean X10_TEMP25 = X10_TEMP24;


		final double X10_TEMP26 = 1.0;


		final double X10_TEMP27 = Program._PoissonSolver_AR;


		double X10_TEMP30 = 0.0;

		if(X10_TEMP25)
			{

			X10_TEMP30 = X10_TEMP26 / X10_TEMP27;

			}

		final double X10_TEMP31 = X10_TEMP30;


		final double invRadius = X10_TEMP31;


		final int X10_TEMP32 = 4;


		final int X10_TEMP33 = X10_TEMP32 * x;


		final double N = X10_TEMP33 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP36.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP36.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP31;

				//async(X10_TEMP37)
					{

					final int X10_TEMP40 = pl.f0;


					final int X10_TEMP39 = 2;


					final int X10_TEMP41 = X10_TEMP39 * y;


					final boolean X10_TEMP43 = X10_TEMP40 <= X10_TEMP41;

					if(X10_TEMP43)
						{

						final Region2 rLocal = Program.X10Util_get2DLRegion(dElecX,X10_TEMP37);


						final int X10_TEMP47 = 0;


						final int RX10_TEMP35 = 1;


						int RX10_TEMP33 = rLocal.regSize;


						RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35;


						final int  RX10_TEMP34 = RX10_TEMP33+1;

						for(int RX10_TEMP32=0; RX10_TEMP32 < RX10_TEMP34; RX10_TEMP32++)
							{

							final int RX10_TEMP36 = RX10_TEMP32;


							final Point2 p = Program.regionOrdinalPoint2(rLocal, RX10_TEMP36,X10_TEMP37);

							//async(X10_TEMP47)
								{

								final int X10_TEMP49 = p.f0;


								final boolean X10_TEMP51 = X10_TEMP49 > y;


								final boolean X10_TEMP52 = X10_TEMP51;


								final int X10_TEMP57 = p.f0;


								final int X10_TEMP54 = 2;


								final int X10_TEMP56 = X10_TEMP54 * y;


								int X10_TEMP61 = p.f0;

								if(X10_TEMP52)
									{

									X10_TEMP61 = X10_TEMP57 - X10_TEMP56;

									}

								final int X10_TEMP62 = X10_TEMP61;


								final double x1 = X10_TEMP62;


								final int X10_TEMP65 = 2;


								final double xs1 = Math.pow(x1, X10_TEMP65);


								final int X10_TEMP68 = p.f1;


								final boolean X10_TEMP70 = X10_TEMP68 > x;


								final boolean X10_TEMP71 = X10_TEMP70;


								final int X10_TEMP76 = p.f1;


								final int X10_TEMP73 = 2;


								final int X10_TEMP75 = X10_TEMP73 * x;


								int X10_TEMP80 = p.f1;

								if(X10_TEMP71)
									{

									X10_TEMP80 = X10_TEMP76 - X10_TEMP75;

									}

								final int X10_TEMP81 = X10_TEMP80;


								final double x2 = X10_TEMP81;


								final int X10_TEMP84 = 2;


								final double xs2 = Math.pow(x2, X10_TEMP84);


								final double X10_TEMP87 = xs1 + xs2;


								final double r = Math.sqrt(X10_TEMP87);


								final double val = this.PoissonSolver_radialElectricField(r, invRadius, affp,X10_TEMP47);


								final double X10_TEMP95 = 0.0;


								final boolean X10_TEMP97 = r > X10_TEMP95;


								final boolean X10_TEMP98 = X10_TEMP97;


								final double X10_TEMP100 = x2 / r;


								double X10_TEMP103 = val;

								if(X10_TEMP98)
									{

									X10_TEMP103 = val * X10_TEMP100;

									}

								final double X10_TEMP104 = X10_TEMP103;


								final double X10_TEMP106 = X10_TEMP104;


								final Dist2 RX10_TEMP37 = f.distValue;


								final Region2 RX10_TEMP38 = RX10_TEMP37.dReg;


								final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, p,X10_TEMP47);


								final int RX10_TEMP40 = 0;


								final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

								if(RX10_TEMP41)
									{

									String RX10_TEMP42 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP42);

									}

								final int RX10_TEMP43 = Program.getPlaceFromDist2(RX10_TEMP37, RX10_TEMP39,X10_TEMP47);


								final int RX10_TEMP45 = 0;


								final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

								if(RX10_TEMP46)
									{

									String RX10_TEMP44 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP44);

									}
								Program.setRefArrayValue2double(f, RX10_TEMP39, X10_TEMP106,X10_TEMP47);
								}
							}
						}
					}
				}
			}

		final ComplexRefArray2 ft = Program.FourierTransform2D_inverseTransformD(fft, f,myUniquePlacePoint);


		final int X10_TEMP115 = Program._PoissonSolver_ELECX_IDX;

		this.PoissonSolver_genTable2(table, ft, X10_TEMP115, x, y,myUniquePlacePoint);
		}
public void PoissonSolver_initElectricFieldYTable ( final doubleRefArray3 table, final FourierTransform2D fft, final int x, final int y, final double affp, int myUniquePlacePoint)
		{

		final int X10_TEMP6 = 0;


		final int X10_TEMP2 = 2;


		final int X10_TEMP3 = X10_TEMP2 * y;


		final int X10_TEMP4 = 1;


		final int X10_TEMP7 = X10_TEMP3 - X10_TEMP4;


		final Region1 r1 = Program.createNewRegion1R(X10_TEMP6, X10_TEMP7,myUniquePlacePoint);


		final int X10_TEMP14 = 0;


		final int X10_TEMP10 = 2;


		final int X10_TEMP11 = X10_TEMP10 * x;


		final int X10_TEMP12 = 1;


		final int X10_TEMP15 = X10_TEMP11 - X10_TEMP12;


		final Region1 r2 = Program.createNewRegion1R(X10_TEMP14, X10_TEMP15,myUniquePlacePoint);


		final Dist2 dElecX = Program.X10Util_distBlockStar2(r1, r2,myUniquePlacePoint);


		final Region2 RX10_TEMP0 = dElecX.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount2(dElecX, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					final int RX10_TEMP13 = RX10_TEMP12+1;


					final double[] RX10_TEMP14 = new double[RX10_TEMP13];


					final doubleStub RX10_TEMP15 = new doubleStub(RX10_TEMP14,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP15.hashCode());

					//async(RX10_TEMP8)
						{
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP15;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP16 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP18= 0;RX10_TEMP18 <RX10_TEMP16.length ;RX10_TEMP18++ )			{

			final doubleStub RX10_TEMP17 = RX10_TEMP6[RX10_TEMP18];

			RX10_TEMP16[RX10_TEMP18] =RX10_TEMP17;
			}

;


		final doubleRefArray2 RX10_TEMP19 = new doubleRefArray2(dElecX, RX10_TEMP16,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP19.hashCode());


		final doubleRefArray2 f = RX10_TEMP19;


		final double X10_TEMP21 = Program._PoissonSolver_AR;


		final double X10_TEMP22 = 0.0;


		final boolean X10_TEMP24 = X10_TEMP21 > X10_TEMP22;


		final boolean X10_TEMP25 = X10_TEMP24;


		final double X10_TEMP26 = 1.0;


		final double X10_TEMP27 = Program._PoissonSolver_AR;


		double X10_TEMP30 = 0.0;

		if(X10_TEMP25)
			{

			X10_TEMP30 = X10_TEMP26 / X10_TEMP27;

			}

		final double X10_TEMP31 = X10_TEMP30;


		final double invRadius = X10_TEMP31;


		final int X10_TEMP32 = 4;


		final int X10_TEMP33 = X10_TEMP32 * x;


		final double N = X10_TEMP33 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP36 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP21 = X10_TEMP36.dReg;


			final int RX10_TEMP24 = 1;


			int RX10_TEMP22 = RX10_TEMP21.regSize;


			RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


			final int  RX10_TEMP23 = RX10_TEMP22+1;

			for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
				{

				final int RX10_TEMP25 = RX10_TEMP20;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP21, RX10_TEMP25,myUniquePlacePoint);


				final Region1 RX10_TEMP26 = X10_TEMP36.dReg;


				final int RX10_TEMP27 = Program.searchPointInRegion1(RX10_TEMP26, pl,myUniquePlacePoint);


				final int RX10_TEMP28 = 0;


				final boolean RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28;

				if(RX10_TEMP29)
					{

					final String RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36.";

					throw new RuntimeException(RX10_TEMP30);

					}

				final int RX10_TEMP31 = Program.getPlaceFromDist1(X10_TEMP36, RX10_TEMP27,myUniquePlacePoint);


				final int X10_TEMP37 = RX10_TEMP31;

				//async(X10_TEMP37)
					{

					final int X10_TEMP40 = pl.f0;


					final int X10_TEMP39 = 2;


					final int X10_TEMP41 = X10_TEMP39 * y;


					final boolean X10_TEMP43 = X10_TEMP40 <= X10_TEMP41;

					if(X10_TEMP43)
						{

						final Region2 rLocal = Program.X10Util_get2DLRegion(dElecX,X10_TEMP37);


						final int X10_TEMP47 = 0;


						final int RX10_TEMP35 = 1;


						int RX10_TEMP33 = rLocal.regSize;


						RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35;


						final int  RX10_TEMP34 = RX10_TEMP33+1;

						for(int RX10_TEMP32=0; RX10_TEMP32 < RX10_TEMP34; RX10_TEMP32++)
							{

							final int RX10_TEMP36 = RX10_TEMP32;


							final Point2 p = Program.regionOrdinalPoint2(rLocal, RX10_TEMP36,X10_TEMP37);

							//async(X10_TEMP47)
								{

								final int X10_TEMP49 = p.f0;


								final boolean X10_TEMP51 = X10_TEMP49 > y;


								final boolean X10_TEMP52 = X10_TEMP51;


								final int X10_TEMP57 = p.f0;


								final int X10_TEMP54 = 2;


								final int X10_TEMP56 = X10_TEMP54 * y;


								int X10_TEMP61 = p.f0;

								if(X10_TEMP52)
									{

									X10_TEMP61 = X10_TEMP57 - X10_TEMP56;

									}

								final int X10_TEMP62 = X10_TEMP61;


								final double y1 = X10_TEMP62;


								final int X10_TEMP65 = 2;


								final double ys1 = Math.pow(y1, X10_TEMP65);


								final int X10_TEMP68 = p.f1;


								final boolean X10_TEMP70 = X10_TEMP68 > x;


								final boolean X10_TEMP71 = X10_TEMP70;


								final int X10_TEMP76 = p.f1;


								final int X10_TEMP73 = 2;


								final int X10_TEMP75 = X10_TEMP73 * x;


								int X10_TEMP80 = p.f1;

								if(X10_TEMP71)
									{

									X10_TEMP80 = X10_TEMP76 - X10_TEMP75;

									}

								final int X10_TEMP81 = X10_TEMP80;


								final double y2 = X10_TEMP81;


								final int X10_TEMP84 = 2;


								final double ys2 = Math.pow(y2, X10_TEMP84);


								final double X10_TEMP87 = ys1 + ys2;


								final double r = Math.sqrt(X10_TEMP87);


								final double val = this.PoissonSolver_radialElectricField(r, invRadius, affp,X10_TEMP47);


								final double X10_TEMP95 = 0.0;


								final boolean X10_TEMP97 = r > X10_TEMP95;


								final boolean X10_TEMP98 = X10_TEMP97;


								final double X10_TEMP100 = y1 / r;


								double X10_TEMP103 = val;

								if(X10_TEMP98)
									{

									X10_TEMP103 = val * X10_TEMP100;

									}

								final double X10_TEMP104 = X10_TEMP103;


								final double X10_TEMP106 = X10_TEMP104;


								final Dist2 RX10_TEMP37 = f.distValue;


								final Region2 RX10_TEMP38 = RX10_TEMP37.dReg;


								final int RX10_TEMP39 = Program.searchPointInRegion2(RX10_TEMP38, p,X10_TEMP47);


								final int RX10_TEMP40 = 0;


								final boolean RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40;

								if(RX10_TEMP41)
									{

									String RX10_TEMP42 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP42);

									}

								final int RX10_TEMP43 = Program.getPlaceFromDist2(RX10_TEMP37, RX10_TEMP39,X10_TEMP47);


								final int RX10_TEMP45 = 0;


								final boolean RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45;

								if(RX10_TEMP46)
									{

									String RX10_TEMP44 = "Bad place access for array f";

									throw new RuntimeException(RX10_TEMP44);

									}
								Program.setRefArrayValue2double(f, RX10_TEMP39, X10_TEMP106,X10_TEMP47);
								}
							}
						}
					}
				}
			}

		final ComplexRefArray2 ft = Program.FourierTransform2D_inverseTransformD(fft, f,myUniquePlacePoint);


		final int X10_TEMP115 = Program._PoissonSolver_ELECY_IDX;

		this.PoissonSolver_genTable3(table, ft, X10_TEMP115, x, y,myUniquePlacePoint);
		}
public void PoissonSolver_genTable1 ( final doubleRefArray3 table, final ComplexRefArray2 ft, final int index, final int x, final int y, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * x;


		final int N = X10_TEMP2 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP5 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP5.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP5.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP5, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP6 = RX10_TEMP11;

				//async(X10_TEMP6)
					{

					final int X10_TEMP8 = pl.f0;


					final boolean X10_TEMP10 = X10_TEMP8 <= x;

					if(X10_TEMP10)
						{

						final Dist2 RX10_TEMP12 = ft.distValue;


						final Dist2 dFT = RX10_TEMP12;


						final Dist3 RX10_TEMP13 = table.distValue;


						final Dist3 dTable = RX10_TEMP13;


						final int X10_TEMP15 = 0;


						final Region1 rLocalFT1 = Program.X10Util_getLRank2D(dFT, X10_TEMP15,X10_TEMP6);


						final int X10_TEMP19 = 1;


						final Region1 rLocalT2 = Program.X10Util_getLRank3D(dTable, X10_TEMP19,X10_TEMP6);


						final Region2 X10_TEMP24 = Program.createNewRegion2AA(rLocalFT1, rLocalT2,X10_TEMP6);


						final int X10_TEMP25 = 0;


						final int RX10_TEMP18 = 1;


						int RX10_TEMP16 = X10_TEMP24.regSize;


						RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18;


						final int  RX10_TEMP17 = RX10_TEMP16+1;

						for(int RX10_TEMP14=0; RX10_TEMP14 < RX10_TEMP17; RX10_TEMP14++)
							{

							final int RX10_TEMP19 = RX10_TEMP14;


							final Point2 RX10_TEMP15 = Program.regionOrdinalPoint2(X10_TEMP24, RX10_TEMP19,X10_TEMP6);


							final int i = RX10_TEMP15.f0;


							final int j = RX10_TEMP15.f1;

							//async(X10_TEMP25)
								{

								final Point2 RX10_TEMP20 = new Point2(i, j,X10_TEMP25);
								
Program.globalPointerHashMap.get(X10_TEMP25).add(RX10_TEMP20.hashCode());


								final Dist2 RX10_TEMP21 = ft.distValue;


								final Region2 RX10_TEMP22 = RX10_TEMP21.dReg;


								final int RX10_TEMP23 = Program.searchPointInRegion2(RX10_TEMP22, RX10_TEMP20,X10_TEMP25);


								final int RX10_TEMP24 = 0;


								final boolean RX10_TEMP25 = RX10_TEMP23 < RX10_TEMP24;

								if(RX10_TEMP25)
									{

									String RX10_TEMP26 = "Array access index out of bounds";

									throw new RuntimeException(RX10_TEMP26);

									}

								final int RX10_TEMP27 = Program.getPlaceFromDist2(RX10_TEMP21, RX10_TEMP23,X10_TEMP25);


								final int RX10_TEMP29 = 0;


								final boolean RX10_TEMP30 = RX10_TEMP27 != RX10_TEMP29;

								if(RX10_TEMP30)
									{

									String RX10_TEMP28 = "Bad place access for array ft";

									throw new RuntimeException(RX10_TEMP28);

									}

								final Complex RX10_TEMP31 = Program.getRefArrayValue2Complex(ft, RX10_TEMP23,X10_TEMP25);


								final Complex X10_TEMP31 = RX10_TEMP31;


								final double X10_TEMP32 = Program.Complex_getReal(X10_TEMP31,X10_TEMP25);


								final double X10_TEMP35 = N * X10_TEMP32;


								final double X10_TEMP36 = X10_TEMP35;


								final Point3 RX10_TEMP32 = new Point3(i, j, index,X10_TEMP25);
								
Program.globalPointerHashMap.get(X10_TEMP25).add(RX10_TEMP32.hashCode());


								final Dist3 RX10_TEMP33 = table.distValue;


								final Region3 RX10_TEMP34 = RX10_TEMP33.dReg;


								final int RX10_TEMP35 = Program.searchPointInRegion3(RX10_TEMP34, RX10_TEMP32,X10_TEMP25);


								final int RX10_TEMP36 = 0;


								final boolean RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36;

								if(RX10_TEMP37)
									{

									String RX10_TEMP38 = "Array index out of bounds";

									throw new RuntimeException(RX10_TEMP38);

									}

								final int RX10_TEMP39 = Program.getPlaceFromDist3(RX10_TEMP33, RX10_TEMP35,X10_TEMP25);


								final int RX10_TEMP41 = 0;


								final boolean RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41;

								if(RX10_TEMP42)
									{

									String RX10_TEMP40 = "Bad place access for array table";

									throw new RuntimeException(RX10_TEMP40);

									}
								Program.setRefArrayValue3double(table, RX10_TEMP35, X10_TEMP36,X10_TEMP25);
								}
							}

						final int X10_TEMP37 = 0;


						final boolean X10_TEMP39 = true;

						if(X10_TEMP39)
							{

							final int X10_TEMP43 = 1;


							final int X10_TEMP41 = 1;


							final int X10_TEMP44 = y - X10_TEMP41;


							final Region1 X10_TEMP46 = Program.createNewRegion1R(X10_TEMP43, X10_TEMP44,myUniquePlacePoint);


							final int X10_TEMP47 = 0;


							final int RX10_TEMP47 = 1;


							int RX10_TEMP45 = X10_TEMP46.regSize;


							RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP47;


							final int  RX10_TEMP46 = RX10_TEMP45+1;

							for(int RX10_TEMP43=0; RX10_TEMP43 < RX10_TEMP46; RX10_TEMP43++)
								{

								final int RX10_TEMP48 = RX10_TEMP43;


								final Point1 RX10_TEMP44 = Program.regionOrdinalPoint1(X10_TEMP46, RX10_TEMP48,myUniquePlacePoint);


								final int i = RX10_TEMP44.f0;

								//async(X10_TEMP47)
									{

									final int X10_TEMP55 = 0;


									final int X10_TEMP52 = 2;


									final int X10_TEMP53 = X10_TEMP52 * y;


									final int X10_TEMP56 = X10_TEMP53 - i;


									final Point2 RX10_TEMP49 = new Point2(X10_TEMP55, X10_TEMP56,X10_TEMP47);
									
Program.globalPointerHashMap.get(X10_TEMP47).add(RX10_TEMP49.hashCode());


									final Dist2 RX10_TEMP50 = ft.distValue;


									final Region2 RX10_TEMP51 = RX10_TEMP50.dReg;


									final int RX10_TEMP52 = Program.searchPointInRegion2(RX10_TEMP51, RX10_TEMP49,X10_TEMP47);


									final int RX10_TEMP53 = 0;


									final boolean RX10_TEMP54 = RX10_TEMP52 < RX10_TEMP53;

									if(RX10_TEMP54)
										{

										String RX10_TEMP55 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP55);

										}

									final int RX10_TEMP56 = Program.getPlaceFromDist2(RX10_TEMP50, RX10_TEMP52,X10_TEMP47);


									final int RX10_TEMP58 = 0;


									final boolean RX10_TEMP59 = RX10_TEMP56 != RX10_TEMP58;

									if(RX10_TEMP59)
										{

										String RX10_TEMP57 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP57);

										}

									final Complex RX10_TEMP60 = Program.getRefArrayValue2Complex(ft, RX10_TEMP52,X10_TEMP47);


									final Complex X10_TEMP57 = RX10_TEMP60;


									final double X10_TEMP58 = Program.Complex_getReal(X10_TEMP57,X10_TEMP47);


									final double X10_TEMP61 = N * X10_TEMP58;


									final double X10_TEMP62 = X10_TEMP61;


									final Point3 RX10_TEMP61 = new Point3(x, i, index,X10_TEMP47);
									
Program.globalPointerHashMap.get(X10_TEMP47).add(RX10_TEMP61.hashCode());


									final Dist3 RX10_TEMP62 = table.distValue;


									final Region3 RX10_TEMP63 = RX10_TEMP62.dReg;


									final int RX10_TEMP64 = Program.searchPointInRegion3(RX10_TEMP63, RX10_TEMP61,X10_TEMP47);


									final int RX10_TEMP65 = 0;


									final boolean RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65;

									if(RX10_TEMP66)
										{

										String RX10_TEMP67 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP67);

										}

									final int RX10_TEMP68 = Program.getPlaceFromDist3(RX10_TEMP62, RX10_TEMP64,X10_TEMP47);


									final int RX10_TEMP70 = 0;


									final boolean RX10_TEMP71 = RX10_TEMP68 != RX10_TEMP70;

									if(RX10_TEMP71)
										{

										String RX10_TEMP69 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP69);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP64, X10_TEMP62,X10_TEMP47);
									}
								}

							final int X10_TEMP66 = 0;


							final int X10_TEMP69 = 0;


							final int X10_TEMP70 = 0;


							final Point2 RX10_TEMP72 = new Point2(X10_TEMP69, X10_TEMP70,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP72.hashCode());


							final Dist2 RX10_TEMP73 = ft.distValue;


							final Region2 RX10_TEMP74 = RX10_TEMP73.dReg;


							final int RX10_TEMP75 = Program.searchPointInRegion2(RX10_TEMP74, RX10_TEMP72,myUniquePlacePoint);


							final int RX10_TEMP76 = 0;


							final boolean RX10_TEMP77 = RX10_TEMP75 < RX10_TEMP76;

							if(RX10_TEMP77)
								{

								String RX10_TEMP78 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP78);

								}

							final int RX10_TEMP79 = Program.getPlaceFromDist2(RX10_TEMP73, RX10_TEMP75,myUniquePlacePoint);


							final int RX10_TEMP81 = 0;


							final boolean RX10_TEMP82 = RX10_TEMP79 != RX10_TEMP81;

							if(RX10_TEMP82)
								{

								String RX10_TEMP80 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP80);

								}

							final Complex RX10_TEMP83 = Program.getRefArrayValue2Complex(ft, RX10_TEMP75,myUniquePlacePoint);


							final Complex X10_TEMP71 = RX10_TEMP83;


							final double X10_TEMP72 = Program.Complex_getImag(X10_TEMP71,myUniquePlacePoint);


							final double X10_TEMP75 = N * X10_TEMP72;


							final double X10_TEMP76 = X10_TEMP75;


							final Point3 RX10_TEMP84 = new Point3(x, X10_TEMP66, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP84.hashCode());


							final Dist3 RX10_TEMP85 = table.distValue;


							final Region3 RX10_TEMP86 = RX10_TEMP85.dReg;


							final int RX10_TEMP87 = Program.searchPointInRegion3(RX10_TEMP86, RX10_TEMP84,myUniquePlacePoint);


							final int RX10_TEMP88 = 0;


							final boolean RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88;

							if(RX10_TEMP89)
								{

								String RX10_TEMP90 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP90);

								}

							final int RX10_TEMP91 = Program.getPlaceFromDist3(RX10_TEMP85, RX10_TEMP87,myUniquePlacePoint);


							final int RX10_TEMP93 = 0;


							final boolean RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93;

							if(RX10_TEMP94)
								{

								String RX10_TEMP92 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP92);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP87, X10_TEMP76,myUniquePlacePoint);

							final int X10_TEMP82 = 0;


							final Point2 RX10_TEMP95 = new Point2(X10_TEMP82, y,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP95.hashCode());


							final Dist2 RX10_TEMP96 = ft.distValue;


							final Region2 RX10_TEMP97 = RX10_TEMP96.dReg;


							final int RX10_TEMP98 = Program.searchPointInRegion2(RX10_TEMP97, RX10_TEMP95,myUniquePlacePoint);


							final int RX10_TEMP99 = 0;


							final boolean RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99;

							if(RX10_TEMP100)
								{

								String RX10_TEMP101 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP101);

								}

							final int RX10_TEMP102 = Program.getPlaceFromDist2(RX10_TEMP96, RX10_TEMP98,myUniquePlacePoint);


							final int RX10_TEMP104 = 0;


							final boolean RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104;

							if(RX10_TEMP105)
								{

								String RX10_TEMP103 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP103);

								}

							final Complex RX10_TEMP106 = Program.getRefArrayValue2Complex(ft, RX10_TEMP98,myUniquePlacePoint);


							final Complex X10_TEMP83 = RX10_TEMP106;


							final double X10_TEMP84 = Program.Complex_getImag(X10_TEMP83,myUniquePlacePoint);


							final double X10_TEMP87 = N * X10_TEMP84;


							final double X10_TEMP88 = X10_TEMP87;


							final Point3 RX10_TEMP107 = new Point3(x, y, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP107.hashCode());


							final Dist3 RX10_TEMP108 = table.distValue;


							final Region3 RX10_TEMP109 = RX10_TEMP108.dReg;


							final int RX10_TEMP110 = Program.searchPointInRegion3(RX10_TEMP109, RX10_TEMP107,myUniquePlacePoint);


							final int RX10_TEMP111 = 0;


							final boolean RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111;

							if(RX10_TEMP112)
								{

								String RX10_TEMP113 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP113);

								}

							final int RX10_TEMP114 = Program.getPlaceFromDist3(RX10_TEMP108, RX10_TEMP110,myUniquePlacePoint);


							final int RX10_TEMP116 = 0;


							final boolean RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116;

							if(RX10_TEMP117)
								{

								String RX10_TEMP115 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP115);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP110, X10_TEMP88,myUniquePlacePoint);
							}
						}
					}
				}
			}
		}
public void PoissonSolver_genTable2 ( final doubleRefArray3 table, final ComplexRefArray2 ft, final int index, final int x, final int y, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * x;


		final int N = X10_TEMP2 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP5 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP5.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP5.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP5, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP6 = RX10_TEMP11;

				//async(X10_TEMP6)
					{

					final int X10_TEMP8 = pl.f0;


					final boolean X10_TEMP10 = X10_TEMP8 <= x;

					if(X10_TEMP10)
						{

						final Dist2 RX10_TEMP12 = ft.distValue;


						final Dist2 dFT = RX10_TEMP12;


						final Dist3 RX10_TEMP13 = table.distValue;


						final Dist3 dTable = RX10_TEMP13;


						final int X10_TEMP15 = 0;


						final Region1 rLocalFT1 = Program.X10Util_getLRank2D(dFT, X10_TEMP15,X10_TEMP6);


						final int X10_TEMP19 = 1;


						final Region1 rLocalT2 = Program.X10Util_getLRank3D(dTable, X10_TEMP19,X10_TEMP6);


						final int X10_TEMP22 = 0;


						final int RX10_TEMP18 = 1;


						int RX10_TEMP16 = rLocalFT1.regSize;


						RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18;


						final int  RX10_TEMP17 = RX10_TEMP16+1;

						for(int RX10_TEMP14=0; RX10_TEMP14 < RX10_TEMP17; RX10_TEMP14++)
							{

							final int RX10_TEMP19 = RX10_TEMP14;


							final Point1 RX10_TEMP15 = Program.regionOrdinalPoint1(rLocalFT1, RX10_TEMP19,X10_TEMP6);


							final int i = RX10_TEMP15.f0;

							//async(X10_TEMP22)
								{

								final int X10_TEMP23 = 0;


								final boolean X10_TEMP25 = i > X10_TEMP23;

								if(X10_TEMP25)
									{

									final int X10_TEMP27 = 0;


									final int RX10_TEMP24 = 1;


									int RX10_TEMP22 = rLocalT2.regSize;


									RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


									final int  RX10_TEMP23 = RX10_TEMP22+1;

									for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
										{

										final int RX10_TEMP25 = RX10_TEMP20;


										final Point1 RX10_TEMP21 = Program.regionOrdinalPoint1(rLocalT2, RX10_TEMP25,X10_TEMP22);


										final int j = RX10_TEMP21.f0;

										//async(X10_TEMP27)
											{

											final Point2 RX10_TEMP26 = new Point2(i, j,X10_TEMP27);
											
Program.globalPointerHashMap.get(X10_TEMP27).add(RX10_TEMP26.hashCode());


											final Dist2 RX10_TEMP27 = ft.distValue;


											final Region2 RX10_TEMP28 = RX10_TEMP27.dReg;


											final int RX10_TEMP29 = Program.searchPointInRegion2(RX10_TEMP28, RX10_TEMP26,X10_TEMP27);


											final int RX10_TEMP30 = 0;


											final boolean RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30;

											if(RX10_TEMP31)
												{

												String RX10_TEMP32 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP32);

												}

											final int RX10_TEMP33 = Program.getPlaceFromDist2(RX10_TEMP27, RX10_TEMP29,X10_TEMP27);


											final int RX10_TEMP35 = 0;


											final boolean RX10_TEMP36 = RX10_TEMP33 != RX10_TEMP35;

											if(RX10_TEMP36)
												{

												String RX10_TEMP34 = "Bad place access for array ft";

												throw new RuntimeException(RX10_TEMP34);

												}

											final Complex RX10_TEMP37 = Program.getRefArrayValue2Complex(ft, RX10_TEMP29,X10_TEMP27);


											final Complex X10_TEMP33 = RX10_TEMP37;


											final double X10_TEMP34 = Program.Complex_getImag(X10_TEMP33,X10_TEMP27);


											final double X10_TEMP37 = N * X10_TEMP34;


											final double X10_TEMP38 = X10_TEMP37;


											final Point3 RX10_TEMP38 = new Point3(i, j, index,X10_TEMP27);
											
Program.globalPointerHashMap.get(X10_TEMP27).add(RX10_TEMP38.hashCode());


											final Dist3 RX10_TEMP39 = table.distValue;


											final Region3 RX10_TEMP40 = RX10_TEMP39.dReg;


											final int RX10_TEMP41 = Program.searchPointInRegion3(RX10_TEMP40, RX10_TEMP38,X10_TEMP27);


											final int RX10_TEMP42 = 0;


											final boolean RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42;

											if(RX10_TEMP43)
												{

												String RX10_TEMP44 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP44);

												}

											final int RX10_TEMP45 = Program.getPlaceFromDist3(RX10_TEMP39, RX10_TEMP41,X10_TEMP27);


											final int RX10_TEMP47 = 0;


											final boolean RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47;

											if(RX10_TEMP48)
												{

												String RX10_TEMP46 = "Bad place access for array table";

												throw new RuntimeException(RX10_TEMP46);

												}
											Program.setRefArrayValue3double(table, RX10_TEMP41, X10_TEMP38,X10_TEMP27);
											}
										}
									}
								}
							}

						final int X10_TEMP39 = 0;


						final boolean X10_TEMP41 = true;

						if(X10_TEMP41)
							{

							final int X10_TEMP45 = 1;


							final int X10_TEMP43 = 1;


							final int X10_TEMP46 = y - X10_TEMP43;


							final Region1 X10_TEMP48 = Program.createNewRegion1R(X10_TEMP45, X10_TEMP46,myUniquePlacePoint);


							final int X10_TEMP49 = 0;


							final int RX10_TEMP53 = 1;


							int RX10_TEMP51 = X10_TEMP48.regSize;


							RX10_TEMP51 = RX10_TEMP51 - RX10_TEMP53;


							final int  RX10_TEMP52 = RX10_TEMP51+1;

							for(int RX10_TEMP49=0; RX10_TEMP49 < RX10_TEMP52; RX10_TEMP49++)
								{

								final int RX10_TEMP54 = RX10_TEMP49;


								final Point1 RX10_TEMP50 = Program.regionOrdinalPoint1(X10_TEMP48, RX10_TEMP54,myUniquePlacePoint);


								final int i1 = RX10_TEMP50.f0;

								//async(X10_TEMP49)
									{

									final int X10_TEMP50 = 2;


									final int X10_TEMP51 = X10_TEMP50 * y;


									final int i2 = X10_TEMP51 - i1;


									final int X10_TEMP56 = 0;


									final int X10_TEMP59 = 0;


									final Point2 RX10_TEMP55 = new Point2(X10_TEMP59, i1,X10_TEMP49);
									
Program.globalPointerHashMap.get(X10_TEMP49).add(RX10_TEMP55.hashCode());


									final Dist2 RX10_TEMP56 = ft.distValue;


									final Region2 RX10_TEMP57 = RX10_TEMP56.dReg;


									final int RX10_TEMP58 = Program.searchPointInRegion2(RX10_TEMP57, RX10_TEMP55,X10_TEMP49);


									final int RX10_TEMP59 = 0;


									final boolean RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59;

									if(RX10_TEMP60)
										{

										String RX10_TEMP61 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP61);

										}

									final int RX10_TEMP62 = Program.getPlaceFromDist2(RX10_TEMP56, RX10_TEMP58,X10_TEMP49);


									final int RX10_TEMP64 = 0;


									final boolean RX10_TEMP65 = RX10_TEMP62 != RX10_TEMP64;

									if(RX10_TEMP65)
										{

										String RX10_TEMP63 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP63);

										}

									final Complex RX10_TEMP66 = Program.getRefArrayValue2Complex(ft, RX10_TEMP58,X10_TEMP49);


									final Complex X10_TEMP60 = RX10_TEMP66;


									final double X10_TEMP61 = Program.Complex_getReal(X10_TEMP60,X10_TEMP49);


									final double X10_TEMP64 = N * X10_TEMP61;


									final double X10_TEMP65 = X10_TEMP64;


									final Point3 RX10_TEMP67 = new Point3(X10_TEMP56, i1, index,X10_TEMP49);
									
Program.globalPointerHashMap.get(X10_TEMP49).add(RX10_TEMP67.hashCode());


									final Dist3 RX10_TEMP68 = table.distValue;


									final Region3 RX10_TEMP69 = RX10_TEMP68.dReg;


									final int RX10_TEMP70 = Program.searchPointInRegion3(RX10_TEMP69, RX10_TEMP67,X10_TEMP49);


									final int RX10_TEMP71 = 0;


									final boolean RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71;

									if(RX10_TEMP72)
										{

										String RX10_TEMP73 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP73);

										}

									final int RX10_TEMP74 = Program.getPlaceFromDist3(RX10_TEMP68, RX10_TEMP70,X10_TEMP49);


									final int RX10_TEMP76 = 0;


									final boolean RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76;

									if(RX10_TEMP77)
										{

										String RX10_TEMP75 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP75);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP70, X10_TEMP65,X10_TEMP49);

									final int X10_TEMP71 = 0;


									final Point2 RX10_TEMP78 = new Point2(X10_TEMP71, i2,X10_TEMP49);
									
Program.globalPointerHashMap.get(X10_TEMP49).add(RX10_TEMP78.hashCode());


									final Dist2 RX10_TEMP79 = ft.distValue;


									final Region2 RX10_TEMP80 = RX10_TEMP79.dReg;


									final int RX10_TEMP81 = Program.searchPointInRegion2(RX10_TEMP80, RX10_TEMP78,X10_TEMP49);


									final int RX10_TEMP82 = 0;


									final boolean RX10_TEMP83 = RX10_TEMP81 < RX10_TEMP82;

									if(RX10_TEMP83)
										{

										String RX10_TEMP84 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP84);

										}

									final int RX10_TEMP85 = Program.getPlaceFromDist2(RX10_TEMP79, RX10_TEMP81,X10_TEMP49);


									final int RX10_TEMP87 = 0;


									final boolean RX10_TEMP88 = RX10_TEMP85 != RX10_TEMP87;

									if(RX10_TEMP88)
										{

										String RX10_TEMP86 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP86);

										}

									final Complex RX10_TEMP89 = Program.getRefArrayValue2Complex(ft, RX10_TEMP81,X10_TEMP49);


									final Complex X10_TEMP72 = RX10_TEMP89;


									final double X10_TEMP73 = Program.Complex_getReal(X10_TEMP72,X10_TEMP49);


									final double X10_TEMP76 = N * X10_TEMP73;


									final double X10_TEMP77 = X10_TEMP76;


									final Point3 RX10_TEMP90 = new Point3(x, i1, index,X10_TEMP49);
									
Program.globalPointerHashMap.get(X10_TEMP49).add(RX10_TEMP90.hashCode());


									final Dist3 RX10_TEMP91 = table.distValue;


									final Region3 RX10_TEMP92 = RX10_TEMP91.dReg;


									final int RX10_TEMP93 = Program.searchPointInRegion3(RX10_TEMP92, RX10_TEMP90,X10_TEMP49);


									final int RX10_TEMP94 = 0;


									final boolean RX10_TEMP95 = RX10_TEMP93 < RX10_TEMP94;

									if(RX10_TEMP95)
										{

										String RX10_TEMP96 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP96);

										}

									final int RX10_TEMP97 = Program.getPlaceFromDist3(RX10_TEMP91, RX10_TEMP93,X10_TEMP49);


									final int RX10_TEMP99 = 0;


									final boolean RX10_TEMP100 = RX10_TEMP97 != RX10_TEMP99;

									if(RX10_TEMP100)
										{

										String RX10_TEMP98 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP98);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP93, X10_TEMP77,X10_TEMP49);
									}
								}

							final int X10_TEMP81 = 0;


							final int X10_TEMP82 = 0;


							final int X10_TEMP85 = 0;


							final int X10_TEMP86 = 0;


							final Point2 RX10_TEMP101 = new Point2(X10_TEMP85, X10_TEMP86,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP101.hashCode());


							final Dist2 RX10_TEMP102 = ft.distValue;


							final Region2 RX10_TEMP103 = RX10_TEMP102.dReg;


							final int RX10_TEMP104 = Program.searchPointInRegion2(RX10_TEMP103, RX10_TEMP101,myUniquePlacePoint);


							final int RX10_TEMP105 = 0;


							final boolean RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105;

							if(RX10_TEMP106)
								{

								String RX10_TEMP107 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP107);

								}

							final int RX10_TEMP108 = Program.getPlaceFromDist2(RX10_TEMP102, RX10_TEMP104,myUniquePlacePoint);


							final int RX10_TEMP110 = 0;


							final boolean RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110;

							if(RX10_TEMP111)
								{

								String RX10_TEMP109 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP109);

								}

							final Complex RX10_TEMP112 = Program.getRefArrayValue2Complex(ft, RX10_TEMP104,myUniquePlacePoint);


							final Complex X10_TEMP87 = RX10_TEMP112;


							final double X10_TEMP88 = Program.Complex_getReal(X10_TEMP87,myUniquePlacePoint);


							final double X10_TEMP91 = N * X10_TEMP88;


							final double X10_TEMP92 = X10_TEMP91;


							final Point3 RX10_TEMP113 = new Point3(X10_TEMP81, X10_TEMP82, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP113.hashCode());


							final Dist3 RX10_TEMP114 = table.distValue;


							final Region3 RX10_TEMP115 = RX10_TEMP114.dReg;


							final int RX10_TEMP116 = Program.searchPointInRegion3(RX10_TEMP115, RX10_TEMP113,myUniquePlacePoint);


							final int RX10_TEMP117 = 0;


							final boolean RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117;

							if(RX10_TEMP118)
								{

								String RX10_TEMP119 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP119);

								}

							final int RX10_TEMP120 = Program.getPlaceFromDist3(RX10_TEMP114, RX10_TEMP116,myUniquePlacePoint);


							final int RX10_TEMP122 = 0;


							final boolean RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122;

							if(RX10_TEMP123)
								{

								String RX10_TEMP121 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP121);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP116, X10_TEMP92,myUniquePlacePoint);

							final int X10_TEMP96 = 0;


							final int X10_TEMP99 = 0;


							final int X10_TEMP100 = 0;


							final Point2 RX10_TEMP124 = new Point2(X10_TEMP99, X10_TEMP100,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP124.hashCode());


							final Dist2 RX10_TEMP125 = ft.distValue;


							final Region2 RX10_TEMP126 = RX10_TEMP125.dReg;


							final int RX10_TEMP127 = Program.searchPointInRegion2(RX10_TEMP126, RX10_TEMP124,myUniquePlacePoint);


							final int RX10_TEMP128 = 0;


							final boolean RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128;

							if(RX10_TEMP129)
								{

								String RX10_TEMP130 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP130);

								}

							final int RX10_TEMP131 = Program.getPlaceFromDist2(RX10_TEMP125, RX10_TEMP127,myUniquePlacePoint);


							final int RX10_TEMP133 = 0;


							final boolean RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133;

							if(RX10_TEMP134)
								{

								String RX10_TEMP132 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP132);

								}

							final Complex RX10_TEMP135 = Program.getRefArrayValue2Complex(ft, RX10_TEMP127,myUniquePlacePoint);


							final Complex X10_TEMP101 = RX10_TEMP135;


							final double X10_TEMP102 = Program.Complex_getImag(X10_TEMP101,myUniquePlacePoint);


							final double X10_TEMP105 = N * X10_TEMP102;


							final double X10_TEMP106 = X10_TEMP105;


							final Point3 RX10_TEMP136 = new Point3(x, X10_TEMP96, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP136.hashCode());


							final Dist3 RX10_TEMP137 = table.distValue;


							final Region3 RX10_TEMP138 = RX10_TEMP137.dReg;


							final int RX10_TEMP139 = Program.searchPointInRegion3(RX10_TEMP138, RX10_TEMP136,myUniquePlacePoint);


							final int RX10_TEMP140 = 0;


							final boolean RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140;

							if(RX10_TEMP141)
								{

								String RX10_TEMP142 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP142);

								}

							final int RX10_TEMP143 = Program.getPlaceFromDist3(RX10_TEMP137, RX10_TEMP139,myUniquePlacePoint);


							final int RX10_TEMP145 = 0;


							final boolean RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145;

							if(RX10_TEMP146)
								{

								String RX10_TEMP144 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP144);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP139, X10_TEMP106,myUniquePlacePoint);

							final int X10_TEMP110 = 0;


							final int X10_TEMP113 = 0;


							final Point2 RX10_TEMP147 = new Point2(X10_TEMP113, y,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP147.hashCode());


							final Dist2 RX10_TEMP148 = ft.distValue;


							final Region2 RX10_TEMP149 = RX10_TEMP148.dReg;


							final int RX10_TEMP150 = Program.searchPointInRegion2(RX10_TEMP149, RX10_TEMP147,myUniquePlacePoint);


							final int RX10_TEMP151 = 0;


							final boolean RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151;

							if(RX10_TEMP152)
								{

								String RX10_TEMP153 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP153);

								}

							final int RX10_TEMP154 = Program.getPlaceFromDist2(RX10_TEMP148, RX10_TEMP150,myUniquePlacePoint);


							final int RX10_TEMP156 = 0;


							final boolean RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156;

							if(RX10_TEMP157)
								{

								String RX10_TEMP155 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP155);

								}

							final Complex RX10_TEMP158 = Program.getRefArrayValue2Complex(ft, RX10_TEMP150,myUniquePlacePoint);


							final Complex X10_TEMP114 = RX10_TEMP158;


							final double X10_TEMP115 = Program.Complex_getReal(X10_TEMP114,myUniquePlacePoint);


							final double X10_TEMP118 = N * X10_TEMP115;


							final double X10_TEMP119 = X10_TEMP118;


							final Point3 RX10_TEMP159 = new Point3(X10_TEMP110, y, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP159.hashCode());


							final Dist3 RX10_TEMP160 = table.distValue;


							final Region3 RX10_TEMP161 = RX10_TEMP160.dReg;


							final int RX10_TEMP162 = Program.searchPointInRegion3(RX10_TEMP161, RX10_TEMP159,myUniquePlacePoint);


							final int RX10_TEMP163 = 0;


							final boolean RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163;

							if(RX10_TEMP164)
								{

								String RX10_TEMP165 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP165);

								}

							final int RX10_TEMP166 = Program.getPlaceFromDist3(RX10_TEMP160, RX10_TEMP162,myUniquePlacePoint);


							final int RX10_TEMP168 = 0;


							final boolean RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168;

							if(RX10_TEMP169)
								{

								String RX10_TEMP167 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP167);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP162, X10_TEMP119,myUniquePlacePoint);

							final int X10_TEMP125 = 0;


							final Point2 RX10_TEMP170 = new Point2(X10_TEMP125, y,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP170.hashCode());


							final Dist2 RX10_TEMP171 = ft.distValue;


							final Region2 RX10_TEMP172 = RX10_TEMP171.dReg;


							final int RX10_TEMP173 = Program.searchPointInRegion2(RX10_TEMP172, RX10_TEMP170,myUniquePlacePoint);


							final int RX10_TEMP174 = 0;


							final boolean RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174;

							if(RX10_TEMP175)
								{

								String RX10_TEMP176 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP176);

								}

							final int RX10_TEMP177 = Program.getPlaceFromDist2(RX10_TEMP171, RX10_TEMP173,myUniquePlacePoint);


							final int RX10_TEMP179 = 0;


							final boolean RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179;

							if(RX10_TEMP180)
								{

								String RX10_TEMP178 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP178);

								}

							final Complex RX10_TEMP181 = Program.getRefArrayValue2Complex(ft, RX10_TEMP173,myUniquePlacePoint);


							final Complex X10_TEMP126 = RX10_TEMP181;


							final double X10_TEMP127 = Program.Complex_getImag(X10_TEMP126,myUniquePlacePoint);


							final double X10_TEMP130 = N * X10_TEMP127;


							final double X10_TEMP131 = X10_TEMP130;


							final Point3 RX10_TEMP182 = new Point3(x, y, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP182.hashCode());


							final Dist3 RX10_TEMP183 = table.distValue;


							final Region3 RX10_TEMP184 = RX10_TEMP183.dReg;


							final int RX10_TEMP185 = Program.searchPointInRegion3(RX10_TEMP184, RX10_TEMP182,myUniquePlacePoint);


							final int RX10_TEMP186 = 0;


							final boolean RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186;

							if(RX10_TEMP187)
								{

								String RX10_TEMP188 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP188);

								}

							final int RX10_TEMP189 = Program.getPlaceFromDist3(RX10_TEMP183, RX10_TEMP185,myUniquePlacePoint);


							final int RX10_TEMP191 = 0;


							final boolean RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191;

							if(RX10_TEMP192)
								{

								String RX10_TEMP190 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP190);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP185, X10_TEMP131,myUniquePlacePoint);
							}
						}
					}
				}
			}
		}
public void PoissonSolver_genTable3 ( final doubleRefArray3 table, final ComplexRefArray2 ft, final int index, final int x, final int y, int myUniquePlacePoint)
		{

		final int X10_TEMP1 = 4;


		final int X10_TEMP2 = X10_TEMP1 * x;


		final int N = X10_TEMP2 * y;

		/*FINISH
*/			{

			final Dist1 X10_TEMP5 = Program.getUniqueDist(myUniquePlacePoint);


			final Region1 RX10_TEMP1 = X10_TEMP5.dReg;


			final int RX10_TEMP4 = 1;


			int RX10_TEMP2 = RX10_TEMP1.regSize;


			RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4;


			final int  RX10_TEMP3 = RX10_TEMP2+1;

			for(int RX10_TEMP0=0; RX10_TEMP0 < RX10_TEMP3; RX10_TEMP0++)
				{

				final int RX10_TEMP5 = RX10_TEMP0;


				final Point1 pl = Program.regionOrdinalPoint1(RX10_TEMP1, RX10_TEMP5,myUniquePlacePoint);


				final Region1 RX10_TEMP6 = X10_TEMP5.dReg;


				final int RX10_TEMP7 = Program.searchPointInRegion1(RX10_TEMP6, pl,myUniquePlacePoint);


				final int RX10_TEMP8 = 0;


				final boolean RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8;

				if(RX10_TEMP9)
					{

					final String RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5.";

					throw new RuntimeException(RX10_TEMP10);

					}

				final int RX10_TEMP11 = Program.getPlaceFromDist1(X10_TEMP5, RX10_TEMP7,myUniquePlacePoint);


				final int X10_TEMP6 = RX10_TEMP11;

				//async(X10_TEMP6)
					{

					final int X10_TEMP8 = pl.f0;


					final boolean X10_TEMP10 = X10_TEMP8 <= x;

					if(X10_TEMP10)
						{

						final Dist2 RX10_TEMP12 = ft.distValue;


						final Dist2 dFT = RX10_TEMP12;


						final Dist3 RX10_TEMP13 = table.distValue;


						final Dist3 dTable = RX10_TEMP13;


						final int X10_TEMP15 = 0;


						final Region1 rLocalFT1 = Program.X10Util_getLRank2D(dFT, X10_TEMP15,X10_TEMP6);


						final int X10_TEMP19 = 1;


						final Region1 rLocalT2 = Program.X10Util_getLRank3D(dTable, X10_TEMP19,X10_TEMP6);


						final int X10_TEMP22 = 0;


						final int RX10_TEMP18 = 1;


						int RX10_TEMP16 = rLocalFT1.regSize;


						RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18;


						final int  RX10_TEMP17 = RX10_TEMP16+1;

						for(int RX10_TEMP14=0; RX10_TEMP14 < RX10_TEMP17; RX10_TEMP14++)
							{

							final int RX10_TEMP19 = RX10_TEMP14;


							final Point1 RX10_TEMP15 = Program.regionOrdinalPoint1(rLocalFT1, RX10_TEMP19,X10_TEMP6);


							final int i = RX10_TEMP15.f0;

							//async(X10_TEMP22)
								{

								final int X10_TEMP23 = 0;


								final boolean X10_TEMP25 = i > X10_TEMP23;

								if(X10_TEMP25)
									{

									final int X10_TEMP29 = 1;


									final int X10_TEMP27 = 1;


									final int X10_TEMP30 = y - X10_TEMP27;


									final Region1 X10_TEMP32 = Program.createNewRegion1R(X10_TEMP29, X10_TEMP30,X10_TEMP22);


									final int X10_TEMP33 = 0;


									final int RX10_TEMP24 = 1;


									int RX10_TEMP22 = X10_TEMP32.regSize;


									RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24;


									final int  RX10_TEMP23 = RX10_TEMP22+1;

									for(int RX10_TEMP20=0; RX10_TEMP20 < RX10_TEMP23; RX10_TEMP20++)
										{

										final int RX10_TEMP25 = RX10_TEMP20;


										final Point1 RX10_TEMP21 = Program.regionOrdinalPoint1(X10_TEMP32, RX10_TEMP25,X10_TEMP22);


										final int j = RX10_TEMP21.f0;

										//async(X10_TEMP33)
											{

											final Point2 RX10_TEMP26 = new Point2(i, j,X10_TEMP33);
											
Program.globalPointerHashMap.get(X10_TEMP33).add(RX10_TEMP26.hashCode());


											final Dist2 RX10_TEMP27 = ft.distValue;


											final Region2 RX10_TEMP28 = RX10_TEMP27.dReg;


											final int RX10_TEMP29 = Program.searchPointInRegion2(RX10_TEMP28, RX10_TEMP26,X10_TEMP33);


											final int RX10_TEMP30 = 0;


											final boolean RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30;

											if(RX10_TEMP31)
												{

												String RX10_TEMP32 = "Array access index out of bounds";

												throw new RuntimeException(RX10_TEMP32);

												}

											final int RX10_TEMP33 = Program.getPlaceFromDist2(RX10_TEMP27, RX10_TEMP29,X10_TEMP33);


											final int RX10_TEMP35 = 0;


											final boolean RX10_TEMP36 = RX10_TEMP33 != RX10_TEMP35;

											if(RX10_TEMP36)
												{

												String RX10_TEMP34 = "Bad place access for array ft";

												throw new RuntimeException(RX10_TEMP34);

												}

											final Complex RX10_TEMP37 = Program.getRefArrayValue2Complex(ft, RX10_TEMP29,X10_TEMP33);


											final Complex X10_TEMP39 = RX10_TEMP37;


											final double X10_TEMP40 = Program.Complex_getImag(X10_TEMP39,X10_TEMP33);


											final double X10_TEMP43 = N * X10_TEMP40;


											final double X10_TEMP44 = X10_TEMP43;


											final Point3 RX10_TEMP38 = new Point3(i, j, index,X10_TEMP33);
											
Program.globalPointerHashMap.get(X10_TEMP33).add(RX10_TEMP38.hashCode());


											final Dist3 RX10_TEMP39 = table.distValue;


											final Region3 RX10_TEMP40 = RX10_TEMP39.dReg;


											final int RX10_TEMP41 = Program.searchPointInRegion3(RX10_TEMP40, RX10_TEMP38,X10_TEMP33);


											final int RX10_TEMP42 = 0;


											final boolean RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42;

											if(RX10_TEMP43)
												{

												String RX10_TEMP44 = "Array index out of bounds";

												throw new RuntimeException(RX10_TEMP44);

												}

											final int RX10_TEMP45 = Program.getPlaceFromDist3(RX10_TEMP39, RX10_TEMP41,X10_TEMP33);


											final int RX10_TEMP47 = 0;


											final boolean RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47;

											if(RX10_TEMP48)
												{

												String RX10_TEMP46 = "Bad place access for array table";

												throw new RuntimeException(RX10_TEMP46);

												}
											Program.setRefArrayValue3double(table, RX10_TEMP41, X10_TEMP44,X10_TEMP33);
											}
										}

									final int X10_TEMP48 = 0;


									final int X10_TEMP51 = 0;


									final Point2 RX10_TEMP49 = new Point2(i, X10_TEMP51,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP49.hashCode());


									final Dist2 RX10_TEMP50 = ft.distValue;


									final Region2 RX10_TEMP51 = RX10_TEMP50.dReg;


									final int RX10_TEMP52 = Program.searchPointInRegion2(RX10_TEMP51, RX10_TEMP49,myUniquePlacePoint);


									final int RX10_TEMP53 = 0;


									final boolean RX10_TEMP54 = RX10_TEMP52 < RX10_TEMP53;

									if(RX10_TEMP54)
										{

										String RX10_TEMP55 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP55);

										}

									final int RX10_TEMP56 = Program.getPlaceFromDist2(RX10_TEMP50, RX10_TEMP52,myUniquePlacePoint);


									final int RX10_TEMP58 = 0;


									final boolean RX10_TEMP59 = RX10_TEMP56 != RX10_TEMP58;

									if(RX10_TEMP59)
										{

										String RX10_TEMP57 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP57);

										}

									final Complex RX10_TEMP60 = Program.getRefArrayValue2Complex(ft, RX10_TEMP52,myUniquePlacePoint);


									final Complex X10_TEMP52 = RX10_TEMP60;


									final double X10_TEMP53 = Program.Complex_getReal(X10_TEMP52,myUniquePlacePoint);


									final double X10_TEMP56 = N * X10_TEMP53;


									final double X10_TEMP57 = X10_TEMP56;


									final Point3 RX10_TEMP61 = new Point3(i, X10_TEMP48, index,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP61.hashCode());


									final Dist3 RX10_TEMP62 = table.distValue;


									final Region3 RX10_TEMP63 = RX10_TEMP62.dReg;


									final int RX10_TEMP64 = Program.searchPointInRegion3(RX10_TEMP63, RX10_TEMP61,myUniquePlacePoint);


									final int RX10_TEMP65 = 0;


									final boolean RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65;

									if(RX10_TEMP66)
										{

										String RX10_TEMP67 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP67);

										}

									final int RX10_TEMP68 = Program.getPlaceFromDist3(RX10_TEMP62, RX10_TEMP64,myUniquePlacePoint);


									final int RX10_TEMP70 = 0;


									final boolean RX10_TEMP71 = RX10_TEMP68 != RX10_TEMP70;

									if(RX10_TEMP71)
										{

										String RX10_TEMP69 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP69);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP64, X10_TEMP57,myUniquePlacePoint);

									final Point2 RX10_TEMP72 = new Point2(i, y,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP72.hashCode());


									final Dist2 RX10_TEMP73 = ft.distValue;


									final Region2 RX10_TEMP74 = RX10_TEMP73.dReg;


									final int RX10_TEMP75 = Program.searchPointInRegion2(RX10_TEMP74, RX10_TEMP72,myUniquePlacePoint);


									final int RX10_TEMP76 = 0;


									final boolean RX10_TEMP77 = RX10_TEMP75 < RX10_TEMP76;

									if(RX10_TEMP77)
										{

										String RX10_TEMP78 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP78);

										}

									final int RX10_TEMP79 = Program.getPlaceFromDist2(RX10_TEMP73, RX10_TEMP75,myUniquePlacePoint);


									final int RX10_TEMP81 = 0;


									final boolean RX10_TEMP82 = RX10_TEMP79 != RX10_TEMP81;

									if(RX10_TEMP82)
										{

										String RX10_TEMP80 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP80);

										}

									final Complex RX10_TEMP83 = Program.getRefArrayValue2Complex(ft, RX10_TEMP75,myUniquePlacePoint);


									final Complex X10_TEMP63 = RX10_TEMP83;


									final double X10_TEMP64 = Program.Complex_getReal(X10_TEMP63,myUniquePlacePoint);


									final double X10_TEMP67 = N * X10_TEMP64;


									final double X10_TEMP68 = X10_TEMP67;


									final Point3 RX10_TEMP84 = new Point3(i, y, index,myUniquePlacePoint);
									
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP84.hashCode());


									final Dist3 RX10_TEMP85 = table.distValue;


									final Region3 RX10_TEMP86 = RX10_TEMP85.dReg;


									final int RX10_TEMP87 = Program.searchPointInRegion3(RX10_TEMP86, RX10_TEMP84,myUniquePlacePoint);


									final int RX10_TEMP88 = 0;


									final boolean RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88;

									if(RX10_TEMP89)
										{

										String RX10_TEMP90 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP90);

										}

									final int RX10_TEMP91 = Program.getPlaceFromDist3(RX10_TEMP85, RX10_TEMP87,myUniquePlacePoint);


									final int RX10_TEMP93 = 0;


									final boolean RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93;

									if(RX10_TEMP94)
										{

										String RX10_TEMP92 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP92);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP87, X10_TEMP68,myUniquePlacePoint);
									}
								}
							}

						final int X10_TEMP69 = 0;


						final boolean X10_TEMP71 = true;

						if(X10_TEMP71)
							{

							final int X10_TEMP75 = 1;


							final int X10_TEMP73 = 1;


							final int X10_TEMP76 = y - X10_TEMP73;


							final Region1 X10_TEMP78 = Program.createNewRegion1R(X10_TEMP75, X10_TEMP76,myUniquePlacePoint);


							final int X10_TEMP79 = 0;


							final int RX10_TEMP99 = 1;


							int RX10_TEMP97 = X10_TEMP78.regSize;


							RX10_TEMP97 = RX10_TEMP97 - RX10_TEMP99;


							final int  RX10_TEMP98 = RX10_TEMP97+1;

							for(int RX10_TEMP95=0; RX10_TEMP95 < RX10_TEMP98; RX10_TEMP95++)
								{

								final int RX10_TEMP100 = RX10_TEMP95;


								final Point1 RX10_TEMP96 = Program.regionOrdinalPoint1(X10_TEMP78, RX10_TEMP100,myUniquePlacePoint);


								final int i1 = RX10_TEMP96.f0;

								//async(X10_TEMP79)
									{

									final int X10_TEMP80 = 2;


									final int X10_TEMP81 = X10_TEMP80 * y;


									final int i2 = X10_TEMP81 - i1;


									final int X10_TEMP86 = 0;


									final int X10_TEMP89 = 0;


									final Point2 RX10_TEMP101 = new Point2(X10_TEMP89, i1,X10_TEMP79);
									
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP101.hashCode());


									final Dist2 RX10_TEMP102 = ft.distValue;


									final Region2 RX10_TEMP103 = RX10_TEMP102.dReg;


									final int RX10_TEMP104 = Program.searchPointInRegion2(RX10_TEMP103, RX10_TEMP101,X10_TEMP79);


									final int RX10_TEMP105 = 0;


									final boolean RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105;

									if(RX10_TEMP106)
										{

										String RX10_TEMP107 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP107);

										}

									final int RX10_TEMP108 = Program.getPlaceFromDist2(RX10_TEMP102, RX10_TEMP104,X10_TEMP79);


									final int RX10_TEMP110 = 0;


									final boolean RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110;

									if(RX10_TEMP111)
										{

										String RX10_TEMP109 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP109);

										}

									final Complex RX10_TEMP112 = Program.getRefArrayValue2Complex(ft, RX10_TEMP104,X10_TEMP79);


									final Complex X10_TEMP90 = RX10_TEMP112;


									final double X10_TEMP91 = Program.Complex_getImag(X10_TEMP90,X10_TEMP79);


									final double X10_TEMP94 = N * X10_TEMP91;


									final double X10_TEMP95 = X10_TEMP94;


									final Point3 RX10_TEMP113 = new Point3(X10_TEMP86, i1, index,X10_TEMP79);
									
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP113.hashCode());


									final Dist3 RX10_TEMP114 = table.distValue;


									final Region3 RX10_TEMP115 = RX10_TEMP114.dReg;


									final int RX10_TEMP116 = Program.searchPointInRegion3(RX10_TEMP115, RX10_TEMP113,X10_TEMP79);


									final int RX10_TEMP117 = 0;


									final boolean RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117;

									if(RX10_TEMP118)
										{

										String RX10_TEMP119 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP119);

										}

									final int RX10_TEMP120 = Program.getPlaceFromDist3(RX10_TEMP114, RX10_TEMP116,X10_TEMP79);


									final int RX10_TEMP122 = 0;


									final boolean RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122;

									if(RX10_TEMP123)
										{

										String RX10_TEMP121 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP121);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP116, X10_TEMP95,X10_TEMP79);

									final int X10_TEMP101 = 0;


									final Point2 RX10_TEMP124 = new Point2(X10_TEMP101, i2,X10_TEMP79);
									
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP124.hashCode());


									final Dist2 RX10_TEMP125 = ft.distValue;


									final Region2 RX10_TEMP126 = RX10_TEMP125.dReg;


									final int RX10_TEMP127 = Program.searchPointInRegion2(RX10_TEMP126, RX10_TEMP124,X10_TEMP79);


									final int RX10_TEMP128 = 0;


									final boolean RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128;

									if(RX10_TEMP129)
										{

										String RX10_TEMP130 = "Array access index out of bounds";

										throw new RuntimeException(RX10_TEMP130);

										}

									final int RX10_TEMP131 = Program.getPlaceFromDist2(RX10_TEMP125, RX10_TEMP127,X10_TEMP79);


									final int RX10_TEMP133 = 0;


									final boolean RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133;

									if(RX10_TEMP134)
										{

										String RX10_TEMP132 = "Bad place access for array ft";

										throw new RuntimeException(RX10_TEMP132);

										}

									final Complex RX10_TEMP135 = Program.getRefArrayValue2Complex(ft, RX10_TEMP127,X10_TEMP79);


									final Complex X10_TEMP102 = RX10_TEMP135;


									final double X10_TEMP103 = Program.Complex_getImag(X10_TEMP102,X10_TEMP79);


									final double X10_TEMP106 = N * X10_TEMP103;


									final double X10_TEMP107 = X10_TEMP106;


									final Point3 RX10_TEMP136 = new Point3(x, i1, index,X10_TEMP79);
									
Program.globalPointerHashMap.get(X10_TEMP79).add(RX10_TEMP136.hashCode());


									final Dist3 RX10_TEMP137 = table.distValue;


									final Region3 RX10_TEMP138 = RX10_TEMP137.dReg;


									final int RX10_TEMP139 = Program.searchPointInRegion3(RX10_TEMP138, RX10_TEMP136,X10_TEMP79);


									final int RX10_TEMP140 = 0;


									final boolean RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140;

									if(RX10_TEMP141)
										{

										String RX10_TEMP142 = "Array index out of bounds";

										throw new RuntimeException(RX10_TEMP142);

										}

									final int RX10_TEMP143 = Program.getPlaceFromDist3(RX10_TEMP137, RX10_TEMP139,X10_TEMP79);


									final int RX10_TEMP145 = 0;


									final boolean RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145;

									if(RX10_TEMP146)
										{

										String RX10_TEMP144 = "Bad place access for array table";

										throw new RuntimeException(RX10_TEMP144);

										}
									Program.setRefArrayValue3double(table, RX10_TEMP139, X10_TEMP107,X10_TEMP79);
									}
								}

							final int X10_TEMP111 = 0;


							final int X10_TEMP112 = 0;


							final int X10_TEMP115 = 0;


							final int X10_TEMP116 = 0;


							final Point2 RX10_TEMP147 = new Point2(X10_TEMP115, X10_TEMP116,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP147.hashCode());


							final Dist2 RX10_TEMP148 = ft.distValue;


							final Region2 RX10_TEMP149 = RX10_TEMP148.dReg;


							final int RX10_TEMP150 = Program.searchPointInRegion2(RX10_TEMP149, RX10_TEMP147,myUniquePlacePoint);


							final int RX10_TEMP151 = 0;


							final boolean RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151;

							if(RX10_TEMP152)
								{

								String RX10_TEMP153 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP153);

								}

							final int RX10_TEMP154 = Program.getPlaceFromDist2(RX10_TEMP148, RX10_TEMP150,myUniquePlacePoint);


							final int RX10_TEMP156 = 0;


							final boolean RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156;

							if(RX10_TEMP157)
								{

								String RX10_TEMP155 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP155);

								}

							final Complex RX10_TEMP158 = Program.getRefArrayValue2Complex(ft, RX10_TEMP150,myUniquePlacePoint);


							final Complex X10_TEMP117 = RX10_TEMP158;


							final double X10_TEMP118 = Program.Complex_getReal(X10_TEMP117,myUniquePlacePoint);


							final double X10_TEMP121 = N * X10_TEMP118;


							final double X10_TEMP122 = X10_TEMP121;


							final Point3 RX10_TEMP159 = new Point3(X10_TEMP111, X10_TEMP112, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP159.hashCode());


							final Dist3 RX10_TEMP160 = table.distValue;


							final Region3 RX10_TEMP161 = RX10_TEMP160.dReg;


							final int RX10_TEMP162 = Program.searchPointInRegion3(RX10_TEMP161, RX10_TEMP159,myUniquePlacePoint);


							final int RX10_TEMP163 = 0;


							final boolean RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163;

							if(RX10_TEMP164)
								{

								String RX10_TEMP165 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP165);

								}

							final int RX10_TEMP166 = Program.getPlaceFromDist3(RX10_TEMP160, RX10_TEMP162,myUniquePlacePoint);


							final int RX10_TEMP168 = 0;


							final boolean RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168;

							if(RX10_TEMP169)
								{

								String RX10_TEMP167 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP167);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP162, X10_TEMP122,myUniquePlacePoint);

							final int X10_TEMP126 = 0;


							final int X10_TEMP129 = 0;


							final int X10_TEMP130 = 0;


							final Point2 RX10_TEMP170 = new Point2(X10_TEMP129, X10_TEMP130,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP170.hashCode());


							final Dist2 RX10_TEMP171 = ft.distValue;


							final Region2 RX10_TEMP172 = RX10_TEMP171.dReg;


							final int RX10_TEMP173 = Program.searchPointInRegion2(RX10_TEMP172, RX10_TEMP170,myUniquePlacePoint);


							final int RX10_TEMP174 = 0;


							final boolean RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174;

							if(RX10_TEMP175)
								{

								String RX10_TEMP176 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP176);

								}

							final int RX10_TEMP177 = Program.getPlaceFromDist2(RX10_TEMP171, RX10_TEMP173,myUniquePlacePoint);


							final int RX10_TEMP179 = 0;


							final boolean RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179;

							if(RX10_TEMP180)
								{

								String RX10_TEMP178 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP178);

								}

							final Complex RX10_TEMP181 = Program.getRefArrayValue2Complex(ft, RX10_TEMP173,myUniquePlacePoint);


							final Complex X10_TEMP131 = RX10_TEMP181;


							final double X10_TEMP132 = Program.Complex_getImag(X10_TEMP131,myUniquePlacePoint);


							final double X10_TEMP135 = N * X10_TEMP132;


							final double X10_TEMP136 = X10_TEMP135;


							final Point3 RX10_TEMP182 = new Point3(x, X10_TEMP126, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP182.hashCode());


							final Dist3 RX10_TEMP183 = table.distValue;


							final Region3 RX10_TEMP184 = RX10_TEMP183.dReg;


							final int RX10_TEMP185 = Program.searchPointInRegion3(RX10_TEMP184, RX10_TEMP182,myUniquePlacePoint);


							final int RX10_TEMP186 = 0;


							final boolean RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186;

							if(RX10_TEMP187)
								{

								String RX10_TEMP188 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP188);

								}

							final int RX10_TEMP189 = Program.getPlaceFromDist3(RX10_TEMP183, RX10_TEMP185,myUniquePlacePoint);


							final int RX10_TEMP191 = 0;


							final boolean RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191;

							if(RX10_TEMP192)
								{

								String RX10_TEMP190 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP190);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP185, X10_TEMP136,myUniquePlacePoint);

							final int X10_TEMP140 = 0;


							final int X10_TEMP143 = 0;


							final Point2 RX10_TEMP193 = new Point2(X10_TEMP143, y,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP193.hashCode());


							final Dist2 RX10_TEMP194 = ft.distValue;


							final Region2 RX10_TEMP195 = RX10_TEMP194.dReg;


							final int RX10_TEMP196 = Program.searchPointInRegion2(RX10_TEMP195, RX10_TEMP193,myUniquePlacePoint);


							final int RX10_TEMP197 = 0;


							final boolean RX10_TEMP198 = RX10_TEMP196 < RX10_TEMP197;

							if(RX10_TEMP198)
								{

								String RX10_TEMP199 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP199);

								}

							final int RX10_TEMP200 = Program.getPlaceFromDist2(RX10_TEMP194, RX10_TEMP196,myUniquePlacePoint);


							final int RX10_TEMP202 = 0;


							final boolean RX10_TEMP203 = RX10_TEMP200 != RX10_TEMP202;

							if(RX10_TEMP203)
								{

								String RX10_TEMP201 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP201);

								}

							final Complex RX10_TEMP204 = Program.getRefArrayValue2Complex(ft, RX10_TEMP196,myUniquePlacePoint);


							final Complex X10_TEMP144 = RX10_TEMP204;


							final double X10_TEMP145 = Program.Complex_getReal(X10_TEMP144,myUniquePlacePoint);


							final double X10_TEMP148 = N * X10_TEMP145;


							final double X10_TEMP149 = X10_TEMP148;


							final Point3 RX10_TEMP205 = new Point3(X10_TEMP140, y, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP205.hashCode());


							final Dist3 RX10_TEMP206 = table.distValue;


							final Region3 RX10_TEMP207 = RX10_TEMP206.dReg;


							final int RX10_TEMP208 = Program.searchPointInRegion3(RX10_TEMP207, RX10_TEMP205,myUniquePlacePoint);


							final int RX10_TEMP209 = 0;


							final boolean RX10_TEMP210 = RX10_TEMP208 < RX10_TEMP209;

							if(RX10_TEMP210)
								{

								String RX10_TEMP211 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP211);

								}

							final int RX10_TEMP212 = Program.getPlaceFromDist3(RX10_TEMP206, RX10_TEMP208,myUniquePlacePoint);


							final int RX10_TEMP214 = 0;


							final boolean RX10_TEMP215 = RX10_TEMP212 != RX10_TEMP214;

							if(RX10_TEMP215)
								{

								String RX10_TEMP213 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP213);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP208, X10_TEMP149,myUniquePlacePoint);

							final int X10_TEMP155 = 0;


							final Point2 RX10_TEMP216 = new Point2(X10_TEMP155, y,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP216.hashCode());


							final Dist2 RX10_TEMP217 = ft.distValue;


							final Region2 RX10_TEMP218 = RX10_TEMP217.dReg;


							final int RX10_TEMP219 = Program.searchPointInRegion2(RX10_TEMP218, RX10_TEMP216,myUniquePlacePoint);


							final int RX10_TEMP220 = 0;


							final boolean RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220;

							if(RX10_TEMP221)
								{

								String RX10_TEMP222 = "Array access index out of bounds";

								throw new RuntimeException(RX10_TEMP222);

								}

							final int RX10_TEMP223 = Program.getPlaceFromDist2(RX10_TEMP217, RX10_TEMP219,myUniquePlacePoint);


							final int RX10_TEMP225 = 0;


							final boolean RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225;

							if(RX10_TEMP226)
								{

								String RX10_TEMP224 = "Bad place access for array ft";

								throw new RuntimeException(RX10_TEMP224);

								}

							final Complex RX10_TEMP227 = Program.getRefArrayValue2Complex(ft, RX10_TEMP219,myUniquePlacePoint);


							final Complex X10_TEMP156 = RX10_TEMP227;


							final double X10_TEMP157 = Program.Complex_getImag(X10_TEMP156,myUniquePlacePoint);


							final double X10_TEMP160 = N * X10_TEMP157;


							final double X10_TEMP161 = X10_TEMP160;


							final Point3 RX10_TEMP228 = new Point3(x, y, index,myUniquePlacePoint);
							
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP228.hashCode());


							final Dist3 RX10_TEMP229 = table.distValue;


							final Region3 RX10_TEMP230 = RX10_TEMP229.dReg;


							final int RX10_TEMP231 = Program.searchPointInRegion3(RX10_TEMP230, RX10_TEMP228,myUniquePlacePoint);


							final int RX10_TEMP232 = 0;


							final boolean RX10_TEMP233 = RX10_TEMP231 < RX10_TEMP232;

							if(RX10_TEMP233)
								{

								String RX10_TEMP234 = "Array index out of bounds";

								throw new RuntimeException(RX10_TEMP234);

								}

							final int RX10_TEMP235 = Program.getPlaceFromDist3(RX10_TEMP229, RX10_TEMP231,myUniquePlacePoint);


							final int RX10_TEMP237 = 0;


							final boolean RX10_TEMP238 = RX10_TEMP235 != RX10_TEMP237;

							if(RX10_TEMP238)
								{

								String RX10_TEMP236 = "Bad place access for array table";

								throw new RuntimeException(RX10_TEMP236);

								}
							Program.setRefArrayValue3double(table, RX10_TEMP231, X10_TEMP161,myUniquePlacePoint);
							}
						}
					}
				}
			}
		}
public double PoissonSolver_potentialField ( final double r, final double ari, final double affp, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program._PoissonSolver_PI4I;


		final double anorm = affp * X10_TEMP1;


		final int X10_TEMP3 = 0;


		final boolean X10_TEMP5 = ari > X10_TEMP3;

		if(X10_TEMP5)
			{

			final double X10_TEMP6 = 0.0;


			final boolean X10_TEMP8 = r == X10_TEMP6;

			if(X10_TEMP8)
				{

				final double X10_TEMP9 = Program._PoissonSolver_SQT2PI;


				final double X10_TEMP10 = anorm * X10_TEMP9;


				final double X10_TEMP12 = X10_TEMP10 * ari;

				return X10_TEMP12;
				}
			else
				{

				final double X10_TEMP14 = Program._PoissonSolver_SQT2I;


				final double X10_TEMP15 = r * X10_TEMP14;


				final double X10_TEMP17 = X10_TEMP15 * ari;


				final double X10_TEMP18 = this.PoissonSolver_errorFn(X10_TEMP17,myUniquePlacePoint);


				final double X10_TEMP19 = anorm * X10_TEMP18;


				final double X10_TEMP21 = X10_TEMP19 / r;

				return X10_TEMP21;
				}
 			}
		else
			{

			final double X10_TEMP22 = 0.0;


			final boolean X10_TEMP24 = r == X10_TEMP22;

			if(X10_TEMP24)
				{

				final double X10_TEMP26 = 0.0;

				return X10_TEMP26;
				}
			else
				{

				final double X10_TEMP28 = anorm / r;

				return X10_TEMP28;
				}
 			}
 		}
public double PoissonSolver_particleShape ( final double r, final double ari, final double affp, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = 0.5;


		final double X10_TEMP2 = Program._PoissonSolver_SQT2PI;


		final double X10_TEMP3 = X10_TEMP1 * X10_TEMP2;


		final double X10_TEMP6 = X10_TEMP3 * ari;


		final int X10_TEMP7 = 2;


		final double X10_TEMP8 = Math.pow(X10_TEMP6, X10_TEMP7);


		final double anorm = affp * X10_TEMP8;


		final double X10_TEMP10 = 0.0;


		final boolean X10_TEMP12 = ari > X10_TEMP10;

		if(X10_TEMP12)
			{

			final double X10_TEMP13 = 0.0;


			final boolean X10_TEMP15 = r == X10_TEMP13;

			if(X10_TEMP15)
				{
				return anorm;
				}
			else
				{

				final double X10_TEMP17 = Program._PoissonSolver_SQT2I;


				final double X10_TEMP18 = r * X10_TEMP17;


				final double X10_TEMP21 = X10_TEMP18 * ari;


				final double X10_TEMP22 = 8.0;


				final double at1 = Program.X10Util_minDouble(X10_TEMP21, X10_TEMP22,myUniquePlacePoint);


				final double X10_TEMP25 = at1 * at1;


				final int X10_TEMP26 = 0;


				final double X10_TEMP28 = X10_TEMP26 - X10_TEMP25;


				final double X10_TEMP29 = Math.exp(X10_TEMP28);


				final double X10_TEMP31 = anorm * X10_TEMP29;

				return X10_TEMP31;
				}
 			}
		else
			{

			final double X10_TEMP32 = 0.0;


			final boolean X10_TEMP34 = r == X10_TEMP32;

			if(X10_TEMP34)
				{
				return affp;
				}
			else
				{

				final double X10_TEMP37 = 0.0;

				return X10_TEMP37;
				}
 			}
 		}
public double PoissonSolver_radialElectricField ( final double r, final double ari, final double affp, int myUniquePlacePoint)
		{

		final double X10_TEMP1 = Program._PoissonSolver_PI4I;


		final double anorm = affp * X10_TEMP1;


		final double X10_TEMP3 = 0.0;


		final boolean X10_TEMP5 = ari > X10_TEMP3;

		if(X10_TEMP5)
			{

			final double X10_TEMP6 = 0.0;


			final boolean X10_TEMP8 = r == X10_TEMP6;

			if(X10_TEMP8)
				{

				final double X10_TEMP10 = 0.0;

				return X10_TEMP10;
				}
			else
				{

				final double X10_TEMP11 = 1.0;


				final double ri = X10_TEMP11 / r;


				final double X10_TEMP13 = Program._PoissonSolver_SQT2I;


				final double X10_TEMP14 = r * X10_TEMP13;


				final double X10_TEMP17 = X10_TEMP14 * ari;


				final double X10_TEMP18 = 8.0;


				final double at1 = Program.X10Util_minDouble(X10_TEMP17, X10_TEMP18,myUniquePlacePoint);


				final double X10_TEMP35 = anorm * ri;


				final double X10_TEMP22 = this.PoissonSolver_errorFn(at1,myUniquePlacePoint);


				final double X10_TEMP31 = X10_TEMP22 * ri;


				final double X10_TEMP23 = Program._PoissonSolver_SQT2PI;


				final double X10_TEMP29 = X10_TEMP23 * ari;


				final double X10_TEMP25 = at1 * at1;


				final int X10_TEMP26 = 0;


				final double X10_TEMP28 = X10_TEMP26 - X10_TEMP25;


				final double X10_TEMP30 = Math.exp(X10_TEMP28);


				final double X10_TEMP32 = X10_TEMP29 * X10_TEMP30;


				final double X10_TEMP34 = X10_TEMP31 - X10_TEMP32;


				final double X10_TEMP37 = X10_TEMP35 * X10_TEMP34;

				return X10_TEMP37;
				}
 			}
		else
			{

			final double X10_TEMP38 = 0.0;


			final boolean X10_TEMP40 = r == X10_TEMP38;

			if(X10_TEMP40)
				{

				final double X10_TEMP42 = 0.0;

				return X10_TEMP42;
				}
			else
				{

				final double X10_TEMP44 = r * r;


				final double X10_TEMP46 = anorm / X10_TEMP44;

				return X10_TEMP46;
				}
 			}
 		}
public double PoissonSolver_errorFn ( final double x, int myUniquePlacePoint)
		{

		final double p = 0.3275911;


		final double a1 = 0.254829592;


		final double X10_TEMP3 = 0.284496736;


		final int X10_TEMP4 = 0;


		final double a2 = X10_TEMP4 - X10_TEMP3;


		final double a3 = 1.421413741;


		final double X10_TEMP7 = 1.453152027;


		final int X10_TEMP8 = 0;


		final double a4 = X10_TEMP8 - X10_TEMP7;


		final double a5 = 1.061405429;


		final double f = Math.abs(x);


		final double X10_TEMP17 = 1.0;


		final double X10_TEMP13 = 1.0;


		final double X10_TEMP14 = p * f;


		final double X10_TEMP16 = X10_TEMP13 + X10_TEMP14;


		final double t = X10_TEMP17 / X10_TEMP16;


		double ret = 0.0;


		final double X10_TEMP20 = 8.0;


		final boolean X10_TEMP22 = f <= X10_TEMP20;

		if(X10_TEMP22)
			{

			final double X10_TEMP41 = 1.0;


			final double X10_TEMP23 = t * a5;


			final double X10_TEMP25 = a4 + X10_TEMP23;


			final double X10_TEMP26 = t * X10_TEMP25;


			final double X10_TEMP28 = a3 + X10_TEMP26;


			final double X10_TEMP29 = t * X10_TEMP28;


			final double X10_TEMP31 = a2 + X10_TEMP29;


			final double X10_TEMP32 = t * X10_TEMP31;


			final double X10_TEMP34 = a1 + X10_TEMP32;


			final double X10_TEMP39 = t * X10_TEMP34;


			final int X10_TEMP35 = 0;


			final double X10_TEMP36 = X10_TEMP35 - x;


			final double X10_TEMP38 = X10_TEMP36 * x;


			final double X10_TEMP40 = Math.exp(X10_TEMP38);


			final double X10_TEMP42 = X10_TEMP39 * X10_TEMP40;


			final double X10_TEMP44 = X10_TEMP41 - X10_TEMP42;


			ret = X10_TEMP44;

			}
		else
			{

			final double X10_TEMP46 = 1.0;


			ret = X10_TEMP46;

			}
 
		final int X10_TEMP47 = 0;


		final boolean X10_TEMP49 = x < X10_TEMP47;

		if(X10_TEMP49)
			{

			final int X10_TEMP50 = 0;


			final double X10_TEMP52 = X10_TEMP50 - ret;


			ret = X10_TEMP52;

			}
		return ret;
		}
	}
	class Random   {
 
	public int flag;
	public double r0;
	public int r1;
	public int r2;
	public int r4;
	public int r5;
	public double h1l;
	public double h1u;
	public double h2l;


	public Random (  int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int X10_TEMP2 = 0;


		flag = X10_TEMP2;


		final double X10_TEMP4 = 0.0;


		r0 = X10_TEMP4;


		final int X10_TEMP6 = 885098780;


		r1 = X10_TEMP6;


		final int X10_TEMP8 = 1824280461;


		r2 = X10_TEMP8;


		final int X10_TEMP10 = 1396483093;


		r4 = X10_TEMP10;


		final int X10_TEMP12 = 55318673;


		r5 = X10_TEMP12;


		final double X10_TEMP14 = 65531.0;


		h1l = X10_TEMP14;


		final double X10_TEMP16 = 32767.0;


		h1u = X10_TEMP16;


		final double X10_TEMP18 = 65525.0;


		h2l = X10_TEMP18;

		}



}
	class Timer   {
 
	public doubleRefArray1 start_time;
	public doubleRefArray1 elapsed_time;
	public doubleRefArray1 total_time;


	public Timer (  int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int X10_TEMP3 = 0;


		final int X10_TEMP4 = Program._Timer_max_counters;


		final Region1 X10_TEMP5 = Program.createNewRegion1R(X10_TEMP3, X10_TEMP4,myUniquePlacePoint);


		final int X10_TEMP6 = 0;


		final Dist1 d = Program.getPlaceDist1(X10_TEMP5, X10_TEMP6,myUniquePlacePoint);


		final Region1 RX10_TEMP0 = d.dReg;


		final int RX10_TEMP1 = 0;


		final int RX10_TEMP2 = 1;


		int RX10_TEMP3 = 1;


		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;


		final int  RX10_TEMP4 = RX10_TEMP3+1;


		final int RX10_TEMP5 = RX10_TEMP3+1;


		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];

		/*FINISH
*/			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());
			for(int RX10_TEMP7=0; RX10_TEMP7 < RX10_TEMP4; RX10_TEMP7++)
				{

				Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

				final int RX10_TEMP8 = 0;


				final int RX10_TEMP9 = RX10_TEMP7;


				final int RX10_TEMP10 = 0;


				final int RX10_TEMP11 = Program.getDistLocalCount1(d, RX10_TEMP9,myUniquePlacePoint);


				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;

				//async(RX10_TEMP10)
					{

					Program.globalPointerHashMap.get(RX10_TEMP10).add(this.hashCode());

					final int RX10_TEMP14 = RX10_TEMP12+1;


					final double[] RX10_TEMP15 = new double/*NewUpdatableArray*/[RX10_TEMP14];
/*arrayInitBlock*/
for(int RX10_TEMP13= 0;RX10_TEMP13 <RX10_TEMP15.length ;RX10_TEMP13++ )						{

						Program.globalPointerHashMap.get(RX10_TEMP10).add(this.hashCode());

						final double X10_TEMP9 = 0;

						RX10_TEMP15[RX10_TEMP13] =X10_TEMP9;
						}

;


					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15,RX10_TEMP10);
					
Program.globalPointerHashMap.get(RX10_TEMP10).add(RX10_TEMP16.hashCode());

					//async(RX10_TEMP8)
						{

						Program.globalPointerHashMap.get(RX10_TEMP8).add(this.hashCode());
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP17 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP4]);
/*arrayInitBlock*/
for(int RX10_TEMP19= 0;RX10_TEMP19 <RX10_TEMP17.length ;RX10_TEMP19++ )			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

			final doubleStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];

			RX10_TEMP17[RX10_TEMP19] =RX10_TEMP18;
			}

;


		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(d, RX10_TEMP17,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP20.hashCode());


		final doubleRefArray1 X10_TEMP11 = RX10_TEMP20;


		start_time = X10_TEMP11;


		final Region1 RX10_TEMP21 = d.dReg;


		final int RX10_TEMP22 = 0;


		final int RX10_TEMP23 = 1;


		int RX10_TEMP24 = 1;


		RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP23;


		final int  RX10_TEMP25 = RX10_TEMP24+1;


		final int RX10_TEMP26 = RX10_TEMP24+1;


		final doubleStub[] RX10_TEMP27 = new doubleStub[RX10_TEMP26];

		/*FINISH
*/			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());
			for(int RX10_TEMP28=0; RX10_TEMP28 < RX10_TEMP25; RX10_TEMP28++)
				{

				Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

				final int RX10_TEMP29 = 0;


				final int RX10_TEMP30 = RX10_TEMP28;


				final int RX10_TEMP31 = 0;


				final int RX10_TEMP32 = Program.getDistLocalCount1(d, RX10_TEMP30,myUniquePlacePoint);


				final int RX10_TEMP33 = RX10_TEMP32 - RX10_TEMP23;

				//async(RX10_TEMP31)
					{

					Program.globalPointerHashMap.get(RX10_TEMP31).add(this.hashCode());

					final int RX10_TEMP35 = RX10_TEMP33+1;


					final double[] RX10_TEMP36 = new double/*NewUpdatableArray*/[RX10_TEMP35];
/*arrayInitBlock*/
for(int RX10_TEMP34= 0;RX10_TEMP34 <RX10_TEMP36.length ;RX10_TEMP34++ )						{

						Program.globalPointerHashMap.get(RX10_TEMP31).add(this.hashCode());

						final double X10_TEMP13 = 0;

						RX10_TEMP36[RX10_TEMP34] =X10_TEMP13;
						}

;


					final doubleStub RX10_TEMP37 = new doubleStub(RX10_TEMP36,RX10_TEMP31);
					
Program.globalPointerHashMap.get(RX10_TEMP31).add(RX10_TEMP37.hashCode());

					//async(RX10_TEMP29)
						{

						Program.globalPointerHashMap.get(RX10_TEMP29).add(this.hashCode());
						RX10_TEMP27[RX10_TEMP28] = RX10_TEMP37;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP38 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP25]);
/*arrayInitBlock*/
for(int RX10_TEMP40= 0;RX10_TEMP40 <RX10_TEMP38.length ;RX10_TEMP40++ )			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

			final doubleStub RX10_TEMP39 = RX10_TEMP27[RX10_TEMP40];

			RX10_TEMP38[RX10_TEMP40] =RX10_TEMP39;
			}

;


		final doubleRefArray1 RX10_TEMP41 = new doubleRefArray1(d, RX10_TEMP38,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP41.hashCode());


		final doubleRefArray1 X10_TEMP15 = RX10_TEMP41;


		elapsed_time = X10_TEMP15;


		final Region1 RX10_TEMP42 = d.dReg;


		final int RX10_TEMP43 = 0;


		final int RX10_TEMP44 = 1;


		int RX10_TEMP45 = 1;


		RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44;


		final int  RX10_TEMP46 = RX10_TEMP45+1;


		final int RX10_TEMP47 = RX10_TEMP45+1;


		final doubleStub[] RX10_TEMP48 = new doubleStub[RX10_TEMP47];

		/*FINISH
*/			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());
			for(int RX10_TEMP49=0; RX10_TEMP49 < RX10_TEMP46; RX10_TEMP49++)
				{

				Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

				final int RX10_TEMP50 = 0;


				final int RX10_TEMP51 = RX10_TEMP49;


				final int RX10_TEMP52 = 0;


				final int RX10_TEMP53 = Program.getDistLocalCount1(d, RX10_TEMP51,myUniquePlacePoint);


				final int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44;

				//async(RX10_TEMP52)
					{

					Program.globalPointerHashMap.get(RX10_TEMP52).add(this.hashCode());

					final int RX10_TEMP56 = RX10_TEMP54+1;


					final double[] RX10_TEMP57 = new double/*NewUpdatableArray*/[RX10_TEMP56];
/*arrayInitBlock*/
for(int RX10_TEMP55= 0;RX10_TEMP55 <RX10_TEMP57.length ;RX10_TEMP55++ )						{

						Program.globalPointerHashMap.get(RX10_TEMP52).add(this.hashCode());

						final double X10_TEMP17 = 0;

						RX10_TEMP57[RX10_TEMP55] =X10_TEMP17;
						}

;


					final doubleStub RX10_TEMP58 = new doubleStub(RX10_TEMP57,RX10_TEMP52);
					
Program.globalPointerHashMap.get(RX10_TEMP52).add(RX10_TEMP58.hashCode());

					//async(RX10_TEMP50)
						{

						Program.globalPointerHashMap.get(RX10_TEMP50).add(this.hashCode());
						RX10_TEMP48[RX10_TEMP49] = RX10_TEMP58;
						}
					}
				}
			}

		final doubleStub[] RX10_TEMP59 = (doubleStub[])(new doubleStub/*value*/[RX10_TEMP46]);
/*arrayInitBlock*/
for(int RX10_TEMP61= 0;RX10_TEMP61 <RX10_TEMP59.length ;RX10_TEMP61++ )			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

			final doubleStub RX10_TEMP60 = RX10_TEMP48[RX10_TEMP61];

			RX10_TEMP59[RX10_TEMP61] =RX10_TEMP60;
			}

;


		final doubleRefArray1 RX10_TEMP62 = new doubleRefArray1(d, RX10_TEMP59,myUniquePlacePoint);
		
Program.globalPointerHashMap.get(myUniquePlacePoint).add(RX10_TEMP62.hashCode());


		final doubleRefArray1 X10_TEMP19 = RX10_TEMP62;


		total_time = X10_TEMP19;

		}



}
	class X10Util   {
 

}
	/*value*/ class intRefArray1 
	 {
 
	public final Dist1 distValue;
	public final intStub[] contents;


	public intRefArray1 ( final Dist1 distValue_, final intStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class Dist1 
	 {
 
	public final Region1 dReg;
	public final Dist dDist;


	public Dist1 ( final Region1 dReg_, final Dist dDist_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		dReg = dReg_;


		dDist = dDist_;

		}


	}
	/*value*/ class Region2 
	 {
 
	public final int regRank;
	public final int regSize;
	public final boolean regType;
	public final int low0;
	public final int dim0;
	public final int low1;
	public final int dim1;
	public final Point2[] pointArray;


	public Region2 ( final Point2[] pointArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int zero = 0;


		final int one = 1;


		final int minusOne = zero - one;


		regRank = 2;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = false;


		low0 = minusOne;


		dim0 = zero;


		low1 = minusOne;


		dim1 = zero;

		}
	public Region2 ( final Point2[] pointArray_, final int low0_, final int dim0_, final int low1_, final int dim1_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regRank = 2;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = true;


		low0 = low0_;


		dim0 = dim0_;


		low1 = low1_;


		dim1 = dim1_;

		}


	}
	/*value*/ class Dist 
	 {
 
	public final int[] placeArray;
	public final int[] counts;
	public final int[] runningSum;


	public Dist ( final int[] vPlaceArray, final int arraySize, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int one = 1;


		final int zero = 0;


		final int maxPlaces = 1;


		final int ub = maxPlaces - one;


		final int  countReg = ub+1;


		final int countDist = ub+1;


		final int rSize = arraySize - one;


		final int  arrayReg = rSize+1;


		final int runSumDist = rSize+1;


		final int[] tempCounts = new int[countDist];


		final int[] tempRunSum = new int[runSumDist];

		for(int p=0; p < countReg; p++)
			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());
			tempCounts[p] = zero;
			}
		for(int p=0; p < arrayReg; p++)
			{

			Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

			final int pl = vPlaceArray[p];


			final int index = 0;


			final int oldVal = tempCounts[index];

			tempRunSum[p] = oldVal;

			final int oldValPlusOne = oldVal + one;

			tempCounts[index] = oldValPlusOne;
			}

		placeArray = vPlaceArray;


		counts = Program.initDist(tempCounts, countReg,myUniquePlacePoint);


		runningSum = Program.initDist(tempRunSum, arrayReg,myUniquePlacePoint);

		}


	}
	/*value*/ class doubleValArray2 
	 {
 
	public final Region2 regionValue;
	public final double[] contents;


	public doubleValArray2 ( final Region2 regionValue_, final double[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class Point2 
	 {
 
	public final int f0;
	public final int f1;


	public Point2 ( final int f0_, final int f1_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		f0 = f0_;


		f1 = f1_;

		}


	}
	/*value*/ class Point3 
	 {
 
	public final int f0;
	public final int f1;
	public final int f2;


	public Point3 ( final int f0_, final int f1_, final int f2_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		f0 = f0_;


		f1 = f1_;


		f2 = f2_;

		}


	}
	/*value*/ class Region1 
	 {
 
	public final int regRank;
	public final int regSize;
	public final boolean regType;
	public final int low0;
	public final int dim0;
	public final Point1[] pointArray;


	public Region1 ( final Point1[] pointArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int zero = 0;


		final int one = 1;


		final int minusOne = zero - one;


		regRank = 1;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = false;


		low0 = minusOne;


		dim0 = zero;

		}
	public Region1 ( final Point1[] pointArray_, final int low0_, final int dim0_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regRank = 1;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = true;


		low0 = low0_;


		dim0 = dim0_;

		}


	}
	/*value*/ class Dist2 
	 {
 
	public final Region2 dReg;
	public final Dist dDist;


	public Dist2 ( final Region2 dReg_, final Dist dDist_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		dReg = dReg_;


		dDist = dDist_;

		}


	}
	/*value*/ class Point1 
	 {
 
	public final int f0;


	public Point1 ( final int f0_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		f0 = f0_;

		}


	}
	/*value*/ class doubleRefArray1 
	 {
 
	public final Dist1 distValue;
	public final doubleStub[] contents;


	public doubleRefArray1 ( final Dist1 distValue_, final doubleStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class Dist3 
	 {
 
	public final Region3 dReg;
	public final Dist dDist;


	public Dist3 ( final Region3 dReg_, final Dist dDist_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		dReg = dReg_;


		dDist = dDist_;

		}


	}
	/*value*/ class ComplexRefArray2 
	 {
 
	public final Dist2 distValue;
	public final ComplexStub[] contents;


	public ComplexRefArray2 ( final Dist2 distValue_, final ComplexStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class ComplexValArray1 
	 {
 
	public final Region1 regionValue;
	public final Complex[] contents;


	public ComplexValArray1 ( final Region1 regionValue_, final Complex[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class Region3 
	 {
 
	public final int regRank;
	public final int regSize;
	public final boolean regType;
	public final int low0;
	public final int dim0;
	public final int low1;
	public final int dim1;
	public final int low2;
	public final int dim2;
	public final Point3[] pointArray;


	public Region3 ( final Point3[] pointArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		final int zero = 0;


		final int one = 1;


		final int minusOne = zero - one;


		regRank = 3;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = false;


		low0 = minusOne;


		dim0 = zero;


		low1 = minusOne;


		dim1 = zero;


		low2 = minusOne;


		dim2 = zero;

		}
	public Region3 ( final Point3[] pointArray_, final int low0_, final int dim0_, final int low1_, final int dim1_, final int low2_, final int dim2_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regRank = 3;


		regSize = pointArray_.length;


		pointArray = pointArray_;


		regType = true;


		low0 = low0_;


		dim0 = dim0_;


		low1 = low1_;


		dim1 = dim1_;


		low2 = low2_;


		dim2 = dim2_;

		}


	}
	/*value*/ class doubleStub 
	 {
 
	public final double[] localArray;


	public doubleStub ( final double[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class doubleRefArray3 
	 {
 
	public final Dist3 distValue;
	public final doubleStub[] contents;


	public doubleRefArray3 ( final Dist3 distValue_, final doubleStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class intStub 
	 {
 
	public final int[] localArray;


	public intStub ( final int[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class ParticleStub 
	 {
 
	public final Particle[] localArray;


	public ParticleStub ( final Particle[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class intValArray1 
	 {
 
	public final Region1 regionValue;
	public final int[] contents;


	public intValArray1 ( final Region1 regionValue_, final int[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class doubleRefArray2 
	 {
 
	public final Dist2 distValue;
	public final doubleStub[] contents;


	public doubleRefArray2 ( final Dist2 distValue_, final doubleStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class ComplexStub 
	 {
 
	public final Complex[] localArray;


	public ComplexStub ( final Complex[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class Region1Stub 
	 {
 
	public final Region1[] localArray;


	public Region1Stub ( final Region1[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class ParticleRefArray1 
	 {
 
	public final Dist1 distValue;
	public final ParticleStub[] contents;


	public ParticleRefArray1 ( final Dist1 distValue_, final ParticleStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class ComplexValArray2 
	 {
 
	public final Region2 regionValue;
	public final Complex[] contents;


	public ComplexValArray2 ( final Region2 regionValue_, final Complex[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class Region1RefArray1 
	 {
 
	public final Dist1 distValue;
	public final Region1Stub[] contents;


	public Region1RefArray1 ( final Dist1 distValue_, final Region1Stub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class booleanRefArray1 
	 {
 
	public final Dist1 distValue;
	public final booleanStub[] contents;


	public booleanRefArray1 ( final Dist1 distValue_, final booleanStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class ComplexRefArray1 
	 {
 
	public final Dist1 distValue;
	public final ComplexStub[] contents;


	public ComplexRefArray1 ( final Dist1 distValue_, final ComplexStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class booleanStub 
	 {
 
	public final boolean[] localArray;


	public booleanStub ( final boolean[] localArray_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		localArray = localArray_;

		}


	}
	/*value*/ class ParticleValArray1 
	 {
 
	public final Region1 regionValue;
	public final Particle[] contents;


	public ParticleValArray1 ( final Region1 regionValue_, final Particle[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class ParticleRefArray2 
	 {
 
	public final Dist2 distValue;
	public final ParticleStub[] contents;


	public ParticleRefArray2 ( final Dist2 distValue_, final ParticleStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
	/*value*/ class Region2ValArray1 
	 {
 
	public final Region1 regionValue;
	public final Region2[] contents;


	public Region2ValArray1 ( final Region1 regionValue_, final Region2[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		regionValue = regionValue_;


		contents = contents_;

		}


	}
	/*value*/ class intRefArray2 
	 {
 
	public final Dist2 distValue;
	public final intStub[] contents;


	public intRefArray2 ( final Dist2 distValue_, final intStub[] contents_, int myUniquePlacePoint)
		{

		Program.globalPointerHashMap.get(myUniquePlacePoint).add(this.hashCode());

		distValue = distValue_;


		contents = contents_;

		}


	}
