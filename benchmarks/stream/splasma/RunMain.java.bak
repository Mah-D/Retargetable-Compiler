public class RunMain {
	public static void main(String[] args) {
		Program.runMain();
	}
}
class Program {
	public static final int _Stream_MEG = Program._Stream_MEG_init();
	public static final double _Stream_alpha = Program._Stream_alpha_init();
	public static final int _Stream_NUM_TIMES = Program._Stream_NUM_TIMES_init();
	public static final int _Timer_max_counters = Program._Timer_max_counters_init();
	public static final long _Stream_N0 = Program._Stream_N0_init();
	public static final long _Stream_N = Program._Stream_N_init();
	public static final int _Stream_LocalSize = Program._Stream_LocalSize_init();


	public static void runMain() {
		Timer tmr = (new Timer());
		int count = (0);
		Program.Timer_start(tmr, count);
		final Stream X10_TEMP4 = (new Stream());
		Program.Stream_run(X10_TEMP4);
		Program.Timer_stop(tmr, count);
		final String X10_TEMP7 = ("Wall-clock time for stream: ");
		final double X10_TEMP8 = (Program.Timer_readTimer(tmr, count));
		final String X10_TEMP9 = (X10_TEMP7 + X10_TEMP8);
		final String X10_TEMP10 = (" secs");
		final String X10_TEMP12 = (X10_TEMP9 + X10_TEMP10);
		System.out.println(X10_TEMP12);
	}

	public static int _Stream_MEG_init() {
		final int X10_TEMP1 = (2048);
		final int X10_TEMP2 = (2048);
		final int X10_TEMP4 = (X10_TEMP1 * X10_TEMP2);
		return X10_TEMP4;
	}

	public static double _Stream_alpha_init() {
		final double X10_TEMP2 = (3.0D);
		return X10_TEMP2;
	}

	public static int _Stream_NUM_TIMES_init() {
		final int X10_TEMP2 = (10);
		return X10_TEMP2;
	}

	public static long _Stream_N0_init() {
		final int X10_TEMP1 = (2);
		final long X10_TEMP3 = (X10_TEMP1 * _Stream_MEG);
		return X10_TEMP3;
	}

	public static long _Stream_N_init() {
		final int X10_TEMP1 = 4;
		final long X10_TEMP3 = (_Stream_N0 * X10_TEMP1);
		return X10_TEMP3;
	}

	public static int _Stream_LocalSize_init() {
		final int X10_TEMP2 = ((int)_Stream_N0);
		return X10_TEMP2;
	}

	public static void Stream_run(final Stream X10_TEMP0) {
		final String X10_TEMP1 = ("LocalSize=");
		final String X10_TEMP3 = (X10_TEMP1 + _Stream_LocalSize);
		System.out.println(X10_TEMP3);
		final StreamData tempSd = (X10_TEMP0.sd);
		//finish {
			final int X10_TEMP10 = (0);
			final int X10_TEMP6 = (1);
			final int X10_TEMP8 = (_Stream_NUM_TIMES - X10_TEMP6);
			final int X10_TEMP11 = ((int)X10_TEMP8);
			Region1 r = Program.createNewRegion1R(X10_TEMP10, X10_TEMP11);
			final Point1[] RX10_TEMP1 = r.pointArray;
			for(int RX10_TEMP0=0;RX10_TEMP0<RX10_TEMP1.length;RX10_TEMP0++) {
				final Point1 p1 = RX10_TEMP1[RX10_TEMP0];
				//finish {
					final Dist1 X10_TEMP15 = Program.getUniqueDist();
					final Region1 RX10_TEMP3 = X10_TEMP15.dReg;
					final Point1[] RX10_TEMP4 = RX10_TEMP3.pointArray;
					for(int RX10_TEMP2=0;RX10_TEMP2<RX10_TEMP4.length;RX10_TEMP2++) {
						final Point1 p6 = RX10_TEMP4[RX10_TEMP2];
						final Region1 RX10_TEMP5 = X10_TEMP15.dReg;
						final int RX10_TEMP6 = Program.searchPointInRegion1(RX10_TEMP5, p6);
						final int RX10_TEMP7 = 0;
						final boolean RX10_TEMP8 = RX10_TEMP6<RX10_TEMP7;
						if(RX10_TEMP8) {
							final String RX10_TEMP9 = "Point p6 not found in the distribution X10_TEMP15.";
							throw new RuntimeException(RX10_TEMP9);
						}
						final int RX10_TEMP10 = Program.getPlaceFromDist1(X10_TEMP15, RX10_TEMP6);
						final int X10_TEMP16 = RX10_TEMP10;
						//async(X10_TEMP16) {
							final Dist1 X10_TEMP18 = tempSd.D;
							final int X10_TEMP19 = 0;
							final Dist1 X10_TEMP21 = Program.restrictDist1(X10_TEMP18,X10_TEMP19);
							final Region1 RX10_TEMP12 = X10_TEMP21.dReg;
							final Point1[] RX10_TEMP13 = RX10_TEMP12.pointArray;
							/*for(int RX10_TEMP11=0;RX10_TEMP11<RX10_TEMP13.length;RX10_TEMP11++) {
								final Point1 i = RX10_TEMP13[RX10_TEMP11];
								final doubleRefArray1 X10_TEMP22 = tempSd.b;
								final double X10_TEMP31 = (1.5);
								final int X10_TEMP24 = 0;
								final int X10_TEMP25 = X10_TEMP24;
								final int X10_TEMP27 = (X10_TEMP25 * _Stream_LocalSize);
								final int X10_TEMP28 = (i.f0);
								final int X10_TEMP30 = (X10_TEMP27 + X10_TEMP28);
								final double X10_TEMP34 = (X10_TEMP31 * X10_TEMP30);
								final double X10_TEMP35 = (X10_TEMP34);
								final Dist1 RX10_TEMP14 = X10_TEMP22.distValue;
								final Region1 RX10_TEMP15 = RX10_TEMP14.dReg;
								final int RX10_TEMP16 = Program.searchPointInRegion1(RX10_TEMP15, i);
								final int RX10_TEMP17 = 0;
								final boolean RX10_TEMP18 = RX10_TEMP16<RX10_TEMP17;
								if (RX10_TEMP18) {
									String RX10_TEMP19 = "Array index out of bounds";
									throw new RuntimeException(RX10_TEMP19);
								}
								final int RX10_TEMP20 = Program.getPlaceFromDist1(RX10_TEMP14, RX10_TEMP16);
								final int RX10_TEMP22 = 0;
								final boolean RX10_TEMP23 = RX10_TEMP20!=RX10_TEMP22;
								if (RX10_TEMP23) {
									String RX10_TEMP21 = "Bad place access for array X10_TEMP22";
									throw new RuntimeException(RX10_TEMP21);
								}
								Program.setRefArrayValue1double(X10_TEMP22, RX10_TEMP16, X10_TEMP35);
								final doubleRefArray1 X10_TEMP36 = tempSd.c;
								final double X10_TEMP45 = (2.5);
								final int X10_TEMP38 = 0;
								final int X10_TEMP39 = X10_TEMP38;
								final int X10_TEMP41 = (X10_TEMP39 * _Stream_LocalSize);
								final int X10_TEMP42 = (i.f0);
								final int X10_TEMP44 = (X10_TEMP41 + X10_TEMP42);
								final double X10_TEMP48 = (X10_TEMP45 * X10_TEMP44);
								final double X10_TEMP49 = (X10_TEMP48);
								final Dist1 RX10_TEMP24 = X10_TEMP36.distValue;
								final Region1 RX10_TEMP25 = RX10_TEMP24.dReg;
								final int RX10_TEMP26 = Program.searchPointInRegion1(RX10_TEMP25, i);
								final int RX10_TEMP27 = 0;
								final boolean RX10_TEMP28 = RX10_TEMP26<RX10_TEMP27;
								if (RX10_TEMP28) {
									String RX10_TEMP29 = "Array index out of bounds";
									throw new RuntimeException(RX10_TEMP29);
								}
								final int RX10_TEMP30 = Program.getPlaceFromDist1(RX10_TEMP24, RX10_TEMP26);
								final int RX10_TEMP32 = 0;
								final boolean RX10_TEMP33 = RX10_TEMP30!=RX10_TEMP32;
								if (RX10_TEMP33) {
									String RX10_TEMP31 = "Bad place access for array X10_TEMP36";
									throw new RuntimeException(RX10_TEMP31);
								}
								Program.setRefArrayValue1double(X10_TEMP36, RX10_TEMP26, X10_TEMP49);
							}*/
							final Dist1 X10_TEMP50 = Program.getUniqueDist();
							final Region1 RX10_TEMP34 = X10_TEMP50.dReg;
							final int RX10_TEMP35 = Program.searchPointInRegion1(RX10_TEMP34, p6);
							final int RX10_TEMP36 = 0;
							final boolean RX10_TEMP37 = RX10_TEMP35<RX10_TEMP36;
							if(RX10_TEMP37) {
								final String RX10_TEMP38 = "Point p6 not found in the distribution X10_TEMP50.";
								throw new RuntimeException(RX10_TEMP38);
							}
							final int RX10_TEMP39 = Program.getPlaceFromDist1(X10_TEMP50, RX10_TEMP35);
							final int X10_TEMP52 = (RX10_TEMP39);
							final int X10_TEMP53 = 0;
							final boolean X10_TEMP55 = X10_TEMP52==X10_TEMP53;
							/*if(X10_TEMP55) {
								final doubleRefArray1 X10_TEMP56 = tempSd.times;
								final double X10_TEMP58 = (Program.Stream_mySecond());
								final int X10_TEMP59 = 0;
								final double X10_TEMP62 = (X10_TEMP59 - X10_TEMP58);
								final double X10_TEMP63 = (X10_TEMP62);
								final Dist1 RX10_TEMP40 = X10_TEMP56.distValue;
								final Region1 RX10_TEMP41 = RX10_TEMP40.dReg;
								final int RX10_TEMP42 = Program.searchPointInRegion1(RX10_TEMP41, p1);
								final int RX10_TEMP43 = 0;
								final boolean RX10_TEMP44 = RX10_TEMP42<RX10_TEMP43;
								if (RX10_TEMP44) {
									String RX10_TEMP45 = "Array index out of bounds";
									throw new RuntimeException(RX10_TEMP45);
								}
								final int RX10_TEMP46 = Program.getPlaceFromDist1(RX10_TEMP40, RX10_TEMP42);
								final int RX10_TEMP48 = 0;
								final boolean RX10_TEMP49 = RX10_TEMP46!=RX10_TEMP48;
								if (RX10_TEMP49) {
									String RX10_TEMP47 = "Bad place access for array X10_TEMP56";
									throw new RuntimeException(RX10_TEMP47);
								}
								Program.setRefArrayValue1double(X10_TEMP56, RX10_TEMP42, X10_TEMP63);
							}*/
							final Dist1 X10_TEMP65 = tempSd.D;
							final int X10_TEMP66 = 0;
							final Dist1 X10_TEMP68 = Program.restrictDist1(X10_TEMP65,X10_TEMP66);
							final Region1 RX10_TEMP51 = X10_TEMP68.dReg;
							final Point1[] RX10_TEMP52 = RX10_TEMP51.pointArray;
							/*for(int RX10_TEMP50=0; RX10_TEMP50<RX10_TEMP52.length; RX10_TEMP50++) {
								final Point1 p4 = RX10_TEMP52[RX10_TEMP50];
								final doubleRefArray1 X10_TEMP69 = tempSd.a;
								final doubleRefArray1 X10_TEMP71 = tempSd.b;
								final Dist1 RX10_TEMP53 = X10_TEMP71.distValue;
								final Region1 RX10_TEMP54 = RX10_TEMP53.dReg;
								final int RX10_TEMP55 = Program.searchPointInRegion1(RX10_TEMP54, p4);
								final int RX10_TEMP56 = 0;
								final boolean RX10_TEMP57 = RX10_TEMP55<RX10_TEMP56;
								if (RX10_TEMP57) {
									String RX10_TEMP58 = "Array access index out of bounds";
									throw new RuntimeException(RX10_TEMP58);
								}
								final int RX10_TEMP59 = Program.getPlaceFromDist1(RX10_TEMP53, RX10_TEMP55);
								final int RX10_TEMP61 = 0;
								final boolean RX10_TEMP62 = RX10_TEMP59!=RX10_TEMP61;
								if (RX10_TEMP62) {
									String RX10_TEMP60 = "Bad place access for array X10_TEMP71";
									throw new RuntimeException(RX10_TEMP60);
								}
								final double RX10_TEMP63 = Program.getRefArrayValue1double(X10_TEMP71, RX10_TEMP55);
								final double X10_TEMP76 = (RX10_TEMP63);
								final doubleRefArray1 X10_TEMP73 = tempSd.c;
								final Dist1 RX10_TEMP64 = X10_TEMP73.distValue;
								final Region1 RX10_TEMP65 = RX10_TEMP64.dReg;
								final int RX10_TEMP66 = Program.searchPointInRegion1(RX10_TEMP65, p4);
								final int RX10_TEMP67 = 0;
								final boolean RX10_TEMP68 = RX10_TEMP66<RX10_TEMP67;
								if (RX10_TEMP68) {
									String RX10_TEMP69 = "Array access index out of bounds";
									throw new RuntimeException(RX10_TEMP69);
								}
								final int RX10_TEMP70 = Program.getPlaceFromDist1(RX10_TEMP64, RX10_TEMP66);
								final int RX10_TEMP72 = 0;
								final boolean RX10_TEMP73 = RX10_TEMP70!=RX10_TEMP72;
								if (RX10_TEMP73) {
									String RX10_TEMP71 = "Bad place access for array X10_TEMP73";
									throw new RuntimeException(RX10_TEMP71);
								}
								final double RX10_TEMP74 = Program.getRefArrayValue1double(X10_TEMP73, RX10_TEMP66);
								final double X10_TEMP75 = (RX10_TEMP74);
								final double X10_TEMP77 = (_Stream_alpha * X10_TEMP75);
								final double X10_TEMP80 = (X10_TEMP76 + X10_TEMP77);
								final double X10_TEMP81 = (X10_TEMP80);
								final Dist1 RX10_TEMP75 = X10_TEMP69.distValue;
								final Region1 RX10_TEMP76 = RX10_TEMP75.dReg;
								final int RX10_TEMP77 = Program.searchPointInRegion1(RX10_TEMP76, p4);
								final int RX10_TEMP78 = 0;
								final boolean RX10_TEMP79 = RX10_TEMP77<RX10_TEMP78;
								if (RX10_TEMP79) {
									String RX10_TEMP80 = "Array index out of bounds";
									throw new RuntimeException(RX10_TEMP80);
								}
								final int RX10_TEMP81 = Program.getPlaceFromDist1(RX10_TEMP75, RX10_TEMP77);
								final int RX10_TEMP83 = 0;
								final boolean RX10_TEMP84 = RX10_TEMP81!=RX10_TEMP83;
								if (RX10_TEMP84) {
									String RX10_TEMP82 = "Bad place access for array X10_TEMP69";
									throw new RuntimeException(RX10_TEMP82);
								}
								Program.setRefArrayValue1double(X10_TEMP69, RX10_TEMP77, X10_TEMP81);
							}*/
						//}
					}
				//}
				//finish {
					final Dist1 X10_TEMP83 = Program.getUniqueDist();
					final Region1 RX10_TEMP86 = X10_TEMP83.dReg;
					final Point1[] RX10_TEMP87 = RX10_TEMP86.pointArray;
					for(int RX10_TEMP85=0;RX10_TEMP85<RX10_TEMP87.length;RX10_TEMP85++) {
						final Point1 p5 = RX10_TEMP87[RX10_TEMP85];
						final Region1 RX10_TEMP88 = X10_TEMP83.dReg;
						final int RX10_TEMP89 = Program.searchPointInRegion1(RX10_TEMP88, p5);
						final int RX10_TEMP90 = 0;
						final boolean RX10_TEMP91 = RX10_TEMP89<RX10_TEMP90;
						if(RX10_TEMP91) {
							final String RX10_TEMP92 = "Point p5 not found in the distribution X10_TEMP83.";
							throw new RuntimeException(RX10_TEMP92);
						}
						final int RX10_TEMP93 = Program.getPlaceFromDist1(X10_TEMP83, RX10_TEMP89);
						final int X10_TEMP84 = RX10_TEMP93;
						//async(X10_TEMP84) {
							final Dist1 X10_TEMP85 = Program.getUniqueDist();
							final Region1 RX10_TEMP94 = X10_TEMP85.dReg;
							final int RX10_TEMP95 = Program.searchPointInRegion1(RX10_TEMP94, p5);
							final int RX10_TEMP96 = 0;
							final boolean RX10_TEMP97 = RX10_TEMP95<RX10_TEMP96;
							if(RX10_TEMP97) {
								final String RX10_TEMP98 = "Point p5 not found in the distribution X10_TEMP85.";
								throw new RuntimeException(RX10_TEMP98);
							}
							final int RX10_TEMP99 = Program.getPlaceFromDist1(X10_TEMP85, RX10_TEMP95);
							final int X10_TEMP87 = (RX10_TEMP99);
							final int X10_TEMP88 = 0;
							final boolean X10_TEMP90 = X10_TEMP87==X10_TEMP88;
							/*if(X10_TEMP90) {
								final doubleRefArray1 X10_TEMP91 = tempSd.times;
								final doubleRefArray1 X10_TEMP93 = tempSd.times;
								final Dist1 RX10_TEMP100 = X10_TEMP93.distValue;
								final Region1 RX10_TEMP101 = RX10_TEMP100.dReg;
								final int RX10_TEMP102 = Program.searchPointInRegion1(RX10_TEMP101, p1);
								final int RX10_TEMP103 = 0;
								final boolean RX10_TEMP104 = RX10_TEMP102<RX10_TEMP103;
								if (RX10_TEMP104) {
									String RX10_TEMP105 = "Array access index out of bounds";
									throw new RuntimeException(RX10_TEMP105);
								}
								final int RX10_TEMP106 = Program.getPlaceFromDist1(RX10_TEMP100, RX10_TEMP102);
								final int RX10_TEMP108 = 0;
								final boolean RX10_TEMP109 = RX10_TEMP106!=RX10_TEMP108;
								if (RX10_TEMP109) {
									String RX10_TEMP107 = "Bad place access for array X10_TEMP93";
									throw new RuntimeException(RX10_TEMP107);
								}
								final double RX10_TEMP110 = Program.getRefArrayValue1double(X10_TEMP93, RX10_TEMP102);
								final double X10_TEMP95 = (RX10_TEMP110);
								final double X10_TEMP96 = (Program.Stream_mySecond());
								final double X10_TEMP99 = (X10_TEMP95 + X10_TEMP96);
								final double X10_TEMP100 = (X10_TEMP99);
								final Dist1 RX10_TEMP111 = X10_TEMP91.distValue;
								final Region1 RX10_TEMP112 = RX10_TEMP111.dReg;
								final int RX10_TEMP113 = Program.searchPointInRegion1(RX10_TEMP112, p1);
								final int RX10_TEMP114 = 0;
								final boolean RX10_TEMP115 = RX10_TEMP113<RX10_TEMP114;
								if (RX10_TEMP115) {
									String RX10_TEMP116 = "Array index out of bounds";
									throw new RuntimeException(RX10_TEMP116);
								}
								final int RX10_TEMP117 = Program.getPlaceFromDist1(RX10_TEMP111, RX10_TEMP113);
								final int RX10_TEMP119 = 0;
								final boolean RX10_TEMP120 = RX10_TEMP117!=RX10_TEMP119;
								if (RX10_TEMP120) {
									String RX10_TEMP118 = "Bad place access for array X10_TEMP91";
									throw new RuntimeException(RX10_TEMP118);
								}
								Program.setRefArrayValue1double(X10_TEMP91, RX10_TEMP113, X10_TEMP100);
							}*/
						//}
					}
				//}
			}
			//finish {
				final Dist1 X10_TEMP102 = Program.getUniqueDist();
				final Region1 RX10_TEMP122 = X10_TEMP102.dReg;
				final Point1[] RX10_TEMP123 = RX10_TEMP122.pointArray;				
				for(int RX10_TEMP121=0;RX10_TEMP121<RX10_TEMP123.length;RX10_TEMP121++) {
					final Point1 p2 = RX10_TEMP123[RX10_TEMP121];
					final Region1 RX10_TEMP124 = X10_TEMP102.dReg;
					final int RX10_TEMP125 = Program.searchPointInRegion1(RX10_TEMP124, p2);
					final int RX10_TEMP126 = 0;
					final boolean RX10_TEMP127 = RX10_TEMP125<RX10_TEMP126;
					if(RX10_TEMP127) {
						final String RX10_TEMP128 = "Point p2 not found in the distribution X10_TEMP102.";
						throw new RuntimeException(RX10_TEMP128);
					}
					final int RX10_TEMP129 = Program.getPlaceFromDist1(X10_TEMP102, RX10_TEMP125);
					final int X10_TEMP103 = RX10_TEMP129;
					//async(X10_TEMP103) {
						final Dist1 X10_TEMP105 = tempSd.D;
						final int X10_TEMP106 = 0;
						final Dist1 X10_TEMP108 = Program.restrictDist1(X10_TEMP105,X10_TEMP106);
						final Region1 RX10_TEMP131 = X10_TEMP108.dReg;
						final Point1[] RX10_TEMP132 = RX10_TEMP131.pointArray;
						/*for(int RX10_TEMP130=0;RX10_TEMP130<RX10_TEMP132.length;RX10_TEMP130++) {
							final Point1 p3 = RX10_TEMP132[RX10_TEMP130];
							final doubleRefArray1 X10_TEMP109 = tempSd.a;
							final Dist1 RX10_TEMP133 = X10_TEMP109.distValue;
							final Region1 RX10_TEMP134 = RX10_TEMP133.dReg;
							final int RX10_TEMP135 = Program.searchPointInRegion1(RX10_TEMP134, p3);
							final int RX10_TEMP136 = 0;
							final boolean RX10_TEMP137 = RX10_TEMP135<RX10_TEMP136;
							if (RX10_TEMP137) {
								String RX10_TEMP138 = "Array access index out of bounds";
								throw new RuntimeException(RX10_TEMP138);
							}
							final int RX10_TEMP139 = Program.getPlaceFromDist1(RX10_TEMP133, RX10_TEMP135);
							final int RX10_TEMP141 = 0;
							final boolean RX10_TEMP142 = RX10_TEMP139!=RX10_TEMP141;
							if (RX10_TEMP142) {
								String RX10_TEMP140 = "Bad place access for array X10_TEMP109";
								throw new RuntimeException(RX10_TEMP140);
							}
							final double RX10_TEMP143 = Program.getRefArrayValue1double(X10_TEMP109, RX10_TEMP135);
							final double X10_TEMP118 = (RX10_TEMP143);
							final doubleRefArray1 X10_TEMP111 = tempSd.b;
							final Dist1 RX10_TEMP144 = X10_TEMP111.distValue;
							final Region1 RX10_TEMP145 = RX10_TEMP144.dReg;
							final int RX10_TEMP146 = Program.searchPointInRegion1(RX10_TEMP145, p3);
							final int RX10_TEMP147 = 0;
							final boolean RX10_TEMP148 = RX10_TEMP146<RX10_TEMP147;
							if (RX10_TEMP148) {
								String RX10_TEMP149 = "Array access index out of bounds";
								throw new RuntimeException(RX10_TEMP149);
							}
							final int RX10_TEMP150 = Program.getPlaceFromDist1(RX10_TEMP144, RX10_TEMP146);
							final int RX10_TEMP152 = 0;
							final boolean RX10_TEMP153 = RX10_TEMP150!=RX10_TEMP152;
							if (RX10_TEMP153) {
								String RX10_TEMP151 = "Bad place access for array X10_TEMP111";
								throw new RuntimeException(RX10_TEMP151);
							}
							final double RX10_TEMP154 = Program.getRefArrayValue1double(X10_TEMP111, RX10_TEMP146);
							final double X10_TEMP116 = (RX10_TEMP154);
							final doubleRefArray1 X10_TEMP113 = tempSd.c;
							final Dist1 RX10_TEMP155 = X10_TEMP113.distValue;
							final Region1 RX10_TEMP156 = RX10_TEMP155.dReg;
							final int RX10_TEMP157 = Program.searchPointInRegion1(RX10_TEMP156, p3);
							final int RX10_TEMP158 = 0;
							final boolean RX10_TEMP159 = RX10_TEMP157<RX10_TEMP158;
							if (RX10_TEMP159) {
								String RX10_TEMP160 = "Array access index out of bounds";
								throw new RuntimeException(RX10_TEMP160);
							}
							final int RX10_TEMP161 = Program.getPlaceFromDist1(RX10_TEMP155, RX10_TEMP157);
							final int RX10_TEMP163 = 0;
							final boolean RX10_TEMP164 = RX10_TEMP161!=RX10_TEMP163;
							if (RX10_TEMP164) {
								String RX10_TEMP162 = "Bad place access for array X10_TEMP113";
								throw new RuntimeException(RX10_TEMP162);
							}
							final double RX10_TEMP165 = Program.getRefArrayValue1double(X10_TEMP113, RX10_TEMP157);
							final double X10_TEMP115 = (RX10_TEMP165);
							final double X10_TEMP117 = (_Stream_alpha * X10_TEMP115);
							final double X10_TEMP119 = (X10_TEMP116 + X10_TEMP117);
							final boolean X10_TEMP121 = X10_TEMP118!=X10_TEMP119;
							if(X10_TEMP121) {
								final int X10_TEMP123 = 0;
								//async(X10_TEMP123) {
									final booleanRefArray1 X10_TEMP124 = tempSd.verified;
									final int X10_TEMP126 = (0);
									final boolean X10_TEMP129 = (false);
									final boolean X10_TEMP130 = (X10_TEMP129);
									final Point1 RX10_TEMP166 = new Point1(X10_TEMP126);
									final Dist1 RX10_TEMP167 = X10_TEMP124.distValue;
									final Region1 RX10_TEMP168 = RX10_TEMP167.dReg;
									final int RX10_TEMP169 = Program.searchPointInRegion1(RX10_TEMP168, RX10_TEMP166);
									final int RX10_TEMP170 = 0;
									final boolean RX10_TEMP171 = RX10_TEMP169<RX10_TEMP170;
									if (RX10_TEMP171) {
										String RX10_TEMP172 = "Array index out of bounds";
										throw new RuntimeException(RX10_TEMP172);
									}
									final int RX10_TEMP173 = Program.getPlaceFromDist1(RX10_TEMP167, RX10_TEMP169);
									final int RX10_TEMP175 = 0;
									final boolean RX10_TEMP176 = RX10_TEMP173!=RX10_TEMP175;
									if (RX10_TEMP176) {
										String RX10_TEMP174 = "Bad place access for array X10_TEMP124";
										throw new RuntimeException(RX10_TEMP174);
									}
									Program.setRefArrayValue1boolean(X10_TEMP124, RX10_TEMP169, X10_TEMP130);
								//}
							}
						}*/
					//}
				}
			//}
		//}
		double mini = (10000000L);
		final int X10_TEMP137 = (0);
		final int X10_TEMP133 = (1);
		final int X10_TEMP135 = (_Stream_NUM_TIMES - X10_TEMP133);
		final int X10_TEMP138 = ((int)X10_TEMP135);
		Region1 rr = Program.createNewRegion1R(X10_TEMP137, X10_TEMP138);
		final Point1[] RX10_TEMP178 = rr.pointArray;
		/*for(int RX10_TEMP177=0;RX10_TEMP177<RX10_TEMP178.length;RX10_TEMP177++) {
			final Point1 p1 = RX10_TEMP178[RX10_TEMP177];
			final doubleRefArray1 X10_TEMP141 = tempSd.times;
			final Dist1 RX10_TEMP179 = X10_TEMP141.distValue;
			final Region1 RX10_TEMP180 = RX10_TEMP179.dReg;
			final int RX10_TEMP181 = Program.searchPointInRegion1(RX10_TEMP180, p1);
			final int RX10_TEMP182 = 0;
			final boolean RX10_TEMP183 = RX10_TEMP181<RX10_TEMP182;
			if (RX10_TEMP183) {
				String RX10_TEMP184 = "Array access index out of bounds";
				throw new RuntimeException(RX10_TEMP184);
			}
			final int RX10_TEMP185 = Program.getPlaceFromDist1(RX10_TEMP179, RX10_TEMP181);
			final int RX10_TEMP187 = 0;
			final boolean RX10_TEMP188 = RX10_TEMP185!=RX10_TEMP187;
			if (RX10_TEMP188) {
				String RX10_TEMP186 = "Bad place access for array X10_TEMP141";
				throw new RuntimeException(RX10_TEMP186);
			}
			final double RX10_TEMP189 = Program.getRefArrayValue1double(X10_TEMP141, RX10_TEMP181);
			final double X10_TEMP143 = (RX10_TEMP189);
			final boolean X10_TEMP145 = X10_TEMP143<mini;
			if(X10_TEMP145) {
				final doubleRefArray1 X10_TEMP146 = tempSd.times;
				final Dist1 RX10_TEMP190 = X10_TEMP146.distValue;
				final Region1 RX10_TEMP191 = RX10_TEMP190.dReg;
				final int RX10_TEMP192 = Program.searchPointInRegion1(RX10_TEMP191, p1);
				final int RX10_TEMP193 = 0;
				final boolean RX10_TEMP194 = RX10_TEMP192<RX10_TEMP193;
				if (RX10_TEMP194) {
					String RX10_TEMP195 = "Array access index out of bounds";
					throw new RuntimeException(RX10_TEMP195);
				}
				final int RX10_TEMP196 = Program.getPlaceFromDist1(RX10_TEMP190, RX10_TEMP192);
				final int RX10_TEMP198 = 0;
				final boolean RX10_TEMP199 = RX10_TEMP196!=RX10_TEMP198;
				if (RX10_TEMP199) {
					String RX10_TEMP197 = "Bad place access for array X10_TEMP146";
					throw new RuntimeException(RX10_TEMP197);
				}
				final double RX10_TEMP200 = Program.getRefArrayValue1double(X10_TEMP146, RX10_TEMP192);
				final double X10_TEMP149 = (RX10_TEMP200);
				mini = (X10_TEMP149);
			}
		}*/
		/*final booleanRefArray1 X10_TEMP152 = tempSd.verified;
		final int X10_TEMP154 = (0);
		final Point1 RX10_TEMP201 = new Point1(X10_TEMP154);
		final Dist1 RX10_TEMP202 = X10_TEMP152.distValue;
		final Region1 RX10_TEMP203 = RX10_TEMP202.dReg;
		final int RX10_TEMP204 = Program.searchPointInRegion1(RX10_TEMP203, RX10_TEMP201);
		final int RX10_TEMP205 = 0;
		final boolean RX10_TEMP206 = RX10_TEMP204<RX10_TEMP205;
		if (RX10_TEMP206) {
			String RX10_TEMP207 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP207);
		}
		final int RX10_TEMP208 = Program.getPlaceFromDist1(RX10_TEMP202, RX10_TEMP204);
		final int RX10_TEMP210 = 0;
		final boolean RX10_TEMP211 = RX10_TEMP208!=RX10_TEMP210;
		if (RX10_TEMP211) {
			String RX10_TEMP209 = "Bad place access for array X10_TEMP152";
			throw new RuntimeException(RX10_TEMP209);
		}
		final boolean RX10_TEMP212 = Program.getRefArrayValue1boolean(X10_TEMP152, RX10_TEMP204);
		final boolean X10_TEMP156 = (RX10_TEMP212);
		Program.Stream_printStats(_Stream_N, mini, X10_TEMP156);*/
	}

	public static double Stream_mySecond() {
		final double X10_TEMP1 = (System.currentTimeMillis());
		final double X10_TEMP2 = (1.e6);
		final double X10_TEMP3 = (X10_TEMP1 * X10_TEMP2);
		final int X10_TEMP4 = (1000);
		final double X10_TEMP6 = (X10_TEMP3 / X10_TEMP4);
		final double X10_TEMP7 = ((double)X10_TEMP6);
		final double X10_TEMP8 = (1.e-6);
		final double X10_TEMP10 = (X10_TEMP7 * X10_TEMP8);
		final double X10_TEMP12 = ((double)X10_TEMP10);
		return X10_TEMP12;
	}

	public static void Stream_printStats(final long N, final double time, final boolean verified) {
		final String X10_TEMP1 = ("Number of places=");
		final int X10_TEMP2 = 4;
		final String X10_TEMP4 = (X10_TEMP1 + X10_TEMP2);
		System.out.println(X10_TEMP4);
		final int X10_TEMP5 = (3);
		final int X10_TEMP6 = (8);
		final long X10_TEMP7 = (X10_TEMP5 * X10_TEMP6);
		final long X10_TEMP8 = (X10_TEMP7 * N);
		final long X10_TEMP10 = (X10_TEMP8 / _Stream_MEG);
		long size1 = (X10_TEMP10);
		final int X10_TEMP12 = (3);
		final int X10_TEMP13 = (8);
		final long X10_TEMP14 = (X10_TEMP12 * X10_TEMP13);
		final long X10_TEMP16 = (X10_TEMP14 * N);
		final double X10_TEMP17 = (1.0E9);
		final double X10_TEMP19 = (X10_TEMP17 * time);
		double rate = (X10_TEMP16 / X10_TEMP19);
		final String X10_TEMP21 = ("Size of arrays: ");
		final String X10_TEMP22 = (X10_TEMP21 + size1);
		final String X10_TEMP23 = (" MB (total)");
		final String X10_TEMP25 = (X10_TEMP22 + X10_TEMP23);
		final int X10_TEMP24 = 4;
		final long X10_TEMP26 = (size1 / X10_TEMP24);
		final String X10_TEMP27 = (X10_TEMP25 + X10_TEMP26);
		final String X10_TEMP28 = (" MB (per place)");
		final String X10_TEMP30 = (X10_TEMP27 + X10_TEMP28);
		System.out.println(X10_TEMP30);
		final String X10_TEMP31 = ("Min time: ");
		final String X10_TEMP32 = (X10_TEMP31 + time);
		final String X10_TEMP33 = (" rate=");
		final String X10_TEMP34 = (X10_TEMP32 + X10_TEMP33);
		final String X10_TEMP35 = (X10_TEMP34 + rate);
		final String X10_TEMP36 = (" GB/s");
		final String X10_TEMP38 = (X10_TEMP35 + X10_TEMP36);
		System.out.println(X10_TEMP38);
		final String X10_TEMP45 = ("Result is ");
		final boolean X10_TEMP39 = verified;
		String X10_TEMP42 = "NOT verified.";
		if(X10_TEMP39) {
			X10_TEMP42 = "verified.";
		}
		final String X10_TEMP43 = X10_TEMP42;
		final String X10_TEMP44 = (X10_TEMP43);
		final String X10_TEMP47 = (X10_TEMP45 + X10_TEMP44);
		System.out.println(X10_TEMP47);
	}

	public static int _Timer_max_counters_init() {
		final int X10_TEMP2 = (64);
		return X10_TEMP2;
	}

	public static void Timer_start(final Timer X10_TEMP0, final int n) {
		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.start_time;
		final double X10_TEMP5 = (System.currentTimeMillis());
		final double X10_TEMP6 = (X10_TEMP5);
		final Point1 RX10_TEMP0 = new Point1(n);
		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;
		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;
		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0);
		final int RX10_TEMP4 = 0;
		final boolean RX10_TEMP5 = RX10_TEMP3<RX10_TEMP4;
		if (RX10_TEMP5) {
			String RX10_TEMP6 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP6);
		}
		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3);
		final int RX10_TEMP9 = 0;
		final boolean RX10_TEMP10 = RX10_TEMP7!=RX10_TEMP9;
		if (RX10_TEMP10) {
			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";
			throw new RuntimeException(RX10_TEMP8);
		}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP3, X10_TEMP6);
	}

	public static void Timer_stop(final Timer X10_TEMP0, final int n) {
		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.elapsed_time;
		final double X10_TEMP5 = (System.currentTimeMillis());
		final doubleRefArray1 X10_TEMP3 = X10_TEMP0.start_time;
		final Point1 RX10_TEMP0 = new Point1(n);
		final Dist1 RX10_TEMP1 = X10_TEMP3.distValue;
		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;
		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0);
		final int RX10_TEMP4 = 0;
		final boolean RX10_TEMP5 = RX10_TEMP3<RX10_TEMP4;
		if (RX10_TEMP5) {
			String RX10_TEMP6 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP6);
		}
		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3);
		final int RX10_TEMP9 = 0;
		final boolean RX10_TEMP10 = RX10_TEMP7!=RX10_TEMP9;
		if (RX10_TEMP10) {
			String RX10_TEMP8 = "Bad place access for array X10_TEMP3";
			throw new RuntimeException(RX10_TEMP8);
		}
		final double RX10_TEMP11 = Program.getRefArrayValue1double(X10_TEMP3, RX10_TEMP3);
		final double X10_TEMP6 = (RX10_TEMP11);
		final double X10_TEMP9 = (X10_TEMP5 - X10_TEMP6);
		final double X10_TEMP10 = (X10_TEMP9);
		final Point1 RX10_TEMP12 = new Point1(n);
		final Dist1 RX10_TEMP13 = X10_TEMP1.distValue;
		final Region1 RX10_TEMP14 = RX10_TEMP13.dReg;
		final int RX10_TEMP15 = Program.searchPointInRegion1(RX10_TEMP14, RX10_TEMP12);
		final int RX10_TEMP16 = 0;
		final boolean RX10_TEMP17 = RX10_TEMP15<RX10_TEMP16;
		if (RX10_TEMP17) {
			String RX10_TEMP18 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP18);
		}
		final int RX10_TEMP19 = Program.getPlaceFromDist1(RX10_TEMP13, RX10_TEMP15);
		final int RX10_TEMP21 = 0;
		final boolean RX10_TEMP22 = RX10_TEMP19!=RX10_TEMP21;
		if (RX10_TEMP22) {
			String RX10_TEMP20 = "Bad place access for array X10_TEMP1";
			throw new RuntimeException(RX10_TEMP20);
		}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP15, X10_TEMP10);
		final doubleRefArray1 X10_TEMP11 = X10_TEMP0.elapsed_time;
		final doubleRefArray1 X10_TEMP13 = X10_TEMP0.elapsed_time;
		final Point1 RX10_TEMP23 = new Point1(n);
		final Dist1 RX10_TEMP24 = X10_TEMP13.distValue;
		final Region1 RX10_TEMP25 = RX10_TEMP24.dReg;
		final int RX10_TEMP26 = Program.searchPointInRegion1(RX10_TEMP25, RX10_TEMP23);
		final int RX10_TEMP27 = 0;
		final boolean RX10_TEMP28 = RX10_TEMP26<RX10_TEMP27;
		if (RX10_TEMP28) {
			String RX10_TEMP29 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP29);
		}
		final int RX10_TEMP30 = Program.getPlaceFromDist1(RX10_TEMP24, RX10_TEMP26);
		final int RX10_TEMP32 = 0;
		final boolean RX10_TEMP33 = RX10_TEMP30!=RX10_TEMP32;
		if (RX10_TEMP33) {
			String RX10_TEMP31 = "Bad place access for array X10_TEMP13";
			throw new RuntimeException(RX10_TEMP31);
		}
		final double RX10_TEMP34 = Program.getRefArrayValue1double(X10_TEMP13, RX10_TEMP26);
		final double X10_TEMP15 = (RX10_TEMP34);
		final int X10_TEMP16 = (1000);
		final double X10_TEMP19 = (X10_TEMP15 / X10_TEMP16);
		final double X10_TEMP20 = (X10_TEMP19);
		final Point1 RX10_TEMP35 = new Point1(n);
		final Dist1 RX10_TEMP36 = X10_TEMP11.distValue;
		final Region1 RX10_TEMP37 = RX10_TEMP36.dReg;
		final int RX10_TEMP38 = Program.searchPointInRegion1(RX10_TEMP37, RX10_TEMP35);
		final int RX10_TEMP39 = 0;
		final boolean RX10_TEMP40 = RX10_TEMP38<RX10_TEMP39;
		if (RX10_TEMP40) {
			String RX10_TEMP41 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP41);
		}
		final int RX10_TEMP42 = Program.getPlaceFromDist1(RX10_TEMP36, RX10_TEMP38);
		final int RX10_TEMP44 = 0;
		final boolean RX10_TEMP45 = RX10_TEMP42!=RX10_TEMP44;
		if (RX10_TEMP45) {
			String RX10_TEMP43 = "Bad place access for array X10_TEMP11";
			throw new RuntimeException(RX10_TEMP43);
		}
		Program.setRefArrayValue1double(X10_TEMP11, RX10_TEMP38, X10_TEMP20);
		final doubleRefArray1 X10_TEMP21 = X10_TEMP0.total_time;
		final doubleRefArray1 X10_TEMP23 = X10_TEMP0.total_time;
		final Point1 RX10_TEMP46 = new Point1(n);
		final Dist1 RX10_TEMP47 = X10_TEMP23.distValue;
		final Region1 RX10_TEMP48 = RX10_TEMP47.dReg;
		final int RX10_TEMP49 = Program.searchPointInRegion1(RX10_TEMP48, RX10_TEMP46);
		final int RX10_TEMP50 = 0;
		final boolean RX10_TEMP51 = RX10_TEMP49<RX10_TEMP50;
		if (RX10_TEMP51) {
			String RX10_TEMP52 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP52);
		}
		final int RX10_TEMP53 = Program.getPlaceFromDist1(RX10_TEMP47, RX10_TEMP49);
		final int RX10_TEMP55 = 0;
		final boolean RX10_TEMP56 = RX10_TEMP53!=RX10_TEMP55;
		if (RX10_TEMP56) {
			String RX10_TEMP54 = "Bad place access for array X10_TEMP23";
			throw new RuntimeException(RX10_TEMP54);
		}
		final double RX10_TEMP57 = Program.getRefArrayValue1double(X10_TEMP23, RX10_TEMP49);
		final double X10_TEMP27 = (RX10_TEMP57);
		final doubleRefArray1 X10_TEMP25 = X10_TEMP0.elapsed_time;
		final Point1 RX10_TEMP58 = new Point1(n);
		final Dist1 RX10_TEMP59 = X10_TEMP25.distValue;
		final Region1 RX10_TEMP60 = RX10_TEMP59.dReg;
		final int RX10_TEMP61 = Program.searchPointInRegion1(RX10_TEMP60, RX10_TEMP58);
		final int RX10_TEMP62 = 0;
		final boolean RX10_TEMP63 = RX10_TEMP61<RX10_TEMP62;
		if (RX10_TEMP63) {
			String RX10_TEMP64 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP64);
		}
		final int RX10_TEMP65 = Program.getPlaceFromDist1(RX10_TEMP59, RX10_TEMP61);
		final int RX10_TEMP67 = 0;
		final boolean RX10_TEMP68 = RX10_TEMP65!=RX10_TEMP67;
		if (RX10_TEMP68) {
			String RX10_TEMP66 = "Bad place access for array X10_TEMP25";
			throw new RuntimeException(RX10_TEMP66);
		}
		final double RX10_TEMP69 = Program.getRefArrayValue1double(X10_TEMP25, RX10_TEMP61);
		final double X10_TEMP28 = (RX10_TEMP69);
		final double X10_TEMP31 = (X10_TEMP27 + X10_TEMP28);
		final double X10_TEMP32 = (X10_TEMP31);
		final Point1 RX10_TEMP70 = new Point1(n);
		final Dist1 RX10_TEMP71 = X10_TEMP21.distValue;
		final Region1 RX10_TEMP72 = RX10_TEMP71.dReg;
		final int RX10_TEMP73 = Program.searchPointInRegion1(RX10_TEMP72, RX10_TEMP70);
		final int RX10_TEMP74 = 0;
		final boolean RX10_TEMP75 = RX10_TEMP73<RX10_TEMP74;
		if (RX10_TEMP75) {
			String RX10_TEMP76 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP76);
		}
		final int RX10_TEMP77 = Program.getPlaceFromDist1(RX10_TEMP71, RX10_TEMP73);
		final int RX10_TEMP79 = 0;
		final boolean RX10_TEMP80 = RX10_TEMP77!=RX10_TEMP79;
		if (RX10_TEMP80) {
			String RX10_TEMP78 = "Bad place access for array X10_TEMP21";
			throw new RuntimeException(RX10_TEMP78);
		}
		Program.setRefArrayValue1double(X10_TEMP21, RX10_TEMP73, X10_TEMP32);
	}

	public static double Timer_readTimer(final Timer X10_TEMP0, final int n) {
		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.total_time;
		final Point1 RX10_TEMP0 = new Point1(n);
		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;
		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;
		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0);
		final int RX10_TEMP4 = 0;
		final boolean RX10_TEMP5 = RX10_TEMP3<RX10_TEMP4;
		if (RX10_TEMP5) {
			String RX10_TEMP6 = "Array access index out of bounds";
			throw new RuntimeException(RX10_TEMP6);
		}
		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3);
		final int RX10_TEMP9 = 0;
		final boolean RX10_TEMP10 = RX10_TEMP7!=RX10_TEMP9;
		if (RX10_TEMP10) {
			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";
			throw new RuntimeException(RX10_TEMP8);
		}
		final double RX10_TEMP11 = Program.getRefArrayValue1double(X10_TEMP1, RX10_TEMP3);
		final double X10_TEMP4 = (RX10_TEMP11);
		return X10_TEMP4;
	}

	public static void Timer_resetTimer(final Timer X10_TEMP0, final int n) {
		final doubleRefArray1 X10_TEMP1 = X10_TEMP0.total_time;
		final double X10_TEMP5 = (0);
		final double X10_TEMP6 = (X10_TEMP5);
		final Point1 RX10_TEMP0 = new Point1(n);
		final Dist1 RX10_TEMP1 = X10_TEMP1.distValue;
		final Region1 RX10_TEMP2 = RX10_TEMP1.dReg;
		final int RX10_TEMP3 = Program.searchPointInRegion1(RX10_TEMP2, RX10_TEMP0);
		final int RX10_TEMP4 = 0;
		final boolean RX10_TEMP5 = RX10_TEMP3<RX10_TEMP4;
		if (RX10_TEMP5) {
			String RX10_TEMP6 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP6);
		}
		final int RX10_TEMP7 = Program.getPlaceFromDist1(RX10_TEMP1, RX10_TEMP3);
		final int RX10_TEMP9 = 0;
		final boolean RX10_TEMP10 = RX10_TEMP7!=RX10_TEMP9;
		if (RX10_TEMP10) {
			String RX10_TEMP8 = "Bad place access for array X10_TEMP1";
			throw new RuntimeException(RX10_TEMP8);
		}
		Program.setRefArrayValue1double(X10_TEMP1, RX10_TEMP3, X10_TEMP6);
		final doubleRefArray1 X10_TEMP7 = X10_TEMP0.start_time;
		final double X10_TEMP11 = (0);
		final double X10_TEMP12 = (X10_TEMP11);
		final Point1 RX10_TEMP11 = new Point1(n);
		final Dist1 RX10_TEMP12 = X10_TEMP7.distValue;
		final Region1 RX10_TEMP13 = RX10_TEMP12.dReg;
		final int RX10_TEMP14 = Program.searchPointInRegion1(RX10_TEMP13, RX10_TEMP11);
		final int RX10_TEMP15 = 0;
		final boolean RX10_TEMP16 = RX10_TEMP14<RX10_TEMP15;
		if (RX10_TEMP16) {
			String RX10_TEMP17 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP17);
		}
		final int RX10_TEMP18 = Program.getPlaceFromDist1(RX10_TEMP12, RX10_TEMP14);
		final int RX10_TEMP20 = 0;
		final boolean RX10_TEMP21 = RX10_TEMP18!=RX10_TEMP20;
		if (RX10_TEMP21) {
			String RX10_TEMP19 = "Bad place access for array X10_TEMP7";
			throw new RuntimeException(RX10_TEMP19);
		}
		Program.setRefArrayValue1double(X10_TEMP7, RX10_TEMP14, X10_TEMP12);
		final doubleRefArray1 X10_TEMP13 = X10_TEMP0.elapsed_time;
		final double X10_TEMP17 = (0);
		final double X10_TEMP18 = (X10_TEMP17);
		final Point1 RX10_TEMP22 = new Point1(n);
		final Dist1 RX10_TEMP23 = X10_TEMP13.distValue;
		final Region1 RX10_TEMP24 = RX10_TEMP23.dReg;
		final int RX10_TEMP25 = Program.searchPointInRegion1(RX10_TEMP24, RX10_TEMP22);
		final int RX10_TEMP26 = 0;
		final boolean RX10_TEMP27 = RX10_TEMP25<RX10_TEMP26;
		if (RX10_TEMP27) {
			String RX10_TEMP28 = "Array index out of bounds";
			throw new RuntimeException(RX10_TEMP28);
		}
		final int RX10_TEMP29 = Program.getPlaceFromDist1(RX10_TEMP23, RX10_TEMP25);
		final int RX10_TEMP31 = 0;
		final boolean RX10_TEMP32 = RX10_TEMP29!=RX10_TEMP31;
		if (RX10_TEMP32) {
			String RX10_TEMP30 = "Bad place access for array X10_TEMP13";
			throw new RuntimeException(RX10_TEMP30);
		}
		Program.setRefArrayValue1double(X10_TEMP13, RX10_TEMP25, X10_TEMP18);
	}

	public static void Timer_resetAllTimers(final Timer X10_TEMP0) {
		int i = (0);
		boolean X10_TEMP4 = i<_Timer_max_counters;
		while(X10_TEMP4) {
			Program.Timer_resetTimer(X10_TEMP0, i);
			final int X10_TEMP6 = (i);
			final int X10_TEMP7 = 1;
			i = i + X10_TEMP7;
			X10_TEMP4 = i<_Timer_max_counters;
		}
	}

	public static int constantSearchRegion1(final Region1 r, final Point1 target) {
		final int zero = 0;
		final int one = 1;
		
		final int dim0 = r.dim0;
		final int low0 = r.low0;
		final int high0 = low0 + dim0;
		int pt0 = target.f0;
		final boolean lbound0 = pt0 < low0;
		final boolean hbound0 = pt0 >= high0;
		
		final int dim1 = 1;
		
		boolean outRegion = false;
		outRegion = outRegion || lbound0;
		outRegion = outRegion || hbound0;
		if(outRegion) {
			int notFound = 0;
			notFound = notFound - one;
			return notFound;
		}
		
		final int stride1 = 1;
		final int stride0 = stride1 * dim1;
		
		pt0 = pt0 - low0;
		final int offset0 = stride0 * pt0;
		
		int found = 0;
		found = found + offset0;
		return found;
	}

	public static double getRefArrayValue1double(final doubleRefArray1 array, final int index) {
	 	final int pl = 0;
		final int placeIndex = 0;
		final Dist1 dArray = array.distValue;
		final Dist dDist = dArray.dDist;
		final int[] runSum = dDist.runningSum;
		final int localIndex = runSum[index];
		final doubleStub[] contents = array.contents;
		final doubleStub indexStub = contents[placeIndex];
		final double[] localArray = indexStub.localArray;
		final double returnValue = localArray[localIndex];
		return returnValue;
	}

	public static Dist1 restrictDist1(final Dist1 d, final int p) {
		final int zero = 0;
		final int one = 1;
		final int h = 0;
		final Region1 dReg = d.dReg;
		final Dist dDist = d.dDist;
		final Point1[] dArray = dReg.pointArray;
		final int[] dPlace = dDist.placeArray;
		final int[] dCounts = dDist.counts;
		final int index = 0;
		int numPoints = dCounts[index];
		final int rSizeNumPoints = numPoints;
		final int rSize = numPoints-one;
		final int tempReg = rSize+1;
		final int tempDist = rSize+1;
		final int[] rPlace = new int[tempReg];
		for(int pt = 0; pt < tempReg; pt++)
		{
			rPlace[pt] = p;
		}


		final int[] tempArray = new int[tempDist];
		final boolean cond1 = numPoints > zero;
		if(cond1) {
			numPoints = 0;
			for(int pt=0; pt<dArray.length;pt++) {
				final int dP = dPlace[pt];
				final boolean cond2 = p==dP;
				if(cond2) {
					final int i = pt;
					tempArray[numPoints] = (i);
					numPoints = numPoints + one;
				}
			}
		}
		final Point1[] pointArray = new Point1[tempReg];
		for(int pt=0;pt<tempReg;pt++) {
			final int idx = tempArray[pt];
			final Point1 dpt = dArray[idx];
			pointArray[pt] = dpt;
		}
		final Region1 dpReg = new Region1(pointArray);
		final Dist dpDist = new Dist(rPlace, rSizeNumPoints);
		final Dist1 dpDistn = new Dist1(dpReg, dpDist);
		return dpDistn;
	}

	public static int binarySearchRegion1(final Region1 r, final Point1 target) {
		final Point1[] pointArray = r.pointArray;
		int start = 0;
		int end = r.regSize;
		final int zero = 0;
		final int one = 1;
		final int two = 2;
		end = end - one;
		int result = zero - one;
		boolean notDone = start <= end;
		while (notDone)	{
			int mid = start + end;
			mid = mid/two;
			final Point1 temp = pointArray[mid];
			final int pointCompare = Program.comparePoint1(target, temp);
			final boolean eq = pointCompare == zero;
			final boolean lt = pointCompare == one;
			if (eq)	{
				return mid;
			}
			else {
				if (lt)	{
					end = mid - one;
				}
				else {
					start = mid + one;
				}
			}
			notDone = start <= end;
		}
		return result;
	}

	public static Dist1 getBlockDist1(final Region1 r) {
		final int rSize = r.regSize;
		final int zero = 0;
		final int one = 1;
		final int rSizeMinusOne = rSize - one;
		final int dReg = rSizeMinusOne+1;
		final int dDist = rSizeMinusOne+1;
		final int[] placeArray = new int[dDist];
		final int N = 4;
		final int q = rSize%N;
		final int p = rSize/N;
		int blockSize = p + one;
		int arraySize = q * blockSize;
		int offset = 0;
		int initPlace = 0;
		Program.getCyclic(placeArray, arraySize, initPlace, blockSize);
		int remainingPlaces = N - q;
		final boolean cond = remainingPlaces == zero;
		if(cond) {
			final int[] vPlaceArray = new int[dReg];
			for(int pt=0; pt<dReg; pt++)
			{
				final int tempPl = placeArray[pt]; 
				vPlaceArray[pt] = tempPl;
			}
			final Dist pointDist1 = new Dist(vPlaceArray, rSize);
			final Dist1 retDist = new Dist1(r, pointDist1);
			return retDist;
		}
		offset = arraySize;
		blockSize = p;
		arraySize = remainingPlaces * blockSize;
		initPlace = 0;
		int chunk = blockSize;
		final boolean ifCond = blockSize > arraySize;
		if(ifCond) {
			chunk = arraySize;
		}
		int index = offset;
		int dSize = index + chunk;
		dSize = dSize - one;
		final int ub0 = chunk - one;
		final int pointReg0 = ub0+1;
		for(int pt=0; pt<pointReg0; pt++) {
			final int tempPt = pt + index;
			placeArray[tempPt] = initPlace;
		}
		index = index + chunk;
		arraySize = arraySize - chunk;
		int pl = 0;
		boolean whileCond = arraySize != zero;
		while(whileCond) {
			final boolean tailCond = chunk > arraySize;
			if(tailCond) {
				dSize = index + arraySize;
				dSize = dSize - one;
				final int ub = arraySize - one;
				final int pointReg1 = ub+1;
				for(int pt=0; pt<pointReg1; pt++) {
					final int tempPt = pt + index;
					placeArray[tempPt] = pl;
				}
				arraySize = 0;
			}
			else {
				dSize = index + chunk;
				dSize = dSize - one;
				final int ub = chunk - one;
				final int pointReg1 = ub+1;
				for(int pt=0;pt<pointReg1;pt++) {
					final int tempPt = pt + index;
					placeArray[tempPt] = pl;
				}
				index = index + chunk;
				arraySize = arraySize - chunk;
			}
			pl = 0;
			whileCond = arraySize != zero;
		}
		final int[] vPlaceArray = new int[dReg];
		for(int pt=0;pt<dReg;pt++) 
		{
			final int tempPl = placeArray[pt]; 
			vPlaceArray[pt] = tempPl;
		}
		final Dist pointDist1 = new Dist(vPlaceArray, rSize);
		final Dist1 retDist = new Dist1(r, pointDist1);
		return retDist;
	}

	public static boolean getRefArrayValue1boolean(final booleanRefArray1 array, final int index) {
	 	final int pl = 0;
		final int placeIndex = 0;
		final Dist1 dArray = array.distValue;
		final Dist dDist = dArray.dDist;
		final int[] runSum = dDist.runningSum;
		final int localIndex = runSum[index];
		final booleanStub[] contents = array.contents;
		final booleanStub indexStub = contents[placeIndex];
		final boolean[] localArray = indexStub.localArray;
		final boolean returnValue = localArray[localIndex];
		return returnValue;
	}

	public static void setRefArrayValue1double(final doubleRefArray1 array, final int index, final double val) {
	 	final int pl = 0;
		final int placeIndex = 0;
		final Dist1 dArray = array.distValue;
		final Dist dDist = dArray.dDist;
		final int[] runSum = dDist.runningSum;
		final int localIndex = runSum[index];
		final doubleStub[] contents = array.contents;
		final doubleStub indexStub = contents[placeIndex];
		final double[] localArray = indexStub.localArray;
		localArray[localIndex] = (val);
	}

	public static Dist1 getUniqueDist() {
		final int one = 1;
		final int zero = 0;
		final int maxPlaces = 4;
		final int rSize = maxPlaces - one;
		final int placeRegion = rSize+1;
		final Point1[] pointArray = new Point1[placeRegion];
		for(int p=0;p<placeRegion;p++) {
			final int i = p;
			final Point1 pt1 = new Point1(i);
			pointArray[p] = pt1;
		}
		final int[] vPlaceArray = new int[placeRegion];
		for(int p=0;p<placeRegion;p++) {
			final int i = p;
			final int pl1 = 0;
			vPlaceArray[p] = pl1;
		}
		final Region1 reg = new Region1(pointArray, zero, maxPlaces);
		final Dist pointDist1 = new Dist(vPlaceArray, maxPlaces);
		final Dist1 retDist = new Dist1(reg, pointDist1);
		return retDist;
	}

	public static int getPlaceFromDist1(final Dist1 dn, final int index) {
		final Dist d = dn.dDist;
		final int[] placeArray = d.placeArray;
		final int retPlace = placeArray[index];
		return retPlace;
	}

	public static void getCyclic(final int[] placeArray, final int arraySize, final int initPlace, final int blockSize) {
		final int zero = 0;
		final int one = 1;
		int N = arraySize;
		int chunk = blockSize;
		final boolean ifCond = blockSize > N;
		if(ifCond) {
			chunk = N;
		}
		int index = 0;
		int dSize = index + chunk;
		dSize = dSize - one;
		final int pointReg = dSize+1;
		for(int p=0;p<pointReg;p++) {
			placeArray[p] = initPlace;
		}
		index = index + chunk;
		N = N - chunk;
		int pl = 0;
		boolean whileCond = N != zero;
		while(whileCond) {
			final boolean tailCond = chunk > N;
			if(tailCond) {
				dSize = index + N;
				dSize = dSize - one;
				final int ub = N - one;
				final int pointReg1 = ub+1;
				for(int p=0;p<pointReg1;p++) {
					final int tempPt = p + index;
					placeArray[tempPt] = pl;
				}
				N = 0;
			}
			else {
				dSize = index + chunk;
				dSize = dSize - one;
				final int ub = chunk - one;
				final int pointReg1 = ub+1;
				for(int p=0;p<pointReg1;p++) {
					final int tempPt = p + index;
					placeArray[tempPt] = pl;
				}
				index = index + chunk;
				N = N - chunk;
			}
			pl = 0;
			whileCond = N != zero;
		}
	}

	public static void setRefArrayValue1boolean(final booleanRefArray1 array, final int index, final boolean val) {
	 	final int pl = 0;
		final int placeIndex = 0;
		final Dist1 dArray = array.distValue;
		final Dist dDist = dArray.dDist;
		final int[] runSum = dDist.runningSum;
		final int localIndex = runSum[index];
		final booleanStub[] contents = array.contents;
		final booleanStub indexStub = contents[placeIndex];
		final boolean[] localArray = indexStub.localArray;
		localArray[localIndex] = (val);
	}

	public static int getDistLocalCount1(final Dist1 dn, final int placeIndex) {
		final Dist d = dn.dDist;
		final int[] counts = d.counts;
		final int localCount = counts[placeIndex];
		return localCount;
	}

	/**
	  * This method compares two points of the same rank with each other.
	  * @return 0 if pt1 = pt2, 1 if pt1<pt2, 2 if pt1>pt2
	  */
	public static int comparePoint1(final Point1 pt1, final Point1 pt2) {
		final int zero = 0;
		final int one = 1;
		final int two = 2;
		int point1 = 0;
		int point2 = 0;
		boolean lt = false;
		boolean gt = false;
		// Comparing the 0th coordinate
		point1 = pt1.f0;
		point2 = pt2.f0;
		lt = point1 < point2;
		gt = point1 > point2;
		if(lt) {
			return one;
		}
		if(gt) {
			return two;
		}
		return zero;
	}

	public static int searchPointInRegion1(final Region1 r, final Point1 target) {
		final boolean regType = r.regType;
		if(regType) {
			final int constantSearch = Program.constantSearchRegion1(r, target);
			return constantSearch;
		}
		final int binarySearch = Program.binarySearchRegion1(r, target);
		return binarySearch;
	}

	public static Dist1 getPlaceDist1(final Region1 r, final int p) {
		final int rSize = r.regSize;
		final int one = 1;
		final int rSizeMinusOne = rSize - one;
		final int dReg = rSizeMinusOne+1;
		final int[] vPlaceArray = new int[dReg];
		for(int pt=0;pt<dReg;pt++){
			vPlaceArray[pt] = p;
		}
		final Dist pointDist = new Dist(vPlaceArray, rSize);
		final Dist1 retDist = new Dist1(r, pointDist);
		return retDist;
	}

	public static int[] initDist(final int[] tempArr, final int tempReg) {
		final int[] vTemp = new int[tempReg];
		for(int p=0; p<tempReg; p++) {
			final int tempInt = tempArr[p];
			vTemp[p] = tempInt;
		}
		return vTemp;
	}

	public static Region1 createNewRegion1R(final int v1_0, final int v1_1) {
		final int zero = 0;
		final int one = 1;
		
		boolean regType = true;
		final boolean tempBool1 = true;
		regType = regType && tempBool1;
		
		
		final int l1 = v1_1 - v1_0;
		final int dim1 = l1 + one;
		
		final int stride1 = 1;
		final int stride0 = stride1 * dim1;
		
		final int rSize = stride0 - one;
		final int regArr = rSize+1;
		
		final Point1[] ptArray = new Point1[regArr];
		for(int p=0; p<regArr; p++) {
			int f1 = p / stride1;
			f1 = f1 % dim1;
			f1 = f1 + v1_0;
			
			final Point1 retPoint = new Point1(f1);
			ptArray[p] = retPoint;
		}
		if(regType) {
			final Region1 retRegRegular = new Region1(ptArray, v1_0, dim1);
			return retRegRegular;
		}
		final Region1 retReg = new Region1(ptArray);
		return retReg;
	}

}
class StreamData {
	public final booleanRefArray1 verified;
	public final Dist1 D;
	public final doubleRefArray1 times;
	public final doubleRefArray1 a;
	public final doubleRefArray1 b;
	public final doubleRefArray1 c;


	public StreamData(final long N, final int NUM_TIMES) {
		final int X10_TEMP3 = (0);
		final int X10_TEMP4 = (0);
		final Region1 X10_TEMP5 = Program.createNewRegion1R(X10_TEMP3, X10_TEMP4);
		final int X10_TEMP6 = 0;
		final Dist1 dverified = Program.getPlaceDist1(X10_TEMP5, X10_TEMP6);
		final booleanRefArray1 X10_TEMP11 = this.StreamData_initVerified(dverified);
		verified = X10_TEMP11;
		final int X10_TEMP17 = (0);
		final int X10_TEMP13 = (1);
		final long X10_TEMP15 = (N - X10_TEMP13);
		final int X10_TEMP18 = ((int)X10_TEMP15);
		final Region1 X10_TEMP20 = Program.createNewRegion1R(X10_TEMP17, X10_TEMP18);
		final Dist1 X10_TEMP21 = Program.getBlockDist1(X10_TEMP20);
		final Dist1 temp_D = X10_TEMP21;
		D = temp_D;
		final int X10_TEMP30 = (0);
		final int X10_TEMP26 = (1);
		final int X10_TEMP28 = (NUM_TIMES - X10_TEMP26);
		final int X10_TEMP31 = ((int)X10_TEMP28);
		final Region1 X10_TEMP32 = Program.createNewRegion1R(X10_TEMP30, X10_TEMP31);
		final int X10_TEMP33 = 0;
		final Dist1 X10_TEMP35 = Program.getPlaceDist1(X10_TEMP32, X10_TEMP33);
		final doubleRefArray1 X10_TEMP37 = this.StreamData_initArray(X10_TEMP35);
		times = X10_TEMP37;
		final doubleRefArray1 X10_TEMP41 = this.StreamData_initArray(temp_D);
		a = X10_TEMP41;
		final doubleRefArray1 X10_TEMP45 = this.StreamData_initArray(temp_D);
		b = X10_TEMP45;
		final doubleRefArray1 X10_TEMP49 = this.StreamData_initArray(temp_D);
		c = X10_TEMP49;
	}



	public booleanRefArray1 StreamData_initVerified(final Dist1 d) {
		final Region1 RX10_TEMP0 = d.dReg;
		final int RX10_TEMP1 = 0;
		final int RX10_TEMP2 = 1;
		int RX10_TEMP3 = 4;
		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;
		final int RX10_TEMP4 = RX10_TEMP3+1;
		final int RX10_TEMP5 = RX10_TEMP3+1;
		final booleanStub[] RX10_TEMP6 = new booleanStub[RX10_TEMP5];
		//finish {
			for(int RX10_TEMP7=0;RX10_TEMP7<RX10_TEMP4;RX10_TEMP7++) {
				final int RX10_TEMP8 = 0;
				final int RX10_TEMP9 = RX10_TEMP7;
				final int RX10_TEMP10 = 0;
				final int RX10_TEMP11 = Program.getDistLocalCount1(d, RX10_TEMP9);
				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;
				//async(RX10_TEMP10) {
					final int RX10_TEMP14= RX10_TEMP12+1;
					final boolean[] RX10_TEMP15 = new boolean [RX10_TEMP14];
					for(int RX10_TEMP13=0; RX10_TEMP13<RX10_TEMP13; RX10_TEMP13++) {
						final boolean X10_TEMP2 = (true);
						RX10_TEMP15[RX10_TEMP13] = X10_TEMP2;
					}
					final booleanStub RX10_TEMP16 = new booleanStub(RX10_TEMP15);
					//async(RX10_TEMP8) {
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
					//}
				//}
			}
		//}
		final booleanStub[] RX10_TEMP17 = new booleanStub[RX10_TEMP4];
		for(int RX10_TEMP19=0;RX10_TEMP19<RX10_TEMP4;RX10_TEMP19++){
			final booleanStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];
			RX10_TEMP17[RX10_TEMP19] = RX10_TEMP18;
		}
		final booleanRefArray1 RX10_TEMP20 = new booleanRefArray1(d, RX10_TEMP17);
		final booleanRefArray1 X10_TEMP3 = RX10_TEMP20;
		return X10_TEMP3;
	}

	public doubleRefArray1 StreamData_initArray(final Dist1 d) {
		final Region1 RX10_TEMP0 = d.dReg;
		final int RX10_TEMP1 = 0;
		final int RX10_TEMP2 = 1;
		int RX10_TEMP3 = 4;
		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;
		final int RX10_TEMP4 = RX10_TEMP3+1;
		final int RX10_TEMP5 = RX10_TEMP3+1;
		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];
		//finish {
			for(int RX10_TEMP7=0;RX10_TEMP7<RX10_TEMP4;RX10_TEMP7++) {
				final int RX10_TEMP8 = 0;
				final int RX10_TEMP9 = RX10_TEMP7;
				final int RX10_TEMP10 = 0;
				final int RX10_TEMP11 = Program.getDistLocalCount1(d, RX10_TEMP9);
				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;
				//async(RX10_TEMP10) {
					final int RX10_TEMP14 = RX10_TEMP12+1;
					final double[] RX10_TEMP15 = new double [RX10_TEMP14];
					for(int RX10_TEMP13=0; RX10_TEMP13<RX10_TEMP14; RX10_TEMP13++) {
						final double X10_TEMP2 = (0.0D);
						RX10_TEMP15[RX10_TEMP13] = X10_TEMP2;
					}
					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15);
					//async(RX10_TEMP8) {
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
					//}
				//}
			}
		//}
		final doubleStub[] RX10_TEMP17 = new doubleStub[RX10_TEMP4];
		for(int RX10_TEMP19=0; RX10_TEMP19<RX10_TEMP4;RX10_TEMP19++) {
			final doubleStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];
			RX10_TEMP17[RX10_TEMP19] = RX10_TEMP18;
		}
		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(d, RX10_TEMP17);
		final doubleRefArray1 X10_TEMP3 = RX10_TEMP20;
		return X10_TEMP3;
	}

}
class Stream {
	public final StreamData sd;


	public Stream() {
		long X10_TEMP3 = (Program._Stream_N);
		int X10_TEMP4 = (Program._Stream_NUM_TIMES);
		final StreamData X10_TEMP6 = (new StreamData(X10_TEMP3, X10_TEMP4));
		sd = (X10_TEMP6);
	}



}
class Timer {
	public doubleRefArray1 start_time;
	public doubleRefArray1 elapsed_time;
	public doubleRefArray1 total_time;


	public Timer() {
		final int X10_TEMP3 = (0);
		final int X10_TEMP4 = (Program._Timer_max_counters);
		final Region1 X10_TEMP5 = Program.createNewRegion1R(X10_TEMP3, X10_TEMP4);
		final int X10_TEMP6 = 0;
		final Dist1 d = Program.getPlaceDist1(X10_TEMP5, X10_TEMP6);
		final Region1 RX10_TEMP0 = d.dReg;
		final int RX10_TEMP1 = 0;
		final int RX10_TEMP2 = 1;
		int RX10_TEMP3 = 4;
		RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2;
		final int RX10_TEMP4 = RX10_TEMP3+1;
		final int RX10_TEMP5 = RX10_TEMP3+1;
		final doubleStub[] RX10_TEMP6 = new doubleStub[RX10_TEMP5];
		//finish {
			for(int RX10_TEMP7=0;RX10_TEMP7<RX10_TEMP4;RX10_TEMP7++) {
				final int RX10_TEMP8 = 0;
				final int RX10_TEMP9 = RX10_TEMP7;
				final int RX10_TEMP10 = 0;
				final int RX10_TEMP11 = Program.getDistLocalCount1(d, RX10_TEMP9);
				final int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2;
				//async(RX10_TEMP10) {
					final int RX10_TEMP14= RX10_TEMP12+1;
					final double[] RX10_TEMP15 = new double [RX10_TEMP14];
					for(int RX10_TEMP13=0;RX10_TEMP13<RX10_TEMP14;RX10_TEMP13++) {
						final double X10_TEMP9 = (0);
						RX10_TEMP15[RX10_TEMP13] = X10_TEMP9;
					}
					final doubleStub RX10_TEMP16 = new doubleStub(RX10_TEMP15);
					//async(RX10_TEMP8) {
						RX10_TEMP6[RX10_TEMP7] = RX10_TEMP16;
					//}
				//}
			}
		//}
		final doubleStub[] RX10_TEMP17 = new doubleStub [RX10_TEMP4];
		for(int RX10_TEMP19=0;RX10_TEMP19<RX10_TEMP4;RX10_TEMP19++){
			final doubleStub RX10_TEMP18 = RX10_TEMP6[RX10_TEMP19];
			RX10_TEMP17[RX10_TEMP19] = RX10_TEMP18;
		}
		final doubleRefArray1 RX10_TEMP20 = new doubleRefArray1(d, RX10_TEMP17);
		final doubleRefArray1 X10_TEMP11 = RX10_TEMP20;
		start_time = X10_TEMP11;
		final Region1 RX10_TEMP21 = d.dReg;
		final int RX10_TEMP22 = 0;
		final int RX10_TEMP23 = 1;
		int RX10_TEMP24 = 4;
		RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP23;
		final int RX10_TEMP25 = RX10_TEMP24+1;
		final int RX10_TEMP26 = RX10_TEMP24+1;
		final doubleStub[] RX10_TEMP27 = new doubleStub[RX10_TEMP26];
		//finish {
			for(int RX10_TEMP28=0;RX10_TEMP28<RX10_TEMP25;RX10_TEMP28++) {
				final int RX10_TEMP29 = 0;
				final int RX10_TEMP30 = RX10_TEMP28;
				final int RX10_TEMP31 = 0;
				final int RX10_TEMP32 = Program.getDistLocalCount1(d, RX10_TEMP30);
				final int RX10_TEMP33 = RX10_TEMP32 - RX10_TEMP23;
				//async(RX10_TEMP31) {
					final int RX10_TEMP35=RX10_TEMP33+1;
					final double[] RX10_TEMP36 = new double [RX10_TEMP35];
					for(int RX10_TEMP34=0;RX10_TEMP34<RX10_TEMP35;RX10_TEMP34++) {
						final double X10_TEMP13 = (0);
						RX10_TEMP36[RX10_TEMP34] = X10_TEMP13;
					}
					final doubleStub RX10_TEMP37 = new doubleStub(RX10_TEMP36);
					//async(RX10_TEMP29) {
						RX10_TEMP27[RX10_TEMP28] = RX10_TEMP37;
					//}
				//}
			}
		//}
		final doubleStub[] RX10_TEMP38 = new doubleStub[RX10_TEMP25];
		for(int RX10_TEMP40=0;RX10_TEMP40<RX10_TEMP25;RX10_TEMP40++){
			final doubleStub RX10_TEMP39 = RX10_TEMP27[RX10_TEMP40];
			RX10_TEMP38[RX10_TEMP40] = RX10_TEMP39;
		}
		final doubleRefArray1 RX10_TEMP41 = new doubleRefArray1(d, RX10_TEMP38);
		final doubleRefArray1 X10_TEMP15 = RX10_TEMP41;
		elapsed_time = X10_TEMP15;
		final Region1 RX10_TEMP42 = d.dReg;
		final int RX10_TEMP43 = 0;
		final int RX10_TEMP44 = 1;
		int RX10_TEMP45 = 4;
		RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44;
		final int RX10_TEMP46 = RX10_TEMP45+1;
		final int RX10_TEMP47 = RX10_TEMP45+1;
		final doubleStub[] RX10_TEMP48 = new doubleStub[RX10_TEMP47];
		//finish {
			for(int RX10_TEMP49=0; RX10_TEMP49<RX10_TEMP46; RX10_TEMP49++) {
				final int RX10_TEMP50 = 0;
				final int RX10_TEMP51 = RX10_TEMP49;
				final int RX10_TEMP52 = 0;
				final int RX10_TEMP53 = Program.getDistLocalCount1(d, RX10_TEMP51);
				final int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44;
				//async(RX10_TEMP52) {
					final int RX10_TEMP56= RX10_TEMP54+1;
					final double[] RX10_TEMP57 = new double [RX10_TEMP56];
					for(int RX10_TEMP55=0;RX10_TEMP55<RX10_TEMP56;RX10_TEMP55++) {
						final double X10_TEMP17 = (0);
						RX10_TEMP57[RX10_TEMP55] = X10_TEMP17;
					}
					final doubleStub RX10_TEMP58 = new doubleStub(RX10_TEMP57);
					//async(RX10_TEMP50) {
						RX10_TEMP48[RX10_TEMP49] = RX10_TEMP58;
					//}
				//}
			}
		//}
		final doubleStub[] RX10_TEMP59 = new doubleStub [RX10_TEMP46];
		for(int RX10_TEMP61=0;RX10_TEMP61<RX10_TEMP46;RX10_TEMP61++) {
			final doubleStub RX10_TEMP60 = RX10_TEMP48[RX10_TEMP61];
			RX10_TEMP59[RX10_TEMP61] = RX10_TEMP60;
		}
		final doubleRefArray1 RX10_TEMP62 = new doubleRefArray1(d, RX10_TEMP59);
		final doubleRefArray1 X10_TEMP19 = RX10_TEMP62;
		total_time = X10_TEMP19;
	}



}
class Point1 {
	public final int f0;


	public Point1(final int f0_) {
		f0 = f0_;
	}


}
class Dist1 {
	public final Region1 dReg;
	public final Dist dDist;


	public Dist1(final Region1 dReg_, final Dist dDist_) {
		dReg = dReg_;
		dDist = dDist_;
	}


}
class Region1 {
	public final int regRank;
	public final int regSize;
	public final boolean regType;
	public final int low0;
	public final int dim0;
	public final Point1[] pointArray;


	public Region1(final Point1[] pointArray_) {
		final int zero = 0;
		final int one = 1;
		final int minusOne = zero - one;
		regRank = 1;
		regSize = pointArray_.length;
		pointArray = pointArray_;
		regType = false;
		low0 = minusOne;
		dim0 = zero;
	}
	public Region1(final Point1[] pointArray_, final int low0_, final int dim0_) {
		regRank = 1;
		regSize = pointArray_.length;
		pointArray = pointArray_;
		regType = true;
		low0 = low0_;
		dim0 = dim0_;
	}


}
class doubleStub {
	public final double[] localArray;


	public doubleStub (final double[] localArray_) {
		localArray = localArray_;
	}


}
class Dist {
	public final int [] placeArray;
	public final int [] counts;
	public final int [] runningSum;


	public Dist(final int[] vPlaceArray, final int arraySize) {
		final int one = 1;
		final int zero = 0;
		final int maxPlaces = 4;
		final int ub = maxPlaces - one;
		final int countReg = ub+1;
		final int countDist = ub+1;
		final int rSize = arraySize - one;
		final int runSumReg = rSize+1;
		final int runSumDist = rSize+1;
		final int [] tempCounts = new int[countDist];
		final int [] tempRunSum = new int[runSumDist];

		for(int p=0; p<tempCounts.length; p++) {
			tempCounts[p] = (zero);
		}

		for(int p=0;p<vPlaceArray.length;p++) {
			final int pl = vPlaceArray[p];
			final int index = pl;
			final int oldVal = tempCounts[index];
			tempRunSum[p] = (oldVal);
			final int oldValPlusOne = oldVal + one;
			tempCounts[index] = (oldValPlusOne);
		}

		placeArray = vPlaceArray;
		counts = Program.initDist(tempCounts, countReg);
		runningSum = Program.initDist(tempRunSum, runSumReg);
		}


}
class doubleRefArray1 {
	public final Dist1 distValue;
	public final doubleStub [] contents;


	public doubleRefArray1 (final Dist1 distValue_, final doubleStub [] contents_) {
		distValue = distValue_;
		contents = contents_;
	}


}
class booleanStub {
	public final boolean[] localArray;


	public booleanStub (final boolean[] localArray_) {
		localArray = localArray_;
	}


}
class booleanRefArray1 {
	public final Dist1 distValue;
	public final booleanStub [] contents;


	public booleanRefArray1 (final Dist1 distValue_, final booleanStub [] contents_) {
		distValue = distValue_;
		contents = contents_;
	}


}
