//
// Generated by JTB 1.3.2
//

package jplasma.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "final"
 * type -> Type()
 * identifier -> Identifier()
 * nodeToken1 -> "="
 * expression -> Expression()
 * nodeToken2 -> ";"
 */
public class FinalVariableDeclaration implements Node {
   public NodeToken nodeToken;
   public Type type;
   public Identifier identifier;
   public NodeToken nodeToken1;
   public Expression expression;
   public NodeToken nodeToken2;

   public FinalVariableDeclaration(NodeToken n0, Type n1, Identifier n2, NodeToken n3, Expression n4, NodeToken n5) {
      nodeToken = n0;
      type = n1;
      identifier = n2;
      nodeToken1 = n3;
      expression = n4;
      nodeToken2 = n5;
   }

   public FinalVariableDeclaration(Type n0, Identifier n1, Expression n2) {
      nodeToken = new NodeToken("final");
      type = n0;
      identifier = n1;
      nodeToken1 = new NodeToken("=");
      expression = n2;
      nodeToken2 = new NodeToken(";");
   }

   public void accept(jplasma.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jplasma.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jplasma.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jplasma.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

