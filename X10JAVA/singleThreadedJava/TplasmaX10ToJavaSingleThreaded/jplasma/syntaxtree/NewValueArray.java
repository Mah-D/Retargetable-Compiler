//
// Generated by JTB 1.3.2
//

package jplasma.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "new"
 * nonArrayType -> NonArrayType()
 * nodeToken1 -> "value"
 * nodeToken2 -> "["
 * identifier -> Identifier()
 * nodeToken3 -> "]"
 * arrayInitializer -> ArrayInitializer()
 */
public class NewValueArray implements Node {
   public NodeToken nodeToken;
   public NonArrayType nonArrayType;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public Identifier identifier;
   public NodeToken nodeToken3;
   public ArrayInitializer arrayInitializer;

   public NewValueArray(NodeToken n0, NonArrayType n1, NodeToken n2, NodeToken n3, Identifier n4, NodeToken n5, ArrayInitializer n6) {
      nodeToken = n0;
      nonArrayType = n1;
      nodeToken1 = n2;
      nodeToken2 = n3;
      identifier = n4;
      nodeToken3 = n5;
      arrayInitializer = n6;
   }

   public NewValueArray(NonArrayType n0, Identifier n1, ArrayInitializer n2) {
      nodeToken = new NodeToken("new");
      nonArrayType = n0;
      nodeToken1 = new NodeToken("value");
      nodeToken2 = new NodeToken("[");
      identifier = n1;
      nodeToken3 = new NodeToken("]");
      arrayInitializer = n2;
   }

   public void accept(jplasma.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jplasma.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jplasma.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jplasma.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

