# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/filters/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.







pkgdatadir = $(datadir)/dup
pkgincludedir = $(includedir)/dup
pkglibdir = $(libdir)/dup
pkglibexecdir = $(libexecdir)/dup
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = cmd$(EXEEXT) complete$(EXEEXT) copyargs$(EXEEXT) \
	buffer-dup$(EXEEXT) deal$(EXEEXT) delay$(EXEEXT) \
	duplicate$(EXEEXT) eof$(EXEEXT) faninany$(EXEEXT) \
	fanout$(EXEEXT) gate$(EXEEXT) gather$(EXEEXT) \
	holmerge$(EXEEXT) lookup$(EXEEXT) router$(EXEEXT) \
	mgrep$(EXEEXT) nodelay$(EXEEXT) drop$(EXEEXT) append$(EXEEXT) \
	count$(EXEEXT)
noinst_PROGRAMS = exec_no_stdin$(EXEEXT) exec_no_stdout$(EXEEXT) \
	jointime$(EXEEXT) mstime$(EXEEXT)
TESTS = $(check_SCRIPTS)
subdir = src/filters
DIST_COMMON = $(dupinclude_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/DUP_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(dupincludedir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libdupfilters_la_LIBADD =
am_libdupfilters_la_OBJECTS = common.lo
libdupfilters_la_OBJECTS = $(am_libdupfilters_la_OBJECTS)
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am_append_OBJECTS = append.$(OBJEXT)
append_OBJECTS = $(am_append_OBJECTS)
append_DEPENDENCIES = libdupfilters.la
am_buffer_dup_OBJECTS = buffer-dup.$(OBJEXT)
buffer_dup_OBJECTS = $(am_buffer_dup_OBJECTS)
buffer_dup_DEPENDENCIES = libdupfilters.la
am_cmd_OBJECTS = cmd.$(OBJEXT)
cmd_OBJECTS = $(am_cmd_OBJECTS)
cmd_DEPENDENCIES = libdupfilters.la
am_complete_OBJECTS = complete.$(OBJEXT)
complete_OBJECTS = $(am_complete_OBJECTS)
complete_DEPENDENCIES = libdupfilters.la
am_copyargs_OBJECTS = copyargs.$(OBJEXT)
copyargs_OBJECTS = $(am_copyargs_OBJECTS)
copyargs_LDADD = $(LDADD)
am_count_OBJECTS = count.$(OBJEXT)
count_OBJECTS = $(am_count_OBJECTS)
count_DEPENDENCIES = libdupfilters.la
am_deal_OBJECTS = deal.$(OBJEXT)
deal_OBJECTS = $(am_deal_OBJECTS)
deal_DEPENDENCIES = libdupfilters.la
am_delay_OBJECTS = delay.$(OBJEXT)
delay_OBJECTS = $(am_delay_OBJECTS)
delay_LDADD = $(LDADD)
am_drop_OBJECTS = drop.$(OBJEXT) cbuffer.$(OBJEXT)
drop_OBJECTS = $(am_drop_OBJECTS)
drop_DEPENDENCIES = libdupfilters.la
am_duplicate_OBJECTS = duplicate.$(OBJEXT)
duplicate_OBJECTS = $(am_duplicate_OBJECTS)
duplicate_DEPENDENCIES = libdupfilters.la
am_eof_OBJECTS = eof.$(OBJEXT)
eof_OBJECTS = $(am_eof_OBJECTS)
eof_LDADD = $(LDADD)
am_exec_no_stdin_OBJECTS = exec_no_stdin.$(OBJEXT)
exec_no_stdin_OBJECTS = $(am_exec_no_stdin_OBJECTS)
exec_no_stdin_LDADD = $(LDADD)
am_exec_no_stdout_OBJECTS = exec_no_stdout.$(OBJEXT)
exec_no_stdout_OBJECTS = $(am_exec_no_stdout_OBJECTS)
exec_no_stdout_LDADD = $(LDADD)
am_faninany_OBJECTS = faninany.$(OBJEXT)
faninany_OBJECTS = $(am_faninany_OBJECTS)
faninany_DEPENDENCIES = libdupfilters.la
am_fanout_OBJECTS = fanout.$(OBJEXT)
fanout_OBJECTS = $(am_fanout_OBJECTS)
fanout_DEPENDENCIES = libdupfilters.la
am_gate_OBJECTS = gate.$(OBJEXT)
gate_OBJECTS = $(am_gate_OBJECTS)
gate_DEPENDENCIES = libdupfilters.la
am_gather_OBJECTS = gather.$(OBJEXT)
gather_OBJECTS = $(am_gather_OBJECTS)
gather_DEPENDENCIES = libdupfilters.la
am_holmerge_OBJECTS = holmerge.$(OBJEXT)
holmerge_OBJECTS = $(am_holmerge_OBJECTS)
holmerge_DEPENDENCIES = libdupfilters.la
am_jointime_OBJECTS = jointime.$(OBJEXT)
jointime_OBJECTS = $(am_jointime_OBJECTS)
jointime_LDADD = $(LDADD)
am_lookup_OBJECTS = lookup.$(OBJEXT)
lookup_OBJECTS = $(am_lookup_OBJECTS)
lookup_DEPENDENCIES = libdupfilters.la
am_mgrep_OBJECTS = mgrep.$(OBJEXT)
mgrep_OBJECTS = $(am_mgrep_OBJECTS)
mgrep_DEPENDENCIES = libdupfilters.la
am_mstime_OBJECTS = mstime.$(OBJEXT)
mstime_OBJECTS = $(am_mstime_OBJECTS)
mstime_LDADD = $(LDADD)
am_nodelay_OBJECTS = nodelay.$(OBJEXT)
nodelay_OBJECTS = $(am_nodelay_OBJECTS)
nodelay_LDADD = $(LDADD)
am_router_OBJECTS = router.$(OBJEXT)
router_OBJECTS = $(am_router_OBJECTS)
router_DEPENDENCIES = libdupfilters.la
SCRIPTS = $(bin_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libdupfilters_la_SOURCES) $(append_SOURCES) \
	$(buffer_dup_SOURCES) $(cmd_SOURCES) $(complete_SOURCES) \
	$(copyargs_SOURCES) $(count_SOURCES) $(deal_SOURCES) \
	$(delay_SOURCES) $(drop_SOURCES) $(duplicate_SOURCES) \
	$(eof_SOURCES) $(exec_no_stdin_SOURCES) \
	$(exec_no_stdout_SOURCES) $(faninany_SOURCES) \
	$(fanout_SOURCES) $(gate_SOURCES) $(gather_SOURCES) \
	$(holmerge_SOURCES) $(jointime_SOURCES) $(lookup_SOURCES) \
	$(mgrep_SOURCES) $(mstime_SOURCES) $(nodelay_SOURCES) \
	$(router_SOURCES)
DIST_SOURCES = $(libdupfilters_la_SOURCES) $(append_SOURCES) \
	$(buffer_dup_SOURCES) $(cmd_SOURCES) $(complete_SOURCES) \
	$(copyargs_SOURCES) $(count_SOURCES) $(deal_SOURCES) \
	$(delay_SOURCES) $(drop_SOURCES) $(duplicate_SOURCES) \
	$(eof_SOURCES) $(exec_no_stdin_SOURCES) \
	$(exec_no_stdout_SOURCES) $(faninany_SOURCES) \
	$(fanout_SOURCES) $(gate_SOURCES) $(gather_SOURCES) \
	$(holmerge_SOURCES) $(jointime_SOURCES) $(lookup_SOURCES) \
	$(mgrep_SOURCES) $(mstime_SOURCES) $(nodelay_SOURCES) \
	$(router_SOURCES)
HEADERS = $(dupinclude_HEADERS)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run aclocal-1.11
AMTAR = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run autoconf
AUTOHEADER = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run autoheader
AUTOMAKE = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -fno-strict-aliasing -Wall -Werror -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
EXT_LIBS = 
EXT_LIB_PATH = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = dup
PACKAGE_BUGREPORT = dup@lists.cs.du.edu
PACKAGE_NAME = dup
PACKAGE_STRING = dup 0.1.0
PACKAGE_TARNAME = dup
PACKAGE_URL = 
PACKAGE_VERSION = 0.1.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 0.1.0
YACC = bison -y
YFLAGS = 
abs_builddir = /net/nauru/one/home/aitnoren/Desktop/DUP1.0/src/filters
abs_srcdir = /net/nauru/one/home/aitnoren/Desktop/DUP1.0/src/filters
abs_top_builddir = /net/nauru/one/home/aitnoren/Desktop/DUP1.0
abs_top_srcdir = /net/nauru/one/home/aitnoren/Desktop/DUP1.0
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /net/nauru/one/home/aitnoren/Desktop/DUP1.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
#AM_CFLAGS = --coverage
bin_SCRIPTS = eat 
EXTRA_DIST = \
 eat \
 perf_buffer_dup.sh \
 perf_cat.sh \
 perf_deal.sh \
 perf_faninany.sh \
 perf_fanout.sh \
 perf_gate.sh \
 perf_gather.sh \
 perf_grep.sh \
 perf_head.sh \
 perf_holmerge.sh \
 perf_lookup.sh \
 perf_mgrep.sh \
 perf_tail.sh \
 test_deal_input.txt \
 $(check_SCRIPTS)

lib_LTLIBRARIES = \
  libdupfilters.la

libdupfilters_la_SOURCES = \
  common.c

dupincludedir = \
  $(includedir)/dup

dupinclude_HEADERS = \
  dup_filter_lib.h

append_SOURCES = \
 append.c

append_LDADD = \
 libdupfilters.la

buffer_dup_SOURCES = \
 buffer-dup.c

buffer_dup_LDADD = \
 libdupfilters.la

router_SOURCES = \
 router.c

router_LDADD = \
 libdupfilters.la

cmd_SOURCES = \
 cmd.c

cmd_LDADD = \
 libdupfilters.la

complete_SOURCES = \
 complete.c

complete_LDADD = \
 libdupfilters.la

copyargs_SOURCES = \
 copyargs.c

deal_SOURCES = \
 deal.c

deal_LDADD = \
 libdupfilters.la

delay_SOURCES = \
 delay.c

drop_SOURCES = \
 drop.c cbuffer.c cbuffer.h

drop_LDADD = \
 libdupfilters.la

duplicate_SOURCES = \
 duplicate.c

duplicate_LDADD = \
 libdupfilters.la

eof_SOURCES = \
 eof.c

exec_no_stdin_SOURCES = \
 exec_no_stdin.c

exec_no_stdout_SOURCES = \
 exec_no_stdout.c

faninany_SOURCES = \
 faninany.c

faninany_LDADD = \
 libdupfilters.la

fanout_SOURCES = \
 fanout.c

fanout_LDADD = \
 libdupfilters.la

nodelay_SOURCES = \
 nodelay.c

count_SOURCES = \
 count.c

count_LDADD = \
 libdupfilters.la

gate_SOURCES = \
 gate.c

gate_LDADD = \
 libdupfilters.la

gather_SOURCES = \
 gather.c

gather_LDADD = \
 libdupfilters.la

lookup_SOURCES = \
 lookup.c

lookup_LDADD = \
 libdupfilters.la

holmerge_SOURCES = \
 holmerge.c

holmerge_LDADD = \
 libdupfilters.la

mgrep_SOURCES = \
 mgrep.c

mgrep_LDADD = \
 libdupfilters.la

mstime_SOURCES = \
 mstime.c

jointime_SOURCES = \
 jointime.c


#tests
# check_PROGRAMS = \
#  test_faninany_eof
check_SCRIPTS = \
 test_cmd.sh \
 test_deal.sh \
 test_delay.sh \
 test_duplicate.sh \
 test_eof.sh \
 test_gather.sh \
 test_faninany.sh \
 test_fanout.sh \
 test_gate.sh \
 test_holmerge.sh \
 test_lookup.sh \
 test_mgrep.sh \
 test_no_stdxx.sh 

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/filters/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/filters/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libdupfilters.la: $(libdupfilters_la_OBJECTS) $(libdupfilters_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libdupfilters_la_OBJECTS) $(libdupfilters_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
append$(EXEEXT): $(append_OBJECTS) $(append_DEPENDENCIES) 
	@rm -f append$(EXEEXT)
	$(LINK) $(append_OBJECTS) $(append_LDADD) $(LIBS)
buffer-dup$(EXEEXT): $(buffer_dup_OBJECTS) $(buffer_dup_DEPENDENCIES) 
	@rm -f buffer-dup$(EXEEXT)
	$(LINK) $(buffer_dup_OBJECTS) $(buffer_dup_LDADD) $(LIBS)
cmd$(EXEEXT): $(cmd_OBJECTS) $(cmd_DEPENDENCIES) 
	@rm -f cmd$(EXEEXT)
	$(LINK) $(cmd_OBJECTS) $(cmd_LDADD) $(LIBS)
complete$(EXEEXT): $(complete_OBJECTS) $(complete_DEPENDENCIES) 
	@rm -f complete$(EXEEXT)
	$(LINK) $(complete_OBJECTS) $(complete_LDADD) $(LIBS)
copyargs$(EXEEXT): $(copyargs_OBJECTS) $(copyargs_DEPENDENCIES) 
	@rm -f copyargs$(EXEEXT)
	$(LINK) $(copyargs_OBJECTS) $(copyargs_LDADD) $(LIBS)
count$(EXEEXT): $(count_OBJECTS) $(count_DEPENDENCIES) 
	@rm -f count$(EXEEXT)
	$(LINK) $(count_OBJECTS) $(count_LDADD) $(LIBS)
deal$(EXEEXT): $(deal_OBJECTS) $(deal_DEPENDENCIES) 
	@rm -f deal$(EXEEXT)
	$(LINK) $(deal_OBJECTS) $(deal_LDADD) $(LIBS)
delay$(EXEEXT): $(delay_OBJECTS) $(delay_DEPENDENCIES) 
	@rm -f delay$(EXEEXT)
	$(LINK) $(delay_OBJECTS) $(delay_LDADD) $(LIBS)
drop$(EXEEXT): $(drop_OBJECTS) $(drop_DEPENDENCIES) 
	@rm -f drop$(EXEEXT)
	$(LINK) $(drop_OBJECTS) $(drop_LDADD) $(LIBS)
duplicate$(EXEEXT): $(duplicate_OBJECTS) $(duplicate_DEPENDENCIES) 
	@rm -f duplicate$(EXEEXT)
	$(LINK) $(duplicate_OBJECTS) $(duplicate_LDADD) $(LIBS)
eof$(EXEEXT): $(eof_OBJECTS) $(eof_DEPENDENCIES) 
	@rm -f eof$(EXEEXT)
	$(LINK) $(eof_OBJECTS) $(eof_LDADD) $(LIBS)
exec_no_stdin$(EXEEXT): $(exec_no_stdin_OBJECTS) $(exec_no_stdin_DEPENDENCIES) 
	@rm -f exec_no_stdin$(EXEEXT)
	$(LINK) $(exec_no_stdin_OBJECTS) $(exec_no_stdin_LDADD) $(LIBS)
exec_no_stdout$(EXEEXT): $(exec_no_stdout_OBJECTS) $(exec_no_stdout_DEPENDENCIES) 
	@rm -f exec_no_stdout$(EXEEXT)
	$(LINK) $(exec_no_stdout_OBJECTS) $(exec_no_stdout_LDADD) $(LIBS)
faninany$(EXEEXT): $(faninany_OBJECTS) $(faninany_DEPENDENCIES) 
	@rm -f faninany$(EXEEXT)
	$(LINK) $(faninany_OBJECTS) $(faninany_LDADD) $(LIBS)
fanout$(EXEEXT): $(fanout_OBJECTS) $(fanout_DEPENDENCIES) 
	@rm -f fanout$(EXEEXT)
	$(LINK) $(fanout_OBJECTS) $(fanout_LDADD) $(LIBS)
gate$(EXEEXT): $(gate_OBJECTS) $(gate_DEPENDENCIES) 
	@rm -f gate$(EXEEXT)
	$(LINK) $(gate_OBJECTS) $(gate_LDADD) $(LIBS)
gather$(EXEEXT): $(gather_OBJECTS) $(gather_DEPENDENCIES) 
	@rm -f gather$(EXEEXT)
	$(LINK) $(gather_OBJECTS) $(gather_LDADD) $(LIBS)
holmerge$(EXEEXT): $(holmerge_OBJECTS) $(holmerge_DEPENDENCIES) 
	@rm -f holmerge$(EXEEXT)
	$(LINK) $(holmerge_OBJECTS) $(holmerge_LDADD) $(LIBS)
jointime$(EXEEXT): $(jointime_OBJECTS) $(jointime_DEPENDENCIES) 
	@rm -f jointime$(EXEEXT)
	$(LINK) $(jointime_OBJECTS) $(jointime_LDADD) $(LIBS)
lookup$(EXEEXT): $(lookup_OBJECTS) $(lookup_DEPENDENCIES) 
	@rm -f lookup$(EXEEXT)
	$(LINK) $(lookup_OBJECTS) $(lookup_LDADD) $(LIBS)
mgrep$(EXEEXT): $(mgrep_OBJECTS) $(mgrep_DEPENDENCIES) 
	@rm -f mgrep$(EXEEXT)
	$(LINK) $(mgrep_OBJECTS) $(mgrep_LDADD) $(LIBS)
mstime$(EXEEXT): $(mstime_OBJECTS) $(mstime_DEPENDENCIES) 
	@rm -f mstime$(EXEEXT)
	$(LINK) $(mstime_OBJECTS) $(mstime_LDADD) $(LIBS)
nodelay$(EXEEXT): $(nodelay_OBJECTS) $(nodelay_DEPENDENCIES) 
	@rm -f nodelay$(EXEEXT)
	$(LINK) $(nodelay_OBJECTS) $(nodelay_LDADD) $(LIBS)
router$(EXEEXT): $(router_OBJECTS) $(router_DEPENDENCIES) 
	@rm -f router$(EXEEXT)
	$(LINK) $(router_OBJECTS) $(router_LDADD) $(LIBS)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/append.Po
include ./$(DEPDIR)/buffer-dup.Po
include ./$(DEPDIR)/cbuffer.Po
include ./$(DEPDIR)/cmd.Po
include ./$(DEPDIR)/common.Plo
include ./$(DEPDIR)/complete.Po
include ./$(DEPDIR)/copyargs.Po
include ./$(DEPDIR)/count.Po
include ./$(DEPDIR)/deal.Po
include ./$(DEPDIR)/delay.Po
include ./$(DEPDIR)/drop.Po
include ./$(DEPDIR)/duplicate.Po
include ./$(DEPDIR)/eof.Po
include ./$(DEPDIR)/exec_no_stdin.Po
include ./$(DEPDIR)/exec_no_stdout.Po
include ./$(DEPDIR)/faninany.Po
include ./$(DEPDIR)/fanout.Po
include ./$(DEPDIR)/gate.Po
include ./$(DEPDIR)/gather.Po
include ./$(DEPDIR)/holmerge.Po
include ./$(DEPDIR)/jointime.Po
include ./$(DEPDIR)/lookup.Po
include ./$(DEPDIR)/mgrep.Po
include ./$(DEPDIR)/mstime.Po
include ./$(DEPDIR)/nodelay.Po
include ./$(DEPDIR)/router.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-dupincludeHEADERS: $(dupinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(dupincludedir)" || $(MKDIR_P) "$(DESTDIR)$(dupincludedir)"
	@list='$(dupinclude_HEADERS)'; test -n "$(dupincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(dupincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(dupincludedir)" || exit $$?; \
	done

uninstall-dupincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(dupinclude_HEADERS)'; test -n "$(dupincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(dupincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(dupincludedir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(SCRIPTS) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(dupincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-dupincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-binSCRIPTS \
	install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-dupincludeHEADERS uninstall-libLTLIBRARIES

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-binSCRIPTS \
	install-data install-data-am install-dupincludeHEADERS \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-libLTLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-binSCRIPTS uninstall-dupincludeHEADERS \
	uninstall-libLTLIBRARIES


# test_faninany_eof_SOURCES = \
#  test_faninany_eof.c 

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
