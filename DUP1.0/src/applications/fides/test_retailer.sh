#!/bin/bash

exe=./retailer
base=test_retailer

# ----------------------------------------------------------------------------------
echo -n "TEST: no arguments..."

if $exe >> /dev/null 2>>/dev/null; then
  echo "FAIL: $exe should have failed"
  exit 1
fi
echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: one arguments..."

if $exe dummyProcessName >> /dev/null 2>>/dev/null; then
  echo "FAIL: $exe should have failed"
  exit 1
fi
echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: invalid argument format..."

if $exe dummyProcessName dummyItem@junk >> /dev/null 2>>/dev/null; then
  echo "FAIL: $exe should have failed"
  exit 1
fi
echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: invalid event type..."

cat > $base.in <<EOF
EVENT JunkEvent dummyProcessName 100
VTIME 100
EOF

if $exe dummyProcessName dummyItem:10 < $base.in >>/dev/null 2>>/dev/null; then
  echo "FAIL: $exe should have failed"
  exit 1
fi
echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test one product and one order..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 20 deliverTo = consumer1
VTIME 100
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 20
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test one product and one order with uneven unit sizes..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
VTIME 100
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test one product and two orders..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
EVENT Order dummyProcessName 101 item = item1 orderId = 13 quantity = 9 deliverTo = consumer2
VTIME 100
VTIME 101
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test two product and two orders with..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
EVENT Order dummyProcessName 101 item = item1 orderId = 13 quantity = 10 deliverTo = consumer2
VTIME 100
VTIME 101
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
EVENT Order manuf1 102 deliverTo = dummyProcessName item = item1 orderId = 846930886 quantity = 10
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test one product and subsequent delivery and second order..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
VTIME 100
EVENT Delivery dummyProcessName 102 item = item1 orderId = 1804289383 quantity = 30
VTIME 102
EVENT Order dummyProcessName 200 item = item1 orderId = 13 quantity = 9 deliverTo = consumer2
VTIME 200
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
EVENT Delivery consumer1 103 item = item1 orderId = 12 quantity = 21
VTACK 1
EVENT Delivery consumer2 201 item = item1 orderId = 13 quantity = 9
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
echo -n "TEST: test three products, orders and subsequent deliveries..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
EVENT Order dummyProcessName 200 item = item2 orderId = 13 quantity = 1 deliverTo = consumer2
EVENT Order dummyProcessName 300 item = item3 orderId = 14 quantity = 100 deliverTo = consumer3
VTIME 100
VTIME 200
VTIME 300
EVENT Delivery dummyProcessName 400 item = item3 orderId = 1681692777 quantity = 100
EVENT Delivery dummyProcessName 400 item = item1 orderId = 1804289383 quantity = 30
EVENT Delivery dummyProcessName 400 item = item2 orderId = 846930886 quantity = 2
VTIME 400
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
EVENT Order manuf2 201 deliverTo = dummyProcessName item = item2 orderId = 846930886 quantity = 2
VTACK 1
EVENT Order manuf3 301 deliverTo = dummyProcessName item = item3 orderId = 1681692777 quantity = 100
VTACK 1
EVENT Delivery consumer3 401 item = item3 orderId = 14 quantity = 100
EVENT Delivery consumer1 401 item = item1 orderId = 12 quantity = 21
EVENT Delivery consumer2 401 item = item2 orderId = 13 quantity = 1
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10,item2:manuf2:2,item3:manuf3:100 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"
# ----------------------------------------------------------------------------------
echo -n "TEST: test one product, multiple orders with partial holdovers..."

cat > $base.in <<EOF
EVENT Order dummyProcessName 100 item = item1 orderId = 12 quantity = 21 deliverTo = consumer1
EVENT Order dummyProcessName 200 item = item1 orderId = 13 quantity = 1 deliverTo = consumer2
EVENT Order dummyProcessName 300 item = item1 orderId = 14 quantity = 20 deliverTo = consumer3
VTIME 100
VTIME 200
VTIME 300
EVENT Delivery dummyProcessName 400 item = item1 orderId = 1804289383 quantity = 30
VTIME 400
EVENT Delivery dummyProcessName 500 item = item1 orderId = 846930886 quantity = 20
VTIME 500
EVENT Order dummyProcessName 600 item = item1 orderId = 15 quantity = 9 deliverTo = consumer4
VTIME 600
EVENT Delivery dummyProcessName 700 item = item1 orderId = 1681692777 quantity = 10
VTIME 700
EOF

# the orderId is generated by a call to random() (without explicit
# seeding, this is the same as using a seed of 1
cat > $base.oracle <<EOF
EVENT Order manuf1 101 deliverTo = dummyProcessName item = item1 orderId = 1804289383 quantity = 30
VTACK 1
VTACK 1
EVENT Order manuf1 301 deliverTo = dummyProcessName item = item1 orderId = 846930886 quantity = 20
VTACK 1
EVENT Delivery consumer1 401 item = item1 orderId = 12 quantity = 21
EVENT Delivery consumer2 401 item = item1 orderId = 13 quantity = 1
VTACK 1
EVENT Delivery consumer3 501 item = item1 orderId = 14 quantity = 20
VTACK 1
EVENT Order manuf1 601 deliverTo = dummyProcessName item = item1 orderId = 1681692777 quantity = 10
VTACK 1
EVENT Delivery consumer4 701 item = item1 orderId = 15 quantity = 9
VTACK 1
EOF

if ! $exe dummyProcessName\|item1:manuf1:10 < $base.in > $base.out; then
  echo "FAIL: $exe failed"
  exit 1
fi

if ! diff $base.oracle $base.out > /dev/null; then
    echo "FAIL: output differs from expected"
    exit 1
fi

echo "PASS"

# ----------------------------------------------------------------------------------
# cleanup -- only here if successful
# ----------------------------------------------------------------------------------
rm -f $base.in $base.in1 $base.in2 $base.in3 $base.oracle $base.out

