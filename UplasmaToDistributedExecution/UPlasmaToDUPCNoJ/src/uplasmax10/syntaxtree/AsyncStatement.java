//
// Generated by JTB 1.3.2
//

package uplasmax10.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "async"
 * nodeToken1 -> "("
 * identifier -> Identifier()
 * nodeToken2 -> ")"
 * nodeToken3 -> "{"
 * identifier1 -> Identifier()
 * nodeToken4 -> "."
 * identifier2 -> Identifier()
 * nodeToken5 -> "("
 * identifier3 -> Identifier()
 * nodeToken6 -> ")"
 * nodeToken7 -> ";"
 * nodeToken8 -> "}"
 */
public class AsyncStatement implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public Identifier identifier;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public Identifier identifier1;
   public NodeToken nodeToken4;
   public Identifier identifier2;
   public NodeToken nodeToken5;
   public Identifier identifier3;
   public NodeToken nodeToken6;
   public NodeToken nodeToken7;
   public NodeToken nodeToken8;

   public AsyncStatement(NodeToken n0, NodeToken n1, Identifier n2, NodeToken n3, NodeToken n4, Identifier n5, NodeToken n6, Identifier n7, NodeToken n8, Identifier n9, NodeToken n10, NodeToken n11, NodeToken n12) {
      nodeToken = n0;
      nodeToken1 = n1;
      identifier = n2;
      nodeToken2 = n3;
      nodeToken3 = n4;
      identifier1 = n5;
      nodeToken4 = n6;
      identifier2 = n7;
      nodeToken5 = n8;
      identifier3 = n9;
      nodeToken6 = n10;
      nodeToken7 = n11;
      nodeToken8 = n12;
   }

   public AsyncStatement(Identifier n0, Identifier n1, Identifier n2, Identifier n3) {
      nodeToken = new NodeToken("async");
      nodeToken1 = new NodeToken("(");
      identifier = n0;
      nodeToken2 = new NodeToken(")");
      nodeToken3 = new NodeToken("{");
      identifier1 = n1;
      nodeToken4 = new NodeToken(".");
      identifier2 = n2;
      nodeToken5 = new NodeToken("(");
      identifier3 = n3;
      nodeToken6 = new NodeToken(")");
      nodeToken7 = new NodeToken(";");
      nodeToken8 = new NodeToken("}");
   }

   public void accept(uplasmax10.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(uplasmax10.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(uplasmax10.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(uplasmax10.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

