//
// Generated by JTB 1.3.2
//

package uplasmax10.visitor;
import uplasmax10.syntaxtree.*;

import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated uplasmax10.visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * programClass -> ProgramClass()
    * nodeListOptional -> ( TopLevelDeclaration() )*
    * nodeToken -> <EOF>
    */
   public R visit(File n);

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "class"
    * identifier -> Identifier()
    * nodeToken2 -> "{"
    * nodeToken3 -> "public"
    * nodeToken4 -> "static"
    * nodeToken5 -> "void"
    * nodeToken6 -> "main"
    * nodeToken7 -> "("
    * nodeToken8 -> "String"
    * nodeToken9 -> "["
    * nodeToken10 -> "]"
    * identifier1 -> Identifier()
    * nodeToken11 -> ")"
    * nodeToken12 -> "{"
    * identifier2 -> Identifier()
    * nodeToken13 -> "."
    * identifier3 -> Identifier()
    * nodeToken14 -> "("
    * nodeToken15 -> ")"
    * nodeToken16 -> ";"
    * nodeToken17 -> "}"
    * nodeToken18 -> "}"
    */
   public R visit(MainClass n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( ConstantDeclaration() )*
    * nodeListOptional1 -> ( StaticMethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public R visit(ProgramClass n);

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ValueDeclaration()
    */
   public R visit(TopLevelDeclaration n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( InitializableConstantDeclaration() )*
    * nodeListOptional1 -> ( UpdatableFieldDeclaration() )*
    * nodeListOptional2 -> ( ConstructorDeclaration() )*
    * nodeListOptional3 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public R visit(ClassDeclaration n);

   /**
    * nodeToken -> "value"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( InitializableConstantDeclaration() )*
    * nodeListOptional1 -> ( ConstructorDeclaration() )*
    * nodeListOptional2 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public R visit(ValueDeclaration n);

   /**
    * nodeToken -> "public"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public R visit(ConstructorDeclaration n);

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "static"
    * nodeToken2 -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken3 -> "="
    * methodCall -> MethodCall()
    * nodeToken4 -> ";"
    */
   public R visit(ConstantDeclaration n);

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken2 -> ";"
    */
   public R visit(InitializableConstantDeclaration n);

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> ";"
    */
   public R visit(UpdatableFieldDeclaration n);

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "static"
    * returnType -> ReturnType()
    * identifier -> Identifier()
    * nodeToken2 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken3 -> ")"
    * block -> Block()
    */
   public R visit(StaticMethodDeclaration n);

   /**
    * nodeToken -> "public"
    * returnType -> ReturnType()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public R visit(MethodDeclaration n);

   /**
    * finalFormalParameter -> FinalFormalParameter()
    * nodeListOptional -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n);

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    */
   public R visit(FinalFormalParameter n);

   /**
    * nodeToken -> ","
    * finalFormalParameter -> FinalFormalParameter()
    */
   public R visit(FormalParameterRest n);

   /**
    * nodeChoice -> VoidType()
    *       | Type()
    */
   public R visit(ReturnType n);

   /**
    * nodeToken -> "void"
    */
   public R visit(VoidType n);

   /**
    * nodeChoice -> UpdatableArrayType()
    *       | ValueArrayType()
    *       | NonArrayType()
    */
   public R visit(Type n);

   /**
    * nonArrayType -> NonArrayType()
    * nodeToken -> "["
    * nodeToken1 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken2 -> "]"
    */
   public R visit(UpdatableArrayType n);

   /**
    * nonArrayType -> NonArrayType()
    * nodeToken -> "value"
    * nodeToken1 -> "["
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> "]"
    */
   public R visit(ValueArrayType n);

   /**
    * nodeToken -> "rank==1"
    */
   public R visit(RankEquation n);

   /**
    * nodeChoice -> BooleanType()
    *       | ByteType()
    *       | ShortType()
    *       | IntegerType()
    *       | LongType()
    *       | DoubleType()
    *       | StringType()
    *       | PlaceType()
    *       | DistType()
    *       | RegionType()
    *       | PointType()
    *       | ClassNameType()
    */
   public R visit(NonArrayType n);

   /**
    * nodeToken -> "boolean"
    */
   public R visit(BooleanType n);

   /**
    * nodeToken -> "byte"
    */
   public R visit(ByteType n);

   /**
    * nodeToken -> "short"
    */
   public R visit(ShortType n);

   /**
    * nodeToken -> "int"
    */
   public R visit(IntegerType n);

   /**
    * nodeToken -> "long"
    */
   public R visit(LongType n);

   /**
    * nodeToken -> "double"
    */
   public R visit(DoubleType n);

   /**
    * nodeToken -> "String"
    */
   public R visit(StringType n);

   /**
    * nodeToken -> "place"
    */
   public R visit(PlaceType n);

   /**
    * nodeToken -> "dist"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(DistType n);

   /**
    * nodeToken -> "region"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(RegionType n);

   /**
    * nodeToken -> "point"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(PointType n);

   /**
    * identifier -> Identifier()
    */
   public R visit(ClassNameType n);

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public R visit(Identifier n);

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public R visit(Block n);

   /**
    * nodeChoice -> Assignment()
    *       | ArrayAssignment()
    *       | FieldAssignment()
    *       | ThisFieldAssignment()
    *       | AsyncStatement()
    *       | AsyncStatementInConstructor()
    *       | Block()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | DoStatement()
    *       | FinishStatement()
    *       | IfStatement()
    *       | LoopStatement()
    *       | MethodCallStatement()
    *       | MethodCallStatementInConstructor()
    *       | PrintlnStatement()
    *       | PrintStatement()
    *       | PrintErrorStatement()
    *       | ReturnStatement()
    *       | SwitchStatement()
    *       | ThrowStatement()
    *       | WhileStatement()
    *       | FinalVariableDeclaration()
    *       | UpdatableVariableDeclaration()
    */
   public R visit(Statement n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public R visit(Assignment n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * identifierList -> IdentifierList()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * nodeToken3 -> "("
    * identifier1 -> Identifier()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public R visit(ArrayAssignment n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "="
    * nodeToken2 -> "("
    * identifier2 -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public R visit(FieldAssignment n);

   /**
    * nodeToken -> "this"
    * nodeToken1 -> "."
    * identifier -> Identifier()
    * nodeToken2 -> "="
    * nodeToken3 -> "("
    * identifier1 -> Identifier()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public R visit(ThisFieldAssignment n);

   /**
    * nodeToken -> "async"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * identifier1 -> Identifier()
    * nodeToken4 -> "."
    * identifier2 -> Identifier()
    * nodeToken5 -> "("
    * identifier3 -> Identifier()
    * nodeToken6 -> ")"
    * nodeToken7 -> ";"
    * nodeToken8 -> "}"
    */
   public R visit(AsyncStatement n);

   /**
    * nodeToken -> "async"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeToken4 -> "this"
    * nodeToken5 -> "."
    * identifier1 -> Identifier()
    * nodeToken6 -> "("
    * identifier2 -> Identifier()
    * nodeToken7 -> ")"
    * nodeToken8 -> ";"
    * nodeToken9 -> "}"
    */
   public R visit(AsyncStatementInConstructor n);

   /**
    * nodeToken -> "break"
    * nodeToken1 -> ";"
    */
   public R visit(BreakStatement n);

   /**
    * nodeToken -> "continue"
    * nodeToken1 -> ";"
    */
   public R visit(ContinueStatement n);

   /**
    * nodeToken -> "do"
    * block -> Block()
    * nodeToken1 -> "while"
    * nodeToken2 -> "("
    * identifier -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public R visit(DoStatement n);

   /**
    * nodeToken -> "finish"
    * block -> Block()
    */
   public R visit(FinishStatement n);

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * block -> Block()
    * nodeOptional -> [ ElseClause() ]
    */
   public R visit(IfStatement n);

   /**
    * nodeToken -> "else"
    * block -> Block()
    */
   public R visit(ElseClause n);

   /**
    * nodeToken -> "for"
    * nodeToken1 -> "("
    * pointType -> PointType()
    * explodedSpecification -> ExplodedSpecification()
    * nodeToken2 -> ":"
    * identifier -> Identifier()
    * nodeToken3 -> ")"
    * block -> Block()
    */
   public R visit(LoopStatement n);

   /**
    * nodeChoice -> PointName()
    *       | Coordinates()
    */
   public R visit(ExplodedSpecification n);

   /**
    * identifier -> Identifier()
    */
   public R visit(PointName n);

   /**
    * nodeToken -> "["
    * identifier -> Identifier()
    * nodeToken1 -> "]"
    */
   public R visit(Coordinates n);

   /**
    * identifier -> Identifier()
    * nodeListOptional -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n);

   /**
    * nodeToken -> ","
    * identifier -> Identifier()
    */
   public R visit(IdentifierRest n);

   /**
    * methodCall -> MethodCall()
    * nodeToken -> ";"
    */
   public R visit(MethodCallStatement n);

   /**
    * methodCallInConstructor -> MethodCallInConstructor()
    * nodeToken -> ";"
    */
   public R visit(MethodCallStatementInConstructor n);

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(PrintlnStatement n);

   /**
    * nodeToken -> "System.out.print"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(PrintStatement n);

   /**
    * nodeToken -> "System.err.println"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(PrintErrorStatement n);

   /**
    * nodeToken -> "return"
    * nodeOptional -> [ Identifier() ]
    * nodeToken1 -> ";"
    */
   public R visit(ReturnStatement n);

   /**
    * nodeToken -> "switch"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( SwitchEntry() )*
    * nodeToken4 -> "}"
    */
   public R visit(SwitchStatement n);

   /**
    * switchLabel -> SwitchLabel()
    * nodeToken -> ":"
    * block -> Block()
    */
   public R visit(SwitchEntry n);

   /**
    * nodeChoice -> Case()
    *       | Default()
    */
   public R visit(SwitchLabel n);

   /**
    * nodeToken -> "case"
    * identifier -> Identifier()
    */
   public R visit(Case n);

   /**
    * nodeToken -> "default"
    */
   public R visit(Default n);

   /**
    * nodeToken -> "throw"
    * nodeToken1 -> "new"
    * nodeToken2 -> "RuntimeException"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public R visit(ThrowStatement n);

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public R visit(WhileStatement n);

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "="
    * expression -> Expression()
    * nodeToken2 -> ";"
    */
   public R visit(FinalVariableDeclaration n);

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public R visit(UpdatableVariableDeclaration n);

   /**
    * nodeChoice -> ExpressionInParentheses()
    *       | ConditionalOrExpression()
    *       | SimpleDistributionExpression()
    *       | ConditionalAndExpression()
    *       | InclusiveOrExpression()
    *       | ExclusiveOrExpression()
    *       | AndExpression()
    *       | EqualsExpression()
    *       | NonEqualsExpression()
    *       | LessThanExpression()
    *       | GreaterThanExpression()
    *       | LessThanEqualExpression()
    *       | GreaterThanEqualExpression()
    *       | ShiftLeftExpression()
    *       | ShiftRightExpression()
    *       | ShiftRightUnsignedExpression()
    *       | PlusOffset()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesOffset()
    *       | TimesExpression()
    *       | DivideOffset()
    *       | DivideExpression()
    *       | ModulusExpression()
    *       | RegionConstant()
    *       | SinExpression()
    *       | CosExpression()
    *       | PowExpression()
    *       | ExpExpression()
    *       | SqrtExpression()
    *       | AbsExpression()
    *       | MinExpression()
    *       | MaxExpression()
    *       | LogExpression()
    *       | ComplimentExpression()
    *       | NotExpression()
    *       | CoercionToIntExpression()
    *       | CoercionToDoubleExpression()
    *       | CoercionToLongExpression()
    *       | CoercionToShortExpression()
    *       | CoercionToByteExpression()
    *       | TypeAnnotatedExpression()
    *       | Place()
    *       | CurrentTime()
    *       | ArrayAccess()
    *       | PointAccess()
    *       | MethodCall()
    *       | MethodCallInConstructor()
    *       | DotId()
    *       | DotIdentifierDotGet()
    *       | DotNext()
    *       | DotPrev()
    *       | DotIsFirst()
    *       | DotIsLast()
    *       | DotRegionDotSize()
    *       | DotIdentifier()
    *       | NewObject()
    *       | NewValueArray()
    *       | NewUpdatableArray()
    *       | IntegerLiteral()
    *       | LongLiteral()
    *       | HexLiteral()
    *       | FloatingPointLiteral()
    *       | StringLiteral()
    *       | True()
    *       | False()
    *       | HereLiteral()
    *       | PlaceFirstPlace()
    *       | PlaceLastPlace()
    *       | PlaceMaxPlaces()
    *       | JavaIntegerSize()
    *       | Identifier()
    */
   public R visit(Expression n);

   /**
    * nodeToken -> "("
    * expression -> Expression()
    * nodeToken1 -> ")"
    */
   public R visit(ExpressionInParentheses n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "||"
    * identifier1 -> Identifier()
    */
   public R visit(ConditionalOrExpression n);

   /**
    * nodeToken -> "["
    * nodeToken1 -> "0 :"
    * identifier -> Identifier()
    * nodeToken2 -> "]"
    * nodeToken3 -> "->"
    * nodeToken4 -> "here"
    */
   public R visit(SimpleDistributionExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "&&"
    * identifier1 -> Identifier()
    */
   public R visit(ConditionalAndExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "|"
    * identifier1 -> Identifier()
    */
   public R visit(InclusiveOrExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "^"
    * identifier1 -> Identifier()
    */
   public R visit(ExclusiveOrExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "&"
    * identifier1 -> Identifier()
    */
   public R visit(AndExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "=="
    * identifier1 -> Identifier()
    */
   public R visit(EqualsExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "!="
    * identifier1 -> Identifier()
    */
   public R visit(NonEqualsExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "<"
    * identifier1 -> Identifier()
    */
   public R visit(LessThanExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> ">"
    * identifier1 -> Identifier()
    */
   public R visit(GreaterThanExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "<="
    * identifier1 -> Identifier()
    */
   public R visit(LessThanEqualExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> ">="
    * identifier1 -> Identifier()
    */
   public R visit(GreaterThanEqualExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "<<"
    * identifier1 -> Identifier()
    */
   public R visit(ShiftLeftExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> ">>"
    * identifier1 -> Identifier()
    */
   public R visit(ShiftRightExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> ">>>"
    * identifier1 -> Identifier()
    */
   public R visit(ShiftRightUnsignedExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "+"
    * nodeToken1 -> "["
    * identifierList -> IdentifierList()
    * nodeToken2 -> "]"
    */
   public R visit(PlusOffset n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "+"
    * identifier1 -> Identifier()
    */
   public R visit(PlusExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "-"
    * identifier1 -> Identifier()
    */
   public R visit(MinusExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "*"
    * nodeToken1 -> "["
    * identifierList -> IdentifierList()
    * nodeToken2 -> "]"
    */
   public R visit(TimesOffset n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "*"
    * identifier1 -> Identifier()
    */
   public R visit(TimesExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "/"
    * nodeToken1 -> "["
    * identifierList -> IdentifierList()
    * nodeToken2 -> "]"
    */
   public R visit(DivideOffset n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "/"
    * identifier1 -> Identifier()
    */
   public R visit(DivideExpression n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "%"
    * identifier1 -> Identifier()
    */
   public R visit(ModulusExpression n);

   /**
    * nodeToken -> "["
    * nodeToken1 -> "0 :"
    * identifier -> Identifier()
    * nodeToken2 -> "]"
    */
   public R visit(RegionConstant n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "sin"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(SinExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "cos"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(CosExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "pow"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public R visit(PowExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "exp"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(ExpExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "sqrt"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(SqrtExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "abs"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(AbsExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "min"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public R visit(MinExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "max"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public R visit(MaxExpression n);

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "log"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public R visit(LogExpression n);

   /**
    * nodeToken -> "~"
    * identifier -> Identifier()
    */
   public R visit(ComplimentExpression n);

   /**
    * nodeToken -> "!"
    * identifier -> Identifier()
    */
   public R visit(NotExpression n);

   /**
    * nodeToken -> "("
    * nodeToken1 -> "int"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToIntExpression n);

   /**
    * nodeToken -> "("
    * nodeToken1 -> "double"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToDoubleExpression n);

   /**
    * nodeToken -> "("
    * nodeToken1 -> "long"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToLongExpression n);

   /**
    * nodeToken -> "("
    * nodeToken1 -> "short"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToShortExpression n);

   /**
    * nodeToken -> "("
    * nodeToken1 -> "byte"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToByteExpression n);

   /**
    * nodeToken -> "("
    * typeAnnotation -> TypeAnnotation()
    * nodeToken1 -> ")"
    * nodeToken2 -> "("
    * expression -> Expression()
    * nodeToken3 -> ")"
    */
   public R visit(TypeAnnotatedExpression n);

   /**
    * nodeChoice -> UpdatableArrayType()
    *       | ValueArrayType()
    *       | DistType()
    *       | RegionType()
    *       | PointType()
    */
   public R visit(TypeAnnotation n);

   /**
    * nodeToken -> "place.places"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    */
   public R visit(Place n);

   /**
    * nodeToken -> "System.currentTimeMillis"
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public R visit(CurrentTime n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * identifier1 -> Identifier()
    * nodeToken1 -> "]"
    */
   public R visit(ArrayAccess n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "[0]"
    */
   public R visit(PointAccess n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( IdentifierList() )?
    * nodeToken2 -> ")"
    */
   public R visit(MethodCall n);

   /**
    * nodeToken -> "this"
    * nodeToken1 -> "."
    * identifier -> Identifier()
    * nodeToken2 -> "("
    * nodeOptional -> ( IdentifierList() )?
    * nodeToken3 -> ")"
    */
   public R visit(MethodCallInConstructor n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "id"
    */
   public R visit(DotId n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "."
    * nodeToken2 -> "get"
    * nodeToken3 -> "("
    * identifierList -> IdentifierList()
    * nodeToken4 -> ")"
    */
   public R visit(DotIdentifierDotGet n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "next"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public R visit(DotNext n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "prev"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public R visit(DotPrev n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "isFirst"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public R visit(DotIsFirst n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "isLast"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public R visit(DotIsLast n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "region"
    * nodeToken2 -> "."
    * nodeToken3 -> "size"
    * nodeToken4 -> "("
    * nodeToken5 -> ")"
    */
   public R visit(DotRegionDotSize n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    */
   public R visit(DotIdentifier n);

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> [ IdentifierList() ]
    * nodeToken2 -> ")"
    */
   public R visit(NewObject n);

   /**
    * nodeToken -> "new"
    * nonArrayType -> NonArrayType()
    * nodeToken1 -> "value"
    * nodeToken2 -> "["
    * identifier -> Identifier()
    * nodeToken3 -> "]"
    * arrayInitializer -> ArrayInitializer()
    */
   public R visit(NewValueArray n);

   /**
    * nodeToken -> "new"
    * nonArrayType -> NonArrayType()
    * nodeToken1 -> "["
    * identifier -> Identifier()
    * nodeToken2 -> "]"
    * nodeOptional -> [ ArrayInitializer() ]
    */
   public R visit(NewUpdatableArray n);

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n);

   /**
    * nodeToken -> <LONG_LITERAL>
    */
   public R visit(LongLiteral n);

   /**
    * nodeToken -> <HEX_LITERAL>
    */
   public R visit(HexLiteral n);

   /**
    * nodeToken -> <FLOATING_POINT_LITERAL>
    */
   public R visit(FloatingPointLiteral n);

   /**
    * nodeToken -> <STRING_LITERAL>
    */
   public R visit(StringLiteral n);

   /**
    * nodeToken -> "true"
    */
   public R visit(True n);

   /**
    * nodeToken -> "false"
    */
   public R visit(False n);

   /**
    * nodeToken -> "here"
    */
   public R visit(HereLiteral n);

   /**
    * nodeToken -> "place.FIRST_PLACE"
    */
   public R visit(PlaceFirstPlace n);

   /**
    * nodeToken -> "place.LAST_PLACE"
    */
   public R visit(PlaceLastPlace n);

   /**
    * nodeToken -> "place.MAX_PLACES"
    */
   public R visit(PlaceMaxPlaces n);

   /**
    * nodeToken -> "java.lang.Integer.SIZE"
    */
   public R visit(JavaIntegerSize n);

   /**
    * nodeToken -> "("
    * pointType -> PointType()
    * explodedSpecification -> ExplodedSpecification()
    * nodeToken1 -> ")"
    * block -> Block()
    */
   public R visit(ArrayInitializer n);

}

