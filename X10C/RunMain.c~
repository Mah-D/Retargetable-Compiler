#include "gc.h"#include <math.h>
#include <string.h>
#include <sys/time.h>
#include <stdlib.h>
#include <stdio.h>
#include "RunMain.h"
/* class Program */ 
struct Dist1 /*VALUE*/ UniqueDistribution ;
int _LinearESOpenPIC2D_NUMBER_OF_XBITS ;
int _LinearESOpenPIC2D_NUMBER_OF_YBITS ;
int _LinearESOpenPIC2D_PARTICLE_XDENSITY ;
int _LinearESOpenPIC2D_PARTICLE_YDENSITY ;
double _LinearESOpenPIC2D_DELTA_TIME ;
double _LinearESOpenPIC2D_ELECTRON_CHARGE ;
double _LinearESOpenPIC2D_THERMAL_XVELOCITY ;
double _LinearESOpenPIC2D_THERMAL_YVELOCITY ;
int _LinearESOpenPIC2D_BOUNDARY_CONDITION ;
int _LinearESOpenPIC2D_TIME_STEPS ;
int _LinearESOpenPIC2D_SORT_TIME ;
double _LinearESOpenPIC2D_IMBALANCE ;
double _PoissonSolver_PI4I ;
double _PoissonSolver_SQT2I ;
double _PoissonSolver_SQT2PI ;
int _PoissonSolver_GREENS_IDX ;
int _PoissonSolver_SHAPE_IDX ;
int _PoissonSolver_ELECX_IDX ;
int _PoissonSolver_ELECY_IDX ;
double _PoissonSolver_AR ;
int _Timer_max_counters ;
int _X10Util_DEBUG ;
int _X10Util_ENABLE_CHECKS ;
double _X10Util_ERROR ;
int _LinearESOpenPIC2D_XLENGTH ;
int _LinearESOpenPIC2D_YLENGTH ;
int _LinearESOpenPIC2D_NPARTICLES ;
int _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS ;
int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX ;
int _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER ;
char * /*static*/toStringRegion2 (  struct Region2 const r ) 
{ /*UpdatableVariableDeclaration*/char * str = "" ; 
const int dim = r .regSize ; 
const int one = 1 ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int rReg = dimMinusOne + SX10_TEMP0 ; 
const int regType = r .regType ; 
if ( regType ) 
{ const int stride2 = 1 ; 
const int dim2 = r .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = r .low1 ; 
const int dim1 = r .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = r .low0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < rReg ; SX10_TEMP1 ++ ) 
{ const int pt1 = SX10_TEMP1 ; 
const int ordl = pt1 ; 
/*UpdatableVariableDeclaration*/int f2 = ordl / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; /*UpdatableVariableDeclaration*/ struct Point2 pt = Point2_Point2( &pt/*Assignment*/, f1 , f2 ) ; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint2 ( pt ) ; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC1 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC1, "%s%s",str,lBrace);
str = tempC1;/*ASSIGNMENT STRING*/
 char * tempC2 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC2, "%s%d",str,pt1);
str = tempC2;/*ASSIGNMENT STRING*/
 char * tempC3 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC3, "%s%s",str,colon);
str = tempC3;/*ASSIGNMENT STRING*/
 char * tempC4 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC4, "%s%s",str,ptStr);
str = tempC4;/*ASSIGNMENT STRING*/
 char * tempC5 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC5, "%s%s",str,rBrace);
str = tempC5;/*ASSIGNMENT STRING*/
 char * tempC6 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC6, "%s%s",str,endLine);
str = tempC6;} 

return str ; 
} 
else 
{ /*Updatable ARRAY*/ struct Point2 * const regArray = r .pointArray ; 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < rReg ; SX10_TEMP2 ++ ) 
{ const int pt1 = SX10_TEMP2 ; 
/*UpdatableVariableDeclaration*/ struct Point2 pt = regArray [ pt1 ] 
; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint2 ( pt ) ; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC7 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC7, "%s%s",str,lBrace);
str = tempC7;/*ASSIGNMENT STRING*/
 char * tempC8 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC8, "%s%d",str,pt1);
str = tempC8;/*ASSIGNMENT STRING*/
 char * tempC9 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC9, "%s%s",str,colon);
str = tempC9;/*ASSIGNMENT STRING*/
 char * tempC10 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC10, "%s%s",str,ptStr);
str = tempC10;/*ASSIGNMENT STRING*/
 char * tempC11 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC11, "%s%s",str,rBrace);
str = tempC11;/*ASSIGNMENT STRING*/
 char * tempC12 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC12, "%s%s",str,endLine);
str = tempC12;} 

return str ; 
} 


} 

ComplexRefArray2 /*static*/ArrayUtil_doubleToComplex (  struct doubleRefArray2 const src ) 
{ struct Dist2 RX10_TEMP0 = src .distValue ; 
struct Region2 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region2 rSrc = RX10_TEMP1 ; 
const int X10_TEMP4 = 1 ; 
struct Region1 rS2 = X10Util_getRank2D ( rSrc , X10_TEMP4 ) ; 
const int X10_TEMP6 = rS2 .regSize ; 
const int X10_TEMP7 = 2 ; 
const int X10_TEMP8 = X10_TEMP6 % X10_TEMP7 ; 
const int X10_TEMP9 = 0 ; 
const int X10_TEMP11 = X10_TEMP8 != X10_TEMP9 ; 
if ( X10_TEMP11 ) 
{ const char * X10_TEMP12 = "Error: doubleToComplex requires the second " ; 
const char * X10_TEMP13 = "dimension to be of even size" ; 
/*ASSIGNMENT STRING*/
 char * tempC13 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC13, "%s%s",X10_TEMP12,X10_TEMP13);
const char * X10_TEMP15 = tempC13;; 
fprintf(stderr, "%s\n" , X10_TEMP15 ) ; 
const int X10_TEMP16 = 0 ; 
const int X10_TEMP17 = 1 ; 
const int X10_TEMP18 = X10_TEMP16 - X10_TEMP17 ; 
struct Region2 X10_TEMP19 = createNewRegion2RR ( X10_TEMP16 , X10_TEMP18 , X10_TEMP16 , X10_TEMP18 ) ; 
const int X10_TEMP20 = /* here  */ 0 ; 
struct Dist2 X10_TEMP22 = getPlaceDist2 ( X10_TEMP19 , X10_TEMP20 ) ; 
struct Dist2 dResult = X10_TEMP22 ; 
struct Region2 RX10_TEMP2 = dResult .dReg ; 
const int RX10_TEMP3 = 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP5 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP5 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP5 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP8 = (ComplexStub *)GC_CALLOC(RX10_TEMP7,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP6 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP9 = SX10_TEMP3 ; 
const int RX10_TEMP10 = /* here  */ 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 ; 
const int RX10_TEMP12 = /* place.places ( RX10_TEMP11 )  */ 0 
; 
const int RX10_TEMP13 = getDistLocalCount2 ( dResult , RX10_TEMP11 ) ; 
const int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4 ; 
/* async ( RX10_TEMP12 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP15 = RX10_TEMP14 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP16 = (Complex *)calloc(RX10_TEMP15,sizeof( Complex )); 
struct ComplexStub RX10_TEMP17  ; 
ComplexStub_ComplexStub( &RX10_TEMP17/*Assignment*/, RX10_TEMP16 ) ; 
/* async ( RX10_TEMP10 )  */ 
{ RX10_TEMP8 [ RX10_TEMP9 ] = RX10_TEMP17 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP6,sizeof( ComplexStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP6 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP7 ; 
struct ComplexStub RX10_TEMP19 = RX10_TEMP8 [ RX10_TEMP20 ] 
; 
SX10_TEMP6 [ RX10_TEMP20 ] = RX10_TEMP19 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP18 = SX10_TEMP6 ; 
struct ComplexRefArray2 RX10_TEMP21  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP21/*Assignment*/, dResult , RX10_TEMP18 ) ; 
struct ComplexRefArray2 X10_TEMP25 = RX10_TEMP21 ; 
return X10_TEMP25 ; 
} 

const int X10_TEMP32 = 0 ; 
const int X10_TEMP27 = rS2 .regSize ; 
const int X10_TEMP28 = 2 ; 
const int X10_TEMP29 = X10_TEMP27 / X10_TEMP28 ; 
const int X10_TEMP30 = 1 ; 
const int X10_TEMP33 = X10_TEMP29 - X10_TEMP30 ; 
struct Region1 rD2 = createNewRegion1R ( X10_TEMP32 , X10_TEMP33 ) ; 
struct Dist2 RX10_TEMP22 = src .distValue ; 
struct Dist2 dSrc = RX10_TEMP22 ; 
const int X10_TEMP38 = 0 ; 
struct Dist1 X10_TEMP41 = X10Util_get2DDistRank ( dSrc , X10_TEMP38 ) ; 
struct Dist2 dResult = X10Util_extendDistRank2D ( X10_TEMP41 , rD2 ) ; 
struct Region2 RX10_TEMP23 = dResult .dReg ; 
const int RX10_TEMP24 = 0 ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP26 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP26 = RX10_TEMP26 - RX10_TEMP25 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP27 = RX10_TEMP26 + SX10_TEMP8 ; 
const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP28 = RX10_TEMP26 + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP29 = (ComplexStub *)calloc(RX10_TEMP28,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP27 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP30 = SX10_TEMP11 ; 
const int RX10_TEMP31 = /* here  */ 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 ; 
const int RX10_TEMP33 = /* place.places ( RX10_TEMP32 )  */ 0 
; 
const int RX10_TEMP34 = getDistLocalCount2 ( dResult , RX10_TEMP32 ) ; 
const int RX10_TEMP35 = RX10_TEMP34 - RX10_TEMP25 ; 
/* async ( RX10_TEMP33 )  */ 
{ const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP36 = RX10_TEMP35 + SX10_TEMP12 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP37 = (Complex *)calloc(RX10_TEMP36,sizeof( Complex )); 
struct ComplexStub RX10_TEMP38  ; 
ComplexStub_ComplexStub( &RX10_TEMP38/*Assignment*/, RX10_TEMP37 ) ; 
/* async ( RX10_TEMP31 )  */ 
{ RX10_TEMP29 [ RX10_TEMP30 ] = RX10_TEMP38 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP14 = (ComplexStub *)calloc(RX10_TEMP27,sizeof( ComplexStub )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP27 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP41 = SX10_TEMP15 ; 
struct ComplexStub RX10_TEMP40 = RX10_TEMP29 [ RX10_TEMP41 ] 
; 
SX10_TEMP14 [ RX10_TEMP41 ] = RX10_TEMP40 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP39 = SX10_TEMP14 ; 
struct ComplexRefArray2 RX10_TEMP42  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP42/*Assignment*/, dResult , RX10_TEMP39 ) ; 
struct ComplexRefArray2 result = RX10_TEMP42 ; 
/* finish  */ 
{ struct Region2 RX10_TEMP44 = dResult .dReg ; 
const int RX10_TEMP47 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP45 = RX10_TEMP44 .regSize ; 
RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP47 ; const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP45 + SX10_TEMP16 ; 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP46 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP43 = SX10_TEMP17 ; 
const int RX10_TEMP48 = RX10_TEMP43 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP44 , RX10_TEMP48 ) ; 
struct Region2 RX10_TEMP49 = dResult .dReg ; 
const int RX10_TEMP50 = searchPointInRegion2 ( RX10_TEMP49 , pt ) ; 
const int RX10_TEMP51 = 0 ; 
const int RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ const char * RX10_TEMP53 = "Point pt not found in the distribution dResult." ; 
fprintf(stderr, RX10_TEMP53 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP54 = getPlaceFromDist2 ( dResult , RX10_TEMP50 ) ; 
const int X10_TEMP45 = RX10_TEMP54 ; 
/* async ( X10_TEMP45 )  */ 
{ /*UpdatableVariableDeclaration*/int X10_TEMP49 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP50 = 2 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP55 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP56 = pt .f1 ; 
RX10_TEMP55 = RX10_TEMP55 * X10_TEMP49 ; RX10_TEMP56 = RX10_TEMP56 * X10_TEMP50 ; struct Point2 X10_TEMP52  ; 
Point2_Point2( &X10_TEMP52/*Assignment*/, RX10_TEMP55 , RX10_TEMP56 ) ; 
struct Dist2 RX10_TEMP57 = src .distValue ; 
struct Region2 RX10_TEMP58 = RX10_TEMP57 .dReg ; 
const int RX10_TEMP59 = searchPointInRegion2 ( RX10_TEMP58 , X10_TEMP52 ) ; 
const int RX10_TEMP60 = 0 ; 
const int RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP62 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP62 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP63 = getPlaceFromDist2 ( RX10_TEMP57 , RX10_TEMP59 ) ; 
const int RX10_TEMP65 = /* here  */ 0 ; 
const int RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP64 = "Bad place access for array src" ; 
fprintf(stderr, RX10_TEMP64 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP67 = getRefArrayValue2double ( src , RX10_TEMP59 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP66 = RX10_TEMP67 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP56 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP57 = 2 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP68 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP69 = pt .f1 ; 
RX10_TEMP68 = RX10_TEMP68 * X10_TEMP56 ; RX10_TEMP69 = RX10_TEMP69 * X10_TEMP57 ; struct Point2 X10_TEMP60  ; 
Point2_Point2( &X10_TEMP60/*Assignment*/, RX10_TEMP68 , RX10_TEMP69 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP62 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP70 = X10_TEMP60 .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP71 = X10_TEMP60 .f1 ; 
RX10_TEMP70 = RX10_TEMP70 + X10_TEMP61 ; RX10_TEMP71 = RX10_TEMP71 + X10_TEMP62 ; struct Point2 X10_TEMP64  ; 
Point2_Point2( &X10_TEMP64/*Assignment*/, RX10_TEMP70 , RX10_TEMP71 ) ; 
struct Dist2 RX10_TEMP72 = src .distValue ; 
struct Region2 RX10_TEMP73 = RX10_TEMP72 .dReg ; 
const int RX10_TEMP74 = searchPointInRegion2 ( RX10_TEMP73 , X10_TEMP64 ) ; 
const int RX10_TEMP75 = 0 ; 
const int RX10_TEMP76 = RX10_TEMP74 < RX10_TEMP75 ; 
if ( RX10_TEMP76 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP77 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP77 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP78 = getPlaceFromDist2 ( RX10_TEMP72 , RX10_TEMP74 ) ; 
const int RX10_TEMP80 = /* here  */ 0 ; 
const int RX10_TEMP81 = RX10_TEMP78 != RX10_TEMP80 ; 
if ( RX10_TEMP81 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP79 = "Bad place access for array src" ; 
fprintf(stderr, RX10_TEMP79 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP82 = getRefArrayValue2double ( src , RX10_TEMP74 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP67 = RX10_TEMP82 ; 
struct Complex X10_TEMP69  ; 
Complex_Complex( &X10_TEMP69/*Assignment*/, X10_TEMP66 , X10_TEMP67 ) ; 
struct Complex X10_TEMP70 = X10_TEMP69 ; 
struct Dist2 RX10_TEMP83 = result .distValue ; 
struct Region2 RX10_TEMP84 = RX10_TEMP83 .dReg ; 
const int RX10_TEMP85 = searchPointInRegion2 ( RX10_TEMP84 , pt ) ; 
const int RX10_TEMP86 = 0 ; 
const int RX10_TEMP87 = RX10_TEMP85 < RX10_TEMP86 ; 
if ( RX10_TEMP87 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP88 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP88 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP89 = getPlaceFromDist2 ( RX10_TEMP83 , RX10_TEMP85 ) ; 
const int RX10_TEMP91 = /* here  */ 0 ; 
const int RX10_TEMP92 = RX10_TEMP89 != RX10_TEMP91 ; 
if ( RX10_TEMP92 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP90 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP90 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( result , RX10_TEMP85 , X10_TEMP70 ) ; 
} 

} 

} 

return result ; 
} 

doubleRefArray2 /*static*/ArrayUtil_complexToDouble (  struct ComplexRefArray2 const src ) 
{ struct Dist2 RX10_TEMP0 = src .distValue ; 
struct Region2 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region2 rSrc = RX10_TEMP1 ; 
const int X10_TEMP4 = 1 ; 
struct Region1 rS2 = X10Util_getRank2D ( rSrc , X10_TEMP4 ) ; 
const int X10_TEMP12 = 0 ; 
const int X10_TEMP7 = 2 ; 
const int X10_TEMP8 = rS2 .regSize ; 
const int X10_TEMP9 = X10_TEMP7 * X10_TEMP8 ; 
const int X10_TEMP10 = 1 ; 
const int X10_TEMP13 = X10_TEMP9 - X10_TEMP10 ; 
struct Region1 rD2 = createNewRegion1R ( X10_TEMP12 , X10_TEMP13 ) ; 
struct Dist2 RX10_TEMP2 = src .distValue ; 
struct Dist2 dSrc = RX10_TEMP2 ; 
const int X10_TEMP18 = 0 ; 
struct Dist1 X10_TEMP21 = X10Util_get2DDistRank ( dSrc , X10_TEMP18 ) ; 
struct Dist2 dResult = X10Util_extendDistRank2D ( X10_TEMP21 , rD2 ) ; 
struct Region2 RX10_TEMP3 = dResult .dReg ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP6 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP6 = RX10_TEMP6 - RX10_TEMP5 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP6 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP8 = RX10_TEMP6 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP9 = (doubleStub *)calloc(RX10_TEMP8,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP7 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP10 = SX10_TEMP3 ; 
const int RX10_TEMP11 = /* here  */ 0 ; 
const int RX10_TEMP12 = RX10_TEMP10 ; 
const int RX10_TEMP13 = /* place.places ( RX10_TEMP12 )  */ 0 
; 
const int RX10_TEMP14 = getDistLocalCount2 ( dResult , RX10_TEMP12 ) ; 
const int RX10_TEMP15 = RX10_TEMP14 - RX10_TEMP5 ; 
/* async ( RX10_TEMP13 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP15 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP17 = (double *)calloc(RX10_TEMP16,sizeof( double )); 
struct doubleStub RX10_TEMP18  ; 
doubleStub_doubleStub( &RX10_TEMP18/*Assignment*/, RX10_TEMP17 ) ; 
/* async ( RX10_TEMP11 )  */ 
{ RX10_TEMP9 [ RX10_TEMP10 ] = RX10_TEMP18 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP7,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP7 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP20 = RX10_TEMP9 [ RX10_TEMP21 ] 
; 
SX10_TEMP6 [ RX10_TEMP21 ] = RX10_TEMP20 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP19 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP22  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP22/*Assignment*/, dResult , RX10_TEMP19 ) ; 
struct doubleRefArray2 result = RX10_TEMP22 ; 
/* finish  */ 
{ struct Region2 RX10_TEMP24 = dResult .dReg ; 
const int RX10_TEMP27 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = RX10_TEMP24 .regSize ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP26 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP9 ; 
const int RX10_TEMP28 = RX10_TEMP23 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP24 , RX10_TEMP28 ) ; 
struct Region2 RX10_TEMP29 = dResult .dReg ; 
const int RX10_TEMP30 = searchPointInRegion2 ( RX10_TEMP29 , pt ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pt not found in the distribution dResult." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist2 ( dResult , RX10_TEMP30 ) ; 
const int X10_TEMP25 = RX10_TEMP34 ; 
/* async ( X10_TEMP25 )  */ 
{ /*UpdatableVariableDeclaration*/int X10_TEMP28 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP29 = 2 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP35 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = pt .f1 ; 
RX10_TEMP35 = RX10_TEMP35 / X10_TEMP28 ; RX10_TEMP36 = RX10_TEMP36 / X10_TEMP29 ; struct Point2 ptd2  ; 
Point2_Point2( &ptd2/*Assignment*/, RX10_TEMP35 , RX10_TEMP36 ) ; 
const int X10_TEMP32 = pt .f1 ; 
const int X10_TEMP33 = 2 ; 
const int X10_TEMP34 = X10_TEMP32 % X10_TEMP33 ; 
const int X10_TEMP35 = 0 ; 
const int X10_TEMP37 = X10_TEMP34 == X10_TEMP35 ; 
if ( X10_TEMP37 ) 
{ struct Dist2 RX10_TEMP37 = src .distValue ; 
struct Region2 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , ptd2 ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist2 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array src" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP47 = getRefArrayValue2Complex ( src , RX10_TEMP39 ) ; 
struct Complex X10_TEMP40 = RX10_TEMP47 ; 
const double X10_TEMP42 = Complex_getReal ( X10_TEMP40 ) ; 
const double X10_TEMP43 = X10_TEMP42 ; 
struct Dist2 RX10_TEMP48 = result .distValue ; 
struct Region2 RX10_TEMP49 = RX10_TEMP48 .dReg ; 
const int RX10_TEMP50 = searchPointInRegion2 ( RX10_TEMP49 , pt ) ; 
const int RX10_TEMP51 = 0 ; 
const int RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP53 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP53 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP54 = getPlaceFromDist2 ( RX10_TEMP48 , RX10_TEMP50 ) ; 
const int RX10_TEMP56 = /* here  */ 0 ; 
const int RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56 ; 
if ( RX10_TEMP57 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP55 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP55 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP50 , X10_TEMP43 ) ; 
} 
else 
{ struct Dist2 RX10_TEMP58 = src .distValue ; 
struct Region2 RX10_TEMP59 = RX10_TEMP58 .dReg ; 
const int RX10_TEMP60 = searchPointInRegion2 ( RX10_TEMP59 , ptd2 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getPlaceFromDist2 ( RX10_TEMP58 , RX10_TEMP60 ) ; 
const int RX10_TEMP66 = /* here  */ 0 ; 
const int RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Bad place access for array src" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP68 = getRefArrayValue2Complex ( src , RX10_TEMP60 ) ; 
struct Complex X10_TEMP46 = RX10_TEMP68 ; 
const double X10_TEMP48 = Complex_getImag ( X10_TEMP46 ) ; 
const double X10_TEMP49 = X10_TEMP48 ; 
struct Dist2 RX10_TEMP69 = result .distValue ; 
struct Region2 RX10_TEMP70 = RX10_TEMP69 .dReg ; 
const int RX10_TEMP71 = searchPointInRegion2 ( RX10_TEMP70 , pt ) ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP75 = getPlaceFromDist2 ( RX10_TEMP69 , RX10_TEMP71 ) ; 
const int RX10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP71 , X10_TEMP49 ) ; 
} 


} 

} 

} 

return result ; 
} 

ComplexRefArray2 /*static*/ArrayUtil_transpose (  struct ComplexRefArray2 const data ) 
{ struct Dist2 RX10_TEMP0 = data .distValue ; 
struct Dist2 X10_TEMP1 = RX10_TEMP0 ; 
struct Dist2 dData = X10_TEMP1 ; 
const int X10_TEMP4 = X10Util_isDistBlockStar ( dData ) ; 
const int X10_TEMP6 = ! X10_TEMP4 ; 
if ( X10_TEMP6 ) 
{ const char * X10_TEMP7 = "Transpose only works on star block" ; 
const char * X10_TEMP8 = "distributed arrays" ; 
/*ASSIGNMENT STRING*/
 char * tempC14 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC14, "%s%s",X10_TEMP7,X10_TEMP8);
const char * X10_TEMP10 = tempC14;; 
X10Util_println ( X10_TEMP10 ) ; 
const char * X10_TEMP11 = "transpose: " ; 
struct Dist2 RX10_TEMP1 = data .distValue ; 
struct Dist2 X10_TEMP12 = RX10_TEMP1 ; 
const char * RX10_TEMP2 = toStringDist2 ( X10_TEMP12 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC15 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC15, "%s%s",X10_TEMP11,RX10_TEMP2);
const char * X10_TEMP14 = tempC15;; 
fprintf(stderr, X10_TEMP14 ) ; 
exit(EXIT_FAILURE);
} 

struct Dist2 dResult = X10Util_transposeBlockStar ( dData ) ; 
struct Region2 RX10_TEMP3 = dResult .dReg ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP6 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP6 = RX10_TEMP6 - RX10_TEMP5 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP6 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP8 = RX10_TEMP6 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP9 = (ComplexStub *)calloc(RX10_TEMP8,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP7 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP10 = SX10_TEMP3 ; 
const int RX10_TEMP11 = /* here  */ 0 ; 
const int RX10_TEMP12 = RX10_TEMP10 ; 
const int RX10_TEMP13 = /* place.places ( RX10_TEMP12 )  */ 0 
; 
const int RX10_TEMP14 = getDistLocalCount2 ( dResult , RX10_TEMP12 ) ; 
const int RX10_TEMP15 = RX10_TEMP14 - RX10_TEMP5 ; 
/* async ( RX10_TEMP13 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP15 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP17 = (Complex *)calloc(RX10_TEMP16,sizeof( Complex )); 
struct ComplexStub RX10_TEMP18  ; 
ComplexStub_ComplexStub( &RX10_TEMP18/*Assignment*/, RX10_TEMP17 ) ; 
/* async ( RX10_TEMP11 )  */ 
{ RX10_TEMP9 [ RX10_TEMP10 ] = RX10_TEMP18 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP7,sizeof( ComplexStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP7 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP7 ; 
struct ComplexStub RX10_TEMP20 = RX10_TEMP9 [ RX10_TEMP21 ] 
; 
SX10_TEMP6 [ RX10_TEMP21 ] = RX10_TEMP20 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP19 = SX10_TEMP6 ; 
struct ComplexRefArray2 RX10_TEMP22  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP22/*Assignment*/, dResult , RX10_TEMP19 ) ; 
struct ComplexRefArray2 result = RX10_TEMP22 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP19 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP24 = X10_TEMP19 .dReg ; 
const int RX10_TEMP27 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = RX10_TEMP24 .regSize ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP26 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP9 ; 
const int RX10_TEMP28 = RX10_TEMP23 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP24 , RX10_TEMP28 ) ; 
struct Region1 RX10_TEMP29 = X10_TEMP19 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pl ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pl not found in the distribution X10_TEMP19." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP19 , RX10_TEMP30 ) ; 
const int X10_TEMP20 = RX10_TEMP34 ; 
/* async ( X10_TEMP20 )  */ 
{ struct Region2 rLocal = X10Util_get2DLRegion ( dData ) ; 
struct Region2 rTtmp = X10Util_transposeRegion ( rLocal ) ; 
const int X10_TEMP25 = rLocal .regSize ; 
const int X10_TEMP26 = 0 ; 
const int X10_TEMP28 = X10_TEMP25 > X10_TEMP26 ; 
if ( X10_TEMP28 ) 
{ const int X10_TEMP31 = 0 ; 
struct Region1 rTtmp1 = X10Util_getRank2D ( rTtmp , X10_TEMP31 ) ; 
const int X10_TEMP35 = 1 ; 
struct Region1 rTtmp2 = X10Util_getRank2D ( rTtmp , X10_TEMP35 ) ; 
const int RX10_TEMP35 = rTtmp1 .regSize ; 
const int RX10_TEMP36 = 0 ; 
const int RX10_TEMP37 = RX10_TEMP35 <= RX10_TEMP36 ; 
if ( RX10_TEMP37 ) 
{ const char * RX10_TEMP38 = "Operation low() not defined on empty region rTtmp1" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP39 = regionLow ( rTtmp1 ) ; 
const int RX10_TEMP39 = rTtmp1 .regSize ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 <= RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ const char * RX10_TEMP42 = "Operation high() not defined on empty region rTtmp1" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP40 = regionHigh ( rTtmp1 ) ; 
const int RX10_TEMP43 = rTtmp2 .regSize ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 <= RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ const char * RX10_TEMP46 = "Operation low() not defined on empty region rTtmp2" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP43 = regionLow ( rTtmp2 ) ; 
const int RX10_TEMP47 = rTtmp2 .regSize ; 
const int RX10_TEMP48 = 0 ; 
const int RX10_TEMP49 = RX10_TEMP47 <= RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ const char * RX10_TEMP50 = "Operation high() not defined on empty region rTtmp2" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP44 = regionHigh ( rTtmp2 ) ; 
struct Region2 rLocalT = createNewRegion2RR ( X10_TEMP39 , X10_TEMP40 , X10_TEMP43 , X10_TEMP44 ) ; 
struct Dist1 X10_TEMP46 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP51 = X10_TEMP46 .dReg ; 
struct Region1 X10_TEMP47 = RX10_TEMP51 ; 
struct Region1 rRSBuffer = X10_TEMP47 ; 
struct Region1 RX10_TEMP52 = rRSBuffer ; 
const int RX10_TEMP69 = rRSBuffer .regSize ; 
const int RX10_TEMP70 = 1 ; 
const int RX10_TEMP71 = RX10_TEMP69 - RX10_TEMP70 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP68 = RX10_TEMP71 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ struct Region2 * const SX10_TEMP11 = (Region2 *)calloc(RX10_TEMP68,sizeof( Region2 )); 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP68 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP53 = SX10_TEMP12 ; 
const int RX10_TEMP54 = RX10_TEMP53 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
struct Dist1 X10_TEMP49 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP55 = X10_TEMP49 .dReg ; 
const int RX10_TEMP56 = searchPointInRegion1 ( RX10_TEMP55 , p ) ; 
const int RX10_TEMP57 = 0 ; 
const int RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57 ; 
if ( RX10_TEMP58 ) 
{ const char * RX10_TEMP59 = "Point p not found in the distribution X10_TEMP49." ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP60 = getPlaceFromDist1 ( X10_TEMP49 , RX10_TEMP56 ) ; 
const int X10_TEMP51 = RX10_TEMP60 ; 
struct Dist2 X10_TEMP53 = restrictDist2 ( dResult , X10_TEMP51 ) ; 
struct Region2 RX10_TEMP61 = X10_TEMP53 .dReg ; 
struct Region2 X10_TEMP54 = RX10_TEMP61 ; 
struct Region2 rTLocal = X10_TEMP54 ; 
const int X10_TEMP56 = 0 ; 
const int X10_TEMP57 = 1 ; 
const int X10_TEMP58 = X10_TEMP56 - X10_TEMP57 ; 
const int X10_TEMP59 = /* here  */ 0 ; 
/*UpdatableVariableDeclaration*/ struct Region2 X10_TEMP60 = createNewRegion2RR ( X10_TEMP56 , X10_TEMP58 , X10_TEMP56 , X10_TEMP58 ) ; 
const int RX10_TEMP65 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP63 = rLocalT .regSize ; 
RX10_TEMP63 = RX10_TEMP63 - RX10_TEMP65 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP64 = RX10_TEMP63 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP64 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP14 ; 
const int RX10_TEMP66 = RX10_TEMP62 ; 
struct Point2 X10_TEMP61 = regionOrdinalPoint2 ( rLocalT , RX10_TEMP66 ) ; 
const int X10_TEMP62 = X10_TEMP61 .f0 ; 
const int X10_TEMP63 = X10_TEMP61 .f1 ; 
const int RX10_TEMP67 = regionContainsPoint2 ( rTLocal , X10_TEMP61 ) ; 
const int X10_TEMP64 = RX10_TEMP67 ; 
if ( X10_TEMP64 ) 
{ struct Region2 X10_TEMP65 = createNewRegion2RR ( X10_TEMP62 , X10_TEMP62 , X10_TEMP63 , X10_TEMP63 ) ; 
X10_TEMP60 = unionRegion2 ( X10_TEMP60 , X10_TEMP65 ) ; } 

} 

struct Region2 X10_TEMP66 = X10_TEMP60 ; 
SX10_TEMP11 [ RX10_TEMP53 ] = X10_TEMP66 ; 
} 

/*Updatable ARRAY*/ struct Region2 * const RX10_TEMP72 = SX10_TEMP11 ; 
struct Region2ValArray1 RX10_TEMP73  ; 
Region2ValArray1_Region2ValArray1( &RX10_TEMP73/*Assignment*/, rRSBuffer , RX10_TEMP72 ) ; 
struct Region2ValArray1 X10_TEMP68 = RX10_TEMP73 ; 
struct Region2ValArray1 rSBuffer = X10_TEMP68 ; 
struct Region2 RX10_TEMP74 = rLocalT ; 
const int RX10_TEMP91 = rLocalT .regSize ; 
const int RX10_TEMP92 = 1 ; 
const int RX10_TEMP93 = RX10_TEMP91 - RX10_TEMP92 ; 
const int SX10_TEMP15 = 1 ; 
const int RX10_TEMP90 = RX10_TEMP93 + SX10_TEMP15 ; 
/*Updatable ARRAY*/ struct Complex * const SX10_TEMP16 = (Complex *)calloc(RX10_TEMP90,sizeof( Complex )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP90 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP75 = SX10_TEMP17 ; 
const int RX10_TEMP77 = RX10_TEMP75 ; 
struct Point2 RX10_TEMP76 = regionOrdinalPoint2 ( RX10_TEMP74 , RX10_TEMP77 ) ; 
const int i = RX10_TEMP76 .f0 ; 
const int j = RX10_TEMP76 .f1 ; 
struct Point2 RX10_TEMP78  ; 
Point2_Point2( &RX10_TEMP78/*Assignment*/, j , i ) ; 
struct Dist2 RX10_TEMP79 = data .distValue ; 
struct Region2 RX10_TEMP80 = RX10_TEMP79 .dReg ; 
const int RX10_TEMP81 = searchPointInRegion2 ( RX10_TEMP80 , RX10_TEMP78 ) ; 
const int RX10_TEMP82 = 0 ; 
const int RX10_TEMP83 = RX10_TEMP81 < RX10_TEMP82 ; 
if ( RX10_TEMP83 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP84 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP84 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP85 = getPlaceFromDist2 ( RX10_TEMP79 , RX10_TEMP81 ) ; 
const int RX10_TEMP87 = /* here  */ 0 ; 
const int RX10_TEMP88 = RX10_TEMP85 != RX10_TEMP87 ; 
if ( RX10_TEMP88 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP86 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP86 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP89 = getRefArrayValue2Complex ( data , RX10_TEMP81 ) ; 
struct Complex X10_TEMP73 = RX10_TEMP89 ; 
SX10_TEMP16 [ RX10_TEMP75 ] = X10_TEMP73 ; 
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP94 = SX10_TEMP16 ; 
struct ComplexValArray2 RX10_TEMP95  ; 
ComplexValArray2_ComplexValArray2( &RX10_TEMP95/*Assignment*/, rLocalT , RX10_TEMP94 ) ; 
struct ComplexValArray2 X10_TEMP74 = RX10_TEMP95 ; 
struct ComplexValArray2 sBuffer = X10_TEMP74 ; 
const int X10_TEMP77 = /* here  */ 0 ; 
struct Region1 RX10_TEMP97 = rSBuffer .regionValue ; 
const int RX10_TEMP100 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP98 = RX10_TEMP97 .regSize ; 
RX10_TEMP98 = RX10_TEMP98 - RX10_TEMP100 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP99 = RX10_TEMP98 + SX10_TEMP18 ; 
for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP99 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP96 = SX10_TEMP19 ; 
const int RX10_TEMP101 = RX10_TEMP96 ; 
struct Point1 i = regionOrdinalPoint1 ( RX10_TEMP97 , RX10_TEMP101 ) ; 
/* async ( X10_TEMP77 )  */ 
{ struct Region1 RX10_TEMP102 = rSBuffer .regionValue ; 
const int RX10_TEMP103 = searchPointInRegion1 ( RX10_TEMP102 , i ) ; 
const int RX10_TEMP104 = 0 ; 
const int RX10_TEMP105 = RX10_TEMP103 < RX10_TEMP104 ; 
if ( RX10_TEMP105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP106 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP106 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Region2 * const RX10_TEMP107 = rSBuffer .contents ; 
struct Region2 X10_TEMP81 = RX10_TEMP107 [ RX10_TEMP103 ] 
; 
struct Dist1 X10_TEMP79 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP108 = X10_TEMP79 .dReg ; 
const int RX10_TEMP109 = searchPointInRegion1 ( RX10_TEMP108 , i ) ; 
const int RX10_TEMP110 = 0 ; 
const int RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ const char * RX10_TEMP112 = "Point i not found in the distribution X10_TEMP79." ; 
fprintf(stderr, RX10_TEMP112 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP113 = getPlaceFromDist1 ( X10_TEMP79 , RX10_TEMP109 ) ; 
const int X10_TEMP82 = RX10_TEMP113 ; 
struct Dist2 X10_TEMP84 = getPlaceDist2 ( X10_TEMP81 , X10_TEMP82 ) ; 
struct Region2 RX10_TEMP115 = X10_TEMP84 .dReg ; 
const int RX10_TEMP118 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP116 = RX10_TEMP115 .regSize ; 
RX10_TEMP116 = RX10_TEMP116 - RX10_TEMP118 ; const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP117 = RX10_TEMP116 + SX10_TEMP20 ; 
for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP117 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP114 = SX10_TEMP21 ; 
const int RX10_TEMP119 = RX10_TEMP114 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP115 , RX10_TEMP119 ) ; 
struct Region2 RX10_TEMP120 = X10_TEMP84 .dReg ; 
const int RX10_TEMP121 = searchPointInRegion2 ( RX10_TEMP120 , pt ) ; 
const int RX10_TEMP122 = 0 ; 
const int RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ const char * RX10_TEMP124 = "Point pt not found in the distribution X10_TEMP84." ; 
fprintf(stderr, RX10_TEMP124 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP125 = getPlaceFromDist2 ( X10_TEMP84 , RX10_TEMP121 ) ; 
const int X10_TEMP85 = RX10_TEMP125 ; 
/* async ( X10_TEMP85 )  */ 
{ struct Region2 RX10_TEMP126 = sBuffer .regionValue ; 
const int RX10_TEMP127 = searchPointInRegion2 ( RX10_TEMP126 , pt ) ; 
const int RX10_TEMP128 = 0 ; 
const int RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128 ; 
if ( RX10_TEMP129 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP130 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP130 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP131 = sBuffer .contents ; 
struct Complex X10_TEMP89 = RX10_TEMP131 [ RX10_TEMP127 ] 
; 
struct Complex X10_TEMP90 = X10_TEMP89 ; 
struct Dist2 RX10_TEMP132 = result .distValue ; 
struct Region2 RX10_TEMP133 = RX10_TEMP132 .dReg ; 
const int RX10_TEMP134 = searchPointInRegion2 ( RX10_TEMP133 , pt ) ; 
const int RX10_TEMP135 = 0 ; 
const int RX10_TEMP136 = RX10_TEMP134 < RX10_TEMP135 ; 
if ( RX10_TEMP136 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP137 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP137 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP138 = getPlaceFromDist2 ( RX10_TEMP132 , RX10_TEMP134 ) ; 
const int RX10_TEMP140 = /* here  */ 0 ; 
const int RX10_TEMP141 = RX10_TEMP138 != RX10_TEMP140 ; 
if ( RX10_TEMP141 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP139 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP139 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( result , RX10_TEMP134 , X10_TEMP90 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

return result ; 
} 

double /*static*/Complex_getReal (  struct Complex const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .real ; 
return X10_TEMP2 ; 
} 

double /*static*/Complex_getImag (  struct Complex const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .imag ; 
return X10_TEMP2 ; 
} 

Complex /*static*/Complex_add (  struct Complex const X10_TEMP0 ,  struct Complex const n ) 
{ const double X10_TEMP1 = Complex_getReal ( X10_TEMP0 ) ; 
const double X10_TEMP2 = Complex_getReal ( n ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP1 + X10_TEMP2 ; 
const double X10_TEMP4 = Complex_getImag ( X10_TEMP0 ) ; 
const double X10_TEMP5 = Complex_getImag ( n ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP4 + X10_TEMP5 ; 
struct Complex X10_TEMP10  ; 
Complex_Complex( &X10_TEMP10/*Assignment*/, X10_TEMP7 , X10_TEMP8 ) ; 
return X10_TEMP10 ; 
} 

Complex /*static*/Complex_sub (  struct Complex const X10_TEMP0 ,  struct Complex const n ) 
{ const double X10_TEMP1 = Complex_getReal ( X10_TEMP0 ) ; 
const double X10_TEMP2 = Complex_getReal ( n ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP1 - X10_TEMP2 ; 
const double X10_TEMP4 = Complex_getImag ( X10_TEMP0 ) ; 
const double X10_TEMP5 = Complex_getImag ( n ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP4 - X10_TEMP5 ; 
struct Complex X10_TEMP10  ; 
Complex_Complex( &X10_TEMP10/*Assignment*/, X10_TEMP7 , X10_TEMP8 ) ; 
return X10_TEMP10 ; 
} 

Complex /*static*/Complex_mult (  struct Complex const X10_TEMP0 ,  struct Complex const n ) 
{ const double a = Complex_getReal ( X10_TEMP0 ) ; 
const double b = Complex_getImag ( X10_TEMP0 ) ; 
const double c = Complex_getReal ( n ) ; 
const double d = Complex_getImag ( n ) ; 
const double X10_TEMP5 = a * c ; 
const double X10_TEMP6 = b * d ; 
/*UpdatableVariableDeclaration*/double X10_TEMP11 = X10_TEMP5 - X10_TEMP6 ; 
const double X10_TEMP8 = a * d ; 
const double X10_TEMP9 = b * c ; 
/*UpdatableVariableDeclaration*/double X10_TEMP12 = X10_TEMP8 + X10_TEMP9 ; 
struct Complex X10_TEMP14  ; 
Complex_Complex( &X10_TEMP14/*Assignment*/, X10_TEMP11 , X10_TEMP12 ) ; 
return X10_TEMP14 ; 
} 

Complex /*static*/Complex_multS (  struct Complex const X10_TEMP0 , const double r ) 
{ const double X10_TEMP1 = Complex_getReal ( X10_TEMP0 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP5 = r * X10_TEMP1 ; 
const double X10_TEMP3 = Complex_getImag ( X10_TEMP0 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP6 = r * X10_TEMP3 ; 
struct Complex X10_TEMP8  ; 
Complex_Complex( &X10_TEMP8/*Assignment*/, X10_TEMP5 , X10_TEMP6 ) ; 
return X10_TEMP8 ; 
} 

Complex /*static*/Complex_getConjg (  struct Complex const X10_TEMP0 ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP5 = Complex_getReal ( X10_TEMP0 ) ; 
const double X10_TEMP2 = Complex_getImag ( X10_TEMP0 ) ; 
const int X10_TEMP3 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP3 - X10_TEMP2 ; 
struct Complex X10_TEMP8  ; 
Complex_Complex( &X10_TEMP8/*Assignment*/, X10_TEMP5 , X10_TEMP6 ) ; 
return X10_TEMP8 ; 
} 

double /*static*/Complex_multConjg (  struct Complex const X10_TEMP0 ) 
{ const double a = Complex_getReal ( X10_TEMP0 ) ; 
const double b = Complex_getImag ( X10_TEMP0 ) ; 
const double X10_TEMP3 = a * a ; 
const double X10_TEMP4 = b * b ; 
const double X10_TEMP6 = X10_TEMP3 + X10_TEMP4 ; 
return X10_TEMP6 ; 
} 

int /*static*/Complex_complexEquals (  struct Complex const X10_TEMP0 ,  struct Complex const c ) 
{ const double X10_TEMP1 = Complex_getReal ( X10_TEMP0 ) ; 
const double X10_TEMP2 = Complex_getReal ( c ) ; 
const double X10_TEMP4 = X10_TEMP1 - X10_TEMP2 ; 
const double X10_TEMP5 = fabs ( X10_TEMP4 ) ; 
const int X10_TEMP7 = X10_TEMP5 < _X10Util_ERROR ; 
const double X10_TEMP8 = Complex_getImag ( X10_TEMP0 ) ; 
const double X10_TEMP9 = Complex_getImag ( c ) ; 
const double X10_TEMP11 = X10_TEMP8 - X10_TEMP9 ; 
const double X10_TEMP12 = fabs ( X10_TEMP11 ) ; 
const int X10_TEMP14 = X10_TEMP12 < _X10Util_ERROR ; 
const int X10_TEMP16 = X10_TEMP7 && X10_TEMP14 ; 
return X10_TEMP16 ; 
} 

char * /*static*/Complex_toString (  struct Complex const X10_TEMP0 ) 
{ const double r = Complex_getReal ( X10_TEMP0 ) ; 
const double i = Complex_getImag ( X10_TEMP0 ) ; 
const char * X10_TEMP3 = "(" ; 
/*ASSIGNMENT STRING*/
 char * tempC16 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC16, "%s%f",X10_TEMP3,r);
const char * X10_TEMP4 = tempC16;; 
const char * X10_TEMP5 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC17 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC17, "%s%s",X10_TEMP4,X10_TEMP5);
const char * X10_TEMP6 = tempC17;; 
/*ASSIGNMENT STRING*/
 char * tempC18 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC18, "%s%f",X10_TEMP6,i);
const char * X10_TEMP7 = tempC18;; 
const char * X10_TEMP8 = ")" ; 
/*ASSIGNMENT STRING*/
 char * tempC19 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC19, "%s%s",X10_TEMP7,X10_TEMP8);
const char * X10_TEMP10 = tempC19;; 
return X10_TEMP10 ; 
} 

ComplexRefArray2 /*static*/FourierTransform2D_transformC (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ FourierTransform2D_scrambleY ( X10_TEMP0 , f ) ; 
const int X10_TEMP4 = 0 ; 
FourierTransform2D_bitReverse ( X10_TEMP0 , f , X10_TEMP4 ) ; 
const int X10_TEMP8 = 0 ; 
const int X10_TEMP9 = 0 ; 
FourierTransform2D_transformRank ( X10_TEMP0 , f , X10_TEMP8 , X10_TEMP9 ) ; 
struct ComplexRefArray2 g = ArrayUtil_transpose ( f ) ; 
FourierTransform2D_scrambleX ( X10_TEMP0 , g ) ; 
const int X10_TEMP15 = 1 ; 
FourierTransform2D_bitReverse ( X10_TEMP0 , g , X10_TEMP15 ) ; 
const int X10_TEMP19 = 1 ; 
const int X10_TEMP20 = 0 ; 
FourierTransform2D_transformRank ( X10_TEMP0 , g , X10_TEMP19 , X10_TEMP20 ) ; 
return g ; 
} 

ComplexRefArray2 /*static*/FourierTransform2D_transformD (  struct FourierTransform2D const X10_TEMP0 ,  struct doubleRefArray2 const f ) 
{ struct ComplexRefArray2 X10_TEMP3 = ArrayUtil_doubleToComplex ( f ) ; 
struct ComplexRefArray2 X10_TEMP5 = FourierTransform2D_transformC ( X10_TEMP0 , X10_TEMP3 ) ; 
return X10_TEMP5 ; 
} 

ComplexRefArray2 /*static*/FourierTransform2D_inverseTransformC (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ const int X10_TEMP3 = 1 ; 
FourierTransform2D_bitReverse ( X10_TEMP0 , f , X10_TEMP3 ) ; 
const int X10_TEMP7 = 1 ; 
const int X10_TEMP8 = 1 ; 
FourierTransform2D_transformRank ( X10_TEMP0 , f , X10_TEMP7 , X10_TEMP8 ) ; 
FourierTransform2D_unscrambleX ( X10_TEMP0 , f ) ; 
struct ComplexRefArray2 g = ArrayUtil_transpose ( f ) ; 
const int X10_TEMP14 = 0 ; 
FourierTransform2D_bitReverse ( X10_TEMP0 , g , X10_TEMP14 ) ; 
const int X10_TEMP18 = 0 ; 
const int X10_TEMP19 = 1 ; 
FourierTransform2D_transformRank ( X10_TEMP0 , g , X10_TEMP18 , X10_TEMP19 ) ; 
FourierTransform2D_unscrambleY ( X10_TEMP0 , g ) ; 
return g ; 
} 

ComplexRefArray2 /*static*/FourierTransform2D_inverseTransformD (  struct FourierTransform2D const X10_TEMP0 ,  struct doubleRefArray2 const f ) 
{ struct ComplexRefArray2 X10_TEMP3 = ArrayUtil_doubleToComplex ( f ) ; 
struct ComplexRefArray2 X10_TEMP5 = FourierTransform2D_inverseTransformC ( X10_TEMP0 , X10_TEMP3 ) ; 
return X10_TEMP5 ; 
} 

void /*static*/FourierTransform2D_bitReverse (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f , const int rnk ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP3 = rnk == X10_TEMP1 ; 
const int X10_TEMP4 = X10_TEMP3 ; 
const int X10_TEMP6 = X10_TEMP0 .nBits2 ; 
const int X10_TEMP7 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP9 = X10_TEMP6 - X10_TEMP7 ; 
if ( X10_TEMP4 ) 
{ X10_TEMP9 = X10_TEMP0 .nBits1 ; } 

const int X10_TEMP10 = X10_TEMP9 ; 
const int nBits = X10_TEMP10 ; 
const int X10_TEMP11 = 0 ; 
const int X10_TEMP13 = rnk == X10_TEMP11 ; 
const int X10_TEMP14 = X10_TEMP13 ; 
const int X10_TEMP16 = X10_TEMP0 .length2 ; 
const int X10_TEMP17 = 2 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP19 = X10_TEMP16 / X10_TEMP17 ; 
if ( X10_TEMP14 ) 
{ X10_TEMP19 = X10_TEMP0 .length1 ; } 

const int X10_TEMP20 = X10_TEMP19 ; 
const int r1Length = X10_TEMP20 ; 
const int X10_TEMP21 = 1 ; 
const int X10_TEMP23 = X10_TEMP21 << nBits ; 
const int nrx = X10_TEMP23 / r1Length ; 
/* finish  */ 
{ struct Dist1 X10_TEMP26 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP26 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP26 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP26." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP26 , RX10_TEMP7 ) ; 
const int X10_TEMP27 = RX10_TEMP11 ; 
/* async ( X10_TEMP27 )  */ 
{ struct Dist2 RX10_TEMP12 = f .distValue ; 
struct Dist2 dF = RX10_TEMP12 ; 
const int X10_TEMP31 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dF , X10_TEMP31 ) ; 
const int X10_TEMP36 = 0 ; 
const int X10_TEMP34 = 1 ; 
const int X10_TEMP37 = r1Length - X10_TEMP34 ; 
struct Region1 X10_TEMP39 = createNewRegion1R ( X10_TEMP36 , X10_TEMP37 ) ; 
const int X10_TEMP40 = /* here  */ 0 ; 
const int RX10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP15 = X10_TEMP39 .regSize ; 
RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP15 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP16 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP3 ; 
const int RX10_TEMP18 = RX10_TEMP13 ; 
struct Point1 RX10_TEMP14 = regionOrdinalPoint1 ( X10_TEMP39 , RX10_TEMP18 ) ; 
const int j1 = RX10_TEMP14 .f0 ; 
/* async ( X10_TEMP40 )  */ 
{ struct intValArray1 X10_TEMP41 = X10_TEMP0 .tableBitReverse ; 
struct Point1 RX10_TEMP19  ; 
Point1_Point1( &RX10_TEMP19/*Assignment*/, j1 ) ; 
struct Region1 RX10_TEMP20 = X10_TEMP41 .regionValue ; 
const int RX10_TEMP21 = searchPointInRegion1 ( RX10_TEMP20 , RX10_TEMP19 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ int * const RX10_TEMP25 = X10_TEMP41 .contents ; 
const int X10_TEMP46 = RX10_TEMP25 [ RX10_TEMP21 ] 
; 
const int X10_TEMP43 = X10_TEMP0 .maxBits ; 
const int X10_TEMP45 = X10_TEMP43 - nBits ; 
const int j2 = X10_TEMP46 >> X10_TEMP45 ; 
const int X10_TEMP49 = j1 < j2 ; 
if ( X10_TEMP49 ) 
{ /* finish  */ 
{ const int X10_TEMP51 = /* here  */ 0 ; 
const int RX10_TEMP30 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP28 = rLocal1 .regSize ; 
RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP28 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP29 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP5 ; 
const int RX10_TEMP31 = RX10_TEMP26 ; 
struct Point1 RX10_TEMP27 = regionOrdinalPoint1 ( rLocal1 , RX10_TEMP31 ) ; 
const int i = RX10_TEMP27 .f0 ; 
/* async ( X10_TEMP51 )  */ 
{ struct Point2 RX10_TEMP32  ; 
Point2_Point2( &RX10_TEMP32/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP33 = f .distValue ; 
struct Region2 RX10_TEMP34 = RX10_TEMP33 .dReg ; 
const int RX10_TEMP35 = searchPointInRegion2 ( RX10_TEMP34 , RX10_TEMP32 ) ; 
const int RX10_TEMP36 = 0 ; 
const int RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36 ; 
if ( RX10_TEMP37 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP39 = getPlaceFromDist2 ( RX10_TEMP33 , RX10_TEMP35 ) ; 
const int RX10_TEMP41 = /* here  */ 0 ; 
const int RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41 ; 
if ( RX10_TEMP42 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP43 = getRefArrayValue2Complex ( f , RX10_TEMP35 ) ; 
struct Complex temp = RX10_TEMP43 ; 
struct Point2 RX10_TEMP44  ; 
Point2_Point2( &RX10_TEMP44/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP45 = f .distValue ; 
struct Region2 RX10_TEMP46 = RX10_TEMP45 .dReg ; 
const int RX10_TEMP47 = searchPointInRegion2 ( RX10_TEMP46 , RX10_TEMP44 ) ; 
const int RX10_TEMP48 = 0 ; 
const int RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP51 = getPlaceFromDist2 ( RX10_TEMP45 , RX10_TEMP47 ) ; 
const int RX10_TEMP53 = /* here  */ 0 ; 
const int RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53 ; 
if ( RX10_TEMP54 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP55 = getRefArrayValue2Complex ( f , RX10_TEMP47 ) ; 
struct Complex X10_TEMP60 = RX10_TEMP55 ; 
struct Complex X10_TEMP61 = X10_TEMP60 ; 
struct Point2 RX10_TEMP56  ; 
Point2_Point2( &RX10_TEMP56/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP57 = f .distValue ; 
struct Region2 RX10_TEMP58 = RX10_TEMP57 .dReg ; 
const int RX10_TEMP59 = searchPointInRegion2 ( RX10_TEMP58 , RX10_TEMP56 ) ; 
const int RX10_TEMP60 = 0 ; 
const int RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP62 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP62 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP63 = getPlaceFromDist2 ( RX10_TEMP57 , RX10_TEMP59 ) ; 
const int RX10_TEMP65 = /* here  */ 0 ; 
const int RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP64 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP64 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP59 , X10_TEMP61 ) ; 
struct Complex X10_TEMP65 = temp ; 
struct Point2 RX10_TEMP67  ; 
Point2_Point2( &RX10_TEMP67/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP68 = f .distValue ; 
struct Region2 RX10_TEMP69 = RX10_TEMP68 .dReg ; 
const int RX10_TEMP70 = searchPointInRegion2 ( RX10_TEMP69 , RX10_TEMP67 ) ; 
const int RX10_TEMP71 = 0 ; 
const int RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP74 = getPlaceFromDist2 ( RX10_TEMP68 , RX10_TEMP70 ) ; 
const int RX10_TEMP76 = /* here  */ 0 ; 
const int RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76 ; 
if ( RX10_TEMP77 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP75 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP75 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP70 , X10_TEMP65 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

} 

} 

void /*static*/FourierTransform2D_scrambleX (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ const int X10_TEMP1 = X10_TEMP0 .length2 ; 
const int X10_TEMP2 = 2 ; 
const int nxh = X10_TEMP1 / X10_TEMP2 ; 
const int X10_TEMP4 = 2 ; 
const int nxhh = nxh / X10_TEMP4 ; 
const int X10_TEMP8 = X10_TEMP0 .length1 ; 
const int X10_TEMP9 = X10_TEMP0 .length2 ; 
const int X10_TEMP10 = X10Util_maxInt ( X10_TEMP8 , X10_TEMP9 ) ; 
const int X10_TEMP11 = X10_TEMP0 .length2 ; 
const int kmr = X10_TEMP10 / X10_TEMP11 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP14 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP14 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP14 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP14." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP14 , RX10_TEMP7 ) ; 
const int X10_TEMP15 = RX10_TEMP11 ; 
/* async ( X10_TEMP15 )  */ 
{ struct Dist2 RX10_TEMP12 = f .distValue ; 
struct Dist2 dF = RX10_TEMP12 ; 
struct Region2 rLocal = X10Util_get2DLRegion ( dF ) ; 
const int X10_TEMP21 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank2D ( rLocal , X10_TEMP21 ) ; 
struct Region2 X10_TEMP27 = createNewRegion2AR ( rLocal1 , nxhh , nxhh ) ; 
const int X10_TEMP28 = /* here  */ 0 ; 
const int RX10_TEMP16 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP14 = X10_TEMP27 .regSize ; 
RX10_TEMP14 = RX10_TEMP14 - RX10_TEMP16 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP15 = RX10_TEMP14 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP15 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP3 ; 
const int RX10_TEMP17 = RX10_TEMP13 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP27 , RX10_TEMP17 ) ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist2 RX10_TEMP18 = f .distValue ; 
struct Region2 RX10_TEMP19 = RX10_TEMP18 .dReg ; 
const int RX10_TEMP20 = searchPointInRegion2 ( RX10_TEMP19 , pt ) ; 
const int RX10_TEMP21 = 0 ; 
const int RX10_TEMP22 = RX10_TEMP20 < RX10_TEMP21 ; 
if ( RX10_TEMP22 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP23 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP23 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP24 = getPlaceFromDist2 ( RX10_TEMP18 , RX10_TEMP20 ) ; 
const int RX10_TEMP26 = /* here  */ 0 ; 
const int RX10_TEMP27 = RX10_TEMP24 != RX10_TEMP26 ; 
if ( RX10_TEMP27 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP25 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP25 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP28 = getRefArrayValue2Complex ( f , RX10_TEMP20 ) ; 
struct Complex X10_TEMP31 = RX10_TEMP28 ; 
struct Complex X10_TEMP33 = Complex_getConjg ( X10_TEMP31 ) ; 
const int X10_TEMP35 = 2 ; 
struct Complex X10_TEMP37 = Complex_multS ( X10_TEMP33 , X10_TEMP35 ) ; 
struct Complex X10_TEMP38 = X10_TEMP37 ; 
struct Dist2 RX10_TEMP29 = f .distValue ; 
struct Region2 RX10_TEMP30 = RX10_TEMP29 .dReg ; 
const int RX10_TEMP31 = searchPointInRegion2 ( RX10_TEMP30 , pt ) ; 
const int RX10_TEMP32 = 0 ; 
const int RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32 ; 
if ( RX10_TEMP33 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP34 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP34 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP35 = getPlaceFromDist2 ( RX10_TEMP29 , RX10_TEMP31 ) ; 
const int RX10_TEMP37 = /* here  */ 0 ; 
const int RX10_TEMP38 = RX10_TEMP35 != RX10_TEMP37 ; 
if ( RX10_TEMP38 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP31 , X10_TEMP38 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP41 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP42 = 0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP39 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP40 = pt .f1 ; 
RX10_TEMP39 = RX10_TEMP39 * X10_TEMP41 ; RX10_TEMP40 = RX10_TEMP40 * X10_TEMP42 ; struct Point2 pt0  ; 
Point2_Point2( &pt0/*Assignment*/, RX10_TEMP39 , RX10_TEMP40 ) ; 
struct Dist2 RX10_TEMP41 = f .distValue ; 
struct Region2 RX10_TEMP42 = RX10_TEMP41 .dReg ; 
const int RX10_TEMP43 = searchPointInRegion2 ( RX10_TEMP42 , pt0 ) ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP47 = getPlaceFromDist2 ( RX10_TEMP41 , RX10_TEMP43 ) ; 
const int RX10_TEMP49 = /* here  */ 0 ; 
const int RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49 ; 
if ( RX10_TEMP50 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP51 = getRefArrayValue2Complex ( f , RX10_TEMP43 ) ; 
struct Complex t2 = RX10_TEMP51 ; 
const double t2Real = Complex_getReal ( t2 ) ; 
const double t2Imag = Complex_getImag ( t2 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP51 = t2Real + t2Imag ; 
/*UpdatableVariableDeclaration*/double X10_TEMP52 = t2Real - t2Imag ; 
struct Complex X10_TEMP54  ; 
Complex_Complex( &X10_TEMP54/*Assignment*/, X10_TEMP51 , X10_TEMP52 ) ; 
struct Complex X10_TEMP55 = X10_TEMP54 ; 
struct Dist2 RX10_TEMP52 = f .distValue ; 
struct Region2 RX10_TEMP53 = RX10_TEMP52 .dReg ; 
const int RX10_TEMP54 = searchPointInRegion2 ( RX10_TEMP53 , pt0 ) ; 
const int RX10_TEMP55 = 0 ; 
const int RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP58 = getPlaceFromDist2 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
const int RX10_TEMP60 = /* here  */ 0 ; 
const int RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP54 , X10_TEMP55 ) ; 
} 

} 

const int X10_TEMP59 = 1 ; 
const int X10_TEMP57 = 1 ; 
const int X10_TEMP60 = nxhh - X10_TEMP57 ; 
struct Region1 X10_TEMP62 = createNewRegion1R ( X10_TEMP59 , X10_TEMP60 ) ; 
const int RX10_TEMP66 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP64 = X10_TEMP62 .regSize ; 
RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP65 = RX10_TEMP64 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP65 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP5 ; 
const int RX10_TEMP67 = RX10_TEMP62 ; 
struct Point1 RX10_TEMP63 = regionOrdinalPoint1 ( X10_TEMP62 , RX10_TEMP67 ) ; 
const int j1 = RX10_TEMP63 .f0 ; 
const int j2 = nxh - j1 ; 
struct ComplexValArray1 X10_TEMP64 = X10_TEMP0 .tableSineCosine ; 
const int X10_TEMP66 = kmr * j1 ; 
struct Point1 RX10_TEMP68  ; 
Point1_Point1( &RX10_TEMP68/*Assignment*/, X10_TEMP66 ) ; 
struct Region1 RX10_TEMP69 = X10_TEMP64 .regionValue ; 
const int RX10_TEMP70 = searchPointInRegion1 ( RX10_TEMP69 , RX10_TEMP68 ) ; 
const int RX10_TEMP71 = 0 ; 
const int RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP74 = X10_TEMP64 .contents ; 
struct Complex t0 = RX10_TEMP74 [ RX10_TEMP70 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP70 = Complex_getImag ( t0 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP71 = Complex_getReal ( t0 ) ; 
struct Complex t1  ; 
Complex_Complex( &t1/*Assignment*/, X10_TEMP70 , X10_TEMP71 ) ; 
const int X10_TEMP74 = /* here  */ 0 ; 
const int RX10_TEMP79 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP77 = rLocal1 .regSize ; 
RX10_TEMP77 = RX10_TEMP77 - RX10_TEMP79 ; const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP78 = RX10_TEMP77 + SX10_TEMP6 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP78 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP75 = SX10_TEMP7 ; 
const int RX10_TEMP80 = RX10_TEMP75 ; 
struct Point1 RX10_TEMP76 = regionOrdinalPoint1 ( rLocal1 , RX10_TEMP80 ) ; 
const int i = RX10_TEMP76 .f0 ; 
/* async ( X10_TEMP74 )  */ 
{ struct Point2 RX10_TEMP81  ; 
Point2_Point2( &RX10_TEMP81/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP82 = f .distValue ; 
struct Region2 RX10_TEMP83 = RX10_TEMP82 .dReg ; 
const int RX10_TEMP84 = searchPointInRegion2 ( RX10_TEMP83 , RX10_TEMP81 ) ; 
const int RX10_TEMP85 = 0 ; 
const int RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85 ; 
if ( RX10_TEMP86 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP87 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP87 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP88 = getPlaceFromDist2 ( RX10_TEMP82 , RX10_TEMP84 ) ; 
const int RX10_TEMP90 = /* here  */ 0 ; 
const int RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90 ; 
if ( RX10_TEMP91 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP89 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP89 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP92 = getRefArrayValue2Complex ( f , RX10_TEMP84 ) ; 
struct Complex X10_TEMP77 = RX10_TEMP92 ; 
struct Complex t = Complex_getConjg ( X10_TEMP77 ) ; 
struct Point2 RX10_TEMP93  ; 
Point2_Point2( &RX10_TEMP93/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP94 = f .distValue ; 
struct Region2 RX10_TEMP95 = RX10_TEMP94 .dReg ; 
const int RX10_TEMP96 = searchPointInRegion2 ( RX10_TEMP95 , RX10_TEMP93 ) ; 
const int RX10_TEMP97 = 0 ; 
const int RX10_TEMP98 = RX10_TEMP96 < RX10_TEMP97 ; 
if ( RX10_TEMP98 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP99 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP99 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP100 = getPlaceFromDist2 ( RX10_TEMP94 , RX10_TEMP96 ) ; 
const int RX10_TEMP102 = /* here  */ 0 ; 
const int RX10_TEMP103 = RX10_TEMP100 != RX10_TEMP102 ; 
if ( RX10_TEMP103 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP101 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP101 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP104 = getRefArrayValue2Complex ( f , RX10_TEMP96 ) ; 
struct Complex X10_TEMP81 = RX10_TEMP104 ; 
struct Complex s = Complex_add ( X10_TEMP81 , t ) ; 
struct Point2 RX10_TEMP105  ; 
Point2_Point2( &RX10_TEMP105/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP106 = f .distValue ; 
struct Region2 RX10_TEMP107 = RX10_TEMP106 .dReg ; 
const int RX10_TEMP108 = searchPointInRegion2 ( RX10_TEMP107 , RX10_TEMP105 ) ; 
const int RX10_TEMP109 = 0 ; 
const int RX10_TEMP110 = RX10_TEMP108 < RX10_TEMP109 ; 
if ( RX10_TEMP110 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP111 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP111 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP112 = getPlaceFromDist2 ( RX10_TEMP106 , RX10_TEMP108 ) ; 
const int RX10_TEMP114 = /* here  */ 0 ; 
const int RX10_TEMP115 = RX10_TEMP112 != RX10_TEMP114 ; 
if ( RX10_TEMP115 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP113 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP113 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP116 = getRefArrayValue2Complex ( f , RX10_TEMP108 ) ; 
struct Complex X10_TEMP86 = RX10_TEMP116 ; 
struct Complex X10_TEMP89 = Complex_sub ( X10_TEMP86 , t ) ; 
struct Complex t3 = Complex_mult ( X10_TEMP89 , t1 ) ; 
struct Complex X10_TEMP96 = Complex_add ( s , t3 ) ; 
struct Complex X10_TEMP97 = X10_TEMP96 ; 
struct Point2 RX10_TEMP117  ; 
Point2_Point2( &RX10_TEMP117/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP118 = f .distValue ; 
struct Region2 RX10_TEMP119 = RX10_TEMP118 .dReg ; 
const int RX10_TEMP120 = searchPointInRegion2 ( RX10_TEMP119 , RX10_TEMP117 ) ; 
const int RX10_TEMP121 = 0 ; 
const int RX10_TEMP122 = RX10_TEMP120 < RX10_TEMP121 ; 
if ( RX10_TEMP122 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP123 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP123 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP124 = getPlaceFromDist2 ( RX10_TEMP118 , RX10_TEMP120 ) ; 
const int RX10_TEMP126 = /* here  */ 0 ; 
const int RX10_TEMP127 = RX10_TEMP124 != RX10_TEMP126 ; 
if ( RX10_TEMP127 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP125 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP125 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP120 , X10_TEMP97 ) ; 
struct Complex X10_TEMP102 = Complex_sub ( s , t3 ) ; 
struct Complex X10_TEMP104 = Complex_getConjg ( X10_TEMP102 ) ; 
struct Complex X10_TEMP105 = X10_TEMP104 ; 
struct Point2 RX10_TEMP128  ; 
Point2_Point2( &RX10_TEMP128/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP129 = f .distValue ; 
struct Region2 RX10_TEMP130 = RX10_TEMP129 .dReg ; 
const int RX10_TEMP131 = searchPointInRegion2 ( RX10_TEMP130 , RX10_TEMP128 ) ; 
const int RX10_TEMP132 = 0 ; 
const int RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132 ; 
if ( RX10_TEMP133 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP134 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP134 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP135 = getPlaceFromDist2 ( RX10_TEMP129 , RX10_TEMP131 ) ; 
const int RX10_TEMP137 = /* here  */ 0 ; 
const int RX10_TEMP138 = RX10_TEMP135 != RX10_TEMP137 ; 
if ( RX10_TEMP138 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP136 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP136 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP131 , X10_TEMP105 ) ; 
} 

} 

} 

} 

} 

} 

} 

void /*static*/FourierTransform2D_unscrambleX (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ const int X10_TEMP1 = X10_TEMP0 .length2 ; 
const int X10_TEMP2 = 2 ; 
const int nxh = X10_TEMP1 / X10_TEMP2 ; 
const int X10_TEMP4 = X10_TEMP0 .length2 ; 
const int X10_TEMP5 = 4 ; 
const int nxhh = X10_TEMP4 / X10_TEMP5 ; 
const int X10_TEMP9 = X10_TEMP0 .length1 ; 
const int X10_TEMP10 = X10_TEMP0 .length2 ; 
const int X10_TEMP11 = X10Util_maxInt ( X10_TEMP9 , X10_TEMP10 ) ; 
const int X10_TEMP12 = X10_TEMP0 .length2 ; 
const int kmr = X10_TEMP11 / X10_TEMP12 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP15 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP15 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP15 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP15." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP15 , RX10_TEMP7 ) ; 
const int X10_TEMP16 = RX10_TEMP11 ; 
/* async ( X10_TEMP16 )  */ 
{ struct Dist2 RX10_TEMP12 = f .distValue ; 
struct Dist2 dF = RX10_TEMP12 ; 
const int X10_TEMP20 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dF , X10_TEMP20 ) ; 
const int X10_TEMP25 = 1 ; 
const int X10_TEMP23 = 1 ; 
const int X10_TEMP26 = nxhh - X10_TEMP23 ; 
struct Region1 X10_TEMP28 = createNewRegion1R ( X10_TEMP25 , X10_TEMP26 ) ; 
const int X10_TEMP29 = /* here  */ 0 ; 
const int RX10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP15 = X10_TEMP28 .regSize ; 
RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP15 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP16 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP3 ; 
const int RX10_TEMP18 = RX10_TEMP13 ; 
struct Point1 RX10_TEMP14 = regionOrdinalPoint1 ( X10_TEMP28 , RX10_TEMP18 ) ; 
const int j1 = RX10_TEMP14 .f0 ; 
/* async ( X10_TEMP29 )  */ 
{ const int j2 = nxh - j1 ; 
struct ComplexValArray1 X10_TEMP31 = X10_TEMP0 .tableSineCosine ; 
const int X10_TEMP33 = kmr * j1 ; 
struct Point1 RX10_TEMP19  ; 
Point1_Point1( &RX10_TEMP19/*Assignment*/, X10_TEMP33 ) ; 
struct Region1 RX10_TEMP20 = X10_TEMP31 .regionValue ; 
const int RX10_TEMP21 = searchPointInRegion1 ( RX10_TEMP20 , RX10_TEMP19 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP25 = X10_TEMP31 .contents ; 
struct Complex t0 = RX10_TEMP25 [ RX10_TEMP21 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP39 = Complex_getImag ( t0 ) ; 
const double X10_TEMP36 = Complex_getReal ( t0 ) ; 
const int X10_TEMP37 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP40 = X10_TEMP37 - X10_TEMP36 ; 
struct Complex t1  ; 
Complex_Complex( &t1/*Assignment*/, X10_TEMP39 , X10_TEMP40 ) ; 
const int X10_TEMP43 = /* here  */ 0 ; 
const int RX10_TEMP30 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP28 = rLocal1 .regSize ; 
RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP28 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP29 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP5 ; 
const int RX10_TEMP31 = RX10_TEMP26 ; 
struct Point1 RX10_TEMP27 = regionOrdinalPoint1 ( rLocal1 , RX10_TEMP31 ) ; 
const int i = RX10_TEMP27 .f0 ; 
/* async ( X10_TEMP43 )  */ 
{ struct Point2 RX10_TEMP32  ; 
Point2_Point2( &RX10_TEMP32/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP33 = f .distValue ; 
struct Region2 RX10_TEMP34 = RX10_TEMP33 .dReg ; 
const int RX10_TEMP35 = searchPointInRegion2 ( RX10_TEMP34 , RX10_TEMP32 ) ; 
const int RX10_TEMP36 = 0 ; 
const int RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36 ; 
if ( RX10_TEMP37 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP39 = getPlaceFromDist2 ( RX10_TEMP33 , RX10_TEMP35 ) ; 
const int RX10_TEMP41 = /* here  */ 0 ; 
const int RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41 ; 
if ( RX10_TEMP42 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP43 = getRefArrayValue2Complex ( f , RX10_TEMP35 ) ; 
struct Complex X10_TEMP46 = RX10_TEMP43 ; 
struct Complex t = Complex_getConjg ( X10_TEMP46 ) ; 
struct Point2 RX10_TEMP44  ; 
Point2_Point2( &RX10_TEMP44/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP45 = f .distValue ; 
struct Region2 RX10_TEMP46 = RX10_TEMP45 .dReg ; 
const int RX10_TEMP47 = searchPointInRegion2 ( RX10_TEMP46 , RX10_TEMP44 ) ; 
const int RX10_TEMP48 = 0 ; 
const int RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP51 = getPlaceFromDist2 ( RX10_TEMP45 , RX10_TEMP47 ) ; 
const int RX10_TEMP53 = /* here  */ 0 ; 
const int RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53 ; 
if ( RX10_TEMP54 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP55 = getRefArrayValue2Complex ( f , RX10_TEMP47 ) ; 
struct Complex X10_TEMP50 = RX10_TEMP55 ; 
struct Complex s = Complex_add ( X10_TEMP50 , t ) ; 
struct Point2 RX10_TEMP56  ; 
Point2_Point2( &RX10_TEMP56/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP57 = f .distValue ; 
struct Region2 RX10_TEMP58 = RX10_TEMP57 .dReg ; 
const int RX10_TEMP59 = searchPointInRegion2 ( RX10_TEMP58 , RX10_TEMP56 ) ; 
const int RX10_TEMP60 = 0 ; 
const int RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP62 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP62 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP63 = getPlaceFromDist2 ( RX10_TEMP57 , RX10_TEMP59 ) ; 
const int RX10_TEMP65 = /* here  */ 0 ; 
const int RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP64 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP64 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP67 = getRefArrayValue2Complex ( f , RX10_TEMP59 ) ; 
struct Complex X10_TEMP55 = RX10_TEMP67 ; 
struct Complex X10_TEMP58 = Complex_sub ( X10_TEMP55 , t ) ; 
struct Complex t2 = Complex_mult ( X10_TEMP58 , t1 ) ; 
struct Complex X10_TEMP65 = Complex_add ( s , t2 ) ; 
const double X10_TEMP67 = X10_TEMP0 .invN ; 
struct Complex X10_TEMP69 = Complex_multS ( X10_TEMP65 , X10_TEMP67 ) ; 
struct Complex X10_TEMP70 = X10_TEMP69 ; 
struct Point2 RX10_TEMP68  ; 
Point2_Point2( &RX10_TEMP68/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP69 = f .distValue ; 
struct Region2 RX10_TEMP70 = RX10_TEMP69 .dReg ; 
const int RX10_TEMP71 = searchPointInRegion2 ( RX10_TEMP70 , RX10_TEMP68 ) ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP75 = getPlaceFromDist2 ( RX10_TEMP69 , RX10_TEMP71 ) ; 
const int RX10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP71 , X10_TEMP70 ) ; 
struct Complex X10_TEMP75 = Complex_sub ( s , t2 ) ; 
struct Complex X10_TEMP77 = Complex_getConjg ( X10_TEMP75 ) ; 
const double X10_TEMP79 = X10_TEMP0 .invN ; 
struct Complex X10_TEMP81 = Complex_multS ( X10_TEMP77 , X10_TEMP79 ) ; 
struct Complex X10_TEMP82 = X10_TEMP81 ; 
struct Point2 RX10_TEMP79  ; 
Point2_Point2( &RX10_TEMP79/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP80 = f .distValue ; 
struct Region2 RX10_TEMP81 = RX10_TEMP80 .dReg ; 
const int RX10_TEMP82 = searchPointInRegion2 ( RX10_TEMP81 , RX10_TEMP79 ) ; 
const int RX10_TEMP83 = 0 ; 
const int RX10_TEMP84 = RX10_TEMP82 < RX10_TEMP83 ; 
if ( RX10_TEMP84 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP85 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP85 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP86 = getPlaceFromDist2 ( RX10_TEMP80 , RX10_TEMP82 ) ; 
const int RX10_TEMP88 = /* here  */ 0 ; 
const int RX10_TEMP89 = RX10_TEMP86 != RX10_TEMP88 ; 
if ( RX10_TEMP89 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP87 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP87 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP82 , X10_TEMP82 ) ; 
} 

} 

} 

} 

struct Region2 X10_TEMP87 = createNewRegion2AR ( rLocal1 , nxhh , nxhh ) ; 
const int X10_TEMP88 = /* here  */ 0 ; 
const int RX10_TEMP93 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP91 = X10_TEMP87 .regSize ; 
RX10_TEMP91 = RX10_TEMP91 - RX10_TEMP93 ; const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP92 = RX10_TEMP91 + SX10_TEMP6 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP92 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP90 = SX10_TEMP7 ; 
const int RX10_TEMP94 = RX10_TEMP90 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP87 , RX10_TEMP94 ) ; 
/* async ( X10_TEMP88 )  */ 
{ /*UpdatableVariableDeclaration*/int X10_TEMP91 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP92 = 0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP95 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP96 = pt .f1 ; 
RX10_TEMP95 = RX10_TEMP95 * X10_TEMP91 ; RX10_TEMP96 = RX10_TEMP96 * X10_TEMP92 ; struct Point2 pt0  ; 
Point2_Point2( &pt0/*Assignment*/, RX10_TEMP95 , RX10_TEMP96 ) ; 
struct Dist2 RX10_TEMP97 = f .distValue ; 
struct Region2 RX10_TEMP98 = RX10_TEMP97 .dReg ; 
const int RX10_TEMP99 = searchPointInRegion2 ( RX10_TEMP98 , pt0 ) ; 
const int RX10_TEMP100 = 0 ; 
const int RX10_TEMP101 = RX10_TEMP99 < RX10_TEMP100 ; 
if ( RX10_TEMP101 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP102 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP102 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP103 = getPlaceFromDist2 ( RX10_TEMP97 , RX10_TEMP99 ) ; 
const int RX10_TEMP105 = /* here  */ 0 ; 
const int RX10_TEMP106 = RX10_TEMP103 != RX10_TEMP105 ; 
if ( RX10_TEMP106 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP104 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP104 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP107 = getRefArrayValue2Complex ( f , RX10_TEMP99 ) ; 
struct Complex t1 = RX10_TEMP107 ; 
struct Dist2 RX10_TEMP108 = f .distValue ; 
struct Region2 RX10_TEMP109 = RX10_TEMP108 .dReg ; 
const int RX10_TEMP110 = searchPointInRegion2 ( RX10_TEMP109 , pt ) ; 
const int RX10_TEMP111 = 0 ; 
const int RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111 ; 
if ( RX10_TEMP112 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP113 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP113 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getPlaceFromDist2 ( RX10_TEMP108 , RX10_TEMP110 ) ; 
const int RX10_TEMP116 = /* here  */ 0 ; 
const int RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116 ; 
if ( RX10_TEMP117 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP115 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP115 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP118 = getRefArrayValue2Complex ( f , RX10_TEMP110 ) ; 
struct Complex t2 = RX10_TEMP118 ; 
const double t1Real = Complex_getReal ( t1 ) ; 
const double t1Imag = Complex_getImag ( t1 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP102 = t1Real + t1Imag ; 
/*UpdatableVariableDeclaration*/double X10_TEMP103 = t1Real - t1Imag ; 
struct Complex t3  ; 
Complex_Complex( &t3/*Assignment*/, X10_TEMP102 , X10_TEMP103 ) ; 
struct Complex X10_TEMP107 = Complex_getConjg ( t2 ) ; 
const double X10_TEMP108 = 2 ; 
const double X10_TEMP109 = X10_TEMP0 .invN ; 
const double X10_TEMP111 = X10_TEMP108 * X10_TEMP109 ; 
struct Complex X10_TEMP113 = Complex_multS ( X10_TEMP107 , X10_TEMP111 ) ; 
struct Complex X10_TEMP114 = X10_TEMP113 ; 
struct Dist2 RX10_TEMP119 = f .distValue ; 
struct Region2 RX10_TEMP120 = RX10_TEMP119 .dReg ; 
const int RX10_TEMP121 = searchPointInRegion2 ( RX10_TEMP120 , pt ) ; 
const int RX10_TEMP122 = 0 ; 
const int RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP124 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP124 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP125 = getPlaceFromDist2 ( RX10_TEMP119 , RX10_TEMP121 ) ; 
const int RX10_TEMP127 = /* here  */ 0 ; 
const int RX10_TEMP128 = RX10_TEMP125 != RX10_TEMP127 ; 
if ( RX10_TEMP128 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP126 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP126 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP121 , X10_TEMP114 ) ; 
const double X10_TEMP116 = 2 ; 
const double X10_TEMP117 = X10_TEMP0 .invN ; 
const double X10_TEMP119 = X10_TEMP116 * X10_TEMP117 ; 
struct Complex X10_TEMP121 = Complex_multS ( t3 , X10_TEMP119 ) ; 
struct Complex X10_TEMP122 = X10_TEMP121 ; 
struct Dist2 RX10_TEMP129 = f .distValue ; 
struct Region2 RX10_TEMP130 = RX10_TEMP129 .dReg ; 
const int RX10_TEMP131 = searchPointInRegion2 ( RX10_TEMP130 , pt0 ) ; 
const int RX10_TEMP132 = 0 ; 
const int RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132 ; 
if ( RX10_TEMP133 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP134 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP134 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP135 = getPlaceFromDist2 ( RX10_TEMP129 , RX10_TEMP131 ) ; 
const int RX10_TEMP137 = /* here  */ 0 ; 
const int RX10_TEMP138 = RX10_TEMP135 != RX10_TEMP137 ; 
if ( RX10_TEMP138 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP136 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP136 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP131 , X10_TEMP122 ) ; 
} 

} 

} 

} 

} 

} 

void /*static*/FourierTransform2D_scrambleY (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ /* finish  */ 
{ const int X10_TEMP2 = /* place.FIRST_PLACE  */ 0 ; 
/* async ( X10_TEMP2 )  */ 
{ const int X10_TEMP10 = 1 ; 
const int X10_TEMP4 = X10_TEMP0 .length1 ; 
const int X10_TEMP5 = 2 ; 
const int X10_TEMP7 = X10_TEMP4 / X10_TEMP5 ; 
const int X10_TEMP8 = 1 ; 
const int X10_TEMP11 = X10_TEMP7 - X10_TEMP8 ; 
struct Region1 X10_TEMP13 = createNewRegion1R ( X10_TEMP10 , X10_TEMP11 ) ; 
const int X10_TEMP14 = /* here  */ 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = X10_TEMP13 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 RX10_TEMP1 = regionOrdinalPoint1 ( X10_TEMP13 , RX10_TEMP5 ) ; 
const int j1 = RX10_TEMP1 .f0 ; 
/* async ( X10_TEMP14 )  */ 
{ const int X10_TEMP15 = X10_TEMP0 .length1 ; 
const int j2 = X10_TEMP15 - j1 ; 
const int X10_TEMP19 = 0 ; 
struct Point2 RX10_TEMP6  ; 
Point2_Point2( &RX10_TEMP6/*Assignment*/, X10_TEMP19 , j2 ) ; 
struct Dist2 RX10_TEMP7 = f .distValue ; 
struct Region2 RX10_TEMP8 = RX10_TEMP7 .dReg ; 
const int RX10_TEMP9 = searchPointInRegion2 ( RX10_TEMP8 , RX10_TEMP6 ) ; 
const int RX10_TEMP10 = 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10 ; 
if ( RX10_TEMP11 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP12 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP12 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP13 = getPlaceFromDist2 ( RX10_TEMP7 , RX10_TEMP9 ) ; 
const int RX10_TEMP15 = /* here  */ 0 ; 
const int RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15 ; 
if ( RX10_TEMP16 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP14 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP14 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP17 = getRefArrayValue2Complex ( f , RX10_TEMP9 ) ; 
struct Complex t1 = RX10_TEMP17 ; 
const int X10_TEMP23 = 0 ; 
struct Point2 RX10_TEMP18  ; 
Point2_Point2( &RX10_TEMP18/*Assignment*/, X10_TEMP23 , j1 ) ; 
struct Dist2 RX10_TEMP19 = f .distValue ; 
struct Region2 RX10_TEMP20 = RX10_TEMP19 .dReg ; 
const int RX10_TEMP21 = searchPointInRegion2 ( RX10_TEMP20 , RX10_TEMP18 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP25 = getPlaceFromDist2 ( RX10_TEMP19 , RX10_TEMP21 ) ; 
const int RX10_TEMP27 = /* here  */ 0 ; 
const int RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP26 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP26 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP29 = getRefArrayValue2Complex ( f , RX10_TEMP21 ) ; 
struct Complex t2 = RX10_TEMP29 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP27 = Complex_getImag ( t1 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP28 = Complex_getReal ( t1 ) ; 
struct Complex s  ; 
Complex_Complex( &s/*Assignment*/, X10_TEMP27 , X10_TEMP28 ) ; 
const int X10_TEMP32 = 0 ; 
struct Complex X10_TEMP35 = Complex_sub ( t2 , s ) ; 
struct Complex X10_TEMP37 = Complex_getConjg ( X10_TEMP35 ) ; 
struct Complex X10_TEMP38 = X10_TEMP37 ; 
struct Point2 RX10_TEMP30  ; 
Point2_Point2( &RX10_TEMP30/*Assignment*/, X10_TEMP32 , j2 ) ; 
struct Dist2 RX10_TEMP31 = f .distValue ; 
struct Region2 RX10_TEMP32 = RX10_TEMP31 .dReg ; 
const int RX10_TEMP33 = searchPointInRegion2 ( RX10_TEMP32 , RX10_TEMP30 ) ; 
const int RX10_TEMP34 = 0 ; 
const int RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34 ; 
if ( RX10_TEMP35 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP37 = getPlaceFromDist2 ( RX10_TEMP31 , RX10_TEMP33 ) ; 
const int RX10_TEMP39 = /* here  */ 0 ; 
const int RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP33 , X10_TEMP38 ) ; 
const int X10_TEMP41 = 0 ; 
struct Complex X10_TEMP44 = Complex_add ( t2 , s ) ; 
struct Complex X10_TEMP45 = X10_TEMP44 ; 
struct Point2 RX10_TEMP41  ; 
Point2_Point2( &RX10_TEMP41/*Assignment*/, X10_TEMP41 , j1 ) ; 
struct Dist2 RX10_TEMP42 = f .distValue ; 
struct Region2 RX10_TEMP43 = RX10_TEMP42 .dReg ; 
const int RX10_TEMP44 = searchPointInRegion2 ( RX10_TEMP43 , RX10_TEMP41 ) ; 
const int RX10_TEMP45 = 0 ; 
const int RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP48 = getPlaceFromDist2 ( RX10_TEMP42 , RX10_TEMP44 ) ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP49 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP49 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP44 , X10_TEMP45 ) ; 
} 

} 

} 

} 

} 

void /*static*/FourierTransform2D_unscrambleY (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f ) 
{ /* finish  */ 
{ const int X10_TEMP2 = /* place.FIRST_PLACE  */ 0 ; 
/* async ( X10_TEMP2 )  */ 
{ const int X10_TEMP10 = 1 ; 
const int X10_TEMP4 = X10_TEMP0 .length1 ; 
const int X10_TEMP5 = 2 ; 
const int X10_TEMP7 = X10_TEMP4 / X10_TEMP5 ; 
const int X10_TEMP8 = 1 ; 
const int X10_TEMP11 = X10_TEMP7 - X10_TEMP8 ; 
struct Region1 X10_TEMP13 = createNewRegion1R ( X10_TEMP10 , X10_TEMP11 ) ; 
const int X10_TEMP14 = /* here  */ 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = X10_TEMP13 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 RX10_TEMP1 = regionOrdinalPoint1 ( X10_TEMP13 , RX10_TEMP5 ) ; 
const int j1 = RX10_TEMP1 .f0 ; 
/* async ( X10_TEMP14 )  */ 
{ const int X10_TEMP15 = X10_TEMP0 .length1 ; 
const int j2 = X10_TEMP15 - j1 ; 
const int X10_TEMP19 = 0 ; 
struct Point2 RX10_TEMP6  ; 
Point2_Point2( &RX10_TEMP6/*Assignment*/, X10_TEMP19 , j2 ) ; 
struct Dist2 RX10_TEMP7 = f .distValue ; 
struct Region2 RX10_TEMP8 = RX10_TEMP7 .dReg ; 
const int RX10_TEMP9 = searchPointInRegion2 ( RX10_TEMP8 , RX10_TEMP6 ) ; 
const int RX10_TEMP10 = 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10 ; 
if ( RX10_TEMP11 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP12 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP12 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP13 = getPlaceFromDist2 ( RX10_TEMP7 , RX10_TEMP9 ) ; 
const int RX10_TEMP15 = /* here  */ 0 ; 
const int RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15 ; 
if ( RX10_TEMP16 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP14 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP14 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP17 = getRefArrayValue2Complex ( f , RX10_TEMP9 ) ; 
struct Complex s = RX10_TEMP17 ; 
const int X10_TEMP23 = 0 ; 
struct Point2 RX10_TEMP18  ; 
Point2_Point2( &RX10_TEMP18/*Assignment*/, X10_TEMP23 , j1 ) ; 
struct Dist2 RX10_TEMP19 = f .distValue ; 
struct Region2 RX10_TEMP20 = RX10_TEMP19 .dReg ; 
const int RX10_TEMP21 = searchPointInRegion2 ( RX10_TEMP20 , RX10_TEMP18 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP25 = getPlaceFromDist2 ( RX10_TEMP19 , RX10_TEMP21 ) ; 
const int RX10_TEMP27 = /* here  */ 0 ; 
const int RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP26 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP26 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP29 = getRefArrayValue2Complex ( f , RX10_TEMP21 ) ; 
struct Complex t = RX10_TEMP29 ; 
struct Complex t1 = Complex_add ( t , s ) ; 
struct Complex t2 = Complex_sub ( t , s ) ; 
const int X10_TEMP31 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP34 = Complex_getImag ( t1 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP35 = Complex_getReal ( t2 ) ; 
struct Complex X10_TEMP37  ; 
Complex_Complex( &X10_TEMP37/*Assignment*/, X10_TEMP34 , X10_TEMP35 ) ; 
const double X10_TEMP39 = 0.5; 
struct Complex X10_TEMP41 = Complex_multS ( X10_TEMP37 , X10_TEMP39 ) ; 
struct Complex X10_TEMP42 = X10_TEMP41 ; 
struct Point2 RX10_TEMP30  ; 
Point2_Point2( &RX10_TEMP30/*Assignment*/, X10_TEMP31 , j2 ) ; 
struct Dist2 RX10_TEMP31 = f .distValue ; 
struct Region2 RX10_TEMP32 = RX10_TEMP31 .dReg ; 
const int RX10_TEMP33 = searchPointInRegion2 ( RX10_TEMP32 , RX10_TEMP30 ) ; 
const int RX10_TEMP34 = 0 ; 
const int RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34 ; 
if ( RX10_TEMP35 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP37 = getPlaceFromDist2 ( RX10_TEMP31 , RX10_TEMP33 ) ; 
const int RX10_TEMP39 = /* here  */ 0 ; 
const int RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP33 , X10_TEMP42 ) ; 
const int X10_TEMP45 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP48 = Complex_getReal ( t1 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP49 = Complex_getImag ( t2 ) ; 
struct Complex X10_TEMP51  ; 
Complex_Complex( &X10_TEMP51/*Assignment*/, X10_TEMP48 , X10_TEMP49 ) ; 
const double X10_TEMP53 = 0.5; 
struct Complex X10_TEMP55 = Complex_multS ( X10_TEMP51 , X10_TEMP53 ) ; 
struct Complex X10_TEMP56 = X10_TEMP55 ; 
struct Point2 RX10_TEMP41  ; 
Point2_Point2( &RX10_TEMP41/*Assignment*/, X10_TEMP45 , j1 ) ; 
struct Dist2 RX10_TEMP42 = f .distValue ; 
struct Region2 RX10_TEMP43 = RX10_TEMP42 .dReg ; 
const int RX10_TEMP44 = searchPointInRegion2 ( RX10_TEMP43 , RX10_TEMP41 ) ; 
const int RX10_TEMP45 = 0 ; 
const int RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP48 = getPlaceFromDist2 ( RX10_TEMP42 , RX10_TEMP44 ) ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP49 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP49 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP44 , X10_TEMP56 ) ; 
} 

} 

} 

} 

} 

void /*static*/FourierTransform2D_transformRank (  struct FourierTransform2D const X10_TEMP0 ,  struct ComplexRefArray2 const f , const int rnk , const int inverse ) 
{ const int X10_TEMP3 = X10_TEMP0 .length1 ; 
const int X10_TEMP4 = X10_TEMP0 .length2 ; 
const int nxy = X10Util_maxInt ( X10_TEMP3 , X10_TEMP4 ) ; 
const int X10_TEMP6 = X10_TEMP0 .length2 ; 
const int X10_TEMP7 = 2 ; 
const int nxh = X10_TEMP6 / X10_TEMP7 ; 
const int X10_TEMP9 = X10_TEMP0 .length1 ; 
const int X10_TEMP10 = 2 ; 
const int nyh = X10_TEMP9 / X10_TEMP10 ; 
const int X10_TEMP12 = X10_TEMP0 .length2 ; 
const int X10_TEMP13 = 4 ; 
const int nxhh = X10_TEMP12 / X10_TEMP13 ; 
const int X10_TEMP15 = 0 ; 
const int X10_TEMP17 = rnk == X10_TEMP15 ; 
const int X10_TEMP18 = X10_TEMP17 ; 
const int X10_TEMP20 = X10_TEMP0 .nBits2 ; 
const int X10_TEMP21 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP23 = X10_TEMP20 - X10_TEMP21 ; 
if ( X10_TEMP18 ) 
{ X10_TEMP23 = X10_TEMP0 .nBits1 ; } 

const int X10_TEMP24 = X10_TEMP23 ; 
const int bits = X10_TEMP24 ; 
const int X10_TEMP25 = 0 ; 
const int X10_TEMP27 = rnk == X10_TEMP25 ; 
const int X10_TEMP28 = X10_TEMP27 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP31 = nxh ; 
if ( X10_TEMP28 ) 
{ X10_TEMP31 = X10_TEMP0 .length1 ; } 

const int X10_TEMP32 = X10_TEMP31 ; 
const int X10_TEMP33 = X10_TEMP32 ; 
const int r = nxy / X10_TEMP33 ; 
const int X10_TEMP38 = 0 ; 
const int X10_TEMP36 = 1 ; 
const int X10_TEMP39 = bits - X10_TEMP36 ; 
struct Region1 X10_TEMP41 = createNewRegion1R ( X10_TEMP38 , X10_TEMP39 ) ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1 = X10_TEMP41 .regSize ; 
RX10_TEMP1 = RX10_TEMP1 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP2 = RX10_TEMP1 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP2 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP4 = RX10_TEMP0 ; 
struct Point1 exponent = regionOrdinalPoint1 ( X10_TEMP41 , RX10_TEMP4 ) ; 
const int X10_TEMP43 = 1 ; 
const int X10_TEMP44 = exponent .f0 ; 
const int stride = X10_TEMP43 << X10_TEMP44 ; 
const int X10_TEMP46 = 2 ; 
const int width = X10_TEMP46 * stride ; 
const int X10_TEMP48 = 0 ; 
const int X10_TEMP50 = rnk == X10_TEMP48 ; 
const int X10_TEMP51 = X10_TEMP50 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP54 = nxhh ; 
if ( X10_TEMP51 ) 
{ X10_TEMP54 = nyh ; } 

const int X10_TEMP55 = X10_TEMP54 ; 
const int X10_TEMP56 = X10_TEMP55 ; 
const int km = X10_TEMP56 / stride ; 
const int kmr = km * r ; 
/* finish  */ 
{ struct Dist1 X10_TEMP60 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP60 .dReg ; 
const int RX10_TEMP9 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP7 = RX10_TEMP6 .regSize ; 
RX10_TEMP7 = RX10_TEMP7 - RX10_TEMP9 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP8 = RX10_TEMP7 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP8 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP5 = SX10_TEMP3 ; 
const int RX10_TEMP10 = RX10_TEMP5 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP6 , RX10_TEMP10 ) ; 
struct Region1 RX10_TEMP11 = X10_TEMP60 .dReg ; 
const int RX10_TEMP12 = searchPointInRegion1 ( RX10_TEMP11 , pl ) ; 
const int RX10_TEMP13 = 0 ; 
const int RX10_TEMP14 = RX10_TEMP12 < RX10_TEMP13 ; 
if ( RX10_TEMP14 ) 
{ const char * RX10_TEMP15 = "Point pl not found in the distribution X10_TEMP60." ; 
fprintf(stderr, RX10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP16 = getPlaceFromDist1 ( X10_TEMP60 , RX10_TEMP12 ) ; 
const int X10_TEMP61 = RX10_TEMP16 ; 
/* async ( X10_TEMP61 )  */ 
{ const int X10_TEMP65 = 0 ; 
const int X10_TEMP63 = 1 ; 
const int X10_TEMP66 = km - X10_TEMP63 ; 
struct Region1 X10_TEMP68 = createNewRegion1R ( X10_TEMP65 , X10_TEMP66 ) ; 
const int RX10_TEMP21 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP19 = X10_TEMP68 .regSize ; 
RX10_TEMP19 = RX10_TEMP19 - RX10_TEMP21 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP20 = RX10_TEMP19 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP20 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP17 = SX10_TEMP5 ; 
const int RX10_TEMP22 = RX10_TEMP17 ; 
struct Point1 RX10_TEMP18 = regionOrdinalPoint1 ( X10_TEMP68 , RX10_TEMP22 ) ; 
const int k = RX10_TEMP18 .f0 ; 
const int lb = width * k ; 
const int mb = lb + stride ; 
/* finish  */ 
{ const int X10_TEMP74 = 0 ; 
const int X10_TEMP72 = 1 ; 
const int X10_TEMP75 = stride - X10_TEMP72 ; 
struct Region1 X10_TEMP77 = createNewRegion1R ( X10_TEMP74 , X10_TEMP75 ) ; 
const int X10_TEMP78 = /* here  */ 0 ; 
const int RX10_TEMP27 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = X10_TEMP77 .regSize ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27 ; const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP6 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP26 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP7 ; 
const int RX10_TEMP28 = RX10_TEMP23 ; 
struct Point1 RX10_TEMP24 = regionOrdinalPoint1 ( X10_TEMP77 , RX10_TEMP28 ) ; 
const int j = RX10_TEMP24 .f0 ; 
/* async ( X10_TEMP78 )  */ 
{ const int j1 = j + lb ; 
const int j2 = j + mb ; 
const int X10_TEMP82 = inverse ; 
const int X10_TEMP83 = X10_TEMP82 ; 
struct ComplexValArray1 X10_TEMP84 = X10_TEMP0 .tableSineCosine ; 
const int X10_TEMP86 = kmr * j ; 
struct ComplexValArray1 X10_TEMP88 = X10_TEMP0 .tableSineCosine ; 
const int X10_TEMP90 = kmr * j ; 
struct Point1 RX10_TEMP29  ; 
Point1_Point1( &RX10_TEMP29/*Assignment*/, X10_TEMP90 ) ; 
struct Region1 RX10_TEMP30 = X10_TEMP88 .regionValue ; 
const int RX10_TEMP31 = searchPointInRegion1 ( RX10_TEMP30 , RX10_TEMP29 ) ; 
const int RX10_TEMP32 = 0 ; 
const int RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32 ; 
if ( RX10_TEMP33 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP34 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP34 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP35 = X10_TEMP88 .contents ; 
struct Complex X10_TEMP91 = RX10_TEMP35 [ RX10_TEMP31 ] 
; 
/*UpdatableVariableDeclaration*/ struct Complex X10_TEMP93 = Complex_getConjg ( X10_TEMP91 ) ; 
if ( X10_TEMP83 ) 
{ struct Point1 RX10_TEMP36  ; 
Point1_Point1( &RX10_TEMP36/*Assignment*/, X10_TEMP86 ) ; 
struct Region1 RX10_TEMP37 = X10_TEMP84 .regionValue ; 
const int RX10_TEMP38 = searchPointInRegion1 ( RX10_TEMP37 , RX10_TEMP36 ) ; 
const int RX10_TEMP39 = 0 ; 
const int RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP41 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP41 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP42 = X10_TEMP84 .contents ; 
X10_TEMP93 = RX10_TEMP42 [ RX10_TEMP38 ] 
; } 

struct Complex X10_TEMP94 = X10_TEMP93 ; 
struct Complex X10_TEMP95 = X10_TEMP94 ; 
struct Complex s = X10_TEMP95 ; 
struct Dist2 RX10_TEMP43 = f .distValue ; 
struct Dist2 dF = RX10_TEMP43 ; 
const int X10_TEMP100 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dF , X10_TEMP100 ) ; 
const int X10_TEMP103 = /* here  */ 0 ; 
const int RX10_TEMP48 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP46 = rLocal1 .regSize ; 
RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP48 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP46 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP47 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP44 = SX10_TEMP9 ; 
const int RX10_TEMP49 = RX10_TEMP44 ; 
struct Point1 RX10_TEMP45 = regionOrdinalPoint1 ( rLocal1 , RX10_TEMP49 ) ; 
const int i = RX10_TEMP45 .f0 ; 
/* async ( X10_TEMP103 )  */ 
{ struct Point2 RX10_TEMP50  ; 
Point2_Point2( &RX10_TEMP50/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP51 = f .distValue ; 
struct Region2 RX10_TEMP52 = RX10_TEMP51 .dReg ; 
const int RX10_TEMP53 = searchPointInRegion2 ( RX10_TEMP52 , RX10_TEMP50 ) ; 
const int RX10_TEMP54 = 0 ; 
const int RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54 ; 
if ( RX10_TEMP55 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP56 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP56 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP57 = getPlaceFromDist2 ( RX10_TEMP51 , RX10_TEMP53 ) ; 
const int RX10_TEMP59 = /* here  */ 0 ; 
const int RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP58 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP58 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP61 = getRefArrayValue2Complex ( f , RX10_TEMP53 ) ; 
struct Complex tmp1 = RX10_TEMP61 ; 
struct Point2 RX10_TEMP62  ; 
Point2_Point2( &RX10_TEMP62/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP63 = f .distValue ; 
struct Region2 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion2 ( RX10_TEMP64 , RX10_TEMP62 ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist2 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP73 = getRefArrayValue2Complex ( f , RX10_TEMP65 ) ; 
struct Complex X10_TEMP110 = RX10_TEMP73 ; 
struct Complex tmp2 = Complex_mult ( s , X10_TEMP110 ) ; 
struct Complex X10_TEMP116 = Complex_sub ( tmp1 , tmp2 ) ; 
struct Complex X10_TEMP117 = X10_TEMP116 ; 
struct Point2 RX10_TEMP74  ; 
Point2_Point2( &RX10_TEMP74/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP75 = f .distValue ; 
struct Region2 RX10_TEMP76 = RX10_TEMP75 .dReg ; 
const int RX10_TEMP77 = searchPointInRegion2 ( RX10_TEMP76 , RX10_TEMP74 ) ; 
const int RX10_TEMP78 = 0 ; 
const int RX10_TEMP79 = RX10_TEMP77 < RX10_TEMP78 ; 
if ( RX10_TEMP79 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP80 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP80 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP81 = getPlaceFromDist2 ( RX10_TEMP75 , RX10_TEMP77 ) ; 
const int RX10_TEMP83 = /* here  */ 0 ; 
const int RX10_TEMP84 = RX10_TEMP81 != RX10_TEMP83 ; 
if ( RX10_TEMP84 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP82 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP82 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP77 , X10_TEMP117 ) ; 
struct Complex X10_TEMP122 = Complex_add ( tmp1 , tmp2 ) ; 
struct Complex X10_TEMP123 = X10_TEMP122 ; 
struct Point2 RX10_TEMP85  ; 
Point2_Point2( &RX10_TEMP85/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP86 = f .distValue ; 
struct Region2 RX10_TEMP87 = RX10_TEMP86 .dReg ; 
const int RX10_TEMP88 = searchPointInRegion2 ( RX10_TEMP87 , RX10_TEMP85 ) ; 
const int RX10_TEMP89 = 0 ; 
const int RX10_TEMP90 = RX10_TEMP88 < RX10_TEMP89 ; 
if ( RX10_TEMP90 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP91 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP91 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP92 = getPlaceFromDist2 ( RX10_TEMP86 , RX10_TEMP88 ) ; 
const int RX10_TEMP94 = /* here  */ 0 ; 
const int RX10_TEMP95 = RX10_TEMP92 != RX10_TEMP94 ; 
if ( RX10_TEMP95 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP93 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP93 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( f , RX10_TEMP88 , X10_TEMP123 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

} 

} 

} 

char * /*static*/FourierTransform2D_toString (  struct FourierTransform2D const X10_TEMP0 ) 
{ const char * X10_TEMP1 = "FourierTransform: xbits = " ; 
const int X10_TEMP2 = X10_TEMP0 .nBits1 ; 
/*ASSIGNMENT STRING*/
 char * tempC20 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC20, "%s%d",X10_TEMP1,X10_TEMP2);
const char * X10_TEMP3 = tempC20;; 
const char * X10_TEMP4 = " ybits = " ; 
/*ASSIGNMENT STRING*/
 char * tempC21 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC21, "%s%s",X10_TEMP3,X10_TEMP4);
const char * X10_TEMP5 = tempC21;; 
const int X10_TEMP6 = X10_TEMP0 .nBits2 ; 
/*ASSIGNMENT STRING*/
 char * tempC22 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC22, "%s%d",X10_TEMP5,X10_TEMP6);
const char * X10_TEMP8 = tempC22;; 
return X10_TEMP8 ; 
} 

void /*static*/runMain ( ) 
{ /*UpdatableVariableDeclaration*/ struct Timer  * tmr = (struct Timer  *) GC_MALLOC(sizeof(struct Timer ));  
Timer_Timer( tmr/*Assignment*/) ; 
/*UpdatableVariableDeclaration*/int count = 0 ; 
Timer_start ( tmr , count ) ; 
struct LinearESOpenPIC2D * X10_TEMP4 = (struct LinearESOpenPIC2D  *)  GC_MALLOC(sizeof(struct LinearESOpenPIC2D ));  
LinearESOpenPIC2D_LinearESOpenPIC2D( X10_TEMP4/*Assignment*/) ; 
LinearESOpenPIC2D_run ( X10_TEMP4 ) ; 
Timer_stop ( tmr , count ) ; 
const char * X10_TEMP7 = "Wall-clock time for plasma: " ; 
const double X10_TEMP8 = Timer_readTimer ( tmr , count ) ; 
/*ASSIGNMENT STRING*/
 char * tempC23 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC23, "%s%f",X10_TEMP7,X10_TEMP8);
const char * X10_TEMP9 = tempC23;; 
const char * X10_TEMP10 = " secs" ; 
/*ASSIGNMENT STRING*/
 char * tempC24 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC24, "%s%s",X10_TEMP9,X10_TEMP10);
const char * X10_TEMP12 = tempC24;; 
printf( "%s\n",X10_TEMP12 ) ; 
} 

int /*static*/_LinearESOpenPIC2D_NUMBER_OF_XBITS_init ( ) 
{ const int X10_TEMP2 = 5 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_NUMBER_OF_YBITS_init ( ) 
{ const int X10_TEMP2 = 5 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_XLENGTH_init ( ) 
{ const int X10_TEMP1 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 << _LinearESOpenPIC2D_NUMBER_OF_XBITS ; 
return X10_TEMP3 ; 
} 

int /*static*/_LinearESOpenPIC2D_YLENGTH_init ( ) 
{ const int X10_TEMP1 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 << _LinearESOpenPIC2D_NUMBER_OF_YBITS ; 
return X10_TEMP3 ; 
} 

int /*static*/_LinearESOpenPIC2D_PARTICLE_XDENSITY_init ( ) 
{ const int X10_TEMP2 = 128 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_PARTICLE_YDENSITY_init ( ) 
{ const int X10_TEMP2 = 128 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_NPARTICLES_init ( ) 
{ const int X10_TEMP2 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * _LinearESOpenPIC2D_PARTICLE_YDENSITY ; 
return X10_TEMP2 ; 
} 

double /*static*/_LinearESOpenPIC2D_DELTA_TIME_init ( ) 
{ const double X10_TEMP2 = 0.2000000e+00; 
return X10_TEMP2 ; 
} 

double /*static*/_LinearESOpenPIC2D_ELECTRON_CHARGE_init ( ) 
{ const double X10_TEMP1 = 1.0; 
const int X10_TEMP2 = 0 ; 
const double X10_TEMP4 = X10_TEMP2 - X10_TEMP1 ; 
return X10_TEMP4 ; 
} 

double /*static*/_LinearESOpenPIC2D_THERMAL_XVELOCITY_init ( ) 
{ const double X10_TEMP2 = 1.0; 
return X10_TEMP2 ; 
} 

double /*static*/_LinearESOpenPIC2D_THERMAL_YVELOCITY_init ( ) 
{ const double X10_TEMP2 = 1.0; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_BOUNDARY_CONDITION_init ( ) 
{ const int X10_TEMP2 = 2 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_TIME_STEPS_init ( ) 
{ const int X10_TEMP2 = 325 ; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_SORT_TIME_init ( ) 
{ const int X10_TEMP2 = 50 ; 
return X10_TEMP2 ; 
} 

double /*static*/_LinearESOpenPIC2D_IMBALANCE_init ( ) 
{ const double X10_TEMP2 = 0.08; 
return X10_TEMP2 ; 
} 

int /*static*/_LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS_init ( ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_YLENGTH ; 
const int X10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP5 = X10_TEMP2 / X10_TEMP3 ; 
return X10_TEMP5 ; 
} 

int /*static*/_LinearESOpenPIC2D_MOVE_PARTICLES_MAX_init ( ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_NPARTICLES ; 
const int X10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP5 = X10_TEMP2 / X10_TEMP3 ; 
return X10_TEMP5 ; 
} 

int /*static*/_LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER_init ( ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * _LinearESOpenPIC2D_NPARTICLES ; 
const int X10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP5 = X10_TEMP2 / X10_TEMP3 ; 
return X10_TEMP5 ; 
} 

void /*static*/LinearESOpenPIC2D_run (  struct LinearESOpenPIC2D  * const X10_TEMP0 ) 
{ const long long X10_TEMP2 = getTIME( ) 
; 
const long long X10_TEMP3 = X10_TEMP2 ; 
X10_TEMP0 ->totalTime = ( X10_TEMP3 ) ; 
const long long X10_TEMP5 = getTIME( ) 
; 
const long long X10_TEMP6 = X10_TEMP5 ; 
X10_TEMP0 ->initTime = ( X10_TEMP6 ) ; 
LinearESOpenPIC2D_initialize ( X10_TEMP0 ) ; 
const long long X10_TEMP7 = getTIME( ) 
; 
const long long X10_TEMP8 = X10_TEMP0 ->initTime ; 
const long long X10_TEMP10 = X10_TEMP7 - X10_TEMP8 ; 
const long long X10_TEMP11 = X10_TEMP10 ; 
X10_TEMP0 ->initTime = ( X10_TEMP11 ) ; 
const int X10_TEMP15 = 0 ; 
const int X10_TEMP13 = 1 ; 
const int X10_TEMP16 = _LinearESOpenPIC2D_TIME_STEPS - X10_TEMP13 ; 
struct Region1 X10_TEMP18 = createNewRegion1R ( X10_TEMP15 , X10_TEMP16 ) ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1 = X10_TEMP18 .regSize ; 
RX10_TEMP1 = RX10_TEMP1 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP2 = RX10_TEMP1 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP2 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP4 = RX10_TEMP0 ; 
struct Point1 i = regionOrdinalPoint1 ( X10_TEMP18 , RX10_TEMP4 ) ; 
const char * X10_TEMP20 = "T = " ; 
const int X10_TEMP21 = i .f0 ; 
/*ASSIGNMENT STRING*/
 char * tempC25 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC25, "%s%d",X10_TEMP20,X10_TEMP21);
const char * X10_TEMP23 = tempC25;; 
printf( "%s\n",X10_TEMP23 ) ; 
struct doubleRefArray2 X10_TEMP25 = X10_TEMP0 ->backgroundCharge ; 
struct doubleRefArray1 e = LinearESOpenPIC2D_stepTime ( X10_TEMP0 , X10_TEMP25 ) ; 
const int X10_TEMP28 = i .f0 ; 
const int X10_TEMP29 = X10_TEMP28 % _LinearESOpenPIC2D_SORT_TIME ; 
const int X10_TEMP30 = 0 ; 
const int X10_TEMP32 = X10_TEMP29 == X10_TEMP30 ; 
if ( X10_TEMP32 ) 
{ /*UpdatableVariableDeclaration*/long long time = getTIME( ) 
; 
struct ParticleRefArray1 X10_TEMP37 = X10_TEMP0 ->particles ; 
struct doubleRefArray2 X10_TEMP35 = X10_TEMP0 ->backgroundCharge ; 
struct Dist2 RX10_TEMP5 = X10_TEMP35 .distValue ; 
struct Dist2 X10_TEMP38 = RX10_TEMP5 ; 
LinearESOpenPIC2D_sortParticles ( X10_TEMP0 , X10_TEMP37 , X10_TEMP38 ) ; 
const long long X10_TEMP42 = X10_TEMP0 ->moveTime ; 
const long long X10_TEMP39 = getTIME( ) 
; 
const long long X10_TEMP41 = X10_TEMP39 - time ; 
const long long X10_TEMP44 = X10_TEMP42 + X10_TEMP41 ; 
const long long X10_TEMP45 = X10_TEMP44 ; 
X10_TEMP0 ->moveTime = ( X10_TEMP45 ) ; 
} 

const char * X10_TEMP48 = "field, kinetic, total energies = " ; 
const int X10_TEMP47 = 0 ; 
struct Point1 RX10_TEMP6  ; 
Point1_Point1( &RX10_TEMP6/*Assignment*/, X10_TEMP47 ) ; 
struct Dist1 RX10_TEMP7 = e .distValue ; 
struct Region1 RX10_TEMP8 = RX10_TEMP7 .dReg ; 
const int RX10_TEMP9 = searchPointInRegion1 ( RX10_TEMP8 , RX10_TEMP6 ) ; 
const int RX10_TEMP10 = 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 < RX10_TEMP10 ; 
if ( RX10_TEMP11 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP12 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP12 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP13 = getPlaceFromDist1 ( RX10_TEMP7 , RX10_TEMP9 ) ; 
const int RX10_TEMP15 = /* here  */ 0 ; 
const int RX10_TEMP16 = RX10_TEMP13 != RX10_TEMP15 ; 
if ( RX10_TEMP16 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP14 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP14 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP17 = getRefArrayValue1double ( e , RX10_TEMP9 ) ; 
const double X10_TEMP49 = RX10_TEMP17 ; 
/*ASSIGNMENT STRING*/
 char * tempC26 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC26, "%s%f",X10_TEMP48,X10_TEMP49);
const char * X10_TEMP50 = tempC26;; 
const char * X10_TEMP51 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC27 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC27, "%s%s",X10_TEMP50,X10_TEMP51);
const char * X10_TEMP54 = tempC27;; 
const int X10_TEMP53 = 1 ; 
struct Point1 RX10_TEMP18  ; 
Point1_Point1( &RX10_TEMP18/*Assignment*/, X10_TEMP53 ) ; 
struct Dist1 RX10_TEMP19 = e .distValue ; 
struct Region1 RX10_TEMP20 = RX10_TEMP19 .dReg ; 
const int RX10_TEMP21 = searchPointInRegion1 ( RX10_TEMP20 , RX10_TEMP18 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP25 = getPlaceFromDist1 ( RX10_TEMP19 , RX10_TEMP21 ) ; 
const int RX10_TEMP27 = /* here  */ 0 ; 
const int RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP26 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP26 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP29 = getRefArrayValue1double ( e , RX10_TEMP21 ) ; 
const double X10_TEMP55 = RX10_TEMP29 ; 
/*ASSIGNMENT STRING*/
 char * tempC28 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC28, "%s%f",X10_TEMP54,X10_TEMP55);
const char * X10_TEMP56 = tempC28;; 
const char * X10_TEMP57 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC29 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC29, "%s%s",X10_TEMP56,X10_TEMP57);
const char * X10_TEMP60 = tempC29;; 
const int X10_TEMP59 = 2 ; 
struct Point1 RX10_TEMP30  ; 
Point1_Point1( &RX10_TEMP30/*Assignment*/, X10_TEMP59 ) ; 
struct Dist1 RX10_TEMP31 = e .distValue ; 
struct Region1 RX10_TEMP32 = RX10_TEMP31 .dReg ; 
const int RX10_TEMP33 = searchPointInRegion1 ( RX10_TEMP32 , RX10_TEMP30 ) ; 
const int RX10_TEMP34 = 0 ; 
const int RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34 ; 
if ( RX10_TEMP35 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP37 = getPlaceFromDist1 ( RX10_TEMP31 , RX10_TEMP33 ) ; 
const int RX10_TEMP39 = /* here  */ 0 ; 
const int RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP41 = getRefArrayValue1double ( e , RX10_TEMP33 ) ; 
const double X10_TEMP61 = RX10_TEMP41 ; 
/*ASSIGNMENT STRING*/
 char * tempC30 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC30, "%s%f",X10_TEMP60,X10_TEMP61);
const char * X10_TEMP63 = tempC30;; 
printf( "%s\n",X10_TEMP63 ) ; 
const int X10_TEMP66 = i .f0 ; 
const int X10_TEMP65 = 1 ; 
const int X10_TEMP67 = _LinearESOpenPIC2D_TIME_STEPS - X10_TEMP65 ; 
const int X10_TEMP69 = X10_TEMP66 == X10_TEMP67 ; 
if ( X10_TEMP69 ) 
{ const int X10_TEMP72 = 0 ; 
const int X10_TEMP73 = 2 ; 
struct Region1 X10_TEMP74 = createNewRegion1R ( X10_TEMP72 , X10_TEMP73 ) ; 
const int X10_TEMP75 = /* here  */ 0 ; 
struct Dist1 dRef = getPlaceDist1 ( X10_TEMP74 , X10_TEMP75 ) ; 
struct Region1 RX10_TEMP42 = dRef .dReg ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP45 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP45 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP45 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP48 = (doubleStub *)calloc(RX10_TEMP47,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP46 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP49 = SX10_TEMP5 ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 ; 
const int RX10_TEMP52 = /* place.places ( RX10_TEMP51 )  */ 0 
; 
const int RX10_TEMP53 = getDistLocalCount1 ( dRef , RX10_TEMP51 ) ; 
const int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44 ; 
/* async ( RX10_TEMP52 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP54 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP56 = (double *)calloc(RX10_TEMP55,sizeof( double )); 
struct doubleStub RX10_TEMP57  ; 
doubleStub_doubleStub( &RX10_TEMP57/*Assignment*/, RX10_TEMP56 ) ; 
/* async ( RX10_TEMP50 )  */ 
{ RX10_TEMP48 [ RX10_TEMP49 ] = RX10_TEMP57 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP8 = (doubleStub *)calloc(RX10_TEMP46,sizeof( doubleStub )); 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP46 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP60 = SX10_TEMP9 ; 
struct doubleStub RX10_TEMP59 = RX10_TEMP48 [ RX10_TEMP60 ] 
; 
SX10_TEMP8 [ RX10_TEMP60 ] = RX10_TEMP59 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP58 = SX10_TEMP8 ; 
struct doubleRefArray1 RX10_TEMP61  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP61/*Assignment*/, dRef , RX10_TEMP58 ) ; 
struct doubleRefArray1 ref = RX10_TEMP61 ; 
const int X10_TEMP78 = 2 ; 
const int X10_TEMP80 = _LinearESOpenPIC2D_NUMBER_OF_XBITS == X10_TEMP78 ; 
const int X10_TEMP79 = 3 ; 
const int X10_TEMP81 = _LinearESOpenPIC2D_NUMBER_OF_YBITS == X10_TEMP79 ; 
const int X10_TEMP83 = X10_TEMP80 && X10_TEMP81 ; 
const int X10_TEMP82 = 4 ; 
const int X10_TEMP84 = _LinearESOpenPIC2D_PARTICLE_XDENSITY == X10_TEMP82 ; 
const int X10_TEMP86 = X10_TEMP83 && X10_TEMP84 ; 
const int X10_TEMP85 = 8 ; 
const int X10_TEMP87 = _LinearESOpenPIC2D_PARTICLE_YDENSITY == X10_TEMP85 ; 
const int X10_TEMP89 = X10_TEMP86 && X10_TEMP87 ; 
if ( X10_TEMP89 ) 
{ const int X10_TEMP91 = 0 ; 
const double X10_TEMP93 = 0.009936711552799253; 
const double X10_TEMP94 = X10_TEMP93 ; 
struct Point1 RX10_TEMP62  ; 
Point1_Point1( &RX10_TEMP62/*Assignment*/, X10_TEMP91 ) ; 
struct Dist1 RX10_TEMP63 = ref .distValue ; 
struct Region1 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion1 ( RX10_TEMP64 , RX10_TEMP62 ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist1 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP65 , X10_TEMP94 ) ; 
const int X10_TEMP96 = 1 ; 
const double X10_TEMP98 = 35.7904959849017; 
const double X10_TEMP99 = X10_TEMP98 ; 
struct Point1 RX10_TEMP73  ; 
Point1_Point1( &RX10_TEMP73/*Assignment*/, X10_TEMP96 ) ; 
struct Dist1 RX10_TEMP74 = ref .distValue ; 
struct Region1 RX10_TEMP75 = RX10_TEMP74 .dReg ; 
const int RX10_TEMP76 = searchPointInRegion1 ( RX10_TEMP75 , RX10_TEMP73 ) ; 
const int RX10_TEMP77 = 0 ; 
const int RX10_TEMP78 = RX10_TEMP76 < RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP79 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP79 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP80 = getPlaceFromDist1 ( RX10_TEMP74 , RX10_TEMP76 ) ; 
const int RX10_TEMP82 = /* here  */ 0 ; 
const int RX10_TEMP83 = RX10_TEMP80 != RX10_TEMP82 ; 
if ( RX10_TEMP83 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP81 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP81 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP76 , X10_TEMP99 ) ; 
const int X10_TEMP101 = 2 ; 
const double X10_TEMP103 = 35.8004326964545; 
const double X10_TEMP104 = X10_TEMP103 ; 
struct Point1 RX10_TEMP84  ; 
Point1_Point1( &RX10_TEMP84/*Assignment*/, X10_TEMP101 ) ; 
struct Dist1 RX10_TEMP85 = ref .distValue ; 
struct Region1 RX10_TEMP86 = RX10_TEMP85 .dReg ; 
const int RX10_TEMP87 = searchPointInRegion1 ( RX10_TEMP86 , RX10_TEMP84 ) ; 
const int RX10_TEMP88 = 0 ; 
const int RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88 ; 
if ( RX10_TEMP89 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP90 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP90 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP91 = getPlaceFromDist1 ( RX10_TEMP85 , RX10_TEMP87 ) ; 
const int RX10_TEMP93 = /* here  */ 0 ; 
const int RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP92 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP92 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP87 , X10_TEMP104 ) ; 
const char * X10_TEMP115 = "final field energy diff = " ; 
const int X10_TEMP106 = 0 ; 
struct Point1 RX10_TEMP95  ; 
Point1_Point1( &RX10_TEMP95/*Assignment*/, X10_TEMP106 ) ; 
struct Dist1 RX10_TEMP96 = ref .distValue ; 
struct Region1 RX10_TEMP97 = RX10_TEMP96 .dReg ; 
const int RX10_TEMP98 = searchPointInRegion1 ( RX10_TEMP97 , RX10_TEMP95 ) ; 
const int RX10_TEMP99 = 0 ; 
const int RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99 ; 
if ( RX10_TEMP100 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP101 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP101 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP102 = getPlaceFromDist1 ( RX10_TEMP96 , RX10_TEMP98 ) ; 
const int RX10_TEMP104 = /* here  */ 0 ; 
const int RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104 ; 
if ( RX10_TEMP105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP103 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP103 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP106 = getRefArrayValue1double ( ref , RX10_TEMP98 ) ; 
const double X10_TEMP109 = RX10_TEMP106 ; 
const int X10_TEMP108 = 0 ; 
struct Point1 RX10_TEMP107  ; 
Point1_Point1( &RX10_TEMP107/*Assignment*/, X10_TEMP108 ) ; 
struct Dist1 RX10_TEMP108 = e .distValue ; 
struct Region1 RX10_TEMP109 = RX10_TEMP108 .dReg ; 
const int RX10_TEMP110 = searchPointInRegion1 ( RX10_TEMP109 , RX10_TEMP107 ) ; 
const int RX10_TEMP111 = 0 ; 
const int RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111 ; 
if ( RX10_TEMP112 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP113 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP113 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getPlaceFromDist1 ( RX10_TEMP108 , RX10_TEMP110 ) ; 
const int RX10_TEMP116 = /* here  */ 0 ; 
const int RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116 ; 
if ( RX10_TEMP117 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP115 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP115 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP118 = getRefArrayValue1double ( e , RX10_TEMP110 ) ; 
const double X10_TEMP110 = RX10_TEMP118 ; 
const double X10_TEMP112 = X10_TEMP109 - X10_TEMP110 ; 
const double X10_TEMP114 = fabs ( X10_TEMP112 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC31 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC31, "%s%f",X10_TEMP115,X10_TEMP114);
const char * X10_TEMP117 = tempC31;; 
printf( "%s\n",X10_TEMP117 ) ; 
const char * X10_TEMP128 = "final kinetic energy diff = " ; 
const int X10_TEMP119 = 1 ; 
struct Point1 RX10_TEMP119  ; 
Point1_Point1( &RX10_TEMP119/*Assignment*/, X10_TEMP119 ) ; 
struct Dist1 RX10_TEMP120 = ref .distValue ; 
struct Region1 RX10_TEMP121 = RX10_TEMP120 .dReg ; 
const int RX10_TEMP122 = searchPointInRegion1 ( RX10_TEMP121 , RX10_TEMP119 ) ; 
const int RX10_TEMP123 = 0 ; 
const int RX10_TEMP124 = RX10_TEMP122 < RX10_TEMP123 ; 
if ( RX10_TEMP124 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP125 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP125 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP126 = getPlaceFromDist1 ( RX10_TEMP120 , RX10_TEMP122 ) ; 
const int RX10_TEMP128 = /* here  */ 0 ; 
const int RX10_TEMP129 = RX10_TEMP126 != RX10_TEMP128 ; 
if ( RX10_TEMP129 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP127 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP127 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP130 = getRefArrayValue1double ( ref , RX10_TEMP122 ) ; 
const double X10_TEMP122 = RX10_TEMP130 ; 
const int X10_TEMP121 = 1 ; 
struct Point1 RX10_TEMP131  ; 
Point1_Point1( &RX10_TEMP131/*Assignment*/, X10_TEMP121 ) ; 
struct Dist1 RX10_TEMP132 = e .distValue ; 
struct Region1 RX10_TEMP133 = RX10_TEMP132 .dReg ; 
const int RX10_TEMP134 = searchPointInRegion1 ( RX10_TEMP133 , RX10_TEMP131 ) ; 
const int RX10_TEMP135 = 0 ; 
const int RX10_TEMP136 = RX10_TEMP134 < RX10_TEMP135 ; 
if ( RX10_TEMP136 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP137 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP137 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP138 = getPlaceFromDist1 ( RX10_TEMP132 , RX10_TEMP134 ) ; 
const int RX10_TEMP140 = /* here  */ 0 ; 
const int RX10_TEMP141 = RX10_TEMP138 != RX10_TEMP140 ; 
if ( RX10_TEMP141 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP139 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP139 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP142 = getRefArrayValue1double ( e , RX10_TEMP134 ) ; 
const double X10_TEMP123 = RX10_TEMP142 ; 
const double X10_TEMP125 = X10_TEMP122 - X10_TEMP123 ; 
const double X10_TEMP127 = fabs ( X10_TEMP125 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC32 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC32, "%s%f",X10_TEMP128,X10_TEMP127);
const char * X10_TEMP130 = tempC32;; 
printf( "%s\n",X10_TEMP130 ) ; 
const char * X10_TEMP141 = "final final energy diff = " ; 
const int X10_TEMP132 = 2 ; 
struct Point1 RX10_TEMP143  ; 
Point1_Point1( &RX10_TEMP143/*Assignment*/, X10_TEMP132 ) ; 
struct Dist1 RX10_TEMP144 = ref .distValue ; 
struct Region1 RX10_TEMP145 = RX10_TEMP144 .dReg ; 
const int RX10_TEMP146 = searchPointInRegion1 ( RX10_TEMP145 , RX10_TEMP143 ) ; 
const int RX10_TEMP147 = 0 ; 
const int RX10_TEMP148 = RX10_TEMP146 < RX10_TEMP147 ; 
if ( RX10_TEMP148 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP149 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP149 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP150 = getPlaceFromDist1 ( RX10_TEMP144 , RX10_TEMP146 ) ; 
const int RX10_TEMP152 = /* here  */ 0 ; 
const int RX10_TEMP153 = RX10_TEMP150 != RX10_TEMP152 ; 
if ( RX10_TEMP153 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP151 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP151 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP154 = getRefArrayValue1double ( ref , RX10_TEMP146 ) ; 
const double X10_TEMP135 = RX10_TEMP154 ; 
const int X10_TEMP134 = 2 ; 
struct Point1 RX10_TEMP155  ; 
Point1_Point1( &RX10_TEMP155/*Assignment*/, X10_TEMP134 ) ; 
struct Dist1 RX10_TEMP156 = e .distValue ; 
struct Region1 RX10_TEMP157 = RX10_TEMP156 .dReg ; 
const int RX10_TEMP158 = searchPointInRegion1 ( RX10_TEMP157 , RX10_TEMP155 ) ; 
const int RX10_TEMP159 = 0 ; 
const int RX10_TEMP160 = RX10_TEMP158 < RX10_TEMP159 ; 
if ( RX10_TEMP160 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP161 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP161 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP162 = getPlaceFromDist1 ( RX10_TEMP156 , RX10_TEMP158 ) ; 
const int RX10_TEMP164 = /* here  */ 0 ; 
const int RX10_TEMP165 = RX10_TEMP162 != RX10_TEMP164 ; 
if ( RX10_TEMP165 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP163 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP163 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP166 = getRefArrayValue1double ( e , RX10_TEMP158 ) ; 
const double X10_TEMP136 = RX10_TEMP166 ; 
const double X10_TEMP138 = X10_TEMP135 - X10_TEMP136 ; 
const double X10_TEMP140 = fabs ( X10_TEMP138 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC33 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC33, "%s%f",X10_TEMP141,X10_TEMP140);
const char * X10_TEMP143 = tempC33;; 
printf( "%s\n",X10_TEMP143 ) ; 
} 
else 
{ const int X10_TEMP144 = 3 ; 
const int X10_TEMP146 = _LinearESOpenPIC2D_NUMBER_OF_XBITS == X10_TEMP144 ; 
const int X10_TEMP145 = 4 ; 
const int X10_TEMP147 = _LinearESOpenPIC2D_NUMBER_OF_YBITS == X10_TEMP145 ; 
const int X10_TEMP149 = X10_TEMP146 && X10_TEMP147 ; 
const int X10_TEMP148 = 8 ; 
const int X10_TEMP150 = _LinearESOpenPIC2D_PARTICLE_XDENSITY == X10_TEMP148 ; 
const int X10_TEMP152 = X10_TEMP149 && X10_TEMP150 ; 
const int X10_TEMP151 = 16 ; 
const int X10_TEMP153 = _LinearESOpenPIC2D_PARTICLE_YDENSITY == X10_TEMP151 ; 
const int X10_TEMP155 = X10_TEMP152 && X10_TEMP153 ; 
if ( X10_TEMP155 ) 
{ const int X10_TEMP157 = 0 ; 
const double X10_TEMP159 = 1.12911030199718; 
const double X10_TEMP160 = X10_TEMP159 ; 
struct Point1 RX10_TEMP167  ; 
Point1_Point1( &RX10_TEMP167/*Assignment*/, X10_TEMP157 ) ; 
struct Dist1 RX10_TEMP168 = ref .distValue ; 
struct Region1 RX10_TEMP169 = RX10_TEMP168 .dReg ; 
const int RX10_TEMP170 = searchPointInRegion1 ( RX10_TEMP169 , RX10_TEMP167 ) ; 
const int RX10_TEMP171 = 0 ; 
const int RX10_TEMP172 = RX10_TEMP170 < RX10_TEMP171 ; 
if ( RX10_TEMP172 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP173 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP173 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP174 = getPlaceFromDist1 ( RX10_TEMP168 , RX10_TEMP170 ) ; 
const int RX10_TEMP176 = /* here  */ 0 ; 
const int RX10_TEMP177 = RX10_TEMP174 != RX10_TEMP176 ; 
if ( RX10_TEMP177 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP175 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP175 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP170 , X10_TEMP160 ) ; 
const int X10_TEMP162 = 1 ; 
const double X10_TEMP164 = 138.01404855563126; 
const double X10_TEMP165 = X10_TEMP164 ; 
struct Point1 RX10_TEMP178  ; 
Point1_Point1( &RX10_TEMP178/*Assignment*/, X10_TEMP162 ) ; 
struct Dist1 RX10_TEMP179 = ref .distValue ; 
struct Region1 RX10_TEMP180 = RX10_TEMP179 .dReg ; 
const int RX10_TEMP181 = searchPointInRegion1 ( RX10_TEMP180 , RX10_TEMP178 ) ; 
const int RX10_TEMP182 = 0 ; 
const int RX10_TEMP183 = RX10_TEMP181 < RX10_TEMP182 ; 
if ( RX10_TEMP183 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP184 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP184 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP185 = getPlaceFromDist1 ( RX10_TEMP179 , RX10_TEMP181 ) ; 
const int RX10_TEMP187 = /* here  */ 0 ; 
const int RX10_TEMP188 = RX10_TEMP185 != RX10_TEMP187 ; 
if ( RX10_TEMP188 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP186 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP186 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP181 , X10_TEMP165 ) ; 
const int X10_TEMP167 = 2 ; 
const double X10_TEMP169 = 139.14315885762844; 
const double X10_TEMP170 = X10_TEMP169 ; 
struct Point1 RX10_TEMP189  ; 
Point1_Point1( &RX10_TEMP189/*Assignment*/, X10_TEMP167 ) ; 
struct Dist1 RX10_TEMP190 = ref .distValue ; 
struct Region1 RX10_TEMP191 = RX10_TEMP190 .dReg ; 
const int RX10_TEMP192 = searchPointInRegion1 ( RX10_TEMP191 , RX10_TEMP189 ) ; 
const int RX10_TEMP193 = 0 ; 
const int RX10_TEMP194 = RX10_TEMP192 < RX10_TEMP193 ; 
if ( RX10_TEMP194 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP195 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP195 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP196 = getPlaceFromDist1 ( RX10_TEMP190 , RX10_TEMP192 ) ; 
const int RX10_TEMP198 = /* here  */ 0 ; 
const int RX10_TEMP199 = RX10_TEMP196 != RX10_TEMP198 ; 
if ( RX10_TEMP199 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP197 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP197 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( ref , RX10_TEMP192 , X10_TEMP170 ) ; 
const char * X10_TEMP181 = "final field energy diff = " ; 
const int X10_TEMP172 = 0 ; 
struct Point1 RX10_TEMP200  ; 
Point1_Point1( &RX10_TEMP200/*Assignment*/, X10_TEMP172 ) ; 
struct Dist1 RX10_TEMP201 = ref .distValue ; 
struct Region1 RX10_TEMP202 = RX10_TEMP201 .dReg ; 
const int RX10_TEMP203 = searchPointInRegion1 ( RX10_TEMP202 , RX10_TEMP200 ) ; 
const int RX10_TEMP204 = 0 ; 
const int RX10_TEMP205 = RX10_TEMP203 < RX10_TEMP204 ; 
if ( RX10_TEMP205 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP206 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP206 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP207 = getPlaceFromDist1 ( RX10_TEMP201 , RX10_TEMP203 ) ; 
const int RX10_TEMP209 = /* here  */ 0 ; 
const int RX10_TEMP210 = RX10_TEMP207 != RX10_TEMP209 ; 
if ( RX10_TEMP210 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP208 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP208 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP211 = getRefArrayValue1double ( ref , RX10_TEMP203 ) ; 
const double X10_TEMP175 = RX10_TEMP211 ; 
const int X10_TEMP174 = 0 ; 
struct Point1 RX10_TEMP212  ; 
Point1_Point1( &RX10_TEMP212/*Assignment*/, X10_TEMP174 ) ; 
struct Dist1 RX10_TEMP213 = e .distValue ; 
struct Region1 RX10_TEMP214 = RX10_TEMP213 .dReg ; 
const int RX10_TEMP215 = searchPointInRegion1 ( RX10_TEMP214 , RX10_TEMP212 ) ; 
const int RX10_TEMP216 = 0 ; 
const int RX10_TEMP217 = RX10_TEMP215 < RX10_TEMP216 ; 
if ( RX10_TEMP217 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP218 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP218 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP219 = getPlaceFromDist1 ( RX10_TEMP213 , RX10_TEMP215 ) ; 
const int RX10_TEMP221 = /* here  */ 0 ; 
const int RX10_TEMP222 = RX10_TEMP219 != RX10_TEMP221 ; 
if ( RX10_TEMP222 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP220 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP220 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP223 = getRefArrayValue1double ( e , RX10_TEMP215 ) ; 
const double X10_TEMP176 = RX10_TEMP223 ; 
const double X10_TEMP178 = X10_TEMP175 - X10_TEMP176 ; 
const double X10_TEMP180 = fabs ( X10_TEMP178 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC34 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC34, "%s%f",X10_TEMP181,X10_TEMP180);
const char * X10_TEMP183 = tempC34;; 
printf( "%s\n",X10_TEMP183 ) ; 
const char * X10_TEMP194 = "final kinetic energy diff = " ; 
const int X10_TEMP185 = 1 ; 
struct Point1 RX10_TEMP224  ; 
Point1_Point1( &RX10_TEMP224/*Assignment*/, X10_TEMP185 ) ; 
struct Dist1 RX10_TEMP225 = ref .distValue ; 
struct Region1 RX10_TEMP226 = RX10_TEMP225 .dReg ; 
const int RX10_TEMP227 = searchPointInRegion1 ( RX10_TEMP226 , RX10_TEMP224 ) ; 
const int RX10_TEMP228 = 0 ; 
const int RX10_TEMP229 = RX10_TEMP227 < RX10_TEMP228 ; 
if ( RX10_TEMP229 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP230 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP230 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP231 = getPlaceFromDist1 ( RX10_TEMP225 , RX10_TEMP227 ) ; 
const int RX10_TEMP233 = /* here  */ 0 ; 
const int RX10_TEMP234 = RX10_TEMP231 != RX10_TEMP233 ; 
if ( RX10_TEMP234 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP232 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP232 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP235 = getRefArrayValue1double ( ref , RX10_TEMP227 ) ; 
const double X10_TEMP188 = RX10_TEMP235 ; 
const int X10_TEMP187 = 1 ; 
struct Point1 RX10_TEMP236  ; 
Point1_Point1( &RX10_TEMP236/*Assignment*/, X10_TEMP187 ) ; 
struct Dist1 RX10_TEMP237 = e .distValue ; 
struct Region1 RX10_TEMP238 = RX10_TEMP237 .dReg ; 
const int RX10_TEMP239 = searchPointInRegion1 ( RX10_TEMP238 , RX10_TEMP236 ) ; 
const int RX10_TEMP240 = 0 ; 
const int RX10_TEMP241 = RX10_TEMP239 < RX10_TEMP240 ; 
if ( RX10_TEMP241 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP242 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP242 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP243 = getPlaceFromDist1 ( RX10_TEMP237 , RX10_TEMP239 ) ; 
const int RX10_TEMP245 = /* here  */ 0 ; 
const int RX10_TEMP246 = RX10_TEMP243 != RX10_TEMP245 ; 
if ( RX10_TEMP246 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP244 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP244 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP247 = getRefArrayValue1double ( e , RX10_TEMP239 ) ; 
const double X10_TEMP189 = RX10_TEMP247 ; 
const double X10_TEMP191 = X10_TEMP188 - X10_TEMP189 ; 
const double X10_TEMP193 = fabs ( X10_TEMP191 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC35 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC35, "%s%f",X10_TEMP194,X10_TEMP193);
const char * X10_TEMP196 = tempC35;; 
printf( "%s\n",X10_TEMP196 ) ; 
const char * X10_TEMP207 = "final final energy diff = " ; 
const int X10_TEMP198 = 2 ; 
struct Point1 RX10_TEMP248  ; 
Point1_Point1( &RX10_TEMP248/*Assignment*/, X10_TEMP198 ) ; 
struct Dist1 RX10_TEMP249 = ref .distValue ; 
struct Region1 RX10_TEMP250 = RX10_TEMP249 .dReg ; 
const int RX10_TEMP251 = searchPointInRegion1 ( RX10_TEMP250 , RX10_TEMP248 ) ; 
const int RX10_TEMP252 = 0 ; 
const int RX10_TEMP253 = RX10_TEMP251 < RX10_TEMP252 ; 
if ( RX10_TEMP253 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP254 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP254 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP255 = getPlaceFromDist1 ( RX10_TEMP249 , RX10_TEMP251 ) ; 
const int RX10_TEMP257 = /* here  */ 0 ; 
const int RX10_TEMP258 = RX10_TEMP255 != RX10_TEMP257 ; 
if ( RX10_TEMP258 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP256 = "Bad place access for array ref" ; 
fprintf(stderr, RX10_TEMP256 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP259 = getRefArrayValue1double ( ref , RX10_TEMP251 ) ; 
const double X10_TEMP201 = RX10_TEMP259 ; 
const int X10_TEMP200 = 2 ; 
struct Point1 RX10_TEMP260  ; 
Point1_Point1( &RX10_TEMP260/*Assignment*/, X10_TEMP200 ) ; 
struct Dist1 RX10_TEMP261 = e .distValue ; 
struct Region1 RX10_TEMP262 = RX10_TEMP261 .dReg ; 
const int RX10_TEMP263 = searchPointInRegion1 ( RX10_TEMP262 , RX10_TEMP260 ) ; 
const int RX10_TEMP264 = 0 ; 
const int RX10_TEMP265 = RX10_TEMP263 < RX10_TEMP264 ; 
if ( RX10_TEMP265 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP266 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP266 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP267 = getPlaceFromDist1 ( RX10_TEMP261 , RX10_TEMP263 ) ; 
const int RX10_TEMP269 = /* here  */ 0 ; 
const int RX10_TEMP270 = RX10_TEMP267 != RX10_TEMP269 ; 
if ( RX10_TEMP270 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP268 = "Bad place access for array e" ; 
fprintf(stderr, RX10_TEMP268 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP271 = getRefArrayValue1double ( e , RX10_TEMP263 ) ; 
const double X10_TEMP202 = RX10_TEMP271 ; 
const double X10_TEMP204 = X10_TEMP201 - X10_TEMP202 ; 
const double X10_TEMP206 = fabs ( X10_TEMP204 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC36 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC36, "%s%f",X10_TEMP207,X10_TEMP206);
const char * X10_TEMP209 = tempC36;; 
printf( "%s\n",X10_TEMP209 ) ; 
} 
else 
{ const char * X10_TEMP211 = "No reference values availabile" ; 
printf( "%s\n",X10_TEMP211 ) ; 
} 


} 


} 

} 

const long long X10_TEMP212 = getTIME( ) 
; 
const long long X10_TEMP213 = X10_TEMP0 ->totalTime ; 
const long long X10_TEMP215 = X10_TEMP212 - X10_TEMP213 ; 
const long long X10_TEMP216 = X10_TEMP215 ; 
X10_TEMP0 ->totalTime = ( X10_TEMP216 ) ; 
const char * X10_TEMP217 = "Total time (ms): " ; 
const long long X10_TEMP218 = X10_TEMP0 ->totalTime ; 
/*ASSIGNMENT STRING*/
 char * tempC37 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC37, "%s%lld",X10_TEMP217,X10_TEMP218);
const char * X10_TEMP220 = tempC37;; 
printf( "%s\n",X10_TEMP220 ) ; 
const char * X10_TEMP221 = "Initialization time (ms): " ; 
const long long X10_TEMP222 = X10_TEMP0 ->initTime ; 
/*ASSIGNMENT STRING*/
 char * tempC38 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC38, "%s%lld",X10_TEMP221,X10_TEMP222);
const char * X10_TEMP223 = tempC38;; 
const char * X10_TEMP224 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC39 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC39, "%s%s",X10_TEMP223,X10_TEMP224);
const char * X10_TEMP230 = tempC39;; 
const double X10_TEMP225 = 100.0; 
const long long X10_TEMP226 = X10_TEMP0 ->initTime ; 
const double X10_TEMP228 = X10_TEMP225 * X10_TEMP226 ; 
const long long X10_TEMP229 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP231 = X10_TEMP228 / X10_TEMP229 ; 
/*ASSIGNMENT STRING*/
 char * tempC40 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC40, "%s%f",X10_TEMP230,X10_TEMP231);
const char * X10_TEMP233 = tempC40;; 
printf( "%s\n",X10_TEMP233 ) ; 
const char * X10_TEMP234 = "Particle Deposit time (ms): " ; 
const long long X10_TEMP235 = X10_TEMP0 ->depositTime ; 
/*ASSIGNMENT STRING*/
 char * tempC41 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC41, "%s%lld",X10_TEMP234,X10_TEMP235);
const char * X10_TEMP236 = tempC41;; 
const char * X10_TEMP237 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC42 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC42, "%s%s",X10_TEMP236,X10_TEMP237);
const char * X10_TEMP243 = tempC42;; 
const double X10_TEMP238 = 100.0; 
const long long X10_TEMP239 = X10_TEMP0 ->depositTime ; 
const double X10_TEMP241 = X10_TEMP238 * X10_TEMP239 ; 
const long long X10_TEMP242 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP244 = X10_TEMP241 / X10_TEMP242 ; 
/*ASSIGNMENT STRING*/
 char * tempC43 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC43, "%s%f",X10_TEMP243,X10_TEMP244);
const char * X10_TEMP246 = tempC43;; 
printf( "%s\n",X10_TEMP246 ) ; 
const char * X10_TEMP247 = "Field Redistribution time (ms): " ; 
const long long X10_TEMP248 = X10_TEMP0 ->redistTime ; 
/*ASSIGNMENT STRING*/
 char * tempC44 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC44, "%s%lld",X10_TEMP247,X10_TEMP248);
const char * X10_TEMP249 = tempC44;; 
const char * X10_TEMP250 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC45 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC45, "%s%s",X10_TEMP249,X10_TEMP250);
const char * X10_TEMP256 = tempC45;; 
const double X10_TEMP251 = 100.0; 
const long long X10_TEMP252 = X10_TEMP0 ->redistTime ; 
const double X10_TEMP254 = X10_TEMP251 * X10_TEMP252 ; 
const long long X10_TEMP255 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP257 = X10_TEMP254 / X10_TEMP255 ; 
/*ASSIGNMENT STRING*/
 char * tempC46 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC46, "%s%f",X10_TEMP256,X10_TEMP257);
const char * X10_TEMP259 = tempC46;; 
printf( "%s\n",X10_TEMP259 ) ; 
const char * X10_TEMP260 = "Solver time (ms): " ; 
const long long X10_TEMP261 = X10_TEMP0 ->solverTime ; 
/*ASSIGNMENT STRING*/
 char * tempC47 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC47, "%s%lld",X10_TEMP260,X10_TEMP261);
const char * X10_TEMP262 = tempC47;; 
const char * X10_TEMP263 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC48 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC48, "%s%s",X10_TEMP262,X10_TEMP263);
const char * X10_TEMP269 = tempC48;; 
const double X10_TEMP264 = 100.0; 
const long long X10_TEMP265 = X10_TEMP0 ->solverTime ; 
const double X10_TEMP267 = X10_TEMP264 * X10_TEMP265 ; 
const long long X10_TEMP268 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP270 = X10_TEMP267 / X10_TEMP268 ; 
/*ASSIGNMENT STRING*/
 char * tempC49 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC49, "%s%f",X10_TEMP269,X10_TEMP270);
const char * X10_TEMP272 = tempC49;; 
printf( "%s\n",X10_TEMP272 ) ; 
const char * X10_TEMP273 = "Particle Push time (ms): " ; 
const long long X10_TEMP274 = X10_TEMP0 ->pushTime ; 
/*ASSIGNMENT STRING*/
 char * tempC50 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC50, "%s%lld",X10_TEMP273,X10_TEMP274);
const char * X10_TEMP275 = tempC50;; 
const char * X10_TEMP276 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC51 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC51, "%s%s",X10_TEMP275,X10_TEMP276);
const char * X10_TEMP282 = tempC51;; 
const double X10_TEMP277 = 100.0; 
const long long X10_TEMP278 = X10_TEMP0 ->pushTime ; 
const double X10_TEMP280 = X10_TEMP277 * X10_TEMP278 ; 
const long long X10_TEMP281 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP283 = X10_TEMP280 / X10_TEMP281 ; 
/*ASSIGNMENT STRING*/
 char * tempC52 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC52, "%s%f",X10_TEMP282,X10_TEMP283);
const char * X10_TEMP285 = tempC52;; 
printf( "%s\n",X10_TEMP285 ) ; 
const char * X10_TEMP286 = "Particle move time (ms): " ; 
const long long X10_TEMP287 = X10_TEMP0 ->moveTime ; 
/*ASSIGNMENT STRING*/
 char * tempC53 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC53, "%s%lld",X10_TEMP286,X10_TEMP287);
const char * X10_TEMP288 = tempC53;; 
const char * X10_TEMP289 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC54 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC54, "%s%s",X10_TEMP288,X10_TEMP289);
const char * X10_TEMP295 = tempC54;; 
const double X10_TEMP290 = 100.0; 
const long long X10_TEMP291 = X10_TEMP0 ->moveTime ; 
const double X10_TEMP293 = X10_TEMP290 * X10_TEMP291 ; 
const long long X10_TEMP294 = X10_TEMP0 ->totalTime ; 
const double X10_TEMP296 = X10_TEMP293 / X10_TEMP294 ; 
/*ASSIGNMENT STRING*/
 char * tempC55 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC55, "%s%f",X10_TEMP295,X10_TEMP296);
const char * X10_TEMP298 = tempC55;; 
printf( "%s\n",X10_TEMP298 ) ; 
} 

void /*static*/LinearESOpenPIC2D_initialize (  struct LinearESOpenPIC2D  * const X10_TEMP0 ) 
{ const char * X10_TEMP2 = "Init: particle position" ; 
printf( "%s\n",X10_TEMP2 ) ; 
struct doubleRefArray2 position = LinearESOpenPIC2D_genParticlePosition ( X10_TEMP0 , _LinearESOpenPIC2D_NPARTICLES ) ; 
const char * X10_TEMP6 = "Init: particle velocity" ; 
printf( "%s\n",X10_TEMP6 ) ; 
struct doubleRefArray2 velocity = LinearESOpenPIC2D_genParticleVelocity ( X10_TEMP0 , _LinearESOpenPIC2D_NPARTICLES ) ; 
const char * X10_TEMP10 = "Init: particles" ; 
printf( "%s\n",X10_TEMP10 ) ; 
struct ParticleRefArray1 X10_TEMP15 = LinearESOpenPIC2D_genParticles ( X10_TEMP0 , _LinearESOpenPIC2D_NPARTICLES , position , velocity ) ; 
struct ParticleRefArray1 X10_TEMP16 = X10_TEMP15 ; 
X10_TEMP0 ->particles = ( X10_TEMP16 ) ; 
const char * X10_TEMP18 = "Init: initial field distribution" ; 
printf( "%s\n",X10_TEMP18 ) ; 
struct ParticleRefArray1 X10_TEMP20 = X10_TEMP0 ->particles ; 
struct Dist2 dField = LinearESOpenPIC2D_genInitialDist ( X10_TEMP0 , X10_TEMP20 ) ; 
const char * X10_TEMP23 = "Init: initial partical distribution" ; 
printf( "%s\n",X10_TEMP23 ) ; 
struct intRefArray1 info = LinearESOpenPIC2D_makeInfoArray ( X10_TEMP0 ) ; 
struct ParticleRefArray1 X10_TEMP28 = X10_TEMP0 ->particles ; 
struct ParticleRefArray1 X10_TEMP30 = LinearESOpenPIC2D_moveParticles ( X10_TEMP0 , X10_TEMP28 , dField , info ) ; 
struct ParticleRefArray1 X10_TEMP31 = X10_TEMP30 ; 
X10_TEMP0 ->particles = ( X10_TEMP31 ) ; 
const char * X10_TEMP33 = "Init: background charge" ; 
printf( "%s\n",X10_TEMP33 ) ; 
struct Region2 RX10_TEMP0 = dField .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dField , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dField , RX10_TEMP16 ) ; 
struct doubleRefArray2 X10_TEMP35 = RX10_TEMP19 ; 
struct doubleRefArray2 X10_TEMP36 = X10_TEMP35 ; 
X10_TEMP0 ->backgroundCharge = ( X10_TEMP36 ) ; 
struct doubleRefArray2 backgroundGuards = LinearESOpenPIC2D_makeGuards ( X10_TEMP0 , dField ) ; 
struct ParticleRefArray1 X10_TEMP44 = X10_TEMP0 ->particles ; 
struct doubleRefArray2 X10_TEMP45 = X10_TEMP0 ->backgroundCharge ; 
const double X10_TEMP46 = fabs ( _LinearESOpenPIC2D_ELECTRON_CHARGE ) ; 
LinearESOpenPIC2D_depositCharge ( X10_TEMP0 , X10_TEMP44 , X10_TEMP45 , backgroundGuards , X10_TEMP46 ) ; 
struct doubleRefArray2 X10_TEMP49 = X10_TEMP0 ->backgroundCharge ; 
LinearESOpenPIC2D_addGuards ( X10_TEMP0 , X10_TEMP49 , backgroundGuards ) ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_genParticlePosition (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const int np ) 
{ const int X = 0 ; 
const int Y = 1 ; 
const int MAX_PLACES = /* place.MAX_PLACES  */ 1 ; 
const int MAX_ITER = 20 ; 
const double ERROR = 0.0001; 
const double BIG = 0.5; 
const int X10_TEMP10 = 0 ; 
const int X10_TEMP8 = 1 ; 
const int X10_TEMP11 = np - X10_TEMP8 ; 
struct Region1 X10_TEMP18 = createNewRegion1R ( X10_TEMP10 , X10_TEMP11 ) ; 
const int X10_TEMP15 = 0 ; 
const int X10_TEMP16 = 1 ; 
struct Region1 X10_TEMP19 = createNewRegion1R ( X10_TEMP15 , X10_TEMP16 ) ; 
struct Dist2 dResult = X10Util_distBlockStar2 ( X10_TEMP18 , X10_TEMP19 ) ; 
struct Region2 RX10_TEMP0 = dResult .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dResult , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dResult , RX10_TEMP16 ) ; 
struct doubleRefArray2 result = RX10_TEMP19 ; 
const int X10_TEMP23 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * _LinearESOpenPIC2D_PARTICLE_YDENSITY ; 
const int particlesPerPlace = X10_TEMP23 / MAX_PLACES ; 
const int totalParticles = particlesPerPlace * MAX_PLACES ; 
const int X10_TEMP27 = totalParticles != _LinearESOpenPIC2D_NPARTICLES ; 
if ( X10_TEMP27 ) 
{ const char * X10_TEMP28 = "Particle distribution truncated, " ; 
const char * X10_TEMP29 = "total particles = " ; 
/*ASSIGNMENT STRING*/
 char * tempC56 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC56, "%s%s",X10_TEMP28,X10_TEMP29);
const char * X10_TEMP30 = tempC56;; 
/*ASSIGNMENT STRING*/
 char * tempC57 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC57, "%s%d",X10_TEMP30,totalParticles);
const char * X10_TEMP32 = tempC57;; 
fprintf(stderr, "%s\n" , X10_TEMP32 ) ; 
return result ; 
} 

const int X10_TEMP34 = 2 ; 
const int X10_TEMP36 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP34 ; 
const int X10_TEMP35 = 3 ; 
const int X10_TEMP37 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP35 ; 
const int X10_TEMP39 = X10_TEMP36 || X10_TEMP37 ; 
const int X10_TEMP40 = X10_TEMP39 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP43 = 0.0; 
if ( X10_TEMP40 ) 
{ X10_TEMP43 = 1.0; } 

const double X10_TEMP44 = X10_TEMP43 ; 
const double edgelx = X10_TEMP44 ; 
const int X10_TEMP45 = 2 ; 
const int X10_TEMP47 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP45 ; 
const int X10_TEMP48 = X10_TEMP47 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP51 = 0.0; 
if ( X10_TEMP48 ) 
{ X10_TEMP51 = 1.0; } 

const double X10_TEMP52 = X10_TEMP51 ; 
const double edgely = X10_TEMP52 ; 
const double X10_TEMP57 = 0.0; 
const double X10_TEMP58 = 0.0; 
const double X10_TEMP59 = 0.0; 
/*UpdatableVariableDeclaration*/double tx0 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , edgelx , X10_TEMP57 , X10_TEMP58 , X10_TEMP59 ) ; 
const double X10_TEMP65 = 0.0; 
const double X10_TEMP66 = 0.0; 
const double X10_TEMP67 = 0.0; 
/*UpdatableVariableDeclaration*/double ty0 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , edgely , X10_TEMP65 , X10_TEMP66 , X10_TEMP67 ) ; 
const double anx = _LinearESOpenPIC2D_XLENGTH - edgelx ; 
const double any = _LinearESOpenPIC2D_YLENGTH - edgely ; 
const double X10_TEMP75 = 0.0; 
const double X10_TEMP76 = 0.0; 
const double X10_TEMP77 = 0.0; 
const double X10_TEMP78 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , anx , X10_TEMP75 , X10_TEMP76 , X10_TEMP77 ) ; 
const double X10_TEMP80 = X10_TEMP78 - tx0 ; 
const double bnx = _LinearESOpenPIC2D_PARTICLE_XDENSITY / X10_TEMP80 ; 
const double X10_TEMP86 = 0.0; 
const double X10_TEMP87 = 0.0; 
const double X10_TEMP88 = 0.0; 
const double X10_TEMP89 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , any , X10_TEMP86 , X10_TEMP87 , X10_TEMP88 ) ; 
const double X10_TEMP91 = X10_TEMP89 - ty0 ; 
const double bny = _LinearESOpenPIC2D_PARTICLE_YDENSITY / X10_TEMP91 ; 
const double X10_TEMP93 = bnx * tx0 ; 
const double X10_TEMP94 = 0.5; 
const double x0 = X10_TEMP93 - X10_TEMP94 ; 
const double X10_TEMP96 = bny * ty0 ; 
const double X10_TEMP97 = 0.5; 
const double y0 = X10_TEMP96 - X10_TEMP97 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP100 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP100 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP100 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP100." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP100 , RX10_TEMP27 ) ; 
const int X10_TEMP101 = RX10_TEMP31 ; 
/* async ( X10_TEMP101 )  */ 
{ const int X10_TEMP104 = 0 ; 
struct Region1 rLocal = X10Util_getLRank2D ( dResult , X10_TEMP104 ) ; 
const int RX10_TEMP32 = rLocal .regSize ; 
const int RX10_TEMP33 = 0 ; 
const int RX10_TEMP34 = RX10_TEMP32 <= RX10_TEMP33 ; 
if ( RX10_TEMP34 ) 
{ const char * RX10_TEMP35 = "Operation low() not defined on empty region rLocal" ; 
fprintf(stderr, RX10_TEMP35 ) ; 
exit(EXIT_FAILURE);
} 

const int offset = regionLow ( rLocal ) ; 
const int X10_TEMP108 = pl .f0 ; 
const int koff = particlesPerPlace * X10_TEMP108 ; 
const int noff = offset ; 
/*UpdatableVariableDeclaration*/int kc = koff / _LinearESOpenPIC2D_PARTICLE_XDENSITY ; 
/*UpdatableVariableDeclaration*/double yt0 = edgely ; 
const double X10_TEMP123 = 0.5; 
const double X10_TEMP117 = 0.0; 
const double X10_TEMP118 = 0.0; 
const double X10_TEMP119 = 0.0; 
const double X10_TEMP120 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , yt0 , X10_TEMP117 , X10_TEMP118 , X10_TEMP119 ) ; 
const double X10_TEMP122 = bny * X10_TEMP120 ; 
const double X10_TEMP124 = X10_TEMP123 / X10_TEMP122 ; 
/*UpdatableVariableDeclaration*/double yt = yt0 + X10_TEMP124 ; 
const int X10_TEMP129 = 0 ; 
const int X10_TEMP127 = 1 ; 
const int X10_TEMP130 = kc - X10_TEMP127 ; 
struct Region1 X10_TEMP132 = createNewRegion1R ( X10_TEMP129 , X10_TEMP130 ) ; 
const int RX10_TEMP39 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP37 = X10_TEMP132 .regSize ; 
RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP38 = RX10_TEMP37 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP38 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP36 = SX10_TEMP11 ; 
const int RX10_TEMP40 = RX10_TEMP36 ; 
struct Point1 k = regionOrdinalPoint1 ( X10_TEMP132 , RX10_TEMP40 ) ; 
const int X10_TEMP134 = k .f0 ; 
const double X10_TEMP135 = X10_TEMP134 + y0 ; 
const int X10_TEMP136 = 1 ; 
/*UpdatableVariableDeclaration*/double yn = X10_TEMP135 + X10_TEMP136 ; 
const int X10_TEMP139 = k .f0 ; 
const int X10_TEMP140 = 0 ; 
const int X10_TEMP142 = X10_TEMP139 > X10_TEMP140 ; 
if ( X10_TEMP142 ) 
{ const double X10_TEMP153 = 1.0; 
const double X10_TEMP147 = 0.0; 
const double X10_TEMP148 = 0.0; 
const double X10_TEMP149 = 0.0; 
const double X10_TEMP150 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , yt , X10_TEMP147 , X10_TEMP148 , X10_TEMP149 ) ; 
const double X10_TEMP152 = bny * X10_TEMP150 ; 
const double X10_TEMP155 = X10_TEMP153 / X10_TEMP152 ; 
const double X10_TEMP157 = yt + X10_TEMP155 ; 
yt = X10_TEMP157 ; } 

const double X10_TEMP162 = X10Util_minDouble ( yt , any ) ; 
const double X10_TEMP164 = X10Util_maxDouble ( edgely , X10_TEMP162 ) ; 
yt = X10_TEMP164 ; const double X10_TEMP169 = 0.0; 
const double X10_TEMP170 = 0.0; 
const double X10_TEMP171 = 0.0; 
const double X10_TEMP172 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , yt , X10_TEMP169 , X10_TEMP170 , X10_TEMP171 ) ; 
const double X10_TEMP173 = bny * X10_TEMP172 ; 
/*UpdatableVariableDeclaration*/double f = X10_TEMP173 - yn ; 
/*UpdatableVariableDeclaration*/double absf = fabs ( f ) ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP180 = absf >= ERROR ; 

while ( X10_TEMP180 ) 
{ const int X10_TEMP182 = absf < BIG ; 
if ( X10_TEMP182 ) 
{ const double X10_TEMP187 = 0.0; 
const double X10_TEMP188 = 0.0; 
const double X10_TEMP189 = 0.0; 
const double X10_TEMP190 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , yt , X10_TEMP187 , X10_TEMP188 , X10_TEMP189 ) ; 
/*UpdatableVariableDeclaration*/double fp = bny * X10_TEMP190 ; 
yt0 = yt ; const double X10_TEMP194 = f / fp ; 
const double X10_TEMP197 = yt - X10_TEMP194 ; 
const double X10_TEMP199 = X10Util_minDouble ( X10_TEMP197 , any ) ; 
const double X10_TEMP201 = X10Util_maxDouble ( edgely , X10_TEMP199 ) ; 
yt = X10_TEMP201 ; } 
else 
{ const double X10_TEMP202 = 0.0; 
const int X10_TEMP204 = f > X10_TEMP202 ; 
if ( X10_TEMP204 ) 
{ const double X10_TEMP207 = 0.5; 
const double X10_TEMP206 = yt - yt0 ; 
const double X10_TEMP209 = X10_TEMP207 * X10_TEMP206 ; 
const double X10_TEMP211 = yt0 + X10_TEMP209 ; 
yt = X10_TEMP211 ; } 
else 
{ const double X10_TEMP212 = yt + yt ; 
const double X10_TEMP214 = X10_TEMP212 - yt0 ; 
yt = X10_TEMP214 ; } 


} 


const int X10_TEMP216 = i >= MAX_ITER ; 
if ( X10_TEMP216 ) 
{ const char * X10_TEMP218 = "1: Newton iteration max exceeded" ; 
fprintf(stderr, "%s\n" , X10_TEMP218 ) ; 
break ; 
} 
else 
{ const double X10_TEMP223 = 0.0; 
const double X10_TEMP224 = 0.0; 
const double X10_TEMP225 = 0.0; 
const double X10_TEMP226 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , yt , X10_TEMP223 , X10_TEMP224 , X10_TEMP225 ) ; 
const double X10_TEMP227 = bny * X10_TEMP226 ; 
const double X10_TEMP229 = X10_TEMP227 - yn ; 
f = X10_TEMP229 ; const double X10_TEMP232 = fabs ( f ) ; 
absf = X10_TEMP232 ; } 


const int X10_TEMP233 = i ; 
const int X10_TEMP234 = 1 ; 
i = i + X10_TEMP234 ; X10_TEMP180 = absf >= ERROR ; } 

yt0 = yt ; } 

const int X10_TEMP236 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * kc ; 
/*UpdatableVariableDeclaration*/int jc = koff - X10_TEMP236 ; 
/*UpdatableVariableDeclaration*/double xt0 = edgelx ; 
const double X10_TEMP249 = 0.5; 
const double X10_TEMP243 = 0.0; 
const double X10_TEMP244 = 0.0; 
const double X10_TEMP245 = 0.0; 
const double X10_TEMP246 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt0 , X10_TEMP243 , X10_TEMP244 , X10_TEMP245 ) ; 
const double X10_TEMP248 = bnx * X10_TEMP246 ; 
const double X10_TEMP250 = X10_TEMP249 / X10_TEMP248 ; 
/*UpdatableVariableDeclaration*/double xt = xt0 + X10_TEMP250 ; 
const int X10_TEMP255 = 0 ; 
const int X10_TEMP253 = 1 ; 
const int X10_TEMP256 = jc - X10_TEMP253 ; 
struct Region1 X10_TEMP258 = createNewRegion1R ( X10_TEMP255 , X10_TEMP256 ) ; 
const int RX10_TEMP44 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP42 = X10_TEMP258 .regSize ; 
RX10_TEMP42 = RX10_TEMP42 - RX10_TEMP44 ; const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP43 = RX10_TEMP42 + SX10_TEMP12 ; 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < RX10_TEMP43 ; SX10_TEMP13 ++ ) 
{ const int RX10_TEMP41 = SX10_TEMP13 ; 
const int RX10_TEMP45 = RX10_TEMP41 ; 
struct Point1 j = regionOrdinalPoint1 ( X10_TEMP258 , RX10_TEMP45 ) ; 
const int X10_TEMP260 = j .f0 ; 
const double X10_TEMP261 = X10_TEMP260 + x0 ; 
const int X10_TEMP262 = 1 ; 
/*UpdatableVariableDeclaration*/double xn = X10_TEMP261 + X10_TEMP262 ; 
const int X10_TEMP265 = j .f0 ; 
const int X10_TEMP266 = 0 ; 
const int X10_TEMP268 = X10_TEMP265 > X10_TEMP266 ; 
if ( X10_TEMP268 ) 
{ const double X10_TEMP279 = 1.0; 
const double X10_TEMP273 = 0.0; 
const double X10_TEMP274 = 0.0; 
const double X10_TEMP275 = 0.0; 
const double X10_TEMP276 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt , X10_TEMP273 , X10_TEMP274 , X10_TEMP275 ) ; 
const double X10_TEMP278 = bnx * X10_TEMP276 ; 
const double X10_TEMP281 = X10_TEMP279 / X10_TEMP278 ; 
const double X10_TEMP283 = xt + X10_TEMP281 ; 
xt = X10_TEMP283 ; } 

const double X10_TEMP288 = X10Util_minDouble ( xt , anx ) ; 
const double X10_TEMP290 = X10Util_maxDouble ( edgelx , X10_TEMP288 ) ; 
xt = X10_TEMP290 ; const double X10_TEMP295 = 0.0; 
const double X10_TEMP296 = 0.0; 
const double X10_TEMP297 = 0.0; 
const double X10_TEMP298 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , xt , X10_TEMP295 , X10_TEMP296 , X10_TEMP297 ) ; 
const double X10_TEMP299 = bnx * X10_TEMP298 ; 
/*UpdatableVariableDeclaration*/double f = X10_TEMP299 - xn ; 
/*UpdatableVariableDeclaration*/double absf = fabs ( f ) ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP306 = absf >= ERROR ; 

while ( X10_TEMP306 ) 
{ const int X10_TEMP308 = absf < BIG ; 
if ( X10_TEMP308 ) 
{ const double X10_TEMP313 = 0.0; 
const double X10_TEMP314 = 0.0; 
const double X10_TEMP315 = 0.0; 
const double X10_TEMP316 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt , X10_TEMP313 , X10_TEMP314 , X10_TEMP315 ) ; 
/*UpdatableVariableDeclaration*/double fp = bnx * X10_TEMP316 ; 
xt0 = xt ; const double X10_TEMP320 = f / fp ; 
const double X10_TEMP323 = xt - X10_TEMP320 ; 
const double X10_TEMP325 = X10Util_minDouble ( X10_TEMP323 , anx ) ; 
const double X10_TEMP327 = X10Util_maxDouble ( edgelx , X10_TEMP325 ) ; 
xt = X10_TEMP327 ; } 
else 
{ const double X10_TEMP328 = 0.0; 
const int X10_TEMP330 = f > X10_TEMP328 ; 
if ( X10_TEMP330 ) 
{ const double X10_TEMP333 = 0.5; 
const double X10_TEMP332 = xt - xt0 ; 
const double X10_TEMP334 = X10_TEMP333 * X10_TEMP332 ; 
const double X10_TEMP336 = xt0 + X10_TEMP334 ; 
xt = X10_TEMP336 ; } 
else 
{ const double X10_TEMP337 = xt + xt ; 
const double X10_TEMP339 = X10_TEMP337 - xt0 ; 
xt = X10_TEMP339 ; } 


} 


const int X10_TEMP341 = i >= MAX_ITER ; 
if ( X10_TEMP341 ) 
{ const char * X10_TEMP343 = "2: Newton iteration max exceeded" ; 
fprintf(stderr, "%s\n" , X10_TEMP343 ) ; 
break ; 
} 
else 
{ const double X10_TEMP348 = 0.0; 
const double X10_TEMP349 = 0.0; 
const double X10_TEMP350 = 0.0; 
const double X10_TEMP351 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , xt , X10_TEMP348 , X10_TEMP349 , X10_TEMP350 ) ; 
const double X10_TEMP352 = bnx * X10_TEMP351 ; 
const double X10_TEMP354 = X10_TEMP352 - xn ; 
f = X10_TEMP354 ; const double X10_TEMP357 = fabs ( f ) ; 
absf = X10_TEMP357 ; } 


const int X10_TEMP358 = i ; 
const int X10_TEMP359 = 1 ; 
i = i + X10_TEMP359 ; X10_TEMP306 = absf >= ERROR ; } 

xt0 = xt ; } 

const int X10_TEMP361 = kc ; 
const int X10_TEMP362 = 1 ; 
kc = kc + X10_TEMP362 ; const int X10_TEMP369 = 0 ; 
const int X10_TEMP366 = X10Util_minInt ( particlesPerPlace , _LinearESOpenPIC2D_PARTICLE_XDENSITY ) ; 
const int X10_TEMP367 = 1 ; 
const int X10_TEMP370 = X10_TEMP366 - X10_TEMP367 ; 
struct Region1 X10_TEMP372 = createNewRegion1R ( X10_TEMP369 , X10_TEMP370 ) ; 
const int RX10_TEMP50 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP48 = X10_TEMP372 .regSize ; 
RX10_TEMP48 = RX10_TEMP48 - RX10_TEMP50 ; const int SX10_TEMP14 = 1 ; 
const int RX10_TEMP49 = RX10_TEMP48 + SX10_TEMP14 ; 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP49 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP46 = SX10_TEMP15 ; 
const int RX10_TEMP51 = RX10_TEMP46 ; 
struct Point1 RX10_TEMP47 = regionOrdinalPoint1 ( X10_TEMP372 , RX10_TEMP51 ) ; 
const int n = RX10_TEMP47 .f0 ; 
/*UpdatableVariableDeclaration*/int nn = n + koff ; 
/*UpdatableVariableDeclaration*/int k = nn / _LinearESOpenPIC2D_PARTICLE_XDENSITY ; 
/*UpdatableVariableDeclaration*/int j = nn % _LinearESOpenPIC2D_PARTICLE_XDENSITY ; 
const double X10_TEMP376 = j + x0 ; 
const int X10_TEMP377 = 1 ; 
/*UpdatableVariableDeclaration*/double xn = X10_TEMP376 + X10_TEMP377 ; 
const int X10_TEMP379 = 0 ; 
const int X10_TEMP381 = j == X10_TEMP379 ; 
if ( X10_TEMP381 ) 
{ xt0 = edgelx ; const double X10_TEMP393 = 0.5; 
const double X10_TEMP387 = 0.0; 
const double X10_TEMP388 = 0.0; 
const double X10_TEMP389 = 0.0; 
const double X10_TEMP390 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt0 , X10_TEMP387 , X10_TEMP388 , X10_TEMP389 ) ; 
const double X10_TEMP392 = bnx * X10_TEMP390 ; 
const double X10_TEMP394 = X10_TEMP393 / X10_TEMP392 ; 
const double X10_TEMP396 = xt0 + X10_TEMP394 ; 
xt = X10_TEMP396 ; } 
else 
{ const double X10_TEMP407 = 1.0; 
const double X10_TEMP401 = 0.0; 
const double X10_TEMP402 = 0.0; 
const double X10_TEMP403 = 0.0; 
const double X10_TEMP404 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt , X10_TEMP401 , X10_TEMP402 , X10_TEMP403 ) ; 
const double X10_TEMP406 = bnx * X10_TEMP404 ; 
const double X10_TEMP409 = X10_TEMP407 / X10_TEMP406 ; 
const double X10_TEMP411 = xt + X10_TEMP409 ; 
xt = X10_TEMP411 ; } 


const double X10_TEMP416 = X10Util_minDouble ( xt , anx ) ; 
const double X10_TEMP418 = X10Util_maxDouble ( edgelx , X10_TEMP416 ) ; 
xt = X10_TEMP418 ; const double X10_TEMP423 = 0.0; 
const double X10_TEMP424 = 0.0; 
const double X10_TEMP425 = 0.0; 
const double X10_TEMP426 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , xt0 , X10_TEMP423 , X10_TEMP424 , X10_TEMP425 ) ; 
const double X10_TEMP427 = bnx * X10_TEMP426 ; 
/*UpdatableVariableDeclaration*/double f = X10_TEMP427 - xn ; 
/*UpdatableVariableDeclaration*/double absf = fabs ( f ) ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP434 = absf >= ERROR ; 

while ( X10_TEMP434 ) 
{ const int X10_TEMP436 = absf < BIG ; 
if ( X10_TEMP436 ) 
{ const double X10_TEMP441 = 0.0; 
const double X10_TEMP442 = 0.0; 
const double X10_TEMP443 = 0.0; 
const double X10_TEMP444 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , xt , X10_TEMP441 , X10_TEMP442 , X10_TEMP443 ) ; 
/*UpdatableVariableDeclaration*/double fp = bnx * X10_TEMP444 ; 
xt0 = xt ; const double X10_TEMP448 = f / fp ; 
const double X10_TEMP451 = xt - X10_TEMP448 ; 
const double X10_TEMP453 = X10Util_minDouble ( X10_TEMP451 , anx ) ; 
const double X10_TEMP455 = X10Util_maxDouble ( edgelx , X10_TEMP453 ) ; 
xt = X10_TEMP455 ; } 
else 
{ const double X10_TEMP456 = 0.0; 
const int X10_TEMP458 = f > X10_TEMP456 ; 
if ( X10_TEMP458 ) 
{ const double X10_TEMP461 = 0.5; 
const double X10_TEMP460 = xt - xt0 ; 
const double X10_TEMP462 = X10_TEMP461 * X10_TEMP460 ; 
const double X10_TEMP464 = xt0 + X10_TEMP462 ; 
xt = X10_TEMP464 ; } 
else 
{ const double X10_TEMP465 = xt + xt ; 
const double X10_TEMP467 = X10_TEMP465 - xt0 ; 
xt = X10_TEMP467 ; } 


} 


const int X10_TEMP469 = i >= MAX_ITER ; 
if ( X10_TEMP469 ) 
{ const char * X10_TEMP471 = "3: Newton iteration max exceeded" ; 
fprintf(stderr, "%s\n" , X10_TEMP471 ) ; 
break ; 
} 
else 
{ const double X10_TEMP476 = 0.0; 
const double X10_TEMP477 = 0.0; 
const double X10_TEMP478 = 0.0; 
const double X10_TEMP479 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , xt , X10_TEMP476 , X10_TEMP477 , X10_TEMP478 ) ; 
const double X10_TEMP480 = bnx * X10_TEMP479 ; 
const double X10_TEMP482 = X10_TEMP480 - xn ; 
f = X10_TEMP482 ; const double X10_TEMP485 = fabs ( f ) ; 
absf = X10_TEMP485 ; } 


const int X10_TEMP486 = i ; 
const int X10_TEMP487 = 1 ; 
i = i + X10_TEMP487 ; X10_TEMP434 = absf >= ERROR ; } 

const int X10_TEMP490 = n + noff ; 
const double X10_TEMP492 = xt ; 
struct Point2 RX10_TEMP52  ; 
Point2_Point2( &RX10_TEMP52/*Assignment*/, X10_TEMP490 , X ) ; 
struct Dist2 RX10_TEMP53 = result .distValue ; 
struct Region2 RX10_TEMP54 = RX10_TEMP53 .dReg ; 
const int RX10_TEMP55 = searchPointInRegion2 ( RX10_TEMP54 , RX10_TEMP52 ) ; 
const int RX10_TEMP56 = 0 ; 
const int RX10_TEMP57 = RX10_TEMP55 < RX10_TEMP56 ; 
if ( RX10_TEMP57 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP58 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP58 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP59 = getPlaceFromDist2 ( RX10_TEMP53 , RX10_TEMP55 ) ; 
const int RX10_TEMP61 = /* here  */ 0 ; 
const int RX10_TEMP62 = RX10_TEMP59 != RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP60 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP60 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP55 , X10_TEMP492 ) ; 
} 

const int X10_TEMP496 = 0 ; 
const int X10_TEMP494 = 1 ; 
const int X10_TEMP497 = particlesPerPlace - X10_TEMP494 ; 
struct Region1 X10_TEMP499 = createNewRegion1R ( X10_TEMP496 , X10_TEMP497 ) ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP65 = X10_TEMP499 .regSize ; 
RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67 ; const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP66 = RX10_TEMP65 + SX10_TEMP16 ; 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP66 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP63 = SX10_TEMP17 ; 
const int RX10_TEMP68 = RX10_TEMP63 ; 
struct Point1 RX10_TEMP64 = regionOrdinalPoint1 ( X10_TEMP499 , RX10_TEMP68 ) ; 
const int n = RX10_TEMP64 .f0 ; 
/*UpdatableVariableDeclaration*/int nn = n + koff ; 
const int X10_TEMP501 = nn / _LinearESOpenPIC2D_PARTICLE_XDENSITY ; 
const int X10_TEMP502 = 1 ; 
/*UpdatableVariableDeclaration*/int k = X10_TEMP501 + X10_TEMP502 ; 
const int X10_TEMP504 = _LinearESOpenPIC2D_PARTICLE_XDENSITY * k ; 
/*UpdatableVariableDeclaration*/int j = nn - X10_TEMP504 ; 
const int X10_TEMP507 = n % _LinearESOpenPIC2D_PARTICLE_XDENSITY ; 
nn = X10_TEMP507 ; const int X10_TEMP509 = k == kc ; 
if ( X10_TEMP509 ) 
{ /*UpdatableVariableDeclaration*/double yn = k + y0 ; 
const int X10_TEMP511 = 1 ; 
const int X10_TEMP513 = k > X10_TEMP511 ; 
if ( X10_TEMP513 ) 
{ const double X10_TEMP524 = 1.0; 
const double X10_TEMP518 = 0.0; 
const double X10_TEMP519 = 0.0; 
const double X10_TEMP520 = 0.0; 
const double X10_TEMP521 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , yt , X10_TEMP518 , X10_TEMP519 , X10_TEMP520 ) ; 
const double X10_TEMP523 = bny * X10_TEMP521 ; 
const double X10_TEMP526 = X10_TEMP524 / X10_TEMP523 ; 
const double X10_TEMP528 = yt + X10_TEMP526 ; 
yt = X10_TEMP528 ; } 

const double X10_TEMP533 = X10Util_minDouble ( yt , any ) ; 
const double X10_TEMP535 = X10Util_maxDouble ( edgelx , X10_TEMP533 ) ; 
yt = X10_TEMP535 ; const double X10_TEMP540 = 0.0; 
const double X10_TEMP541 = 0.0; 
const double X10_TEMP542 = 0.0; 
const double X10_TEMP543 = LinearESOpenPIC2D_linearDensityIntegral ( X10_TEMP0 , yt , X10_TEMP540 , X10_TEMP541 , X10_TEMP542 ) ; 
const double X10_TEMP544 = bny * X10_TEMP543 ; 
/*UpdatableVariableDeclaration*/double f = X10_TEMP544 - yn ; 
/*UpdatableVariableDeclaration*/double absf = fabs ( f ) ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP551 = absf >= ERROR ; 

while ( X10_TEMP551 ) 
{ const int X10_TEMP553 = absf < BIG ; 
if ( X10_TEMP553 ) 
{ const double X10_TEMP558 = 0.0; 
const double X10_TEMP559 = 0.0; 
const double X10_TEMP560 = 0.0; 
const double X10_TEMP561 = LinearESOpenPIC2D_linearDensityFn ( X10_TEMP0 , yt , X10_TEMP558 , X10_TEMP559 , X10_TEMP560 ) ; 
/*UpdatableVariableDeclaration*/double fp = bny * X10_TEMP561 ; 
yt0 = yt ; const double X10_TEMP565 = f / fp ; 
const double X10_TEMP568 = yt - X10_TEMP565 ; 
const double X10_TEMP570 = X10Util_minDouble ( X10_TEMP568 , any ) ; 
const double X10_TEMP572 = X10Util_maxDouble ( edgely , X10_TEMP570 ) ; 
yt = X10_TEMP572 ; } 
else 
{ const double X10_TEMP573 = 0.0; 
const int X10_TEMP575 = f > X10_TEMP573 ; 
if ( X10_TEMP575 ) 
{ const double X10_TEMP578 = 0.5; 
const double X10_TEMP577 = yt - yt0 ; 
const double X10_TEMP579 = X10_TEMP578 * X10_TEMP577 ; 
const double X10_TEMP581 = yt0 + X10_TEMP579 ; 
yt = X10_TEMP581 ; } 
else 
{ const double X10_TEMP582 = yt + yt ; 
const double X10_TEMP584 = X10_TEMP582 - yt0 ; 
yt = X10_TEMP584 ; } 


} 


const int X10_TEMP586 = i >= MAX_ITER ; 
if ( X10_TEMP586 ) 
{ const char * X10_TEMP588 = "4: Newton iteration max exceeded" ; 
fprintf(stderr, "%s\n" , X10_TEMP588 ) ; 
break ; 
} 
else 
{ const double X10_TEMP593 = 0.0; 
const double X10_TEMP594 = 0.0; 
const double X10_TEMP595 = 0.0; 
const double X10_TEMP596 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , yt , X10_TEMP593 , X10_TEMP594 , X10_TEMP595 ) ; 
const double X10_TEMP597 = bny * X10_TEMP596 ; 
const double X10_TEMP599 = X10_TEMP597 - yn ; 
f = X10_TEMP599 ; const double X10_TEMP602 = fabs ( f ) ; 
absf = X10_TEMP602 ; } 


const int X10_TEMP603 = i ; 
const int X10_TEMP604 = 1 ; 
i = i + X10_TEMP604 ; X10_TEMP551 = absf >= ERROR ; } 

const int X10_TEMP605 = kc ; 
const int X10_TEMP606 = 1 ; 
kc = kc + X10_TEMP606 ; yt0 = yt ; } 

const int X10_TEMP610 = n + noff ; 
const int X10_TEMP613 = nn + noff ; 
struct Point2 RX10_TEMP69  ; 
Point2_Point2( &RX10_TEMP69/*Assignment*/, X10_TEMP613 , X ) ; 
struct Dist2 RX10_TEMP70 = result .distValue ; 
struct Region2 RX10_TEMP71 = RX10_TEMP70 .dReg ; 
const int RX10_TEMP72 = searchPointInRegion2 ( RX10_TEMP71 , RX10_TEMP69 ) ; 
const int RX10_TEMP73 = 0 ; 
const int RX10_TEMP74 = RX10_TEMP72 < RX10_TEMP73 ; 
if ( RX10_TEMP74 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP75 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP75 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP76 = getPlaceFromDist2 ( RX10_TEMP70 , RX10_TEMP72 ) ; 
const int RX10_TEMP78 = /* here  */ 0 ; 
const int RX10_TEMP79 = RX10_TEMP76 != RX10_TEMP78 ; 
if ( RX10_TEMP79 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP77 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP77 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP80 = getRefArrayValue2double ( result , RX10_TEMP72 ) ; 
const double X10_TEMP615 = RX10_TEMP80 ; 
const double X10_TEMP616 = X10_TEMP615 ; 
struct Point2 RX10_TEMP81  ; 
Point2_Point2( &RX10_TEMP81/*Assignment*/, X10_TEMP610 , X ) ; 
struct Dist2 RX10_TEMP82 = result .distValue ; 
struct Region2 RX10_TEMP83 = RX10_TEMP82 .dReg ; 
const int RX10_TEMP84 = searchPointInRegion2 ( RX10_TEMP83 , RX10_TEMP81 ) ; 
const int RX10_TEMP85 = 0 ; 
const int RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85 ; 
if ( RX10_TEMP86 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP87 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP87 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP88 = getPlaceFromDist2 ( RX10_TEMP82 , RX10_TEMP84 ) ; 
const int RX10_TEMP90 = /* here  */ 0 ; 
const int RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90 ; 
if ( RX10_TEMP91 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP89 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP89 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP84 , X10_TEMP616 ) ; 
const int X10_TEMP619 = n + noff ; 
const double X10_TEMP621 = yt ; 
struct Point2 RX10_TEMP92  ; 
Point2_Point2( &RX10_TEMP92/*Assignment*/, X10_TEMP619 , Y ) ; 
struct Dist2 RX10_TEMP93 = result .distValue ; 
struct Region2 RX10_TEMP94 = RX10_TEMP93 .dReg ; 
const int RX10_TEMP95 = searchPointInRegion2 ( RX10_TEMP94 , RX10_TEMP92 ) ; 
const int RX10_TEMP96 = 0 ; 
const int RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96 ; 
if ( RX10_TEMP97 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP98 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP98 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP99 = getPlaceFromDist2 ( RX10_TEMP93 , RX10_TEMP95 ) ; 
const int RX10_TEMP101 = /* here  */ 0 ; 
const int RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101 ; 
if ( RX10_TEMP102 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP100 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP100 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP95 , X10_TEMP621 ) ; 
} 

} 

} 

} 

return result ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_genParticleVelocity (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const int n ) 
{ const int X = 0 ; 
const int Y = 1 ; 
const int X10_TEMP6 = 0 ; 
const int X10_TEMP4 = 1 ; 
const int X10_TEMP7 = n - X10_TEMP4 ; 
struct Region1 X10_TEMP14 = createNewRegion1R ( X10_TEMP6 , X10_TEMP7 ) ; 
const int X10_TEMP11 = 0 ; 
const int X10_TEMP12 = 1 ; 
struct Region1 X10_TEMP15 = createNewRegion1R ( X10_TEMP11 , X10_TEMP12 ) ; 
struct Dist2 dResult = X10Util_distBlockStar2 ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Region2 RX10_TEMP0 = dResult .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dResult , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dResult , RX10_TEMP16 ) ; 
struct doubleRefArray2 result = RX10_TEMP19 ; 
/* finish  */ 
{ const int X10_TEMP21 = 0 ; 
const int X10_TEMP19 = 1 ; 
const int X10_TEMP22 = _LinearESOpenPIC2D_PARTICLE_YDENSITY - X10_TEMP19 ; 
struct Region1 X10_TEMP24 = createNewRegion1R ( X10_TEMP21 , X10_TEMP22 ) ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = X10_TEMP24 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 RX10_TEMP21 = regionOrdinalPoint1 ( X10_TEMP24 , RX10_TEMP25 ) ; 
const int i = RX10_TEMP21 .f0 ; 
const int offset = _LinearESOpenPIC2D_PARTICLE_XDENSITY * i ; 
const int X10_TEMP29 = 0 ; 
const int X10_TEMP27 = 1 ; 
const int X10_TEMP30 = _LinearESOpenPIC2D_PARTICLE_XDENSITY - X10_TEMP27 ; 
struct Region1 X10_TEMP32 = createNewRegion1R ( X10_TEMP29 , X10_TEMP30 ) ; 
const int RX10_TEMP30 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP28 = X10_TEMP32 .regSize ; 
RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP28 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP29 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP11 ; 
const int RX10_TEMP31 = RX10_TEMP26 ; 
struct Point1 RX10_TEMP27 = regionOrdinalPoint1 ( X10_TEMP32 , RX10_TEMP31 ) ; 
const int j = RX10_TEMP27 .f0 ; 
const int idx = j + offset ; 
struct Random * X10_TEMP34 = X10_TEMP0 ->r ; 
const double X10_TEMP35 = Random_nextNormal ( X10_TEMP34 ) ; 
const double vx = _LinearESOpenPIC2D_THERMAL_XVELOCITY * X10_TEMP35 ; 
struct Random * X10_TEMP37 = X10_TEMP0 ->r ; 
const double X10_TEMP38 = Random_nextNormal ( X10_TEMP37 ) ; 
const double vy = _LinearESOpenPIC2D_THERMAL_YVELOCITY * X10_TEMP38 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP42 = 0 ; 
struct Point2 RX10_TEMP32  ; 
Point2_Point2( &RX10_TEMP32/*Assignment*/, idx , X10_TEMP42 ) ; 
struct Region2 RX10_TEMP33 = dResult .dReg ; 
const int RX10_TEMP34 = searchPointInRegion2 ( RX10_TEMP33 , RX10_TEMP32 ) ; 
const int RX10_TEMP35 = 0 ; 
const int RX10_TEMP36 = RX10_TEMP34 < RX10_TEMP35 ; 
if ( RX10_TEMP36 ) 
{ const char * RX10_TEMP37 = "Point RX10_TEMP32 not found in the distribution dResult." ; 
fprintf(stderr, RX10_TEMP37 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP38 = getPlaceFromDist2 ( dResult , RX10_TEMP34 ) ; 
const int X10_TEMP44 = RX10_TEMP38 ; 
/* async ( X10_TEMP44 )  */ 
{ const double X10_TEMP48 = vx ; 
struct Point2 RX10_TEMP39  ; 
Point2_Point2( &RX10_TEMP39/*Assignment*/, idx , X ) ; 
struct Dist2 RX10_TEMP40 = result .distValue ; 
struct Region2 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion2 ( RX10_TEMP41 , RX10_TEMP39 ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist2 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP42 , X10_TEMP48 ) ; 
const double X10_TEMP52 = vy ; 
struct Point2 RX10_TEMP50  ; 
Point2_Point2( &RX10_TEMP50/*Assignment*/, idx , Y ) ; 
struct Dist2 RX10_TEMP51 = result .distValue ; 
struct Region2 RX10_TEMP52 = RX10_TEMP51 .dReg ; 
const int RX10_TEMP53 = searchPointInRegion2 ( RX10_TEMP52 , RX10_TEMP50 ) ; 
const int RX10_TEMP54 = 0 ; 
const int RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54 ; 
if ( RX10_TEMP55 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP56 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP56 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP57 = getPlaceFromDist2 ( RX10_TEMP51 , RX10_TEMP53 ) ; 
const int RX10_TEMP59 = /* here  */ 0 ; 
const int RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP58 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP58 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP53 , X10_TEMP52 ) ; 
} 

} 

} 

} 

const char * X10_TEMP54 = "Init: correcting drift" ; 
printf( "%s\n",X10_TEMP54 ) ; 
struct Dist1 X10_TEMP55 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP55 ; 
struct Region1 RX10_TEMP61 = dUnique .dReg ; 
const int RX10_TEMP62 = 0 ; 
const int RX10_TEMP63 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP64 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP63 ; const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP65 = RX10_TEMP64 + SX10_TEMP12 ; 
const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP66 = RX10_TEMP64 + SX10_TEMP13 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP67 = (intStub *)calloc(RX10_TEMP66,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP65 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP68 = SX10_TEMP15 ; 
const int RX10_TEMP69 = /* here  */ 0 ; 
const int RX10_TEMP70 = RX10_TEMP68 ; 
const int RX10_TEMP71 = /* place.places ( RX10_TEMP70 )  */ 0 
; 
const int RX10_TEMP72 = getDistLocalCount1 ( dUnique , RX10_TEMP70 ) ; 
const int RX10_TEMP73 = RX10_TEMP72 - RX10_TEMP63 ; 
/* async ( RX10_TEMP71 )  */ 
{ const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP75 = RX10_TEMP73 + SX10_TEMP16 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP17 = (int *)calloc(RX10_TEMP75,sizeof( int )); 
for ( int SX10_TEMP18 = 0 ; SX10_TEMP18 < RX10_TEMP75 ; SX10_TEMP18 ++ ) 
{ const int RX10_TEMP74 = SX10_TEMP18 ; 
const int X10_TEMP58 = 0 ; 
SX10_TEMP17 [ RX10_TEMP74 ] = X10_TEMP58 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP76 = SX10_TEMP17 ; 
struct intStub RX10_TEMP77  ; 
intStub_intStub( &RX10_TEMP77/*Assignment*/, RX10_TEMP76 ) ; 
/* async ( RX10_TEMP69 )  */ 
{ RX10_TEMP67 [ RX10_TEMP68 ] = RX10_TEMP77 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP19 = (intStub *)calloc(RX10_TEMP65,sizeof( intStub )); 
for ( int SX10_TEMP20 = 0 ; SX10_TEMP20 < RX10_TEMP65 ; SX10_TEMP20 ++ ) 
{ const int RX10_TEMP80 = SX10_TEMP20 ; 
struct intStub RX10_TEMP79 = RX10_TEMP67 [ RX10_TEMP80 ] 
; 
SX10_TEMP19 [ RX10_TEMP80 ] = RX10_TEMP79 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP78 = SX10_TEMP19 ; 
struct intRefArray1 RX10_TEMP81  ; 
intRefArray1_intRefArray1( &RX10_TEMP81/*Assignment*/, dUnique , RX10_TEMP78 ) ; 
struct intRefArray1 numParticles = RX10_TEMP81 ; 
struct Region1 RX10_TEMP82 = dUnique .dReg ; 
const int RX10_TEMP83 = 0 ; 
const int RX10_TEMP84 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP85 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP85 = RX10_TEMP85 - RX10_TEMP84 ; const int SX10_TEMP21 = 1 ; 
const int RX10_TEMP86 = RX10_TEMP85 + SX10_TEMP21 ; 
const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP87 = RX10_TEMP85 + SX10_TEMP22 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP88 = (doubleStub *)calloc(RX10_TEMP87,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP86 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP89 = SX10_TEMP24 ; 
const int RX10_TEMP90 = /* here  */ 0 ; 
const int RX10_TEMP91 = RX10_TEMP89 ; 
const int RX10_TEMP92 = /* place.places ( RX10_TEMP91 )  */ 0 
; 
const int RX10_TEMP93 = getDistLocalCount1 ( dUnique , RX10_TEMP91 ) ; 
const int RX10_TEMP94 = RX10_TEMP93 - RX10_TEMP84 ; 
/* async ( RX10_TEMP92 )  */ 
{ const int SX10_TEMP25 = 1 ; 
const int RX10_TEMP96 = RX10_TEMP94 + SX10_TEMP25 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP26 = (double *)calloc(RX10_TEMP96,sizeof( double )); 
for ( int SX10_TEMP27 = 0 ; SX10_TEMP27 < RX10_TEMP96 ; SX10_TEMP27 ++ ) 
{ const int RX10_TEMP95 = SX10_TEMP27 ; 
const double X10_TEMP61 = 0.0; 
SX10_TEMP26 [ RX10_TEMP95 ] = X10_TEMP61 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP97 = SX10_TEMP26 ; 
struct doubleStub RX10_TEMP98  ; 
doubleStub_doubleStub( &RX10_TEMP98/*Assignment*/, RX10_TEMP97 ) ; 
/* async ( RX10_TEMP90 )  */ 
{ RX10_TEMP88 [ RX10_TEMP89 ] = RX10_TEMP98 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP28 = (doubleStub *)calloc(RX10_TEMP86,sizeof( doubleStub )); 
for ( int SX10_TEMP29 = 0 ; SX10_TEMP29 < RX10_TEMP86 ; SX10_TEMP29 ++ ) 
{ const int RX10_TEMP101 = SX10_TEMP29 ; 
struct doubleStub RX10_TEMP100 = RX10_TEMP88 [ RX10_TEMP101 ] 
; 
SX10_TEMP28 [ RX10_TEMP101 ] = RX10_TEMP100 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP99 = SX10_TEMP28 ; 
struct doubleRefArray1 RX10_TEMP102  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP102/*Assignment*/, dUnique , RX10_TEMP99 ) ; 
struct doubleRefArray1 sumX = RX10_TEMP102 ; 
struct Region1 RX10_TEMP103 = dUnique .dReg ; 
const int RX10_TEMP104 = 0 ; 
const int RX10_TEMP105 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP106 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP106 = RX10_TEMP106 - RX10_TEMP105 ; const int SX10_TEMP30 = 1 ; 
const int RX10_TEMP107 = RX10_TEMP106 + SX10_TEMP30 ; 
const int SX10_TEMP31 = 1 ; 
const int RX10_TEMP108 = RX10_TEMP106 + SX10_TEMP31 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP109 = (doubleStub *)calloc(RX10_TEMP108,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP33 = 0 ; SX10_TEMP33 < RX10_TEMP107 ; SX10_TEMP33 ++ ) 
{ const int RX10_TEMP110 = SX10_TEMP33 ; 
const int RX10_TEMP111 = /* here  */ 0 ; 
const int RX10_TEMP112 = RX10_TEMP110 ; 
const int RX10_TEMP113 = /* place.places ( RX10_TEMP112 )  */ 0 
; 
const int RX10_TEMP114 = getDistLocalCount1 ( dUnique , RX10_TEMP112 ) ; 
const int RX10_TEMP115 = RX10_TEMP114 - RX10_TEMP105 ; 
/* async ( RX10_TEMP113 )  */ 
{ const int SX10_TEMP34 = 1 ; 
const int RX10_TEMP117 = RX10_TEMP115 + SX10_TEMP34 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP35 = (double *)calloc(RX10_TEMP117,sizeof( double )); 
for ( int SX10_TEMP36 = 0 ; SX10_TEMP36 < RX10_TEMP117 ; SX10_TEMP36 ++ ) 
{ const int RX10_TEMP116 = SX10_TEMP36 ; 
const double X10_TEMP64 = 0.0; 
SX10_TEMP35 [ RX10_TEMP116 ] = X10_TEMP64 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP118 = SX10_TEMP35 ; 
struct doubleStub RX10_TEMP119  ; 
doubleStub_doubleStub( &RX10_TEMP119/*Assignment*/, RX10_TEMP118 ) ; 
/* async ( RX10_TEMP111 )  */ 
{ RX10_TEMP109 [ RX10_TEMP110 ] = RX10_TEMP119 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP37 = (doubleStub *)calloc(RX10_TEMP107,sizeof( doubleStub )); 
for ( int SX10_TEMP38 = 0 ; SX10_TEMP38 < RX10_TEMP107 ; SX10_TEMP38 ++ ) 
{ const int RX10_TEMP122 = SX10_TEMP38 ; 
struct doubleStub RX10_TEMP121 = RX10_TEMP109 [ RX10_TEMP122 ] 
; 
SX10_TEMP37 [ RX10_TEMP122 ] = RX10_TEMP121 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP120 = SX10_TEMP37 ; 
struct doubleRefArray1 RX10_TEMP123  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP123/*Assignment*/, dUnique , RX10_TEMP120 ) ; 
struct doubleRefArray1 sumY = RX10_TEMP123 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP67 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP125 = X10_TEMP67 .dReg ; 
const int RX10_TEMP128 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP126 = RX10_TEMP125 .regSize ; 
RX10_TEMP126 = RX10_TEMP126 - RX10_TEMP128 ; const int SX10_TEMP39 = 1 ; 
const int RX10_TEMP127 = RX10_TEMP126 + SX10_TEMP39 ; 
for ( int SX10_TEMP40 = 0 ; SX10_TEMP40 < RX10_TEMP127 ; SX10_TEMP40 ++ ) 
{ const int RX10_TEMP124 = SX10_TEMP40 ; 
const int RX10_TEMP129 = RX10_TEMP124 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP125 , RX10_TEMP129 ) ; 
struct Region1 RX10_TEMP130 = X10_TEMP67 .dReg ; 
const int RX10_TEMP131 = searchPointInRegion1 ( RX10_TEMP130 , pl ) ; 
const int RX10_TEMP132 = 0 ; 
const int RX10_TEMP133 = RX10_TEMP131 < RX10_TEMP132 ; 
if ( RX10_TEMP133 ) 
{ const char * RX10_TEMP134 = "Point pl not found in the distribution X10_TEMP67." ; 
fprintf(stderr, RX10_TEMP134 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP135 = getPlaceFromDist1 ( X10_TEMP67 , RX10_TEMP131 ) ; 
const int X10_TEMP68 = RX10_TEMP135 ; 
/* async ( X10_TEMP68 )  */ 
{ const int X10_TEMP71 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dResult , X10_TEMP71 ) ; 
struct Region2 X10_TEMP77 = createNewRegion2AR ( rLocal1 , X , X ) ; 
const int RX10_TEMP139 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP137 = X10_TEMP77 .regSize ; 
RX10_TEMP137 = RX10_TEMP137 - RX10_TEMP139 ; const int SX10_TEMP41 = 1 ; 
const int RX10_TEMP138 = RX10_TEMP137 + SX10_TEMP41 ; 
for ( int SX10_TEMP42 = 0 ; SX10_TEMP42 < RX10_TEMP138 ; SX10_TEMP42 ++ ) 
{ const int RX10_TEMP136 = SX10_TEMP42 ; 
const int RX10_TEMP140 = RX10_TEMP136 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP77 , RX10_TEMP140 ) ; 
struct Dist1 RX10_TEMP141 = sumX .distValue ; 
struct Region1 RX10_TEMP142 = RX10_TEMP141 .dReg ; 
const int RX10_TEMP143 = searchPointInRegion1 ( RX10_TEMP142 , pl ) ; 
const int RX10_TEMP144 = 0 ; 
const int RX10_TEMP145 = RX10_TEMP143 < RX10_TEMP144 ; 
if ( RX10_TEMP145 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP146 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP146 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP147 = getPlaceFromDist1 ( RX10_TEMP141 , RX10_TEMP143 ) ; 
const int RX10_TEMP149 = /* here  */ 0 ; 
const int RX10_TEMP150 = RX10_TEMP147 != RX10_TEMP149 ; 
if ( RX10_TEMP150 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP148 = "Bad place access for array sumX" ; 
fprintf(stderr, RX10_TEMP148 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP151 = getRefArrayValue1double ( sumX , RX10_TEMP143 ) ; 
const double X10_TEMP81 = RX10_TEMP151 ; 
struct Dist2 RX10_TEMP152 = result .distValue ; 
struct Region2 RX10_TEMP153 = RX10_TEMP152 .dReg ; 
const int RX10_TEMP154 = searchPointInRegion2 ( RX10_TEMP153 , pt ) ; 
const int RX10_TEMP155 = 0 ; 
const int RX10_TEMP156 = RX10_TEMP154 < RX10_TEMP155 ; 
if ( RX10_TEMP156 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP157 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP157 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP158 = getPlaceFromDist2 ( RX10_TEMP152 , RX10_TEMP154 ) ; 
const int RX10_TEMP160 = /* here  */ 0 ; 
const int RX10_TEMP161 = RX10_TEMP158 != RX10_TEMP160 ; 
if ( RX10_TEMP161 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP159 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP159 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP162 = getRefArrayValue2double ( result , RX10_TEMP154 ) ; 
const double X10_TEMP82 = RX10_TEMP162 ; 
const double X10_TEMP84 = X10_TEMP81 + X10_TEMP82 ; 
const double X10_TEMP85 = X10_TEMP84 ; 
struct Dist1 RX10_TEMP163 = sumX .distValue ; 
struct Region1 RX10_TEMP164 = RX10_TEMP163 .dReg ; 
const int RX10_TEMP165 = searchPointInRegion1 ( RX10_TEMP164 , pl ) ; 
const int RX10_TEMP166 = 0 ; 
const int RX10_TEMP167 = RX10_TEMP165 < RX10_TEMP166 ; 
if ( RX10_TEMP167 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP168 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP168 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP169 = getPlaceFromDist1 ( RX10_TEMP163 , RX10_TEMP165 ) ; 
const int RX10_TEMP171 = /* here  */ 0 ; 
const int RX10_TEMP172 = RX10_TEMP169 != RX10_TEMP171 ; 
if ( RX10_TEMP172 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP170 = "Bad place access for array sumX" ; 
fprintf(stderr, RX10_TEMP170 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( sumX , RX10_TEMP165 , X10_TEMP85 ) ; 
struct Dist1 RX10_TEMP173 = numParticles .distValue ; 
struct Region1 RX10_TEMP174 = RX10_TEMP173 .dReg ; 
const int RX10_TEMP175 = searchPointInRegion1 ( RX10_TEMP174 , pl ) ; 
const int RX10_TEMP176 = 0 ; 
const int RX10_TEMP177 = RX10_TEMP175 < RX10_TEMP176 ; 
if ( RX10_TEMP177 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP178 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP178 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP179 = getPlaceFromDist1 ( RX10_TEMP173 , RX10_TEMP175 ) ; 
const int RX10_TEMP181 = /* here  */ 0 ; 
const int RX10_TEMP182 = RX10_TEMP179 != RX10_TEMP181 ; 
if ( RX10_TEMP182 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP180 = "Bad place access for array numParticles" ; 
fprintf(stderr, RX10_TEMP180 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP183 = getRefArrayValue1int ( numParticles , RX10_TEMP175 ) ; 
const int X10_TEMP88 = RX10_TEMP183 ; 
const int X10_TEMP89 = 1 ; 
const int X10_TEMP91 = X10_TEMP88 + X10_TEMP89 ; 
const int X10_TEMP92 = X10_TEMP91 ; 
struct Dist1 RX10_TEMP184 = numParticles .distValue ; 
struct Region1 RX10_TEMP185 = RX10_TEMP184 .dReg ; 
const int RX10_TEMP186 = searchPointInRegion1 ( RX10_TEMP185 , pl ) ; 
const int RX10_TEMP187 = 0 ; 
const int RX10_TEMP188 = RX10_TEMP186 < RX10_TEMP187 ; 
if ( RX10_TEMP188 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP189 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP189 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP190 = getPlaceFromDist1 ( RX10_TEMP184 , RX10_TEMP186 ) ; 
const int RX10_TEMP192 = /* here  */ 0 ; 
const int RX10_TEMP193 = RX10_TEMP190 != RX10_TEMP192 ; 
if ( RX10_TEMP193 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP191 = "Bad place access for array numParticles" ; 
fprintf(stderr, RX10_TEMP191 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( numParticles , RX10_TEMP186 , X10_TEMP92 ) ; 
} 

struct Region2 X10_TEMP97 = createNewRegion2AR ( rLocal1 , Y , Y ) ; 
const int RX10_TEMP197 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP195 = X10_TEMP97 .regSize ; 
RX10_TEMP195 = RX10_TEMP195 - RX10_TEMP197 ; const int SX10_TEMP43 = 1 ; 
const int RX10_TEMP196 = RX10_TEMP195 + SX10_TEMP43 ; 
for ( int SX10_TEMP44 = 0 ; SX10_TEMP44 < RX10_TEMP196 ; SX10_TEMP44 ++ ) 
{ const int RX10_TEMP194 = SX10_TEMP44 ; 
const int RX10_TEMP198 = RX10_TEMP194 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP97 , RX10_TEMP198 ) ; 
struct Dist1 RX10_TEMP199 = sumY .distValue ; 
struct Region1 RX10_TEMP200 = RX10_TEMP199 .dReg ; 
const int RX10_TEMP201 = searchPointInRegion1 ( RX10_TEMP200 , pl ) ; 
const int RX10_TEMP202 = 0 ; 
const int RX10_TEMP203 = RX10_TEMP201 < RX10_TEMP202 ; 
if ( RX10_TEMP203 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP204 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP204 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP205 = getPlaceFromDist1 ( RX10_TEMP199 , RX10_TEMP201 ) ; 
const int RX10_TEMP207 = /* here  */ 0 ; 
const int RX10_TEMP208 = RX10_TEMP205 != RX10_TEMP207 ; 
if ( RX10_TEMP208 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP206 = "Bad place access for array sumY" ; 
fprintf(stderr, RX10_TEMP206 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP209 = getRefArrayValue1double ( sumY , RX10_TEMP201 ) ; 
const double X10_TEMP101 = RX10_TEMP209 ; 
struct Dist2 RX10_TEMP210 = result .distValue ; 
struct Region2 RX10_TEMP211 = RX10_TEMP210 .dReg ; 
const int RX10_TEMP212 = searchPointInRegion2 ( RX10_TEMP211 , pt ) ; 
const int RX10_TEMP213 = 0 ; 
const int RX10_TEMP214 = RX10_TEMP212 < RX10_TEMP213 ; 
if ( RX10_TEMP214 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP215 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP215 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP216 = getPlaceFromDist2 ( RX10_TEMP210 , RX10_TEMP212 ) ; 
const int RX10_TEMP218 = /* here  */ 0 ; 
const int RX10_TEMP219 = RX10_TEMP216 != RX10_TEMP218 ; 
if ( RX10_TEMP219 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP217 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP217 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP220 = getRefArrayValue2double ( result , RX10_TEMP212 ) ; 
const double X10_TEMP102 = RX10_TEMP220 ; 
const double X10_TEMP104 = X10_TEMP101 + X10_TEMP102 ; 
const double X10_TEMP105 = X10_TEMP104 ; 
struct Dist1 RX10_TEMP221 = sumY .distValue ; 
struct Region1 RX10_TEMP222 = RX10_TEMP221 .dReg ; 
const int RX10_TEMP223 = searchPointInRegion1 ( RX10_TEMP222 , pl ) ; 
const int RX10_TEMP224 = 0 ; 
const int RX10_TEMP225 = RX10_TEMP223 < RX10_TEMP224 ; 
if ( RX10_TEMP225 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP226 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP226 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP227 = getPlaceFromDist1 ( RX10_TEMP221 , RX10_TEMP223 ) ; 
const int RX10_TEMP229 = /* here  */ 0 ; 
const int RX10_TEMP230 = RX10_TEMP227 != RX10_TEMP229 ; 
if ( RX10_TEMP230 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP228 = "Bad place access for array sumY" ; 
fprintf(stderr, RX10_TEMP228 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( sumY , RX10_TEMP223 , X10_TEMP105 ) ; 
} 

} 

} 

} 

const int totalParticles = intrefArraySum1 ( numParticles ) ; 
const double X10_TEMP107 = doublerefArraySum1 ( sumX ) ; 
const double driftX = X10_TEMP107 / totalParticles ; 
const double X10_TEMP109 = doublerefArraySum1 ( sumY ) ; 
const double driftY = X10_TEMP109 / totalParticles ; 
const char * X10_TEMP112 = "Init: updating with drift" ; 
printf( "%s\n",X10_TEMP112 ) ; 
/* finish  */ 
{ struct Dist1 X10_TEMP114 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP232 = X10_TEMP114 .dReg ; 
const int RX10_TEMP235 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP233 = RX10_TEMP232 .regSize ; 
RX10_TEMP233 = RX10_TEMP233 - RX10_TEMP235 ; const int SX10_TEMP45 = 1 ; 
const int RX10_TEMP234 = RX10_TEMP233 + SX10_TEMP45 ; 
for ( int SX10_TEMP46 = 0 ; SX10_TEMP46 < RX10_TEMP234 ; SX10_TEMP46 ++ ) 
{ const int RX10_TEMP231 = SX10_TEMP46 ; 
const int RX10_TEMP236 = RX10_TEMP231 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP232 , RX10_TEMP236 ) ; 
struct Region1 RX10_TEMP237 = X10_TEMP114 .dReg ; 
const int RX10_TEMP238 = searchPointInRegion1 ( RX10_TEMP237 , pl ) ; 
const int RX10_TEMP239 = 0 ; 
const int RX10_TEMP240 = RX10_TEMP238 < RX10_TEMP239 ; 
if ( RX10_TEMP240 ) 
{ const char * RX10_TEMP241 = "Point pl not found in the distribution X10_TEMP114." ; 
fprintf(stderr, RX10_TEMP241 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP242 = getPlaceFromDist1 ( X10_TEMP114 , RX10_TEMP238 ) ; 
const int X10_TEMP115 = RX10_TEMP242 ; 
/* async ( X10_TEMP115 )  */ 
{ const int X10_TEMP118 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dResult , X10_TEMP118 ) ; 
struct Region2 X10_TEMP124 = createNewRegion2AR ( rLocal1 , X , X ) ; 
const int X10_TEMP125 = /* here  */ 0 ; 
const int RX10_TEMP246 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP244 = X10_TEMP124 .regSize ; 
RX10_TEMP244 = RX10_TEMP244 - RX10_TEMP246 ; const int SX10_TEMP47 = 1 ; 
const int RX10_TEMP245 = RX10_TEMP244 + SX10_TEMP47 ; 
for ( int SX10_TEMP48 = 0 ; SX10_TEMP48 < RX10_TEMP245 ; SX10_TEMP48 ++ ) 
{ const int RX10_TEMP243 = SX10_TEMP48 ; 
const int RX10_TEMP247 = RX10_TEMP243 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP124 , RX10_TEMP247 ) ; 
/* async ( X10_TEMP125 )  */ 
{ struct Dist2 RX10_TEMP248 = result .distValue ; 
struct Region2 RX10_TEMP249 = RX10_TEMP248 .dReg ; 
const int RX10_TEMP250 = searchPointInRegion2 ( RX10_TEMP249 , pt ) ; 
const int RX10_TEMP251 = 0 ; 
const int RX10_TEMP252 = RX10_TEMP250 < RX10_TEMP251 ; 
if ( RX10_TEMP252 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP253 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP253 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP254 = getPlaceFromDist2 ( RX10_TEMP248 , RX10_TEMP250 ) ; 
const int RX10_TEMP256 = /* here  */ 0 ; 
const int RX10_TEMP257 = RX10_TEMP254 != RX10_TEMP256 ; 
if ( RX10_TEMP257 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP255 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP255 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP258 = getRefArrayValue2double ( result , RX10_TEMP250 ) ; 
const double X10_TEMP128 = RX10_TEMP258 ; 
const double X10_TEMP130 = X10_TEMP128 - driftX ; 
const double X10_TEMP131 = X10_TEMP130 ; 
struct Dist2 RX10_TEMP259 = result .distValue ; 
struct Region2 RX10_TEMP260 = RX10_TEMP259 .dReg ; 
const int RX10_TEMP261 = searchPointInRegion2 ( RX10_TEMP260 , pt ) ; 
const int RX10_TEMP262 = 0 ; 
const int RX10_TEMP263 = RX10_TEMP261 < RX10_TEMP262 ; 
if ( RX10_TEMP263 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP264 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP264 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP265 = getPlaceFromDist2 ( RX10_TEMP259 , RX10_TEMP261 ) ; 
const int RX10_TEMP267 = /* here  */ 0 ; 
const int RX10_TEMP268 = RX10_TEMP265 != RX10_TEMP267 ; 
if ( RX10_TEMP268 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP266 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP266 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP261 , X10_TEMP131 ) ; 
} 

} 

struct Region2 X10_TEMP136 = createNewRegion2AR ( rLocal1 , Y , Y ) ; 
const int X10_TEMP137 = /* here  */ 0 ; 
const int RX10_TEMP272 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP270 = X10_TEMP136 .regSize ; 
RX10_TEMP270 = RX10_TEMP270 - RX10_TEMP272 ; const int SX10_TEMP49 = 1 ; 
const int RX10_TEMP271 = RX10_TEMP270 + SX10_TEMP49 ; 
for ( int SX10_TEMP50 = 0 ; SX10_TEMP50 < RX10_TEMP271 ; SX10_TEMP50 ++ ) 
{ const int RX10_TEMP269 = SX10_TEMP50 ; 
const int RX10_TEMP273 = RX10_TEMP269 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP136 , RX10_TEMP273 ) ; 
/* async ( X10_TEMP137 )  */ 
{ struct Dist2 RX10_TEMP274 = result .distValue ; 
struct Region2 RX10_TEMP275 = RX10_TEMP274 .dReg ; 
const int RX10_TEMP276 = searchPointInRegion2 ( RX10_TEMP275 , pt ) ; 
const int RX10_TEMP277 = 0 ; 
const int RX10_TEMP278 = RX10_TEMP276 < RX10_TEMP277 ; 
if ( RX10_TEMP278 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP279 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP279 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP280 = getPlaceFromDist2 ( RX10_TEMP274 , RX10_TEMP276 ) ; 
const int RX10_TEMP282 = /* here  */ 0 ; 
const int RX10_TEMP283 = RX10_TEMP280 != RX10_TEMP282 ; 
if ( RX10_TEMP283 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP281 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP281 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP284 = getRefArrayValue2double ( result , RX10_TEMP276 ) ; 
const double X10_TEMP140 = RX10_TEMP284 ; 
const double X10_TEMP142 = X10_TEMP140 - driftY ; 
const double X10_TEMP143 = X10_TEMP142 ; 
struct Dist2 RX10_TEMP285 = result .distValue ; 
struct Region2 RX10_TEMP286 = RX10_TEMP285 .dReg ; 
const int RX10_TEMP287 = searchPointInRegion2 ( RX10_TEMP286 , pt ) ; 
const int RX10_TEMP288 = 0 ; 
const int RX10_TEMP289 = RX10_TEMP287 < RX10_TEMP288 ; 
if ( RX10_TEMP289 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP290 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP290 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP291 = getPlaceFromDist2 ( RX10_TEMP285 , RX10_TEMP287 ) ; 
const int RX10_TEMP293 = /* here  */ 0 ; 
const int RX10_TEMP294 = RX10_TEMP291 != RX10_TEMP293 ; 
if ( RX10_TEMP294 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP292 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP292 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP287 , X10_TEMP143 ) ; 
} 

} 

} 

} 

} 

const int X10_TEMP145 = totalParticles != _LinearESOpenPIC2D_NPARTICLES ; 
if ( X10_TEMP145 ) 
{ const char * X10_TEMP146 = "Velocity distribution truncated, number of " ; 
const char * X10_TEMP147 = "particles = " ; 
/*ASSIGNMENT STRING*/
 char * tempC58 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC58, "%s%s",X10_TEMP146,X10_TEMP147);
const char * X10_TEMP148 = tempC58;; 
/*ASSIGNMENT STRING*/
 char * tempC59 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC59, "%s%d",X10_TEMP148,totalParticles);
const char * X10_TEMP150 = tempC59;; 
fprintf(stderr, "%s\n" , X10_TEMP150 ) ; 
} 

return result ; 
} 

ParticleRefArray1 /*static*/LinearESOpenPIC2D_genParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const int n ,  struct doubleRefArray2 const position ,  struct doubleRefArray2 const velocity ) 
{ const int X10_TEMP4 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP5 = n - X10_TEMP2 ; 
struct Region1 X10_TEMP7 = createNewRegion1R ( X10_TEMP4 , X10_TEMP5 ) ; 
struct Dist1 X10_TEMP8 = getBlockDist1 ( X10_TEMP7 ) ; 
struct Dist1 dResult = X10_TEMP8 ; 
struct Region1 RX10_TEMP0 = dResult .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP6 = (ParticleStub *)calloc(RX10_TEMP5,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dResult , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
struct Dist1 RX10_TEMP13 = restrictDist1 ( dResult , RX10_TEMP10 ) ; 
struct Region1 RX10_TEMP14 = RX10_TEMP13 .dReg ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP66 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Particle * const SX10_TEMP5 = (Particle *)calloc(RX10_TEMP66,sizeof( Particle )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP66 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP6 ; 
const int RX10_TEMP17 = RX10_TEMP15 ; 
struct Point1 RX10_TEMP16 = regionOrdinalPoint1 ( RX10_TEMP14 , RX10_TEMP17 ) ; 
const int i = RX10_TEMP16 .f0 ; 
const int X10_TEMP12 = 0 ; 
struct Point2 RX10_TEMP18  ; 
Point2_Point2( &RX10_TEMP18/*Assignment*/, i , X10_TEMP12 ) ; 
struct Dist2 RX10_TEMP19 = position .distValue ; 
struct Region2 RX10_TEMP20 = RX10_TEMP19 .dReg ; 
const int RX10_TEMP21 = searchPointInRegion2 ( RX10_TEMP20 , RX10_TEMP18 ) ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 < RX10_TEMP22 ; 
if ( RX10_TEMP23 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP25 = getPlaceFromDist2 ( RX10_TEMP19 , RX10_TEMP21 ) ; 
const int RX10_TEMP27 = /* here  */ 0 ; 
const int RX10_TEMP28 = RX10_TEMP25 != RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP26 = "Bad place access for array position" ; 
fprintf(stderr, RX10_TEMP26 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP29 = getRefArrayValue2double ( position , RX10_TEMP21 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP26 = RX10_TEMP29 ; 
const int X10_TEMP16 = 1 ; 
struct Point2 RX10_TEMP30  ; 
Point2_Point2( &RX10_TEMP30/*Assignment*/, i , X10_TEMP16 ) ; 
struct Dist2 RX10_TEMP31 = position .distValue ; 
struct Region2 RX10_TEMP32 = RX10_TEMP31 .dReg ; 
const int RX10_TEMP33 = searchPointInRegion2 ( RX10_TEMP32 , RX10_TEMP30 ) ; 
const int RX10_TEMP34 = 0 ; 
const int RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34 ; 
if ( RX10_TEMP35 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP37 = getPlaceFromDist2 ( RX10_TEMP31 , RX10_TEMP33 ) ; 
const int RX10_TEMP39 = /* here  */ 0 ; 
const int RX10_TEMP40 = RX10_TEMP37 != RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Bad place access for array position" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP41 = getRefArrayValue2double ( position , RX10_TEMP33 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP27 = RX10_TEMP41 ; 
const int X10_TEMP20 = 0 ; 
struct Point2 RX10_TEMP42  ; 
Point2_Point2( &RX10_TEMP42/*Assignment*/, i , X10_TEMP20 ) ; 
struct Dist2 RX10_TEMP43 = velocity .distValue ; 
struct Region2 RX10_TEMP44 = RX10_TEMP43 .dReg ; 
const int RX10_TEMP45 = searchPointInRegion2 ( RX10_TEMP44 , RX10_TEMP42 ) ; 
const int RX10_TEMP46 = 0 ; 
const int RX10_TEMP47 = RX10_TEMP45 < RX10_TEMP46 ; 
if ( RX10_TEMP47 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP49 = getPlaceFromDist2 ( RX10_TEMP43 , RX10_TEMP45 ) ; 
const int RX10_TEMP51 = /* here  */ 0 ; 
const int RX10_TEMP52 = RX10_TEMP49 != RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Bad place access for array velocity" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP53 = getRefArrayValue2double ( velocity , RX10_TEMP45 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP28 = RX10_TEMP53 ; 
const int X10_TEMP24 = 1 ; 
struct Point2 RX10_TEMP54  ; 
Point2_Point2( &RX10_TEMP54/*Assignment*/, i , X10_TEMP24 ) ; 
struct Dist2 RX10_TEMP55 = velocity .distValue ; 
struct Region2 RX10_TEMP56 = RX10_TEMP55 .dReg ; 
const int RX10_TEMP57 = searchPointInRegion2 ( RX10_TEMP56 , RX10_TEMP54 ) ; 
const int RX10_TEMP58 = 0 ; 
const int RX10_TEMP59 = RX10_TEMP57 < RX10_TEMP58 ; 
if ( RX10_TEMP59 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP60 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP60 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP61 = getPlaceFromDist2 ( RX10_TEMP55 , RX10_TEMP57 ) ; 
const int RX10_TEMP63 = /* here  */ 0 ; 
const int RX10_TEMP64 = RX10_TEMP61 != RX10_TEMP63 ; 
if ( RX10_TEMP64 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP62 = "Bad place access for array velocity" ; 
fprintf(stderr, RX10_TEMP62 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP65 = getRefArrayValue2double ( velocity , RX10_TEMP57 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP29 = RX10_TEMP65 ; 
struct Particle X10_TEMP31  ; 
Particle_Particle_4( &X10_TEMP31/*Assignment*/, X10_TEMP26 , X10_TEMP27 , X10_TEMP28 , X10_TEMP29 ) ; 
SX10_TEMP5 [ RX10_TEMP15 ] = X10_TEMP31 ; 
} 

/*Updatable ARRAY*/ struct Particle * const RX10_TEMP67 = SX10_TEMP5 ; 
struct ParticleStub RX10_TEMP68  ; 
ParticleStub_ParticleStub( &RX10_TEMP68/*Assignment*/, RX10_TEMP67 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP68 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP7 = (ParticleStub *)calloc(RX10_TEMP4,sizeof( ParticleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP71 = SX10_TEMP8 ; 
struct ParticleStub RX10_TEMP70 = RX10_TEMP6 [ RX10_TEMP71 ] 
; 
SX10_TEMP7 [ RX10_TEMP71 ] = RX10_TEMP70 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP69 = SX10_TEMP7 ; 
struct ParticleRefArray1 RX10_TEMP72  ; 
ParticleRefArray1_ParticleRefArray1( &RX10_TEMP72/*Assignment*/, dResult , RX10_TEMP69 ) ; 
struct ParticleRefArray1 X10_TEMP33 = RX10_TEMP72 ; 
return X10_TEMP33 ; 
} 

Dist2 /*static*/LinearESOpenPIC2D_genInitialDist (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ) 
{ const int MAX_PLACES = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP4 = _LinearESOpenPIC2D_BOUNDARY_CONDITION == X10_TEMP2 ; 
const int X10_TEMP5 = X10_TEMP4 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = 0.0; 
if ( X10_TEMP5 ) 
{ X10_TEMP8 = 1.0; } 

const double X10_TEMP9 = X10_TEMP8 ; 
const double edgely = X10_TEMP9 ; 
const double y = _LinearESOpenPIC2D_YLENGTH ; 
const double X10_TEMP15 = 0.0; 
const double X10_TEMP16 = 0.0; 
const double X10_TEMP17 = 0.0; 
const double y0 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , edgely , X10_TEMP15 , X10_TEMP16 , X10_TEMP17 ) ; 
const double X10_TEMP23 = y - edgely ; 
const double X10_TEMP24 = 0.0; 
const double X10_TEMP25 = 0.0; 
const double X10_TEMP26 = 0.0; 
const double X10_TEMP27 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , X10_TEMP23 , X10_TEMP24 , X10_TEMP25 , X10_TEMP26 ) ; 
const double X10_TEMP29 = X10_TEMP27 - y0 ; 
const double nParticlesAve = X10_TEMP29 / MAX_PLACES ; 
struct Dist1 X10_TEMP31 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP31 ; 
struct Region1 RX10_TEMP0 = dUnique .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct Region1Stub * const RX10_TEMP6 = (Region1Stub *)calloc(RX10_TEMP5,sizeof( Region1Stub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dUnique , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Region1 * const RX10_TEMP14 = (Region1 *)calloc(RX10_TEMP13,sizeof( Region1 )); 
struct Region1Stub RX10_TEMP15  ; 
Region1Stub_Region1Stub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct Region1Stub * const SX10_TEMP6 = (Region1Stub *)calloc(RX10_TEMP4,sizeof( Region1Stub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct Region1Stub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct Region1Stub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct Region1RefArray1 RX10_TEMP19  ; 
Region1RefArray1_Region1RefArray1( &RX10_TEMP19/*Assignment*/, dUnique , RX10_TEMP16 ) ; 
struct Region1RefArray1 X10_TEMP33 = RX10_TEMP19 ; 
struct Region1RefArray1 yRegions = X10_TEMP33 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP36 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP36 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP27 ) ; 
const int X10_TEMP37 = RX10_TEMP31 ; 
/* async ( X10_TEMP37 )  */ 
{ const double X10_TEMP39 = pl .f0 ; 
const double anpl = X10_TEMP39 * nParticlesAve ; 
const int X10_TEMP42 = pl .f0 ; 
const int X10_TEMP43 = 1 ; 
const int X10_TEMP45 = X10_TEMP42 + X10_TEMP43 ; 
const double anpr = X10_TEMP45 * nParticlesAve ; 
/*UpdatableVariableDeclaration*/double total = 0.0; 
/*UpdatableVariableDeclaration*/double tmp = 0.0; 
/*UpdatableVariableDeclaration*/double y1 = edgely ; 
/*UpdatableVariableDeclaration*/int X10_TEMP50 = 0 ; 
do 
{ tmp = total ; const double X10_TEMP56 = 0.0; 
const double X10_TEMP57 = 0.0; 
const double X10_TEMP58 = 0.0; 
const double X10_TEMP59 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , y1 , X10_TEMP56 , X10_TEMP57 , X10_TEMP58 ) ; 
const double X10_TEMP61 = X10_TEMP59 - y0 ; 
total = X10_TEMP61 ; const double X10_TEMP62 = 1.0; 
const double X10_TEMP64 = y1 + X10_TEMP62 ; 
y1 = X10_TEMP64 ; const int X10_TEMP65 = total < anpl ; 
const int X10_TEMP66 = y1 <= y ; 
X10_TEMP50 = X10_TEMP65 && X10_TEMP66 ; } 
while ( X10_TEMP50 ) ; 
const int X10_TEMP69 = total > tmp ; 
const int X10_TEMP70 = X10_TEMP69 ; 
const double X10_TEMP71 = 2.0; 
const double X10_TEMP73 = y1 - X10_TEMP71 ; 
const double X10_TEMP75 = anpl - tmp ; 
const double X10_TEMP77 = total - tmp ; 
const double X10_TEMP78 = X10_TEMP75 / X10_TEMP77 ; 
const double X10_TEMP80 = X10_TEMP73 + X10_TEMP78 ; 
const double X10_TEMP82 = 1.0; 
const double X10_TEMP84 = y1 - X10_TEMP82 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP86 = X10_TEMP84 ; 
if ( X10_TEMP70 ) 
{ X10_TEMP86 = X10_TEMP80 ; } 

const double X10_TEMP87 = X10_TEMP86 ; 
const double X10_TEMP88 = X10_TEMP87 ; 
/*UpdatableVariableDeclaration*/double lb = X10_TEMP88 ; 
const int X10_TEMP90 = /* here  */ 0 ; 
const int X10_TEMP92 = /* X10_TEMP90 . isFirst ( )  */ 1 ; 
if ( X10_TEMP92 ) 
{ const double X10_TEMP94 = 0.0; 
lb = X10_TEMP94 ; } 

/*UpdatableVariableDeclaration*/int X10_TEMP95 = 0 ; 
do 
{ tmp = total ; const double X10_TEMP101 = 0.0; 
const double X10_TEMP102 = 0.0; 
const double X10_TEMP103 = 0.0; 
const double X10_TEMP104 = LinearESOpenPIC2D_linearDensityFnIntegral ( X10_TEMP0 , y1 , X10_TEMP101 , X10_TEMP102 , X10_TEMP103 ) ; 
const double X10_TEMP106 = X10_TEMP104 - y0 ; 
total = X10_TEMP106 ; const double X10_TEMP107 = 1.0; 
const double X10_TEMP109 = y1 + X10_TEMP107 ; 
y1 = X10_TEMP109 ; const int X10_TEMP110 = total < anpr ; 
const int X10_TEMP111 = y1 <= y ; 
X10_TEMP95 = X10_TEMP110 && X10_TEMP111 ; } 
while ( X10_TEMP95 ) ; 
const double X10_TEMP113 = 2.0; 
const double X10_TEMP115 = y1 - X10_TEMP113 ; 
const double X10_TEMP117 = anpr - tmp ; 
const double X10_TEMP119 = total - tmp ; 
const double X10_TEMP120 = X10_TEMP117 / X10_TEMP119 ; 
/*UpdatableVariableDeclaration*/double ub = X10_TEMP115 + X10_TEMP120 ; 
const int X10_TEMP122 = /* here  */ 0 ; 
const int X10_TEMP124 = /* X10_TEMP122 . isLast ( )  */ 1 ; 
if ( X10_TEMP124 ) 
{ ub = y ; } 

const double X10_TEMP127 = 0.5; 
const double X10_TEMP129 = lb + X10_TEMP127 ; 
const int X10_TEMP139 = /*casting*/( int ) X10_TEMP129 ; 
const double X10_TEMP131 = 0.5; 
const double X10_TEMP133 = ub + X10_TEMP131 ; 
const int X10_TEMP134 = /*casting*/( int ) X10_TEMP133 ; 
const int X10_TEMP135 = 1 ; 
const int X10_TEMP137 = X10_TEMP134 - X10_TEMP135 ; 
struct Region1 X10_TEMP141 = createNewRegion1R ( X10_TEMP139 , X10_TEMP137 ) ; 
struct Region1 X10_TEMP142 = X10_TEMP141 ; 
struct Dist1 RX10_TEMP32 = yRegions .distValue ; 
struct Region1 RX10_TEMP33 = RX10_TEMP32 .dReg ; 
const int RX10_TEMP34 = searchPointInRegion1 ( RX10_TEMP33 , pl ) ; 
const int RX10_TEMP35 = 0 ; 
const int RX10_TEMP36 = RX10_TEMP34 < RX10_TEMP35 ; 
if ( RX10_TEMP36 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP37 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP37 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP38 = getPlaceFromDist1 ( RX10_TEMP32 , RX10_TEMP34 ) ; 
const int RX10_TEMP40 = /* here  */ 0 ; 
const int RX10_TEMP41 = RX10_TEMP38 != RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP39 = "Bad place access for array yRegions" ; 
fprintf(stderr, RX10_TEMP39 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Region1 ( yRegions , RX10_TEMP34 , X10_TEMP142 ) ; 
} 

} 

} 

const int pHere = /* here  */ 0 ; 
const int X10_TEMP147 = 0 ; 
const int X10_TEMP145 = 1 ; 
const int X10_TEMP148 = MAX_PLACES - X10_TEMP145 ; 
struct Region1 X10_TEMP149 = createNewRegion1R ( X10_TEMP147 , X10_TEMP148 ) ; 
const int X10_TEMP150 = /* here  */ 0 ; 
struct Dist1 X10_TEMP152 = getPlaceDist1 ( X10_TEMP149 , X10_TEMP150 ) ; 
struct Dist1 dPlace = X10_TEMP152 ; 
struct Region1 RX10_TEMP42 = dPlace .dReg ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP45 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP45 + SX10_TEMP10 ; 
const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP45 + SX10_TEMP11 ; 
/*Updatable ARRAY*/ struct Region1Stub * const RX10_TEMP48 = (Region1Stub *)calloc(RX10_TEMP47,sizeof( Region1Stub )); 
/* finish  */ 
{ for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < RX10_TEMP46 ; SX10_TEMP13 ++ ) 
{ const int RX10_TEMP49 = SX10_TEMP13 ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 ; 
const int RX10_TEMP52 = /* place.places ( RX10_TEMP51 )  */ 0 
; 
const int RX10_TEMP53 = getDistLocalCount1 ( dPlace , RX10_TEMP51 ) ; 
const int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44 ; 
/* async ( RX10_TEMP52 )  */ 
{ const int SX10_TEMP14 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP54 + SX10_TEMP14 ; 
/*Updatable ARRAY*/ struct Region1 * const RX10_TEMP56 = (Region1 *)calloc(RX10_TEMP55,sizeof( Region1 )); 
struct Region1Stub RX10_TEMP57  ; 
Region1Stub_Region1Stub( &RX10_TEMP57/*Assignment*/, RX10_TEMP56 ) ; 
/* async ( RX10_TEMP50 )  */ 
{ RX10_TEMP48 [ RX10_TEMP49 ] = RX10_TEMP57 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct Region1Stub * const SX10_TEMP16 = (Region1Stub *)calloc(RX10_TEMP46,sizeof( Region1Stub )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP46 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP60 = SX10_TEMP17 ; 
struct Region1Stub RX10_TEMP59 = RX10_TEMP48 [ RX10_TEMP60 ] 
; 
SX10_TEMP16 [ RX10_TEMP60 ] = RX10_TEMP59 ; 
} 

/*Updatable ARRAY*/ struct Region1Stub * const RX10_TEMP58 = SX10_TEMP16 ; 
struct Region1RefArray1 RX10_TEMP61  ; 
Region1RefArray1_Region1RefArray1( &RX10_TEMP61/*Assignment*/, dPlace , RX10_TEMP58 ) ; 
struct Region1RefArray1 X10_TEMP154 = RX10_TEMP61 ; 
struct Region1RefArray1 rBuffer = X10_TEMP154 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP157 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP63 = X10_TEMP157 .dReg ; 
const int RX10_TEMP66 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP64 = RX10_TEMP63 .regSize ; 
RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP65 = RX10_TEMP64 + SX10_TEMP18 ; 
for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP65 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP19 ; 
const int RX10_TEMP67 = RX10_TEMP62 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP63 , RX10_TEMP67 ) ; 
struct Region1 RX10_TEMP68 = X10_TEMP157 .dReg ; 
const int RX10_TEMP69 = searchPointInRegion1 ( RX10_TEMP68 , pl ) ; 
const int RX10_TEMP70 = 0 ; 
const int RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70 ; 
if ( RX10_TEMP71 ) 
{ const char * RX10_TEMP72 = "Point pl not found in the distribution X10_TEMP157." ; 
fprintf(stderr, RX10_TEMP72 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP73 = getPlaceFromDist1 ( X10_TEMP157 , RX10_TEMP69 ) ; 
const int X10_TEMP158 = RX10_TEMP73 ; 
/* async ( X10_TEMP158 )  */ 
{ struct Dist1 RX10_TEMP74 = yRegions .distValue ; 
struct Region1 RX10_TEMP75 = RX10_TEMP74 .dReg ; 
const int RX10_TEMP76 = searchPointInRegion1 ( RX10_TEMP75 , pl ) ; 
const int RX10_TEMP77 = 0 ; 
const int RX10_TEMP78 = RX10_TEMP76 < RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP79 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP79 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP80 = getPlaceFromDist1 ( RX10_TEMP74 , RX10_TEMP76 ) ; 
const int RX10_TEMP82 = /* here  */ 0 ; 
const int RX10_TEMP83 = RX10_TEMP80 != RX10_TEMP82 ; 
if ( RX10_TEMP83 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP81 = "Bad place access for array yRegions" ; 
fprintf(stderr, RX10_TEMP81 ) ; 
exit(EXIT_FAILURE);
} 

struct Region1 RX10_TEMP84 = getRefArrayValue1Region1 ( yRegions , RX10_TEMP76 ) ; 
struct Region1 X10_TEMP160 = RX10_TEMP84 ; 
struct Region1 r = X10_TEMP160 ; 
/* async ( pHere )  */ 
{ struct Region1 X10_TEMP165 = r ; 
struct Dist1 RX10_TEMP85 = rBuffer .distValue ; 
struct Region1 RX10_TEMP86 = RX10_TEMP85 .dReg ; 
const int RX10_TEMP87 = searchPointInRegion1 ( RX10_TEMP86 , pl ) ; 
const int RX10_TEMP88 = 0 ; 
const int RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88 ; 
if ( RX10_TEMP89 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP90 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP90 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP91 = getPlaceFromDist1 ( RX10_TEMP85 , RX10_TEMP87 ) ; 
const int RX10_TEMP93 = /* here  */ 0 ; 
const int RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP92 = "Bad place access for array rBuffer" ; 
fprintf(stderr, RX10_TEMP92 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Region1 ( rBuffer , RX10_TEMP87 , X10_TEMP165 ) ; 
} 

} 

} 

} 

const int X10_TEMP166 = 0 ; 
const int X10_TEMP167 = 1 ; 
const int X10_TEMP168 = X10_TEMP166 - X10_TEMP167 ; 
struct Region2 X10_TEMP169 = createNewRegion2RR ( X10_TEMP166 , X10_TEMP168 , X10_TEMP166 , X10_TEMP168 ) ; 
const int X10_TEMP170 = /* here  */ 0 ; 
struct Dist2 X10_TEMP172 = getPlaceDist2 ( X10_TEMP169 , X10_TEMP170 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP172 ; 
struct Dist1 X10_TEMP175 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP96 = X10_TEMP175 .dReg ; 
const int RX10_TEMP99 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP97 = RX10_TEMP96 .regSize ; 
RX10_TEMP97 = RX10_TEMP97 - RX10_TEMP99 ; const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP98 = RX10_TEMP97 + SX10_TEMP20 ; 
for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP98 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP95 = SX10_TEMP21 ; 
const int RX10_TEMP100 = RX10_TEMP95 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP96 , RX10_TEMP100 ) ; 
struct Dist1 X10_TEMP176 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP101 = X10_TEMP176 .dReg ; 
const int RX10_TEMP102 = searchPointInRegion1 ( RX10_TEMP101 , pl ) ; 
const int RX10_TEMP103 = 0 ; 
const int RX10_TEMP104 = RX10_TEMP102 < RX10_TEMP103 ; 
if ( RX10_TEMP104 ) 
{ const char * RX10_TEMP105 = "Point pl not found in the distribution X10_TEMP176." ; 
fprintf(stderr, RX10_TEMP105 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP106 = getPlaceFromDist1 ( X10_TEMP176 , RX10_TEMP102 ) ; 
const int p = RX10_TEMP106 ; 
struct Dist1 RX10_TEMP107 = rBuffer .distValue ; 
struct Region1 RX10_TEMP108 = RX10_TEMP107 .dReg ; 
const int RX10_TEMP109 = searchPointInRegion1 ( RX10_TEMP108 , pl ) ; 
const int RX10_TEMP110 = 0 ; 
const int RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP112 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP112 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP113 = getPlaceFromDist1 ( RX10_TEMP107 , RX10_TEMP109 ) ; 
const int RX10_TEMP115 = /* here  */ 0 ; 
const int RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115 ; 
if ( RX10_TEMP116 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP114 = "Bad place access for array rBuffer" ; 
fprintf(stderr, RX10_TEMP114 ) ; 
exit(EXIT_FAILURE);
} 

struct Region1 RX10_TEMP117 = getRefArrayValue1Region1 ( rBuffer , RX10_TEMP109 ) ; 
struct Region1 X10_TEMP180 = RX10_TEMP117 ; 
struct Region1 ry = X10_TEMP180 ; 
const int X10_TEMP185 = 0 ; 
struct Region2 X10_TEMP186 = createNewRegion2AR ( ry , X10_TEMP185 , _LinearESOpenPIC2D_XLENGTH ) ; 
struct Dist2 X10_TEMP188 = getPlaceDist2 ( X10_TEMP186 , p ) ; 
struct Dist2 dLocal = X10_TEMP188 ; 
struct Dist2 X10_TEMP191 = unionDist2 ( dResult , dLocal ) ; 
dResult = X10_TEMP191 ; } 

return dResult ; 
} 

double /*static*/LinearESOpenPIC2D_linearDensityFn (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const double x , const double anlx , const double anxi , const double shift ) 
{ const double X10_TEMP4 = 1.0; 
const double X10_TEMP1 = x * anxi ; 
const double X10_TEMP3 = X10_TEMP1 - shift ; 
const double X10_TEMP5 = anlx * X10_TEMP3 ; 
const double result = X10_TEMP4 + X10_TEMP5 ; 
const double X10_TEMP7 = 0.0; 
const int X10_TEMP9 = result < X10_TEMP7 ; 
if ( X10_TEMP9 ) 
{ const char * X10_TEMP10 = "Linear Density Error: result = " ; 
/*ASSIGNMENT STRING*/
 char * tempC60 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC60, "%s%f",X10_TEMP10,result);
const char * X10_TEMP12 = tempC60;; 
fprintf(stderr, "%s\n" , X10_TEMP12 ) ; 
} 

return result ; 
} 

double /*static*/LinearESOpenPIC2D_linearDensityFnIntegral (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const double x , const double anlx , const double anxi , const double shift ) 
{ /*UpdatableVariableDeclaration*/double result = 0.0; 
const double X10_TEMP2 = 0.0; 
const int X10_TEMP4 = anxi == X10_TEMP2 ; 
if ( X10_TEMP4 ) 
{ result = x ; } 
else 
{ const double X10_TEMP6 = 0.5; 
const double X10_TEMP7 = X10_TEMP6 * anlx ; 
const double X10_TEMP13 = X10_TEMP7 * x ; 
const double X10_TEMP9 = x * anxi ; 
const double X10_TEMP8 = 2.0; 
const double X10_TEMP10 = X10_TEMP8 * shift ; 
const double X10_TEMP12 = X10_TEMP9 - X10_TEMP10 ; 
const double X10_TEMP14 = X10_TEMP13 * X10_TEMP12 ; 
const double X10_TEMP16 = x + X10_TEMP14 ; 
result = X10_TEMP16 ; } 


const double X10_TEMP17 = 0.0; 
const int X10_TEMP19 = result < X10_TEMP17 ; 
if ( X10_TEMP19 ) 
{ const char * X10_TEMP20 = "Linear Density Integral Error: " ; 
const char * X10_TEMP21 = "result = " ; 
/*ASSIGNMENT STRING*/
 char * tempC61 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC61, "%s%s",X10_TEMP20,X10_TEMP21);
const char * X10_TEMP22 = tempC61;; 
/*ASSIGNMENT STRING*/
 char * tempC62 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC62, "%s%f",X10_TEMP22,result);
const char * X10_TEMP24 = tempC62;; 
fprintf(stderr, "%s\n" , X10_TEMP24 ) ; 
} 

return result ; 
} 

doubleRefArray1 /*static*/LinearESOpenPIC2D_stepTime (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const ionBackground ) 
{ /*UpdatableVariableDeclaration*/long long time1 = getTIME( ) 
; 
/*UpdatableVariableDeclaration*/long long time2 = 0 ; 
const double CHARGE = _LinearESOpenPIC2D_ELECTRON_CHARGE ; 
struct Dist2 RX10_TEMP0 = ionBackground .distValue ; 
struct Dist2 dIonBG = RX10_TEMP0 ; 
struct doubleRefArray2 chargeDensityGuards = LinearESOpenPIC2D_makeGuards ( X10_TEMP0 , dIonBG ) ; 
struct Region2 RX10_TEMP1 = dIonBG .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount2 ( dIonBG , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP15 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP15,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP15 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP6 ; 
const double X10_TEMP8 = 0.0; 
SX10_TEMP5 [ RX10_TEMP14 ] = X10_TEMP8 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP16 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP17  ; 
doubleStub_doubleStub( &RX10_TEMP17/*Assignment*/, RX10_TEMP16 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP17 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP5 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP19 = RX10_TEMP7 [ RX10_TEMP20 ] 
; 
SX10_TEMP7 [ RX10_TEMP20 ] = RX10_TEMP19 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleRefArray2 RX10_TEMP21  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP21/*Assignment*/, dIonBG , RX10_TEMP18 ) ; 
struct doubleRefArray2 X10_TEMP9 = RX10_TEMP21 ; 
struct doubleRefArray2 chargeDensity = X10_TEMP9 ; 
struct ParticleRefArray1 X10_TEMP15 = X10_TEMP0 ->particles ; 
LinearESOpenPIC2D_depositCharge ( X10_TEMP0 , X10_TEMP15 , chargeDensity , chargeDensityGuards , CHARGE ) ; 
/* finish  */ 
{ struct Region2 RX10_TEMP23 = dIonBG .dReg ; 
const int RX10_TEMP26 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP24 = RX10_TEMP23 .regSize ; 
RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP26 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP25 = RX10_TEMP24 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP25 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP22 = SX10_TEMP10 ; 
const int RX10_TEMP27 = RX10_TEMP22 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP23 , RX10_TEMP27 ) ; 
struct Region2 RX10_TEMP28 = dIonBG .dReg ; 
const int RX10_TEMP29 = searchPointInRegion2 ( RX10_TEMP28 , pt ) ; 
const int RX10_TEMP30 = 0 ; 
const int RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30 ; 
if ( RX10_TEMP31 ) 
{ const char * RX10_TEMP32 = "Point pt not found in the distribution dIonBG." ; 
fprintf(stderr, RX10_TEMP32 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP33 = getPlaceFromDist2 ( dIonBG , RX10_TEMP29 ) ; 
const int X10_TEMP17 = RX10_TEMP33 ; 
/* async ( X10_TEMP17 )  */ 
{ struct Dist2 RX10_TEMP34 = chargeDensity .distValue ; 
struct Region2 RX10_TEMP35 = RX10_TEMP34 .dReg ; 
const int RX10_TEMP36 = searchPointInRegion2 ( RX10_TEMP35 , pt ) ; 
const int RX10_TEMP37 = 0 ; 
const int RX10_TEMP38 = RX10_TEMP36 < RX10_TEMP37 ; 
if ( RX10_TEMP38 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP39 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP39 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP40 = getPlaceFromDist2 ( RX10_TEMP34 , RX10_TEMP36 ) ; 
const int RX10_TEMP42 = /* here  */ 0 ; 
const int RX10_TEMP43 = RX10_TEMP40 != RX10_TEMP42 ; 
if ( RX10_TEMP43 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP41 = "Bad place access for array chargeDensity" ; 
fprintf(stderr, RX10_TEMP41 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP44 = getRefArrayValue2double ( chargeDensity , RX10_TEMP36 ) ; 
const double X10_TEMP21 = RX10_TEMP44 ; 
struct Dist2 RX10_TEMP45 = ionBackground .distValue ; 
struct Region2 RX10_TEMP46 = RX10_TEMP45 .dReg ; 
const int RX10_TEMP47 = searchPointInRegion2 ( RX10_TEMP46 , pt ) ; 
const int RX10_TEMP48 = 0 ; 
const int RX10_TEMP49 = RX10_TEMP47 < RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP51 = getPlaceFromDist2 ( RX10_TEMP45 , RX10_TEMP47 ) ; 
const int RX10_TEMP53 = /* here  */ 0 ; 
const int RX10_TEMP54 = RX10_TEMP51 != RX10_TEMP53 ; 
if ( RX10_TEMP54 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Bad place access for array ionBackground" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP55 = getRefArrayValue2double ( ionBackground , RX10_TEMP47 ) ; 
const double X10_TEMP22 = RX10_TEMP55 ; 
const double X10_TEMP24 = X10_TEMP21 + X10_TEMP22 ; 
const double X10_TEMP25 = X10_TEMP24 ; 
struct Dist2 RX10_TEMP56 = chargeDensity .distValue ; 
struct Region2 RX10_TEMP57 = RX10_TEMP56 .dReg ; 
const int RX10_TEMP58 = searchPointInRegion2 ( RX10_TEMP57 , pt ) ; 
const int RX10_TEMP59 = 0 ; 
const int RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP62 = getPlaceFromDist2 ( RX10_TEMP56 , RX10_TEMP58 ) ; 
const int RX10_TEMP64 = /* here  */ 0 ; 
const int RX10_TEMP65 = RX10_TEMP62 != RX10_TEMP64 ; 
if ( RX10_TEMP65 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Bad place access for array chargeDensity" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( chargeDensity , RX10_TEMP58 , X10_TEMP25 ) ; 
} 

} 

} 

LinearESOpenPIC2D_addGuards ( X10_TEMP0 , chargeDensity , chargeDensityGuards ) ; 
const long long X10_TEMP29 = getTIME( ) 
; 
time2 = X10_TEMP29 ; const long long X10_TEMP32 = X10_TEMP0 ->depositTime ; 
const long long X10_TEMP31 = time2 - time1 ; 
const long long X10_TEMP34 = X10_TEMP32 + X10_TEMP31 ; 
const long long X10_TEMP35 = X10_TEMP34 ; 
X10_TEMP0 ->depositTime = ( X10_TEMP35 ) ; 
struct Dist2 RX10_TEMP66 = chargeDensity .distValue ; 
struct Dist2 dOld = RX10_TEMP66 ; 
struct doubleRefArray2 uniformChargeDensity = LinearESOpenPIC2D_moveFieldToUniform ( X10_TEMP0 , chargeDensity ) ; 
struct doubleRefArray2 X10_TEMP41 = LinearESOpenPIC2D_doubleDimensions ( X10_TEMP0 , uniformChargeDensity ) ; 
struct ComplexRefArray2 complexChargeDensity = ArrayUtil_doubleToComplex ( X10_TEMP41 ) ; 
const long long X10_TEMP44 = getTIME( ) 
; 
time1 = X10_TEMP44 ; const long long X10_TEMP47 = X10_TEMP0 ->redistTime ; 
const long long X10_TEMP46 = time1 - time2 ; 
const long long X10_TEMP49 = X10_TEMP47 + X10_TEMP46 ; 
const long long X10_TEMP50 = X10_TEMP49 ; 
X10_TEMP0 ->redistTime = ( X10_TEMP50 ) ; 
struct PoissonSolver X10_TEMP51 = X10_TEMP0 ->solver ; 
struct ComplexRefArray2 complexForceX = PoissonSolver_makeForceArray ( X10_TEMP51 ) ; 
struct PoissonSolver X10_TEMP53 = X10_TEMP0 ->solver ; 
struct ComplexRefArray2 complexForceY = PoissonSolver_makeForceArray ( X10_TEMP53 ) ; 
struct PoissonSolver X10_TEMP55 = X10_TEMP0 ->solver ; 
/*UpdatableVariableDeclaration*/double we = PoissonSolver_getForceCharge ( X10_TEMP55 , complexChargeDensity , complexForceX , complexForceY ) ; 
const long long X10_TEMP61 = getTIME( ) 
; 
time2 = X10_TEMP61 ; const long long X10_TEMP64 = X10_TEMP0 ->solverTime ; 
const long long X10_TEMP63 = time2 - time1 ; 
const long long X10_TEMP66 = X10_TEMP64 + X10_TEMP63 ; 
const long long X10_TEMP67 = X10_TEMP66 ; 
X10_TEMP0 ->solverTime = ( X10_TEMP67 ) ; 
struct Dist2 RX10_TEMP67 = chargeDensityGuards .distValue ; 
struct Dist2 dChargeDensityGuards = RX10_TEMP67 ; 
struct Region2 RX10_TEMP68 = dChargeDensityGuards .dReg ; 
const int RX10_TEMP69 = 0 ; 
const int RX10_TEMP70 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP71 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP71 = RX10_TEMP71 - RX10_TEMP70 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP72 = RX10_TEMP71 + SX10_TEMP11 ; 
const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP73 = RX10_TEMP71 + SX10_TEMP12 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP74 = (doubleStub *)calloc(RX10_TEMP73,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP72 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP75 = SX10_TEMP14 ; 
const int RX10_TEMP76 = /* here  */ 0 ; 
const int RX10_TEMP77 = RX10_TEMP75 ; 
const int RX10_TEMP78 = /* place.places ( RX10_TEMP77 )  */ 0 
; 
const int RX10_TEMP79 = getDistLocalCount2 ( dChargeDensityGuards , RX10_TEMP77 ) ; 
const int RX10_TEMP80 = RX10_TEMP79 - RX10_TEMP70 ; 
/* async ( RX10_TEMP78 )  */ 
{ const int SX10_TEMP15 = 1 ; 
const int RX10_TEMP81 = RX10_TEMP80 + SX10_TEMP15 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP82 = (double *)calloc(RX10_TEMP81,sizeof( double )); 
struct doubleStub RX10_TEMP83  ; 
doubleStub_doubleStub( &RX10_TEMP83/*Assignment*/, RX10_TEMP82 ) ; 
/* async ( RX10_TEMP76 )  */ 
{ RX10_TEMP74 [ RX10_TEMP75 ] = RX10_TEMP83 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP17 = (doubleStub *)calloc(RX10_TEMP72,sizeof( doubleStub )); 
for ( int SX10_TEMP18 = 0 ; SX10_TEMP18 < RX10_TEMP72 ; SX10_TEMP18 ++ ) 
{ const int RX10_TEMP86 = SX10_TEMP18 ; 
struct doubleStub RX10_TEMP85 = RX10_TEMP74 [ RX10_TEMP86 ] 
; 
SX10_TEMP17 [ RX10_TEMP86 ] = RX10_TEMP85 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP84 = SX10_TEMP17 ; 
struct doubleRefArray2 RX10_TEMP87  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP87/*Assignment*/, dChargeDensityGuards , RX10_TEMP84 ) ; 
struct doubleRefArray2 gx = RX10_TEMP87 ; 
struct Region2 RX10_TEMP88 = dChargeDensityGuards .dReg ; 
const int RX10_TEMP89 = 0 ; 
const int RX10_TEMP90 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP91 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP91 = RX10_TEMP91 - RX10_TEMP90 ; const int SX10_TEMP19 = 1 ; 
const int RX10_TEMP92 = RX10_TEMP91 + SX10_TEMP19 ; 
const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP93 = RX10_TEMP91 + SX10_TEMP20 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP94 = (doubleStub *)calloc(RX10_TEMP93,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP22 = 0 ; SX10_TEMP22 < RX10_TEMP92 ; SX10_TEMP22 ++ ) 
{ const int RX10_TEMP95 = SX10_TEMP22 ; 
const int RX10_TEMP96 = /* here  */ 0 ; 
const int RX10_TEMP97 = RX10_TEMP95 ; 
const int RX10_TEMP98 = /* place.places ( RX10_TEMP97 )  */ 0 
; 
const int RX10_TEMP99 = getDistLocalCount2 ( dChargeDensityGuards , RX10_TEMP97 ) ; 
const int RX10_TEMP100 = RX10_TEMP99 - RX10_TEMP90 ; 
/* async ( RX10_TEMP98 )  */ 
{ const int SX10_TEMP23 = 1 ; 
const int RX10_TEMP101 = RX10_TEMP100 + SX10_TEMP23 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP102 = (double *)calloc(RX10_TEMP101,sizeof( double )); 
struct doubleStub RX10_TEMP103  ; 
doubleStub_doubleStub( &RX10_TEMP103/*Assignment*/, RX10_TEMP102 ) ; 
/* async ( RX10_TEMP96 )  */ 
{ RX10_TEMP94 [ RX10_TEMP95 ] = RX10_TEMP103 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP25 = (doubleStub *)calloc(RX10_TEMP92,sizeof( doubleStub )); 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP92 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP106 = SX10_TEMP26 ; 
struct doubleStub RX10_TEMP105 = RX10_TEMP94 [ RX10_TEMP106 ] 
; 
SX10_TEMP25 [ RX10_TEMP106 ] = RX10_TEMP105 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP104 = SX10_TEMP25 ; 
struct doubleRefArray2 RX10_TEMP107  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP107/*Assignment*/, dChargeDensityGuards , RX10_TEMP104 ) ; 
struct doubleRefArray2 gy = RX10_TEMP107 ; 
struct doubleRefArray2 X10_TEMP74 = ArrayUtil_complexToDouble ( complexForceX ) ; 
struct doubleRefArray2 forceX = LinearESOpenPIC2D_cropField ( X10_TEMP0 , X10_TEMP74 , gx ) ; 
struct doubleRefArray2 X10_TEMP79 = ArrayUtil_complexToDouble ( complexForceY ) ; 
struct doubleRefArray2 forceY = LinearESOpenPIC2D_cropField ( X10_TEMP0 , X10_TEMP79 , gy ) ; 
struct doubleRefArray2 fcx = LinearESOpenPIC2D_moveFieldToDist ( X10_TEMP0 , forceX , dOld ) ; 
struct doubleRefArray2 fcy = LinearESOpenPIC2D_moveFieldToDist ( X10_TEMP0 , forceY , dOld ) ; 
LinearESOpenPIC2D_loadGuards ( X10_TEMP0 , fcx , gx ) ; 
LinearESOpenPIC2D_loadGuards ( X10_TEMP0 , fcy , gy ) ; 
const long long X10_TEMP92 = getTIME( ) 
; 
time1 = X10_TEMP92 ; const long long X10_TEMP95 = X10_TEMP0 ->redistTime ; 
const long long X10_TEMP94 = time1 - time2 ; 
const long long X10_TEMP97 = X10_TEMP95 + X10_TEMP94 ; 
const long long X10_TEMP98 = X10_TEMP97 ; 
X10_TEMP0 ->redistTime = ( X10_TEMP98 ) ; 
struct ParticleRefArray1 X10_TEMP104 = X10_TEMP0 ->particles ; 
/*UpdatableVariableDeclaration*/double wk = LinearESOpenPIC2D_pushParticles ( X10_TEMP0 , X10_TEMP104 , fcx , gx , fcy , gy ) ; 
const long long X10_TEMP107 = getTIME( ) 
; 
time2 = X10_TEMP107 ; const long long X10_TEMP110 = X10_TEMP0 ->pushTime ; 
const long long X10_TEMP109 = time2 - time1 ; 
const long long X10_TEMP112 = X10_TEMP110 + X10_TEMP109 ; 
const long long X10_TEMP113 = X10_TEMP112 ; 
X10_TEMP0 ->pushTime = ( X10_TEMP113 ) ; 
struct intRefArray1 info = LinearESOpenPIC2D_makeInfoArray ( X10_TEMP0 ) ; 
struct ParticleRefArray1 X10_TEMP118 = X10_TEMP0 ->particles ; 
struct ParticleRefArray1 X10_TEMP120 = LinearESOpenPIC2D_moveParticles ( X10_TEMP0 , X10_TEMP118 , dOld , info ) ; 
struct ParticleRefArray1 X10_TEMP121 = X10_TEMP120 ; 
X10_TEMP0 ->particles = ( X10_TEMP121 ) ; 
const int X10_TEMP123 = 6 ; 
struct Point1 RX10_TEMP108  ; 
Point1_Point1( &RX10_TEMP108/*Assignment*/, X10_TEMP123 ) ; 
struct Dist1 RX10_TEMP109 = info .distValue ; 
struct Region1 RX10_TEMP110 = RX10_TEMP109 .dReg ; 
const int RX10_TEMP111 = searchPointInRegion1 ( RX10_TEMP110 , RX10_TEMP108 ) ; 
const int RX10_TEMP112 = 0 ; 
const int RX10_TEMP113 = RX10_TEMP111 < RX10_TEMP112 ; 
if ( RX10_TEMP113 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP114 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP114 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP115 = getPlaceFromDist1 ( RX10_TEMP109 , RX10_TEMP111 ) ; 
const int RX10_TEMP117 = /* here  */ 0 ; 
const int RX10_TEMP118 = RX10_TEMP115 != RX10_TEMP117 ; 
if ( RX10_TEMP118 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP116 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP116 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP119 = getRefArrayValue1int ( info , RX10_TEMP111 ) ; 
const int X10_TEMP124 = RX10_TEMP119 ; 
const double X10_TEMP126 = /*casting*/( double ) X10_TEMP124 ; 
const int X10_TEMP127 = /* place.MAX_PLACES  */ 1 ; 
const double particleAve = X10_TEMP126 / X10_TEMP127 ; 
const int X10_TEMP130 = 1 ; 
struct Point1 RX10_TEMP120  ; 
Point1_Point1( &RX10_TEMP120/*Assignment*/, X10_TEMP130 ) ; 
struct Dist1 RX10_TEMP121 = info .distValue ; 
struct Region1 RX10_TEMP122 = RX10_TEMP121 .dReg ; 
const int RX10_TEMP123 = searchPointInRegion1 ( RX10_TEMP122 , RX10_TEMP120 ) ; 
const int RX10_TEMP124 = 0 ; 
const int RX10_TEMP125 = RX10_TEMP123 < RX10_TEMP124 ; 
if ( RX10_TEMP125 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP126 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP126 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP127 = getPlaceFromDist1 ( RX10_TEMP121 , RX10_TEMP123 ) ; 
const int RX10_TEMP129 = /* here  */ 0 ; 
const int RX10_TEMP130 = RX10_TEMP127 != RX10_TEMP129 ; 
if ( RX10_TEMP130 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP128 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP128 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP131 = getRefArrayValue1int ( info , RX10_TEMP123 ) ; 
const double X10_TEMP131 = RX10_TEMP131 ; 
const double X10_TEMP139 = X10_TEMP131 - particleAve ; 
const int X10_TEMP134 = 2 ; 
struct Point1 RX10_TEMP132  ; 
Point1_Point1( &RX10_TEMP132/*Assignment*/, X10_TEMP134 ) ; 
struct Dist1 RX10_TEMP133 = info .distValue ; 
struct Region1 RX10_TEMP134 = RX10_TEMP133 .dReg ; 
const int RX10_TEMP135 = searchPointInRegion1 ( RX10_TEMP134 , RX10_TEMP132 ) ; 
const int RX10_TEMP136 = 0 ; 
const int RX10_TEMP137 = RX10_TEMP135 < RX10_TEMP136 ; 
if ( RX10_TEMP137 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP138 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP138 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP139 = getPlaceFromDist1 ( RX10_TEMP133 , RX10_TEMP135 ) ; 
const int RX10_TEMP141 = /* here  */ 0 ; 
const int RX10_TEMP142 = RX10_TEMP139 != RX10_TEMP141 ; 
if ( RX10_TEMP142 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP140 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP140 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP143 = getRefArrayValue1int ( info , RX10_TEMP135 ) ; 
const double X10_TEMP135 = RX10_TEMP143 ; 
const double X10_TEMP137 = X10_TEMP135 / particleAve ; 
const double X10_TEMP140 = particleAve - X10_TEMP137 ; 
const double balance = X10Util_maxDouble ( X10_TEMP139 , X10_TEMP140 ) ; 
const int X10_TEMP143 = balance > _LinearESOpenPIC2D_IMBALANCE ; 
if ( X10_TEMP143 ) 
{ struct ParticleRefArray1 X10_TEMP146 = X10_TEMP0 ->particles ; 
struct intRefArray1 count = LinearESOpenPIC2D_countParticles ( X10_TEMP0 , X10_TEMP146 , dOld ) ; 
struct Dist2 dNew = LinearESOpenPIC2D_repartition ( X10_TEMP0 , count , dOld , particleAve ) ; 
struct doubleRefArray2 X10_TEMP154 = X10_TEMP0 ->backgroundCharge ; 
struct doubleRefArray2 X10_TEMP156 = LinearESOpenPIC2D_moveFieldToDist ( X10_TEMP0 , X10_TEMP154 , dNew ) ; 
struct doubleRefArray2 X10_TEMP157 = X10_TEMP156 ; 
X10_TEMP0 ->backgroundCharge = ( X10_TEMP157 ) ; 
struct ParticleRefArray1 X10_TEMP161 = X10_TEMP0 ->particles ; 
struct ParticleRefArray1 X10_TEMP163 = LinearESOpenPIC2D_moveParticles ( X10_TEMP0 , X10_TEMP161 , dNew , info ) ; 
struct ParticleRefArray1 X10_TEMP164 = X10_TEMP163 ; 
X10_TEMP0 ->particles = ( X10_TEMP164 ) ; 
} 

const int X10_TEMP167 = 0 ; 
const int X10_TEMP168 = 2 ; 
struct Region1 X10_TEMP169 = createNewRegion1R ( X10_TEMP167 , X10_TEMP168 ) ; 
const int X10_TEMP170 = /* here  */ 0 ; 
struct Dist1 X10_TEMP172 = getPlaceDist1 ( X10_TEMP169 , X10_TEMP170 ) ; 
struct Dist1 dResult = X10_TEMP172 ; 
struct Region1 RX10_TEMP144 = dResult .dReg ; 
const int RX10_TEMP145 = 0 ; 
const int RX10_TEMP146 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP147 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP147 = RX10_TEMP147 - RX10_TEMP146 ; const int SX10_TEMP27 = 1 ; 
const int RX10_TEMP148 = RX10_TEMP147 + SX10_TEMP27 ; 
const int SX10_TEMP28 = 1 ; 
const int RX10_TEMP149 = RX10_TEMP147 + SX10_TEMP28 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP150 = (doubleStub *)calloc(RX10_TEMP149,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP30 = 0 ; SX10_TEMP30 < RX10_TEMP148 ; SX10_TEMP30 ++ ) 
{ const int RX10_TEMP151 = SX10_TEMP30 ; 
const int RX10_TEMP152 = /* here  */ 0 ; 
const int RX10_TEMP153 = RX10_TEMP151 ; 
const int RX10_TEMP154 = /* place.places ( RX10_TEMP153 )  */ 0 
; 
const int RX10_TEMP155 = getDistLocalCount1 ( dResult , RX10_TEMP153 ) ; 
const int RX10_TEMP156 = RX10_TEMP155 - RX10_TEMP146 ; 
/* async ( RX10_TEMP154 )  */ 
{ const int SX10_TEMP31 = 1 ; 
const int RX10_TEMP157 = RX10_TEMP156 + SX10_TEMP31 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP158 = (double *)calloc(RX10_TEMP157,sizeof( double )); 
struct doubleStub RX10_TEMP159  ; 
doubleStub_doubleStub( &RX10_TEMP159/*Assignment*/, RX10_TEMP158 ) ; 
/* async ( RX10_TEMP152 )  */ 
{ RX10_TEMP150 [ RX10_TEMP151 ] = RX10_TEMP159 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP33 = (doubleStub *)calloc(RX10_TEMP148,sizeof( doubleStub )); 
for ( int SX10_TEMP34 = 0 ; SX10_TEMP34 < RX10_TEMP148 ; SX10_TEMP34 ++ ) 
{ const int RX10_TEMP162 = SX10_TEMP34 ; 
struct doubleStub RX10_TEMP161 = RX10_TEMP150 [ RX10_TEMP162 ] 
; 
SX10_TEMP33 [ RX10_TEMP162 ] = RX10_TEMP161 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP160 = SX10_TEMP33 ; 
struct doubleRefArray1 RX10_TEMP163  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP163/*Assignment*/, dResult , RX10_TEMP160 ) ; 
struct doubleRefArray1 result = RX10_TEMP163 ; 
const int X10_TEMP176 = 0 ; 
const double X10_TEMP178 = we ; 
struct Point1 RX10_TEMP164  ; 
Point1_Point1( &RX10_TEMP164/*Assignment*/, X10_TEMP176 ) ; 
struct Dist1 RX10_TEMP165 = result .distValue ; 
struct Region1 RX10_TEMP166 = RX10_TEMP165 .dReg ; 
const int RX10_TEMP167 = searchPointInRegion1 ( RX10_TEMP166 , RX10_TEMP164 ) ; 
const int RX10_TEMP168 = 0 ; 
const int RX10_TEMP169 = RX10_TEMP167 < RX10_TEMP168 ; 
if ( RX10_TEMP169 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP170 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP170 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP171 = getPlaceFromDist1 ( RX10_TEMP165 , RX10_TEMP167 ) ; 
const int RX10_TEMP173 = /* here  */ 0 ; 
const int RX10_TEMP174 = RX10_TEMP171 != RX10_TEMP173 ; 
if ( RX10_TEMP174 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP172 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP172 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( result , RX10_TEMP167 , X10_TEMP178 ) ; 
const int X10_TEMP180 = 1 ; 
const double X10_TEMP182 = wk ; 
struct Point1 RX10_TEMP175  ; 
Point1_Point1( &RX10_TEMP175/*Assignment*/, X10_TEMP180 ) ; 
struct Dist1 RX10_TEMP176 = result .distValue ; 
struct Region1 RX10_TEMP177 = RX10_TEMP176 .dReg ; 
const int RX10_TEMP178 = searchPointInRegion1 ( RX10_TEMP177 , RX10_TEMP175 ) ; 
const int RX10_TEMP179 = 0 ; 
const int RX10_TEMP180 = RX10_TEMP178 < RX10_TEMP179 ; 
if ( RX10_TEMP180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP181 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP181 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP182 = getPlaceFromDist1 ( RX10_TEMP176 , RX10_TEMP178 ) ; 
const int RX10_TEMP184 = /* here  */ 0 ; 
const int RX10_TEMP185 = RX10_TEMP182 != RX10_TEMP184 ; 
if ( RX10_TEMP185 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP183 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP183 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( result , RX10_TEMP178 , X10_TEMP182 ) ; 
const int X10_TEMP184 = 2 ; 
const double X10_TEMP186 = we + wk ; 
const double X10_TEMP187 = X10_TEMP186 ; 
struct Point1 RX10_TEMP186  ; 
Point1_Point1( &RX10_TEMP186/*Assignment*/, X10_TEMP184 ) ; 
struct Dist1 RX10_TEMP187 = result .distValue ; 
struct Region1 RX10_TEMP188 = RX10_TEMP187 .dReg ; 
const int RX10_TEMP189 = searchPointInRegion1 ( RX10_TEMP188 , RX10_TEMP186 ) ; 
const int RX10_TEMP190 = 0 ; 
const int RX10_TEMP191 = RX10_TEMP189 < RX10_TEMP190 ; 
if ( RX10_TEMP191 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP192 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP192 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP193 = getPlaceFromDist1 ( RX10_TEMP187 , RX10_TEMP189 ) ; 
const int RX10_TEMP195 = /* here  */ 0 ; 
const int RX10_TEMP196 = RX10_TEMP193 != RX10_TEMP195 ; 
if ( RX10_TEMP196 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP194 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP194 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( result , RX10_TEMP189 , X10_TEMP187 ) ; 
const long long X10_TEMP189 = getTIME( ) 
; 
time1 = X10_TEMP189 ; const long long X10_TEMP192 = X10_TEMP0 ->moveTime ; 
const long long X10_TEMP191 = time1 - time2 ; 
const long long X10_TEMP194 = X10_TEMP192 + X10_TEMP191 ; 
const long long X10_TEMP195 = X10_TEMP194 ; 
X10_TEMP0 ->moveTime = ( X10_TEMP195 ) ; 
return result ; 
} 

double /*static*/LinearESOpenPIC2D_linearDensity (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const double x , const double anlx , const double anxi , const double shift ) 
{ const double X10_TEMP4 = 1.0; 
const double X10_TEMP1 = x * anxi ; 
const double X10_TEMP3 = X10_TEMP1 - shift ; 
const double X10_TEMP5 = anlx * X10_TEMP3 ; 
const double X10_TEMP7 = X10_TEMP4 + X10_TEMP5 ; 
return X10_TEMP7 ; 
} 

double /*static*/LinearESOpenPIC2D_linearDensityIntegral (  struct LinearESOpenPIC2D  * const X10_TEMP0 , const double x , const double anlx , const double anxi , const double shift ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP3 = anxi == X10_TEMP1 ; 
const int X10_TEMP4 = X10_TEMP3 ; 
const double X10_TEMP6 = 0.5; 
const double X10_TEMP7 = X10_TEMP6 * anlx ; 
const double X10_TEMP13 = X10_TEMP7 * x ; 
const double X10_TEMP9 = x * anxi ; 
const double X10_TEMP8 = 2.0; 
const double X10_TEMP10 = X10_TEMP8 * shift ; 
const double X10_TEMP12 = X10_TEMP9 - X10_TEMP10 ; 
const double X10_TEMP14 = X10_TEMP13 * X10_TEMP12 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP16 = x + X10_TEMP14 ; 
if ( X10_TEMP4 ) 
{ X10_TEMP16 = x ; } 

const double X10_TEMP17 = X10_TEMP16 ; 
return X10_TEMP17 ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_makeGuards (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct Dist2 const dData ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region2 X10_TEMP4 = createNewRegion2RR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist2 X10_TEMP7 = getPlaceDist2 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
const int X10_TEMP17 = 0 ; 
struct Region1 rLocal1 = X10Util_getPRank2D ( dData , p , X10_TEMP17 ) ; 
const int X10_TEMP22 = 1 ; 
struct Region1 rLocal2 = X10Util_getPRank2D ( dData , p , X10_TEMP22 ) ; 
const int RX10_TEMP12 = rLocal1 .regSize ; 
const int RX10_TEMP13 = 0 ; 
const int RX10_TEMP14 = RX10_TEMP12 <= RX10_TEMP13 ; 
if ( RX10_TEMP14 ) 
{ const char * RX10_TEMP15 = "Operation high() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int ub = regionHigh ( rLocal1 ) ; 
const int X10_TEMP25 = 1 ; 
const int X10_TEMP29 = ub + X10_TEMP25 ; 
const int X10_TEMP27 = 1 ; 
const int X10_TEMP30 = ub + X10_TEMP27 ; 
struct Region2 X10_TEMP32 = createNewRegion2RA ( X10_TEMP29 , X10_TEMP30 , rLocal2 ) ; 
struct Dist2 X10_TEMP34 = getPlaceDist2 ( X10_TEMP32 , p ) ; 
struct Dist2 X10_TEMP36 = unionDist2 ( dResult , X10_TEMP34 ) ; 
dResult = X10_TEMP36 ; } 

struct Region2 RX10_TEMP16 = dResult .dReg ; 
const int RX10_TEMP17 = 0 ; 
const int RX10_TEMP18 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP19 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP19 = RX10_TEMP19 - RX10_TEMP18 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP20 = RX10_TEMP19 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP21 = RX10_TEMP19 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP22 = (doubleStub *)calloc(RX10_TEMP21,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP20 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP5 ; 
const int RX10_TEMP24 = /* here  */ 0 ; 
const int RX10_TEMP25 = RX10_TEMP23 ; 
const int RX10_TEMP26 = /* place.places ( RX10_TEMP25 )  */ 0 
; 
const int RX10_TEMP27 = getDistLocalCount2 ( dResult , RX10_TEMP25 ) ; 
const int RX10_TEMP28 = RX10_TEMP27 - RX10_TEMP18 ; 
/* async ( RX10_TEMP26 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP30 = RX10_TEMP28 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP7 = (double *)calloc(RX10_TEMP30,sizeof( double )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP30 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP29 = SX10_TEMP8 ; 
const double X10_TEMP38 = 0.0; 
SX10_TEMP7 [ RX10_TEMP29 ] = X10_TEMP38 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP31 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP32  ; 
doubleStub_doubleStub( &RX10_TEMP32/*Assignment*/, RX10_TEMP31 ) ; 
/* async ( RX10_TEMP24 )  */ 
{ RX10_TEMP22 [ RX10_TEMP23 ] = RX10_TEMP32 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP9 = (doubleStub *)calloc(RX10_TEMP20,sizeof( doubleStub )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP20 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP35 = SX10_TEMP10 ; 
struct doubleStub RX10_TEMP34 = RX10_TEMP22 [ RX10_TEMP35 ] 
; 
SX10_TEMP9 [ RX10_TEMP35 ] = RX10_TEMP34 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP33 = SX10_TEMP9 ; 
struct doubleRefArray2 RX10_TEMP36  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP36/*Assignment*/, dResult , RX10_TEMP33 ) ; 
struct doubleRefArray2 X10_TEMP40 = RX10_TEMP36 ; 
return X10_TEMP40 ; 
} 

void /*static*/LinearESOpenPIC2D_depositCharge (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct doubleRefArray2 const fieldCharge ,  struct doubleRefArray2 const guards , const double charge ) 
{ /* finish  */ 
{ struct Dist1 X10_TEMP2 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP2 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP2 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP2." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP2 , RX10_TEMP7 ) ; 
const int X10_TEMP3 = RX10_TEMP11 ; 
/* async ( X10_TEMP3 )  */ 
{ struct Dist2 RX10_TEMP12 = fieldCharge .distValue ; 
struct Dist2 dFC = RX10_TEMP12 ; 
struct Region2 rLocalFC = X10Util_get2DLRegion ( dFC ) ; 
struct Dist2 RX10_TEMP13 = guards .distValue ; 
struct Dist2 dG = RX10_TEMP13 ; 
struct Region2 rLocalG = X10Util_get2DLRegion ( dG ) ; 
struct Region2 X10_TEMP11 = unionRegion2 ( rLocalFC , rLocalG ) ; 
const int X10_TEMP12 = /* here  */ 0 ; 
struct Dist2 X10_TEMP14 = getPlaceDist2 ( X10_TEMP11 , X10_TEMP12 ) ; 
struct Dist2 dLocal = X10_TEMP14 ; 
struct Region2 RX10_TEMP14 = dLocal .dReg ; 
const int RX10_TEMP15 = 0 ; 
const int RX10_TEMP16 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP17 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP17 = RX10_TEMP17 - RX10_TEMP16 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP18 = RX10_TEMP17 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP19 = RX10_TEMP17 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP20 = (doubleStub *)calloc(RX10_TEMP19,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP18 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP5 ; 
const int RX10_TEMP22 = /* here  */ 0 ; 
const int RX10_TEMP23 = RX10_TEMP21 ; 
const int RX10_TEMP24 = /* place.places ( RX10_TEMP23 )  */ 0 
; 
const int RX10_TEMP25 = getDistLocalCount2 ( dLocal , RX10_TEMP23 ) ; 
const int RX10_TEMP26 = RX10_TEMP25 - RX10_TEMP16 ; 
/* async ( RX10_TEMP24 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP28 = RX10_TEMP26 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP7 = (double *)calloc(RX10_TEMP28,sizeof( double )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP28 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP27 = SX10_TEMP8 ; 
const double X10_TEMP17 = 0.0; 
SX10_TEMP7 [ RX10_TEMP27 ] = X10_TEMP17 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP29 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP30  ; 
doubleStub_doubleStub( &RX10_TEMP30/*Assignment*/, RX10_TEMP29 ) ; 
/* async ( RX10_TEMP22 )  */ 
{ RX10_TEMP20 [ RX10_TEMP21 ] = RX10_TEMP30 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP9 = (doubleStub *)calloc(RX10_TEMP18,sizeof( doubleStub )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP18 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP33 = SX10_TEMP10 ; 
struct doubleStub RX10_TEMP32 = RX10_TEMP20 [ RX10_TEMP33 ] 
; 
SX10_TEMP9 [ RX10_TEMP33 ] = RX10_TEMP32 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP31 = SX10_TEMP9 ; 
struct doubleRefArray2 RX10_TEMP34  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP34/*Assignment*/, dLocal , RX10_TEMP31 ) ; 
struct doubleRefArray2 localCharge = RX10_TEMP34 ; 
struct Dist1 RX10_TEMP35 = particles .distValue ; 
struct Dist1 X10_TEMP19 = RX10_TEMP35 ; 
const int X10_TEMP20 = /* here  */ 0 ; 
struct Dist1 X10_TEMP22 = restrictDist1 ( X10_TEMP19 , X10_TEMP20 ) ; 
struct Region1 RX10_TEMP37 = X10_TEMP22 .dReg ; 
const int RX10_TEMP40 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP38 = RX10_TEMP37 .regSize ; 
RX10_TEMP38 = RX10_TEMP38 - RX10_TEMP40 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP39 = RX10_TEMP38 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP39 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP36 = SX10_TEMP12 ; 
const int RX10_TEMP41 = RX10_TEMP36 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP37 , RX10_TEMP41 ) ; 
struct Dist1 RX10_TEMP42 = particles .distValue ; 
struct Region1 RX10_TEMP43 = RX10_TEMP42 .dReg ; 
const int RX10_TEMP44 = searchPointInRegion1 ( RX10_TEMP43 , pt ) ; 
const int RX10_TEMP45 = 0 ; 
const int RX10_TEMP46 = RX10_TEMP44 < RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP48 = getPlaceFromDist1 ( RX10_TEMP42 , RX10_TEMP44 ) ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP48 != RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP49 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP49 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP52 = getRefArrayValue1Particle ( particles , RX10_TEMP44 ) ; 
struct Particle p = RX10_TEMP52 ; 
const double X10_TEMP25 = Particle_getX ( p ) ; 
const int x = /*casting*/( int ) X10_TEMP25 ; 
const double X10_TEMP27 = Particle_getY ( p ) ; 
const int y = /*casting*/( int ) X10_TEMP27 ; 
const double X10_TEMP29 = Particle_getX ( p ) ; 
const double dx = X10_TEMP29 - x ; 
const double X10_TEMP31 = Particle_getY ( p ) ; 
const double dy = X10_TEMP31 - y ; 
const int X10_TEMP33 = 1 ; 
const int X10_TEMP37 = y + X10_TEMP33 ; 
const int X10_TEMP35 = 1 ; 
const int X10_TEMP38 = x + X10_TEMP35 ; 
const int X10_TEMP39 = 1 ; 
const int X10_TEMP43 = y + X10_TEMP39 ; 
const int X10_TEMP41 = 1 ; 
const int X10_TEMP44 = x + X10_TEMP41 ; 
struct Point2 RX10_TEMP53  ; 
Point2_Point2( &RX10_TEMP53/*Assignment*/, X10_TEMP43 , X10_TEMP44 ) ; 
struct Dist2 RX10_TEMP54 = localCharge .distValue ; 
struct Region2 RX10_TEMP55 = RX10_TEMP54 .dReg ; 
const int RX10_TEMP56 = searchPointInRegion2 ( RX10_TEMP55 , RX10_TEMP53 ) ; 
const int RX10_TEMP57 = 0 ; 
const int RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57 ; 
if ( RX10_TEMP58 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP60 = getPlaceFromDist2 ( RX10_TEMP54 , RX10_TEMP56 ) ; 
const int RX10_TEMP62 = /* here  */ 0 ; 
const int RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62 ; 
if ( RX10_TEMP63 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP64 = getRefArrayValue2double ( localCharge , RX10_TEMP56 ) ; 
const double X10_TEMP48 = RX10_TEMP64 ; 
const double X10_TEMP45 = charge * dx ; 
const double X10_TEMP47 = X10_TEMP45 * dy ; 
const double X10_TEMP50 = X10_TEMP48 + X10_TEMP47 ; 
const double X10_TEMP51 = X10_TEMP50 ; 
struct Point2 RX10_TEMP65  ; 
Point2_Point2( &RX10_TEMP65/*Assignment*/, X10_TEMP37 , X10_TEMP38 ) ; 
struct Dist2 RX10_TEMP66 = localCharge .distValue ; 
struct Region2 RX10_TEMP67 = RX10_TEMP66 .dReg ; 
const int RX10_TEMP68 = searchPointInRegion2 ( RX10_TEMP67 , RX10_TEMP65 ) ; 
const int RX10_TEMP69 = 0 ; 
const int RX10_TEMP70 = RX10_TEMP68 < RX10_TEMP69 ; 
if ( RX10_TEMP70 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP71 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP71 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP72 = getPlaceFromDist2 ( RX10_TEMP66 , RX10_TEMP68 ) ; 
const int RX10_TEMP74 = /* here  */ 0 ; 
const int RX10_TEMP75 = RX10_TEMP72 != RX10_TEMP74 ; 
if ( RX10_TEMP75 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( localCharge , RX10_TEMP68 , X10_TEMP51 ) ; 
const int X10_TEMP52 = 1 ; 
const int X10_TEMP55 = y + X10_TEMP52 ; 
const int X10_TEMP56 = 1 ; 
const int X10_TEMP59 = y + X10_TEMP56 ; 
struct Point2 RX10_TEMP76  ; 
Point2_Point2( &RX10_TEMP76/*Assignment*/, X10_TEMP59 , x ) ; 
struct Dist2 RX10_TEMP77 = localCharge .distValue ; 
struct Region2 RX10_TEMP78 = RX10_TEMP77 .dReg ; 
const int RX10_TEMP79 = searchPointInRegion2 ( RX10_TEMP78 , RX10_TEMP76 ) ; 
const int RX10_TEMP80 = 0 ; 
const int RX10_TEMP81 = RX10_TEMP79 < RX10_TEMP80 ; 
if ( RX10_TEMP81 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP82 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP82 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP83 = getPlaceFromDist2 ( RX10_TEMP77 , RX10_TEMP79 ) ; 
const int RX10_TEMP85 = /* here  */ 0 ; 
const int RX10_TEMP86 = RX10_TEMP83 != RX10_TEMP85 ; 
if ( RX10_TEMP86 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP84 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP84 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP87 = getRefArrayValue2double ( localCharge , RX10_TEMP79 ) ; 
const double X10_TEMP66 = RX10_TEMP87 ; 
const double X10_TEMP60 = 1.0; 
const double X10_TEMP62 = X10_TEMP60 - dx ; 
const double X10_TEMP63 = charge * X10_TEMP62 ; 
const double X10_TEMP65 = X10_TEMP63 * dy ; 
const double X10_TEMP68 = X10_TEMP66 + X10_TEMP65 ; 
const double X10_TEMP69 = X10_TEMP68 ; 
struct Point2 RX10_TEMP88  ; 
Point2_Point2( &RX10_TEMP88/*Assignment*/, X10_TEMP55 , x ) ; 
struct Dist2 RX10_TEMP89 = localCharge .distValue ; 
struct Region2 RX10_TEMP90 = RX10_TEMP89 .dReg ; 
const int RX10_TEMP91 = searchPointInRegion2 ( RX10_TEMP90 , RX10_TEMP88 ) ; 
const int RX10_TEMP92 = 0 ; 
const int RX10_TEMP93 = RX10_TEMP91 < RX10_TEMP92 ; 
if ( RX10_TEMP93 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP94 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP94 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP95 = getPlaceFromDist2 ( RX10_TEMP89 , RX10_TEMP91 ) ; 
const int RX10_TEMP97 = /* here  */ 0 ; 
const int RX10_TEMP98 = RX10_TEMP95 != RX10_TEMP97 ; 
if ( RX10_TEMP98 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP96 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP96 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( localCharge , RX10_TEMP91 , X10_TEMP69 ) ; 
const int X10_TEMP71 = 1 ; 
const int X10_TEMP73 = x + X10_TEMP71 ; 
const int X10_TEMP75 = 1 ; 
const int X10_TEMP77 = x + X10_TEMP75 ; 
struct Point2 RX10_TEMP99  ; 
Point2_Point2( &RX10_TEMP99/*Assignment*/, y , X10_TEMP77 ) ; 
struct Dist2 RX10_TEMP100 = localCharge .distValue ; 
struct Region2 RX10_TEMP101 = RX10_TEMP100 .dReg ; 
const int RX10_TEMP102 = searchPointInRegion2 ( RX10_TEMP101 , RX10_TEMP99 ) ; 
const int RX10_TEMP103 = 0 ; 
const int RX10_TEMP104 = RX10_TEMP102 < RX10_TEMP103 ; 
if ( RX10_TEMP104 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP105 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP105 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP106 = getPlaceFromDist2 ( RX10_TEMP100 , RX10_TEMP102 ) ; 
const int RX10_TEMP108 = /* here  */ 0 ; 
const int RX10_TEMP109 = RX10_TEMP106 != RX10_TEMP108 ; 
if ( RX10_TEMP109 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP107 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP107 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP110 = getRefArrayValue2double ( localCharge , RX10_TEMP102 ) ; 
const double X10_TEMP84 = RX10_TEMP110 ; 
const double X10_TEMP81 = charge * dx ; 
const double X10_TEMP78 = 1.0; 
const double X10_TEMP80 = X10_TEMP78 - dy ; 
const double X10_TEMP83 = X10_TEMP81 * X10_TEMP80 ; 
const double X10_TEMP86 = X10_TEMP84 + X10_TEMP83 ; 
const double X10_TEMP87 = X10_TEMP86 ; 
struct Point2 RX10_TEMP111  ; 
Point2_Point2( &RX10_TEMP111/*Assignment*/, y , X10_TEMP73 ) ; 
struct Dist2 RX10_TEMP112 = localCharge .distValue ; 
struct Region2 RX10_TEMP113 = RX10_TEMP112 .dReg ; 
const int RX10_TEMP114 = searchPointInRegion2 ( RX10_TEMP113 , RX10_TEMP111 ) ; 
const int RX10_TEMP115 = 0 ; 
const int RX10_TEMP116 = RX10_TEMP114 < RX10_TEMP115 ; 
if ( RX10_TEMP116 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP117 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP117 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP118 = getPlaceFromDist2 ( RX10_TEMP112 , RX10_TEMP114 ) ; 
const int RX10_TEMP120 = /* here  */ 0 ; 
const int RX10_TEMP121 = RX10_TEMP118 != RX10_TEMP120 ; 
if ( RX10_TEMP121 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP119 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP119 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( localCharge , RX10_TEMP114 , X10_TEMP87 ) ; 
struct Point2 RX10_TEMP122  ; 
Point2_Point2( &RX10_TEMP122/*Assignment*/, y , x ) ; 
struct Dist2 RX10_TEMP123 = localCharge .distValue ; 
struct Region2 RX10_TEMP124 = RX10_TEMP123 .dReg ; 
const int RX10_TEMP125 = searchPointInRegion2 ( RX10_TEMP124 , RX10_TEMP122 ) ; 
const int RX10_TEMP126 = 0 ; 
const int RX10_TEMP127 = RX10_TEMP125 < RX10_TEMP126 ; 
if ( RX10_TEMP127 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP128 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP128 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP129 = getPlaceFromDist2 ( RX10_TEMP123 , RX10_TEMP125 ) ; 
const int RX10_TEMP131 = /* here  */ 0 ; 
const int RX10_TEMP132 = RX10_TEMP129 != RX10_TEMP131 ; 
if ( RX10_TEMP132 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP130 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP130 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP133 = getRefArrayValue2double ( localCharge , RX10_TEMP125 ) ; 
const double X10_TEMP101 = RX10_TEMP133 ; 
const double X10_TEMP92 = 1.0; 
const double X10_TEMP94 = X10_TEMP92 - dx ; 
const double X10_TEMP98 = charge * X10_TEMP94 ; 
const double X10_TEMP95 = 1.0; 
const double X10_TEMP97 = X10_TEMP95 - dy ; 
const double X10_TEMP100 = X10_TEMP98 * X10_TEMP97 ; 
const double X10_TEMP103 = X10_TEMP101 + X10_TEMP100 ; 
const double X10_TEMP104 = X10_TEMP103 ; 
struct Point2 RX10_TEMP134  ; 
Point2_Point2( &RX10_TEMP134/*Assignment*/, y , x ) ; 
struct Dist2 RX10_TEMP135 = localCharge .distValue ; 
struct Region2 RX10_TEMP136 = RX10_TEMP135 .dReg ; 
const int RX10_TEMP137 = searchPointInRegion2 ( RX10_TEMP136 , RX10_TEMP134 ) ; 
const int RX10_TEMP138 = 0 ; 
const int RX10_TEMP139 = RX10_TEMP137 < RX10_TEMP138 ; 
if ( RX10_TEMP139 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP140 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP140 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP141 = getPlaceFromDist2 ( RX10_TEMP135 , RX10_TEMP137 ) ; 
const int RX10_TEMP143 = /* here  */ 0 ; 
const int RX10_TEMP144 = RX10_TEMP141 != RX10_TEMP143 ; 
if ( RX10_TEMP144 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP142 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP142 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( localCharge , RX10_TEMP137 , X10_TEMP104 ) ; 
} 

/* finish  */ 
{ struct Dist2 RX10_TEMP145 = fieldCharge .distValue ; 
struct Dist2 X10_TEMP105 = RX10_TEMP145 ; 
const int X10_TEMP106 = /* here  */ 0 ; 
struct Dist2 X10_TEMP108 = restrictDist2 ( X10_TEMP105 , X10_TEMP106 ) ; 
const int X10_TEMP109 = /* here  */ 0 ; 
struct Region2 RX10_TEMP147 = X10_TEMP108 .dReg ; 
const int RX10_TEMP150 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP148 = RX10_TEMP147 .regSize ; 
RX10_TEMP148 = RX10_TEMP148 - RX10_TEMP150 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP149 = RX10_TEMP148 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP149 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP146 = SX10_TEMP14 ; 
const int RX10_TEMP151 = RX10_TEMP146 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP147 , RX10_TEMP151 ) ; 
/* async ( X10_TEMP109 )  */ 
{ struct Dist2 RX10_TEMP152 = localCharge .distValue ; 
struct Region2 RX10_TEMP153 = RX10_TEMP152 .dReg ; 
const int RX10_TEMP154 = searchPointInRegion2 ( RX10_TEMP153 , pt ) ; 
const int RX10_TEMP155 = 0 ; 
const int RX10_TEMP156 = RX10_TEMP154 < RX10_TEMP155 ; 
if ( RX10_TEMP156 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP157 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP157 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP158 = getPlaceFromDist2 ( RX10_TEMP152 , RX10_TEMP154 ) ; 
const int RX10_TEMP160 = /* here  */ 0 ; 
const int RX10_TEMP161 = RX10_TEMP158 != RX10_TEMP160 ; 
if ( RX10_TEMP161 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP159 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP159 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP162 = getRefArrayValue2double ( localCharge , RX10_TEMP154 ) ; 
const double X10_TEMP113 = RX10_TEMP162 ; 
const double X10_TEMP114 = X10_TEMP113 ; 
struct Dist2 RX10_TEMP163 = fieldCharge .distValue ; 
struct Region2 RX10_TEMP164 = RX10_TEMP163 .dReg ; 
const int RX10_TEMP165 = searchPointInRegion2 ( RX10_TEMP164 , pt ) ; 
const int RX10_TEMP166 = 0 ; 
const int RX10_TEMP167 = RX10_TEMP165 < RX10_TEMP166 ; 
if ( RX10_TEMP167 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP168 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP168 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP169 = getPlaceFromDist2 ( RX10_TEMP163 , RX10_TEMP165 ) ; 
const int RX10_TEMP171 = /* here  */ 0 ; 
const int RX10_TEMP172 = RX10_TEMP169 != RX10_TEMP171 ; 
if ( RX10_TEMP172 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP170 = "Bad place access for array fieldCharge" ; 
fprintf(stderr, RX10_TEMP170 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( fieldCharge , RX10_TEMP165 , X10_TEMP114 ) ; 
} 

} 

struct Dist2 RX10_TEMP173 = guards .distValue ; 
struct Dist2 X10_TEMP115 = RX10_TEMP173 ; 
const int X10_TEMP116 = /* here  */ 0 ; 
struct Dist2 X10_TEMP118 = restrictDist2 ( X10_TEMP115 , X10_TEMP116 ) ; 
const int X10_TEMP119 = /* here  */ 0 ; 
struct Region2 RX10_TEMP175 = X10_TEMP118 .dReg ; 
const int RX10_TEMP178 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP176 = RX10_TEMP175 .regSize ; 
RX10_TEMP176 = RX10_TEMP176 - RX10_TEMP178 ; const int SX10_TEMP15 = 1 ; 
const int RX10_TEMP177 = RX10_TEMP176 + SX10_TEMP15 ; 
for ( int SX10_TEMP16 = 0 ; SX10_TEMP16 < RX10_TEMP177 ; SX10_TEMP16 ++ ) 
{ const int RX10_TEMP174 = SX10_TEMP16 ; 
const int RX10_TEMP179 = RX10_TEMP174 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP175 , RX10_TEMP179 ) ; 
/* async ( X10_TEMP119 )  */ 
{ struct Dist2 RX10_TEMP180 = localCharge .distValue ; 
struct Region2 RX10_TEMP181 = RX10_TEMP180 .dReg ; 
const int RX10_TEMP182 = searchPointInRegion2 ( RX10_TEMP181 , pt ) ; 
const int RX10_TEMP183 = 0 ; 
const int RX10_TEMP184 = RX10_TEMP182 < RX10_TEMP183 ; 
if ( RX10_TEMP184 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP185 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP185 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP186 = getPlaceFromDist2 ( RX10_TEMP180 , RX10_TEMP182 ) ; 
const int RX10_TEMP188 = /* here  */ 0 ; 
const int RX10_TEMP189 = RX10_TEMP186 != RX10_TEMP188 ; 
if ( RX10_TEMP189 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP187 = "Bad place access for array localCharge" ; 
fprintf(stderr, RX10_TEMP187 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP190 = getRefArrayValue2double ( localCharge , RX10_TEMP182 ) ; 
const double X10_TEMP123 = RX10_TEMP190 ; 
const double X10_TEMP124 = X10_TEMP123 ; 
struct Dist2 RX10_TEMP191 = guards .distValue ; 
struct Region2 RX10_TEMP192 = RX10_TEMP191 .dReg ; 
const int RX10_TEMP193 = searchPointInRegion2 ( RX10_TEMP192 , pt ) ; 
const int RX10_TEMP194 = 0 ; 
const int RX10_TEMP195 = RX10_TEMP193 < RX10_TEMP194 ; 
if ( RX10_TEMP195 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP196 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP196 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP197 = getPlaceFromDist2 ( RX10_TEMP191 , RX10_TEMP193 ) ; 
const int RX10_TEMP199 = /* here  */ 0 ; 
const int RX10_TEMP200 = RX10_TEMP197 != RX10_TEMP199 ; 
if ( RX10_TEMP200 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP198 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP198 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( guards , RX10_TEMP193 , X10_TEMP124 ) ; 
} 

} 

} 

} 

} 

} 

} 

void /*static*/LinearESOpenPIC2D_addGuards (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ,  struct doubleRefArray2 const guards ) 
{ struct Dist2 RX10_TEMP0 = guards .distValue ; 
struct Dist2 X10_TEMP1 = RX10_TEMP0 ; 
struct Dist2 dGuard = X10_TEMP1 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP4 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP2 = X10_TEMP4 .dReg ; 
const int RX10_TEMP5 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = RX10_TEMP2 .regSize ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP4 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP1 ; 
const int RX10_TEMP6 = RX10_TEMP1 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP2 , RX10_TEMP6 ) ; 
struct Region1 RX10_TEMP7 = X10_TEMP4 .dReg ; 
const int RX10_TEMP8 = searchPointInRegion1 ( RX10_TEMP7 , pl ) ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ const char * RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP4." ; 
fprintf(stderr, RX10_TEMP11 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP12 = getPlaceFromDist1 ( X10_TEMP4 , RX10_TEMP8 ) ; 
const int X10_TEMP5 = RX10_TEMP12 ; 
/* async ( X10_TEMP5 )  */ 
{ struct Dist2 RX10_TEMP13 = guards .distValue ; 
struct Dist2 dG = RX10_TEMP13 ; 
struct Region2 rLocalG = X10Util_get2DLRegion ( dG ) ; 
const int X10_TEMP9 = /* here  */ 0 ; 
const int X10_TEMP10 = /* X10_TEMP9 . isLast ( )  */ 1 ; 
const int X10_TEMP12 = ! X10_TEMP10 ; 
if ( X10_TEMP12 ) 
{ struct Region2 RX10_TEMP14 = rLocalG ; 
const int RX10_TEMP29 = rLocalG .regSize ; 
const int RX10_TEMP30 = 1 ; 
const int RX10_TEMP31 = RX10_TEMP29 - RX10_TEMP30 ; 
const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP28 = RX10_TEMP31 + SX10_TEMP2 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP3 = (double *)calloc(RX10_TEMP28,sizeof( double )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < RX10_TEMP28 ; SX10_TEMP4 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP4 ; 
const int RX10_TEMP16 = RX10_TEMP15 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP14 , RX10_TEMP16 ) ; 
struct Dist2 RX10_TEMP17 = guards .distValue ; 
struct Region2 RX10_TEMP18 = RX10_TEMP17 .dReg ; 
const int RX10_TEMP19 = searchPointInRegion2 ( RX10_TEMP18 , pt ) ; 
const int RX10_TEMP20 = 0 ; 
const int RX10_TEMP21 = RX10_TEMP19 < RX10_TEMP20 ; 
if ( RX10_TEMP21 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP22 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP22 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP23 = getPlaceFromDist2 ( RX10_TEMP17 , RX10_TEMP19 ) ; 
const int RX10_TEMP25 = /* here  */ 0 ; 
const int RX10_TEMP26 = RX10_TEMP23 != RX10_TEMP25 ; 
if ( RX10_TEMP26 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP27 = getRefArrayValue2double ( guards , RX10_TEMP19 ) ; 
const double X10_TEMP15 = RX10_TEMP27 ; 
SX10_TEMP3 [ RX10_TEMP15 ] = X10_TEMP15 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP32 = SX10_TEMP3 ; 
struct doubleValArray2 RX10_TEMP33  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP33/*Assignment*/, rLocalG , RX10_TEMP32 ) ; 
struct doubleValArray2 X10_TEMP16 = RX10_TEMP33 ; 
struct doubleValArray2 sBuffer = X10_TEMP16 ; 
/* finish  */ 
{ const int X10_TEMP18 = /* here  */ 0 ; 
const int X10_TEMP20 = /* X10_TEMP18 . next ( )  */ 0 ; 
/* async ( X10_TEMP20 )  */ 
{ struct Dist2 RX10_TEMP34 = data .distValue ; 
struct Dist2 dData = RX10_TEMP34 ; 
struct Region2 rLocalD = X10Util_get2DLRegion ( dData ) ; 
const int X10_TEMP24 = 0 ; 
const int X10_TEMP25 = 1 ; 
const int X10_TEMP26 = X10_TEMP24 - X10_TEMP25 ; 
const int X10_TEMP27 = /* here  */ 0 ; 
/*UpdatableVariableDeclaration*/ struct Region2 X10_TEMP28 = createNewRegion2RR ( X10_TEMP24 , X10_TEMP26 , X10_TEMP24 , X10_TEMP26 ) ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = rLocalD .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP5 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP5 ; 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP37 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP35 = SX10_TEMP6 ; 
const int RX10_TEMP39 = RX10_TEMP35 ; 
struct Point2 X10_TEMP29 = regionOrdinalPoint2 ( rLocalD , RX10_TEMP39 ) ; 
const int X10_TEMP30 = X10_TEMP29 .f0 ; 
const int X10_TEMP31 = X10_TEMP29 .f1 ; 
const int RX10_TEMP40 = regionContainsPoint2 ( rLocalG , X10_TEMP29 ) ; 
const int X10_TEMP32 = RX10_TEMP40 ; 
if ( X10_TEMP32 ) 
{ struct Region2 X10_TEMP33 = createNewRegion2RR ( X10_TEMP30 , X10_TEMP30 , X10_TEMP31 , X10_TEMP31 ) ; 
X10_TEMP28 = unionRegion2 ( X10_TEMP28 , X10_TEMP33 ) ; } 

} 

struct Region2 X10_TEMP34 = X10_TEMP28 ; 
struct Region2 X10_TEMP36 = X10_TEMP34 ; 
const int X10_TEMP38 = /* here  */ 0 ; 
const int RX10_TEMP44 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP42 = X10_TEMP36 .regSize ; 
RX10_TEMP42 = RX10_TEMP42 - RX10_TEMP44 ; const int SX10_TEMP7 = 1 ; 
const int RX10_TEMP43 = RX10_TEMP42 + SX10_TEMP7 ; 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP43 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP41 = SX10_TEMP8 ; 
const int RX10_TEMP45 = RX10_TEMP41 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP36 , RX10_TEMP45 ) ; 
/* async ( X10_TEMP38 )  */ 
{ struct Dist2 RX10_TEMP46 = data .distValue ; 
struct Region2 RX10_TEMP47 = RX10_TEMP46 .dReg ; 
const int RX10_TEMP48 = searchPointInRegion2 ( RX10_TEMP47 , pt ) ; 
const int RX10_TEMP49 = 0 ; 
const int RX10_TEMP50 = RX10_TEMP48 < RX10_TEMP49 ; 
if ( RX10_TEMP50 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP51 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP51 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP52 = getPlaceFromDist2 ( RX10_TEMP46 , RX10_TEMP48 ) ; 
const int RX10_TEMP54 = /* here  */ 0 ; 
const int RX10_TEMP55 = RX10_TEMP52 != RX10_TEMP54 ; 
if ( RX10_TEMP55 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP53 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP53 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP56 = getRefArrayValue2double ( data , RX10_TEMP48 ) ; 
const double X10_TEMP42 = RX10_TEMP56 ; 
struct Region2 RX10_TEMP57 = sBuffer .regionValue ; 
const int RX10_TEMP58 = searchPointInRegion2 ( RX10_TEMP57 , pt ) ; 
const int RX10_TEMP59 = 0 ; 
const int RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP62 = sBuffer .contents ; 
const double X10_TEMP43 = RX10_TEMP62 [ RX10_TEMP58 ] 
; 
const double X10_TEMP45 = X10_TEMP42 + X10_TEMP43 ; 
const double X10_TEMP46 = X10_TEMP45 ; 
struct Dist2 RX10_TEMP63 = data .distValue ; 
struct Region2 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion2 ( RX10_TEMP64 , pt ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist2 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( data , RX10_TEMP65 , X10_TEMP46 ) ; 
} 

} 

} 

} 

} 

const int X10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP76 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP74 = rLocalG .regSize ; 
RX10_TEMP74 = RX10_TEMP74 - RX10_TEMP76 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP75 = RX10_TEMP74 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP75 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP73 = SX10_TEMP10 ; 
const int RX10_TEMP77 = RX10_TEMP73 ; 
struct Point2 pt = regionOrdinalPoint2 ( rLocalG , RX10_TEMP77 ) ; 
/* async ( X10_TEMP48 )  */ 
{ const double X10_TEMP51 = 0.0; 
const double X10_TEMP52 = X10_TEMP51 ; 
struct Dist2 RX10_TEMP78 = guards .distValue ; 
struct Region2 RX10_TEMP79 = RX10_TEMP78 .dReg ; 
const int RX10_TEMP80 = searchPointInRegion2 ( RX10_TEMP79 , pt ) ; 
const int RX10_TEMP81 = 0 ; 
const int RX10_TEMP82 = RX10_TEMP80 < RX10_TEMP81 ; 
if ( RX10_TEMP82 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP83 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP83 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP84 = getPlaceFromDist2 ( RX10_TEMP78 , RX10_TEMP80 ) ; 
const int RX10_TEMP86 = /* here  */ 0 ; 
const int RX10_TEMP87 = RX10_TEMP84 != RX10_TEMP86 ; 
if ( RX10_TEMP87 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP85 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP85 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( guards , RX10_TEMP80 , X10_TEMP52 ) ; 
} 

} 

} 

} 

} 

} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_doubleDimensions (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ) 
{ struct Dist2 RX10_TEMP0 = data .distValue ; 
struct Region2 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region2 rData = RX10_TEMP1 ; 
const int X10_TEMP4 = 0 ; 
struct Region1 rData1 = X10Util_getRank2D ( rData , X10_TEMP4 ) ; 
const int X10_TEMP8 = 1 ; 
struct Region1 rData2 = X10Util_getRank2D ( rData , X10_TEMP8 ) ; 
const int X10_TEMP16 = 0 ; 
const int X10_TEMP11 = 2 ; 
const int X10_TEMP12 = rData1 .regSize ; 
const int X10_TEMP13 = X10_TEMP11 * X10_TEMP12 ; 
const int X10_TEMP14 = 1 ; 
const int X10_TEMP17 = X10_TEMP13 - X10_TEMP14 ; 
struct Region1 X10_TEMP28 = createNewRegion1R ( X10_TEMP16 , X10_TEMP17 ) ; 
const int X10_TEMP25 = 0 ; 
const int X10_TEMP20 = 2 ; 
const int X10_TEMP21 = rData2 .regSize ; 
const int X10_TEMP22 = X10_TEMP20 * X10_TEMP21 ; 
const int X10_TEMP23 = 1 ; 
const int X10_TEMP26 = X10_TEMP22 - X10_TEMP23 ; 
struct Region1 X10_TEMP29 = createNewRegion1R ( X10_TEMP25 , X10_TEMP26 ) ; 
struct Dist2 dResult = X10Util_distBlockStar2 ( X10_TEMP28 , X10_TEMP29 ) ; 
struct Region2 RX10_TEMP2 = dResult .dReg ; 
const int RX10_TEMP3 = 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP5 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP5 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP5 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP8 = (doubleStub *)calloc(RX10_TEMP7,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP6 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP9 = SX10_TEMP3 ; 
const int RX10_TEMP10 = /* here  */ 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 ; 
const int RX10_TEMP12 = /* place.places ( RX10_TEMP11 )  */ 0 
; 
const int RX10_TEMP13 = getDistLocalCount2 ( dResult , RX10_TEMP11 ) ; 
const int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4 ; 
/* async ( RX10_TEMP12 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP14 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP16,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP16 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP6 ; 
const double X10_TEMP32 = 0.0; 
SX10_TEMP5 [ RX10_TEMP15 ] = X10_TEMP32 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP17 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP18  ; 
doubleStub_doubleStub( &RX10_TEMP18/*Assignment*/, RX10_TEMP17 ) ; 
/* async ( RX10_TEMP10 )  */ 
{ RX10_TEMP8 [ RX10_TEMP9 ] = RX10_TEMP18 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP6 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP20 = RX10_TEMP8 [ RX10_TEMP21 ] 
; 
SX10_TEMP7 [ RX10_TEMP21 ] = RX10_TEMP20 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP19 = SX10_TEMP7 ; 
struct doubleRefArray2 RX10_TEMP22  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP22/*Assignment*/, dResult , RX10_TEMP19 ) ; 
struct doubleRefArray2 result = RX10_TEMP22 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP35 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP24 = X10_TEMP35 .dReg ; 
const int RX10_TEMP27 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = RX10_TEMP24 .regSize ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP26 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP10 ; 
const int RX10_TEMP28 = RX10_TEMP23 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP24 , RX10_TEMP28 ) ; 
struct Region1 RX10_TEMP29 = X10_TEMP35 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pl ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pl not found in the distribution X10_TEMP35." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP35 , RX10_TEMP30 ) ; 
const int X10_TEMP36 = RX10_TEMP34 ; 
/* async ( X10_TEMP36 )  */ 
{ const int X10_TEMP38 = pl .f0 ; 
const int X10_TEMP39 = 2 ; 
const int X10_TEMP41 = X10_TEMP38 / X10_TEMP39 ; 
const int pDst = /* place.places ( X10_TEMP41 )  */ 0 
; 
struct Dist2 RX10_TEMP35 = data .distValue ; 
struct Dist2 dData = RX10_TEMP35 ; 
struct Region2 rLocal = X10Util_get2DLRegion ( dData ) ; 
struct Region2 RX10_TEMP36 = rLocal ; 
const int RX10_TEMP51 = rLocal .regSize ; 
const int RX10_TEMP52 = 1 ; 
const int RX10_TEMP53 = RX10_TEMP51 - RX10_TEMP52 ; 
const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP50 = RX10_TEMP53 + SX10_TEMP11 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP12 = (double *)calloc(RX10_TEMP50,sizeof( double )); 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < RX10_TEMP50 ; SX10_TEMP13 ++ ) 
{ const int RX10_TEMP37 = SX10_TEMP13 ; 
const int RX10_TEMP38 = RX10_TEMP37 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP36 , RX10_TEMP38 ) ; 
struct Dist2 RX10_TEMP39 = data .distValue ; 
struct Region2 RX10_TEMP40 = RX10_TEMP39 .dReg ; 
const int RX10_TEMP41 = searchPointInRegion2 ( RX10_TEMP40 , pt ) ; 
const int RX10_TEMP42 = 0 ; 
const int RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42 ; 
if ( RX10_TEMP43 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP45 = getPlaceFromDist2 ( RX10_TEMP39 , RX10_TEMP41 ) ; 
const int RX10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47 ; 
if ( RX10_TEMP48 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP49 = getRefArrayValue2double ( data , RX10_TEMP41 ) ; 
const double X10_TEMP48 = RX10_TEMP49 ; 
SX10_TEMP12 [ RX10_TEMP37 ] = X10_TEMP48 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP54 = SX10_TEMP12 ; 
struct doubleValArray2 RX10_TEMP55  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP55/*Assignment*/, rLocal , RX10_TEMP54 ) ; 
struct doubleValArray2 X10_TEMP49 = RX10_TEMP55 ; 
struct doubleValArray2 sBuffer = X10_TEMP49 ; 
/* async ( pDst )  */ 
{ const int X10_TEMP53 = /* here  */ 0 ; 
const int RX10_TEMP59 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP57 = rLocal .regSize ; 
RX10_TEMP57 = RX10_TEMP57 - RX10_TEMP59 ; const int SX10_TEMP14 = 1 ; 
const int RX10_TEMP58 = RX10_TEMP57 + SX10_TEMP14 ; 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP58 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP56 = SX10_TEMP15 ; 
const int RX10_TEMP60 = RX10_TEMP56 ; 
struct Point2 pt = regionOrdinalPoint2 ( rLocal , RX10_TEMP60 ) ; 
/* async ( X10_TEMP53 )  */ 
{ struct Region2 RX10_TEMP61 = sBuffer .regionValue ; 
const int RX10_TEMP62 = searchPointInRegion2 ( RX10_TEMP61 , pt ) ; 
const int RX10_TEMP63 = 0 ; 
const int RX10_TEMP64 = RX10_TEMP62 < RX10_TEMP63 ; 
if ( RX10_TEMP64 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP66 = sBuffer .contents ; 
const double X10_TEMP57 = RX10_TEMP66 [ RX10_TEMP62 ] 
; 
const double X10_TEMP58 = X10_TEMP57 ; 
struct Dist2 RX10_TEMP67 = result .distValue ; 
struct Region2 RX10_TEMP68 = RX10_TEMP67 .dReg ; 
const int RX10_TEMP69 = searchPointInRegion2 ( RX10_TEMP68 , pt ) ; 
const int RX10_TEMP70 = 0 ; 
const int RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70 ; 
if ( RX10_TEMP71 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP72 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP72 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP73 = getPlaceFromDist2 ( RX10_TEMP67 , RX10_TEMP69 ) ; 
const int RX10_TEMP75 = /* here  */ 0 ; 
const int RX10_TEMP76 = RX10_TEMP73 != RX10_TEMP75 ; 
if ( RX10_TEMP76 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP69 , X10_TEMP58 ) ; 
} 

} 

} 

} 

} 

} 

return result ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_moveFieldToUniform (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ) 
{ struct Dist2 RX10_TEMP0 = data .distValue ; 
struct Region2 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region2 rData = RX10_TEMP1 ; 
struct Dist2 X10_TEMP5 = X10Util_distBlockStar1 ( rData ) ; 
struct doubleRefArray2 X10_TEMP7 = LinearESOpenPIC2D_moveFieldToDist ( X10_TEMP0 , data , X10_TEMP5 ) ; 
return X10_TEMP7 ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_moveFieldToDist (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ,  struct Dist2 const dDst ) 
{ const int MAX_ROWS = _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS ; 
const int MAX_ITER = 0 ; 
struct Dist1 X10_TEMP3 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP3 ; 
struct Dist2 RX10_TEMP0 = data .distValue ; 
struct Region2 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region2 rData = RX10_TEMP1 ; 
const int X10_TEMP8 = 0 ; 
struct Region1 rRank1 = X10Util_getRank2D ( rData , X10_TEMP8 ) ; 
const int X10_TEMP12 = 1 ; 
struct Region1 rRank2t = X10Util_getRank2D ( rData , X10_TEMP12 ) ; 
const int X10_TEMP18 = 0 ; 
const int X10_TEMP15 = rRank2t .regSize ; 
const int X10_TEMP16 = 1 ; 
const int X10_TEMP19 = X10_TEMP15 - X10_TEMP16 ; 
struct Region1 rRank2 = createNewRegion1R ( X10_TEMP18 , X10_TEMP19 ) ; 
const int X10_TEMP24 = 0 ; 
const int X10_TEMP22 = 1 ; 
const int X10_TEMP25 = MAX_ROWS - X10_TEMP22 ; 
struct Region1 rRows = createNewRegion1R ( X10_TEMP24 , X10_TEMP25 ) ; 
struct Dist2 X10_TEMP31 = X10Util_extendDistRank2D ( dUnique , rRows ) ; 
struct Dist3 dBuffer = X10Util_extendDistRank3D ( X10_TEMP31 , rRank2 ) ; 
struct Region3 RX10_TEMP2 = dBuffer .dReg ; 
const int RX10_TEMP3 = 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP5 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP5 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP5 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP8 = (doubleStub *)calloc(RX10_TEMP7,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP6 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP9 = SX10_TEMP3 ; 
const int RX10_TEMP10 = /* here  */ 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 ; 
const int RX10_TEMP12 = /* place.places ( RX10_TEMP11 )  */ 0 
; 
const int RX10_TEMP13 = getDistLocalCount3 ( dBuffer , RX10_TEMP11 ) ; 
const int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4 ; 
/* async ( RX10_TEMP12 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP14 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP16,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP16 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP6 ; 
const double X10_TEMP34 = 0.0; 
SX10_TEMP5 [ RX10_TEMP15 ] = X10_TEMP34 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP17 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP18  ; 
doubleStub_doubleStub( &RX10_TEMP18/*Assignment*/, RX10_TEMP17 ) ; 
/* async ( RX10_TEMP10 )  */ 
{ RX10_TEMP8 [ RX10_TEMP9 ] = RX10_TEMP18 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP6 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP20 = RX10_TEMP8 [ RX10_TEMP21 ] 
; 
SX10_TEMP7 [ RX10_TEMP21 ] = RX10_TEMP20 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP19 = SX10_TEMP7 ; 
struct doubleRefArray3 RX10_TEMP22  ; 
doubleRefArray3_doubleRefArray3( &RX10_TEMP22/*Assignment*/, dBuffer , RX10_TEMP19 ) ; 
struct doubleRefArray3 srcBuffer = RX10_TEMP22 ; 
struct Region3 RX10_TEMP23 = dBuffer .dReg ; 
const int RX10_TEMP24 = 0 ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP26 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP26 = RX10_TEMP26 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP27 = RX10_TEMP26 + SX10_TEMP9 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP28 = RX10_TEMP26 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP29 = (doubleStub *)calloc(RX10_TEMP28,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP27 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP30 = SX10_TEMP12 ; 
const int RX10_TEMP31 = /* here  */ 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 ; 
const int RX10_TEMP33 = /* place.places ( RX10_TEMP32 )  */ 0 
; 
const int RX10_TEMP34 = getDistLocalCount3 ( dBuffer , RX10_TEMP32 ) ; 
const int RX10_TEMP35 = RX10_TEMP34 - RX10_TEMP25 ; 
/* async ( RX10_TEMP33 )  */ 
{ const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP35 + SX10_TEMP13 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP14 = (double *)calloc(RX10_TEMP37,sizeof( double )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP37 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP36 = SX10_TEMP15 ; 
const double X10_TEMP37 = 0.0; 
SX10_TEMP14 [ RX10_TEMP36 ] = X10_TEMP37 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP38 = SX10_TEMP14 ; 
struct doubleStub RX10_TEMP39  ; 
doubleStub_doubleStub( &RX10_TEMP39/*Assignment*/, RX10_TEMP38 ) ; 
/* async ( RX10_TEMP31 )  */ 
{ RX10_TEMP29 [ RX10_TEMP30 ] = RX10_TEMP39 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP16 = (doubleStub *)calloc(RX10_TEMP27,sizeof( doubleStub )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP27 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP42 = SX10_TEMP17 ; 
struct doubleStub RX10_TEMP41 = RX10_TEMP29 [ RX10_TEMP42 ] 
; 
SX10_TEMP16 [ RX10_TEMP42 ] = RX10_TEMP41 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP40 = SX10_TEMP16 ; 
struct doubleRefArray3 RX10_TEMP43  ; 
doubleRefArray3_doubleRefArray3( &RX10_TEMP43/*Assignment*/, dBuffer , RX10_TEMP40 ) ; 
struct doubleRefArray3 dstBuffer = RX10_TEMP43 ; 
struct Region1 RX10_TEMP44 = dUnique .dReg ; 
const int RX10_TEMP45 = 0 ; 
const int RX10_TEMP46 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP47 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP47 = RX10_TEMP47 - RX10_TEMP46 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP48 = RX10_TEMP47 + SX10_TEMP18 ; 
const int SX10_TEMP19 = 1 ; 
const int RX10_TEMP49 = RX10_TEMP47 + SX10_TEMP19 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP50 = (intStub *)calloc(RX10_TEMP49,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP48 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP51 = SX10_TEMP21 ; 
const int RX10_TEMP52 = /* here  */ 0 ; 
const int RX10_TEMP53 = RX10_TEMP51 ; 
const int RX10_TEMP54 = /* place.places ( RX10_TEMP53 )  */ 0 
; 
const int RX10_TEMP55 = getDistLocalCount1 ( dUnique , RX10_TEMP53 ) ; 
const int RX10_TEMP56 = RX10_TEMP55 - RX10_TEMP46 ; 
/* async ( RX10_TEMP54 )  */ 
{ const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP58 = RX10_TEMP56 + SX10_TEMP22 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP23 = (int *)calloc(RX10_TEMP58,sizeof( int )); 
for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP58 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP57 = SX10_TEMP24 ; 
const int X10_TEMP40 = 0 ; 
SX10_TEMP23 [ RX10_TEMP57 ] = X10_TEMP40 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP59 = SX10_TEMP23 ; 
struct intStub RX10_TEMP60  ; 
intStub_intStub( &RX10_TEMP60/*Assignment*/, RX10_TEMP59 ) ; 
/* async ( RX10_TEMP52 )  */ 
{ RX10_TEMP50 [ RX10_TEMP51 ] = RX10_TEMP60 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP25 = (intStub *)calloc(RX10_TEMP48,sizeof( intStub )); 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP48 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP63 = SX10_TEMP26 ; 
struct intStub RX10_TEMP62 = RX10_TEMP50 [ RX10_TEMP63 ] 
; 
SX10_TEMP25 [ RX10_TEMP63 ] = RX10_TEMP62 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP61 = SX10_TEMP25 ; 
struct intRefArray1 RX10_TEMP64  ; 
intRefArray1_intRefArray1( &RX10_TEMP64/*Assignment*/, dUnique , RX10_TEMP61 ) ; 
struct intRefArray1 offsets = RX10_TEMP64 ; 
struct Region1 RX10_TEMP65 = dUnique .dReg ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP68 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67 ; const int SX10_TEMP27 = 1 ; 
const int RX10_TEMP69 = RX10_TEMP68 + SX10_TEMP27 ; 
const int SX10_TEMP28 = 1 ; 
const int RX10_TEMP70 = RX10_TEMP68 + SX10_TEMP28 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP71 = (intStub *)calloc(RX10_TEMP70,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP30 = 0 ; SX10_TEMP30 < RX10_TEMP69 ; SX10_TEMP30 ++ ) 
{ const int RX10_TEMP72 = SX10_TEMP30 ; 
const int RX10_TEMP73 = /* here  */ 0 ; 
const int RX10_TEMP74 = RX10_TEMP72 ; 
const int RX10_TEMP75 = /* place.places ( RX10_TEMP74 )  */ 0 
; 
const int RX10_TEMP76 = getDistLocalCount1 ( dUnique , RX10_TEMP74 ) ; 
const int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67 ; 
/* async ( RX10_TEMP75 )  */ 
{ const int SX10_TEMP31 = 1 ; 
const int RX10_TEMP79 = RX10_TEMP77 + SX10_TEMP31 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP32 = (int *)calloc(RX10_TEMP79,sizeof( int )); 
for ( int SX10_TEMP33 = 0 ; SX10_TEMP33 < RX10_TEMP79 ; SX10_TEMP33 ++ ) 
{ const int RX10_TEMP78 = SX10_TEMP33 ; 
const int X10_TEMP43 = 0 ; 
SX10_TEMP32 [ RX10_TEMP78 ] = X10_TEMP43 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP80 = SX10_TEMP32 ; 
struct intStub RX10_TEMP81  ; 
intStub_intStub( &RX10_TEMP81/*Assignment*/, RX10_TEMP80 ) ; 
/* async ( RX10_TEMP73 )  */ 
{ RX10_TEMP71 [ RX10_TEMP72 ] = RX10_TEMP81 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP34 = (intStub *)calloc(RX10_TEMP69,sizeof( intStub )); 
for ( int SX10_TEMP35 = 0 ; SX10_TEMP35 < RX10_TEMP69 ; SX10_TEMP35 ++ ) 
{ const int RX10_TEMP84 = SX10_TEMP35 ; 
struct intStub RX10_TEMP83 = RX10_TEMP71 [ RX10_TEMP84 ] 
; 
SX10_TEMP34 [ RX10_TEMP84 ] = RX10_TEMP83 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP82 = SX10_TEMP34 ; 
struct intRefArray1 RX10_TEMP85  ; 
intRefArray1_intRefArray1( &RX10_TEMP85/*Assignment*/, dUnique , RX10_TEMP82 ) ; 
struct intRefArray1 sizes = RX10_TEMP85 ; 
struct Region1 RX10_TEMP86 = dUnique .dReg ; 
const int RX10_TEMP87 = 0 ; 
const int RX10_TEMP88 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP89 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP89 = RX10_TEMP89 - RX10_TEMP88 ; const int SX10_TEMP36 = 1 ; 
const int RX10_TEMP90 = RX10_TEMP89 + SX10_TEMP36 ; 
const int SX10_TEMP37 = 1 ; 
const int RX10_TEMP91 = RX10_TEMP89 + SX10_TEMP37 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP92 = (intStub *)calloc(RX10_TEMP91,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP39 = 0 ; SX10_TEMP39 < RX10_TEMP90 ; SX10_TEMP39 ++ ) 
{ const int RX10_TEMP93 = SX10_TEMP39 ; 
const int RX10_TEMP94 = /* here  */ 0 ; 
const int RX10_TEMP95 = RX10_TEMP93 ; 
const int RX10_TEMP96 = /* place.places ( RX10_TEMP95 )  */ 0 
; 
const int RX10_TEMP97 = getDistLocalCount1 ( dUnique , RX10_TEMP95 ) ; 
const int RX10_TEMP98 = RX10_TEMP97 - RX10_TEMP88 ; 
/* async ( RX10_TEMP96 )  */ 
{ const int SX10_TEMP40 = 1 ; 
const int RX10_TEMP100 = RX10_TEMP98 + SX10_TEMP40 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP41 = (int *)calloc(RX10_TEMP100,sizeof( int )); 
for ( int SX10_TEMP42 = 0 ; SX10_TEMP42 < RX10_TEMP100 ; SX10_TEMP42 ++ ) 
{ const int RX10_TEMP99 = SX10_TEMP42 ; 
const int X10_TEMP46 = 0 ; 
SX10_TEMP41 [ RX10_TEMP99 ] = X10_TEMP46 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP101 = SX10_TEMP41 ; 
struct intStub RX10_TEMP102  ; 
intStub_intStub( &RX10_TEMP102/*Assignment*/, RX10_TEMP101 ) ; 
/* async ( RX10_TEMP94 )  */ 
{ RX10_TEMP92 [ RX10_TEMP93 ] = RX10_TEMP102 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP43 = (intStub *)calloc(RX10_TEMP90,sizeof( intStub )); 
for ( int SX10_TEMP44 = 0 ; SX10_TEMP44 < RX10_TEMP90 ; SX10_TEMP44 ++ ) 
{ const int RX10_TEMP105 = SX10_TEMP44 ; 
struct intStub RX10_TEMP104 = RX10_TEMP92 [ RX10_TEMP105 ] 
; 
SX10_TEMP43 [ RX10_TEMP105 ] = RX10_TEMP104 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP103 = SX10_TEMP43 ; 
struct intRefArray1 RX10_TEMP106  ; 
intRefArray1_intRefArray1( &RX10_TEMP106/*Assignment*/, dUnique , RX10_TEMP103 ) ; 
struct intRefArray1 inLt = RX10_TEMP106 ; 
struct Region1 RX10_TEMP107 = dUnique .dReg ; 
const int RX10_TEMP108 = 0 ; 
const int RX10_TEMP109 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP110 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP110 = RX10_TEMP110 - RX10_TEMP109 ; const int SX10_TEMP45 = 1 ; 
const int RX10_TEMP111 = RX10_TEMP110 + SX10_TEMP45 ; 
const int SX10_TEMP46 = 1 ; 
const int RX10_TEMP112 = RX10_TEMP110 + SX10_TEMP46 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP113 = (intStub *)calloc(RX10_TEMP112,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP48 = 0 ; SX10_TEMP48 < RX10_TEMP111 ; SX10_TEMP48 ++ ) 
{ const int RX10_TEMP114 = SX10_TEMP48 ; 
const int RX10_TEMP115 = /* here  */ 0 ; 
const int RX10_TEMP116 = RX10_TEMP114 ; 
const int RX10_TEMP117 = /* place.places ( RX10_TEMP116 )  */ 0 
; 
const int RX10_TEMP118 = getDistLocalCount1 ( dUnique , RX10_TEMP116 ) ; 
const int RX10_TEMP119 = RX10_TEMP118 - RX10_TEMP109 ; 
/* async ( RX10_TEMP117 )  */ 
{ const int SX10_TEMP49 = 1 ; 
const int RX10_TEMP121 = RX10_TEMP119 + SX10_TEMP49 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP50 = (int *)calloc(RX10_TEMP121,sizeof( int )); 
for ( int SX10_TEMP51 = 0 ; SX10_TEMP51 < RX10_TEMP121 ; SX10_TEMP51 ++ ) 
{ const int RX10_TEMP120 = SX10_TEMP51 ; 
const int X10_TEMP49 = 0 ; 
SX10_TEMP50 [ RX10_TEMP120 ] = X10_TEMP49 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP122 = SX10_TEMP50 ; 
struct intStub RX10_TEMP123  ; 
intStub_intStub( &RX10_TEMP123/*Assignment*/, RX10_TEMP122 ) ; 
/* async ( RX10_TEMP115 )  */ 
{ RX10_TEMP113 [ RX10_TEMP114 ] = RX10_TEMP123 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP52 = (intStub *)calloc(RX10_TEMP111,sizeof( intStub )); 
for ( int SX10_TEMP53 = 0 ; SX10_TEMP53 < RX10_TEMP111 ; SX10_TEMP53 ++ ) 
{ const int RX10_TEMP126 = SX10_TEMP53 ; 
struct intStub RX10_TEMP125 = RX10_TEMP113 [ RX10_TEMP126 ] 
; 
SX10_TEMP52 [ RX10_TEMP126 ] = RX10_TEMP125 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP124 = SX10_TEMP52 ; 
struct intRefArray1 RX10_TEMP127  ; 
intRefArray1_intRefArray1( &RX10_TEMP127/*Assignment*/, dUnique , RX10_TEMP124 ) ; 
struct intRefArray1 inRt = RX10_TEMP127 ; 
struct Region1 RX10_TEMP128 = dUnique .dReg ; 
const int RX10_TEMP129 = 0 ; 
const int RX10_TEMP130 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP131 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP131 = RX10_TEMP131 - RX10_TEMP130 ; const int SX10_TEMP54 = 1 ; 
const int RX10_TEMP132 = RX10_TEMP131 + SX10_TEMP54 ; 
const int SX10_TEMP55 = 1 ; 
const int RX10_TEMP133 = RX10_TEMP131 + SX10_TEMP55 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP134 = (intStub *)calloc(RX10_TEMP133,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP57 = 0 ; SX10_TEMP57 < RX10_TEMP132 ; SX10_TEMP57 ++ ) 
{ const int RX10_TEMP135 = SX10_TEMP57 ; 
const int RX10_TEMP136 = /* here  */ 0 ; 
const int RX10_TEMP137 = RX10_TEMP135 ; 
const int RX10_TEMP138 = /* place.places ( RX10_TEMP137 )  */ 0 
; 
const int RX10_TEMP139 = getDistLocalCount1 ( dUnique , RX10_TEMP137 ) ; 
const int RX10_TEMP140 = RX10_TEMP139 - RX10_TEMP130 ; 
/* async ( RX10_TEMP138 )  */ 
{ const int SX10_TEMP58 = 1 ; 
const int RX10_TEMP142 = RX10_TEMP140 + SX10_TEMP58 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP59 = (int *)calloc(RX10_TEMP142,sizeof( int )); 
for ( int SX10_TEMP60 = 0 ; SX10_TEMP60 < RX10_TEMP142 ; SX10_TEMP60 ++ ) 
{ const int RX10_TEMP141 = SX10_TEMP60 ; 
const int X10_TEMP52 = 0 ; 
SX10_TEMP59 [ RX10_TEMP141 ] = X10_TEMP52 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP143 = SX10_TEMP59 ; 
struct intStub RX10_TEMP144  ; 
intStub_intStub( &RX10_TEMP144/*Assignment*/, RX10_TEMP143 ) ; 
/* async ( RX10_TEMP136 )  */ 
{ RX10_TEMP134 [ RX10_TEMP135 ] = RX10_TEMP144 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP61 = (intStub *)calloc(RX10_TEMP132,sizeof( intStub )); 
for ( int SX10_TEMP62 = 0 ; SX10_TEMP62 < RX10_TEMP132 ; SX10_TEMP62 ++ ) 
{ const int RX10_TEMP147 = SX10_TEMP62 ; 
struct intStub RX10_TEMP146 = RX10_TEMP134 [ RX10_TEMP147 ] 
; 
SX10_TEMP61 [ RX10_TEMP147 ] = RX10_TEMP146 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP145 = SX10_TEMP61 ; 
struct intRefArray1 RX10_TEMP148  ; 
intRefArray1_intRefArray1( &RX10_TEMP148/*Assignment*/, dUnique , RX10_TEMP145 ) ; 
struct intRefArray1 outLt = RX10_TEMP148 ; 
struct Region1 RX10_TEMP149 = dUnique .dReg ; 
const int RX10_TEMP150 = 0 ; 
const int RX10_TEMP151 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP152 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP152 = RX10_TEMP152 - RX10_TEMP151 ; const int SX10_TEMP63 = 1 ; 
const int RX10_TEMP153 = RX10_TEMP152 + SX10_TEMP63 ; 
const int SX10_TEMP64 = 1 ; 
const int RX10_TEMP154 = RX10_TEMP152 + SX10_TEMP64 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP155 = (intStub *)calloc(RX10_TEMP154,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP66 = 0 ; SX10_TEMP66 < RX10_TEMP153 ; SX10_TEMP66 ++ ) 
{ const int RX10_TEMP156 = SX10_TEMP66 ; 
const int RX10_TEMP157 = /* here  */ 0 ; 
const int RX10_TEMP158 = RX10_TEMP156 ; 
const int RX10_TEMP159 = /* place.places ( RX10_TEMP158 )  */ 0 
; 
const int RX10_TEMP160 = getDistLocalCount1 ( dUnique , RX10_TEMP158 ) ; 
const int RX10_TEMP161 = RX10_TEMP160 - RX10_TEMP151 ; 
/* async ( RX10_TEMP159 )  */ 
{ const int SX10_TEMP67 = 1 ; 
const int RX10_TEMP163 = RX10_TEMP161 + SX10_TEMP67 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP68 = (int *)calloc(RX10_TEMP163,sizeof( int )); 
for ( int SX10_TEMP69 = 0 ; SX10_TEMP69 < RX10_TEMP163 ; SX10_TEMP69 ++ ) 
{ const int RX10_TEMP162 = SX10_TEMP69 ; 
const int X10_TEMP55 = 0 ; 
SX10_TEMP68 [ RX10_TEMP162 ] = X10_TEMP55 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP164 = SX10_TEMP68 ; 
struct intStub RX10_TEMP165  ; 
intStub_intStub( &RX10_TEMP165/*Assignment*/, RX10_TEMP164 ) ; 
/* async ( RX10_TEMP157 )  */ 
{ RX10_TEMP155 [ RX10_TEMP156 ] = RX10_TEMP165 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP70 = (intStub *)calloc(RX10_TEMP153,sizeof( intStub )); 
for ( int SX10_TEMP71 = 0 ; SX10_TEMP71 < RX10_TEMP153 ; SX10_TEMP71 ++ ) 
{ const int RX10_TEMP168 = SX10_TEMP71 ; 
struct intStub RX10_TEMP167 = RX10_TEMP155 [ RX10_TEMP168 ] 
; 
SX10_TEMP70 [ RX10_TEMP168 ] = RX10_TEMP167 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP166 = SX10_TEMP70 ; 
struct intRefArray1 RX10_TEMP169  ; 
intRefArray1_intRefArray1( &RX10_TEMP169/*Assignment*/, dUnique , RX10_TEMP166 ) ; 
struct intRefArray1 outRt = RX10_TEMP169 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP58 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP171 = X10_TEMP58 .dReg ; 
const int RX10_TEMP174 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP172 = RX10_TEMP171 .regSize ; 
RX10_TEMP172 = RX10_TEMP172 - RX10_TEMP174 ; const int SX10_TEMP72 = 1 ; 
const int RX10_TEMP173 = RX10_TEMP172 + SX10_TEMP72 ; 
for ( int SX10_TEMP73 = 0 ; SX10_TEMP73 < RX10_TEMP173 ; SX10_TEMP73 ++ ) 
{ const int RX10_TEMP170 = SX10_TEMP73 ; 
const int RX10_TEMP175 = RX10_TEMP170 ; 
struct Point1 X10_TEMP59 = regionOrdinalPoint1 ( RX10_TEMP171 , RX10_TEMP175 ) ; 
const int pl = X10_TEMP59 .f0 ; 
struct Region1 RX10_TEMP176 = X10_TEMP58 .dReg ; 
const int RX10_TEMP177 = searchPointInRegion1 ( RX10_TEMP176 , X10_TEMP59 ) ; 
const int RX10_TEMP178 = 0 ; 
const int RX10_TEMP179 = RX10_TEMP177 < RX10_TEMP178 ; 
if ( RX10_TEMP179 ) 
{ const char * RX10_TEMP180 = "Point X10_TEMP59 not found in the distribution X10_TEMP58." ; 
fprintf(stderr, RX10_TEMP180 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP181 = getPlaceFromDist1 ( X10_TEMP58 , RX10_TEMP177 ) ; 
const int X10_TEMP60 = RX10_TEMP181 ; 
/* async ( X10_TEMP60 )  */ 
{ struct Dist2 RX10_TEMP182 = data .distValue ; 
struct Dist2 dData = RX10_TEMP182 ; 
struct Region2 rLocal = X10Util_get2DLRegion ( dData ) ; 
const int X10_TEMP66 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank2D ( rLocal , X10_TEMP66 ) ; 
const int X10_TEMP68 = rLocal1 .regSize ; 
const int X10_TEMP69 = 0 ; 
const int X10_TEMP70 = X10_TEMP68 == X10_TEMP69 ; 
const int X10_TEMP72 = _X10Util_ENABLE_CHECKS && X10_TEMP70 ; 
if ( X10_TEMP72 ) 
{ const char * X10_TEMP74 = "Region empty -- should not happen" ; 
fprintf(stderr, X10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP183 = rLocal1 .regSize ; 
const int RX10_TEMP184 = 0 ; 
const int RX10_TEMP185 = RX10_TEMP183 <= RX10_TEMP184 ; 
if ( RX10_TEMP185 ) 
{ const char * RX10_TEMP186 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP186 ) ; 
exit(EXIT_FAILURE);
} 

const int offset = regionLow ( rLocal1 ) ; 
const int X10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP191 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP189 = rLocal .regSize ; 
RX10_TEMP189 = RX10_TEMP189 - RX10_TEMP191 ; const int SX10_TEMP74 = 1 ; 
const int RX10_TEMP190 = RX10_TEMP189 + SX10_TEMP74 ; 
for ( int SX10_TEMP75 = 0 ; SX10_TEMP75 < RX10_TEMP190 ; SX10_TEMP75 ++ ) 
{ const int RX10_TEMP187 = SX10_TEMP75 ; 
const int RX10_TEMP192 = RX10_TEMP187 ; 
struct Point2 RX10_TEMP188 = regionOrdinalPoint2 ( rLocal , RX10_TEMP192 ) ; 
const int i = RX10_TEMP188 .f0 ; 
const int j = RX10_TEMP188 .f1 ; 
/* async ( X10_TEMP77 )  */ 
{ const int X10_TEMP81 = i - offset ; 
struct Point2 RX10_TEMP193  ; 
Point2_Point2( &RX10_TEMP193/*Assignment*/, i , j ) ; 
struct Dist2 RX10_TEMP194 = data .distValue ; 
struct Region2 RX10_TEMP195 = RX10_TEMP194 .dReg ; 
const int RX10_TEMP196 = searchPointInRegion2 ( RX10_TEMP195 , RX10_TEMP193 ) ; 
const int RX10_TEMP197 = 0 ; 
const int RX10_TEMP198 = RX10_TEMP196 < RX10_TEMP197 ; 
if ( RX10_TEMP198 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP199 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP199 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP200 = getPlaceFromDist2 ( RX10_TEMP194 , RX10_TEMP196 ) ; 
const int RX10_TEMP202 = /* here  */ 0 ; 
const int RX10_TEMP203 = RX10_TEMP200 != RX10_TEMP202 ; 
if ( RX10_TEMP203 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP201 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP201 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP204 = getRefArrayValue2double ( data , RX10_TEMP196 ) ; 
const double X10_TEMP85 = RX10_TEMP204 ; 
const double X10_TEMP86 = X10_TEMP85 ; 
struct Point3 RX10_TEMP205  ; 
Point3_Point3( &RX10_TEMP205/*Assignment*/, pl , X10_TEMP81 , j ) ; 
struct Dist3 RX10_TEMP206 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP207 = RX10_TEMP206 .dReg ; 
const int RX10_TEMP208 = searchPointInRegion3 ( RX10_TEMP207 , RX10_TEMP205 ) ; 
const int RX10_TEMP209 = 0 ; 
const int RX10_TEMP210 = RX10_TEMP208 < RX10_TEMP209 ; 
if ( RX10_TEMP210 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP211 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP211 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP212 = getPlaceFromDist3 ( RX10_TEMP206 , RX10_TEMP208 ) ; 
const int RX10_TEMP214 = /* here  */ 0 ; 
const int RX10_TEMP215 = RX10_TEMP212 != RX10_TEMP214 ; 
if ( RX10_TEMP215 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP213 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP213 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( srcBuffer , RX10_TEMP208 , X10_TEMP86 ) ; 
} 

} 

const int X10_TEMP89 = rLocal1 .regSize ; 
const int X10_TEMP90 = X10_TEMP89 ; 
struct Point1 RX10_TEMP216  ; 
Point1_Point1( &RX10_TEMP216/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP217 = sizes .distValue ; 
struct Region1 RX10_TEMP218 = RX10_TEMP217 .dReg ; 
const int RX10_TEMP219 = searchPointInRegion1 ( RX10_TEMP218 , RX10_TEMP216 ) ; 
const int RX10_TEMP220 = 0 ; 
const int RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220 ; 
if ( RX10_TEMP221 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP222 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP222 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP223 = getPlaceFromDist1 ( RX10_TEMP217 , RX10_TEMP219 ) ; 
const int RX10_TEMP225 = /* here  */ 0 ; 
const int RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225 ; 
if ( RX10_TEMP226 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP224 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP224 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP219 , X10_TEMP90 ) ; 
const int X10_TEMP93 = offset ; 
struct Point1 RX10_TEMP227  ; 
Point1_Point1( &RX10_TEMP227/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP228 = offsets .distValue ; 
struct Region1 RX10_TEMP229 = RX10_TEMP228 .dReg ; 
const int RX10_TEMP230 = searchPointInRegion1 ( RX10_TEMP229 , RX10_TEMP227 ) ; 
const int RX10_TEMP231 = 0 ; 
const int RX10_TEMP232 = RX10_TEMP230 < RX10_TEMP231 ; 
if ( RX10_TEMP232 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP233 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP233 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP234 = getPlaceFromDist1 ( RX10_TEMP228 , RX10_TEMP230 ) ; 
const int RX10_TEMP236 = /* here  */ 0 ; 
const int RX10_TEMP237 = RX10_TEMP234 != RX10_TEMP236 ; 
if ( RX10_TEMP237 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP235 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP235 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( offsets , RX10_TEMP230 , X10_TEMP93 ) ; 
} 

} 

} 

/*UpdatableVariableDeclaration*/int mter = MAX_ITER ; 
/*UpdatableVariableDeclaration*/int iter = 0 ; 
/*UpdatableVariableDeclaration*/int done = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP97 = 0 ; 
do 
{ /* finish  */ 
{ struct Dist1 X10_TEMP99 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP239 = X10_TEMP99 .dReg ; 
const int RX10_TEMP242 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP240 = RX10_TEMP239 .regSize ; 
RX10_TEMP240 = RX10_TEMP240 - RX10_TEMP242 ; const int SX10_TEMP76 = 1 ; 
const int RX10_TEMP241 = RX10_TEMP240 + SX10_TEMP76 ; 
for ( int SX10_TEMP77 = 0 ; SX10_TEMP77 < RX10_TEMP241 ; SX10_TEMP77 ++ ) 
{ const int RX10_TEMP238 = SX10_TEMP77 ; 
const int RX10_TEMP243 = RX10_TEMP238 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP239 , RX10_TEMP243 ) ; 
struct Region1 RX10_TEMP244 = X10_TEMP99 .dReg ; 
const int RX10_TEMP245 = searchPointInRegion1 ( RX10_TEMP244 , pl ) ; 
const int RX10_TEMP246 = 0 ; 
const int RX10_TEMP247 = RX10_TEMP245 < RX10_TEMP246 ; 
if ( RX10_TEMP247 ) 
{ const char * RX10_TEMP248 = "Point pl not found in the distribution X10_TEMP99." ; 
fprintf(stderr, RX10_TEMP248 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP249 = getPlaceFromDist1 ( X10_TEMP99 , RX10_TEMP245 ) ; 
const int X10_TEMP100 = RX10_TEMP249 ; 
/* async ( X10_TEMP100 )  */ 
{ struct Region2 rLocalD = X10Util_get2DLRegion ( dDst ) ; 
const int X10_TEMP105 = 0 ; 
struct Region1 rLocalD1 = X10Util_getRank2D ( rLocalD , X10_TEMP105 ) ; 
const int X10_TEMP107 = rLocalD1 .regSize ; 
const int X10_TEMP108 = 0 ; 
const int X10_TEMP109 = X10_TEMP107 == X10_TEMP108 ; 
const int X10_TEMP111 = _X10Util_ENABLE_CHECKS && X10_TEMP109 ; 
if ( X10_TEMP111 ) 
{ const char * X10_TEMP112 = "Region empty -- " ; 
const char * X10_TEMP113 = "cannot to move grids" ; 
/*ASSIGNMENT STRING*/
 char * tempC63 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC63, "%s%s",X10_TEMP112,X10_TEMP113);
const char * X10_TEMP115 = tempC63;; 
fprintf(stderr, X10_TEMP115 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP118 = 0 ; 
const int X10_TEMP119 = X10_TEMP118 ; 
struct Dist1 RX10_TEMP250 = outLt .distValue ; 
struct Region1 RX10_TEMP251 = RX10_TEMP250 .dReg ; 
const int RX10_TEMP252 = searchPointInRegion1 ( RX10_TEMP251 , pl ) ; 
const int RX10_TEMP253 = 0 ; 
const int RX10_TEMP254 = RX10_TEMP252 < RX10_TEMP253 ; 
if ( RX10_TEMP254 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP255 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP255 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP256 = getPlaceFromDist1 ( RX10_TEMP250 , RX10_TEMP252 ) ; 
const int RX10_TEMP258 = /* here  */ 0 ; 
const int RX10_TEMP259 = RX10_TEMP256 != RX10_TEMP258 ; 
if ( RX10_TEMP259 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP257 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP257 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP252 , X10_TEMP119 ) ; 
const int X10_TEMP122 = 0 ; 
const int X10_TEMP123 = X10_TEMP122 ; 
struct Dist1 RX10_TEMP260 = outRt .distValue ; 
struct Region1 RX10_TEMP261 = RX10_TEMP260 .dReg ; 
const int RX10_TEMP262 = searchPointInRegion1 ( RX10_TEMP261 , pl ) ; 
const int RX10_TEMP263 = 0 ; 
const int RX10_TEMP264 = RX10_TEMP262 < RX10_TEMP263 ; 
if ( RX10_TEMP264 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP265 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP265 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP266 = getPlaceFromDist1 ( RX10_TEMP260 , RX10_TEMP262 ) ; 
const int RX10_TEMP268 = /* here  */ 0 ; 
const int RX10_TEMP269 = RX10_TEMP266 != RX10_TEMP268 ; 
if ( RX10_TEMP269 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP267 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP267 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP262 , X10_TEMP123 ) ; 
const int RX10_TEMP270 = rLocalD1 .regSize ; 
const int RX10_TEMP271 = 0 ; 
const int RX10_TEMP272 = RX10_TEMP270 <= RX10_TEMP271 ; 
if ( RX10_TEMP272 ) 
{ const char * RX10_TEMP273 = "Operation low() not defined on empty region rLocalD1" ; 
fprintf(stderr, RX10_TEMP273 ) ; 
exit(EXIT_FAILURE);
} 

const int lBorder = regionLow ( rLocalD1 ) ; 
const int RX10_TEMP274 = rLocalD1 .regSize ; 
const int RX10_TEMP275 = 0 ; 
const int RX10_TEMP276 = RX10_TEMP274 <= RX10_TEMP275 ; 
if ( RX10_TEMP276 ) 
{ const char * RX10_TEMP277 = "Operation high() not defined on empty region rLocalD1" ; 
fprintf(stderr, RX10_TEMP277 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP125 = regionHigh ( rLocalD1 ) ; 
const int X10_TEMP126 = 1 ; 
const int rBorder = X10_TEMP125 + X10_TEMP126 ; 
const int X10_TEMP133 = 0 ; 
struct Dist1 RX10_TEMP278 = sizes .distValue ; 
struct Region1 RX10_TEMP279 = RX10_TEMP278 .dReg ; 
const int RX10_TEMP280 = searchPointInRegion1 ( RX10_TEMP279 , pl ) ; 
const int RX10_TEMP281 = 0 ; 
const int RX10_TEMP282 = RX10_TEMP280 < RX10_TEMP281 ; 
if ( RX10_TEMP282 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP283 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP283 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP284 = getPlaceFromDist1 ( RX10_TEMP278 , RX10_TEMP280 ) ; 
const int RX10_TEMP286 = /* here  */ 0 ; 
const int RX10_TEMP287 = RX10_TEMP284 != RX10_TEMP286 ; 
if ( RX10_TEMP287 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP285 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP285 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP288 = getRefArrayValue1int ( sizes , RX10_TEMP280 ) ; 
const int X10_TEMP130 = RX10_TEMP288 ; 
const int X10_TEMP131 = 1 ; 
const int X10_TEMP134 = X10_TEMP130 - X10_TEMP131 ; 
struct Region1 X10_TEMP136 = createNewRegion1R ( X10_TEMP133 , X10_TEMP134 ) ; 
const int RX10_TEMP293 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP291 = X10_TEMP136 .regSize ; 
RX10_TEMP291 = RX10_TEMP291 - RX10_TEMP293 ; const int SX10_TEMP78 = 1 ; 
const int RX10_TEMP292 = RX10_TEMP291 + SX10_TEMP78 ; 
for ( int SX10_TEMP79 = 0 ; SX10_TEMP79 < RX10_TEMP292 ; SX10_TEMP79 ++ ) 
{ const int RX10_TEMP289 = SX10_TEMP79 ; 
const int RX10_TEMP294 = RX10_TEMP289 ; 
struct Point1 RX10_TEMP290 = regionOrdinalPoint1 ( X10_TEMP136 , RX10_TEMP294 ) ; 
const int i1 = RX10_TEMP290 .f0 ; 
struct Dist1 RX10_TEMP295 = offsets .distValue ; 
struct Region1 RX10_TEMP296 = RX10_TEMP295 .dReg ; 
const int RX10_TEMP297 = searchPointInRegion1 ( RX10_TEMP296 , pl ) ; 
const int RX10_TEMP298 = 0 ; 
const int RX10_TEMP299 = RX10_TEMP297 < RX10_TEMP298 ; 
if ( RX10_TEMP299 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP300 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP300 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP301 = getPlaceFromDist1 ( RX10_TEMP295 , RX10_TEMP297 ) ; 
const int RX10_TEMP303 = /* here  */ 0 ; 
const int RX10_TEMP304 = RX10_TEMP301 != RX10_TEMP303 ; 
if ( RX10_TEMP304 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP302 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP302 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP305 = getRefArrayValue1int ( offsets , RX10_TEMP297 ) ; 
const int X10_TEMP138 = RX10_TEMP305 ; 
const int i2 = i1 + X10_TEMP138 ; 
const int X10_TEMP141 = i2 >= rBorder ; 
if ( X10_TEMP141 ) 
{ struct Dist1 RX10_TEMP306 = outRt .distValue ; 
struct Region1 RX10_TEMP307 = RX10_TEMP306 .dReg ; 
const int RX10_TEMP308 = searchPointInRegion1 ( RX10_TEMP307 , pl ) ; 
const int RX10_TEMP309 = 0 ; 
const int RX10_TEMP310 = RX10_TEMP308 < RX10_TEMP309 ; 
if ( RX10_TEMP310 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP311 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP311 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP312 = getPlaceFromDist1 ( RX10_TEMP306 , RX10_TEMP308 ) ; 
const int RX10_TEMP314 = /* here  */ 0 ; 
const int RX10_TEMP315 = RX10_TEMP312 != RX10_TEMP314 ; 
if ( RX10_TEMP315 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP313 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP313 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP316 = getRefArrayValue1int ( outRt , RX10_TEMP308 ) ; 
const int X10_TEMP144 = RX10_TEMP316 ; 
const int X10_TEMP145 = 1 ; 
const int X10_TEMP147 = X10_TEMP144 + X10_TEMP145 ; 
const int X10_TEMP148 = X10_TEMP147 ; 
struct Dist1 RX10_TEMP317 = outRt .distValue ; 
struct Region1 RX10_TEMP318 = RX10_TEMP317 .dReg ; 
const int RX10_TEMP319 = searchPointInRegion1 ( RX10_TEMP318 , pl ) ; 
const int RX10_TEMP320 = 0 ; 
const int RX10_TEMP321 = RX10_TEMP319 < RX10_TEMP320 ; 
if ( RX10_TEMP321 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP322 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP322 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP323 = getPlaceFromDist1 ( RX10_TEMP317 , RX10_TEMP319 ) ; 
const int RX10_TEMP325 = /* here  */ 0 ; 
const int RX10_TEMP326 = RX10_TEMP323 != RX10_TEMP325 ; 
if ( RX10_TEMP326 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP324 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP324 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP319 , X10_TEMP148 ) ; 
} 
else 
{ const int X10_TEMP150 = i2 < lBorder ; 
if ( X10_TEMP150 ) 
{ struct Dist1 RX10_TEMP327 = outLt .distValue ; 
struct Region1 RX10_TEMP328 = RX10_TEMP327 .dReg ; 
const int RX10_TEMP329 = searchPointInRegion1 ( RX10_TEMP328 , pl ) ; 
const int RX10_TEMP330 = 0 ; 
const int RX10_TEMP331 = RX10_TEMP329 < RX10_TEMP330 ; 
if ( RX10_TEMP331 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP332 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP332 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP333 = getPlaceFromDist1 ( RX10_TEMP327 , RX10_TEMP329 ) ; 
const int RX10_TEMP335 = /* here  */ 0 ; 
const int RX10_TEMP336 = RX10_TEMP333 != RX10_TEMP335 ; 
if ( RX10_TEMP336 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP334 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP334 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP337 = getRefArrayValue1int ( outLt , RX10_TEMP329 ) ; 
const int X10_TEMP153 = RX10_TEMP337 ; 
const int X10_TEMP154 = 1 ; 
const int X10_TEMP156 = X10_TEMP153 + X10_TEMP154 ; 
const int X10_TEMP157 = X10_TEMP156 ; 
struct Dist1 RX10_TEMP338 = outLt .distValue ; 
struct Region1 RX10_TEMP339 = RX10_TEMP338 .dReg ; 
const int RX10_TEMP340 = searchPointInRegion1 ( RX10_TEMP339 , pl ) ; 
const int RX10_TEMP341 = 0 ; 
const int RX10_TEMP342 = RX10_TEMP340 < RX10_TEMP341 ; 
if ( RX10_TEMP342 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP343 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP343 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP344 = getPlaceFromDist1 ( RX10_TEMP338 , RX10_TEMP340 ) ; 
const int RX10_TEMP346 = /* here  */ 0 ; 
const int RX10_TEMP347 = RX10_TEMP344 != RX10_TEMP346 ; 
if ( RX10_TEMP347 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP345 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP345 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP340 , X10_TEMP157 ) ; 
} 

} 


} 

} 

} 

} 

const int X10_TEMP158 = iter ; 
const int X10_TEMP159 = 1 ; 
iter = iter + X10_TEMP159 ; struct Region1 RX10_TEMP348 = dUnique .dReg ; 
const int RX10_TEMP349 = 0 ; 
const int RX10_TEMP350 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP351 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP351 = RX10_TEMP351 - RX10_TEMP350 ; const int SX10_TEMP80 = 1 ; 
const int RX10_TEMP352 = RX10_TEMP351 + SX10_TEMP80 ; 
const int SX10_TEMP81 = 1 ; 
const int RX10_TEMP353 = RX10_TEMP351 + SX10_TEMP81 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP354 = (intStub *)calloc(RX10_TEMP353,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP83 = 0 ; SX10_TEMP83 < RX10_TEMP352 ; SX10_TEMP83 ++ ) 
{ const int RX10_TEMP355 = SX10_TEMP83 ; 
const int RX10_TEMP356 = /* here  */ 0 ; 
const int RX10_TEMP357 = RX10_TEMP355 ; 
const int RX10_TEMP358 = /* place.places ( RX10_TEMP357 )  */ 0 
; 
const int RX10_TEMP359 = getDistLocalCount1 ( dUnique , RX10_TEMP357 ) ; 
const int RX10_TEMP360 = RX10_TEMP359 - RX10_TEMP350 ; 
/* async ( RX10_TEMP358 )  */ 
{ const int SX10_TEMP84 = 1 ; 
const int RX10_TEMP362 = RX10_TEMP360 + SX10_TEMP84 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP85 = (int *)calloc(RX10_TEMP362,sizeof( int )); 
for ( int SX10_TEMP86 = 0 ; SX10_TEMP86 < RX10_TEMP362 ; SX10_TEMP86 ++ ) 
{ const int RX10_TEMP361 = SX10_TEMP86 ; 
const int X10_TEMP161 = 0 ; 
SX10_TEMP85 [ RX10_TEMP361 ] = X10_TEMP161 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP363 = SX10_TEMP85 ; 
struct intStub RX10_TEMP364  ; 
intStub_intStub( &RX10_TEMP364/*Assignment*/, RX10_TEMP363 ) ; 
/* async ( RX10_TEMP356 )  */ 
{ RX10_TEMP354 [ RX10_TEMP355 ] = RX10_TEMP364 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP87 = (intStub *)calloc(RX10_TEMP352,sizeof( intStub )); 
for ( int SX10_TEMP88 = 0 ; SX10_TEMP88 < RX10_TEMP352 ; SX10_TEMP88 ++ ) 
{ const int RX10_TEMP367 = SX10_TEMP88 ; 
struct intStub RX10_TEMP366 = RX10_TEMP354 [ RX10_TEMP367 ] 
; 
SX10_TEMP87 [ RX10_TEMP367 ] = RX10_TEMP366 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP365 = SX10_TEMP87 ; 
struct intRefArray1 RX10_TEMP368  ; 
intRefArray1_intRefArray1( &RX10_TEMP368/*Assignment*/, dUnique , RX10_TEMP365 ) ; 
struct intRefArray1 pr = RX10_TEMP368 ; 
struct Region1 RX10_TEMP369 = dUnique .dReg ; 
const int RX10_TEMP370 = 0 ; 
const int RX10_TEMP371 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP372 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP372 = RX10_TEMP372 - RX10_TEMP371 ; const int SX10_TEMP89 = 1 ; 
const int RX10_TEMP373 = RX10_TEMP372 + SX10_TEMP89 ; 
const int SX10_TEMP90 = 1 ; 
const int RX10_TEMP374 = RX10_TEMP372 + SX10_TEMP90 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP375 = (intStub *)calloc(RX10_TEMP374,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP92 = 0 ; SX10_TEMP92 < RX10_TEMP373 ; SX10_TEMP92 ++ ) 
{ const int RX10_TEMP376 = SX10_TEMP92 ; 
const int RX10_TEMP377 = /* here  */ 0 ; 
const int RX10_TEMP378 = RX10_TEMP376 ; 
const int RX10_TEMP379 = /* place.places ( RX10_TEMP378 )  */ 0 
; 
const int RX10_TEMP380 = getDistLocalCount1 ( dUnique , RX10_TEMP378 ) ; 
const int RX10_TEMP381 = RX10_TEMP380 - RX10_TEMP371 ; 
/* async ( RX10_TEMP379 )  */ 
{ const int SX10_TEMP93 = 1 ; 
const int RX10_TEMP383 = RX10_TEMP381 + SX10_TEMP93 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP94 = (int *)calloc(RX10_TEMP383,sizeof( int )); 
for ( int SX10_TEMP95 = 0 ; SX10_TEMP95 < RX10_TEMP383 ; SX10_TEMP95 ++ ) 
{ const int RX10_TEMP382 = SX10_TEMP95 ; 
const int X10_TEMP164 = 0 ; 
SX10_TEMP94 [ RX10_TEMP382 ] = X10_TEMP164 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP384 = SX10_TEMP94 ; 
struct intStub RX10_TEMP385  ; 
intStub_intStub( &RX10_TEMP385/*Assignment*/, RX10_TEMP384 ) ; 
/* async ( RX10_TEMP377 )  */ 
{ RX10_TEMP375 [ RX10_TEMP376 ] = RX10_TEMP385 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP96 = (intStub *)calloc(RX10_TEMP373,sizeof( intStub )); 
for ( int SX10_TEMP97 = 0 ; SX10_TEMP97 < RX10_TEMP373 ; SX10_TEMP97 ++ ) 
{ const int RX10_TEMP388 = SX10_TEMP97 ; 
struct intStub RX10_TEMP387 = RX10_TEMP375 [ RX10_TEMP388 ] 
; 
SX10_TEMP96 [ RX10_TEMP388 ] = RX10_TEMP387 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP386 = SX10_TEMP96 ; 
struct intRefArray1 RX10_TEMP389  ; 
intRefArray1_intRefArray1( &RX10_TEMP389/*Assignment*/, dUnique , RX10_TEMP386 ) ; 
struct intRefArray1 ter = RX10_TEMP389 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP167 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP391 = X10_TEMP167 .dReg ; 
const int RX10_TEMP394 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP392 = RX10_TEMP391 .regSize ; 
RX10_TEMP392 = RX10_TEMP392 - RX10_TEMP394 ; const int SX10_TEMP98 = 1 ; 
const int RX10_TEMP393 = RX10_TEMP392 + SX10_TEMP98 ; 
for ( int SX10_TEMP99 = 0 ; SX10_TEMP99 < RX10_TEMP393 ; SX10_TEMP99 ++ ) 
{ const int RX10_TEMP390 = SX10_TEMP99 ; 
const int RX10_TEMP395 = RX10_TEMP390 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP391 , RX10_TEMP395 ) ; 
struct Region1 RX10_TEMP396 = X10_TEMP167 .dReg ; 
const int RX10_TEMP397 = searchPointInRegion1 ( RX10_TEMP396 , pl ) ; 
const int RX10_TEMP398 = 0 ; 
const int RX10_TEMP399 = RX10_TEMP397 < RX10_TEMP398 ; 
if ( RX10_TEMP399 ) 
{ const char * RX10_TEMP400 = "Point pl not found in the distribution X10_TEMP167." ; 
fprintf(stderr, RX10_TEMP400 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP401 = getPlaceFromDist1 ( X10_TEMP167 , RX10_TEMP397 ) ; 
const int X10_TEMP168 = RX10_TEMP401 ; 
/* async ( X10_TEMP168 )  */ 
{ const int X10_TEMP171 = 0 ; 
const int X10_TEMP172 = X10_TEMP171 ; 
struct Dist1 RX10_TEMP402 = inLt .distValue ; 
struct Region1 RX10_TEMP403 = RX10_TEMP402 .dReg ; 
const int RX10_TEMP404 = searchPointInRegion1 ( RX10_TEMP403 , pl ) ; 
const int RX10_TEMP405 = 0 ; 
const int RX10_TEMP406 = RX10_TEMP404 < RX10_TEMP405 ; 
if ( RX10_TEMP406 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP407 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP407 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP408 = getPlaceFromDist1 ( RX10_TEMP402 , RX10_TEMP404 ) ; 
const int RX10_TEMP410 = /* here  */ 0 ; 
const int RX10_TEMP411 = RX10_TEMP408 != RX10_TEMP410 ; 
if ( RX10_TEMP411 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP409 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP409 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inLt , RX10_TEMP404 , X10_TEMP172 ) ; 
const int X10_TEMP175 = 0 ; 
const int X10_TEMP176 = X10_TEMP175 ; 
struct Dist1 RX10_TEMP412 = inRt .distValue ; 
struct Region1 RX10_TEMP413 = RX10_TEMP412 .dReg ; 
const int RX10_TEMP414 = searchPointInRegion1 ( RX10_TEMP413 , pl ) ; 
const int RX10_TEMP415 = 0 ; 
const int RX10_TEMP416 = RX10_TEMP414 < RX10_TEMP415 ; 
if ( RX10_TEMP416 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP417 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP417 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP418 = getPlaceFromDist1 ( RX10_TEMP412 , RX10_TEMP414 ) ; 
const int RX10_TEMP420 = /* here  */ 0 ; 
const int RX10_TEMP421 = RX10_TEMP418 != RX10_TEMP420 ; 
if ( RX10_TEMP421 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP419 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP419 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP414 , X10_TEMP176 ) ; 
} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP178 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP423 = X10_TEMP178 .dReg ; 
const int RX10_TEMP426 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP424 = RX10_TEMP423 .regSize ; 
RX10_TEMP424 = RX10_TEMP424 - RX10_TEMP426 ; const int SX10_TEMP100 = 1 ; 
const int RX10_TEMP425 = RX10_TEMP424 + SX10_TEMP100 ; 
for ( int SX10_TEMP101 = 0 ; SX10_TEMP101 < RX10_TEMP425 ; SX10_TEMP101 ++ ) 
{ const int RX10_TEMP422 = SX10_TEMP101 ; 
const int RX10_TEMP427 = RX10_TEMP422 ; 
struct Point1 X10_TEMP179 = regionOrdinalPoint1 ( RX10_TEMP423 , RX10_TEMP427 ) ; 
const int pl = X10_TEMP179 .f0 ; 
struct Region1 RX10_TEMP428 = X10_TEMP178 .dReg ; 
const int RX10_TEMP429 = searchPointInRegion1 ( RX10_TEMP428 , X10_TEMP179 ) ; 
const int RX10_TEMP430 = 0 ; 
const int RX10_TEMP431 = RX10_TEMP429 < RX10_TEMP430 ; 
if ( RX10_TEMP431 ) 
{ const char * RX10_TEMP432 = "Point X10_TEMP179 not found in the distribution X10_TEMP178." ; 
fprintf(stderr, RX10_TEMP432 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP433 = getPlaceFromDist1 ( X10_TEMP178 , RX10_TEMP429 ) ; 
const int X10_TEMP180 = RX10_TEMP433 ; 
/* async ( X10_TEMP180 )  */ 
{ struct Point1 RX10_TEMP434  ; 
Point1_Point1( &RX10_TEMP434/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP435 = outRt .distValue ; 
struct Region1 RX10_TEMP436 = RX10_TEMP435 .dReg ; 
const int RX10_TEMP437 = searchPointInRegion1 ( RX10_TEMP436 , RX10_TEMP434 ) ; 
const int RX10_TEMP438 = 0 ; 
const int RX10_TEMP439 = RX10_TEMP437 < RX10_TEMP438 ; 
if ( RX10_TEMP439 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP440 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP440 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP441 = getPlaceFromDist1 ( RX10_TEMP435 , RX10_TEMP437 ) ; 
const int RX10_TEMP443 = /* here  */ 0 ; 
const int RX10_TEMP444 = RX10_TEMP441 != RX10_TEMP443 ; 
if ( RX10_TEMP444 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP442 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP442 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP445 = getRefArrayValue1int ( outRt , RX10_TEMP437 ) ; 
const int X10_TEMP182 = RX10_TEMP445 ; 
const int X10_TEMP183 = 0 ; 
const int X10_TEMP185 = X10_TEMP182 > X10_TEMP183 ; 
if ( X10_TEMP185 ) 
{ struct Point1 RX10_TEMP446  ; 
Point1_Point1( &RX10_TEMP446/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP447 = outRt .distValue ; 
struct Region1 RX10_TEMP448 = RX10_TEMP447 .dReg ; 
const int RX10_TEMP449 = searchPointInRegion1 ( RX10_TEMP448 , RX10_TEMP446 ) ; 
const int RX10_TEMP450 = 0 ; 
const int RX10_TEMP451 = RX10_TEMP449 < RX10_TEMP450 ; 
if ( RX10_TEMP451 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP452 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP452 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP453 = getPlaceFromDist1 ( RX10_TEMP447 , RX10_TEMP449 ) ; 
const int RX10_TEMP455 = /* here  */ 0 ; 
const int RX10_TEMP456 = RX10_TEMP453 != RX10_TEMP455 ; 
if ( RX10_TEMP456 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP454 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP454 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP457 = getRefArrayValue1int ( outRt , RX10_TEMP449 ) ; 
const int bsize = RX10_TEMP457 ; 
const int X10_TEMP191 = 0 ; 
const int X10_TEMP189 = 1 ; 
const int X10_TEMP192 = bsize - X10_TEMP189 ; 
struct Region2 rBuffer = createNewRegion2RA ( X10_TEMP191 , X10_TEMP192 , rRank2 ) ; 
struct Region2 RX10_TEMP458 = rBuffer ; 
const int RX10_TEMP499 = rBuffer .regSize ; 
const int RX10_TEMP500 = 1 ; 
const int RX10_TEMP501 = RX10_TEMP499 - RX10_TEMP500 ; 
const int SX10_TEMP102 = 1 ; 
const int RX10_TEMP498 = RX10_TEMP501 + SX10_TEMP102 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP103 = (double *)calloc(RX10_TEMP498,sizeof( double )); 
for ( int SX10_TEMP104 = 0 ; SX10_TEMP104 < RX10_TEMP498 ; SX10_TEMP104 ++ ) 
{ const int RX10_TEMP459 = SX10_TEMP104 ; 
const int RX10_TEMP461 = RX10_TEMP459 ; 
struct Point2 RX10_TEMP460 = regionOrdinalPoint2 ( RX10_TEMP458 , RX10_TEMP461 ) ; 
const int i = RX10_TEMP460 .f0 ; 
const int j = RX10_TEMP460 .f1 ; 
struct Point1 RX10_TEMP462  ; 
Point1_Point1( &RX10_TEMP462/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP463 = sizes .distValue ; 
struct Region1 RX10_TEMP464 = RX10_TEMP463 .dReg ; 
const int RX10_TEMP465 = searchPointInRegion1 ( RX10_TEMP464 , RX10_TEMP462 ) ; 
const int RX10_TEMP466 = 0 ; 
const int RX10_TEMP467 = RX10_TEMP465 < RX10_TEMP466 ; 
if ( RX10_TEMP467 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP468 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP468 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP469 = getPlaceFromDist1 ( RX10_TEMP463 , RX10_TEMP465 ) ; 
const int RX10_TEMP471 = /* here  */ 0 ; 
const int RX10_TEMP472 = RX10_TEMP469 != RX10_TEMP471 ; 
if ( RX10_TEMP472 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP470 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP470 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP473 = getRefArrayValue1int ( sizes , RX10_TEMP465 ) ; 
const int X10_TEMP197 = RX10_TEMP473 ; 
const int X10_TEMP199 = i + X10_TEMP197 ; 
struct Point1 RX10_TEMP474  ; 
Point1_Point1( &RX10_TEMP474/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP475 = outRt .distValue ; 
struct Region1 RX10_TEMP476 = RX10_TEMP475 .dReg ; 
const int RX10_TEMP477 = searchPointInRegion1 ( RX10_TEMP476 , RX10_TEMP474 ) ; 
const int RX10_TEMP478 = 0 ; 
const int RX10_TEMP479 = RX10_TEMP477 < RX10_TEMP478 ; 
if ( RX10_TEMP479 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP480 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP480 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP481 = getPlaceFromDist1 ( RX10_TEMP475 , RX10_TEMP477 ) ; 
const int RX10_TEMP483 = /* here  */ 0 ; 
const int RX10_TEMP484 = RX10_TEMP481 != RX10_TEMP483 ; 
if ( RX10_TEMP484 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP482 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP482 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP485 = getRefArrayValue1int ( outRt , RX10_TEMP477 ) ; 
const int X10_TEMP200 = RX10_TEMP485 ; 
const int X10_TEMP203 = X10_TEMP199 - X10_TEMP200 ; 
struct Point3 RX10_TEMP486  ; 
Point3_Point3( &RX10_TEMP486/*Assignment*/, pl , X10_TEMP203 , j ) ; 
struct Dist3 RX10_TEMP487 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP488 = RX10_TEMP487 .dReg ; 
const int RX10_TEMP489 = searchPointInRegion3 ( RX10_TEMP488 , RX10_TEMP486 ) ; 
const int RX10_TEMP490 = 0 ; 
const int RX10_TEMP491 = RX10_TEMP489 < RX10_TEMP490 ; 
if ( RX10_TEMP491 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP492 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP492 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP493 = getPlaceFromDist3 ( RX10_TEMP487 , RX10_TEMP489 ) ; 
const int RX10_TEMP495 = /* here  */ 0 ; 
const int RX10_TEMP496 = RX10_TEMP493 != RX10_TEMP495 ; 
if ( RX10_TEMP496 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP494 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP494 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP497 = getRefArrayValue3double ( srcBuffer , RX10_TEMP489 ) ; 
const double X10_TEMP205 = RX10_TEMP497 ; 
SX10_TEMP103 [ RX10_TEMP459 ] = X10_TEMP205 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP502 = SX10_TEMP103 ; 
struct doubleValArray2 RX10_TEMP503  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP503/*Assignment*/, rBuffer , RX10_TEMP502 ) ; 
struct doubleValArray2 X10_TEMP206 = RX10_TEMP503 ; 
struct doubleValArray2 sBuffer = X10_TEMP206 ; 
const int X10_TEMP208 = /* here  */ 0 ; 
const int X10_TEMP210 = /* X10_TEMP208 . next ( )  */ 0 ; 
/* async ( X10_TEMP210 )  */ 
{ const int X10_TEMP212 = /* here  */ 0 ; 
const int RX10_TEMP508 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP506 = rBuffer .regSize ; 
RX10_TEMP506 = RX10_TEMP506 - RX10_TEMP508 ; const int SX10_TEMP105 = 1 ; 
const int RX10_TEMP507 = RX10_TEMP506 + SX10_TEMP105 ; 
for ( int SX10_TEMP106 = 0 ; SX10_TEMP106 < RX10_TEMP507 ; SX10_TEMP106 ++ ) 
{ const int RX10_TEMP504 = SX10_TEMP106 ; 
const int RX10_TEMP509 = RX10_TEMP504 ; 
struct Point2 RX10_TEMP505 = regionOrdinalPoint2 ( rBuffer , RX10_TEMP509 ) ; 
const int i = RX10_TEMP505 .f0 ; 
const int j = RX10_TEMP505 .f1 ; 
/* async ( X10_TEMP212 )  */ 
{ const int X10_TEMP213 = /* here  */ 0 ; 
const int X10_TEMP217 = /* X10_TEMP213 . id  */ 0 ; 
struct Point2 RX10_TEMP510  ; 
Point2_Point2( &RX10_TEMP510/*Assignment*/, i , j ) ; 
struct Region2 RX10_TEMP511 = sBuffer .regionValue ; 
const int RX10_TEMP512 = searchPointInRegion2 ( RX10_TEMP511 , RX10_TEMP510 ) ; 
const int RX10_TEMP513 = 0 ; 
const int RX10_TEMP514 = RX10_TEMP512 < RX10_TEMP513 ; 
if ( RX10_TEMP514 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP515 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP515 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP516 = sBuffer .contents ; 
const double X10_TEMP221 = RX10_TEMP516 [ RX10_TEMP512 ] 
; 
const double X10_TEMP222 = X10_TEMP221 ; 
struct Point3 RX10_TEMP517  ; 
Point3_Point3( &RX10_TEMP517/*Assignment*/, X10_TEMP217 , i , j ) ; 
struct Dist3 RX10_TEMP518 = dstBuffer .distValue ; 
struct Region3 RX10_TEMP519 = RX10_TEMP518 .dReg ; 
const int RX10_TEMP520 = searchPointInRegion3 ( RX10_TEMP519 , RX10_TEMP517 ) ; 
const int RX10_TEMP521 = 0 ; 
const int RX10_TEMP522 = RX10_TEMP520 < RX10_TEMP521 ; 
if ( RX10_TEMP522 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP523 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP523 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP524 = getPlaceFromDist3 ( RX10_TEMP518 , RX10_TEMP520 ) ; 
const int RX10_TEMP526 = /* here  */ 0 ; 
const int RX10_TEMP527 = RX10_TEMP524 != RX10_TEMP526 ; 
if ( RX10_TEMP527 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP525 = "Bad place access for array dstBuffer" ; 
fprintf(stderr, RX10_TEMP525 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( dstBuffer , RX10_TEMP520 , X10_TEMP222 ) ; 
} 

} 

const int X10_TEMP223 = /* here  */ 0 ; 
const int X10_TEMP225 = /* X10_TEMP223 . id  */ 0 ; 
const int X10_TEMP227 = bsize ; 
struct Point1 RX10_TEMP528  ; 
Point1_Point1( &RX10_TEMP528/*Assignment*/, X10_TEMP225 ) ; 
struct Dist1 RX10_TEMP529 = inLt .distValue ; 
struct Region1 RX10_TEMP530 = RX10_TEMP529 .dReg ; 
const int RX10_TEMP531 = searchPointInRegion1 ( RX10_TEMP530 , RX10_TEMP528 ) ; 
const int RX10_TEMP532 = 0 ; 
const int RX10_TEMP533 = RX10_TEMP531 < RX10_TEMP532 ; 
if ( RX10_TEMP533 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP534 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP534 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP535 = getPlaceFromDist1 ( RX10_TEMP529 , RX10_TEMP531 ) ; 
const int RX10_TEMP537 = /* here  */ 0 ; 
const int RX10_TEMP538 = RX10_TEMP535 != RX10_TEMP537 ; 
if ( RX10_TEMP538 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP536 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP536 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inLt , RX10_TEMP531 , X10_TEMP227 ) ; 
} 

} 

} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP229 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP540 = X10_TEMP229 .dReg ; 
const int RX10_TEMP543 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP541 = RX10_TEMP540 .regSize ; 
RX10_TEMP541 = RX10_TEMP541 - RX10_TEMP543 ; const int SX10_TEMP107 = 1 ; 
const int RX10_TEMP542 = RX10_TEMP541 + SX10_TEMP107 ; 
for ( int SX10_TEMP108 = 0 ; SX10_TEMP108 < RX10_TEMP542 ; SX10_TEMP108 ++ ) 
{ const int RX10_TEMP539 = SX10_TEMP108 ; 
const int RX10_TEMP544 = RX10_TEMP539 ; 
struct Point1 X10_TEMP230 = regionOrdinalPoint1 ( RX10_TEMP540 , RX10_TEMP544 ) ; 
const int pl = X10_TEMP230 .f0 ; 
struct Region1 RX10_TEMP545 = X10_TEMP229 .dReg ; 
const int RX10_TEMP546 = searchPointInRegion1 ( RX10_TEMP545 , X10_TEMP230 ) ; 
const int RX10_TEMP547 = 0 ; 
const int RX10_TEMP548 = RX10_TEMP546 < RX10_TEMP547 ; 
if ( RX10_TEMP548 ) 
{ const char * RX10_TEMP549 = "Point X10_TEMP230 not found in the distribution X10_TEMP229." ; 
fprintf(stderr, RX10_TEMP549 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP550 = getPlaceFromDist1 ( X10_TEMP229 , RX10_TEMP546 ) ; 
const int X10_TEMP231 = RX10_TEMP550 ; 
/* async ( X10_TEMP231 )  */ 
{ struct Point1 RX10_TEMP551  ; 
Point1_Point1( &RX10_TEMP551/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP552 = sizes .distValue ; 
struct Region1 RX10_TEMP553 = RX10_TEMP552 .dReg ; 
const int RX10_TEMP554 = searchPointInRegion1 ( RX10_TEMP553 , RX10_TEMP551 ) ; 
const int RX10_TEMP555 = 0 ; 
const int RX10_TEMP556 = RX10_TEMP554 < RX10_TEMP555 ; 
if ( RX10_TEMP556 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP557 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP557 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP558 = getPlaceFromDist1 ( RX10_TEMP552 , RX10_TEMP554 ) ; 
const int RX10_TEMP560 = /* here  */ 0 ; 
const int RX10_TEMP561 = RX10_TEMP558 != RX10_TEMP560 ; 
if ( RX10_TEMP561 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP559 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP559 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP562 = getRefArrayValue1int ( sizes , RX10_TEMP554 ) ; 
const int X10_TEMP235 = RX10_TEMP562 ; 
struct Point1 RX10_TEMP563  ; 
Point1_Point1( &RX10_TEMP563/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP564 = outRt .distValue ; 
struct Region1 RX10_TEMP565 = RX10_TEMP564 .dReg ; 
const int RX10_TEMP566 = searchPointInRegion1 ( RX10_TEMP565 , RX10_TEMP563 ) ; 
const int RX10_TEMP567 = 0 ; 
const int RX10_TEMP568 = RX10_TEMP566 < RX10_TEMP567 ; 
if ( RX10_TEMP568 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP569 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP569 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP570 = getPlaceFromDist1 ( RX10_TEMP564 , RX10_TEMP566 ) ; 
const int RX10_TEMP572 = /* here  */ 0 ; 
const int RX10_TEMP573 = RX10_TEMP570 != RX10_TEMP572 ; 
if ( RX10_TEMP573 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP571 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP571 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP574 = getRefArrayValue1int ( outRt , RX10_TEMP566 ) ; 
const int X10_TEMP236 = RX10_TEMP574 ; 
const int X10_TEMP238 = X10_TEMP235 - X10_TEMP236 ; 
const int X10_TEMP239 = X10_TEMP238 ; 
struct Point1 RX10_TEMP575  ; 
Point1_Point1( &RX10_TEMP575/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP576 = sizes .distValue ; 
struct Region1 RX10_TEMP577 = RX10_TEMP576 .dReg ; 
const int RX10_TEMP578 = searchPointInRegion1 ( RX10_TEMP577 , RX10_TEMP575 ) ; 
const int RX10_TEMP579 = 0 ; 
const int RX10_TEMP580 = RX10_TEMP578 < RX10_TEMP579 ; 
if ( RX10_TEMP580 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP581 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP581 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP582 = getPlaceFromDist1 ( RX10_TEMP576 , RX10_TEMP578 ) ; 
const int RX10_TEMP584 = /* here  */ 0 ; 
const int RX10_TEMP585 = RX10_TEMP582 != RX10_TEMP584 ; 
if ( RX10_TEMP585 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP583 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP583 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP578 , X10_TEMP239 ) ; 
struct Point1 RX10_TEMP586  ; 
Point1_Point1( &RX10_TEMP586/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP587 = sizes .distValue ; 
struct Region1 RX10_TEMP588 = RX10_TEMP587 .dReg ; 
const int RX10_TEMP589 = searchPointInRegion1 ( RX10_TEMP588 , RX10_TEMP586 ) ; 
const int RX10_TEMP590 = 0 ; 
const int RX10_TEMP591 = RX10_TEMP589 < RX10_TEMP590 ; 
if ( RX10_TEMP591 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP592 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP592 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP593 = getPlaceFromDist1 ( RX10_TEMP587 , RX10_TEMP589 ) ; 
const int RX10_TEMP595 = /* here  */ 0 ; 
const int RX10_TEMP596 = RX10_TEMP593 != RX10_TEMP595 ; 
if ( RX10_TEMP596 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP594 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP594 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP597 = getRefArrayValue1int ( sizes , RX10_TEMP589 ) ; 
const int X10_TEMP243 = RX10_TEMP597 ; 
struct Point1 RX10_TEMP598  ; 
Point1_Point1( &RX10_TEMP598/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP599 = inLt .distValue ; 
struct Region1 RX10_TEMP600 = RX10_TEMP599 .dReg ; 
const int RX10_TEMP601 = searchPointInRegion1 ( RX10_TEMP600 , RX10_TEMP598 ) ; 
const int RX10_TEMP602 = 0 ; 
const int RX10_TEMP603 = RX10_TEMP601 < RX10_TEMP602 ; 
if ( RX10_TEMP603 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP604 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP604 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP605 = getPlaceFromDist1 ( RX10_TEMP599 , RX10_TEMP601 ) ; 
const int RX10_TEMP607 = /* here  */ 0 ; 
const int RX10_TEMP608 = RX10_TEMP605 != RX10_TEMP607 ; 
if ( RX10_TEMP608 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP606 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP606 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP609 = getRefArrayValue1int ( inLt , RX10_TEMP601 ) ; 
const int X10_TEMP244 = RX10_TEMP609 ; 
const int X10_TEMP245 = X10_TEMP243 + X10_TEMP244 ; 
const int X10_TEMP248 = X10_TEMP245 - MAX_ROWS ; 
const int X10_TEMP249 = 0 ; 
const int X10_TEMP251 = X10Util_maxInt ( X10_TEMP248 , X10_TEMP249 ) ; 
const int X10_TEMP252 = X10_TEMP251 ; 
struct Point1 RX10_TEMP610  ; 
Point1_Point1( &RX10_TEMP610/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP611 = outRt .distValue ; 
struct Region1 RX10_TEMP612 = RX10_TEMP611 .dReg ; 
const int RX10_TEMP613 = searchPointInRegion1 ( RX10_TEMP612 , RX10_TEMP610 ) ; 
const int RX10_TEMP614 = 0 ; 
const int RX10_TEMP615 = RX10_TEMP613 < RX10_TEMP614 ; 
if ( RX10_TEMP615 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP616 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP616 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP617 = getPlaceFromDist1 ( RX10_TEMP611 , RX10_TEMP613 ) ; 
const int RX10_TEMP619 = /* here  */ 0 ; 
const int RX10_TEMP620 = RX10_TEMP617 != RX10_TEMP619 ; 
if ( RX10_TEMP620 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP618 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP618 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP613 , X10_TEMP252 ) ; 
struct Point1 RX10_TEMP621  ; 
Point1_Point1( &RX10_TEMP621/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP622 = sizes .distValue ; 
struct Region1 RX10_TEMP623 = RX10_TEMP622 .dReg ; 
const int RX10_TEMP624 = searchPointInRegion1 ( RX10_TEMP623 , RX10_TEMP621 ) ; 
const int RX10_TEMP625 = 0 ; 
const int RX10_TEMP626 = RX10_TEMP624 < RX10_TEMP625 ; 
if ( RX10_TEMP626 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP627 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP627 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP628 = getPlaceFromDist1 ( RX10_TEMP622 , RX10_TEMP624 ) ; 
const int RX10_TEMP630 = /* here  */ 0 ; 
const int RX10_TEMP631 = RX10_TEMP628 != RX10_TEMP630 ; 
if ( RX10_TEMP631 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP629 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP629 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP632 = getRefArrayValue1int ( sizes , RX10_TEMP624 ) ; 
const int X10_TEMP256 = RX10_TEMP632 ; 
struct Point1 RX10_TEMP633  ; 
Point1_Point1( &RX10_TEMP633/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP634 = outRt .distValue ; 
struct Region1 RX10_TEMP635 = RX10_TEMP634 .dReg ; 
const int RX10_TEMP636 = searchPointInRegion1 ( RX10_TEMP635 , RX10_TEMP633 ) ; 
const int RX10_TEMP637 = 0 ; 
const int RX10_TEMP638 = RX10_TEMP636 < RX10_TEMP637 ; 
if ( RX10_TEMP638 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP639 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP639 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP640 = getPlaceFromDist1 ( RX10_TEMP634 , RX10_TEMP636 ) ; 
const int RX10_TEMP642 = /* here  */ 0 ; 
const int RX10_TEMP643 = RX10_TEMP640 != RX10_TEMP642 ; 
if ( RX10_TEMP643 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP641 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP641 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP644 = getRefArrayValue1int ( outRt , RX10_TEMP636 ) ; 
const int X10_TEMP257 = RX10_TEMP644 ; 
const int X10_TEMP259 = X10_TEMP256 - X10_TEMP257 ; 
const int X10_TEMP260 = X10_TEMP259 ; 
struct Point1 RX10_TEMP645  ; 
Point1_Point1( &RX10_TEMP645/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP646 = sizes .distValue ; 
struct Region1 RX10_TEMP647 = RX10_TEMP646 .dReg ; 
const int RX10_TEMP648 = searchPointInRegion1 ( RX10_TEMP647 , RX10_TEMP645 ) ; 
const int RX10_TEMP649 = 0 ; 
const int RX10_TEMP650 = RX10_TEMP648 < RX10_TEMP649 ; 
if ( RX10_TEMP650 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP651 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP651 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP652 = getPlaceFromDist1 ( RX10_TEMP646 , RX10_TEMP648 ) ; 
const int RX10_TEMP654 = /* here  */ 0 ; 
const int RX10_TEMP655 = RX10_TEMP652 != RX10_TEMP654 ; 
if ( RX10_TEMP655 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP653 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP653 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP648 , X10_TEMP260 ) ; 
struct Point1 RX10_TEMP656  ; 
Point1_Point1( &RX10_TEMP656/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP657 = outRt .distValue ; 
struct Region1 RX10_TEMP658 = RX10_TEMP657 .dReg ; 
const int RX10_TEMP659 = searchPointInRegion1 ( RX10_TEMP658 , RX10_TEMP656 ) ; 
const int RX10_TEMP660 = 0 ; 
const int RX10_TEMP661 = RX10_TEMP659 < RX10_TEMP660 ; 
if ( RX10_TEMP661 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP662 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP662 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP663 = getPlaceFromDist1 ( RX10_TEMP657 , RX10_TEMP659 ) ; 
const int RX10_TEMP665 = /* here  */ 0 ; 
const int RX10_TEMP666 = RX10_TEMP663 != RX10_TEMP665 ; 
if ( RX10_TEMP666 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP664 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP664 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP667 = getRefArrayValue1int ( outRt , RX10_TEMP659 ) ; 
const int X10_TEMP262 = RX10_TEMP667 ; 
const int X10_TEMP263 = 0 ; 
const int X10_TEMP265 = X10_TEMP262 > X10_TEMP263 ; 
if ( X10_TEMP265 ) 
{ struct Point1 RX10_TEMP668  ; 
Point1_Point1( &RX10_TEMP668/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP669 = pr .distValue ; 
struct Region1 RX10_TEMP670 = RX10_TEMP669 .dReg ; 
const int RX10_TEMP671 = searchPointInRegion1 ( RX10_TEMP670 , RX10_TEMP668 ) ; 
const int RX10_TEMP672 = 0 ; 
const int RX10_TEMP673 = RX10_TEMP671 < RX10_TEMP672 ; 
if ( RX10_TEMP673 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP674 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP674 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP675 = getPlaceFromDist1 ( RX10_TEMP669 , RX10_TEMP671 ) ; 
const int RX10_TEMP677 = /* here  */ 0 ; 
const int RX10_TEMP678 = RX10_TEMP675 != RX10_TEMP677 ; 
if ( RX10_TEMP678 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP676 = "Bad place access for array pr" ; 
fprintf(stderr, RX10_TEMP676 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP679 = getRefArrayValue1int ( pr , RX10_TEMP671 ) ; 
const int X10_TEMP271 = RX10_TEMP679 ; 
struct Point1 RX10_TEMP680  ; 
Point1_Point1( &RX10_TEMP680/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP681 = outRt .distValue ; 
struct Region1 RX10_TEMP682 = RX10_TEMP681 .dReg ; 
const int RX10_TEMP683 = searchPointInRegion1 ( RX10_TEMP682 , RX10_TEMP680 ) ; 
const int RX10_TEMP684 = 0 ; 
const int RX10_TEMP685 = RX10_TEMP683 < RX10_TEMP684 ; 
if ( RX10_TEMP685 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP686 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP686 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP687 = getPlaceFromDist1 ( RX10_TEMP681 , RX10_TEMP683 ) ; 
const int RX10_TEMP689 = /* here  */ 0 ; 
const int RX10_TEMP690 = RX10_TEMP687 != RX10_TEMP689 ; 
if ( RX10_TEMP690 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP688 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP688 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP691 = getRefArrayValue1int ( outRt , RX10_TEMP683 ) ; 
const int X10_TEMP272 = RX10_TEMP691 ; 
const int X10_TEMP274 = X10Util_maxInt ( X10_TEMP271 , X10_TEMP272 ) ; 
const int X10_TEMP275 = X10_TEMP274 ; 
struct Point1 RX10_TEMP692  ; 
Point1_Point1( &RX10_TEMP692/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP693 = pr .distValue ; 
struct Region1 RX10_TEMP694 = RX10_TEMP693 .dReg ; 
const int RX10_TEMP695 = searchPointInRegion1 ( RX10_TEMP694 , RX10_TEMP692 ) ; 
const int RX10_TEMP696 = 0 ; 
const int RX10_TEMP697 = RX10_TEMP695 < RX10_TEMP696 ; 
if ( RX10_TEMP697 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP698 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP698 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP699 = getPlaceFromDist1 ( RX10_TEMP693 , RX10_TEMP695 ) ; 
const int RX10_TEMP701 = /* here  */ 0 ; 
const int RX10_TEMP702 = RX10_TEMP699 != RX10_TEMP701 ; 
if ( RX10_TEMP702 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP700 = "Bad place access for array pr" ; 
fprintf(stderr, RX10_TEMP700 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( pr , RX10_TEMP695 , X10_TEMP275 ) ; 
struct Point1 RX10_TEMP703  ; 
Point1_Point1( &RX10_TEMP703/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP704 = outRt .distValue ; 
struct Region1 RX10_TEMP705 = RX10_TEMP704 .dReg ; 
const int RX10_TEMP706 = searchPointInRegion1 ( RX10_TEMP705 , RX10_TEMP703 ) ; 
const int RX10_TEMP707 = 0 ; 
const int RX10_TEMP708 = RX10_TEMP706 < RX10_TEMP707 ; 
if ( RX10_TEMP708 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP709 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP709 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP710 = getPlaceFromDist1 ( RX10_TEMP704 , RX10_TEMP706 ) ; 
const int RX10_TEMP712 = /* here  */ 0 ; 
const int RX10_TEMP713 = RX10_TEMP710 != RX10_TEMP712 ; 
if ( RX10_TEMP713 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP711 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP711 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP714 = getRefArrayValue1int ( outRt , RX10_TEMP706 ) ; 
const int X10_TEMP281 = RX10_TEMP714 ; 
struct Point1 RX10_TEMP715  ; 
Point1_Point1( &RX10_TEMP715/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP716 = inLt .distValue ; 
struct Region1 RX10_TEMP717 = RX10_TEMP716 .dReg ; 
const int RX10_TEMP718 = searchPointInRegion1 ( RX10_TEMP717 , RX10_TEMP715 ) ; 
const int RX10_TEMP719 = 0 ; 
const int RX10_TEMP720 = RX10_TEMP718 < RX10_TEMP719 ; 
if ( RX10_TEMP720 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP721 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP721 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP722 = getPlaceFromDist1 ( RX10_TEMP716 , RX10_TEMP718 ) ; 
const int RX10_TEMP724 = /* here  */ 0 ; 
const int RX10_TEMP725 = RX10_TEMP722 != RX10_TEMP724 ; 
if ( RX10_TEMP725 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP723 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP723 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP726 = getRefArrayValue1int ( inLt , RX10_TEMP718 ) ; 
const int X10_TEMP279 = RX10_TEMP726 ; 
const int X10_TEMP282 = MAX_ROWS - X10_TEMP279 ; 
const int rsize = X10Util_minInt ( X10_TEMP281 , X10_TEMP282 ) ; 
/* finish  */ 
{ const int X10_TEMP287 = 0 ; 
const int X10_TEMP285 = 1 ; 
const int X10_TEMP288 = rsize - X10_TEMP285 ; 
struct Region2 X10_TEMP291 = createNewRegion2RA ( X10_TEMP287 , X10_TEMP288 , rRank2 ) ; 
const int X10_TEMP292 = /* here  */ 0 ; 
const int RX10_TEMP731 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP729 = X10_TEMP291 .regSize ; 
RX10_TEMP729 = RX10_TEMP729 - RX10_TEMP731 ; const int SX10_TEMP109 = 1 ; 
const int RX10_TEMP730 = RX10_TEMP729 + SX10_TEMP109 ; 
for ( int SX10_TEMP110 = 0 ; SX10_TEMP110 < RX10_TEMP730 ; SX10_TEMP110 ++ ) 
{ const int RX10_TEMP727 = SX10_TEMP110 ; 
const int RX10_TEMP732 = RX10_TEMP727 ; 
struct Point2 RX10_TEMP728 = regionOrdinalPoint2 ( X10_TEMP291 , RX10_TEMP732 ) ; 
const int i = RX10_TEMP728 .f0 ; 
const int j = RX10_TEMP728 .f1 ; 
/* async ( X10_TEMP292 )  */ 
{ const int X10_TEMP294 = MAX_ROWS - rsize ; 
const int X10_TEMP297 = X10_TEMP294 + i ; 
struct Point1 RX10_TEMP733  ; 
Point1_Point1( &RX10_TEMP733/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP734 = sizes .distValue ; 
struct Region1 RX10_TEMP735 = RX10_TEMP734 .dReg ; 
const int RX10_TEMP736 = searchPointInRegion1 ( RX10_TEMP735 , RX10_TEMP733 ) ; 
const int RX10_TEMP737 = 0 ; 
const int RX10_TEMP738 = RX10_TEMP736 < RX10_TEMP737 ; 
if ( RX10_TEMP738 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP739 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP739 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP740 = getPlaceFromDist1 ( RX10_TEMP734 , RX10_TEMP736 ) ; 
const int RX10_TEMP742 = /* here  */ 0 ; 
const int RX10_TEMP743 = RX10_TEMP740 != RX10_TEMP742 ; 
if ( RX10_TEMP743 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP741 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP741 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP744 = getRefArrayValue1int ( sizes , RX10_TEMP736 ) ; 
const int X10_TEMP300 = RX10_TEMP744 ; 
const int X10_TEMP303 = X10_TEMP300 + i ; 
struct Point3 RX10_TEMP745  ; 
Point3_Point3( &RX10_TEMP745/*Assignment*/, pl , X10_TEMP303 , j ) ; 
struct Dist3 RX10_TEMP746 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP747 = RX10_TEMP746 .dReg ; 
const int RX10_TEMP748 = searchPointInRegion3 ( RX10_TEMP747 , RX10_TEMP745 ) ; 
const int RX10_TEMP749 = 0 ; 
const int RX10_TEMP750 = RX10_TEMP748 < RX10_TEMP749 ; 
if ( RX10_TEMP750 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP751 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP751 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP752 = getPlaceFromDist3 ( RX10_TEMP746 , RX10_TEMP748 ) ; 
const int RX10_TEMP754 = /* here  */ 0 ; 
const int RX10_TEMP755 = RX10_TEMP752 != RX10_TEMP754 ; 
if ( RX10_TEMP755 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP753 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP753 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP756 = getRefArrayValue3double ( srcBuffer , RX10_TEMP748 ) ; 
const double X10_TEMP305 = RX10_TEMP756 ; 
const double X10_TEMP306 = X10_TEMP305 ; 
struct Point3 RX10_TEMP757  ; 
Point3_Point3( &RX10_TEMP757/*Assignment*/, pl , X10_TEMP297 , j ) ; 
struct Dist3 RX10_TEMP758 = dstBuffer .distValue ; 
struct Region3 RX10_TEMP759 = RX10_TEMP758 .dReg ; 
const int RX10_TEMP760 = searchPointInRegion3 ( RX10_TEMP759 , RX10_TEMP757 ) ; 
const int RX10_TEMP761 = 0 ; 
const int RX10_TEMP762 = RX10_TEMP760 < RX10_TEMP761 ; 
if ( RX10_TEMP762 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP763 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP763 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP764 = getPlaceFromDist3 ( RX10_TEMP758 , RX10_TEMP760 ) ; 
const int RX10_TEMP766 = /* here  */ 0 ; 
const int RX10_TEMP767 = RX10_TEMP764 != RX10_TEMP766 ; 
if ( RX10_TEMP767 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP765 = "Bad place access for array dstBuffer" ; 
fprintf(stderr, RX10_TEMP765 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( dstBuffer , RX10_TEMP760 , X10_TEMP306 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP768  ; 
Point1_Point1( &RX10_TEMP768/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP769 = sizes .distValue ; 
struct Region1 RX10_TEMP770 = RX10_TEMP769 .dReg ; 
const int RX10_TEMP771 = searchPointInRegion1 ( RX10_TEMP770 , RX10_TEMP768 ) ; 
const int RX10_TEMP772 = 0 ; 
const int RX10_TEMP773 = RX10_TEMP771 < RX10_TEMP772 ; 
if ( RX10_TEMP773 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP774 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP774 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP775 = getPlaceFromDist1 ( RX10_TEMP769 , RX10_TEMP771 ) ; 
const int RX10_TEMP777 = /* here  */ 0 ; 
const int RX10_TEMP778 = RX10_TEMP775 != RX10_TEMP777 ; 
if ( RX10_TEMP778 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP776 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP776 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP779 = getRefArrayValue1int ( sizes , RX10_TEMP771 ) ; 
const int X10_TEMP308 = RX10_TEMP779 ; 
const int X10_TEMP309 = 0 ; 
const int X10_TEMP313 = X10_TEMP308 > X10_TEMP309 ; 
struct Point1 RX10_TEMP780  ; 
Point1_Point1( &RX10_TEMP780/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP781 = inLt .distValue ; 
struct Region1 RX10_TEMP782 = RX10_TEMP781 .dReg ; 
const int RX10_TEMP783 = searchPointInRegion1 ( RX10_TEMP782 , RX10_TEMP780 ) ; 
const int RX10_TEMP784 = 0 ; 
const int RX10_TEMP785 = RX10_TEMP783 < RX10_TEMP784 ; 
if ( RX10_TEMP785 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP786 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP786 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP787 = getPlaceFromDist1 ( RX10_TEMP781 , RX10_TEMP783 ) ; 
const int RX10_TEMP789 = /* here  */ 0 ; 
const int RX10_TEMP790 = RX10_TEMP787 != RX10_TEMP789 ; 
if ( RX10_TEMP790 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP788 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP788 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP791 = getRefArrayValue1int ( inLt , RX10_TEMP783 ) ; 
const int X10_TEMP311 = RX10_TEMP791 ; 
const int X10_TEMP312 = 0 ; 
const int X10_TEMP314 = X10_TEMP311 > X10_TEMP312 ; 
const int X10_TEMP316 = X10_TEMP313 && X10_TEMP314 ; 
if ( X10_TEMP316 ) 
{ const int X10_TEMP320 = 1 ; 
struct Point1 RX10_TEMP792  ; 
Point1_Point1( &RX10_TEMP792/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP793 = sizes .distValue ; 
struct Region1 RX10_TEMP794 = RX10_TEMP793 .dReg ; 
const int RX10_TEMP795 = searchPointInRegion1 ( RX10_TEMP794 , RX10_TEMP792 ) ; 
const int RX10_TEMP796 = 0 ; 
const int RX10_TEMP797 = RX10_TEMP795 < RX10_TEMP796 ; 
if ( RX10_TEMP797 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP798 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP798 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP799 = getPlaceFromDist1 ( RX10_TEMP793 , RX10_TEMP795 ) ; 
const int RX10_TEMP801 = /* here  */ 0 ; 
const int RX10_TEMP802 = RX10_TEMP799 != RX10_TEMP801 ; 
if ( RX10_TEMP802 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP800 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP800 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP803 = getRefArrayValue1int ( sizes , RX10_TEMP795 ) ; 
const int X10_TEMP321 = RX10_TEMP803 ; 
struct Region1 X10_TEMP323 = createNewRegion1R ( X10_TEMP320 , X10_TEMP321 ) ; 
const int RX10_TEMP808 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP806 = X10_TEMP323 .regSize ; 
RX10_TEMP806 = RX10_TEMP806 - RX10_TEMP808 ; const int SX10_TEMP111 = 1 ; 
const int RX10_TEMP807 = RX10_TEMP806 + SX10_TEMP111 ; 
for ( int SX10_TEMP112 = 0 ; SX10_TEMP112 < RX10_TEMP807 ; SX10_TEMP112 ++ ) 
{ const int RX10_TEMP804 = SX10_TEMP112 ; 
const int RX10_TEMP809 = RX10_TEMP804 ; 
struct Point1 RX10_TEMP805 = regionOrdinalPoint1 ( X10_TEMP323 , RX10_TEMP809 ) ; 
const int i1 = RX10_TEMP805 .f0 ; 
struct Point1 RX10_TEMP810  ; 
Point1_Point1( &RX10_TEMP810/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP811 = sizes .distValue ; 
struct Region1 RX10_TEMP812 = RX10_TEMP811 .dReg ; 
const int RX10_TEMP813 = searchPointInRegion1 ( RX10_TEMP812 , RX10_TEMP810 ) ; 
const int RX10_TEMP814 = 0 ; 
const int RX10_TEMP815 = RX10_TEMP813 < RX10_TEMP814 ; 
if ( RX10_TEMP815 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP816 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP816 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP817 = getPlaceFromDist1 ( RX10_TEMP811 , RX10_TEMP813 ) ; 
const int RX10_TEMP819 = /* here  */ 0 ; 
const int RX10_TEMP820 = RX10_TEMP817 != RX10_TEMP819 ; 
if ( RX10_TEMP820 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP818 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP818 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP821 = getRefArrayValue1int ( sizes , RX10_TEMP813 ) ; 
const int X10_TEMP325 = RX10_TEMP821 ; 
const int i2 = X10_TEMP325 - i1 ; 
/* finish  */ 
{ const int X10_TEMP328 = /* here  */ 0 ; 
const int RX10_TEMP826 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP824 = rRank2 .regSize ; 
RX10_TEMP824 = RX10_TEMP824 - RX10_TEMP826 ; const int SX10_TEMP113 = 1 ; 
const int RX10_TEMP825 = RX10_TEMP824 + SX10_TEMP113 ; 
for ( int SX10_TEMP114 = 0 ; SX10_TEMP114 < RX10_TEMP825 ; SX10_TEMP114 ++ ) 
{ const int RX10_TEMP822 = SX10_TEMP114 ; 
const int RX10_TEMP827 = RX10_TEMP822 ; 
struct Point1 RX10_TEMP823 = regionOrdinalPoint1 ( rRank2 , RX10_TEMP827 ) ; 
const int j = RX10_TEMP823 .f0 ; 
/* async ( X10_TEMP328 )  */ 
{ struct Point1 RX10_TEMP828  ; 
Point1_Point1( &RX10_TEMP828/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP829 = inLt .distValue ; 
struct Region1 RX10_TEMP830 = RX10_TEMP829 .dReg ; 
const int RX10_TEMP831 = searchPointInRegion1 ( RX10_TEMP830 , RX10_TEMP828 ) ; 
const int RX10_TEMP832 = 0 ; 
const int RX10_TEMP833 = RX10_TEMP831 < RX10_TEMP832 ; 
if ( RX10_TEMP833 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP834 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP834 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP835 = getPlaceFromDist1 ( RX10_TEMP829 , RX10_TEMP831 ) ; 
const int RX10_TEMP837 = /* here  */ 0 ; 
const int RX10_TEMP838 = RX10_TEMP835 != RX10_TEMP837 ; 
if ( RX10_TEMP838 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP836 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP836 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP839 = getRefArrayValue1int ( inLt , RX10_TEMP831 ) ; 
const int X10_TEMP331 = RX10_TEMP839 ; 
const int X10_TEMP334 = i2 + X10_TEMP331 ; 
struct Point3 RX10_TEMP840  ; 
Point3_Point3( &RX10_TEMP840/*Assignment*/, pl , i2 , j ) ; 
struct Dist3 RX10_TEMP841 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP842 = RX10_TEMP841 .dReg ; 
const int RX10_TEMP843 = searchPointInRegion3 ( RX10_TEMP842 , RX10_TEMP840 ) ; 
const int RX10_TEMP844 = 0 ; 
const int RX10_TEMP845 = RX10_TEMP843 < RX10_TEMP844 ; 
if ( RX10_TEMP845 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP846 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP846 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP847 = getPlaceFromDist3 ( RX10_TEMP841 , RX10_TEMP843 ) ; 
const int RX10_TEMP849 = /* here  */ 0 ; 
const int RX10_TEMP850 = RX10_TEMP847 != RX10_TEMP849 ; 
if ( RX10_TEMP850 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP848 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP848 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP851 = getRefArrayValue3double ( srcBuffer , RX10_TEMP843 ) ; 
const double X10_TEMP339 = RX10_TEMP851 ; 
const double X10_TEMP340 = X10_TEMP339 ; 
struct Point3 RX10_TEMP852  ; 
Point3_Point3( &RX10_TEMP852/*Assignment*/, pl , X10_TEMP334 , j ) ; 
struct Dist3 RX10_TEMP853 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP854 = RX10_TEMP853 .dReg ; 
const int RX10_TEMP855 = searchPointInRegion3 ( RX10_TEMP854 , RX10_TEMP852 ) ; 
const int RX10_TEMP856 = 0 ; 
const int RX10_TEMP857 = RX10_TEMP855 < RX10_TEMP856 ; 
if ( RX10_TEMP857 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP858 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP858 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP859 = getPlaceFromDist3 ( RX10_TEMP853 , RX10_TEMP855 ) ; 
const int RX10_TEMP861 = /* here  */ 0 ; 
const int RX10_TEMP862 = RX10_TEMP859 != RX10_TEMP861 ; 
if ( RX10_TEMP862 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP860 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP860 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( srcBuffer , RX10_TEMP855 , X10_TEMP340 ) ; 
} 

} 

} 

} 

} 

/* finish  */ 
{ const int X10_TEMP348 = 0 ; 
struct Point1 RX10_TEMP863  ; 
Point1_Point1( &RX10_TEMP863/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP864 = inLt .distValue ; 
struct Region1 RX10_TEMP865 = RX10_TEMP864 .dReg ; 
const int RX10_TEMP866 = searchPointInRegion1 ( RX10_TEMP865 , RX10_TEMP863 ) ; 
const int RX10_TEMP867 = 0 ; 
const int RX10_TEMP868 = RX10_TEMP866 < RX10_TEMP867 ; 
if ( RX10_TEMP868 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP869 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP869 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP870 = getPlaceFromDist1 ( RX10_TEMP864 , RX10_TEMP866 ) ; 
const int RX10_TEMP872 = /* here  */ 0 ; 
const int RX10_TEMP873 = RX10_TEMP870 != RX10_TEMP872 ; 
if ( RX10_TEMP873 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP871 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP871 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP874 = getRefArrayValue1int ( inLt , RX10_TEMP866 ) ; 
const int X10_TEMP345 = RX10_TEMP874 ; 
const int X10_TEMP346 = 1 ; 
const int X10_TEMP349 = X10_TEMP345 - X10_TEMP346 ; 
struct Region3 X10_TEMP352 = createNewRegion3RRA ( pl , pl , X10_TEMP348 , X10_TEMP349 , rRank2 ) ; 
const int X10_TEMP353 = /* here  */ 0 ; 
const int RX10_TEMP878 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP876 = X10_TEMP352 .regSize ; 
RX10_TEMP876 = RX10_TEMP876 - RX10_TEMP878 ; const int SX10_TEMP115 = 1 ; 
const int RX10_TEMP877 = RX10_TEMP876 + SX10_TEMP115 ; 
for ( int SX10_TEMP116 = 0 ; SX10_TEMP116 < RX10_TEMP877 ; SX10_TEMP116 ++ ) 
{ const int RX10_TEMP875 = SX10_TEMP116 ; 
const int RX10_TEMP879 = RX10_TEMP875 ; 
struct Point3 pt = regionOrdinalPoint3 ( X10_TEMP352 , RX10_TEMP879 ) ; 
/* async ( X10_TEMP353 )  */ 
{ struct Dist3 RX10_TEMP880 = dstBuffer .distValue ; 
struct Region3 RX10_TEMP881 = RX10_TEMP880 .dReg ; 
const int RX10_TEMP882 = searchPointInRegion3 ( RX10_TEMP881 , pt ) ; 
const int RX10_TEMP883 = 0 ; 
const int RX10_TEMP884 = RX10_TEMP882 < RX10_TEMP883 ; 
if ( RX10_TEMP884 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP885 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP885 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP886 = getPlaceFromDist3 ( RX10_TEMP880 , RX10_TEMP882 ) ; 
const int RX10_TEMP888 = /* here  */ 0 ; 
const int RX10_TEMP889 = RX10_TEMP886 != RX10_TEMP888 ; 
if ( RX10_TEMP889 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP887 = "Bad place access for array dstBuffer" ; 
fprintf(stderr, RX10_TEMP887 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP890 = getRefArrayValue3double ( dstBuffer , RX10_TEMP882 ) ; 
const double X10_TEMP357 = RX10_TEMP890 ; 
const double X10_TEMP358 = X10_TEMP357 ; 
struct Dist3 RX10_TEMP891 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP892 = RX10_TEMP891 .dReg ; 
const int RX10_TEMP893 = searchPointInRegion3 ( RX10_TEMP892 , pt ) ; 
const int RX10_TEMP894 = 0 ; 
const int RX10_TEMP895 = RX10_TEMP893 < RX10_TEMP894 ; 
if ( RX10_TEMP895 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP896 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP896 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP897 = getPlaceFromDist3 ( RX10_TEMP891 , RX10_TEMP893 ) ; 
const int RX10_TEMP899 = /* here  */ 0 ; 
const int RX10_TEMP900 = RX10_TEMP897 != RX10_TEMP899 ; 
if ( RX10_TEMP900 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP898 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP898 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( srcBuffer , RX10_TEMP893 , X10_TEMP358 ) ; 
} 

} 

} 

struct Point1 RX10_TEMP901  ; 
Point1_Point1( &RX10_TEMP901/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP902 = sizes .distValue ; 
struct Region1 RX10_TEMP903 = RX10_TEMP902 .dReg ; 
const int RX10_TEMP904 = searchPointInRegion1 ( RX10_TEMP903 , RX10_TEMP901 ) ; 
const int RX10_TEMP905 = 0 ; 
const int RX10_TEMP906 = RX10_TEMP904 < RX10_TEMP905 ; 
if ( RX10_TEMP906 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP907 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP907 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP908 = getPlaceFromDist1 ( RX10_TEMP902 , RX10_TEMP904 ) ; 
const int RX10_TEMP910 = /* here  */ 0 ; 
const int RX10_TEMP911 = RX10_TEMP908 != RX10_TEMP910 ; 
if ( RX10_TEMP911 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP909 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP909 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP912 = getRefArrayValue1int ( sizes , RX10_TEMP904 ) ; 
const int X10_TEMP362 = RX10_TEMP912 ; 
struct Point1 RX10_TEMP913  ; 
Point1_Point1( &RX10_TEMP913/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP914 = inLt .distValue ; 
struct Region1 RX10_TEMP915 = RX10_TEMP914 .dReg ; 
const int RX10_TEMP916 = searchPointInRegion1 ( RX10_TEMP915 , RX10_TEMP913 ) ; 
const int RX10_TEMP917 = 0 ; 
const int RX10_TEMP918 = RX10_TEMP916 < RX10_TEMP917 ; 
if ( RX10_TEMP918 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP919 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP919 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP920 = getPlaceFromDist1 ( RX10_TEMP914 , RX10_TEMP916 ) ; 
const int RX10_TEMP922 = /* here  */ 0 ; 
const int RX10_TEMP923 = RX10_TEMP920 != RX10_TEMP922 ; 
if ( RX10_TEMP923 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP921 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP921 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP924 = getRefArrayValue1int ( inLt , RX10_TEMP916 ) ; 
const int X10_TEMP363 = RX10_TEMP924 ; 
const int X10_TEMP365 = X10_TEMP362 + X10_TEMP363 ; 
const int X10_TEMP366 = X10_TEMP365 ; 
struct Point1 RX10_TEMP925  ; 
Point1_Point1( &RX10_TEMP925/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP926 = sizes .distValue ; 
struct Region1 RX10_TEMP927 = RX10_TEMP926 .dReg ; 
const int RX10_TEMP928 = searchPointInRegion1 ( RX10_TEMP927 , RX10_TEMP925 ) ; 
const int RX10_TEMP929 = 0 ; 
const int RX10_TEMP930 = RX10_TEMP928 < RX10_TEMP929 ; 
if ( RX10_TEMP930 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP931 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP931 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP932 = getPlaceFromDist1 ( RX10_TEMP926 , RX10_TEMP928 ) ; 
const int RX10_TEMP934 = /* here  */ 0 ; 
const int RX10_TEMP935 = RX10_TEMP932 != RX10_TEMP934 ; 
if ( RX10_TEMP935 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP933 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP933 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP928 , X10_TEMP366 ) ; 
struct Point1 RX10_TEMP936  ; 
Point1_Point1( &RX10_TEMP936/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP937 = offsets .distValue ; 
struct Region1 RX10_TEMP938 = RX10_TEMP937 .dReg ; 
const int RX10_TEMP939 = searchPointInRegion1 ( RX10_TEMP938 , RX10_TEMP936 ) ; 
const int RX10_TEMP940 = 0 ; 
const int RX10_TEMP941 = RX10_TEMP939 < RX10_TEMP940 ; 
if ( RX10_TEMP941 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP942 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP942 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP943 = getPlaceFromDist1 ( RX10_TEMP937 , RX10_TEMP939 ) ; 
const int RX10_TEMP945 = /* here  */ 0 ; 
const int RX10_TEMP946 = RX10_TEMP943 != RX10_TEMP945 ; 
if ( RX10_TEMP946 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP944 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP944 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP947 = getRefArrayValue1int ( offsets , RX10_TEMP939 ) ; 
const int X10_TEMP370 = RX10_TEMP947 ; 
struct Point1 RX10_TEMP948  ; 
Point1_Point1( &RX10_TEMP948/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP949 = inLt .distValue ; 
struct Region1 RX10_TEMP950 = RX10_TEMP949 .dReg ; 
const int RX10_TEMP951 = searchPointInRegion1 ( RX10_TEMP950 , RX10_TEMP948 ) ; 
const int RX10_TEMP952 = 0 ; 
const int RX10_TEMP953 = RX10_TEMP951 < RX10_TEMP952 ; 
if ( RX10_TEMP953 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP954 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP954 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP955 = getPlaceFromDist1 ( RX10_TEMP949 , RX10_TEMP951 ) ; 
const int RX10_TEMP957 = /* here  */ 0 ; 
const int RX10_TEMP958 = RX10_TEMP955 != RX10_TEMP957 ; 
if ( RX10_TEMP958 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP956 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP956 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP959 = getRefArrayValue1int ( inLt , RX10_TEMP951 ) ; 
const int X10_TEMP371 = RX10_TEMP959 ; 
const int X10_TEMP373 = X10_TEMP370 - X10_TEMP371 ; 
const int X10_TEMP374 = X10_TEMP373 ; 
struct Point1 RX10_TEMP960  ; 
Point1_Point1( &RX10_TEMP960/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP961 = offsets .distValue ; 
struct Region1 RX10_TEMP962 = RX10_TEMP961 .dReg ; 
const int RX10_TEMP963 = searchPointInRegion1 ( RX10_TEMP962 , RX10_TEMP960 ) ; 
const int RX10_TEMP964 = 0 ; 
const int RX10_TEMP965 = RX10_TEMP963 < RX10_TEMP964 ; 
if ( RX10_TEMP965 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP966 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP966 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP967 = getPlaceFromDist1 ( RX10_TEMP961 , RX10_TEMP963 ) ; 
const int RX10_TEMP969 = /* here  */ 0 ; 
const int RX10_TEMP970 = RX10_TEMP967 != RX10_TEMP969 ; 
if ( RX10_TEMP970 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP968 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP968 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( offsets , RX10_TEMP963 , X10_TEMP374 ) ; 
} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP376 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP972 = X10_TEMP376 .dReg ; 
const int RX10_TEMP975 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP973 = RX10_TEMP972 .regSize ; 
RX10_TEMP973 = RX10_TEMP973 - RX10_TEMP975 ; const int SX10_TEMP117 = 1 ; 
const int RX10_TEMP974 = RX10_TEMP973 + SX10_TEMP117 ; 
for ( int SX10_TEMP118 = 0 ; SX10_TEMP118 < RX10_TEMP974 ; SX10_TEMP118 ++ ) 
{ const int RX10_TEMP971 = SX10_TEMP118 ; 
const int RX10_TEMP976 = RX10_TEMP971 ; 
struct Point1 X10_TEMP377 = regionOrdinalPoint1 ( RX10_TEMP972 , RX10_TEMP976 ) ; 
const int pl = X10_TEMP377 .f0 ; 
struct Region1 RX10_TEMP977 = X10_TEMP376 .dReg ; 
const int RX10_TEMP978 = searchPointInRegion1 ( RX10_TEMP977 , X10_TEMP377 ) ; 
const int RX10_TEMP979 = 0 ; 
const int RX10_TEMP980 = RX10_TEMP978 < RX10_TEMP979 ; 
if ( RX10_TEMP980 ) 
{ const char * RX10_TEMP981 = "Point X10_TEMP377 not found in the distribution X10_TEMP376." ; 
fprintf(stderr, RX10_TEMP981 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP982 = getPlaceFromDist1 ( X10_TEMP376 , RX10_TEMP978 ) ; 
const int X10_TEMP378 = RX10_TEMP982 ; 
/* async ( X10_TEMP378 )  */ 
{ struct Point1 RX10_TEMP983  ; 
Point1_Point1( &RX10_TEMP983/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP984 = outLt .distValue ; 
struct Region1 RX10_TEMP985 = RX10_TEMP984 .dReg ; 
const int RX10_TEMP986 = searchPointInRegion1 ( RX10_TEMP985 , RX10_TEMP983 ) ; 
const int RX10_TEMP987 = 0 ; 
const int RX10_TEMP988 = RX10_TEMP986 < RX10_TEMP987 ; 
if ( RX10_TEMP988 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP989 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP989 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP990 = getPlaceFromDist1 ( RX10_TEMP984 , RX10_TEMP986 ) ; 
const int RX10_TEMP992 = /* here  */ 0 ; 
const int RX10_TEMP993 = RX10_TEMP990 != RX10_TEMP992 ; 
if ( RX10_TEMP993 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP991 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP991 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP994 = getRefArrayValue1int ( outLt , RX10_TEMP986 ) ; 
const int X10_TEMP380 = RX10_TEMP994 ; 
const int X10_TEMP381 = 0 ; 
const int X10_TEMP383 = X10_TEMP380 > X10_TEMP381 ; 
if ( X10_TEMP383 ) 
{ struct Point1 RX10_TEMP995  ; 
Point1_Point1( &RX10_TEMP995/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP996 = outLt .distValue ; 
struct Region1 RX10_TEMP997 = RX10_TEMP996 .dReg ; 
const int RX10_TEMP998 = searchPointInRegion1 ( RX10_TEMP997 , RX10_TEMP995 ) ; 
const int RX10_TEMP999 = 0 ; 
const int RX10_TEMP1000 = RX10_TEMP998 < RX10_TEMP999 ; 
if ( RX10_TEMP1000 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1001 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1001 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1002 = getPlaceFromDist1 ( RX10_TEMP996 , RX10_TEMP998 ) ; 
const int RX10_TEMP1004 = /* here  */ 0 ; 
const int RX10_TEMP1005 = RX10_TEMP1002 != RX10_TEMP1004 ; 
if ( RX10_TEMP1005 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1003 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1003 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1006 = getRefArrayValue1int ( outLt , RX10_TEMP998 ) ; 
const int bsize = RX10_TEMP1006 ; 
const int X10_TEMP389 = 0 ; 
const int X10_TEMP387 = 1 ; 
const int X10_TEMP390 = bsize - X10_TEMP387 ; 
struct Region2 rBuffer = createNewRegion2RA ( X10_TEMP389 , X10_TEMP390 , rRank2 ) ; 
struct Region2 RX10_TEMP1007 = rBuffer ; 
const int RX10_TEMP1024 = rBuffer .regSize ; 
const int RX10_TEMP1025 = 1 ; 
const int RX10_TEMP1026 = RX10_TEMP1024 - RX10_TEMP1025 ; 
const int SX10_TEMP119 = 1 ; 
const int RX10_TEMP1023 = RX10_TEMP1026 + SX10_TEMP119 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP120 = (double *)calloc(RX10_TEMP1023,sizeof( double )); 
for ( int SX10_TEMP121 = 0 ; SX10_TEMP121 < RX10_TEMP1023 ; SX10_TEMP121 ++ ) 
{ const int RX10_TEMP1008 = SX10_TEMP121 ; 
const int RX10_TEMP1010 = RX10_TEMP1008 ; 
struct Point2 RX10_TEMP1009 = regionOrdinalPoint2 ( RX10_TEMP1007 , RX10_TEMP1010 ) ; 
const int i = RX10_TEMP1009 .f0 ; 
const int j = RX10_TEMP1009 .f1 ; 
struct Point3 RX10_TEMP1011  ; 
Point3_Point3( &RX10_TEMP1011/*Assignment*/, pl , i , j ) ; 
struct Dist3 RX10_TEMP1012 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP1013 = RX10_TEMP1012 .dReg ; 
const int RX10_TEMP1014 = searchPointInRegion3 ( RX10_TEMP1013 , RX10_TEMP1011 ) ; 
const int RX10_TEMP1015 = 0 ; 
const int RX10_TEMP1016 = RX10_TEMP1014 < RX10_TEMP1015 ; 
if ( RX10_TEMP1016 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1017 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1017 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1018 = getPlaceFromDist3 ( RX10_TEMP1012 , RX10_TEMP1014 ) ; 
const int RX10_TEMP1020 = /* here  */ 0 ; 
const int RX10_TEMP1021 = RX10_TEMP1018 != RX10_TEMP1020 ; 
if ( RX10_TEMP1021 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1019 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP1019 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP1022 = getRefArrayValue3double ( srcBuffer , RX10_TEMP1014 ) ; 
const double X10_TEMP397 = RX10_TEMP1022 ; 
SX10_TEMP120 [ RX10_TEMP1008 ] = X10_TEMP397 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP1027 = SX10_TEMP120 ; 
struct doubleValArray2 RX10_TEMP1028  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP1028/*Assignment*/, rBuffer , RX10_TEMP1027 ) ; 
struct doubleValArray2 X10_TEMP398 = RX10_TEMP1028 ; 
struct doubleValArray2 sBuffer = X10_TEMP398 ; 
const int X10_TEMP400 = /* here  */ 0 ; 
const int X10_TEMP402 = /* X10_TEMP400 . prev ( )  */ 0 ; 
/* async ( X10_TEMP402 )  */ 
{ const int X10_TEMP404 = /* here  */ 0 ; 
const int RX10_TEMP1033 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1031 = rBuffer .regSize ; 
RX10_TEMP1031 = RX10_TEMP1031 - RX10_TEMP1033 ; const int SX10_TEMP122 = 1 ; 
const int RX10_TEMP1032 = RX10_TEMP1031 + SX10_TEMP122 ; 
for ( int SX10_TEMP123 = 0 ; SX10_TEMP123 < RX10_TEMP1032 ; SX10_TEMP123 ++ ) 
{ const int RX10_TEMP1029 = SX10_TEMP123 ; 
const int RX10_TEMP1034 = RX10_TEMP1029 ; 
struct Point2 RX10_TEMP1030 = regionOrdinalPoint2 ( rBuffer , RX10_TEMP1034 ) ; 
const int i = RX10_TEMP1030 .f0 ; 
const int j = RX10_TEMP1030 .f1 ; 
/* async ( X10_TEMP404 )  */ 
{ const int X10_TEMP405 = /* here  */ 0 ; 
const int X10_TEMP409 = /* X10_TEMP405 . id  */ 0 ; 
struct Point2 RX10_TEMP1035  ; 
Point2_Point2( &RX10_TEMP1035/*Assignment*/, i , j ) ; 
struct Region2 RX10_TEMP1036 = sBuffer .regionValue ; 
const int RX10_TEMP1037 = searchPointInRegion2 ( RX10_TEMP1036 , RX10_TEMP1035 ) ; 
const int RX10_TEMP1038 = 0 ; 
const int RX10_TEMP1039 = RX10_TEMP1037 < RX10_TEMP1038 ; 
if ( RX10_TEMP1039 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1040 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1040 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP1041 = sBuffer .contents ; 
const double X10_TEMP413 = RX10_TEMP1041 [ RX10_TEMP1037 ] 
; 
const double X10_TEMP414 = X10_TEMP413 ; 
struct Point3 RX10_TEMP1042  ; 
Point3_Point3( &RX10_TEMP1042/*Assignment*/, X10_TEMP409 , i , j ) ; 
struct Dist3 RX10_TEMP1043 = dstBuffer .distValue ; 
struct Region3 RX10_TEMP1044 = RX10_TEMP1043 .dReg ; 
const int RX10_TEMP1045 = searchPointInRegion3 ( RX10_TEMP1044 , RX10_TEMP1042 ) ; 
const int RX10_TEMP1046 = 0 ; 
const int RX10_TEMP1047 = RX10_TEMP1045 < RX10_TEMP1046 ; 
if ( RX10_TEMP1047 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1048 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1048 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1049 = getPlaceFromDist3 ( RX10_TEMP1043 , RX10_TEMP1045 ) ; 
const int RX10_TEMP1051 = /* here  */ 0 ; 
const int RX10_TEMP1052 = RX10_TEMP1049 != RX10_TEMP1051 ; 
if ( RX10_TEMP1052 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1050 = "Bad place access for array dstBuffer" ; 
fprintf(stderr, RX10_TEMP1050 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( dstBuffer , RX10_TEMP1045 , X10_TEMP414 ) ; 
} 

} 

const int X10_TEMP415 = /* here  */ 0 ; 
const int X10_TEMP417 = /* X10_TEMP415 . id  */ 0 ; 
const int X10_TEMP419 = bsize ; 
struct Point1 RX10_TEMP1053  ; 
Point1_Point1( &RX10_TEMP1053/*Assignment*/, X10_TEMP417 ) ; 
struct Dist1 RX10_TEMP1054 = inRt .distValue ; 
struct Region1 RX10_TEMP1055 = RX10_TEMP1054 .dReg ; 
const int RX10_TEMP1056 = searchPointInRegion1 ( RX10_TEMP1055 , RX10_TEMP1053 ) ; 
const int RX10_TEMP1057 = 0 ; 
const int RX10_TEMP1058 = RX10_TEMP1056 < RX10_TEMP1057 ; 
if ( RX10_TEMP1058 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1059 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1059 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1060 = getPlaceFromDist1 ( RX10_TEMP1054 , RX10_TEMP1056 ) ; 
const int RX10_TEMP1062 = /* here  */ 0 ; 
const int RX10_TEMP1063 = RX10_TEMP1060 != RX10_TEMP1062 ; 
if ( RX10_TEMP1063 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1061 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1061 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP1056 , X10_TEMP419 ) ; 
} 

} 

} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP421 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1065 = X10_TEMP421 .dReg ; 
const int RX10_TEMP1068 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1066 = RX10_TEMP1065 .regSize ; 
RX10_TEMP1066 = RX10_TEMP1066 - RX10_TEMP1068 ; const int SX10_TEMP124 = 1 ; 
const int RX10_TEMP1067 = RX10_TEMP1066 + SX10_TEMP124 ; 
for ( int SX10_TEMP125 = 0 ; SX10_TEMP125 < RX10_TEMP1067 ; SX10_TEMP125 ++ ) 
{ const int RX10_TEMP1064 = SX10_TEMP125 ; 
const int RX10_TEMP1069 = RX10_TEMP1064 ; 
struct Point1 X10_TEMP422 = regionOrdinalPoint1 ( RX10_TEMP1065 , RX10_TEMP1069 ) ; 
const int pl = X10_TEMP422 .f0 ; 
struct Region1 RX10_TEMP1070 = X10_TEMP421 .dReg ; 
const int RX10_TEMP1071 = searchPointInRegion1 ( RX10_TEMP1070 , X10_TEMP422 ) ; 
const int RX10_TEMP1072 = 0 ; 
const int RX10_TEMP1073 = RX10_TEMP1071 < RX10_TEMP1072 ; 
if ( RX10_TEMP1073 ) 
{ const char * RX10_TEMP1074 = "Point X10_TEMP422 not found in the distribution X10_TEMP421." ; 
fprintf(stderr, RX10_TEMP1074 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1075 = getPlaceFromDist1 ( X10_TEMP421 , RX10_TEMP1071 ) ; 
const int X10_TEMP423 = RX10_TEMP1075 ; 
/* async ( X10_TEMP423 )  */ 
{ struct Point1 RX10_TEMP1076  ; 
Point1_Point1( &RX10_TEMP1076/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1077 = sizes .distValue ; 
struct Region1 RX10_TEMP1078 = RX10_TEMP1077 .dReg ; 
const int RX10_TEMP1079 = searchPointInRegion1 ( RX10_TEMP1078 , RX10_TEMP1076 ) ; 
const int RX10_TEMP1080 = 0 ; 
const int RX10_TEMP1081 = RX10_TEMP1079 < RX10_TEMP1080 ; 
if ( RX10_TEMP1081 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1082 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1082 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1083 = getPlaceFromDist1 ( RX10_TEMP1077 , RX10_TEMP1079 ) ; 
const int RX10_TEMP1085 = /* here  */ 0 ; 
const int RX10_TEMP1086 = RX10_TEMP1083 != RX10_TEMP1085 ; 
if ( RX10_TEMP1086 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1084 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1084 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1087 = getRefArrayValue1int ( sizes , RX10_TEMP1079 ) ; 
const int X10_TEMP427 = RX10_TEMP1087 ; 
struct Point1 RX10_TEMP1088  ; 
Point1_Point1( &RX10_TEMP1088/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1089 = outLt .distValue ; 
struct Region1 RX10_TEMP1090 = RX10_TEMP1089 .dReg ; 
const int RX10_TEMP1091 = searchPointInRegion1 ( RX10_TEMP1090 , RX10_TEMP1088 ) ; 
const int RX10_TEMP1092 = 0 ; 
const int RX10_TEMP1093 = RX10_TEMP1091 < RX10_TEMP1092 ; 
if ( RX10_TEMP1093 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1094 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1094 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1095 = getPlaceFromDist1 ( RX10_TEMP1089 , RX10_TEMP1091 ) ; 
const int RX10_TEMP1097 = /* here  */ 0 ; 
const int RX10_TEMP1098 = RX10_TEMP1095 != RX10_TEMP1097 ; 
if ( RX10_TEMP1098 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1096 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1096 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1099 = getRefArrayValue1int ( outLt , RX10_TEMP1091 ) ; 
const int X10_TEMP428 = RX10_TEMP1099 ; 
const int X10_TEMP430 = X10_TEMP427 - X10_TEMP428 ; 
const int X10_TEMP431 = X10_TEMP430 ; 
struct Point1 RX10_TEMP1100  ; 
Point1_Point1( &RX10_TEMP1100/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1101 = sizes .distValue ; 
struct Region1 RX10_TEMP1102 = RX10_TEMP1101 .dReg ; 
const int RX10_TEMP1103 = searchPointInRegion1 ( RX10_TEMP1102 , RX10_TEMP1100 ) ; 
const int RX10_TEMP1104 = 0 ; 
const int RX10_TEMP1105 = RX10_TEMP1103 < RX10_TEMP1104 ; 
if ( RX10_TEMP1105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1106 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1106 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1107 = getPlaceFromDist1 ( RX10_TEMP1101 , RX10_TEMP1103 ) ; 
const int RX10_TEMP1109 = /* here  */ 0 ; 
const int RX10_TEMP1110 = RX10_TEMP1107 != RX10_TEMP1109 ; 
if ( RX10_TEMP1110 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1108 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1108 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP1103 , X10_TEMP431 ) ; 
struct Point1 RX10_TEMP1111  ; 
Point1_Point1( &RX10_TEMP1111/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1112 = offsets .distValue ; 
struct Region1 RX10_TEMP1113 = RX10_TEMP1112 .dReg ; 
const int RX10_TEMP1114 = searchPointInRegion1 ( RX10_TEMP1113 , RX10_TEMP1111 ) ; 
const int RX10_TEMP1115 = 0 ; 
const int RX10_TEMP1116 = RX10_TEMP1114 < RX10_TEMP1115 ; 
if ( RX10_TEMP1116 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1117 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1117 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1118 = getPlaceFromDist1 ( RX10_TEMP1112 , RX10_TEMP1114 ) ; 
const int RX10_TEMP1120 = /* here  */ 0 ; 
const int RX10_TEMP1121 = RX10_TEMP1118 != RX10_TEMP1120 ; 
if ( RX10_TEMP1121 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1119 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP1119 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1122 = getRefArrayValue1int ( offsets , RX10_TEMP1114 ) ; 
const int X10_TEMP435 = RX10_TEMP1122 ; 
struct Point1 RX10_TEMP1123  ; 
Point1_Point1( &RX10_TEMP1123/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1124 = outLt .distValue ; 
struct Region1 RX10_TEMP1125 = RX10_TEMP1124 .dReg ; 
const int RX10_TEMP1126 = searchPointInRegion1 ( RX10_TEMP1125 , RX10_TEMP1123 ) ; 
const int RX10_TEMP1127 = 0 ; 
const int RX10_TEMP1128 = RX10_TEMP1126 < RX10_TEMP1127 ; 
if ( RX10_TEMP1128 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1129 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1129 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1130 = getPlaceFromDist1 ( RX10_TEMP1124 , RX10_TEMP1126 ) ; 
const int RX10_TEMP1132 = /* here  */ 0 ; 
const int RX10_TEMP1133 = RX10_TEMP1130 != RX10_TEMP1132 ; 
if ( RX10_TEMP1133 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1131 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1131 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1134 = getRefArrayValue1int ( outLt , RX10_TEMP1126 ) ; 
const int X10_TEMP436 = RX10_TEMP1134 ; 
const int X10_TEMP438 = X10_TEMP435 + X10_TEMP436 ; 
const int X10_TEMP439 = X10_TEMP438 ; 
struct Point1 RX10_TEMP1135  ; 
Point1_Point1( &RX10_TEMP1135/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1136 = offsets .distValue ; 
struct Region1 RX10_TEMP1137 = RX10_TEMP1136 .dReg ; 
const int RX10_TEMP1138 = searchPointInRegion1 ( RX10_TEMP1137 , RX10_TEMP1135 ) ; 
const int RX10_TEMP1139 = 0 ; 
const int RX10_TEMP1140 = RX10_TEMP1138 < RX10_TEMP1139 ; 
if ( RX10_TEMP1140 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1141 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1141 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1142 = getPlaceFromDist1 ( RX10_TEMP1136 , RX10_TEMP1138 ) ; 
const int RX10_TEMP1144 = /* here  */ 0 ; 
const int RX10_TEMP1145 = RX10_TEMP1142 != RX10_TEMP1144 ; 
if ( RX10_TEMP1145 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1143 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP1143 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( offsets , RX10_TEMP1138 , X10_TEMP439 ) ; 
struct Point1 RX10_TEMP1146  ; 
Point1_Point1( &RX10_TEMP1146/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1147 = sizes .distValue ; 
struct Region1 RX10_TEMP1148 = RX10_TEMP1147 .dReg ; 
const int RX10_TEMP1149 = searchPointInRegion1 ( RX10_TEMP1148 , RX10_TEMP1146 ) ; 
const int RX10_TEMP1150 = 0 ; 
const int RX10_TEMP1151 = RX10_TEMP1149 < RX10_TEMP1150 ; 
if ( RX10_TEMP1151 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1152 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1152 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1153 = getPlaceFromDist1 ( RX10_TEMP1147 , RX10_TEMP1149 ) ; 
const int RX10_TEMP1155 = /* here  */ 0 ; 
const int RX10_TEMP1156 = RX10_TEMP1153 != RX10_TEMP1155 ; 
if ( RX10_TEMP1156 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1154 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1154 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1157 = getRefArrayValue1int ( sizes , RX10_TEMP1149 ) ; 
const int X10_TEMP441 = RX10_TEMP1157 ; 
const int X10_TEMP442 = 0 ; 
const int X10_TEMP446 = X10_TEMP441 > X10_TEMP442 ; 
struct Point1 RX10_TEMP1158  ; 
Point1_Point1( &RX10_TEMP1158/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1159 = outLt .distValue ; 
struct Region1 RX10_TEMP1160 = RX10_TEMP1159 .dReg ; 
const int RX10_TEMP1161 = searchPointInRegion1 ( RX10_TEMP1160 , RX10_TEMP1158 ) ; 
const int RX10_TEMP1162 = 0 ; 
const int RX10_TEMP1163 = RX10_TEMP1161 < RX10_TEMP1162 ; 
if ( RX10_TEMP1163 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1164 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1164 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1165 = getPlaceFromDist1 ( RX10_TEMP1159 , RX10_TEMP1161 ) ; 
const int RX10_TEMP1167 = /* here  */ 0 ; 
const int RX10_TEMP1168 = RX10_TEMP1165 != RX10_TEMP1167 ; 
if ( RX10_TEMP1168 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1166 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1166 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1169 = getRefArrayValue1int ( outLt , RX10_TEMP1161 ) ; 
const int X10_TEMP444 = RX10_TEMP1169 ; 
const int X10_TEMP445 = 0 ; 
const int X10_TEMP447 = X10_TEMP444 > X10_TEMP445 ; 
const int X10_TEMP449 = X10_TEMP446 && X10_TEMP447 ; 
if ( X10_TEMP449 ) 
{ const int X10_TEMP455 = 0 ; 
struct Point1 RX10_TEMP1170  ; 
Point1_Point1( &RX10_TEMP1170/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1171 = sizes .distValue ; 
struct Region1 RX10_TEMP1172 = RX10_TEMP1171 .dReg ; 
const int RX10_TEMP1173 = searchPointInRegion1 ( RX10_TEMP1172 , RX10_TEMP1170 ) ; 
const int RX10_TEMP1174 = 0 ; 
const int RX10_TEMP1175 = RX10_TEMP1173 < RX10_TEMP1174 ; 
if ( RX10_TEMP1175 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1176 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1176 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1177 = getPlaceFromDist1 ( RX10_TEMP1171 , RX10_TEMP1173 ) ; 
const int RX10_TEMP1179 = /* here  */ 0 ; 
const int RX10_TEMP1180 = RX10_TEMP1177 != RX10_TEMP1179 ; 
if ( RX10_TEMP1180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1178 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1178 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1181 = getRefArrayValue1int ( sizes , RX10_TEMP1173 ) ; 
const int X10_TEMP452 = RX10_TEMP1181 ; 
const int X10_TEMP453 = 1 ; 
const int X10_TEMP456 = X10_TEMP452 - X10_TEMP453 ; 
struct Region1 X10_TEMP458 = createNewRegion1R ( X10_TEMP455 , X10_TEMP456 ) ; 
const int RX10_TEMP1186 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1184 = X10_TEMP458 .regSize ; 
RX10_TEMP1184 = RX10_TEMP1184 - RX10_TEMP1186 ; const int SX10_TEMP126 = 1 ; 
const int RX10_TEMP1185 = RX10_TEMP1184 + SX10_TEMP126 ; 
for ( int SX10_TEMP127 = 0 ; SX10_TEMP127 < RX10_TEMP1185 ; SX10_TEMP127 ++ ) 
{ const int RX10_TEMP1182 = SX10_TEMP127 ; 
const int RX10_TEMP1187 = RX10_TEMP1182 ; 
struct Point1 RX10_TEMP1183 = regionOrdinalPoint1 ( X10_TEMP458 , RX10_TEMP1187 ) ; 
const int i = RX10_TEMP1183 .f0 ; 
/* finish  */ 
{ const int X10_TEMP460 = /* here  */ 0 ; 
const int RX10_TEMP1192 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1190 = rRank2 .regSize ; 
RX10_TEMP1190 = RX10_TEMP1190 - RX10_TEMP1192 ; const int SX10_TEMP128 = 1 ; 
const int RX10_TEMP1191 = RX10_TEMP1190 + SX10_TEMP128 ; 
for ( int SX10_TEMP129 = 0 ; SX10_TEMP129 < RX10_TEMP1191 ; SX10_TEMP129 ++ ) 
{ const int RX10_TEMP1188 = SX10_TEMP129 ; 
const int RX10_TEMP1193 = RX10_TEMP1188 ; 
struct Point1 RX10_TEMP1189 = regionOrdinalPoint1 ( rRank2 , RX10_TEMP1193 ) ; 
const int j = RX10_TEMP1189 .f0 ; 
/* async ( X10_TEMP460 )  */ 
{ struct Point1 RX10_TEMP1194  ; 
Point1_Point1( &RX10_TEMP1194/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1195 = outLt .distValue ; 
struct Region1 RX10_TEMP1196 = RX10_TEMP1195 .dReg ; 
const int RX10_TEMP1197 = searchPointInRegion1 ( RX10_TEMP1196 , RX10_TEMP1194 ) ; 
const int RX10_TEMP1198 = 0 ; 
const int RX10_TEMP1199 = RX10_TEMP1197 < RX10_TEMP1198 ; 
if ( RX10_TEMP1199 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1200 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1200 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1201 = getPlaceFromDist1 ( RX10_TEMP1195 , RX10_TEMP1197 ) ; 
const int RX10_TEMP1203 = /* here  */ 0 ; 
const int RX10_TEMP1204 = RX10_TEMP1201 != RX10_TEMP1203 ; 
if ( RX10_TEMP1204 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1202 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1202 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1205 = getRefArrayValue1int ( outLt , RX10_TEMP1197 ) ; 
const int X10_TEMP466 = RX10_TEMP1205 ; 
const int X10_TEMP469 = i + X10_TEMP466 ; 
struct Point3 RX10_TEMP1206  ; 
Point3_Point3( &RX10_TEMP1206/*Assignment*/, pl , X10_TEMP469 , j ) ; 
struct Dist3 RX10_TEMP1207 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP1208 = RX10_TEMP1207 .dReg ; 
const int RX10_TEMP1209 = searchPointInRegion3 ( RX10_TEMP1208 , RX10_TEMP1206 ) ; 
const int RX10_TEMP1210 = 0 ; 
const int RX10_TEMP1211 = RX10_TEMP1209 < RX10_TEMP1210 ; 
if ( RX10_TEMP1211 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1212 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1212 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1213 = getPlaceFromDist3 ( RX10_TEMP1207 , RX10_TEMP1209 ) ; 
const int RX10_TEMP1215 = /* here  */ 0 ; 
const int RX10_TEMP1216 = RX10_TEMP1213 != RX10_TEMP1215 ; 
if ( RX10_TEMP1216 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1214 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP1214 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP1217 = getRefArrayValue3double ( srcBuffer , RX10_TEMP1209 ) ; 
const double X10_TEMP471 = RX10_TEMP1217 ; 
const double X10_TEMP472 = X10_TEMP471 ; 
struct Point3 RX10_TEMP1218  ; 
Point3_Point3( &RX10_TEMP1218/*Assignment*/, pl , i , j ) ; 
struct Dist3 RX10_TEMP1219 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP1220 = RX10_TEMP1219 .dReg ; 
const int RX10_TEMP1221 = searchPointInRegion3 ( RX10_TEMP1220 , RX10_TEMP1218 ) ; 
const int RX10_TEMP1222 = 0 ; 
const int RX10_TEMP1223 = RX10_TEMP1221 < RX10_TEMP1222 ; 
if ( RX10_TEMP1223 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1224 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1224 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1225 = getPlaceFromDist3 ( RX10_TEMP1219 , RX10_TEMP1221 ) ; 
const int RX10_TEMP1227 = /* here  */ 0 ; 
const int RX10_TEMP1228 = RX10_TEMP1225 != RX10_TEMP1227 ; 
if ( RX10_TEMP1228 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1226 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP1226 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( srcBuffer , RX10_TEMP1221 , X10_TEMP472 ) ; 
} 

} 

} 

} 

} 

struct Point1 RX10_TEMP1229  ; 
Point1_Point1( &RX10_TEMP1229/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1230 = sizes .distValue ; 
struct Region1 RX10_TEMP1231 = RX10_TEMP1230 .dReg ; 
const int RX10_TEMP1232 = searchPointInRegion1 ( RX10_TEMP1231 , RX10_TEMP1229 ) ; 
const int RX10_TEMP1233 = 0 ; 
const int RX10_TEMP1234 = RX10_TEMP1232 < RX10_TEMP1233 ; 
if ( RX10_TEMP1234 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1235 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1235 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1236 = getPlaceFromDist1 ( RX10_TEMP1230 , RX10_TEMP1232 ) ; 
const int RX10_TEMP1238 = /* here  */ 0 ; 
const int RX10_TEMP1239 = RX10_TEMP1236 != RX10_TEMP1238 ; 
if ( RX10_TEMP1239 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1237 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1237 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1240 = getRefArrayValue1int ( sizes , RX10_TEMP1232 ) ; 
const int X10_TEMP476 = RX10_TEMP1240 ; 
struct Point1 RX10_TEMP1241  ; 
Point1_Point1( &RX10_TEMP1241/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1242 = inRt .distValue ; 
struct Region1 RX10_TEMP1243 = RX10_TEMP1242 .dReg ; 
const int RX10_TEMP1244 = searchPointInRegion1 ( RX10_TEMP1243 , RX10_TEMP1241 ) ; 
const int RX10_TEMP1245 = 0 ; 
const int RX10_TEMP1246 = RX10_TEMP1244 < RX10_TEMP1245 ; 
if ( RX10_TEMP1246 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1247 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1247 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1248 = getPlaceFromDist1 ( RX10_TEMP1242 , RX10_TEMP1244 ) ; 
const int RX10_TEMP1250 = /* here  */ 0 ; 
const int RX10_TEMP1251 = RX10_TEMP1248 != RX10_TEMP1250 ; 
if ( RX10_TEMP1251 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1249 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1249 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1252 = getRefArrayValue1int ( inRt , RX10_TEMP1244 ) ; 
const int X10_TEMP477 = RX10_TEMP1252 ; 
const int X10_TEMP478 = X10_TEMP476 + X10_TEMP477 ; 
const int X10_TEMP481 = X10_TEMP478 - MAX_ROWS ; 
const int X10_TEMP482 = 0 ; 
const int X10_TEMP484 = X10Util_maxInt ( X10_TEMP481 , X10_TEMP482 ) ; 
const int X10_TEMP485 = X10_TEMP484 ; 
struct Point1 RX10_TEMP1253  ; 
Point1_Point1( &RX10_TEMP1253/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1254 = outLt .distValue ; 
struct Region1 RX10_TEMP1255 = RX10_TEMP1254 .dReg ; 
const int RX10_TEMP1256 = searchPointInRegion1 ( RX10_TEMP1255 , RX10_TEMP1253 ) ; 
const int RX10_TEMP1257 = 0 ; 
const int RX10_TEMP1258 = RX10_TEMP1256 < RX10_TEMP1257 ; 
if ( RX10_TEMP1258 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1259 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1259 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1260 = getPlaceFromDist1 ( RX10_TEMP1254 , RX10_TEMP1256 ) ; 
const int RX10_TEMP1262 = /* here  */ 0 ; 
const int RX10_TEMP1263 = RX10_TEMP1260 != RX10_TEMP1262 ; 
if ( RX10_TEMP1263 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1261 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1261 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP1256 , X10_TEMP485 ) ; 
struct Point1 RX10_TEMP1264  ; 
Point1_Point1( &RX10_TEMP1264/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1265 = outLt .distValue ; 
struct Region1 RX10_TEMP1266 = RX10_TEMP1265 .dReg ; 
const int RX10_TEMP1267 = searchPointInRegion1 ( RX10_TEMP1266 , RX10_TEMP1264 ) ; 
const int RX10_TEMP1268 = 0 ; 
const int RX10_TEMP1269 = RX10_TEMP1267 < RX10_TEMP1268 ; 
if ( RX10_TEMP1269 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1270 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1270 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1271 = getPlaceFromDist1 ( RX10_TEMP1265 , RX10_TEMP1267 ) ; 
const int RX10_TEMP1273 = /* here  */ 0 ; 
const int RX10_TEMP1274 = RX10_TEMP1271 != RX10_TEMP1273 ; 
if ( RX10_TEMP1274 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1272 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1272 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1275 = getRefArrayValue1int ( outLt , RX10_TEMP1267 ) ; 
const int X10_TEMP487 = RX10_TEMP1275 ; 
const int X10_TEMP488 = 0 ; 
const int X10_TEMP490 = X10_TEMP487 > X10_TEMP488 ; 
if ( X10_TEMP490 ) 
{ struct Point1 RX10_TEMP1276  ; 
Point1_Point1( &RX10_TEMP1276/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1277 = pr .distValue ; 
struct Region1 RX10_TEMP1278 = RX10_TEMP1277 .dReg ; 
const int RX10_TEMP1279 = searchPointInRegion1 ( RX10_TEMP1278 , RX10_TEMP1276 ) ; 
const int RX10_TEMP1280 = 0 ; 
const int RX10_TEMP1281 = RX10_TEMP1279 < RX10_TEMP1280 ; 
if ( RX10_TEMP1281 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1282 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1282 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1283 = getPlaceFromDist1 ( RX10_TEMP1277 , RX10_TEMP1279 ) ; 
const int RX10_TEMP1285 = /* here  */ 0 ; 
const int RX10_TEMP1286 = RX10_TEMP1283 != RX10_TEMP1285 ; 
if ( RX10_TEMP1286 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1284 = "Bad place access for array pr" ; 
fprintf(stderr, RX10_TEMP1284 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1287 = getRefArrayValue1int ( pr , RX10_TEMP1279 ) ; 
const int X10_TEMP496 = RX10_TEMP1287 ; 
struct Point1 RX10_TEMP1288  ; 
Point1_Point1( &RX10_TEMP1288/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1289 = outLt .distValue ; 
struct Region1 RX10_TEMP1290 = RX10_TEMP1289 .dReg ; 
const int RX10_TEMP1291 = searchPointInRegion1 ( RX10_TEMP1290 , RX10_TEMP1288 ) ; 
const int RX10_TEMP1292 = 0 ; 
const int RX10_TEMP1293 = RX10_TEMP1291 < RX10_TEMP1292 ; 
if ( RX10_TEMP1293 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1294 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1294 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1295 = getPlaceFromDist1 ( RX10_TEMP1289 , RX10_TEMP1291 ) ; 
const int RX10_TEMP1297 = /* here  */ 0 ; 
const int RX10_TEMP1298 = RX10_TEMP1295 != RX10_TEMP1297 ; 
if ( RX10_TEMP1298 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1296 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1296 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1299 = getRefArrayValue1int ( outLt , RX10_TEMP1291 ) ; 
const int X10_TEMP497 = RX10_TEMP1299 ; 
const int X10_TEMP499 = X10Util_maxInt ( X10_TEMP496 , X10_TEMP497 ) ; 
const int X10_TEMP500 = X10_TEMP499 ; 
struct Point1 RX10_TEMP1300  ; 
Point1_Point1( &RX10_TEMP1300/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1301 = pr .distValue ; 
struct Region1 RX10_TEMP1302 = RX10_TEMP1301 .dReg ; 
const int RX10_TEMP1303 = searchPointInRegion1 ( RX10_TEMP1302 , RX10_TEMP1300 ) ; 
const int RX10_TEMP1304 = 0 ; 
const int RX10_TEMP1305 = RX10_TEMP1303 < RX10_TEMP1304 ; 
if ( RX10_TEMP1305 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1306 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1306 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1307 = getPlaceFromDist1 ( RX10_TEMP1301 , RX10_TEMP1303 ) ; 
const int RX10_TEMP1309 = /* here  */ 0 ; 
const int RX10_TEMP1310 = RX10_TEMP1307 != RX10_TEMP1309 ; 
if ( RX10_TEMP1310 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1308 = "Bad place access for array pr" ; 
fprintf(stderr, RX10_TEMP1308 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( pr , RX10_TEMP1303 , X10_TEMP500 ) ; 
struct Point1 RX10_TEMP1311  ; 
Point1_Point1( &RX10_TEMP1311/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1312 = inRt .distValue ; 
struct Region1 RX10_TEMP1313 = RX10_TEMP1312 .dReg ; 
const int RX10_TEMP1314 = searchPointInRegion1 ( RX10_TEMP1313 , RX10_TEMP1311 ) ; 
const int RX10_TEMP1315 = 0 ; 
const int RX10_TEMP1316 = RX10_TEMP1314 < RX10_TEMP1315 ; 
if ( RX10_TEMP1316 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1317 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1317 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1318 = getPlaceFromDist1 ( RX10_TEMP1312 , RX10_TEMP1314 ) ; 
const int RX10_TEMP1320 = /* here  */ 0 ; 
const int RX10_TEMP1321 = RX10_TEMP1318 != RX10_TEMP1320 ; 
if ( RX10_TEMP1321 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1319 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1319 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1322 = getRefArrayValue1int ( inRt , RX10_TEMP1314 ) ; 
const int X10_TEMP504 = RX10_TEMP1322 ; 
struct Point1 RX10_TEMP1323  ; 
Point1_Point1( &RX10_TEMP1323/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1324 = outLt .distValue ; 
struct Region1 RX10_TEMP1325 = RX10_TEMP1324 .dReg ; 
const int RX10_TEMP1326 = searchPointInRegion1 ( RX10_TEMP1325 , RX10_TEMP1323 ) ; 
const int RX10_TEMP1327 = 0 ; 
const int RX10_TEMP1328 = RX10_TEMP1326 < RX10_TEMP1327 ; 
if ( RX10_TEMP1328 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1329 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1329 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1330 = getPlaceFromDist1 ( RX10_TEMP1324 , RX10_TEMP1326 ) ; 
const int RX10_TEMP1332 = /* here  */ 0 ; 
const int RX10_TEMP1333 = RX10_TEMP1330 != RX10_TEMP1332 ; 
if ( RX10_TEMP1333 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1331 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1331 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1334 = getRefArrayValue1int ( outLt , RX10_TEMP1326 ) ; 
const int X10_TEMP505 = RX10_TEMP1334 ; 
const int X10_TEMP507 = X10_TEMP504 - X10_TEMP505 ; 
const int X10_TEMP508 = X10_TEMP507 ; 
struct Point1 RX10_TEMP1335  ; 
Point1_Point1( &RX10_TEMP1335/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1336 = inRt .distValue ; 
struct Region1 RX10_TEMP1337 = RX10_TEMP1336 .dReg ; 
const int RX10_TEMP1338 = searchPointInRegion1 ( RX10_TEMP1337 , RX10_TEMP1335 ) ; 
const int RX10_TEMP1339 = 0 ; 
const int RX10_TEMP1340 = RX10_TEMP1338 < RX10_TEMP1339 ; 
if ( RX10_TEMP1340 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1341 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1341 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1342 = getPlaceFromDist1 ( RX10_TEMP1336 , RX10_TEMP1338 ) ; 
const int RX10_TEMP1344 = /* here  */ 0 ; 
const int RX10_TEMP1345 = RX10_TEMP1342 != RX10_TEMP1344 ; 
if ( RX10_TEMP1345 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1343 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1343 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP1338 , X10_TEMP508 ) ; 
} 
else 
{ struct Point1 RX10_TEMP1346  ; 
Point1_Point1( &RX10_TEMP1346/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1347 = outRt .distValue ; 
struct Region1 RX10_TEMP1348 = RX10_TEMP1347 .dReg ; 
const int RX10_TEMP1349 = searchPointInRegion1 ( RX10_TEMP1348 , RX10_TEMP1346 ) ; 
const int RX10_TEMP1350 = 0 ; 
const int RX10_TEMP1351 = RX10_TEMP1349 < RX10_TEMP1350 ; 
if ( RX10_TEMP1351 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1352 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1352 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1353 = getPlaceFromDist1 ( RX10_TEMP1347 , RX10_TEMP1349 ) ; 
const int RX10_TEMP1355 = /* here  */ 0 ; 
const int RX10_TEMP1356 = RX10_TEMP1353 != RX10_TEMP1355 ; 
if ( RX10_TEMP1356 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1354 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1354 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1357 = getRefArrayValue1int ( outRt , RX10_TEMP1349 ) ; 
const int X10_TEMP510 = RX10_TEMP1357 ; 
const int X10_TEMP511 = 0 ; 
const int X10_TEMP513 = X10_TEMP510 > X10_TEMP511 ; 
if ( X10_TEMP513 ) 
{ } 

} 


/* finish  */ 
{ const int X10_TEMP519 = 0 ; 
struct Point1 RX10_TEMP1358  ; 
Point1_Point1( &RX10_TEMP1358/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1359 = inRt .distValue ; 
struct Region1 RX10_TEMP1360 = RX10_TEMP1359 .dReg ; 
const int RX10_TEMP1361 = searchPointInRegion1 ( RX10_TEMP1360 , RX10_TEMP1358 ) ; 
const int RX10_TEMP1362 = 0 ; 
const int RX10_TEMP1363 = RX10_TEMP1361 < RX10_TEMP1362 ; 
if ( RX10_TEMP1363 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1364 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1364 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1365 = getPlaceFromDist1 ( RX10_TEMP1359 , RX10_TEMP1361 ) ; 
const int RX10_TEMP1367 = /* here  */ 0 ; 
const int RX10_TEMP1368 = RX10_TEMP1365 != RX10_TEMP1367 ; 
if ( RX10_TEMP1368 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1366 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1366 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1369 = getRefArrayValue1int ( inRt , RX10_TEMP1361 ) ; 
const int X10_TEMP516 = RX10_TEMP1369 ; 
const int X10_TEMP517 = 1 ; 
const int X10_TEMP520 = X10_TEMP516 - X10_TEMP517 ; 
struct Region2 X10_TEMP523 = createNewRegion2RA ( X10_TEMP519 , X10_TEMP520 , rRank2 ) ; 
const int X10_TEMP524 = /* here  */ 0 ; 
const int RX10_TEMP1374 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1372 = X10_TEMP523 .regSize ; 
RX10_TEMP1372 = RX10_TEMP1372 - RX10_TEMP1374 ; const int SX10_TEMP130 = 1 ; 
const int RX10_TEMP1373 = RX10_TEMP1372 + SX10_TEMP130 ; 
for ( int SX10_TEMP131 = 0 ; SX10_TEMP131 < RX10_TEMP1373 ; SX10_TEMP131 ++ ) 
{ const int RX10_TEMP1370 = SX10_TEMP131 ; 
const int RX10_TEMP1375 = RX10_TEMP1370 ; 
struct Point2 RX10_TEMP1371 = regionOrdinalPoint2 ( X10_TEMP523 , RX10_TEMP1375 ) ; 
const int i = RX10_TEMP1371 .f0 ; 
const int j = RX10_TEMP1371 .f1 ; 
/* async ( X10_TEMP524 )  */ 
{ struct Point1 RX10_TEMP1376  ; 
Point1_Point1( &RX10_TEMP1376/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1377 = sizes .distValue ; 
struct Region1 RX10_TEMP1378 = RX10_TEMP1377 .dReg ; 
const int RX10_TEMP1379 = searchPointInRegion1 ( RX10_TEMP1378 , RX10_TEMP1376 ) ; 
const int RX10_TEMP1380 = 0 ; 
const int RX10_TEMP1381 = RX10_TEMP1379 < RX10_TEMP1380 ; 
if ( RX10_TEMP1381 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1382 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1382 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1383 = getPlaceFromDist1 ( RX10_TEMP1377 , RX10_TEMP1379 ) ; 
const int RX10_TEMP1385 = /* here  */ 0 ; 
const int RX10_TEMP1386 = RX10_TEMP1383 != RX10_TEMP1385 ; 
if ( RX10_TEMP1386 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1384 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1384 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1387 = getRefArrayValue1int ( sizes , RX10_TEMP1379 ) ; 
const int X10_TEMP527 = RX10_TEMP1387 ; 
const int X10_TEMP530 = i + X10_TEMP527 ; 
struct Point3 RX10_TEMP1388  ; 
Point3_Point3( &RX10_TEMP1388/*Assignment*/, pl , i , j ) ; 
struct Dist3 RX10_TEMP1389 = dstBuffer .distValue ; 
struct Region3 RX10_TEMP1390 = RX10_TEMP1389 .dReg ; 
const int RX10_TEMP1391 = searchPointInRegion3 ( RX10_TEMP1390 , RX10_TEMP1388 ) ; 
const int RX10_TEMP1392 = 0 ; 
const int RX10_TEMP1393 = RX10_TEMP1391 < RX10_TEMP1392 ; 
if ( RX10_TEMP1393 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1394 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1394 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1395 = getPlaceFromDist3 ( RX10_TEMP1389 , RX10_TEMP1391 ) ; 
const int RX10_TEMP1397 = /* here  */ 0 ; 
const int RX10_TEMP1398 = RX10_TEMP1395 != RX10_TEMP1397 ; 
if ( RX10_TEMP1398 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1396 = "Bad place access for array dstBuffer" ; 
fprintf(stderr, RX10_TEMP1396 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP1399 = getRefArrayValue3double ( dstBuffer , RX10_TEMP1391 ) ; 
const double X10_TEMP535 = RX10_TEMP1399 ; 
const double X10_TEMP536 = X10_TEMP535 ; 
struct Point3 RX10_TEMP1400  ; 
Point3_Point3( &RX10_TEMP1400/*Assignment*/, pl , X10_TEMP530 , j ) ; 
struct Dist3 RX10_TEMP1401 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP1402 = RX10_TEMP1401 .dReg ; 
const int RX10_TEMP1403 = searchPointInRegion3 ( RX10_TEMP1402 , RX10_TEMP1400 ) ; 
const int RX10_TEMP1404 = 0 ; 
const int RX10_TEMP1405 = RX10_TEMP1403 < RX10_TEMP1404 ; 
if ( RX10_TEMP1405 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1406 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1406 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1407 = getPlaceFromDist3 ( RX10_TEMP1401 , RX10_TEMP1403 ) ; 
const int RX10_TEMP1409 = /* here  */ 0 ; 
const int RX10_TEMP1410 = RX10_TEMP1407 != RX10_TEMP1409 ; 
if ( RX10_TEMP1410 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1408 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP1408 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( srcBuffer , RX10_TEMP1403 , X10_TEMP536 ) ; 
} 

} 

} 

struct Point1 RX10_TEMP1411  ; 
Point1_Point1( &RX10_TEMP1411/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1412 = sizes .distValue ; 
struct Region1 RX10_TEMP1413 = RX10_TEMP1412 .dReg ; 
const int RX10_TEMP1414 = searchPointInRegion1 ( RX10_TEMP1413 , RX10_TEMP1411 ) ; 
const int RX10_TEMP1415 = 0 ; 
const int RX10_TEMP1416 = RX10_TEMP1414 < RX10_TEMP1415 ; 
if ( RX10_TEMP1416 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1417 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1417 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1418 = getPlaceFromDist1 ( RX10_TEMP1412 , RX10_TEMP1414 ) ; 
const int RX10_TEMP1420 = /* here  */ 0 ; 
const int RX10_TEMP1421 = RX10_TEMP1418 != RX10_TEMP1420 ; 
if ( RX10_TEMP1421 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1419 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1419 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1422 = getRefArrayValue1int ( sizes , RX10_TEMP1414 ) ; 
const int X10_TEMP540 = RX10_TEMP1422 ; 
struct Point1 RX10_TEMP1423  ; 
Point1_Point1( &RX10_TEMP1423/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1424 = inRt .distValue ; 
struct Region1 RX10_TEMP1425 = RX10_TEMP1424 .dReg ; 
const int RX10_TEMP1426 = searchPointInRegion1 ( RX10_TEMP1425 , RX10_TEMP1423 ) ; 
const int RX10_TEMP1427 = 0 ; 
const int RX10_TEMP1428 = RX10_TEMP1426 < RX10_TEMP1427 ; 
if ( RX10_TEMP1428 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1429 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1429 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1430 = getPlaceFromDist1 ( RX10_TEMP1424 , RX10_TEMP1426 ) ; 
const int RX10_TEMP1432 = /* here  */ 0 ; 
const int RX10_TEMP1433 = RX10_TEMP1430 != RX10_TEMP1432 ; 
if ( RX10_TEMP1433 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1431 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1431 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1434 = getRefArrayValue1int ( inRt , RX10_TEMP1426 ) ; 
const int X10_TEMP541 = RX10_TEMP1434 ; 
const int X10_TEMP543 = X10_TEMP540 + X10_TEMP541 ; 
const int X10_TEMP544 = X10_TEMP543 ; 
struct Point1 RX10_TEMP1435  ; 
Point1_Point1( &RX10_TEMP1435/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1436 = sizes .distValue ; 
struct Region1 RX10_TEMP1437 = RX10_TEMP1436 .dReg ; 
const int RX10_TEMP1438 = searchPointInRegion1 ( RX10_TEMP1437 , RX10_TEMP1435 ) ; 
const int RX10_TEMP1439 = 0 ; 
const int RX10_TEMP1440 = RX10_TEMP1438 < RX10_TEMP1439 ; 
if ( RX10_TEMP1440 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1441 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1441 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1442 = getPlaceFromDist1 ( RX10_TEMP1436 , RX10_TEMP1438 ) ; 
const int RX10_TEMP1444 = /* here  */ 0 ; 
const int RX10_TEMP1445 = RX10_TEMP1442 != RX10_TEMP1444 ; 
if ( RX10_TEMP1445 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1443 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1443 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sizes , RX10_TEMP1438 , X10_TEMP544 ) ; 
const int X10_TEMP547 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dDst , X10_TEMP547 ) ; 
const int X10_TEMP549 = rLocal1 .regSize ; 
const int X10_TEMP550 = 0 ; 
const int X10_TEMP551 = X10_TEMP549 == X10_TEMP550 ; 
const int X10_TEMP553 = _X10Util_ENABLE_CHECKS && X10_TEMP551 ; 
if ( X10_TEMP553 ) 
{ const char * X10_TEMP554 = "Destination distribution " ; 
const char * X10_TEMP555 = "is empty" ; 
/*ASSIGNMENT STRING*/
 char * tempC64 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC64, "%s%s",X10_TEMP554,X10_TEMP555);
const char * X10_TEMP557 = tempC64;; 
fprintf(stderr, X10_TEMP557 ) ; 
exit(EXIT_FAILURE);
} 

const int rsize = rLocal1 .regSize ; 
const int RX10_TEMP1446 = rLocal1 .regSize ; 
const int RX10_TEMP1447 = 0 ; 
const int RX10_TEMP1448 = RX10_TEMP1446 <= RX10_TEMP1447 ; 
if ( RX10_TEMP1448 ) 
{ const char * RX10_TEMP1449 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP1449 ) ; 
exit(EXIT_FAILURE);
} 

const int offset = regionLow ( rLocal1 ) ; 
struct Point1 RX10_TEMP1450  ; 
Point1_Point1( &RX10_TEMP1450/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1451 = sizes .distValue ; 
struct Region1 RX10_TEMP1452 = RX10_TEMP1451 .dReg ; 
const int RX10_TEMP1453 = searchPointInRegion1 ( RX10_TEMP1452 , RX10_TEMP1450 ) ; 
const int RX10_TEMP1454 = 0 ; 
const int RX10_TEMP1455 = RX10_TEMP1453 < RX10_TEMP1454 ; 
if ( RX10_TEMP1455 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1456 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1456 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1457 = getPlaceFromDist1 ( RX10_TEMP1451 , RX10_TEMP1453 ) ; 
const int RX10_TEMP1459 = /* here  */ 0 ; 
const int RX10_TEMP1460 = RX10_TEMP1457 != RX10_TEMP1459 ; 
if ( RX10_TEMP1460 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1458 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1458 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1461 = getRefArrayValue1int ( sizes , RX10_TEMP1453 ) ; 
const int X10_TEMP562 = RX10_TEMP1461 ; 
const int X10_TEMP564 = X10_TEMP562 - rsize ; 
const int X10_TEMP569 = fabs ( X10_TEMP564 ) ; 
struct Point1 RX10_TEMP1462  ; 
Point1_Point1( &RX10_TEMP1462/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1463 = offsets .distValue ; 
struct Region1 RX10_TEMP1464 = RX10_TEMP1463 .dReg ; 
const int RX10_TEMP1465 = searchPointInRegion1 ( RX10_TEMP1464 , RX10_TEMP1462 ) ; 
const int RX10_TEMP1466 = 0 ; 
const int RX10_TEMP1467 = RX10_TEMP1465 < RX10_TEMP1466 ; 
if ( RX10_TEMP1467 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1468 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1468 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1469 = getPlaceFromDist1 ( RX10_TEMP1463 , RX10_TEMP1465 ) ; 
const int RX10_TEMP1471 = /* here  */ 0 ; 
const int RX10_TEMP1472 = RX10_TEMP1469 != RX10_TEMP1471 ; 
if ( RX10_TEMP1472 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1470 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP1470 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1473 = getRefArrayValue1int ( offsets , RX10_TEMP1465 ) ; 
const int X10_TEMP566 = RX10_TEMP1473 ; 
const int X10_TEMP568 = X10_TEMP566 - offset ; 
const int X10_TEMP570 = fabs ( X10_TEMP568 ) ; 
const int X10_TEMP572 = X10_TEMP569 + X10_TEMP570 ; 
const int X10_TEMP574 = X10_TEMP572 ; 
struct Point1 RX10_TEMP1474  ; 
Point1_Point1( &RX10_TEMP1474/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1475 = ter .distValue ; 
struct Region1 RX10_TEMP1476 = RX10_TEMP1475 .dReg ; 
const int RX10_TEMP1477 = searchPointInRegion1 ( RX10_TEMP1476 , RX10_TEMP1474 ) ; 
const int RX10_TEMP1478 = 0 ; 
const int RX10_TEMP1479 = RX10_TEMP1477 < RX10_TEMP1478 ; 
if ( RX10_TEMP1479 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1480 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1480 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1481 = getPlaceFromDist1 ( RX10_TEMP1475 , RX10_TEMP1477 ) ; 
const int RX10_TEMP1483 = /* here  */ 0 ; 
const int RX10_TEMP1484 = RX10_TEMP1481 != RX10_TEMP1483 ; 
if ( RX10_TEMP1484 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1482 = "Bad place access for array ter" ; 
fprintf(stderr, RX10_TEMP1482 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( ter , RX10_TEMP1477 , X10_TEMP574 ) ; 
} 

} 

} 

/*UpdatableVariableDeclaration*/int ierr = 0 ; 
const int X10_TEMP577 = iter <= mter ; 
if ( X10_TEMP577 ) 
{ const int X10_TEMP578 = intrefArrayMax1 ( pr ) ; 
const int X10_TEMP579 = 0 ; 
const int X10_TEMP581 = X10_TEMP578 != X10_TEMP579 ; 
if ( X10_TEMP581 ) 
{ const int X10_TEMP583 = intrefArrayMax1 ( pr ) ; 
ierr = X10_TEMP583 ; const char * X10_TEMP584 = "Local field overflow error, " ; 
const char * X10_TEMP585 = "ierr = " ; 
/*ASSIGNMENT STRING*/
 char * tempC65 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC65, "%s%s",X10_TEMP584,X10_TEMP585);
const char * X10_TEMP586 = tempC65;; 
/*ASSIGNMENT STRING*/
 char * tempC66 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC66, "%s%d",X10_TEMP586,ierr);
const char * X10_TEMP588 = tempC66;; 
fprintf(stderr, "%s\n" , X10_TEMP588 ) ; 
break ; 
} 

const int X10_TEMP590 = iter < mter ; 
if ( X10_TEMP590 ) 
{ continue ; 
} 
else 
{ break ; 
} 


} 

const int X10_TEMP591 = 10 ; 
const int X10_TEMP593 = iter > X10_TEMP591 ; 
if ( X10_TEMP593 ) 
{ const char * X10_TEMP595 = "Too many iterations" ; 
fprintf(stderr, X10_TEMP595 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP598 = 0 ; 
const int X10_TEMP599 = 1 ; 
struct Region1 X10_TEMP600 = createNewRegion1R ( X10_TEMP598 , X10_TEMP599 ) ; 
const int X10_TEMP601 = /* here  */ 0 ; 
struct Dist1 dFlags = getPlaceDist1 ( X10_TEMP600 , X10_TEMP601 ) ; 
struct Region1 RX10_TEMP1485 = dFlags .dReg ; 
const int RX10_TEMP1486 = 0 ; 
const int RX10_TEMP1487 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1488 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1488 = RX10_TEMP1488 - RX10_TEMP1487 ; const int SX10_TEMP132 = 1 ; 
const int RX10_TEMP1489 = RX10_TEMP1488 + SX10_TEMP132 ; 
const int SX10_TEMP133 = 1 ; 
const int RX10_TEMP1490 = RX10_TEMP1488 + SX10_TEMP133 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1491 = (intStub *)calloc(RX10_TEMP1490,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP135 = 0 ; SX10_TEMP135 < RX10_TEMP1489 ; SX10_TEMP135 ++ ) 
{ const int RX10_TEMP1492 = SX10_TEMP135 ; 
const int RX10_TEMP1493 = /* here  */ 0 ; 
const int RX10_TEMP1494 = RX10_TEMP1492 ; 
const int RX10_TEMP1495 = /* place.places ( RX10_TEMP1494 )  */ 0 
; 
const int RX10_TEMP1496 = getDistLocalCount1 ( dFlags , RX10_TEMP1494 ) ; 
const int RX10_TEMP1497 = RX10_TEMP1496 - RX10_TEMP1487 ; 
/* async ( RX10_TEMP1495 )  */ 
{ const int SX10_TEMP136 = 1 ; 
const int RX10_TEMP1498 = RX10_TEMP1497 + SX10_TEMP136 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP1499 = (int *)calloc(RX10_TEMP1498,sizeof( int )); 
struct intStub RX10_TEMP1500  ; 
intStub_intStub( &RX10_TEMP1500/*Assignment*/, RX10_TEMP1499 ) ; 
/* async ( RX10_TEMP1493 )  */ 
{ RX10_TEMP1491 [ RX10_TEMP1492 ] = RX10_TEMP1500 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP138 = (intStub *)calloc(RX10_TEMP1489,sizeof( intStub )); 
for ( int SX10_TEMP139 = 0 ; SX10_TEMP139 < RX10_TEMP1489 ; SX10_TEMP139 ++ ) 
{ const int RX10_TEMP1503 = SX10_TEMP139 ; 
struct intStub RX10_TEMP1502 = RX10_TEMP1491 [ RX10_TEMP1503 ] 
; 
SX10_TEMP138 [ RX10_TEMP1503 ] = RX10_TEMP1502 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1501 = SX10_TEMP138 ; 
struct intRefArray1 RX10_TEMP1504  ; 
intRefArray1_intRefArray1( &RX10_TEMP1504/*Assignment*/, dFlags , RX10_TEMP1501 ) ; 
struct intRefArray1 flags = RX10_TEMP1504 ; 
const int X10_TEMP605 = 0 ; 
const int X10_TEMP607 = intrefArrayMax1 ( pr ) ; 
const int X10_TEMP608 = X10_TEMP607 ; 
struct Point1 RX10_TEMP1505  ; 
Point1_Point1( &RX10_TEMP1505/*Assignment*/, X10_TEMP605 ) ; 
struct Dist1 RX10_TEMP1506 = flags .distValue ; 
struct Region1 RX10_TEMP1507 = RX10_TEMP1506 .dReg ; 
const int RX10_TEMP1508 = searchPointInRegion1 ( RX10_TEMP1507 , RX10_TEMP1505 ) ; 
const int RX10_TEMP1509 = 0 ; 
const int RX10_TEMP1510 = RX10_TEMP1508 < RX10_TEMP1509 ; 
if ( RX10_TEMP1510 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1511 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1511 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1512 = getPlaceFromDist1 ( RX10_TEMP1506 , RX10_TEMP1508 ) ; 
const int RX10_TEMP1514 = /* here  */ 0 ; 
const int RX10_TEMP1515 = RX10_TEMP1512 != RX10_TEMP1514 ; 
if ( RX10_TEMP1515 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1513 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1513 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( flags , RX10_TEMP1508 , X10_TEMP608 ) ; 
const int X10_TEMP610 = 1 ; 
const int X10_TEMP612 = intrefArrayMax1 ( ter ) ; 
const int X10_TEMP613 = X10_TEMP612 ; 
struct Point1 RX10_TEMP1516  ; 
Point1_Point1( &RX10_TEMP1516/*Assignment*/, X10_TEMP610 ) ; 
struct Dist1 RX10_TEMP1517 = flags .distValue ; 
struct Region1 RX10_TEMP1518 = RX10_TEMP1517 .dReg ; 
const int RX10_TEMP1519 = searchPointInRegion1 ( RX10_TEMP1518 , RX10_TEMP1516 ) ; 
const int RX10_TEMP1520 = 0 ; 
const int RX10_TEMP1521 = RX10_TEMP1519 < RX10_TEMP1520 ; 
if ( RX10_TEMP1521 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1522 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1522 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1523 = getPlaceFromDist1 ( RX10_TEMP1517 , RX10_TEMP1519 ) ; 
const int RX10_TEMP1525 = /* here  */ 0 ; 
const int RX10_TEMP1526 = RX10_TEMP1523 != RX10_TEMP1525 ; 
if ( RX10_TEMP1526 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1524 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1524 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( flags , RX10_TEMP1519 , X10_TEMP613 ) ; 
const int X10_TEMP615 = 0 ; 
struct Point1 RX10_TEMP1527  ; 
Point1_Point1( &RX10_TEMP1527/*Assignment*/, X10_TEMP615 ) ; 
struct Dist1 RX10_TEMP1528 = flags .distValue ; 
struct Region1 RX10_TEMP1529 = RX10_TEMP1528 .dReg ; 
const int RX10_TEMP1530 = searchPointInRegion1 ( RX10_TEMP1529 , RX10_TEMP1527 ) ; 
const int RX10_TEMP1531 = 0 ; 
const int RX10_TEMP1532 = RX10_TEMP1530 < RX10_TEMP1531 ; 
if ( RX10_TEMP1532 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1533 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1533 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1534 = getPlaceFromDist1 ( RX10_TEMP1528 , RX10_TEMP1530 ) ; 
const int RX10_TEMP1536 = /* here  */ 0 ; 
const int RX10_TEMP1537 = RX10_TEMP1534 != RX10_TEMP1536 ; 
if ( RX10_TEMP1537 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1535 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1535 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1538 = getRefArrayValue1int ( flags , RX10_TEMP1530 ) ; 
const int X10_TEMP616 = RX10_TEMP1538 ; 
const int X10_TEMP617 = 0 ; 
const int X10_TEMP619 = X10_TEMP616 != X10_TEMP617 ; 
if ( X10_TEMP619 ) 
{ const int X10_TEMP621 = 0 ; 
struct Point1 RX10_TEMP1539  ; 
Point1_Point1( &RX10_TEMP1539/*Assignment*/, X10_TEMP621 ) ; 
struct Dist1 RX10_TEMP1540 = flags .distValue ; 
struct Region1 RX10_TEMP1541 = RX10_TEMP1540 .dReg ; 
const int RX10_TEMP1542 = searchPointInRegion1 ( RX10_TEMP1541 , RX10_TEMP1539 ) ; 
const int RX10_TEMP1543 = 0 ; 
const int RX10_TEMP1544 = RX10_TEMP1542 < RX10_TEMP1543 ; 
if ( RX10_TEMP1544 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1545 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1545 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1546 = getPlaceFromDist1 ( RX10_TEMP1540 , RX10_TEMP1542 ) ; 
const int RX10_TEMP1548 = /* here  */ 0 ; 
const int RX10_TEMP1549 = RX10_TEMP1546 != RX10_TEMP1548 ; 
if ( RX10_TEMP1549 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1547 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1547 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1550 = getRefArrayValue1int ( flags , RX10_TEMP1542 ) ; 
const int X10_TEMP623 = RX10_TEMP1550 ; 
ierr = X10_TEMP623 ; const char * X10_TEMP624 = "Global field overflow error, " ; 
const char * X10_TEMP625 = "ierr = " ; 
/*ASSIGNMENT STRING*/
 char * tempC67 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC67, "%s%s",X10_TEMP624,X10_TEMP625);
const char * X10_TEMP626 = tempC67;; 
/*ASSIGNMENT STRING*/
 char * tempC68 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC68, "%s%d",X10_TEMP626,ierr);
const char * X10_TEMP628 = tempC68;; 
fprintf(stderr, "%s\n" , X10_TEMP628 ) ; 
break ; 
} 

const int X10_TEMP630 = 1 ; 
struct Point1 RX10_TEMP1551  ; 
Point1_Point1( &RX10_TEMP1551/*Assignment*/, X10_TEMP630 ) ; 
struct Dist1 RX10_TEMP1552 = flags .distValue ; 
struct Region1 RX10_TEMP1553 = RX10_TEMP1552 .dReg ; 
const int RX10_TEMP1554 = searchPointInRegion1 ( RX10_TEMP1553 , RX10_TEMP1551 ) ; 
const int RX10_TEMP1555 = 0 ; 
const int RX10_TEMP1556 = RX10_TEMP1554 < RX10_TEMP1555 ; 
if ( RX10_TEMP1556 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1557 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1557 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1558 = getPlaceFromDist1 ( RX10_TEMP1552 , RX10_TEMP1554 ) ; 
const int RX10_TEMP1560 = /* here  */ 0 ; 
const int RX10_TEMP1561 = RX10_TEMP1558 != RX10_TEMP1560 ; 
if ( RX10_TEMP1561 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1559 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1559 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1562 = getRefArrayValue1int ( flags , RX10_TEMP1554 ) ; 
const int X10_TEMP631 = RX10_TEMP1562 ; 
const int X10_TEMP632 = 0 ; 
const int X10_TEMP634 = X10_TEMP631 != X10_TEMP632 ; 
if ( X10_TEMP634 ) 
{ const char * X10_TEMP635 = "Info: fields being passed " ; 
const char * X10_TEMP636 = "further = " ; 
/*ASSIGNMENT STRING*/
 char * tempC69 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC69, "%s%s",X10_TEMP635,X10_TEMP636);
const char * X10_TEMP639 = tempC69;; 
const int X10_TEMP638 = 1 ; 
struct Point1 RX10_TEMP1563  ; 
Point1_Point1( &RX10_TEMP1563/*Assignment*/, X10_TEMP638 ) ; 
struct Dist1 RX10_TEMP1564 = flags .distValue ; 
struct Region1 RX10_TEMP1565 = RX10_TEMP1564 .dReg ; 
const int RX10_TEMP1566 = searchPointInRegion1 ( RX10_TEMP1565 , RX10_TEMP1563 ) ; 
const int RX10_TEMP1567 = 0 ; 
const int RX10_TEMP1568 = RX10_TEMP1566 < RX10_TEMP1567 ; 
if ( RX10_TEMP1568 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1569 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1569 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1570 = getPlaceFromDist1 ( RX10_TEMP1564 , RX10_TEMP1566 ) ; 
const int RX10_TEMP1572 = /* here  */ 0 ; 
const int RX10_TEMP1573 = RX10_TEMP1570 != RX10_TEMP1572 ; 
if ( RX10_TEMP1573 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1571 = "Bad place access for array flags" ; 
fprintf(stderr, RX10_TEMP1571 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1574 = getRefArrayValue1int ( flags , RX10_TEMP1566 ) ; 
const int X10_TEMP640 = RX10_TEMP1574 ; 
/*ASSIGNMENT STRING*/
 char * tempC70 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC70, "%s%d",X10_TEMP639,X10_TEMP640);
const char * X10_TEMP642 = tempC70;; 
fprintf(stderr, "%s\n" , X10_TEMP642 ) ; 
} 
else 
{ mter = iter ; break ; 
} 


X10_TEMP97 = ! done ; } 
while ( X10_TEMP97 ) ; 
struct Region2 RX10_TEMP1575 = dDst .dReg ; 
const int RX10_TEMP1576 = 0 ; 
const int RX10_TEMP1577 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1578 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1578 = RX10_TEMP1578 - RX10_TEMP1577 ; const int SX10_TEMP140 = 1 ; 
const int RX10_TEMP1579 = RX10_TEMP1578 + SX10_TEMP140 ; 
const int SX10_TEMP141 = 1 ; 
const int RX10_TEMP1580 = RX10_TEMP1578 + SX10_TEMP141 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP1581 = (doubleStub *)calloc(RX10_TEMP1580,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP143 = 0 ; SX10_TEMP143 < RX10_TEMP1579 ; SX10_TEMP143 ++ ) 
{ const int RX10_TEMP1582 = SX10_TEMP143 ; 
const int RX10_TEMP1583 = /* here  */ 0 ; 
const int RX10_TEMP1584 = RX10_TEMP1582 ; 
const int RX10_TEMP1585 = /* place.places ( RX10_TEMP1584 )  */ 0 
; 
const int RX10_TEMP1586 = getDistLocalCount2 ( dDst , RX10_TEMP1584 ) ; 
const int RX10_TEMP1587 = RX10_TEMP1586 - RX10_TEMP1577 ; 
/* async ( RX10_TEMP1585 )  */ 
{ const int SX10_TEMP144 = 1 ; 
const int RX10_TEMP1588 = RX10_TEMP1587 + SX10_TEMP144 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP1589 = (double *)calloc(RX10_TEMP1588,sizeof( double )); 
struct doubleStub RX10_TEMP1590  ; 
doubleStub_doubleStub( &RX10_TEMP1590/*Assignment*/, RX10_TEMP1589 ) ; 
/* async ( RX10_TEMP1583 )  */ 
{ RX10_TEMP1581 [ RX10_TEMP1582 ] = RX10_TEMP1590 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP146 = (doubleStub *)calloc(RX10_TEMP1579,sizeof( doubleStub )); 
for ( int SX10_TEMP147 = 0 ; SX10_TEMP147 < RX10_TEMP1579 ; SX10_TEMP147 ++ ) 
{ const int RX10_TEMP1593 = SX10_TEMP147 ; 
struct doubleStub RX10_TEMP1592 = RX10_TEMP1581 [ RX10_TEMP1593 ] 
; 
SX10_TEMP146 [ RX10_TEMP1593 ] = RX10_TEMP1592 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP1591 = SX10_TEMP146 ; 
struct doubleRefArray2 RX10_TEMP1594  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP1594/*Assignment*/, dDst , RX10_TEMP1591 ) ; 
struct doubleRefArray2 result = RX10_TEMP1594 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP647 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1596 = X10_TEMP647 .dReg ; 
const int RX10_TEMP1599 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1597 = RX10_TEMP1596 .regSize ; 
RX10_TEMP1597 = RX10_TEMP1597 - RX10_TEMP1599 ; const int SX10_TEMP148 = 1 ; 
const int RX10_TEMP1598 = RX10_TEMP1597 + SX10_TEMP148 ; 
for ( int SX10_TEMP149 = 0 ; SX10_TEMP149 < RX10_TEMP1598 ; SX10_TEMP149 ++ ) 
{ const int RX10_TEMP1595 = SX10_TEMP149 ; 
const int RX10_TEMP1600 = RX10_TEMP1595 ; 
struct Point1 X10_TEMP648 = regionOrdinalPoint1 ( RX10_TEMP1596 , RX10_TEMP1600 ) ; 
const int pl = X10_TEMP648 .f0 ; 
struct Region1 RX10_TEMP1601 = X10_TEMP647 .dReg ; 
const int RX10_TEMP1602 = searchPointInRegion1 ( RX10_TEMP1601 , X10_TEMP648 ) ; 
const int RX10_TEMP1603 = 0 ; 
const int RX10_TEMP1604 = RX10_TEMP1602 < RX10_TEMP1603 ; 
if ( RX10_TEMP1604 ) 
{ const char * RX10_TEMP1605 = "Point X10_TEMP648 not found in the distribution X10_TEMP647." ; 
fprintf(stderr, RX10_TEMP1605 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1606 = getPlaceFromDist1 ( X10_TEMP647 , RX10_TEMP1602 ) ; 
const int X10_TEMP649 = RX10_TEMP1606 ; 
/* async ( X10_TEMP649 )  */ 
{ const int X10_TEMP652 = 0 ; 
struct Region1 rLocal1 = X10Util_getLRank2D ( dDst , X10_TEMP652 ) ; 
if ( _X10Util_ENABLE_CHECKS ) 
{ struct Point1 RX10_TEMP1607  ; 
Point1_Point1( &RX10_TEMP1607/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1608 = sizes .distValue ; 
struct Region1 RX10_TEMP1609 = RX10_TEMP1608 .dReg ; 
const int RX10_TEMP1610 = searchPointInRegion1 ( RX10_TEMP1609 , RX10_TEMP1607 ) ; 
const int RX10_TEMP1611 = 0 ; 
const int RX10_TEMP1612 = RX10_TEMP1610 < RX10_TEMP1611 ; 
if ( RX10_TEMP1612 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1613 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1613 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1614 = getPlaceFromDist1 ( RX10_TEMP1608 , RX10_TEMP1610 ) ; 
const int RX10_TEMP1616 = /* here  */ 0 ; 
const int RX10_TEMP1617 = RX10_TEMP1614 != RX10_TEMP1616 ; 
if ( RX10_TEMP1617 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1615 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1615 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1618 = getRefArrayValue1int ( sizes , RX10_TEMP1610 ) ; 
const int X10_TEMP656 = RX10_TEMP1618 ; 
const int X10_TEMP657 = 0 ; 
const int X10_TEMP659 = X10_TEMP656 <= X10_TEMP657 ; 
if ( X10_TEMP659 ) 
{ const char * X10_TEMP660 = "Cannot make non-existant " ; 
const char * X10_TEMP661 = "region" ; 
/*ASSIGNMENT STRING*/
 char * tempC71 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC71, "%s%s",X10_TEMP660,X10_TEMP661);
const char * X10_TEMP663 = tempC71;; 
fprintf(stderr, X10_TEMP663 ) ; 
exit(EXIT_FAILURE);
} 

struct Point1 RX10_TEMP1619  ; 
Point1_Point1( &RX10_TEMP1619/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1620 = sizes .distValue ; 
struct Region1 RX10_TEMP1621 = RX10_TEMP1620 .dReg ; 
const int RX10_TEMP1622 = searchPointInRegion1 ( RX10_TEMP1621 , RX10_TEMP1619 ) ; 
const int RX10_TEMP1623 = 0 ; 
const int RX10_TEMP1624 = RX10_TEMP1622 < RX10_TEMP1623 ; 
if ( RX10_TEMP1624 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1625 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1625 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1626 = getPlaceFromDist1 ( RX10_TEMP1620 , RX10_TEMP1622 ) ; 
const int RX10_TEMP1628 = /* here  */ 0 ; 
const int RX10_TEMP1629 = RX10_TEMP1626 != RX10_TEMP1628 ; 
if ( RX10_TEMP1629 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1627 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1627 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1630 = getRefArrayValue1int ( sizes , RX10_TEMP1622 ) ; 
const int X10_TEMP665 = RX10_TEMP1630 ; 
const int X10_TEMP666 = rLocal1 .regSize ; 
const int X10_TEMP670 = X10_TEMP665 != X10_TEMP666 ; 
struct Point1 RX10_TEMP1631  ; 
Point1_Point1( &RX10_TEMP1631/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1632 = offsets .distValue ; 
struct Region1 RX10_TEMP1633 = RX10_TEMP1632 .dReg ; 
const int RX10_TEMP1634 = searchPointInRegion1 ( RX10_TEMP1633 , RX10_TEMP1631 ) ; 
const int RX10_TEMP1635 = 0 ; 
const int RX10_TEMP1636 = RX10_TEMP1634 < RX10_TEMP1635 ; 
if ( RX10_TEMP1636 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1637 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1637 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1638 = getPlaceFromDist1 ( RX10_TEMP1632 , RX10_TEMP1634 ) ; 
const int RX10_TEMP1640 = /* here  */ 0 ; 
const int RX10_TEMP1641 = RX10_TEMP1638 != RX10_TEMP1640 ; 
if ( RX10_TEMP1641 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1639 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP1639 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1642 = getRefArrayValue1int ( offsets , RX10_TEMP1634 ) ; 
const int X10_TEMP668 = RX10_TEMP1642 ; 
const int RX10_TEMP1643 = rLocal1 .regSize ; 
const int RX10_TEMP1644 = 0 ; 
const int RX10_TEMP1645 = RX10_TEMP1643 <= RX10_TEMP1644 ; 
if ( RX10_TEMP1645 ) 
{ const char * RX10_TEMP1646 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP1646 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP669 = regionLow ( rLocal1 ) ; 
const int X10_TEMP671 = X10_TEMP668 != X10_TEMP669 ; 
const int X10_TEMP673 = X10_TEMP670 || X10_TEMP671 ; 
if ( X10_TEMP673 ) 
{ const char * X10_TEMP674 = "Regions don't match result " ; 
const char * X10_TEMP675 = "dist" ; 
/*ASSIGNMENT STRING*/
 char * tempC72 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC72, "%s%s",X10_TEMP674,X10_TEMP675);
const char * X10_TEMP677 = tempC72;; 
fprintf(stderr, X10_TEMP677 ) ; 
exit(EXIT_FAILURE);
} 

} 

const int X10_TEMP683 = 0 ; 
struct Point1 RX10_TEMP1647  ; 
Point1_Point1( &RX10_TEMP1647/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1648 = sizes .distValue ; 
struct Region1 RX10_TEMP1649 = RX10_TEMP1648 .dReg ; 
const int RX10_TEMP1650 = searchPointInRegion1 ( RX10_TEMP1649 , RX10_TEMP1647 ) ; 
const int RX10_TEMP1651 = 0 ; 
const int RX10_TEMP1652 = RX10_TEMP1650 < RX10_TEMP1651 ; 
if ( RX10_TEMP1652 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1653 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1653 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1654 = getPlaceFromDist1 ( RX10_TEMP1648 , RX10_TEMP1650 ) ; 
const int RX10_TEMP1656 = /* here  */ 0 ; 
const int RX10_TEMP1657 = RX10_TEMP1654 != RX10_TEMP1656 ; 
if ( RX10_TEMP1657 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1655 = "Bad place access for array sizes" ; 
fprintf(stderr, RX10_TEMP1655 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1658 = getRefArrayValue1int ( sizes , RX10_TEMP1650 ) ; 
const int X10_TEMP680 = RX10_TEMP1658 ; 
const int X10_TEMP681 = 1 ; 
const int X10_TEMP684 = X10_TEMP680 - X10_TEMP681 ; 
struct Region2 X10_TEMP687 = createNewRegion2RA ( X10_TEMP683 , X10_TEMP684 , rRank2 ) ; 
const int X10_TEMP688 = /* here  */ 0 ; 
const int RX10_TEMP1663 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1661 = X10_TEMP687 .regSize ; 
RX10_TEMP1661 = RX10_TEMP1661 - RX10_TEMP1663 ; const int SX10_TEMP150 = 1 ; 
const int RX10_TEMP1662 = RX10_TEMP1661 + SX10_TEMP150 ; 
for ( int SX10_TEMP151 = 0 ; SX10_TEMP151 < RX10_TEMP1662 ; SX10_TEMP151 ++ ) 
{ const int RX10_TEMP1659 = SX10_TEMP151 ; 
const int RX10_TEMP1664 = RX10_TEMP1659 ; 
struct Point2 RX10_TEMP1660 = regionOrdinalPoint2 ( X10_TEMP687 , RX10_TEMP1664 ) ; 
const int i = RX10_TEMP1660 .f0 ; 
const int j = RX10_TEMP1660 .f1 ; 
/* async ( X10_TEMP688 )  */ 
{ struct Point1 RX10_TEMP1665  ; 
Point1_Point1( &RX10_TEMP1665/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1666 = offsets .distValue ; 
struct Region1 RX10_TEMP1667 = RX10_TEMP1666 .dReg ; 
const int RX10_TEMP1668 = searchPointInRegion1 ( RX10_TEMP1667 , RX10_TEMP1665 ) ; 
const int RX10_TEMP1669 = 0 ; 
const int RX10_TEMP1670 = RX10_TEMP1668 < RX10_TEMP1669 ; 
if ( RX10_TEMP1670 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1671 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1671 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1672 = getPlaceFromDist1 ( RX10_TEMP1666 , RX10_TEMP1668 ) ; 
const int RX10_TEMP1674 = /* here  */ 0 ; 
const int RX10_TEMP1675 = RX10_TEMP1672 != RX10_TEMP1674 ; 
if ( RX10_TEMP1675 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1673 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP1673 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1676 = getRefArrayValue1int ( offsets , RX10_TEMP1668 ) ; 
const int X10_TEMP690 = RX10_TEMP1676 ; 
const int X10_TEMP693 = X10_TEMP690 + i ; 
struct Point3 RX10_TEMP1677  ; 
Point3_Point3( &RX10_TEMP1677/*Assignment*/, pl , i , j ) ; 
struct Dist3 RX10_TEMP1678 = srcBuffer .distValue ; 
struct Region3 RX10_TEMP1679 = RX10_TEMP1678 .dReg ; 
const int RX10_TEMP1680 = searchPointInRegion3 ( RX10_TEMP1679 , RX10_TEMP1677 ) ; 
const int RX10_TEMP1681 = 0 ; 
const int RX10_TEMP1682 = RX10_TEMP1680 < RX10_TEMP1681 ; 
if ( RX10_TEMP1682 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1683 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1683 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1684 = getPlaceFromDist3 ( RX10_TEMP1678 , RX10_TEMP1680 ) ; 
const int RX10_TEMP1686 = /* here  */ 0 ; 
const int RX10_TEMP1687 = RX10_TEMP1684 != RX10_TEMP1686 ; 
if ( RX10_TEMP1687 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1685 = "Bad place access for array srcBuffer" ; 
fprintf(stderr, RX10_TEMP1685 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP1688 = getRefArrayValue3double ( srcBuffer , RX10_TEMP1680 ) ; 
const double X10_TEMP698 = RX10_TEMP1688 ; 
const double X10_TEMP699 = X10_TEMP698 ; 
struct Point2 RX10_TEMP1689  ; 
Point2_Point2( &RX10_TEMP1689/*Assignment*/, X10_TEMP693 , j ) ; 
struct Dist2 RX10_TEMP1690 = result .distValue ; 
struct Region2 RX10_TEMP1691 = RX10_TEMP1690 .dReg ; 
const int RX10_TEMP1692 = searchPointInRegion2 ( RX10_TEMP1691 , RX10_TEMP1689 ) ; 
const int RX10_TEMP1693 = 0 ; 
const int RX10_TEMP1694 = RX10_TEMP1692 < RX10_TEMP1693 ; 
if ( RX10_TEMP1694 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1695 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1695 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1696 = getPlaceFromDist2 ( RX10_TEMP1690 , RX10_TEMP1692 ) ; 
const int RX10_TEMP1698 = /* here  */ 0 ; 
const int RX10_TEMP1699 = RX10_TEMP1696 != RX10_TEMP1698 ; 
if ( RX10_TEMP1699 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1697 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP1697 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP1692 , X10_TEMP699 ) ; 
} 

} 

} 

} 

} 

return result ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_cropField (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ,  struct doubleRefArray2 const guards ) 
{ const int X10_TEMP4 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP5 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP2 ; 
struct Region1 rRank1 = createNewRegion1R ( X10_TEMP4 , X10_TEMP5 ) ; 
const int X10_TEMP9 = 0 ; 
struct Region1 rRank2 = createNewRegion1R ( X10_TEMP9 , _LinearESOpenPIC2D_XLENGTH ) ; 
struct Dist2 RX10_TEMP0 = guards .distValue ; 
struct Dist2 dGuard = RX10_TEMP0 ; 
const int X10_TEMP13 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP14 = 1 ; 
const int X10_TEMP16 = X10_TEMP13 - X10_TEMP14 ; 
const int X10_TEMP18 = /* place.places ( X10_TEMP16 )  */ 0 
; 
struct Region2 rGuard = X10Util_get2DPRegion ( dGuard , X10_TEMP18 ) ; 
struct Dist2 dResult = X10Util_distBlockStar2 ( rRank1 , rRank2 ) ; 
struct Region2 RX10_TEMP1 = dResult .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount2 ( dResult , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP15 = (double *)calloc(RX10_TEMP14,sizeof( double )); 
struct doubleStub RX10_TEMP16  ; 
doubleStub_doubleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP5 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP18 = RX10_TEMP7 [ RX10_TEMP19 ] 
; 
SX10_TEMP6 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP17 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP20  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP20/*Assignment*/, dResult , RX10_TEMP17 ) ; 
struct doubleRefArray2 result = RX10_TEMP20 ; 
struct Dist1 X10_TEMP25 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP22 = X10_TEMP25 .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP24 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP9 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
/* finish  */ 
{ struct Dist1 X10_TEMP26 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP27 = X10_TEMP26 .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , pl ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP26." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( X10_TEMP26 , RX10_TEMP28 ) ; 
const int X10_TEMP29 = RX10_TEMP32 ; 
/* async ( X10_TEMP29 )  */ 
{ struct Dist2 RX10_TEMP33 = data .distValue ; 
struct Dist2 dData = RX10_TEMP33 ; 
struct Region2 rLocalS = X10Util_get2DLRegion ( dData ) ; 
const int X10_TEMP35 = 0 ; 
struct Region1 rLocalS1 = X10Util_getRank2D ( rLocalS , X10_TEMP35 ) ; 
const int X10_TEMP37 = rLocalS .regSize ; 
const int X10_TEMP38 = 0 ; 
const int X10_TEMP40 = X10_TEMP37 > X10_TEMP38 ; 
const int RX10_TEMP34 = rLocalS1 .regSize ; 
const int RX10_TEMP35 = 0 ; 
const int RX10_TEMP36 = RX10_TEMP34 <= RX10_TEMP35 ; 
if ( RX10_TEMP36 ) 
{ const char * RX10_TEMP37 = "Operation low() not defined on empty region rLocalS1" ; 
fprintf(stderr, RX10_TEMP37 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP39 = regionLow ( rLocalS1 ) ; 
const int X10_TEMP41 = X10_TEMP39 < _LinearESOpenPIC2D_YLENGTH ; 
const int X10_TEMP43 = X10_TEMP40 && X10_TEMP41 ; 
if ( X10_TEMP43 ) 
{ const int X10_TEMP45 = 2 ; 
const int X10_TEMP46 = pl .f0 ; 
const int X10_TEMP48 = X10_TEMP45 * X10_TEMP46 ; 
const int pDst1 = /* place.places ( X10_TEMP48 )  */ 0 
; 
const int X10_TEMP51 = 2 ; 
const int X10_TEMP52 = pl .f0 ; 
const int X10_TEMP53 = X10_TEMP51 * X10_TEMP52 ; 
const int X10_TEMP54 = 1 ; 
const int X10_TEMP56 = X10_TEMP53 + X10_TEMP54 ; 
const int pDst2 = /* place.places ( X10_TEMP56 )  */ 0 
; 
struct Region2 RX10_TEMP38 = rLocalS ; 
const int RX10_TEMP53 = rLocalS .regSize ; 
const int RX10_TEMP54 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP53 - RX10_TEMP54 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP52 = RX10_TEMP55 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP11 = (double *)calloc(RX10_TEMP52,sizeof( double )); 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP52 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP39 = SX10_TEMP12 ; 
const int RX10_TEMP40 = RX10_TEMP39 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP38 , RX10_TEMP40 ) ; 
struct Dist2 RX10_TEMP41 = data .distValue ; 
struct Region2 RX10_TEMP42 = RX10_TEMP41 .dReg ; 
const int RX10_TEMP43 = searchPointInRegion2 ( RX10_TEMP42 , pt ) ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP47 = getPlaceFromDist2 ( RX10_TEMP41 , RX10_TEMP43 ) ; 
const int RX10_TEMP49 = /* here  */ 0 ; 
const int RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49 ; 
if ( RX10_TEMP50 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP51 = getRefArrayValue2double ( data , RX10_TEMP43 ) ; 
const double X10_TEMP60 = RX10_TEMP51 ; 
SX10_TEMP11 [ RX10_TEMP39 ] = X10_TEMP60 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP56 = SX10_TEMP11 ; 
struct doubleValArray2 RX10_TEMP57  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP57/*Assignment*/, rLocalS , RX10_TEMP56 ) ; 
struct doubleValArray2 X10_TEMP61 = RX10_TEMP57 ; 
struct doubleValArray2 sBuffer = X10_TEMP61 ; 
/* async ( pDst1 )  */ 
{ struct Region2 rLocalD = X10Util_get2DLRegion ( dResult ) ; 
const int X10_TEMP67 = /* here  */ 0 ; 
const int RX10_TEMP61 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP59 = rLocalD .regSize ; 
RX10_TEMP59 = RX10_TEMP59 - RX10_TEMP61 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP60 = RX10_TEMP59 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP60 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP58 = SX10_TEMP14 ; 
const int RX10_TEMP62 = RX10_TEMP58 ; 
struct Point2 pt = regionOrdinalPoint2 ( rLocalD , RX10_TEMP62 ) ; 
/* async ( X10_TEMP67 )  */ 
{ struct Region2 RX10_TEMP63 = sBuffer .regionValue ; 
const int RX10_TEMP64 = searchPointInRegion2 ( RX10_TEMP63 , pt ) ; 
const int RX10_TEMP65 = 0 ; 
const int RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP67 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP67 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP68 = sBuffer .contents ; 
const double X10_TEMP71 = RX10_TEMP68 [ RX10_TEMP64 ] 
; 
const double X10_TEMP72 = X10_TEMP71 ; 
struct Dist2 RX10_TEMP69 = result .distValue ; 
struct Region2 RX10_TEMP70 = RX10_TEMP69 .dReg ; 
const int RX10_TEMP71 = searchPointInRegion2 ( RX10_TEMP70 , pt ) ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP75 = getPlaceFromDist2 ( RX10_TEMP69 , RX10_TEMP71 ) ; 
const int RX10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP71 , X10_TEMP72 ) ; 
} 

} 

} 

/* async ( pDst2 )  */ 
{ struct Region2 rLocalD = X10Util_get2DLRegion ( dResult ) ; 
const int X10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP82 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP80 = rLocalD .regSize ; 
RX10_TEMP80 = RX10_TEMP80 - RX10_TEMP82 ; const int SX10_TEMP15 = 1 ; 
const int RX10_TEMP81 = RX10_TEMP80 + SX10_TEMP15 ; 
for ( int SX10_TEMP16 = 0 ; SX10_TEMP16 < RX10_TEMP81 ; SX10_TEMP16 ++ ) 
{ const int RX10_TEMP79 = SX10_TEMP16 ; 
const int RX10_TEMP83 = RX10_TEMP79 ; 
struct Point2 pt = regionOrdinalPoint2 ( rLocalD , RX10_TEMP83 ) ; 
/* async ( X10_TEMP77 )  */ 
{ struct Region2 RX10_TEMP84 = sBuffer .regionValue ; 
const int RX10_TEMP85 = searchPointInRegion2 ( RX10_TEMP84 , pt ) ; 
const int RX10_TEMP86 = 0 ; 
const int RX10_TEMP87 = RX10_TEMP85 < RX10_TEMP86 ; 
if ( RX10_TEMP87 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP88 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP88 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP89 = sBuffer .contents ; 
const double X10_TEMP81 = RX10_TEMP89 [ RX10_TEMP85 ] 
; 
const double X10_TEMP82 = X10_TEMP81 ; 
struct Dist2 RX10_TEMP90 = result .distValue ; 
struct Region2 RX10_TEMP91 = RX10_TEMP90 .dReg ; 
const int RX10_TEMP92 = searchPointInRegion2 ( RX10_TEMP91 , pt ) ; 
const int RX10_TEMP93 = 0 ; 
const int RX10_TEMP94 = RX10_TEMP92 < RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP95 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP95 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP96 = getPlaceFromDist2 ( RX10_TEMP90 , RX10_TEMP92 ) ; 
const int RX10_TEMP98 = /* here  */ 0 ; 
const int RX10_TEMP99 = RX10_TEMP96 != RX10_TEMP98 ; 
if ( RX10_TEMP99 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP97 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP97 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP92 , X10_TEMP82 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP100  ; 
Point1_Point1( &RX10_TEMP100/*Assignment*/, _LinearESOpenPIC2D_YLENGTH ) ; 
const int RX10_TEMP101 = regionContainsPoint1 ( rLocalS1 , RX10_TEMP100 ) ; 
const int X10_TEMP85 = RX10_TEMP101 ; 
if ( X10_TEMP85 ) 
{ struct Region2 RX10_TEMP102 = rGuard ; 
const int RX10_TEMP117 = rGuard .regSize ; 
const int RX10_TEMP118 = 1 ; 
const int RX10_TEMP119 = RX10_TEMP117 - RX10_TEMP118 ; 
const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP116 = RX10_TEMP119 + SX10_TEMP17 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP18 = (double *)calloc(RX10_TEMP116,sizeof( double )); 
for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP116 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP103 = SX10_TEMP19 ; 
const int RX10_TEMP104 = RX10_TEMP103 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP102 , RX10_TEMP104 ) ; 
struct Dist2 RX10_TEMP105 = data .distValue ; 
struct Region2 RX10_TEMP106 = RX10_TEMP105 .dReg ; 
const int RX10_TEMP107 = searchPointInRegion2 ( RX10_TEMP106 , pt ) ; 
const int RX10_TEMP108 = 0 ; 
const int RX10_TEMP109 = RX10_TEMP107 < RX10_TEMP108 ; 
if ( RX10_TEMP109 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP110 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP110 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP111 = getPlaceFromDist2 ( RX10_TEMP105 , RX10_TEMP107 ) ; 
const int RX10_TEMP113 = /* here  */ 0 ; 
const int RX10_TEMP114 = RX10_TEMP111 != RX10_TEMP113 ; 
if ( RX10_TEMP114 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP112 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP112 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP115 = getRefArrayValue2double ( data , RX10_TEMP107 ) ; 
const double X10_TEMP88 = RX10_TEMP115 ; 
SX10_TEMP18 [ RX10_TEMP103 ] = X10_TEMP88 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP120 = SX10_TEMP18 ; 
struct doubleValArray2 RX10_TEMP121  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP121/*Assignment*/, rGuard , RX10_TEMP120 ) ; 
struct doubleValArray2 X10_TEMP89 = RX10_TEMP121 ; 
struct doubleValArray2 sBuffer = X10_TEMP89 ; 
const int X10_TEMP91 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP92 = 1 ; 
const int X10_TEMP94 = X10_TEMP91 - X10_TEMP92 ; 
const int X10_TEMP96 = /* place.places ( X10_TEMP94 )  */ 0 
; 
/* async ( X10_TEMP96 )  */ 
{ const int X10_TEMP98 = /* here  */ 0 ; 
const int RX10_TEMP125 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP123 = rGuard .regSize ; 
RX10_TEMP123 = RX10_TEMP123 - RX10_TEMP125 ; const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP124 = RX10_TEMP123 + SX10_TEMP20 ; 
for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP124 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP122 = SX10_TEMP21 ; 
const int RX10_TEMP126 = RX10_TEMP122 ; 
struct Point2 pt = regionOrdinalPoint2 ( rGuard , RX10_TEMP126 ) ; 
/* async ( X10_TEMP98 )  */ 
{ struct Region2 RX10_TEMP127 = sBuffer .regionValue ; 
const int RX10_TEMP128 = searchPointInRegion2 ( RX10_TEMP127 , pt ) ; 
const int RX10_TEMP129 = 0 ; 
const int RX10_TEMP130 = RX10_TEMP128 < RX10_TEMP129 ; 
if ( RX10_TEMP130 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP131 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP131 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP132 = sBuffer .contents ; 
const double X10_TEMP102 = RX10_TEMP132 [ RX10_TEMP128 ] 
; 
const double X10_TEMP103 = X10_TEMP102 ; 
struct Dist2 RX10_TEMP133 = guards .distValue ; 
struct Region2 RX10_TEMP134 = RX10_TEMP133 .dReg ; 
const int RX10_TEMP135 = searchPointInRegion2 ( RX10_TEMP134 , pt ) ; 
const int RX10_TEMP136 = 0 ; 
const int RX10_TEMP137 = RX10_TEMP135 < RX10_TEMP136 ; 
if ( RX10_TEMP137 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP138 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP138 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP139 = getPlaceFromDist2 ( RX10_TEMP133 , RX10_TEMP135 ) ; 
const int RX10_TEMP141 = /* here  */ 0 ; 
const int RX10_TEMP142 = RX10_TEMP139 != RX10_TEMP141 ; 
if ( RX10_TEMP142 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP140 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP140 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( guards , RX10_TEMP135 , X10_TEMP103 ) ; 
} 

} 

} 

} 

} 

} 

} 

return result ; 
} 

void /*static*/LinearESOpenPIC2D_loadGuards (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ,  struct doubleRefArray2 const guards ) 
{ /* finish  */ 
{ struct Dist1 X10_TEMP2 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP2 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP2 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP2." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP2 , RX10_TEMP7 ) ; 
const int X10_TEMP3 = RX10_TEMP11 ; 
/* async ( X10_TEMP3 )  */ 
{ const int X10_TEMP4 = /* here  */ 0 ; 
const int X10_TEMP5 = /* X10_TEMP4 . isFirst ( )  */ 1 ; 
const int X10_TEMP7 = ! X10_TEMP5 ; 
if ( X10_TEMP7 ) 
{ struct Dist2 RX10_TEMP12 = guards .distValue ; 
struct Dist2 dGuard = RX10_TEMP12 ; 
const int X10_TEMP10 = /* here  */ 0 ; 
const int X10_TEMP12 = /* X10_TEMP10 . prev ( )  */ 0 ; 
struct Region2 rGuard = X10Util_get2DPRegion ( dGuard , X10_TEMP12 ) ; 
struct Region2 RX10_TEMP13 = rGuard ; 
const int RX10_TEMP28 = rGuard .regSize ; 
const int RX10_TEMP29 = 1 ; 
const int RX10_TEMP30 = RX10_TEMP28 - RX10_TEMP29 ; 
const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP27 = RX10_TEMP30 + SX10_TEMP2 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP3 = (double *)calloc(RX10_TEMP27,sizeof( double )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < RX10_TEMP27 ; SX10_TEMP4 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP4 ; 
const int RX10_TEMP15 = RX10_TEMP14 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP13 , RX10_TEMP15 ) ; 
struct Dist2 RX10_TEMP16 = data .distValue ; 
struct Region2 RX10_TEMP17 = RX10_TEMP16 .dReg ; 
const int RX10_TEMP18 = searchPointInRegion2 ( RX10_TEMP17 , pt ) ; 
const int RX10_TEMP19 = 0 ; 
const int RX10_TEMP20 = RX10_TEMP18 < RX10_TEMP19 ; 
if ( RX10_TEMP20 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP21 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP21 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP22 = getPlaceFromDist2 ( RX10_TEMP16 , RX10_TEMP18 ) ; 
const int RX10_TEMP24 = /* here  */ 0 ; 
const int RX10_TEMP25 = RX10_TEMP22 != RX10_TEMP24 ; 
if ( RX10_TEMP25 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP23 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP23 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP26 = getRefArrayValue2double ( data , RX10_TEMP18 ) ; 
const double X10_TEMP16 = RX10_TEMP26 ; 
SX10_TEMP3 [ RX10_TEMP14 ] = X10_TEMP16 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP31 = SX10_TEMP3 ; 
struct doubleValArray2 RX10_TEMP32  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP32/*Assignment*/, rGuard , RX10_TEMP31 ) ; 
struct doubleValArray2 X10_TEMP17 = RX10_TEMP32 ; 
struct doubleValArray2 sBuffer = X10_TEMP17 ; 
const int X10_TEMP19 = /* here  */ 0 ; 
const int X10_TEMP21 = /* X10_TEMP19 . prev ( )  */ 0 ; 
/* async ( X10_TEMP21 )  */ 
{ const int X10_TEMP23 = /* here  */ 0 ; 
const int RX10_TEMP36 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP34 = rGuard .regSize ; 
RX10_TEMP34 = RX10_TEMP34 - RX10_TEMP36 ; const int SX10_TEMP5 = 1 ; 
const int RX10_TEMP35 = RX10_TEMP34 + SX10_TEMP5 ; 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP35 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP33 = SX10_TEMP6 ; 
const int RX10_TEMP37 = RX10_TEMP33 ; 
struct Point2 pt = regionOrdinalPoint2 ( rGuard , RX10_TEMP37 ) ; 
/* async ( X10_TEMP23 )  */ 
{ struct Region2 RX10_TEMP38 = sBuffer .regionValue ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , pt ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP43 = sBuffer .contents ; 
const double X10_TEMP27 = RX10_TEMP43 [ RX10_TEMP39 ] 
; 
const double X10_TEMP28 = X10_TEMP27 ; 
struct Dist2 RX10_TEMP44 = guards .distValue ; 
struct Region2 RX10_TEMP45 = RX10_TEMP44 .dReg ; 
const int RX10_TEMP46 = searchPointInRegion2 ( RX10_TEMP45 , pt ) ; 
const int RX10_TEMP47 = 0 ; 
const int RX10_TEMP48 = RX10_TEMP46 < RX10_TEMP47 ; 
if ( RX10_TEMP48 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP49 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP49 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP50 = getPlaceFromDist2 ( RX10_TEMP44 , RX10_TEMP46 ) ; 
const int RX10_TEMP52 = /* here  */ 0 ; 
const int RX10_TEMP53 = RX10_TEMP50 != RX10_TEMP52 ; 
if ( RX10_TEMP53 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP51 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP51 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( guards , RX10_TEMP46 , X10_TEMP28 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

intRefArray1 /*static*/LinearESOpenPIC2D_makeInfoArray (  struct LinearESOpenPIC2D  * const X10_TEMP0 ) 
{ const int X10_TEMP3 = 0 ; 
const int X10_TEMP4 = 6 ; 
struct Region1 X10_TEMP5 = createNewRegion1R ( X10_TEMP3 , X10_TEMP4 ) ; 
const int X10_TEMP6 = /* here  */ 0 ; 
struct Dist1 X10_TEMP8 = getPlaceDist1 ( X10_TEMP5 , X10_TEMP6 ) ; 
struct Dist1 dInfo = X10_TEMP8 ; 
struct Region1 RX10_TEMP0 = dInfo .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP6 = (intStub *)calloc(RX10_TEMP5,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dInfo , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(RX10_TEMP14,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
const int X10_TEMP11 = 0 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = X10_TEMP11 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP15 = SX10_TEMP5 ; 
struct intStub RX10_TEMP16  ; 
intStub_intStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP7 = (intStub *)calloc(RX10_TEMP4,sizeof( intStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct intStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct intRefArray1 RX10_TEMP20  ; 
intRefArray1_intRefArray1( &RX10_TEMP20/*Assignment*/, dInfo , RX10_TEMP17 ) ; 
struct intRefArray1 X10_TEMP13 = RX10_TEMP20 ; 
return X10_TEMP13 ; 
} 

ParticleRefArray1 /*static*/LinearESOpenPIC2D_moveParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct Dist2 const dFieldSpace ,  struct intRefArray1 const info ) 
{ const int MAX = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX ; 
const int MAX_BUFFER = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER ; 
const int ITER_MAX = 20 ; 
const int X10_TEMP7 = 0 ; 
const int X10_TEMP5 = 1 ; 
const int X10_TEMP8 = MAX - X10_TEMP5 ; 
struct Region1 rPart = createNewRegion1R ( X10_TEMP7 , X10_TEMP8 ) ; 
const int X10_TEMP13 = 0 ; 
const int X10_TEMP11 = 1 ; 
const int X10_TEMP14 = MAX_BUFFER - X10_TEMP11 ; 
struct Region1 rBuffer = createNewRegion1R ( X10_TEMP13 , X10_TEMP14 ) ; 
struct Dist1 X10_TEMP16 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP16 ; 
struct Dist2 dPart = X10Util_extendDistRank2D ( dUnique , rPart ) ; 
struct Dist2 dBuffer = X10Util_extendDistRank2D ( dUnique , rBuffer ) ; 
struct Region2 RX10_TEMP0 = dPart .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP6 = (ParticleStub *)calloc(RX10_TEMP5,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dPart , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP14 = (Particle *)calloc(RX10_TEMP13,sizeof( Particle )); 
struct ParticleStub RX10_TEMP15  ; 
ParticleStub_ParticleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP6 = (ParticleStub *)calloc(RX10_TEMP4,sizeof( ParticleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct ParticleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct ParticleRefArray2 RX10_TEMP19  ; 
ParticleRefArray2_ParticleRefArray2( &RX10_TEMP19/*Assignment*/, dPart , RX10_TEMP16 ) ; 
struct ParticleRefArray2 part = RX10_TEMP19 ; 
struct Region2 RX10_TEMP20 = dBuffer .dReg ; 
const int RX10_TEMP21 = 0 ; 
const int RX10_TEMP22 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP22 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP8 ; 
const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP25 = RX10_TEMP23 + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP26 = (ParticleStub *)calloc(RX10_TEMP25,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP24 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP27 = SX10_TEMP11 ; 
const int RX10_TEMP28 = /* here  */ 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 ; 
const int RX10_TEMP30 = /* place.places ( RX10_TEMP29 )  */ 0 
; 
const int RX10_TEMP31 = getDistLocalCount2 ( dBuffer , RX10_TEMP29 ) ; 
const int RX10_TEMP32 = RX10_TEMP31 - RX10_TEMP22 ; 
/* async ( RX10_TEMP30 )  */ 
{ const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP33 = RX10_TEMP32 + SX10_TEMP12 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP34 = (Particle *)calloc(RX10_TEMP33,sizeof( Particle )); 
struct ParticleStub RX10_TEMP35  ; 
ParticleStub_ParticleStub( &RX10_TEMP35/*Assignment*/, RX10_TEMP34 ) ; 
/* async ( RX10_TEMP28 )  */ 
{ RX10_TEMP26 [ RX10_TEMP27 ] = RX10_TEMP35 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP14 = (ParticleStub *)calloc(RX10_TEMP24,sizeof( ParticleStub )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP24 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP38 = SX10_TEMP15 ; 
struct ParticleStub RX10_TEMP37 = RX10_TEMP26 [ RX10_TEMP38 ] 
; 
SX10_TEMP14 [ RX10_TEMP38 ] = RX10_TEMP37 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP36 = SX10_TEMP14 ; 
struct ParticleRefArray2 RX10_TEMP39  ; 
ParticleRefArray2_ParticleRefArray2( &RX10_TEMP39/*Assignment*/, dBuffer , RX10_TEMP36 ) ; 
struct ParticleRefArray2 sBufferL = RX10_TEMP39 ; 
struct Region2 RX10_TEMP40 = dBuffer .dReg ; 
const int RX10_TEMP41 = 0 ; 
const int RX10_TEMP42 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP43 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP43 = RX10_TEMP43 - RX10_TEMP42 ; const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP44 = RX10_TEMP43 + SX10_TEMP16 ; 
const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP45 = RX10_TEMP43 + SX10_TEMP17 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP46 = (ParticleStub *)calloc(RX10_TEMP45,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP44 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP47 = SX10_TEMP19 ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP47 ; 
const int RX10_TEMP50 = /* place.places ( RX10_TEMP49 )  */ 0 
; 
const int RX10_TEMP51 = getDistLocalCount2 ( dBuffer , RX10_TEMP49 ) ; 
const int RX10_TEMP52 = RX10_TEMP51 - RX10_TEMP42 ; 
/* async ( RX10_TEMP50 )  */ 
{ const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP53 = RX10_TEMP52 + SX10_TEMP20 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP54 = (Particle *)calloc(RX10_TEMP53,sizeof( Particle )); 
struct ParticleStub RX10_TEMP55  ; 
ParticleStub_ParticleStub( &RX10_TEMP55/*Assignment*/, RX10_TEMP54 ) ; 
/* async ( RX10_TEMP48 )  */ 
{ RX10_TEMP46 [ RX10_TEMP47 ] = RX10_TEMP55 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP22 = (ParticleStub *)calloc(RX10_TEMP44,sizeof( ParticleStub )); 
for ( int SX10_TEMP23 = 0 ; SX10_TEMP23 < RX10_TEMP44 ; SX10_TEMP23 ++ ) 
{ const int RX10_TEMP58 = SX10_TEMP23 ; 
struct ParticleStub RX10_TEMP57 = RX10_TEMP46 [ RX10_TEMP58 ] 
; 
SX10_TEMP22 [ RX10_TEMP58 ] = RX10_TEMP57 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP56 = SX10_TEMP22 ; 
struct ParticleRefArray2 RX10_TEMP59  ; 
ParticleRefArray2_ParticleRefArray2( &RX10_TEMP59/*Assignment*/, dBuffer , RX10_TEMP56 ) ; 
struct ParticleRefArray2 sBufferR = RX10_TEMP59 ; 
struct Region2 RX10_TEMP60 = dBuffer .dReg ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP63 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP63 = RX10_TEMP63 - RX10_TEMP62 ; const int SX10_TEMP24 = 1 ; 
const int RX10_TEMP64 = RX10_TEMP63 + SX10_TEMP24 ; 
const int SX10_TEMP25 = 1 ; 
const int RX10_TEMP65 = RX10_TEMP63 + SX10_TEMP25 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP66 = (ParticleStub *)calloc(RX10_TEMP65,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP27 = 0 ; SX10_TEMP27 < RX10_TEMP64 ; SX10_TEMP27 ++ ) 
{ const int RX10_TEMP67 = SX10_TEMP27 ; 
const int RX10_TEMP68 = /* here  */ 0 ; 
const int RX10_TEMP69 = RX10_TEMP67 ; 
const int RX10_TEMP70 = /* place.places ( RX10_TEMP69 )  */ 0 
; 
const int RX10_TEMP71 = getDistLocalCount2 ( dBuffer , RX10_TEMP69 ) ; 
const int RX10_TEMP72 = RX10_TEMP71 - RX10_TEMP62 ; 
/* async ( RX10_TEMP70 )  */ 
{ const int SX10_TEMP28 = 1 ; 
const int RX10_TEMP73 = RX10_TEMP72 + SX10_TEMP28 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP74 = (Particle *)calloc(RX10_TEMP73,sizeof( Particle )); 
struct ParticleStub RX10_TEMP75  ; 
ParticleStub_ParticleStub( &RX10_TEMP75/*Assignment*/, RX10_TEMP74 ) ; 
/* async ( RX10_TEMP68 )  */ 
{ RX10_TEMP66 [ RX10_TEMP67 ] = RX10_TEMP75 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP30 = (ParticleStub *)calloc(RX10_TEMP64,sizeof( ParticleStub )); 
for ( int SX10_TEMP31 = 0 ; SX10_TEMP31 < RX10_TEMP64 ; SX10_TEMP31 ++ ) 
{ const int RX10_TEMP78 = SX10_TEMP31 ; 
struct ParticleStub RX10_TEMP77 = RX10_TEMP66 [ RX10_TEMP78 ] 
; 
SX10_TEMP30 [ RX10_TEMP78 ] = RX10_TEMP77 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP76 = SX10_TEMP30 ; 
struct ParticleRefArray2 RX10_TEMP79  ; 
ParticleRefArray2_ParticleRefArray2( &RX10_TEMP79/*Assignment*/, dBuffer , RX10_TEMP76 ) ; 
struct ParticleRefArray2 rBufferL = RX10_TEMP79 ; 
struct Region2 RX10_TEMP80 = dBuffer .dReg ; 
const int RX10_TEMP81 = 0 ; 
const int RX10_TEMP82 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP83 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP83 = RX10_TEMP83 - RX10_TEMP82 ; const int SX10_TEMP32 = 1 ; 
const int RX10_TEMP84 = RX10_TEMP83 + SX10_TEMP32 ; 
const int SX10_TEMP33 = 1 ; 
const int RX10_TEMP85 = RX10_TEMP83 + SX10_TEMP33 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP86 = (ParticleStub *)calloc(RX10_TEMP85,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP35 = 0 ; SX10_TEMP35 < RX10_TEMP84 ; SX10_TEMP35 ++ ) 
{ const int RX10_TEMP87 = SX10_TEMP35 ; 
const int RX10_TEMP88 = /* here  */ 0 ; 
const int RX10_TEMP89 = RX10_TEMP87 ; 
const int RX10_TEMP90 = /* place.places ( RX10_TEMP89 )  */ 0 
; 
const int RX10_TEMP91 = getDistLocalCount2 ( dBuffer , RX10_TEMP89 ) ; 
const int RX10_TEMP92 = RX10_TEMP91 - RX10_TEMP82 ; 
/* async ( RX10_TEMP90 )  */ 
{ const int SX10_TEMP36 = 1 ; 
const int RX10_TEMP93 = RX10_TEMP92 + SX10_TEMP36 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP94 = (Particle *)calloc(RX10_TEMP93,sizeof( Particle )); 
struct ParticleStub RX10_TEMP95  ; 
ParticleStub_ParticleStub( &RX10_TEMP95/*Assignment*/, RX10_TEMP94 ) ; 
/* async ( RX10_TEMP88 )  */ 
{ RX10_TEMP86 [ RX10_TEMP87 ] = RX10_TEMP95 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP38 = (ParticleStub *)calloc(RX10_TEMP84,sizeof( ParticleStub )); 
for ( int SX10_TEMP39 = 0 ; SX10_TEMP39 < RX10_TEMP84 ; SX10_TEMP39 ++ ) 
{ const int RX10_TEMP98 = SX10_TEMP39 ; 
struct ParticleStub RX10_TEMP97 = RX10_TEMP86 [ RX10_TEMP98 ] 
; 
SX10_TEMP38 [ RX10_TEMP98 ] = RX10_TEMP97 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP96 = SX10_TEMP38 ; 
struct ParticleRefArray2 RX10_TEMP99  ; 
ParticleRefArray2_ParticleRefArray2( &RX10_TEMP99/*Assignment*/, dBuffer , RX10_TEMP96 ) ; 
struct ParticleRefArray2 rBufferR = RX10_TEMP99 ; 
struct Region1 RX10_TEMP100 = dUnique .dReg ; 
const int RX10_TEMP101 = 0 ; 
const int RX10_TEMP102 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP103 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP103 = RX10_TEMP103 - RX10_TEMP102 ; const int SX10_TEMP40 = 1 ; 
const int RX10_TEMP104 = RX10_TEMP103 + SX10_TEMP40 ; 
const int SX10_TEMP41 = 1 ; 
const int RX10_TEMP105 = RX10_TEMP103 + SX10_TEMP41 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP106 = (intStub *)calloc(RX10_TEMP105,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP43 = 0 ; SX10_TEMP43 < RX10_TEMP104 ; SX10_TEMP43 ++ ) 
{ const int RX10_TEMP107 = SX10_TEMP43 ; 
const int RX10_TEMP108 = /* here  */ 0 ; 
const int RX10_TEMP109 = RX10_TEMP107 ; 
const int RX10_TEMP110 = /* place.places ( RX10_TEMP109 )  */ 0 
; 
const int RX10_TEMP111 = getDistLocalCount1 ( dUnique , RX10_TEMP109 ) ; 
const int RX10_TEMP112 = RX10_TEMP111 - RX10_TEMP102 ; 
/* async ( RX10_TEMP110 )  */ 
{ const int SX10_TEMP44 = 1 ; 
const int RX10_TEMP114 = RX10_TEMP112 + SX10_TEMP44 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP45 = (int *)calloc(RX10_TEMP114,sizeof( int )); 
for ( int SX10_TEMP46 = 0 ; SX10_TEMP46 < RX10_TEMP114 ; SX10_TEMP46 ++ ) 
{ const int RX10_TEMP113 = SX10_TEMP46 ; 
const int X10_TEMP30 = 0 ; 
SX10_TEMP45 [ RX10_TEMP113 ] = X10_TEMP30 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP115 = SX10_TEMP45 ; 
struct intStub RX10_TEMP116  ; 
intStub_intStub( &RX10_TEMP116/*Assignment*/, RX10_TEMP115 ) ; 
/* async ( RX10_TEMP108 )  */ 
{ RX10_TEMP106 [ RX10_TEMP107 ] = RX10_TEMP116 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP47 = (intStub *)calloc(RX10_TEMP104,sizeof( intStub )); 
for ( int SX10_TEMP48 = 0 ; SX10_TEMP48 < RX10_TEMP104 ; SX10_TEMP48 ++ ) 
{ const int RX10_TEMP119 = SX10_TEMP48 ; 
struct intStub RX10_TEMP118 = RX10_TEMP106 [ RX10_TEMP119 ] 
; 
SX10_TEMP47 [ RX10_TEMP119 ] = RX10_TEMP118 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP117 = SX10_TEMP47 ; 
struct intRefArray1 RX10_TEMP120  ; 
intRefArray1_intRefArray1( &RX10_TEMP120/*Assignment*/, dUnique , RX10_TEMP117 ) ; 
struct intRefArray1 inLt = RX10_TEMP120 ; 
struct Region1 RX10_TEMP121 = dUnique .dReg ; 
const int RX10_TEMP122 = 0 ; 
const int RX10_TEMP123 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP124 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP124 = RX10_TEMP124 - RX10_TEMP123 ; const int SX10_TEMP49 = 1 ; 
const int RX10_TEMP125 = RX10_TEMP124 + SX10_TEMP49 ; 
const int SX10_TEMP50 = 1 ; 
const int RX10_TEMP126 = RX10_TEMP124 + SX10_TEMP50 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP127 = (intStub *)calloc(RX10_TEMP126,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP52 = 0 ; SX10_TEMP52 < RX10_TEMP125 ; SX10_TEMP52 ++ ) 
{ const int RX10_TEMP128 = SX10_TEMP52 ; 
const int RX10_TEMP129 = /* here  */ 0 ; 
const int RX10_TEMP130 = RX10_TEMP128 ; 
const int RX10_TEMP131 = /* place.places ( RX10_TEMP130 )  */ 0 
; 
const int RX10_TEMP132 = getDistLocalCount1 ( dUnique , RX10_TEMP130 ) ; 
const int RX10_TEMP133 = RX10_TEMP132 - RX10_TEMP123 ; 
/* async ( RX10_TEMP131 )  */ 
{ const int SX10_TEMP53 = 1 ; 
const int RX10_TEMP135 = RX10_TEMP133 + SX10_TEMP53 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP54 = (int *)calloc(RX10_TEMP135,sizeof( int )); 
for ( int SX10_TEMP55 = 0 ; SX10_TEMP55 < RX10_TEMP135 ; SX10_TEMP55 ++ ) 
{ const int RX10_TEMP134 = SX10_TEMP55 ; 
const int X10_TEMP33 = 0 ; 
SX10_TEMP54 [ RX10_TEMP134 ] = X10_TEMP33 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP136 = SX10_TEMP54 ; 
struct intStub RX10_TEMP137  ; 
intStub_intStub( &RX10_TEMP137/*Assignment*/, RX10_TEMP136 ) ; 
/* async ( RX10_TEMP129 )  */ 
{ RX10_TEMP127 [ RX10_TEMP128 ] = RX10_TEMP137 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP56 = (intStub *)calloc(RX10_TEMP125,sizeof( intStub )); 
for ( int SX10_TEMP57 = 0 ; SX10_TEMP57 < RX10_TEMP125 ; SX10_TEMP57 ++ ) 
{ const int RX10_TEMP140 = SX10_TEMP57 ; 
struct intStub RX10_TEMP139 = RX10_TEMP127 [ RX10_TEMP140 ] 
; 
SX10_TEMP56 [ RX10_TEMP140 ] = RX10_TEMP139 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP138 = SX10_TEMP56 ; 
struct intRefArray1 RX10_TEMP141  ; 
intRefArray1_intRefArray1( &RX10_TEMP141/*Assignment*/, dUnique , RX10_TEMP138 ) ; 
struct intRefArray1 inRt = RX10_TEMP141 ; 
struct Region1 RX10_TEMP142 = dUnique .dReg ; 
const int RX10_TEMP143 = 0 ; 
const int RX10_TEMP144 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP145 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP145 = RX10_TEMP145 - RX10_TEMP144 ; const int SX10_TEMP58 = 1 ; 
const int RX10_TEMP146 = RX10_TEMP145 + SX10_TEMP58 ; 
const int SX10_TEMP59 = 1 ; 
const int RX10_TEMP147 = RX10_TEMP145 + SX10_TEMP59 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP148 = (intStub *)calloc(RX10_TEMP147,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP61 = 0 ; SX10_TEMP61 < RX10_TEMP146 ; SX10_TEMP61 ++ ) 
{ const int RX10_TEMP149 = SX10_TEMP61 ; 
const int RX10_TEMP150 = /* here  */ 0 ; 
const int RX10_TEMP151 = RX10_TEMP149 ; 
const int RX10_TEMP152 = /* place.places ( RX10_TEMP151 )  */ 0 
; 
const int RX10_TEMP153 = getDistLocalCount1 ( dUnique , RX10_TEMP151 ) ; 
const int RX10_TEMP154 = RX10_TEMP153 - RX10_TEMP144 ; 
/* async ( RX10_TEMP152 )  */ 
{ const int SX10_TEMP62 = 1 ; 
const int RX10_TEMP156 = RX10_TEMP154 + SX10_TEMP62 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP63 = (int *)calloc(RX10_TEMP156,sizeof( int )); 
for ( int SX10_TEMP64 = 0 ; SX10_TEMP64 < RX10_TEMP156 ; SX10_TEMP64 ++ ) 
{ const int RX10_TEMP155 = SX10_TEMP64 ; 
const int X10_TEMP36 = 0 ; 
SX10_TEMP63 [ RX10_TEMP155 ] = X10_TEMP36 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP157 = SX10_TEMP63 ; 
struct intStub RX10_TEMP158  ; 
intStub_intStub( &RX10_TEMP158/*Assignment*/, RX10_TEMP157 ) ; 
/* async ( RX10_TEMP150 )  */ 
{ RX10_TEMP148 [ RX10_TEMP149 ] = RX10_TEMP158 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP65 = (intStub *)calloc(RX10_TEMP146,sizeof( intStub )); 
for ( int SX10_TEMP66 = 0 ; SX10_TEMP66 < RX10_TEMP146 ; SX10_TEMP66 ++ ) 
{ const int RX10_TEMP161 = SX10_TEMP66 ; 
struct intStub RX10_TEMP160 = RX10_TEMP148 [ RX10_TEMP161 ] 
; 
SX10_TEMP65 [ RX10_TEMP161 ] = RX10_TEMP160 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP159 = SX10_TEMP65 ; 
struct intRefArray1 RX10_TEMP162  ; 
intRefArray1_intRefArray1( &RX10_TEMP162/*Assignment*/, dUnique , RX10_TEMP159 ) ; 
struct intRefArray1 outLt = RX10_TEMP162 ; 
struct Region1 RX10_TEMP163 = dUnique .dReg ; 
const int RX10_TEMP164 = 0 ; 
const int RX10_TEMP165 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP166 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP166 = RX10_TEMP166 - RX10_TEMP165 ; const int SX10_TEMP67 = 1 ; 
const int RX10_TEMP167 = RX10_TEMP166 + SX10_TEMP67 ; 
const int SX10_TEMP68 = 1 ; 
const int RX10_TEMP168 = RX10_TEMP166 + SX10_TEMP68 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP169 = (intStub *)calloc(RX10_TEMP168,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP70 = 0 ; SX10_TEMP70 < RX10_TEMP167 ; SX10_TEMP70 ++ ) 
{ const int RX10_TEMP170 = SX10_TEMP70 ; 
const int RX10_TEMP171 = /* here  */ 0 ; 
const int RX10_TEMP172 = RX10_TEMP170 ; 
const int RX10_TEMP173 = /* place.places ( RX10_TEMP172 )  */ 0 
; 
const int RX10_TEMP174 = getDistLocalCount1 ( dUnique , RX10_TEMP172 ) ; 
const int RX10_TEMP175 = RX10_TEMP174 - RX10_TEMP165 ; 
/* async ( RX10_TEMP173 )  */ 
{ const int SX10_TEMP71 = 1 ; 
const int RX10_TEMP177 = RX10_TEMP175 + SX10_TEMP71 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP72 = (int *)calloc(RX10_TEMP177,sizeof( int )); 
for ( int SX10_TEMP73 = 0 ; SX10_TEMP73 < RX10_TEMP177 ; SX10_TEMP73 ++ ) 
{ const int RX10_TEMP176 = SX10_TEMP73 ; 
const int X10_TEMP39 = 0 ; 
SX10_TEMP72 [ RX10_TEMP176 ] = X10_TEMP39 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP178 = SX10_TEMP72 ; 
struct intStub RX10_TEMP179  ; 
intStub_intStub( &RX10_TEMP179/*Assignment*/, RX10_TEMP178 ) ; 
/* async ( RX10_TEMP171 )  */ 
{ RX10_TEMP169 [ RX10_TEMP170 ] = RX10_TEMP179 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP74 = (intStub *)calloc(RX10_TEMP167,sizeof( intStub )); 
for ( int SX10_TEMP75 = 0 ; SX10_TEMP75 < RX10_TEMP167 ; SX10_TEMP75 ++ ) 
{ const int RX10_TEMP182 = SX10_TEMP75 ; 
struct intStub RX10_TEMP181 = RX10_TEMP169 [ RX10_TEMP182 ] 
; 
SX10_TEMP74 [ RX10_TEMP182 ] = RX10_TEMP181 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP180 = SX10_TEMP74 ; 
struct intRefArray1 RX10_TEMP183  ; 
intRefArray1_intRefArray1( &RX10_TEMP183/*Assignment*/, dUnique , RX10_TEMP180 ) ; 
struct intRefArray1 outRt = RX10_TEMP183 ; 
struct Region1 RX10_TEMP184 = dUnique .dReg ; 
const int RX10_TEMP185 = 0 ; 
const int RX10_TEMP186 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP187 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP187 = RX10_TEMP187 - RX10_TEMP186 ; const int SX10_TEMP76 = 1 ; 
const int RX10_TEMP188 = RX10_TEMP187 + SX10_TEMP76 ; 
const int SX10_TEMP77 = 1 ; 
const int RX10_TEMP189 = RX10_TEMP187 + SX10_TEMP77 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP190 = (intStub *)calloc(RX10_TEMP189,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP79 = 0 ; SX10_TEMP79 < RX10_TEMP188 ; SX10_TEMP79 ++ ) 
{ const int RX10_TEMP191 = SX10_TEMP79 ; 
const int RX10_TEMP192 = /* here  */ 0 ; 
const int RX10_TEMP193 = RX10_TEMP191 ; 
const int RX10_TEMP194 = /* place.places ( RX10_TEMP193 )  */ 0 
; 
const int RX10_TEMP195 = getDistLocalCount1 ( dUnique , RX10_TEMP193 ) ; 
const int RX10_TEMP196 = RX10_TEMP195 - RX10_TEMP186 ; 
/* async ( RX10_TEMP194 )  */ 
{ const int SX10_TEMP80 = 1 ; 
const int RX10_TEMP198 = RX10_TEMP196 + SX10_TEMP80 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP81 = (int *)calloc(RX10_TEMP198,sizeof( int )); 
for ( int SX10_TEMP82 = 0 ; SX10_TEMP82 < RX10_TEMP198 ; SX10_TEMP82 ++ ) 
{ const int RX10_TEMP197 = SX10_TEMP82 ; 
const int X10_TEMP42 = 0 ; 
SX10_TEMP81 [ RX10_TEMP197 ] = X10_TEMP42 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP199 = SX10_TEMP81 ; 
struct intStub RX10_TEMP200  ; 
intStub_intStub( &RX10_TEMP200/*Assignment*/, RX10_TEMP199 ) ; 
/* async ( RX10_TEMP192 )  */ 
{ RX10_TEMP190 [ RX10_TEMP191 ] = RX10_TEMP200 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP83 = (intStub *)calloc(RX10_TEMP188,sizeof( intStub )); 
for ( int SX10_TEMP84 = 0 ; SX10_TEMP84 < RX10_TEMP188 ; SX10_TEMP84 ++ ) 
{ const int RX10_TEMP203 = SX10_TEMP84 ; 
struct intStub RX10_TEMP202 = RX10_TEMP190 [ RX10_TEMP203 ] 
; 
SX10_TEMP83 [ RX10_TEMP203 ] = RX10_TEMP202 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP201 = SX10_TEMP83 ; 
struct intRefArray1 RX10_TEMP204  ; 
intRefArray1_intRefArray1( &RX10_TEMP204/*Assignment*/, dUnique , RX10_TEMP201 ) ; 
struct intRefArray1 nPart = RX10_TEMP204 ; 
struct Region1 RX10_TEMP205 = dUnique .dReg ; 
const int RX10_TEMP206 = 0 ; 
const int RX10_TEMP207 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP208 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP208 = RX10_TEMP208 - RX10_TEMP207 ; const int SX10_TEMP85 = 1 ; 
const int RX10_TEMP209 = RX10_TEMP208 + SX10_TEMP85 ; 
const int SX10_TEMP86 = 1 ; 
const int RX10_TEMP210 = RX10_TEMP208 + SX10_TEMP86 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP211 = (intStub *)calloc(RX10_TEMP210,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP88 = 0 ; SX10_TEMP88 < RX10_TEMP209 ; SX10_TEMP88 ++ ) 
{ const int RX10_TEMP212 = SX10_TEMP88 ; 
const int RX10_TEMP213 = /* here  */ 0 ; 
const int RX10_TEMP214 = RX10_TEMP212 ; 
const int RX10_TEMP215 = /* place.places ( RX10_TEMP214 )  */ 0 
; 
const int RX10_TEMP216 = getDistLocalCount1 ( dUnique , RX10_TEMP214 ) ; 
const int RX10_TEMP217 = RX10_TEMP216 - RX10_TEMP207 ; 
/* async ( RX10_TEMP215 )  */ 
{ const int SX10_TEMP89 = 1 ; 
const int RX10_TEMP219 = RX10_TEMP217 + SX10_TEMP89 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP90 = (int *)calloc(RX10_TEMP219,sizeof( int )); 
for ( int SX10_TEMP91 = 0 ; SX10_TEMP91 < RX10_TEMP219 ; SX10_TEMP91 ++ ) 
{ const int RX10_TEMP218 = SX10_TEMP91 ; 
const int X10_TEMP45 = 0 ; 
SX10_TEMP90 [ RX10_TEMP218 ] = X10_TEMP45 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP220 = SX10_TEMP90 ; 
struct intStub RX10_TEMP221  ; 
intStub_intStub( &RX10_TEMP221/*Assignment*/, RX10_TEMP220 ) ; 
/* async ( RX10_TEMP213 )  */ 
{ RX10_TEMP211 [ RX10_TEMP212 ] = RX10_TEMP221 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP92 = (intStub *)calloc(RX10_TEMP209,sizeof( intStub )); 
for ( int SX10_TEMP93 = 0 ; SX10_TEMP93 < RX10_TEMP209 ; SX10_TEMP93 ++ ) 
{ const int RX10_TEMP224 = SX10_TEMP93 ; 
struct intStub RX10_TEMP223 = RX10_TEMP211 [ RX10_TEMP224 ] 
; 
SX10_TEMP92 [ RX10_TEMP224 ] = RX10_TEMP223 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP222 = SX10_TEMP92 ; 
struct intRefArray1 RX10_TEMP225  ; 
intRefArray1_intRefArray1( &RX10_TEMP225/*Assignment*/, dUnique , RX10_TEMP222 ) ; 
/*UpdatableVariableDeclaration*/ struct intRefArray1 nPartOld = RX10_TEMP225 ; 
struct Region2 RX10_TEMP226 = dPart .dReg ; 
const int RX10_TEMP227 = 0 ; 
const int RX10_TEMP228 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP229 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP229 = RX10_TEMP229 - RX10_TEMP228 ; const int SX10_TEMP94 = 1 ; 
const int RX10_TEMP230 = RX10_TEMP229 + SX10_TEMP94 ; 
const int SX10_TEMP95 = 1 ; 
const int RX10_TEMP231 = RX10_TEMP229 + SX10_TEMP95 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP232 = (intStub *)calloc(RX10_TEMP231,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP97 = 0 ; SX10_TEMP97 < RX10_TEMP230 ; SX10_TEMP97 ++ ) 
{ const int RX10_TEMP233 = SX10_TEMP97 ; 
const int RX10_TEMP234 = /* here  */ 0 ; 
const int RX10_TEMP235 = RX10_TEMP233 ; 
const int RX10_TEMP236 = /* place.places ( RX10_TEMP235 )  */ 0 
; 
const int RX10_TEMP237 = getDistLocalCount2 ( dPart , RX10_TEMP235 ) ; 
const int RX10_TEMP238 = RX10_TEMP237 - RX10_TEMP228 ; 
/* async ( RX10_TEMP236 )  */ 
{ const int SX10_TEMP98 = 1 ; 
const int RX10_TEMP240 = RX10_TEMP238 + SX10_TEMP98 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP99 = (int *)calloc(RX10_TEMP240,sizeof( int )); 
for ( int SX10_TEMP100 = 0 ; SX10_TEMP100 < RX10_TEMP240 ; SX10_TEMP100 ++ ) 
{ const int RX10_TEMP239 = SX10_TEMP100 ; 
const int X10_TEMP48 = 0 ; 
SX10_TEMP99 [ RX10_TEMP239 ] = X10_TEMP48 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP241 = SX10_TEMP99 ; 
struct intStub RX10_TEMP242  ; 
intStub_intStub( &RX10_TEMP242/*Assignment*/, RX10_TEMP241 ) ; 
/* async ( RX10_TEMP234 )  */ 
{ RX10_TEMP232 [ RX10_TEMP233 ] = RX10_TEMP242 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP101 = (intStub *)calloc(RX10_TEMP230,sizeof( intStub )); 
for ( int SX10_TEMP102 = 0 ; SX10_TEMP102 < RX10_TEMP230 ; SX10_TEMP102 ++ ) 
{ const int RX10_TEMP245 = SX10_TEMP102 ; 
struct intStub RX10_TEMP244 = RX10_TEMP232 [ RX10_TEMP245 ] 
; 
SX10_TEMP101 [ RX10_TEMP245 ] = RX10_TEMP244 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP243 = SX10_TEMP101 ; 
struct intRefArray2 RX10_TEMP246  ; 
intRefArray2_intRefArray2( &RX10_TEMP246/*Assignment*/, dPart , RX10_TEMP243 ) ; 
struct intRefArray2 holes = RX10_TEMP246 ; 
const int X10_TEMP52 = 0 ; 
const int X10_TEMP53 = 3 ; 
struct Region1 X10_TEMP54 = createNewRegion1R ( X10_TEMP52 , X10_TEMP53 ) ; 
const int X10_TEMP55 = /* here  */ 0 ; 
struct Dist1 dFlags = getPlaceDist1 ( X10_TEMP54 , X10_TEMP55 ) ; 
struct Region1 RX10_TEMP247 = dUnique .dReg ; 
const int RX10_TEMP248 = 0 ; 
const int RX10_TEMP249 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP250 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP250 = RX10_TEMP250 - RX10_TEMP249 ; const int SX10_TEMP103 = 1 ; 
const int RX10_TEMP251 = RX10_TEMP250 + SX10_TEMP103 ; 
const int SX10_TEMP104 = 1 ; 
const int RX10_TEMP252 = RX10_TEMP250 + SX10_TEMP104 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP253 = (intStub *)calloc(RX10_TEMP252,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP106 = 0 ; SX10_TEMP106 < RX10_TEMP251 ; SX10_TEMP106 ++ ) 
{ const int RX10_TEMP254 = SX10_TEMP106 ; 
const int RX10_TEMP255 = /* here  */ 0 ; 
const int RX10_TEMP256 = RX10_TEMP254 ; 
const int RX10_TEMP257 = /* place.places ( RX10_TEMP256 )  */ 0 
; 
const int RX10_TEMP258 = getDistLocalCount1 ( dUnique , RX10_TEMP256 ) ; 
const int RX10_TEMP259 = RX10_TEMP258 - RX10_TEMP249 ; 
/* async ( RX10_TEMP257 )  */ 
{ const int SX10_TEMP107 = 1 ; 
const int RX10_TEMP261 = RX10_TEMP259 + SX10_TEMP107 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP108 = (int *)calloc(RX10_TEMP261,sizeof( int )); 
for ( int SX10_TEMP109 = 0 ; SX10_TEMP109 < RX10_TEMP261 ; SX10_TEMP109 ++ ) 
{ const int RX10_TEMP260 = SX10_TEMP109 ; 
const int X10_TEMP58 = 0 ; 
SX10_TEMP108 [ RX10_TEMP260 ] = X10_TEMP58 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP262 = SX10_TEMP108 ; 
struct intStub RX10_TEMP263  ; 
intStub_intStub( &RX10_TEMP263/*Assignment*/, RX10_TEMP262 ) ; 
/* async ( RX10_TEMP255 )  */ 
{ RX10_TEMP253 [ RX10_TEMP254 ] = RX10_TEMP263 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP110 = (intStub *)calloc(RX10_TEMP251,sizeof( intStub )); 
for ( int SX10_TEMP111 = 0 ; SX10_TEMP111 < RX10_TEMP251 ; SX10_TEMP111 ++ ) 
{ const int RX10_TEMP266 = SX10_TEMP111 ; 
struct intStub RX10_TEMP265 = RX10_TEMP253 [ RX10_TEMP266 ] 
; 
SX10_TEMP110 [ RX10_TEMP266 ] = RX10_TEMP265 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP264 = SX10_TEMP110 ; 
struct intRefArray1 RX10_TEMP267  ; 
intRefArray1_intRefArray1( &RX10_TEMP267/*Assignment*/, dUnique , RX10_TEMP264 ) ; 
struct intRefArray1 nSent = RX10_TEMP267 ; 
struct Region1 RX10_TEMP268 = dFlags .dReg ; 
const int RX10_TEMP269 = 0 ; 
const int RX10_TEMP270 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP271 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP271 = RX10_TEMP271 - RX10_TEMP270 ; const int SX10_TEMP112 = 1 ; 
const int RX10_TEMP272 = RX10_TEMP271 + SX10_TEMP112 ; 
const int SX10_TEMP113 = 1 ; 
const int RX10_TEMP273 = RX10_TEMP271 + SX10_TEMP113 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP274 = (intStub *)calloc(RX10_TEMP273,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP115 = 0 ; SX10_TEMP115 < RX10_TEMP272 ; SX10_TEMP115 ++ ) 
{ const int RX10_TEMP275 = SX10_TEMP115 ; 
const int RX10_TEMP276 = /* here  */ 0 ; 
const int RX10_TEMP277 = RX10_TEMP275 ; 
const int RX10_TEMP278 = /* place.places ( RX10_TEMP277 )  */ 0 
; 
const int RX10_TEMP279 = getDistLocalCount1 ( dFlags , RX10_TEMP277 ) ; 
const int RX10_TEMP280 = RX10_TEMP279 - RX10_TEMP270 ; 
/* async ( RX10_TEMP278 )  */ 
{ const int SX10_TEMP116 = 1 ; 
const int RX10_TEMP282 = RX10_TEMP280 + SX10_TEMP116 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP117 = (int *)calloc(RX10_TEMP282,sizeof( int )); 
for ( int SX10_TEMP118 = 0 ; SX10_TEMP118 < RX10_TEMP282 ; SX10_TEMP118 ++ ) 
{ const int RX10_TEMP281 = SX10_TEMP118 ; 
const int X10_TEMP61 = 0 ; 
SX10_TEMP117 [ RX10_TEMP281 ] = X10_TEMP61 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP283 = SX10_TEMP117 ; 
struct intStub RX10_TEMP284  ; 
intStub_intStub( &RX10_TEMP284/*Assignment*/, RX10_TEMP283 ) ; 
/* async ( RX10_TEMP276 )  */ 
{ RX10_TEMP274 [ RX10_TEMP275 ] = RX10_TEMP284 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP119 = (intStub *)calloc(RX10_TEMP272,sizeof( intStub )); 
for ( int SX10_TEMP120 = 0 ; SX10_TEMP120 < RX10_TEMP272 ; SX10_TEMP120 ++ ) 
{ const int RX10_TEMP287 = SX10_TEMP120 ; 
struct intStub RX10_TEMP286 = RX10_TEMP274 [ RX10_TEMP287 ] 
; 
SX10_TEMP119 [ RX10_TEMP287 ] = RX10_TEMP286 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP285 = SX10_TEMP119 ; 
struct intRefArray1 RX10_TEMP288  ; 
intRefArray1_intRefArray1( &RX10_TEMP288/*Assignment*/, dFlags , RX10_TEMP285 ) ; 
struct intRefArray1 ibflg = RX10_TEMP288 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP64 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP290 = X10_TEMP64 .dReg ; 
const int RX10_TEMP293 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP291 = RX10_TEMP290 .regSize ; 
RX10_TEMP291 = RX10_TEMP291 - RX10_TEMP293 ; const int SX10_TEMP121 = 1 ; 
const int RX10_TEMP292 = RX10_TEMP291 + SX10_TEMP121 ; 
for ( int SX10_TEMP122 = 0 ; SX10_TEMP122 < RX10_TEMP292 ; SX10_TEMP122 ++ ) 
{ const int RX10_TEMP289 = SX10_TEMP122 ; 
const int RX10_TEMP294 = RX10_TEMP289 ; 
struct Point1 X10_TEMP65 = regionOrdinalPoint1 ( RX10_TEMP290 , RX10_TEMP294 ) ; 
const int pl = X10_TEMP65 .f0 ; 
struct Region1 RX10_TEMP295 = X10_TEMP64 .dReg ; 
const int RX10_TEMP296 = searchPointInRegion1 ( RX10_TEMP295 , X10_TEMP65 ) ; 
const int RX10_TEMP297 = 0 ; 
const int RX10_TEMP298 = RX10_TEMP296 < RX10_TEMP297 ; 
if ( RX10_TEMP298 ) 
{ const char * RX10_TEMP299 = "Point X10_TEMP65 not found in the distribution X10_TEMP64." ; 
fprintf(stderr, RX10_TEMP299 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP300 = getPlaceFromDist1 ( X10_TEMP64 , RX10_TEMP296 ) ; 
const int X10_TEMP66 = RX10_TEMP300 ; 
/* async ( X10_TEMP66 )  */ 
{ struct Dist1 RX10_TEMP301 = particles .distValue ; 
struct Dist1 X10_TEMP67 = RX10_TEMP301 ; 
const int X10_TEMP68 = /* here  */ 0 ; 
struct Dist1 X10_TEMP70 = restrictDist1 ( X10_TEMP67 , X10_TEMP68 ) ; 
struct Region1 RX10_TEMP302 = X10_TEMP70 .dReg ; 
struct Region1 X10_TEMP71 = RX10_TEMP302 ; 
struct Region1 rLocal = X10_TEMP71 ; 
const int X10_TEMP73 = rLocal .regSize ; 
const int X10_TEMP74 = 0 ; 
const int X10_TEMP76 = X10_TEMP73 > X10_TEMP74 ; 
if ( X10_TEMP76 ) 
{ const int RX10_TEMP303 = rLocal .regSize ; 
const int RX10_TEMP304 = 0 ; 
const int RX10_TEMP305 = RX10_TEMP303 <= RX10_TEMP304 ; 
if ( RX10_TEMP305 ) 
{ const char * RX10_TEMP306 = "Operation low() not defined on empty region rLocal" ; 
fprintf(stderr, RX10_TEMP306 ) ; 
exit(EXIT_FAILURE);
} 

const int offset = regionLow ( rLocal ) ; 
const int X10_TEMP79 = /* here  */ 0 ; 
const int RX10_TEMP311 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP309 = rLocal .regSize ; 
RX10_TEMP309 = RX10_TEMP309 - RX10_TEMP311 ; const int SX10_TEMP123 = 1 ; 
const int RX10_TEMP310 = RX10_TEMP309 + SX10_TEMP123 ; 
for ( int SX10_TEMP124 = 0 ; SX10_TEMP124 < RX10_TEMP310 ; SX10_TEMP124 ++ ) 
{ const int RX10_TEMP307 = SX10_TEMP124 ; 
const int RX10_TEMP312 = RX10_TEMP307 ; 
struct Point1 RX10_TEMP308 = regionOrdinalPoint1 ( rLocal , RX10_TEMP312 ) ; 
const int i = RX10_TEMP308 .f0 ; 
/* async ( X10_TEMP79 )  */ 
{ const int X10_TEMP82 = i - offset ; 
struct Point1 RX10_TEMP313  ; 
Point1_Point1( &RX10_TEMP313/*Assignment*/, i ) ; 
struct Dist1 RX10_TEMP314 = particles .distValue ; 
struct Region1 RX10_TEMP315 = RX10_TEMP314 .dReg ; 
const int RX10_TEMP316 = searchPointInRegion1 ( RX10_TEMP315 , RX10_TEMP313 ) ; 
const int RX10_TEMP317 = 0 ; 
const int RX10_TEMP318 = RX10_TEMP316 < RX10_TEMP317 ; 
if ( RX10_TEMP318 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP319 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP319 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP320 = getPlaceFromDist1 ( RX10_TEMP314 , RX10_TEMP316 ) ; 
const int RX10_TEMP322 = /* here  */ 0 ; 
const int RX10_TEMP323 = RX10_TEMP320 != RX10_TEMP322 ; 
if ( RX10_TEMP323 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP321 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP321 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP324 = getRefArrayValue1Particle ( particles , RX10_TEMP316 ) ; 
struct Particle X10_TEMP85 = RX10_TEMP324 ; 
struct Particle X10_TEMP86 = X10_TEMP85 ; 
struct Point2 RX10_TEMP325  ; 
Point2_Point2( &RX10_TEMP325/*Assignment*/, pl , X10_TEMP82 ) ; 
struct Dist2 RX10_TEMP326 = part .distValue ; 
struct Region2 RX10_TEMP327 = RX10_TEMP326 .dReg ; 
const int RX10_TEMP328 = searchPointInRegion2 ( RX10_TEMP327 , RX10_TEMP325 ) ; 
const int RX10_TEMP329 = 0 ; 
const int RX10_TEMP330 = RX10_TEMP328 < RX10_TEMP329 ; 
if ( RX10_TEMP330 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP331 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP331 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP332 = getPlaceFromDist2 ( RX10_TEMP326 , RX10_TEMP328 ) ; 
const int RX10_TEMP334 = /* here  */ 0 ; 
const int RX10_TEMP335 = RX10_TEMP332 != RX10_TEMP334 ; 
if ( RX10_TEMP335 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP333 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP333 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP328 , X10_TEMP86 ) ; 
} 

} 

} 

const int X10_TEMP89 = rLocal .regSize ; 
const int X10_TEMP90 = X10_TEMP89 ; 
struct Point1 RX10_TEMP336  ; 
Point1_Point1( &RX10_TEMP336/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP337 = nPart .distValue ; 
struct Region1 RX10_TEMP338 = RX10_TEMP337 .dReg ; 
const int RX10_TEMP339 = searchPointInRegion1 ( RX10_TEMP338 , RX10_TEMP336 ) ; 
const int RX10_TEMP340 = 0 ; 
const int RX10_TEMP341 = RX10_TEMP339 < RX10_TEMP340 ; 
if ( RX10_TEMP341 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP342 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP342 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP343 = getPlaceFromDist1 ( RX10_TEMP337 , RX10_TEMP339 ) ; 
const int RX10_TEMP345 = /* here  */ 0 ; 
const int RX10_TEMP346 = RX10_TEMP343 != RX10_TEMP345 ; 
if ( RX10_TEMP346 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP344 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP344 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nPart , RX10_TEMP339 , X10_TEMP90 ) ; 
} 

} 

} 

struct Region2 RX10_TEMP347 = dFieldSpace .dReg ; 
struct Region2 rFieldSpace = RX10_TEMP347 ; 
const int X10_TEMP94 = 1 ; 
struct Region1 X10_TEMP95 = X10Util_getRank2D ( rFieldSpace , X10_TEMP94 ) ; 
const double rsize = X10_TEMP95 .regSize ; 
/*UpdatableVariableDeclaration*/int iter = 2 ; 
/*UpdatableVariableDeclaration*/int nter = 0 ; 
/* finish  */ 
{ const int X10_TEMP101 = 0 ; 
const int X10_TEMP102 = 6 ; 
struct Region1 X10_TEMP104 = createNewRegion1R ( X10_TEMP101 , X10_TEMP102 ) ; 
const int X10_TEMP105 = /* here  */ 0 ; 
const int RX10_TEMP351 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP349 = X10_TEMP104 .regSize ; 
RX10_TEMP349 = RX10_TEMP349 - RX10_TEMP351 ; const int SX10_TEMP125 = 1 ; 
const int RX10_TEMP350 = RX10_TEMP349 + SX10_TEMP125 ; 
for ( int SX10_TEMP126 = 0 ; SX10_TEMP126 < RX10_TEMP350 ; SX10_TEMP126 ++ ) 
{ const int RX10_TEMP348 = SX10_TEMP126 ; 
const int RX10_TEMP352 = RX10_TEMP348 ; 
struct Point1 pt = regionOrdinalPoint1 ( X10_TEMP104 , RX10_TEMP352 ) ; 
/* async ( X10_TEMP105 )  */ 
{ const int X10_TEMP108 = 0 ; 
const int X10_TEMP109 = X10_TEMP108 ; 
struct Dist1 RX10_TEMP353 = info .distValue ; 
struct Region1 RX10_TEMP354 = RX10_TEMP353 .dReg ; 
const int RX10_TEMP355 = searchPointInRegion1 ( RX10_TEMP354 , pt ) ; 
const int RX10_TEMP356 = 0 ; 
const int RX10_TEMP357 = RX10_TEMP355 < RX10_TEMP356 ; 
if ( RX10_TEMP357 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP358 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP358 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP359 = getPlaceFromDist1 ( RX10_TEMP353 , RX10_TEMP355 ) ; 
const int RX10_TEMP361 = /* here  */ 0 ; 
const int RX10_TEMP362 = RX10_TEMP359 != RX10_TEMP361 ; 
if ( RX10_TEMP362 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP360 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP360 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP355 , X10_TEMP109 ) ; 
} 

} 

} 

struct intRefArray1 X10_TEMP112 = nPartOld ; 
struct intRefArray1 X10_TEMP113 = nPart ; 
struct Region1 RX10_TEMP363 = dUnique .dReg ; 
const int RX10_TEMP364 = 0 ; 
const int RX10_TEMP365 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP366 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP366 = RX10_TEMP366 - RX10_TEMP365 ; const int SX10_TEMP127 = 1 ; 
const int RX10_TEMP367 = RX10_TEMP366 + SX10_TEMP127 ; 
const int SX10_TEMP128 = 1 ; 
const int RX10_TEMP368 = RX10_TEMP366 + SX10_TEMP128 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP369 = (intStub *)calloc(RX10_TEMP368,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP130 = 0 ; SX10_TEMP130 < RX10_TEMP367 ; SX10_TEMP130 ++ ) 
{ const int RX10_TEMP370 = SX10_TEMP130 ; 
const int RX10_TEMP371 = /* here  */ 0 ; 
const int RX10_TEMP372 = RX10_TEMP370 ; 
const int RX10_TEMP373 = /* place.places ( RX10_TEMP372 )  */ 0 
; 
const int RX10_TEMP374 = getDistLocalCount1 ( dUnique , RX10_TEMP372 ) ; 
const int RX10_TEMP375 = RX10_TEMP374 - RX10_TEMP365 ; 
struct Dist1 RX10_TEMP376 = restrictDist1 ( dUnique , RX10_TEMP373 ) ; 
struct Region1 RX10_TEMP377 = RX10_TEMP376 .dReg ; 
/* async ( RX10_TEMP373 )  */ 
{ const int SX10_TEMP131 = 1 ; 
const int RX10_TEMP402 = RX10_TEMP375 + SX10_TEMP131 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP132 = (int *)calloc(RX10_TEMP402,sizeof( int )); 
for ( int SX10_TEMP133 = 0 ; SX10_TEMP133 < RX10_TEMP402 ; SX10_TEMP133 ++ ) 
{ const int RX10_TEMP378 = SX10_TEMP133 ; 
const int RX10_TEMP379 = RX10_TEMP378 ; 
struct Point1 X10_TEMP111 = regionOrdinalPoint1 ( RX10_TEMP377 , RX10_TEMP379 ) ; 
struct Dist1 RX10_TEMP380 = X10_TEMP112 .distValue ; 
struct Region1 RX10_TEMP381 = RX10_TEMP380 .dReg ; 
const int RX10_TEMP382 = searchPointInRegion1 ( RX10_TEMP381 , X10_TEMP111 ) ; 
const int RX10_TEMP383 = 0 ; 
const int RX10_TEMP384 = RX10_TEMP382 < RX10_TEMP383 ; 
if ( RX10_TEMP384 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP385 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP385 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP386 = getPlaceFromDist1 ( RX10_TEMP380 , RX10_TEMP382 ) ; 
const int RX10_TEMP388 = /* here  */ 0 ; 
const int RX10_TEMP389 = RX10_TEMP386 != RX10_TEMP388 ; 
if ( RX10_TEMP389 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP387 = "Bad place access for array X10_TEMP112" ; 
fprintf(stderr, RX10_TEMP387 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP390 = getRefArrayValue1int ( X10_TEMP112 , RX10_TEMP382 ) ; 
const int X10_TEMP114 = RX10_TEMP390 ; 
struct Dist1 RX10_TEMP391 = X10_TEMP113 .distValue ; 
struct Region1 RX10_TEMP392 = RX10_TEMP391 .dReg ; 
const int RX10_TEMP393 = searchPointInRegion1 ( RX10_TEMP392 , X10_TEMP111 ) ; 
const int RX10_TEMP394 = 0 ; 
const int RX10_TEMP395 = RX10_TEMP393 < RX10_TEMP394 ; 
if ( RX10_TEMP395 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP396 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP396 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP397 = getPlaceFromDist1 ( RX10_TEMP391 , RX10_TEMP393 ) ; 
const int RX10_TEMP399 = /* here  */ 0 ; 
const int RX10_TEMP400 = RX10_TEMP397 != RX10_TEMP399 ; 
if ( RX10_TEMP400 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP398 = "Bad place access for array X10_TEMP113" ; 
fprintf(stderr, RX10_TEMP398 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP401 = getRefArrayValue1int ( X10_TEMP113 , RX10_TEMP393 ) ; 
const int X10_TEMP115 = RX10_TEMP401 ; 
const int X10_TEMP116 = X10_TEMP114 + X10_TEMP115 ; 
SX10_TEMP132 [ RX10_TEMP378 ] = X10_TEMP116 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP403 = SX10_TEMP132 ; 
struct intStub RX10_TEMP404  ; 
intStub_intStub( &RX10_TEMP404/*Assignment*/, RX10_TEMP403 ) ; 
/* async ( RX10_TEMP371 )  */ 
{ RX10_TEMP369 [ RX10_TEMP370 ] = RX10_TEMP404 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP134 = (intStub *)calloc(RX10_TEMP367,sizeof( intStub )); 
for ( int SX10_TEMP135 = 0 ; SX10_TEMP135 < RX10_TEMP367 ; SX10_TEMP135 ++ ) 
{ const int RX10_TEMP407 = SX10_TEMP135 ; 
struct intStub RX10_TEMP406 = RX10_TEMP369 [ RX10_TEMP407 ] 
; 
SX10_TEMP134 [ RX10_TEMP407 ] = RX10_TEMP406 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP405 = SX10_TEMP134 ; 
struct intRefArray1 RX10_TEMP408  ; 
intRefArray1_intRefArray1( &RX10_TEMP408/*Assignment*/, dUnique , RX10_TEMP405 ) ; 
struct intRefArray1 X10_TEMP110 = RX10_TEMP408 ; 
nPartOld = X10_TEMP110 ; /*UpdatableVariableDeclaration*/int doneInner = 0 ; 
/*UpdatableVariableDeclaration*/int doneOuter = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP120 = 0 ; 
do 
{ /*UpdatableVariableDeclaration*/int mter = 0 ; 
struct Region1 RX10_TEMP409 = dUnique .dReg ; 
const int RX10_TEMP410 = 0 ; 
const int RX10_TEMP411 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP412 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP412 = RX10_TEMP412 - RX10_TEMP411 ; const int SX10_TEMP136 = 1 ; 
const int RX10_TEMP413 = RX10_TEMP412 + SX10_TEMP136 ; 
const int SX10_TEMP137 = 1 ; 
const int RX10_TEMP414 = RX10_TEMP412 + SX10_TEMP137 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP415 = (intStub *)calloc(RX10_TEMP414,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP139 = 0 ; SX10_TEMP139 < RX10_TEMP413 ; SX10_TEMP139 ++ ) 
{ const int RX10_TEMP416 = SX10_TEMP139 ; 
const int RX10_TEMP417 = /* here  */ 0 ; 
const int RX10_TEMP418 = RX10_TEMP416 ; 
const int RX10_TEMP419 = /* place.places ( RX10_TEMP418 )  */ 0 
; 
const int RX10_TEMP420 = getDistLocalCount1 ( dUnique , RX10_TEMP418 ) ; 
const int RX10_TEMP421 = RX10_TEMP420 - RX10_TEMP411 ; 
/* async ( RX10_TEMP419 )  */ 
{ const int SX10_TEMP140 = 1 ; 
const int RX10_TEMP423 = RX10_TEMP421 + SX10_TEMP140 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP141 = (int *)calloc(RX10_TEMP423,sizeof( int )); 
for ( int SX10_TEMP142 = 0 ; SX10_TEMP142 < RX10_TEMP423 ; SX10_TEMP142 ++ ) 
{ const int RX10_TEMP422 = SX10_TEMP142 ; 
const int X10_TEMP123 = 0 ; 
SX10_TEMP141 [ RX10_TEMP422 ] = X10_TEMP123 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP424 = SX10_TEMP141 ; 
struct intStub RX10_TEMP425  ; 
intStub_intStub( &RX10_TEMP425/*Assignment*/, RX10_TEMP424 ) ; 
/* async ( RX10_TEMP417 )  */ 
{ RX10_TEMP415 [ RX10_TEMP416 ] = RX10_TEMP425 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP143 = (intStub *)calloc(RX10_TEMP413,sizeof( intStub )); 
for ( int SX10_TEMP144 = 0 ; SX10_TEMP144 < RX10_TEMP413 ; SX10_TEMP144 ++ ) 
{ const int RX10_TEMP428 = SX10_TEMP144 ; 
struct intStub RX10_TEMP427 = RX10_TEMP415 [ RX10_TEMP428 ] 
; 
SX10_TEMP143 [ RX10_TEMP428 ] = RX10_TEMP427 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP426 = SX10_TEMP143 ; 
struct intRefArray1 RX10_TEMP429  ; 
intRefArray1_intRefArray1( &RX10_TEMP429/*Assignment*/, dUnique , RX10_TEMP426 ) ; 
struct intRefArray1 overflow = RX10_TEMP429 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP126 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP431 = X10_TEMP126 .dReg ; 
const int RX10_TEMP434 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP432 = RX10_TEMP431 .regSize ; 
RX10_TEMP432 = RX10_TEMP432 - RX10_TEMP434 ; const int SX10_TEMP145 = 1 ; 
const int RX10_TEMP433 = RX10_TEMP432 + SX10_TEMP145 ; 
for ( int SX10_TEMP146 = 0 ; SX10_TEMP146 < RX10_TEMP433 ; SX10_TEMP146 ++ ) 
{ const int RX10_TEMP430 = SX10_TEMP146 ; 
const int RX10_TEMP435 = RX10_TEMP430 ; 
struct Point1 X10_TEMP127 = regionOrdinalPoint1 ( RX10_TEMP431 , RX10_TEMP435 ) ; 
const int pl = X10_TEMP127 .f0 ; 
struct Region1 RX10_TEMP436 = X10_TEMP126 .dReg ; 
const int RX10_TEMP437 = searchPointInRegion1 ( RX10_TEMP436 , X10_TEMP127 ) ; 
const int RX10_TEMP438 = 0 ; 
const int RX10_TEMP439 = RX10_TEMP437 < RX10_TEMP438 ; 
if ( RX10_TEMP439 ) 
{ const char * RX10_TEMP440 = "Point X10_TEMP127 not found in the distribution X10_TEMP126." ; 
fprintf(stderr, RX10_TEMP440 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP441 = getPlaceFromDist1 ( X10_TEMP126 , RX10_TEMP437 ) ; 
const int X10_TEMP128 = RX10_TEMP441 ; 
/* async ( X10_TEMP128 )  */ 
{ const int X10_TEMP129 = /* here  */ 0 ; 
struct Dist2 X10_TEMP131 = restrictDist2 ( dFieldSpace , X10_TEMP129 ) ; 
struct Region2 RX10_TEMP442 = X10_TEMP131 .dReg ; 
struct Region2 X10_TEMP132 = RX10_TEMP442 ; 
struct Region2 rLocal = X10_TEMP132 ; 
const int X10_TEMP136 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank2D ( rLocal , X10_TEMP136 ) ; 
const int RX10_TEMP443 = rLocal1 .regSize ; 
const int RX10_TEMP444 = 0 ; 
const int RX10_TEMP445 = RX10_TEMP443 <= RX10_TEMP444 ; 
if ( RX10_TEMP445 ) 
{ const char * RX10_TEMP446 = "Operation high() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP446 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP138 = regionHigh ( rLocal1 ) ; 
const int X10_TEMP139 = 1 ; 
const double ub = X10_TEMP138 + X10_TEMP139 ; 
const int RX10_TEMP447 = rLocal1 .regSize ; 
const int RX10_TEMP448 = 0 ; 
const int RX10_TEMP449 = RX10_TEMP447 <= RX10_TEMP448 ; 
if ( RX10_TEMP449 ) 
{ const char * RX10_TEMP450 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP450 ) ; 
exit(EXIT_FAILURE);
} 

const double lb = regionLow ( rLocal1 ) ; 
const int X10_TEMP144 = 0 ; 
const int X10_TEMP145 = X10_TEMP144 ; 
struct Point1 RX10_TEMP451  ; 
Point1_Point1( &RX10_TEMP451/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP452 = outLt .distValue ; 
struct Region1 RX10_TEMP453 = RX10_TEMP452 .dReg ; 
const int RX10_TEMP454 = searchPointInRegion1 ( RX10_TEMP453 , RX10_TEMP451 ) ; 
const int RX10_TEMP455 = 0 ; 
const int RX10_TEMP456 = RX10_TEMP454 < RX10_TEMP455 ; 
if ( RX10_TEMP456 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP457 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP457 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP458 = getPlaceFromDist1 ( RX10_TEMP452 , RX10_TEMP454 ) ; 
const int RX10_TEMP460 = /* here  */ 0 ; 
const int RX10_TEMP461 = RX10_TEMP458 != RX10_TEMP460 ; 
if ( RX10_TEMP461 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP459 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP459 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP454 , X10_TEMP145 ) ; 
const int X10_TEMP148 = 0 ; 
const int X10_TEMP149 = X10_TEMP148 ; 
struct Point1 RX10_TEMP462  ; 
Point1_Point1( &RX10_TEMP462/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP463 = outRt .distValue ; 
struct Region1 RX10_TEMP464 = RX10_TEMP463 .dReg ; 
const int RX10_TEMP465 = searchPointInRegion1 ( RX10_TEMP464 , RX10_TEMP462 ) ; 
const int RX10_TEMP466 = 0 ; 
const int RX10_TEMP467 = RX10_TEMP465 < RX10_TEMP466 ; 
if ( RX10_TEMP467 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP468 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP468 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP469 = getPlaceFromDist1 ( RX10_TEMP463 , RX10_TEMP465 ) ; 
const int RX10_TEMP471 = /* here  */ 0 ; 
const int RX10_TEMP472 = RX10_TEMP469 != RX10_TEMP471 ; 
if ( RX10_TEMP472 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP470 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP470 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP465 , X10_TEMP149 ) ; 
const int X10_TEMP155 = 0 ; 
struct Point1 RX10_TEMP473  ; 
Point1_Point1( &RX10_TEMP473/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP474 = nPart .distValue ; 
struct Region1 RX10_TEMP475 = RX10_TEMP474 .dReg ; 
const int RX10_TEMP476 = searchPointInRegion1 ( RX10_TEMP475 , RX10_TEMP473 ) ; 
const int RX10_TEMP477 = 0 ; 
const int RX10_TEMP478 = RX10_TEMP476 < RX10_TEMP477 ; 
if ( RX10_TEMP478 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP479 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP479 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP480 = getPlaceFromDist1 ( RX10_TEMP474 , RX10_TEMP476 ) ; 
const int RX10_TEMP482 = /* here  */ 0 ; 
const int RX10_TEMP483 = RX10_TEMP480 != RX10_TEMP482 ; 
if ( RX10_TEMP483 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP481 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP481 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP484 = getRefArrayValue1int ( nPart , RX10_TEMP476 ) ; 
const int X10_TEMP152 = RX10_TEMP484 ; 
const int X10_TEMP153 = 1 ; 
const int X10_TEMP156 = X10_TEMP152 - X10_TEMP153 ; 
struct Region1 X10_TEMP158 = createNewRegion1R ( X10_TEMP155 , X10_TEMP156 ) ; 
const int RX10_TEMP489 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP487 = X10_TEMP158 .regSize ; 
RX10_TEMP487 = RX10_TEMP487 - RX10_TEMP489 ; const int SX10_TEMP147 = 1 ; 
const int RX10_TEMP488 = RX10_TEMP487 + SX10_TEMP147 ; 
for ( int SX10_TEMP148 = 0 ; SX10_TEMP148 < RX10_TEMP488 ; SX10_TEMP148 ++ ) 
{ const int RX10_TEMP485 = SX10_TEMP148 ; 
const int RX10_TEMP490 = RX10_TEMP485 ; 
struct Point1 RX10_TEMP486 = regionOrdinalPoint1 ( X10_TEMP158 , RX10_TEMP490 ) ; 
const int i = RX10_TEMP486 .f0 ; 
struct Point2 RX10_TEMP491  ; 
Point2_Point2( &RX10_TEMP491/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP492 = part .distValue ; 
struct Region2 RX10_TEMP493 = RX10_TEMP492 .dReg ; 
const int RX10_TEMP494 = searchPointInRegion2 ( RX10_TEMP493 , RX10_TEMP491 ) ; 
const int RX10_TEMP495 = 0 ; 
const int RX10_TEMP496 = RX10_TEMP494 < RX10_TEMP495 ; 
if ( RX10_TEMP496 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP497 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP497 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP498 = getPlaceFromDist2 ( RX10_TEMP492 , RX10_TEMP494 ) ; 
const int RX10_TEMP500 = /* here  */ 0 ; 
const int RX10_TEMP501 = RX10_TEMP498 != RX10_TEMP500 ; 
if ( RX10_TEMP501 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP499 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP499 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP502 = getRefArrayValue2Particle ( part , RX10_TEMP494 ) ; 
struct Particle p = RX10_TEMP502 ; 
/*UpdatableVariableDeclaration*/double y = Particle_getY ( p ) ; 
const int X10_TEMP164 = y < lb ; 
if ( X10_TEMP164 ) 
{ struct Point1 RX10_TEMP503  ; 
Point1_Point1( &RX10_TEMP503/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP504 = outLt .distValue ; 
struct Region1 RX10_TEMP505 = RX10_TEMP504 .dReg ; 
const int RX10_TEMP506 = searchPointInRegion1 ( RX10_TEMP505 , RX10_TEMP503 ) ; 
const int RX10_TEMP507 = 0 ; 
const int RX10_TEMP508 = RX10_TEMP506 < RX10_TEMP507 ; 
if ( RX10_TEMP508 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP509 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP509 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP510 = getPlaceFromDist1 ( RX10_TEMP504 , RX10_TEMP506 ) ; 
const int RX10_TEMP512 = /* here  */ 0 ; 
const int RX10_TEMP513 = RX10_TEMP510 != RX10_TEMP512 ; 
if ( RX10_TEMP513 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP511 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP511 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP514 = getRefArrayValue1int ( outLt , RX10_TEMP506 ) ; 
const int X10_TEMP166 = RX10_TEMP514 ; 
const int X10_TEMP167 = rBuffer .regSize ; 
const int X10_TEMP169 = X10_TEMP166 < X10_TEMP167 ; 
if ( X10_TEMP169 ) 
{ const int X10_TEMP170 = /* here  */ 0 ; 
const int X10_TEMP172 = /* X10_TEMP170 . isFirst ( )  */ 1 ; 
if ( X10_TEMP172 ) 
{ const double X10_TEMP174 = y + rsize ; 
y = X10_TEMP174 ; } 

struct Point1 RX10_TEMP515  ; 
Point1_Point1( &RX10_TEMP515/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP516 = outLt .distValue ; 
struct Region1 RX10_TEMP517 = RX10_TEMP516 .dReg ; 
const int RX10_TEMP518 = searchPointInRegion1 ( RX10_TEMP517 , RX10_TEMP515 ) ; 
const int RX10_TEMP519 = 0 ; 
const int RX10_TEMP520 = RX10_TEMP518 < RX10_TEMP519 ; 
if ( RX10_TEMP520 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP521 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP521 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP522 = getPlaceFromDist1 ( RX10_TEMP516 , RX10_TEMP518 ) ; 
const int RX10_TEMP524 = /* here  */ 0 ; 
const int RX10_TEMP525 = RX10_TEMP522 != RX10_TEMP524 ; 
if ( RX10_TEMP525 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP523 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP523 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP526 = getRefArrayValue1int ( outLt , RX10_TEMP518 ) ; 
const int X10_TEMP178 = RX10_TEMP526 ; 
struct Particle X10_TEMP181 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP182 = X10_TEMP181 ; 
struct Point2 RX10_TEMP527  ; 
Point2_Point2( &RX10_TEMP527/*Assignment*/, pl , X10_TEMP178 ) ; 
struct Dist2 RX10_TEMP528 = sBufferL .distValue ; 
struct Region2 RX10_TEMP529 = RX10_TEMP528 .dReg ; 
const int RX10_TEMP530 = searchPointInRegion2 ( RX10_TEMP529 , RX10_TEMP527 ) ; 
const int RX10_TEMP531 = 0 ; 
const int RX10_TEMP532 = RX10_TEMP530 < RX10_TEMP531 ; 
if ( RX10_TEMP532 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP533 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP533 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP534 = getPlaceFromDist2 ( RX10_TEMP528 , RX10_TEMP530 ) ; 
const int RX10_TEMP536 = /* here  */ 0 ; 
const int RX10_TEMP537 = RX10_TEMP534 != RX10_TEMP536 ; 
if ( RX10_TEMP537 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP535 = "Bad place access for array sBufferL" ; 
fprintf(stderr, RX10_TEMP535 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferL , RX10_TEMP530 , X10_TEMP182 ) ; 
struct Point1 RX10_TEMP538  ; 
Point1_Point1( &RX10_TEMP538/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP539 = outLt .distValue ; 
struct Region1 RX10_TEMP540 = RX10_TEMP539 .dReg ; 
const int RX10_TEMP541 = searchPointInRegion1 ( RX10_TEMP540 , RX10_TEMP538 ) ; 
const int RX10_TEMP542 = 0 ; 
const int RX10_TEMP543 = RX10_TEMP541 < RX10_TEMP542 ; 
if ( RX10_TEMP543 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP544 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP544 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP545 = getPlaceFromDist1 ( RX10_TEMP539 , RX10_TEMP541 ) ; 
const int RX10_TEMP547 = /* here  */ 0 ; 
const int RX10_TEMP548 = RX10_TEMP545 != RX10_TEMP547 ; 
if ( RX10_TEMP548 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP546 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP546 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP549 = getRefArrayValue1int ( outLt , RX10_TEMP541 ) ; 
const int X10_TEMP186 = RX10_TEMP549 ; 
struct Point1 RX10_TEMP550  ; 
Point1_Point1( &RX10_TEMP550/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP551 = outRt .distValue ; 
struct Region1 RX10_TEMP552 = RX10_TEMP551 .dReg ; 
const int RX10_TEMP553 = searchPointInRegion1 ( RX10_TEMP552 , RX10_TEMP550 ) ; 
const int RX10_TEMP554 = 0 ; 
const int RX10_TEMP555 = RX10_TEMP553 < RX10_TEMP554 ; 
if ( RX10_TEMP555 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP556 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP556 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP557 = getPlaceFromDist1 ( RX10_TEMP551 , RX10_TEMP553 ) ; 
const int RX10_TEMP559 = /* here  */ 0 ; 
const int RX10_TEMP560 = RX10_TEMP557 != RX10_TEMP559 ; 
if ( RX10_TEMP560 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP558 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP558 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP561 = getRefArrayValue1int ( outRt , RX10_TEMP553 ) ; 
const int X10_TEMP187 = RX10_TEMP561 ; 
const int X10_TEMP189 = X10_TEMP186 + X10_TEMP187 ; 
const int X10_TEMP191 = i ; 
struct Point2 RX10_TEMP562  ; 
Point2_Point2( &RX10_TEMP562/*Assignment*/, pl , X10_TEMP189 ) ; 
struct Dist2 RX10_TEMP563 = holes .distValue ; 
struct Region2 RX10_TEMP564 = RX10_TEMP563 .dReg ; 
const int RX10_TEMP565 = searchPointInRegion2 ( RX10_TEMP564 , RX10_TEMP562 ) ; 
const int RX10_TEMP566 = 0 ; 
const int RX10_TEMP567 = RX10_TEMP565 < RX10_TEMP566 ; 
if ( RX10_TEMP567 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP568 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP568 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP569 = getPlaceFromDist2 ( RX10_TEMP563 , RX10_TEMP565 ) ; 
const int RX10_TEMP571 = /* here  */ 0 ; 
const int RX10_TEMP572 = RX10_TEMP569 != RX10_TEMP571 ; 
if ( RX10_TEMP572 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP570 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP570 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( holes , RX10_TEMP565 , X10_TEMP191 ) ; 
struct Point1 RX10_TEMP573  ; 
Point1_Point1( &RX10_TEMP573/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP574 = outLt .distValue ; 
struct Region1 RX10_TEMP575 = RX10_TEMP574 .dReg ; 
const int RX10_TEMP576 = searchPointInRegion1 ( RX10_TEMP575 , RX10_TEMP573 ) ; 
const int RX10_TEMP577 = 0 ; 
const int RX10_TEMP578 = RX10_TEMP576 < RX10_TEMP577 ; 
if ( RX10_TEMP578 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP579 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP579 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP580 = getPlaceFromDist1 ( RX10_TEMP574 , RX10_TEMP576 ) ; 
const int RX10_TEMP582 = /* here  */ 0 ; 
const int RX10_TEMP583 = RX10_TEMP580 != RX10_TEMP582 ; 
if ( RX10_TEMP583 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP581 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP581 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP584 = getRefArrayValue1int ( outLt , RX10_TEMP576 ) ; 
const int X10_TEMP193 = RX10_TEMP584 ; 
const int X10_TEMP194 = 1 ; 
struct Point1 RX10_TEMP585  ; 
Point1_Point1( &RX10_TEMP585/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP586 = outLt .distValue ; 
struct Region1 RX10_TEMP587 = RX10_TEMP586 .dReg ; 
const int RX10_TEMP588 = searchPointInRegion1 ( RX10_TEMP587 , RX10_TEMP585 ) ; 
const int RX10_TEMP589 = 0 ; 
const int RX10_TEMP590 = RX10_TEMP588 < RX10_TEMP589 ; 
if ( RX10_TEMP590 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP591 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP591 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP592 = getPlaceFromDist1 ( RX10_TEMP586 , RX10_TEMP588 ) ; 
const int RX10_TEMP594 = /* here  */ 0 ; 
const int RX10_TEMP595 = RX10_TEMP592 != RX10_TEMP594 ; 
if ( RX10_TEMP595 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP593 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP593 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP596 = getRefArrayValue1int ( outLt , RX10_TEMP588 ) ; 
const int X10_TEMP195 = RX10_TEMP596 ; 
const int X10_TEMP196 = X10_TEMP195 + X10_TEMP194 ; 
struct Point1 RX10_TEMP597  ; 
Point1_Point1( &RX10_TEMP597/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP598 = outLt .distValue ; 
struct Region1 RX10_TEMP599 = RX10_TEMP598 .dReg ; 
const int RX10_TEMP600 = searchPointInRegion1 ( RX10_TEMP599 , RX10_TEMP597 ) ; 
const int RX10_TEMP601 = 0 ; 
const int RX10_TEMP602 = RX10_TEMP600 < RX10_TEMP601 ; 
if ( RX10_TEMP602 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP603 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP603 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP604 = getPlaceFromDist1 ( RX10_TEMP598 , RX10_TEMP600 ) ; 
const int RX10_TEMP606 = /* here  */ 0 ; 
const int RX10_TEMP607 = RX10_TEMP604 != RX10_TEMP606 ; 
if ( RX10_TEMP607 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP605 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP605 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP600 , X10_TEMP196 ) ; 
} 
else 
{ const int X10_TEMP199 = 1 ; 
const int X10_TEMP200 = X10_TEMP199 ; 
struct Point1 RX10_TEMP608  ; 
Point1_Point1( &RX10_TEMP608/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP609 = overflow .distValue ; 
struct Region1 RX10_TEMP610 = RX10_TEMP609 .dReg ; 
const int RX10_TEMP611 = searchPointInRegion1 ( RX10_TEMP610 , RX10_TEMP608 ) ; 
const int RX10_TEMP612 = 0 ; 
const int RX10_TEMP613 = RX10_TEMP611 < RX10_TEMP612 ; 
if ( RX10_TEMP613 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP614 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP614 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP615 = getPlaceFromDist1 ( RX10_TEMP609 , RX10_TEMP611 ) ; 
const int RX10_TEMP617 = /* here  */ 0 ; 
const int RX10_TEMP618 = RX10_TEMP615 != RX10_TEMP617 ; 
if ( RX10_TEMP618 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP616 = "Bad place access for array overflow" ; 
fprintf(stderr, RX10_TEMP616 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( overflow , RX10_TEMP611 , X10_TEMP200 ) ; 
break ; 
} 


} 
else 
{ const int X10_TEMP202 = y >= ub ; 
if ( X10_TEMP202 ) 
{ struct Point1 RX10_TEMP619  ; 
Point1_Point1( &RX10_TEMP619/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP620 = outRt .distValue ; 
struct Region1 RX10_TEMP621 = RX10_TEMP620 .dReg ; 
const int RX10_TEMP622 = searchPointInRegion1 ( RX10_TEMP621 , RX10_TEMP619 ) ; 
const int RX10_TEMP623 = 0 ; 
const int RX10_TEMP624 = RX10_TEMP622 < RX10_TEMP623 ; 
if ( RX10_TEMP624 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP625 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP625 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP626 = getPlaceFromDist1 ( RX10_TEMP620 , RX10_TEMP622 ) ; 
const int RX10_TEMP628 = /* here  */ 0 ; 
const int RX10_TEMP629 = RX10_TEMP626 != RX10_TEMP628 ; 
if ( RX10_TEMP629 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP627 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP627 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP630 = getRefArrayValue1int ( outRt , RX10_TEMP622 ) ; 
const int X10_TEMP204 = RX10_TEMP630 ; 
const int X10_TEMP205 = rBuffer .regSize ; 
const int X10_TEMP207 = X10_TEMP204 < X10_TEMP205 ; 
if ( X10_TEMP207 ) 
{ const int X10_TEMP208 = /* here  */ 0 ; 
const int X10_TEMP210 = /* X10_TEMP208 . isLast ( )  */ 1 ; 
if ( X10_TEMP210 ) 
{ const double X10_TEMP212 = y - rsize ; 
y = X10_TEMP212 ; } 

struct Point1 RX10_TEMP631  ; 
Point1_Point1( &RX10_TEMP631/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP632 = outRt .distValue ; 
struct Region1 RX10_TEMP633 = RX10_TEMP632 .dReg ; 
const int RX10_TEMP634 = searchPointInRegion1 ( RX10_TEMP633 , RX10_TEMP631 ) ; 
const int RX10_TEMP635 = 0 ; 
const int RX10_TEMP636 = RX10_TEMP634 < RX10_TEMP635 ; 
if ( RX10_TEMP636 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP637 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP637 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP638 = getPlaceFromDist1 ( RX10_TEMP632 , RX10_TEMP634 ) ; 
const int RX10_TEMP640 = /* here  */ 0 ; 
const int RX10_TEMP641 = RX10_TEMP638 != RX10_TEMP640 ; 
if ( RX10_TEMP641 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP639 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP639 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP642 = getRefArrayValue1int ( outRt , RX10_TEMP634 ) ; 
const int X10_TEMP216 = RX10_TEMP642 ; 
struct Particle X10_TEMP219 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP220 = X10_TEMP219 ; 
struct Point2 RX10_TEMP643  ; 
Point2_Point2( &RX10_TEMP643/*Assignment*/, pl , X10_TEMP216 ) ; 
struct Dist2 RX10_TEMP644 = sBufferR .distValue ; 
struct Region2 RX10_TEMP645 = RX10_TEMP644 .dReg ; 
const int RX10_TEMP646 = searchPointInRegion2 ( RX10_TEMP645 , RX10_TEMP643 ) ; 
const int RX10_TEMP647 = 0 ; 
const int RX10_TEMP648 = RX10_TEMP646 < RX10_TEMP647 ; 
if ( RX10_TEMP648 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP649 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP649 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP650 = getPlaceFromDist2 ( RX10_TEMP644 , RX10_TEMP646 ) ; 
const int RX10_TEMP652 = /* here  */ 0 ; 
const int RX10_TEMP653 = RX10_TEMP650 != RX10_TEMP652 ; 
if ( RX10_TEMP653 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP651 = "Bad place access for array sBufferR" ; 
fprintf(stderr, RX10_TEMP651 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferR , RX10_TEMP646 , X10_TEMP220 ) ; 
struct Point1 RX10_TEMP654  ; 
Point1_Point1( &RX10_TEMP654/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP655 = outLt .distValue ; 
struct Region1 RX10_TEMP656 = RX10_TEMP655 .dReg ; 
const int RX10_TEMP657 = searchPointInRegion1 ( RX10_TEMP656 , RX10_TEMP654 ) ; 
const int RX10_TEMP658 = 0 ; 
const int RX10_TEMP659 = RX10_TEMP657 < RX10_TEMP658 ; 
if ( RX10_TEMP659 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP660 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP660 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP661 = getPlaceFromDist1 ( RX10_TEMP655 , RX10_TEMP657 ) ; 
const int RX10_TEMP663 = /* here  */ 0 ; 
const int RX10_TEMP664 = RX10_TEMP661 != RX10_TEMP663 ; 
if ( RX10_TEMP664 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP662 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP662 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP665 = getRefArrayValue1int ( outLt , RX10_TEMP657 ) ; 
const int X10_TEMP224 = RX10_TEMP665 ; 
struct Point1 RX10_TEMP666  ; 
Point1_Point1( &RX10_TEMP666/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP667 = outRt .distValue ; 
struct Region1 RX10_TEMP668 = RX10_TEMP667 .dReg ; 
const int RX10_TEMP669 = searchPointInRegion1 ( RX10_TEMP668 , RX10_TEMP666 ) ; 
const int RX10_TEMP670 = 0 ; 
const int RX10_TEMP671 = RX10_TEMP669 < RX10_TEMP670 ; 
if ( RX10_TEMP671 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP672 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP672 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP673 = getPlaceFromDist1 ( RX10_TEMP667 , RX10_TEMP669 ) ; 
const int RX10_TEMP675 = /* here  */ 0 ; 
const int RX10_TEMP676 = RX10_TEMP673 != RX10_TEMP675 ; 
if ( RX10_TEMP676 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP674 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP674 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP677 = getRefArrayValue1int ( outRt , RX10_TEMP669 ) ; 
const int X10_TEMP225 = RX10_TEMP677 ; 
const int X10_TEMP227 = X10_TEMP224 + X10_TEMP225 ; 
const int X10_TEMP229 = i ; 
struct Point2 RX10_TEMP678  ; 
Point2_Point2( &RX10_TEMP678/*Assignment*/, pl , X10_TEMP227 ) ; 
struct Dist2 RX10_TEMP679 = holes .distValue ; 
struct Region2 RX10_TEMP680 = RX10_TEMP679 .dReg ; 
const int RX10_TEMP681 = searchPointInRegion2 ( RX10_TEMP680 , RX10_TEMP678 ) ; 
const int RX10_TEMP682 = 0 ; 
const int RX10_TEMP683 = RX10_TEMP681 < RX10_TEMP682 ; 
if ( RX10_TEMP683 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP684 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP684 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP685 = getPlaceFromDist2 ( RX10_TEMP679 , RX10_TEMP681 ) ; 
const int RX10_TEMP687 = /* here  */ 0 ; 
const int RX10_TEMP688 = RX10_TEMP685 != RX10_TEMP687 ; 
if ( RX10_TEMP688 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP686 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP686 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( holes , RX10_TEMP681 , X10_TEMP229 ) ; 
struct Point1 RX10_TEMP689  ; 
Point1_Point1( &RX10_TEMP689/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP690 = outRt .distValue ; 
struct Region1 RX10_TEMP691 = RX10_TEMP690 .dReg ; 
const int RX10_TEMP692 = searchPointInRegion1 ( RX10_TEMP691 , RX10_TEMP689 ) ; 
const int RX10_TEMP693 = 0 ; 
const int RX10_TEMP694 = RX10_TEMP692 < RX10_TEMP693 ; 
if ( RX10_TEMP694 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP695 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP695 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP696 = getPlaceFromDist1 ( RX10_TEMP690 , RX10_TEMP692 ) ; 
const int RX10_TEMP698 = /* here  */ 0 ; 
const int RX10_TEMP699 = RX10_TEMP696 != RX10_TEMP698 ; 
if ( RX10_TEMP699 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP697 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP697 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP700 = getRefArrayValue1int ( outRt , RX10_TEMP692 ) ; 
const int X10_TEMP231 = RX10_TEMP700 ; 
const int X10_TEMP232 = 1 ; 
struct Point1 RX10_TEMP701  ; 
Point1_Point1( &RX10_TEMP701/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP702 = outRt .distValue ; 
struct Region1 RX10_TEMP703 = RX10_TEMP702 .dReg ; 
const int RX10_TEMP704 = searchPointInRegion1 ( RX10_TEMP703 , RX10_TEMP701 ) ; 
const int RX10_TEMP705 = 0 ; 
const int RX10_TEMP706 = RX10_TEMP704 < RX10_TEMP705 ; 
if ( RX10_TEMP706 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP707 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP707 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP708 = getPlaceFromDist1 ( RX10_TEMP702 , RX10_TEMP704 ) ; 
const int RX10_TEMP710 = /* here  */ 0 ; 
const int RX10_TEMP711 = RX10_TEMP708 != RX10_TEMP710 ; 
if ( RX10_TEMP711 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP709 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP709 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP712 = getRefArrayValue1int ( outRt , RX10_TEMP704 ) ; 
const int X10_TEMP233 = RX10_TEMP712 ; 
const int X10_TEMP234 = X10_TEMP233 + X10_TEMP232 ; 
struct Point1 RX10_TEMP713  ; 
Point1_Point1( &RX10_TEMP713/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP714 = outRt .distValue ; 
struct Region1 RX10_TEMP715 = RX10_TEMP714 .dReg ; 
const int RX10_TEMP716 = searchPointInRegion1 ( RX10_TEMP715 , RX10_TEMP713 ) ; 
const int RX10_TEMP717 = 0 ; 
const int RX10_TEMP718 = RX10_TEMP716 < RX10_TEMP717 ; 
if ( RX10_TEMP718 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP719 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP719 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP720 = getPlaceFromDist1 ( RX10_TEMP714 , RX10_TEMP716 ) ; 
const int RX10_TEMP722 = /* here  */ 0 ; 
const int RX10_TEMP723 = RX10_TEMP720 != RX10_TEMP722 ; 
if ( RX10_TEMP723 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP721 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP721 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP716 , X10_TEMP234 ) ; 
} 
else 
{ const int X10_TEMP237 = 1 ; 
const int X10_TEMP238 = X10_TEMP237 ; 
struct Point1 RX10_TEMP724  ; 
Point1_Point1( &RX10_TEMP724/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP725 = overflow .distValue ; 
struct Region1 RX10_TEMP726 = RX10_TEMP725 .dReg ; 
const int RX10_TEMP727 = searchPointInRegion1 ( RX10_TEMP726 , RX10_TEMP724 ) ; 
const int RX10_TEMP728 = 0 ; 
const int RX10_TEMP729 = RX10_TEMP727 < RX10_TEMP728 ; 
if ( RX10_TEMP729 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP730 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP730 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP731 = getPlaceFromDist1 ( RX10_TEMP725 , RX10_TEMP727 ) ; 
const int RX10_TEMP733 = /* here  */ 0 ; 
const int RX10_TEMP734 = RX10_TEMP731 != RX10_TEMP733 ; 
if ( RX10_TEMP734 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP732 = "Bad place access for array overflow" ; 
fprintf(stderr, RX10_TEMP732 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( overflow , RX10_TEMP727 , X10_TEMP238 ) ; 
break ; 
} 


} 

} 


} 

struct Point1 RX10_TEMP735  ; 
Point1_Point1( &RX10_TEMP735/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP736 = outLt .distValue ; 
struct Region1 RX10_TEMP737 = RX10_TEMP736 .dReg ; 
const int RX10_TEMP738 = searchPointInRegion1 ( RX10_TEMP737 , RX10_TEMP735 ) ; 
const int RX10_TEMP739 = 0 ; 
const int RX10_TEMP740 = RX10_TEMP738 < RX10_TEMP739 ; 
if ( RX10_TEMP740 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP741 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP741 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP742 = getPlaceFromDist1 ( RX10_TEMP736 , RX10_TEMP738 ) ; 
const int RX10_TEMP744 = /* here  */ 0 ; 
const int RX10_TEMP745 = RX10_TEMP742 != RX10_TEMP744 ; 
if ( RX10_TEMP745 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP743 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP743 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP746 = getRefArrayValue1int ( outLt , RX10_TEMP738 ) ; 
const int X10_TEMP242 = RX10_TEMP746 ; 
struct Point1 RX10_TEMP747  ; 
Point1_Point1( &RX10_TEMP747/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP748 = outRt .distValue ; 
struct Region1 RX10_TEMP749 = RX10_TEMP748 .dReg ; 
const int RX10_TEMP750 = searchPointInRegion1 ( RX10_TEMP749 , RX10_TEMP747 ) ; 
const int RX10_TEMP751 = 0 ; 
const int RX10_TEMP752 = RX10_TEMP750 < RX10_TEMP751 ; 
if ( RX10_TEMP752 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP753 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP753 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP754 = getPlaceFromDist1 ( RX10_TEMP748 , RX10_TEMP750 ) ; 
const int RX10_TEMP756 = /* here  */ 0 ; 
const int RX10_TEMP757 = RX10_TEMP754 != RX10_TEMP756 ; 
if ( RX10_TEMP757 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP755 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP755 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP758 = getRefArrayValue1int ( outRt , RX10_TEMP750 ) ; 
const int X10_TEMP243 = RX10_TEMP758 ; 
const int X10_TEMP245 = X10_TEMP242 + X10_TEMP243 ; 
const int X10_TEMP246 = X10_TEMP245 ; 
struct Point1 RX10_TEMP759  ; 
Point1_Point1( &RX10_TEMP759/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP760 = nSent .distValue ; 
struct Region1 RX10_TEMP761 = RX10_TEMP760 .dReg ; 
const int RX10_TEMP762 = searchPointInRegion1 ( RX10_TEMP761 , RX10_TEMP759 ) ; 
const int RX10_TEMP763 = 0 ; 
const int RX10_TEMP764 = RX10_TEMP762 < RX10_TEMP763 ; 
if ( RX10_TEMP764 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP765 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP765 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP766 = getPlaceFromDist1 ( RX10_TEMP760 , RX10_TEMP762 ) ; 
const int RX10_TEMP768 = /* here  */ 0 ; 
const int RX10_TEMP769 = RX10_TEMP766 != RX10_TEMP768 ; 
if ( RX10_TEMP769 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP767 = "Bad place access for array nSent" ; 
fprintf(stderr, RX10_TEMP767 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nSent , RX10_TEMP762 , X10_TEMP246 ) ; 
} 

} 

} 

const int X10_TEMP248 = 2 ; 
const int X10_TEMP250 = intrefArrayMax1 ( overflow ) ; 
const int X10_TEMP251 = X10_TEMP250 ; 
struct Point1 RX10_TEMP770  ; 
Point1_Point1( &RX10_TEMP770/*Assignment*/, X10_TEMP248 ) ; 
struct Dist1 RX10_TEMP771 = ibflg .distValue ; 
struct Region1 RX10_TEMP772 = RX10_TEMP771 .dReg ; 
const int RX10_TEMP773 = searchPointInRegion1 ( RX10_TEMP772 , RX10_TEMP770 ) ; 
const int RX10_TEMP774 = 0 ; 
const int RX10_TEMP775 = RX10_TEMP773 < RX10_TEMP774 ; 
if ( RX10_TEMP775 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP776 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP776 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP777 = getPlaceFromDist1 ( RX10_TEMP771 , RX10_TEMP773 ) ; 
const int RX10_TEMP779 = /* here  */ 0 ; 
const int RX10_TEMP780 = RX10_TEMP777 != RX10_TEMP779 ; 
if ( RX10_TEMP780 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP778 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP778 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( ibflg , RX10_TEMP773 , X10_TEMP251 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP252 = 0 ; 
do 
{ const int X10_TEMP253 = 2 ; 
const int X10_TEMP255 = iter + X10_TEMP253 ; 
iter = X10_TEMP255 ; const int X10_TEMP256 = 1 ; 
const int X10_TEMP258 = mter + X10_TEMP256 ; 
mter = X10_TEMP258 ; LinearESOpenPIC2D_transferParticles ( X10_TEMP0 , sBufferL , sBufferR , outLt , outRt , rBufferL , rBufferR , inLt , inRt ) ; 
struct Region1 RX10_TEMP781 = dUnique .dReg ; 
const int RX10_TEMP782 = 0 ; 
const int RX10_TEMP783 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP784 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP784 = RX10_TEMP784 - RX10_TEMP783 ; const int SX10_TEMP149 = 1 ; 
const int RX10_TEMP785 = RX10_TEMP784 + SX10_TEMP149 ; 
const int SX10_TEMP150 = 1 ; 
const int RX10_TEMP786 = RX10_TEMP784 + SX10_TEMP150 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP787 = (intStub *)calloc(RX10_TEMP786,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP152 = 0 ; SX10_TEMP152 < RX10_TEMP785 ; SX10_TEMP152 ++ ) 
{ const int RX10_TEMP788 = SX10_TEMP152 ; 
const int RX10_TEMP789 = /* here  */ 0 ; 
const int RX10_TEMP790 = RX10_TEMP788 ; 
const int RX10_TEMP791 = /* place.places ( RX10_TEMP790 )  */ 0 
; 
const int RX10_TEMP792 = getDistLocalCount1 ( dUnique , RX10_TEMP790 ) ; 
const int RX10_TEMP793 = RX10_TEMP792 - RX10_TEMP783 ; 
/* async ( RX10_TEMP791 )  */ 
{ const int SX10_TEMP153 = 1 ; 
const int RX10_TEMP794 = RX10_TEMP793 + SX10_TEMP153 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP795 = (int *)calloc(RX10_TEMP794,sizeof( int )); 
struct intStub RX10_TEMP796  ; 
intStub_intStub( &RX10_TEMP796/*Assignment*/, RX10_TEMP795 ) ; 
/* async ( RX10_TEMP789 )  */ 
{ RX10_TEMP787 [ RX10_TEMP788 ] = RX10_TEMP796 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP155 = (intStub *)calloc(RX10_TEMP785,sizeof( intStub )); 
for ( int SX10_TEMP156 = 0 ; SX10_TEMP156 < RX10_TEMP785 ; SX10_TEMP156 ++ ) 
{ const int RX10_TEMP799 = SX10_TEMP156 ; 
struct intStub RX10_TEMP798 = RX10_TEMP787 [ RX10_TEMP799 ] 
; 
SX10_TEMP155 [ RX10_TEMP799 ] = RX10_TEMP798 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP797 = SX10_TEMP155 ; 
struct intRefArray1 RX10_TEMP800  ; 
intRefArray1_intRefArray1( &RX10_TEMP800/*Assignment*/, dUnique , RX10_TEMP797 ) ; 
struct intRefArray1 outgoing = RX10_TEMP800 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP269 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP802 = X10_TEMP269 .dReg ; 
const int RX10_TEMP805 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP803 = RX10_TEMP802 .regSize ; 
RX10_TEMP803 = RX10_TEMP803 - RX10_TEMP805 ; const int SX10_TEMP157 = 1 ; 
const int RX10_TEMP804 = RX10_TEMP803 + SX10_TEMP157 ; 
for ( int SX10_TEMP158 = 0 ; SX10_TEMP158 < RX10_TEMP804 ; SX10_TEMP158 ++ ) 
{ const int RX10_TEMP801 = SX10_TEMP158 ; 
const int RX10_TEMP806 = RX10_TEMP801 ; 
struct Point1 X10_TEMP270 = regionOrdinalPoint1 ( RX10_TEMP802 , RX10_TEMP806 ) ; 
const int pl = X10_TEMP270 .f0 ; 
struct Region1 RX10_TEMP807 = X10_TEMP269 .dReg ; 
const int RX10_TEMP808 = searchPointInRegion1 ( RX10_TEMP807 , X10_TEMP270 ) ; 
const int RX10_TEMP809 = 0 ; 
const int RX10_TEMP810 = RX10_TEMP808 < RX10_TEMP809 ; 
if ( RX10_TEMP810 ) 
{ const char * RX10_TEMP811 = "Point X10_TEMP270 not found in the distribution X10_TEMP269." ; 
fprintf(stderr, RX10_TEMP811 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP812 = getPlaceFromDist1 ( X10_TEMP269 , RX10_TEMP808 ) ; 
const int X10_TEMP271 = RX10_TEMP812 ; 
/* async ( X10_TEMP271 )  */ 
{ const int X10_TEMP272 = /* here  */ 0 ; 
struct Dist2 X10_TEMP274 = restrictDist2 ( dFieldSpace , X10_TEMP272 ) ; 
struct Region2 RX10_TEMP813 = X10_TEMP274 .dReg ; 
struct Region2 X10_TEMP275 = RX10_TEMP813 ; 
struct Region2 rLocal = X10_TEMP275 ; 
const int X10_TEMP279 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank2D ( rLocal , X10_TEMP279 ) ; 
const int RX10_TEMP814 = rLocal1 .regSize ; 
const int RX10_TEMP815 = 0 ; 
const int RX10_TEMP816 = RX10_TEMP814 <= RX10_TEMP815 ; 
if ( RX10_TEMP816 ) 
{ const char * RX10_TEMP817 = "Operation high() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP817 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP281 = regionHigh ( rLocal1 ) ; 
const int X10_TEMP282 = 1 ; 
const double ub = X10_TEMP281 + X10_TEMP282 ; 
const int RX10_TEMP818 = rLocal1 .regSize ; 
const int RX10_TEMP819 = 0 ; 
const int RX10_TEMP820 = RX10_TEMP818 <= RX10_TEMP819 ; 
if ( RX10_TEMP820 ) 
{ const char * RX10_TEMP821 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP821 ) ; 
exit(EXIT_FAILURE);
} 

const double lb = regionLow ( rLocal1 ) ; 
const int X10_TEMP287 = 0 ; 
const int X10_TEMP288 = X10_TEMP287 ; 
struct Point1 RX10_TEMP822  ; 
Point1_Point1( &RX10_TEMP822/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP823 = outLt .distValue ; 
struct Region1 RX10_TEMP824 = RX10_TEMP823 .dReg ; 
const int RX10_TEMP825 = searchPointInRegion1 ( RX10_TEMP824 , RX10_TEMP822 ) ; 
const int RX10_TEMP826 = 0 ; 
const int RX10_TEMP827 = RX10_TEMP825 < RX10_TEMP826 ; 
if ( RX10_TEMP827 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP828 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP828 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP829 = getPlaceFromDist1 ( RX10_TEMP823 , RX10_TEMP825 ) ; 
const int RX10_TEMP831 = /* here  */ 0 ; 
const int RX10_TEMP832 = RX10_TEMP829 != RX10_TEMP831 ; 
if ( RX10_TEMP832 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP830 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP830 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP825 , X10_TEMP288 ) ; 
const int X10_TEMP291 = 0 ; 
const int X10_TEMP292 = X10_TEMP291 ; 
struct Point1 RX10_TEMP833  ; 
Point1_Point1( &RX10_TEMP833/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP834 = outRt .distValue ; 
struct Region1 RX10_TEMP835 = RX10_TEMP834 .dReg ; 
const int RX10_TEMP836 = searchPointInRegion1 ( RX10_TEMP835 , RX10_TEMP833 ) ; 
const int RX10_TEMP837 = 0 ; 
const int RX10_TEMP838 = RX10_TEMP836 < RX10_TEMP837 ; 
if ( RX10_TEMP838 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP839 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP839 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP840 = getPlaceFromDist1 ( RX10_TEMP834 , RX10_TEMP836 ) ; 
const int RX10_TEMP842 = /* here  */ 0 ; 
const int RX10_TEMP843 = RX10_TEMP840 != RX10_TEMP842 ; 
if ( RX10_TEMP843 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP841 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP841 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP836 , X10_TEMP292 ) ; 
/*UpdatableVariableDeclaration*/int belowLeft = 0 ; 
const int X10_TEMP299 = 0 ; 
struct Point1 RX10_TEMP844  ; 
Point1_Point1( &RX10_TEMP844/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP845 = inRt .distValue ; 
struct Region1 RX10_TEMP846 = RX10_TEMP845 .dReg ; 
const int RX10_TEMP847 = searchPointInRegion1 ( RX10_TEMP846 , RX10_TEMP844 ) ; 
const int RX10_TEMP848 = 0 ; 
const int RX10_TEMP849 = RX10_TEMP847 < RX10_TEMP848 ; 
if ( RX10_TEMP849 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP850 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP850 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP851 = getPlaceFromDist1 ( RX10_TEMP845 , RX10_TEMP847 ) ; 
const int RX10_TEMP853 = /* here  */ 0 ; 
const int RX10_TEMP854 = RX10_TEMP851 != RX10_TEMP853 ; 
if ( RX10_TEMP854 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP852 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP852 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP855 = getRefArrayValue1int ( inRt , RX10_TEMP847 ) ; 
const int X10_TEMP296 = RX10_TEMP855 ; 
const int X10_TEMP297 = 1 ; 
const int X10_TEMP300 = X10_TEMP296 - X10_TEMP297 ; 
struct Region1 X10_TEMP302 = createNewRegion1R ( X10_TEMP299 , X10_TEMP300 ) ; 
const int RX10_TEMP860 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP858 = X10_TEMP302 .regSize ; 
RX10_TEMP858 = RX10_TEMP858 - RX10_TEMP860 ; const int SX10_TEMP159 = 1 ; 
const int RX10_TEMP859 = RX10_TEMP858 + SX10_TEMP159 ; 
for ( int SX10_TEMP160 = 0 ; SX10_TEMP160 < RX10_TEMP859 ; SX10_TEMP160 ++ ) 
{ const int RX10_TEMP856 = SX10_TEMP160 ; 
const int RX10_TEMP861 = RX10_TEMP856 ; 
struct Point1 RX10_TEMP857 = regionOrdinalPoint1 ( X10_TEMP302 , RX10_TEMP861 ) ; 
const int i = RX10_TEMP857 .f0 ; 
struct Point2 RX10_TEMP862  ; 
Point2_Point2( &RX10_TEMP862/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP863 = rBufferR .distValue ; 
struct Region2 RX10_TEMP864 = RX10_TEMP863 .dReg ; 
const int RX10_TEMP865 = searchPointInRegion2 ( RX10_TEMP864 , RX10_TEMP862 ) ; 
const int RX10_TEMP866 = 0 ; 
const int RX10_TEMP867 = RX10_TEMP865 < RX10_TEMP866 ; 
if ( RX10_TEMP867 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP868 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP868 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP869 = getPlaceFromDist2 ( RX10_TEMP863 , RX10_TEMP865 ) ; 
const int RX10_TEMP871 = /* here  */ 0 ; 
const int RX10_TEMP872 = RX10_TEMP869 != RX10_TEMP871 ; 
if ( RX10_TEMP872 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP870 = "Bad place access for array rBufferR" ; 
fprintf(stderr, RX10_TEMP870 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP873 = getRefArrayValue2Particle ( rBufferR , RX10_TEMP865 ) ; 
struct Particle p = RX10_TEMP873 ; 
const double y = Particle_getY ( p ) ; 
const int X10_TEMP308 = y < lb ; 
if ( X10_TEMP308 ) 
{ struct Point1 RX10_TEMP874  ; 
Point1_Point1( &RX10_TEMP874/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP875 = outLt .distValue ; 
struct Region1 RX10_TEMP876 = RX10_TEMP875 .dReg ; 
const int RX10_TEMP877 = searchPointInRegion1 ( RX10_TEMP876 , RX10_TEMP874 ) ; 
const int RX10_TEMP878 = 0 ; 
const int RX10_TEMP879 = RX10_TEMP877 < RX10_TEMP878 ; 
if ( RX10_TEMP879 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP880 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP880 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP881 = getPlaceFromDist1 ( RX10_TEMP875 , RX10_TEMP877 ) ; 
const int RX10_TEMP883 = /* here  */ 0 ; 
const int RX10_TEMP884 = RX10_TEMP881 != RX10_TEMP883 ; 
if ( RX10_TEMP884 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP882 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP882 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP885 = getRefArrayValue1int ( outLt , RX10_TEMP877 ) ; 
const int X10_TEMP310 = RX10_TEMP885 ; 
const int X10_TEMP311 = 1 ; 
struct Point1 RX10_TEMP886  ; 
Point1_Point1( &RX10_TEMP886/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP887 = outLt .distValue ; 
struct Region1 RX10_TEMP888 = RX10_TEMP887 .dReg ; 
const int RX10_TEMP889 = searchPointInRegion1 ( RX10_TEMP888 , RX10_TEMP886 ) ; 
const int RX10_TEMP890 = 0 ; 
const int RX10_TEMP891 = RX10_TEMP889 < RX10_TEMP890 ; 
if ( RX10_TEMP891 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP892 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP892 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP893 = getPlaceFromDist1 ( RX10_TEMP887 , RX10_TEMP889 ) ; 
const int RX10_TEMP895 = /* here  */ 0 ; 
const int RX10_TEMP896 = RX10_TEMP893 != RX10_TEMP895 ; 
if ( RX10_TEMP896 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP894 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP894 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP897 = getRefArrayValue1int ( outLt , RX10_TEMP889 ) ; 
const int X10_TEMP312 = RX10_TEMP897 ; 
const int X10_TEMP313 = X10_TEMP312 + X10_TEMP311 ; 
struct Point1 RX10_TEMP898  ; 
Point1_Point1( &RX10_TEMP898/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP899 = outLt .distValue ; 
struct Region1 RX10_TEMP900 = RX10_TEMP899 .dReg ; 
const int RX10_TEMP901 = searchPointInRegion1 ( RX10_TEMP900 , RX10_TEMP898 ) ; 
const int RX10_TEMP902 = 0 ; 
const int RX10_TEMP903 = RX10_TEMP901 < RX10_TEMP902 ; 
if ( RX10_TEMP903 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP904 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP904 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP905 = getPlaceFromDist1 ( RX10_TEMP899 , RX10_TEMP901 ) ; 
const int RX10_TEMP907 = /* here  */ 0 ; 
const int RX10_TEMP908 = RX10_TEMP905 != RX10_TEMP907 ; 
if ( RX10_TEMP908 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP906 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP906 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP901 , X10_TEMP313 ) ; 
} 

const int X10_TEMP315 = y >= ub ; 
if ( X10_TEMP315 ) 
{ struct Point1 RX10_TEMP909  ; 
Point1_Point1( &RX10_TEMP909/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP910 = outRt .distValue ; 
struct Region1 RX10_TEMP911 = RX10_TEMP910 .dReg ; 
const int RX10_TEMP912 = searchPointInRegion1 ( RX10_TEMP911 , RX10_TEMP909 ) ; 
const int RX10_TEMP913 = 0 ; 
const int RX10_TEMP914 = RX10_TEMP912 < RX10_TEMP913 ; 
if ( RX10_TEMP914 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP915 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP915 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP916 = getPlaceFromDist1 ( RX10_TEMP910 , RX10_TEMP912 ) ; 
const int RX10_TEMP918 = /* here  */ 0 ; 
const int RX10_TEMP919 = RX10_TEMP916 != RX10_TEMP918 ; 
if ( RX10_TEMP919 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP917 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP917 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP920 = getRefArrayValue1int ( outRt , RX10_TEMP912 ) ; 
const int X10_TEMP317 = RX10_TEMP920 ; 
const int X10_TEMP318 = 1 ; 
struct Point1 RX10_TEMP921  ; 
Point1_Point1( &RX10_TEMP921/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP922 = outRt .distValue ; 
struct Region1 RX10_TEMP923 = RX10_TEMP922 .dReg ; 
const int RX10_TEMP924 = searchPointInRegion1 ( RX10_TEMP923 , RX10_TEMP921 ) ; 
const int RX10_TEMP925 = 0 ; 
const int RX10_TEMP926 = RX10_TEMP924 < RX10_TEMP925 ; 
if ( RX10_TEMP926 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP927 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP927 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP928 = getPlaceFromDist1 ( RX10_TEMP922 , RX10_TEMP924 ) ; 
const int RX10_TEMP930 = /* here  */ 0 ; 
const int RX10_TEMP931 = RX10_TEMP928 != RX10_TEMP930 ; 
if ( RX10_TEMP931 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP929 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP929 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP932 = getRefArrayValue1int ( outRt , RX10_TEMP924 ) ; 
const int X10_TEMP319 = RX10_TEMP932 ; 
const int X10_TEMP320 = X10_TEMP319 + X10_TEMP318 ; 
struct Point1 RX10_TEMP933  ; 
Point1_Point1( &RX10_TEMP933/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP934 = outRt .distValue ; 
struct Region1 RX10_TEMP935 = RX10_TEMP934 .dReg ; 
const int RX10_TEMP936 = searchPointInRegion1 ( RX10_TEMP935 , RX10_TEMP933 ) ; 
const int RX10_TEMP937 = 0 ; 
const int RX10_TEMP938 = RX10_TEMP936 < RX10_TEMP937 ; 
if ( RX10_TEMP938 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP939 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP939 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP940 = getPlaceFromDist1 ( RX10_TEMP934 , RX10_TEMP936 ) ; 
const int RX10_TEMP942 = /* here  */ 0 ; 
const int RX10_TEMP943 = RX10_TEMP940 != RX10_TEMP942 ; 
if ( RX10_TEMP943 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP941 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP941 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP936 , X10_TEMP320 ) ; 
} 

} 

struct Point1 RX10_TEMP944  ; 
Point1_Point1( &RX10_TEMP944/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP945 = outRt .distValue ; 
struct Region1 RX10_TEMP946 = RX10_TEMP945 .dReg ; 
const int RX10_TEMP947 = searchPointInRegion1 ( RX10_TEMP946 , RX10_TEMP944 ) ; 
const int RX10_TEMP948 = 0 ; 
const int RX10_TEMP949 = RX10_TEMP947 < RX10_TEMP948 ; 
if ( RX10_TEMP949 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP950 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP950 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP951 = getPlaceFromDist1 ( RX10_TEMP945 , RX10_TEMP947 ) ; 
const int RX10_TEMP953 = /* here  */ 0 ; 
const int RX10_TEMP954 = RX10_TEMP951 != RX10_TEMP953 ; 
if ( RX10_TEMP954 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP952 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP952 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP955 = getRefArrayValue1int ( outRt , RX10_TEMP947 ) ; 
const int X10_TEMP322 = RX10_TEMP955 ; 
const int X10_TEMP323 = 0 ; 
const int X10_TEMP325 = X10_TEMP322 != X10_TEMP323 ; 
if ( X10_TEMP325 ) 
{ const char * X10_TEMP327 = "Info: particles returning up" ; 
fprintf(stderr, "%s\n" , X10_TEMP327 ) ; 
} 

const int X10_TEMP333 = 0 ; 
struct Point1 RX10_TEMP956  ; 
Point1_Point1( &RX10_TEMP956/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP957 = inLt .distValue ; 
struct Region1 RX10_TEMP958 = RX10_TEMP957 .dReg ; 
const int RX10_TEMP959 = searchPointInRegion1 ( RX10_TEMP958 , RX10_TEMP956 ) ; 
const int RX10_TEMP960 = 0 ; 
const int RX10_TEMP961 = RX10_TEMP959 < RX10_TEMP960 ; 
if ( RX10_TEMP961 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP962 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP962 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP963 = getPlaceFromDist1 ( RX10_TEMP957 , RX10_TEMP959 ) ; 
const int RX10_TEMP965 = /* here  */ 0 ; 
const int RX10_TEMP966 = RX10_TEMP963 != RX10_TEMP965 ; 
if ( RX10_TEMP966 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP964 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP964 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP967 = getRefArrayValue1int ( inLt , RX10_TEMP959 ) ; 
const int X10_TEMP330 = RX10_TEMP967 ; 
const int X10_TEMP331 = 1 ; 
const int X10_TEMP334 = X10_TEMP330 - X10_TEMP331 ; 
struct Region1 X10_TEMP336 = createNewRegion1R ( X10_TEMP333 , X10_TEMP334 ) ; 
const int RX10_TEMP972 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP970 = X10_TEMP336 .regSize ; 
RX10_TEMP970 = RX10_TEMP970 - RX10_TEMP972 ; const int SX10_TEMP161 = 1 ; 
const int RX10_TEMP971 = RX10_TEMP970 + SX10_TEMP161 ; 
for ( int SX10_TEMP162 = 0 ; SX10_TEMP162 < RX10_TEMP971 ; SX10_TEMP162 ++ ) 
{ const int RX10_TEMP968 = SX10_TEMP162 ; 
const int RX10_TEMP973 = RX10_TEMP968 ; 
struct Point1 RX10_TEMP969 = regionOrdinalPoint1 ( X10_TEMP336 , RX10_TEMP973 ) ; 
const int i = RX10_TEMP969 .f0 ; 
struct Point2 RX10_TEMP974  ; 
Point2_Point2( &RX10_TEMP974/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP975 = rBufferL .distValue ; 
struct Region2 RX10_TEMP976 = RX10_TEMP975 .dReg ; 
const int RX10_TEMP977 = searchPointInRegion2 ( RX10_TEMP976 , RX10_TEMP974 ) ; 
const int RX10_TEMP978 = 0 ; 
const int RX10_TEMP979 = RX10_TEMP977 < RX10_TEMP978 ; 
if ( RX10_TEMP979 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP980 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP980 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP981 = getPlaceFromDist2 ( RX10_TEMP975 , RX10_TEMP977 ) ; 
const int RX10_TEMP983 = /* here  */ 0 ; 
const int RX10_TEMP984 = RX10_TEMP981 != RX10_TEMP983 ; 
if ( RX10_TEMP984 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP982 = "Bad place access for array rBufferL" ; 
fprintf(stderr, RX10_TEMP982 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP985 = getRefArrayValue2Particle ( rBufferL , RX10_TEMP977 ) ; 
struct Particle p = RX10_TEMP985 ; 
const double y = Particle_getY ( p ) ; 
const int X10_TEMP342 = y >= ub ; 
if ( X10_TEMP342 ) 
{ struct Point1 RX10_TEMP986  ; 
Point1_Point1( &RX10_TEMP986/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP987 = outRt .distValue ; 
struct Region1 RX10_TEMP988 = RX10_TEMP987 .dReg ; 
const int RX10_TEMP989 = searchPointInRegion1 ( RX10_TEMP988 , RX10_TEMP986 ) ; 
const int RX10_TEMP990 = 0 ; 
const int RX10_TEMP991 = RX10_TEMP989 < RX10_TEMP990 ; 
if ( RX10_TEMP991 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP992 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP992 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP993 = getPlaceFromDist1 ( RX10_TEMP987 , RX10_TEMP989 ) ; 
const int RX10_TEMP995 = /* here  */ 0 ; 
const int RX10_TEMP996 = RX10_TEMP993 != RX10_TEMP995 ; 
if ( RX10_TEMP996 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP994 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP994 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP997 = getRefArrayValue1int ( outRt , RX10_TEMP989 ) ; 
const int X10_TEMP344 = RX10_TEMP997 ; 
const int X10_TEMP345 = 1 ; 
struct Point1 RX10_TEMP998  ; 
Point1_Point1( &RX10_TEMP998/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP999 = outRt .distValue ; 
struct Region1 RX10_TEMP1000 = RX10_TEMP999 .dReg ; 
const int RX10_TEMP1001 = searchPointInRegion1 ( RX10_TEMP1000 , RX10_TEMP998 ) ; 
const int RX10_TEMP1002 = 0 ; 
const int RX10_TEMP1003 = RX10_TEMP1001 < RX10_TEMP1002 ; 
if ( RX10_TEMP1003 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1004 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1004 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1005 = getPlaceFromDist1 ( RX10_TEMP999 , RX10_TEMP1001 ) ; 
const int RX10_TEMP1007 = /* here  */ 0 ; 
const int RX10_TEMP1008 = RX10_TEMP1005 != RX10_TEMP1007 ; 
if ( RX10_TEMP1008 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1006 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1006 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1009 = getRefArrayValue1int ( outRt , RX10_TEMP1001 ) ; 
const int X10_TEMP346 = RX10_TEMP1009 ; 
const int X10_TEMP347 = X10_TEMP346 + X10_TEMP345 ; 
struct Point1 RX10_TEMP1010  ; 
Point1_Point1( &RX10_TEMP1010/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1011 = outRt .distValue ; 
struct Region1 RX10_TEMP1012 = RX10_TEMP1011 .dReg ; 
const int RX10_TEMP1013 = searchPointInRegion1 ( RX10_TEMP1012 , RX10_TEMP1010 ) ; 
const int RX10_TEMP1014 = 0 ; 
const int RX10_TEMP1015 = RX10_TEMP1013 < RX10_TEMP1014 ; 
if ( RX10_TEMP1015 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1016 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1016 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1017 = getPlaceFromDist1 ( RX10_TEMP1011 , RX10_TEMP1013 ) ; 
const int RX10_TEMP1019 = /* here  */ 0 ; 
const int RX10_TEMP1020 = RX10_TEMP1017 != RX10_TEMP1019 ; 
if ( RX10_TEMP1020 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1018 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1018 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP1013 , X10_TEMP347 ) ; 
} 

const int X10_TEMP349 = y < lb ; 
if ( X10_TEMP349 ) 
{ const int X10_TEMP350 = belowLeft ; 
const int X10_TEMP351 = 1 ; 
belowLeft = belowLeft + X10_TEMP351 ; } 

} 

const int X10_TEMP352 = 0 ; 
const int X10_TEMP354 = belowLeft != X10_TEMP352 ; 
if ( X10_TEMP354 ) 
{ const char * X10_TEMP356 = "Info: particles returning down" ; 
fprintf(stderr, "%s\n" , X10_TEMP356 ) ; 
} 

struct Point1 RX10_TEMP1021  ; 
Point1_Point1( &RX10_TEMP1021/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1022 = outLt .distValue ; 
struct Region1 RX10_TEMP1023 = RX10_TEMP1022 .dReg ; 
const int RX10_TEMP1024 = searchPointInRegion1 ( RX10_TEMP1023 , RX10_TEMP1021 ) ; 
const int RX10_TEMP1025 = 0 ; 
const int RX10_TEMP1026 = RX10_TEMP1024 < RX10_TEMP1025 ; 
if ( RX10_TEMP1026 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1027 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1027 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1028 = getPlaceFromDist1 ( RX10_TEMP1022 , RX10_TEMP1024 ) ; 
const int RX10_TEMP1030 = /* here  */ 0 ; 
const int RX10_TEMP1031 = RX10_TEMP1028 != RX10_TEMP1030 ; 
if ( RX10_TEMP1031 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1029 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1029 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1032 = getRefArrayValue1int ( outLt , RX10_TEMP1024 ) ; 
const int X10_TEMP359 = RX10_TEMP1032 ; 
const int X10_TEMP361 = X10_TEMP359 + belowLeft ; 
const int X10_TEMP362 = X10_TEMP361 ; 
struct Point1 RX10_TEMP1033  ; 
Point1_Point1( &RX10_TEMP1033/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1034 = outLt .distValue ; 
struct Region1 RX10_TEMP1035 = RX10_TEMP1034 .dReg ; 
const int RX10_TEMP1036 = searchPointInRegion1 ( RX10_TEMP1035 , RX10_TEMP1033 ) ; 
const int RX10_TEMP1037 = 0 ; 
const int RX10_TEMP1038 = RX10_TEMP1036 < RX10_TEMP1037 ; 
if ( RX10_TEMP1038 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1039 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1039 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1040 = getPlaceFromDist1 ( RX10_TEMP1034 , RX10_TEMP1036 ) ; 
const int RX10_TEMP1042 = /* here  */ 0 ; 
const int RX10_TEMP1043 = RX10_TEMP1040 != RX10_TEMP1042 ; 
if ( RX10_TEMP1043 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1041 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1041 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP1036 , X10_TEMP362 ) ; 
struct Point1 RX10_TEMP1044  ; 
Point1_Point1( &RX10_TEMP1044/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1045 = outLt .distValue ; 
struct Region1 RX10_TEMP1046 = RX10_TEMP1045 .dReg ; 
const int RX10_TEMP1047 = searchPointInRegion1 ( RX10_TEMP1046 , RX10_TEMP1044 ) ; 
const int RX10_TEMP1048 = 0 ; 
const int RX10_TEMP1049 = RX10_TEMP1047 < RX10_TEMP1048 ; 
if ( RX10_TEMP1049 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1050 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1050 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1051 = getPlaceFromDist1 ( RX10_TEMP1045 , RX10_TEMP1047 ) ; 
const int RX10_TEMP1053 = /* here  */ 0 ; 
const int RX10_TEMP1054 = RX10_TEMP1051 != RX10_TEMP1053 ; 
if ( RX10_TEMP1054 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1052 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1052 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1055 = getRefArrayValue1int ( outLt , RX10_TEMP1047 ) ; 
const int X10_TEMP366 = RX10_TEMP1055 ; 
struct Point1 RX10_TEMP1056  ; 
Point1_Point1( &RX10_TEMP1056/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1057 = outRt .distValue ; 
struct Region1 RX10_TEMP1058 = RX10_TEMP1057 .dReg ; 
const int RX10_TEMP1059 = searchPointInRegion1 ( RX10_TEMP1058 , RX10_TEMP1056 ) ; 
const int RX10_TEMP1060 = 0 ; 
const int RX10_TEMP1061 = RX10_TEMP1059 < RX10_TEMP1060 ; 
if ( RX10_TEMP1061 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1062 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1062 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1063 = getPlaceFromDist1 ( RX10_TEMP1057 , RX10_TEMP1059 ) ; 
const int RX10_TEMP1065 = /* here  */ 0 ; 
const int RX10_TEMP1066 = RX10_TEMP1063 != RX10_TEMP1065 ; 
if ( RX10_TEMP1066 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1064 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1064 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1067 = getRefArrayValue1int ( outRt , RX10_TEMP1059 ) ; 
const int X10_TEMP367 = RX10_TEMP1067 ; 
const int X10_TEMP369 = X10_TEMP366 + X10_TEMP367 ; 
const int X10_TEMP370 = X10_TEMP369 ; 
struct Point1 RX10_TEMP1068  ; 
Point1_Point1( &RX10_TEMP1068/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1069 = outgoing .distValue ; 
struct Region1 RX10_TEMP1070 = RX10_TEMP1069 .dReg ; 
const int RX10_TEMP1071 = searchPointInRegion1 ( RX10_TEMP1070 , RX10_TEMP1068 ) ; 
const int RX10_TEMP1072 = 0 ; 
const int RX10_TEMP1073 = RX10_TEMP1071 < RX10_TEMP1072 ; 
if ( RX10_TEMP1073 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1074 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1074 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1075 = getPlaceFromDist1 ( RX10_TEMP1069 , RX10_TEMP1071 ) ; 
const int RX10_TEMP1077 = /* here  */ 0 ; 
const int RX10_TEMP1078 = RX10_TEMP1075 != RX10_TEMP1077 ; 
if ( RX10_TEMP1078 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1076 = "Bad place access for array outgoing" ; 
fprintf(stderr, RX10_TEMP1076 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outgoing , RX10_TEMP1071 , X10_TEMP370 ) ; 
} 

} 

} 

const int X10_TEMP372 = 1 ; 
const int X10_TEMP374 = intrefArrayMax1 ( outgoing ) ; 
const int X10_TEMP375 = X10_TEMP374 ; 
struct Point1 RX10_TEMP1079  ; 
Point1_Point1( &RX10_TEMP1079/*Assignment*/, X10_TEMP372 ) ; 
struct Dist1 RX10_TEMP1080 = ibflg .distValue ; 
struct Region1 RX10_TEMP1081 = RX10_TEMP1080 .dReg ; 
const int RX10_TEMP1082 = searchPointInRegion1 ( RX10_TEMP1081 , RX10_TEMP1079 ) ; 
const int RX10_TEMP1083 = 0 ; 
const int RX10_TEMP1084 = RX10_TEMP1082 < RX10_TEMP1083 ; 
if ( RX10_TEMP1084 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1085 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1085 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1086 = getPlaceFromDist1 ( RX10_TEMP1080 , RX10_TEMP1082 ) ; 
const int RX10_TEMP1088 = /* here  */ 0 ; 
const int RX10_TEMP1089 = RX10_TEMP1086 != RX10_TEMP1088 ; 
if ( RX10_TEMP1089 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1087 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP1087 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( ibflg , RX10_TEMP1082 , X10_TEMP375 ) ; 
const int X10_TEMP377 = 1 ; 
struct Point1 RX10_TEMP1090  ; 
Point1_Point1( &RX10_TEMP1090/*Assignment*/, X10_TEMP377 ) ; 
struct Dist1 RX10_TEMP1091 = ibflg .distValue ; 
struct Region1 RX10_TEMP1092 = RX10_TEMP1091 .dReg ; 
const int RX10_TEMP1093 = searchPointInRegion1 ( RX10_TEMP1092 , RX10_TEMP1090 ) ; 
const int RX10_TEMP1094 = 0 ; 
const int RX10_TEMP1095 = RX10_TEMP1093 < RX10_TEMP1094 ; 
if ( RX10_TEMP1095 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1096 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1096 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1097 = getPlaceFromDist1 ( RX10_TEMP1091 , RX10_TEMP1093 ) ; 
const int RX10_TEMP1099 = /* here  */ 0 ; 
const int RX10_TEMP1100 = RX10_TEMP1097 != RX10_TEMP1099 ; 
if ( RX10_TEMP1100 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1098 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP1098 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1101 = getRefArrayValue1int ( ibflg , RX10_TEMP1093 ) ; 
const int X10_TEMP378 = RX10_TEMP1101 ; 
const int X10_TEMP379 = 0 ; 
const int X10_TEMP381 = X10_TEMP378 != X10_TEMP379 ; 
if ( X10_TEMP381 ) 
{ /* finish  */ 
{ struct Dist1 X10_TEMP383 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1103 = X10_TEMP383 .dReg ; 
const int RX10_TEMP1106 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1104 = RX10_TEMP1103 .regSize ; 
RX10_TEMP1104 = RX10_TEMP1104 - RX10_TEMP1106 ; const int SX10_TEMP163 = 1 ; 
const int RX10_TEMP1105 = RX10_TEMP1104 + SX10_TEMP163 ; 
for ( int SX10_TEMP164 = 0 ; SX10_TEMP164 < RX10_TEMP1105 ; SX10_TEMP164 ++ ) 
{ const int RX10_TEMP1102 = SX10_TEMP164 ; 
const int RX10_TEMP1107 = RX10_TEMP1102 ; 
struct Point1 X10_TEMP384 = regionOrdinalPoint1 ( RX10_TEMP1103 , RX10_TEMP1107 ) ; 
const int pl = X10_TEMP384 .f0 ; 
struct Region1 RX10_TEMP1108 = X10_TEMP383 .dReg ; 
const int RX10_TEMP1109 = searchPointInRegion1 ( RX10_TEMP1108 , X10_TEMP384 ) ; 
const int RX10_TEMP1110 = 0 ; 
const int RX10_TEMP1111 = RX10_TEMP1109 < RX10_TEMP1110 ; 
if ( RX10_TEMP1111 ) 
{ const char * RX10_TEMP1112 = "Point X10_TEMP384 not found in the distribution X10_TEMP383." ; 
fprintf(stderr, RX10_TEMP1112 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1113 = getPlaceFromDist1 ( X10_TEMP383 , RX10_TEMP1109 ) ; 
const int X10_TEMP385 = RX10_TEMP1113 ; 
/* async ( X10_TEMP385 )  */ 
{ const int X10_TEMP386 = /* here  */ 0 ; 
struct Dist2 X10_TEMP388 = restrictDist2 ( dFieldSpace , X10_TEMP386 ) ; 
struct Region2 RX10_TEMP1114 = X10_TEMP388 .dReg ; 
struct Region2 X10_TEMP389 = RX10_TEMP1114 ; 
struct Region2 rLocal = X10_TEMP389 ; 
const int X10_TEMP393 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank2D ( rLocal , X10_TEMP393 ) ; 
const int RX10_TEMP1115 = rLocal1 .regSize ; 
const int RX10_TEMP1116 = 0 ; 
const int RX10_TEMP1117 = RX10_TEMP1115 <= RX10_TEMP1116 ; 
if ( RX10_TEMP1117 ) 
{ const char * RX10_TEMP1118 = "Operation high() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP1118 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP395 = regionHigh ( rLocal1 ) ; 
const int X10_TEMP396 = 1 ; 
const double ub = X10_TEMP395 + X10_TEMP396 ; 
const int RX10_TEMP1119 = rLocal1 .regSize ; 
const int RX10_TEMP1120 = 0 ; 
const int RX10_TEMP1121 = RX10_TEMP1119 <= RX10_TEMP1120 ; 
if ( RX10_TEMP1121 ) 
{ const char * RX10_TEMP1122 = "Operation low() not defined on empty region rLocal1" ; 
fprintf(stderr, RX10_TEMP1122 ) ; 
exit(EXIT_FAILURE);
} 

const double lb = regionLow ( rLocal1 ) ; 
const int X10_TEMP401 = 0 ; 
const int X10_TEMP402 = X10_TEMP401 ; 
struct Point1 RX10_TEMP1123  ; 
Point1_Point1( &RX10_TEMP1123/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1124 = outLt .distValue ; 
struct Region1 RX10_TEMP1125 = RX10_TEMP1124 .dReg ; 
const int RX10_TEMP1126 = searchPointInRegion1 ( RX10_TEMP1125 , RX10_TEMP1123 ) ; 
const int RX10_TEMP1127 = 0 ; 
const int RX10_TEMP1128 = RX10_TEMP1126 < RX10_TEMP1127 ; 
if ( RX10_TEMP1128 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1129 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1129 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1130 = getPlaceFromDist1 ( RX10_TEMP1124 , RX10_TEMP1126 ) ; 
const int RX10_TEMP1132 = /* here  */ 0 ; 
const int RX10_TEMP1133 = RX10_TEMP1130 != RX10_TEMP1132 ; 
if ( RX10_TEMP1133 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1131 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1131 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP1126 , X10_TEMP402 ) ; 
const int X10_TEMP405 = 0 ; 
const int X10_TEMP406 = X10_TEMP405 ; 
struct Point1 RX10_TEMP1134  ; 
Point1_Point1( &RX10_TEMP1134/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1135 = outRt .distValue ; 
struct Region1 RX10_TEMP1136 = RX10_TEMP1135 .dReg ; 
const int RX10_TEMP1137 = searchPointInRegion1 ( RX10_TEMP1136 , RX10_TEMP1134 ) ; 
const int RX10_TEMP1138 = 0 ; 
const int RX10_TEMP1139 = RX10_TEMP1137 < RX10_TEMP1138 ; 
if ( RX10_TEMP1139 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1140 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1140 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1141 = getPlaceFromDist1 ( RX10_TEMP1135 , RX10_TEMP1137 ) ; 
const int RX10_TEMP1143 = /* here  */ 0 ; 
const int RX10_TEMP1144 = RX10_TEMP1141 != RX10_TEMP1143 ; 
if ( RX10_TEMP1144 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1142 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1142 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP1137 , X10_TEMP406 ) ; 
const int X10_TEMP409 = 0 ; 
const int X10_TEMP410 = X10_TEMP409 ; 
struct Point1 RX10_TEMP1145  ; 
Point1_Point1( &RX10_TEMP1145/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1146 = overflow .distValue ; 
struct Region1 RX10_TEMP1147 = RX10_TEMP1146 .dReg ; 
const int RX10_TEMP1148 = searchPointInRegion1 ( RX10_TEMP1147 , RX10_TEMP1145 ) ; 
const int RX10_TEMP1149 = 0 ; 
const int RX10_TEMP1150 = RX10_TEMP1148 < RX10_TEMP1149 ; 
if ( RX10_TEMP1150 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1151 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1151 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1152 = getPlaceFromDist1 ( RX10_TEMP1146 , RX10_TEMP1148 ) ; 
const int RX10_TEMP1154 = /* here  */ 0 ; 
const int RX10_TEMP1155 = RX10_TEMP1152 != RX10_TEMP1154 ; 
if ( RX10_TEMP1155 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1153 = "Bad place access for array overflow" ; 
fprintf(stderr, RX10_TEMP1153 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( overflow , RX10_TEMP1148 , X10_TEMP410 ) ; 
/*UpdatableVariableDeclaration*/int inRightStaying = 0 ; 
const int X10_TEMP417 = 0 ; 
struct Point1 RX10_TEMP1156  ; 
Point1_Point1( &RX10_TEMP1156/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1157 = inRt .distValue ; 
struct Region1 RX10_TEMP1158 = RX10_TEMP1157 .dReg ; 
const int RX10_TEMP1159 = searchPointInRegion1 ( RX10_TEMP1158 , RX10_TEMP1156 ) ; 
const int RX10_TEMP1160 = 0 ; 
const int RX10_TEMP1161 = RX10_TEMP1159 < RX10_TEMP1160 ; 
if ( RX10_TEMP1161 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1162 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1162 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1163 = getPlaceFromDist1 ( RX10_TEMP1157 , RX10_TEMP1159 ) ; 
const int RX10_TEMP1165 = /* here  */ 0 ; 
const int RX10_TEMP1166 = RX10_TEMP1163 != RX10_TEMP1165 ; 
if ( RX10_TEMP1166 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1164 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1164 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1167 = getRefArrayValue1int ( inRt , RX10_TEMP1159 ) ; 
const int X10_TEMP414 = RX10_TEMP1167 ; 
const int X10_TEMP415 = 1 ; 
const int X10_TEMP418 = X10_TEMP414 - X10_TEMP415 ; 
struct Region1 X10_TEMP420 = createNewRegion1R ( X10_TEMP417 , X10_TEMP418 ) ; 
const int RX10_TEMP1172 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1170 = X10_TEMP420 .regSize ; 
RX10_TEMP1170 = RX10_TEMP1170 - RX10_TEMP1172 ; const int SX10_TEMP165 = 1 ; 
const int RX10_TEMP1171 = RX10_TEMP1170 + SX10_TEMP165 ; 
for ( int SX10_TEMP166 = 0 ; SX10_TEMP166 < RX10_TEMP1171 ; SX10_TEMP166 ++ ) 
{ const int RX10_TEMP1168 = SX10_TEMP166 ; 
const int RX10_TEMP1173 = RX10_TEMP1168 ; 
struct Point1 RX10_TEMP1169 = regionOrdinalPoint1 ( X10_TEMP420 , RX10_TEMP1173 ) ; 
const int i = RX10_TEMP1169 .f0 ; 
struct Point2 RX10_TEMP1174  ; 
Point2_Point2( &RX10_TEMP1174/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1175 = rBufferR .distValue ; 
struct Region2 RX10_TEMP1176 = RX10_TEMP1175 .dReg ; 
const int RX10_TEMP1177 = searchPointInRegion2 ( RX10_TEMP1176 , RX10_TEMP1174 ) ; 
const int RX10_TEMP1178 = 0 ; 
const int RX10_TEMP1179 = RX10_TEMP1177 < RX10_TEMP1178 ; 
if ( RX10_TEMP1179 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1180 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1180 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1181 = getPlaceFromDist2 ( RX10_TEMP1175 , RX10_TEMP1177 ) ; 
const int RX10_TEMP1183 = /* here  */ 0 ; 
const int RX10_TEMP1184 = RX10_TEMP1181 != RX10_TEMP1183 ; 
if ( RX10_TEMP1184 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1182 = "Bad place access for array rBufferR" ; 
fprintf(stderr, RX10_TEMP1182 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP1185 = getRefArrayValue2Particle ( rBufferR , RX10_TEMP1177 ) ; 
struct Particle p = RX10_TEMP1185 ; 
/*UpdatableVariableDeclaration*/double y = Particle_getY ( p ) ; 
const int X10_TEMP426 = y < lb ; 
if ( X10_TEMP426 ) 
{ const int X10_TEMP427 = /* here  */ 0 ; 
const int X10_TEMP429 = /* X10_TEMP427 . isFirst ( )  */ 1 ; 
if ( X10_TEMP429 ) 
{ const double X10_TEMP431 = y + rsize ; 
y = X10_TEMP431 ; } 

struct Point1 RX10_TEMP1186  ; 
Point1_Point1( &RX10_TEMP1186/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1187 = outLt .distValue ; 
struct Region1 RX10_TEMP1188 = RX10_TEMP1187 .dReg ; 
const int RX10_TEMP1189 = searchPointInRegion1 ( RX10_TEMP1188 , RX10_TEMP1186 ) ; 
const int RX10_TEMP1190 = 0 ; 
const int RX10_TEMP1191 = RX10_TEMP1189 < RX10_TEMP1190 ; 
if ( RX10_TEMP1191 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1192 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1192 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1193 = getPlaceFromDist1 ( RX10_TEMP1187 , RX10_TEMP1189 ) ; 
const int RX10_TEMP1195 = /* here  */ 0 ; 
const int RX10_TEMP1196 = RX10_TEMP1193 != RX10_TEMP1195 ; 
if ( RX10_TEMP1196 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1194 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1194 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1197 = getRefArrayValue1int ( outLt , RX10_TEMP1189 ) ; 
const int X10_TEMP435 = RX10_TEMP1197 ; 
struct Particle X10_TEMP438 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP439 = X10_TEMP438 ; 
struct Point2 RX10_TEMP1198  ; 
Point2_Point2( &RX10_TEMP1198/*Assignment*/, pl , X10_TEMP435 ) ; 
struct Dist2 RX10_TEMP1199 = sBufferL .distValue ; 
struct Region2 RX10_TEMP1200 = RX10_TEMP1199 .dReg ; 
const int RX10_TEMP1201 = searchPointInRegion2 ( RX10_TEMP1200 , RX10_TEMP1198 ) ; 
const int RX10_TEMP1202 = 0 ; 
const int RX10_TEMP1203 = RX10_TEMP1201 < RX10_TEMP1202 ; 
if ( RX10_TEMP1203 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1204 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1204 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1205 = getPlaceFromDist2 ( RX10_TEMP1199 , RX10_TEMP1201 ) ; 
const int RX10_TEMP1207 = /* here  */ 0 ; 
const int RX10_TEMP1208 = RX10_TEMP1205 != RX10_TEMP1207 ; 
if ( RX10_TEMP1208 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1206 = "Bad place access for array sBufferL" ; 
fprintf(stderr, RX10_TEMP1206 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferL , RX10_TEMP1201 , X10_TEMP439 ) ; 
struct Point1 RX10_TEMP1209  ; 
Point1_Point1( &RX10_TEMP1209/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1210 = outLt .distValue ; 
struct Region1 RX10_TEMP1211 = RX10_TEMP1210 .dReg ; 
const int RX10_TEMP1212 = searchPointInRegion1 ( RX10_TEMP1211 , RX10_TEMP1209 ) ; 
const int RX10_TEMP1213 = 0 ; 
const int RX10_TEMP1214 = RX10_TEMP1212 < RX10_TEMP1213 ; 
if ( RX10_TEMP1214 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1215 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1215 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1216 = getPlaceFromDist1 ( RX10_TEMP1210 , RX10_TEMP1212 ) ; 
const int RX10_TEMP1218 = /* here  */ 0 ; 
const int RX10_TEMP1219 = RX10_TEMP1216 != RX10_TEMP1218 ; 
if ( RX10_TEMP1219 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1217 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1217 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1220 = getRefArrayValue1int ( outLt , RX10_TEMP1212 ) ; 
const int X10_TEMP441 = RX10_TEMP1220 ; 
const int X10_TEMP442 = 1 ; 
struct Point1 RX10_TEMP1221  ; 
Point1_Point1( &RX10_TEMP1221/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1222 = outLt .distValue ; 
struct Region1 RX10_TEMP1223 = RX10_TEMP1222 .dReg ; 
const int RX10_TEMP1224 = searchPointInRegion1 ( RX10_TEMP1223 , RX10_TEMP1221 ) ; 
const int RX10_TEMP1225 = 0 ; 
const int RX10_TEMP1226 = RX10_TEMP1224 < RX10_TEMP1225 ; 
if ( RX10_TEMP1226 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1227 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1227 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1228 = getPlaceFromDist1 ( RX10_TEMP1222 , RX10_TEMP1224 ) ; 
const int RX10_TEMP1230 = /* here  */ 0 ; 
const int RX10_TEMP1231 = RX10_TEMP1228 != RX10_TEMP1230 ; 
if ( RX10_TEMP1231 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1229 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1229 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1232 = getRefArrayValue1int ( outLt , RX10_TEMP1224 ) ; 
const int X10_TEMP443 = RX10_TEMP1232 ; 
const int X10_TEMP444 = X10_TEMP443 + X10_TEMP442 ; 
struct Point1 RX10_TEMP1233  ; 
Point1_Point1( &RX10_TEMP1233/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1234 = outLt .distValue ; 
struct Region1 RX10_TEMP1235 = RX10_TEMP1234 .dReg ; 
const int RX10_TEMP1236 = searchPointInRegion1 ( RX10_TEMP1235 , RX10_TEMP1233 ) ; 
const int RX10_TEMP1237 = 0 ; 
const int RX10_TEMP1238 = RX10_TEMP1236 < RX10_TEMP1237 ; 
if ( RX10_TEMP1238 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1239 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1239 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1240 = getPlaceFromDist1 ( RX10_TEMP1234 , RX10_TEMP1236 ) ; 
const int RX10_TEMP1242 = /* here  */ 0 ; 
const int RX10_TEMP1243 = RX10_TEMP1240 != RX10_TEMP1242 ; 
if ( RX10_TEMP1243 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1241 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1241 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP1236 , X10_TEMP444 ) ; 
} 
else 
{ const int X10_TEMP446 = y >= ub ; 
if ( X10_TEMP446 ) 
{ const char * X10_TEMP447 = "Particle returning up -- " ; 
const char * X10_TEMP448 = "should not happen: " ; 
/*ASSIGNMENT STRING*/
 char * tempC73 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC73, "%s%s",X10_TEMP447,X10_TEMP448);
const char * X10_TEMP449 = tempC73;; 
const char * X10_TEMP450 = Particle_toString ( p ) ; 
/*ASSIGNMENT STRING*/
 char * tempC74 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC74, "%s%s",X10_TEMP449,X10_TEMP450);
const char * X10_TEMP452 = tempC74;; 
fprintf(stderr, "%s\n" , X10_TEMP452 ) ; 
const int X10_TEMP453 = /* here  */ 0 ; 
const int X10_TEMP455 = /* X10_TEMP453 . isLast ( )  */ 1 ; 
if ( X10_TEMP455 ) 
{ const double X10_TEMP457 = y - rsize ; 
y = X10_TEMP457 ; } 

struct Point1 RX10_TEMP1244  ; 
Point1_Point1( &RX10_TEMP1244/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1245 = outRt .distValue ; 
struct Region1 RX10_TEMP1246 = RX10_TEMP1245 .dReg ; 
const int RX10_TEMP1247 = searchPointInRegion1 ( RX10_TEMP1246 , RX10_TEMP1244 ) ; 
const int RX10_TEMP1248 = 0 ; 
const int RX10_TEMP1249 = RX10_TEMP1247 < RX10_TEMP1248 ; 
if ( RX10_TEMP1249 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1250 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1250 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1251 = getPlaceFromDist1 ( RX10_TEMP1245 , RX10_TEMP1247 ) ; 
const int RX10_TEMP1253 = /* here  */ 0 ; 
const int RX10_TEMP1254 = RX10_TEMP1251 != RX10_TEMP1253 ; 
if ( RX10_TEMP1254 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1252 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1252 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1255 = getRefArrayValue1int ( outRt , RX10_TEMP1247 ) ; 
const int X10_TEMP461 = RX10_TEMP1255 ; 
struct Particle X10_TEMP464 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP465 = X10_TEMP464 ; 
struct Point2 RX10_TEMP1256  ; 
Point2_Point2( &RX10_TEMP1256/*Assignment*/, pl , X10_TEMP461 ) ; 
struct Dist2 RX10_TEMP1257 = sBufferR .distValue ; 
struct Region2 RX10_TEMP1258 = RX10_TEMP1257 .dReg ; 
const int RX10_TEMP1259 = searchPointInRegion2 ( RX10_TEMP1258 , RX10_TEMP1256 ) ; 
const int RX10_TEMP1260 = 0 ; 
const int RX10_TEMP1261 = RX10_TEMP1259 < RX10_TEMP1260 ; 
if ( RX10_TEMP1261 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1262 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1262 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1263 = getPlaceFromDist2 ( RX10_TEMP1257 , RX10_TEMP1259 ) ; 
const int RX10_TEMP1265 = /* here  */ 0 ; 
const int RX10_TEMP1266 = RX10_TEMP1263 != RX10_TEMP1265 ; 
if ( RX10_TEMP1266 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1264 = "Bad place access for array sBufferR" ; 
fprintf(stderr, RX10_TEMP1264 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferR , RX10_TEMP1259 , X10_TEMP465 ) ; 
struct Point1 RX10_TEMP1267  ; 
Point1_Point1( &RX10_TEMP1267/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1268 = outRt .distValue ; 
struct Region1 RX10_TEMP1269 = RX10_TEMP1268 .dReg ; 
const int RX10_TEMP1270 = searchPointInRegion1 ( RX10_TEMP1269 , RX10_TEMP1267 ) ; 
const int RX10_TEMP1271 = 0 ; 
const int RX10_TEMP1272 = RX10_TEMP1270 < RX10_TEMP1271 ; 
if ( RX10_TEMP1272 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1273 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1273 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1274 = getPlaceFromDist1 ( RX10_TEMP1268 , RX10_TEMP1270 ) ; 
const int RX10_TEMP1276 = /* here  */ 0 ; 
const int RX10_TEMP1277 = RX10_TEMP1274 != RX10_TEMP1276 ; 
if ( RX10_TEMP1277 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1275 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1275 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1278 = getRefArrayValue1int ( outRt , RX10_TEMP1270 ) ; 
const int X10_TEMP467 = RX10_TEMP1278 ; 
const int X10_TEMP468 = 1 ; 
struct Point1 RX10_TEMP1279  ; 
Point1_Point1( &RX10_TEMP1279/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1280 = outRt .distValue ; 
struct Region1 RX10_TEMP1281 = RX10_TEMP1280 .dReg ; 
const int RX10_TEMP1282 = searchPointInRegion1 ( RX10_TEMP1281 , RX10_TEMP1279 ) ; 
const int RX10_TEMP1283 = 0 ; 
const int RX10_TEMP1284 = RX10_TEMP1282 < RX10_TEMP1283 ; 
if ( RX10_TEMP1284 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1285 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1285 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1286 = getPlaceFromDist1 ( RX10_TEMP1280 , RX10_TEMP1282 ) ; 
const int RX10_TEMP1288 = /* here  */ 0 ; 
const int RX10_TEMP1289 = RX10_TEMP1286 != RX10_TEMP1288 ; 
if ( RX10_TEMP1289 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1287 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1287 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1290 = getRefArrayValue1int ( outRt , RX10_TEMP1282 ) ; 
const int X10_TEMP469 = RX10_TEMP1290 ; 
const int X10_TEMP470 = X10_TEMP469 + X10_TEMP468 ; 
struct Point1 RX10_TEMP1291  ; 
Point1_Point1( &RX10_TEMP1291/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1292 = outRt .distValue ; 
struct Region1 RX10_TEMP1293 = RX10_TEMP1292 .dReg ; 
const int RX10_TEMP1294 = searchPointInRegion1 ( RX10_TEMP1293 , RX10_TEMP1291 ) ; 
const int RX10_TEMP1295 = 0 ; 
const int RX10_TEMP1296 = RX10_TEMP1294 < RX10_TEMP1295 ; 
if ( RX10_TEMP1296 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1297 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1297 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1298 = getPlaceFromDist1 ( RX10_TEMP1292 , RX10_TEMP1294 ) ; 
const int RX10_TEMP1300 = /* here  */ 0 ; 
const int RX10_TEMP1301 = RX10_TEMP1298 != RX10_TEMP1300 ; 
if ( RX10_TEMP1301 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1299 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1299 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP1294 , X10_TEMP470 ) ; 
} 
else 
{ struct Particle X10_TEMP474 = p ; 
struct Point2 RX10_TEMP1302  ; 
Point2_Point2( &RX10_TEMP1302/*Assignment*/, pl , inRightStaying ) ; 
struct Dist2 RX10_TEMP1303 = rBufferR .distValue ; 
struct Region2 RX10_TEMP1304 = RX10_TEMP1303 .dReg ; 
const int RX10_TEMP1305 = searchPointInRegion2 ( RX10_TEMP1304 , RX10_TEMP1302 ) ; 
const int RX10_TEMP1306 = 0 ; 
const int RX10_TEMP1307 = RX10_TEMP1305 < RX10_TEMP1306 ; 
if ( RX10_TEMP1307 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1308 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1308 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1309 = getPlaceFromDist2 ( RX10_TEMP1303 , RX10_TEMP1305 ) ; 
const int RX10_TEMP1311 = /* here  */ 0 ; 
const int RX10_TEMP1312 = RX10_TEMP1309 != RX10_TEMP1311 ; 
if ( RX10_TEMP1312 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1310 = "Bad place access for array rBufferR" ; 
fprintf(stderr, RX10_TEMP1310 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( rBufferR , RX10_TEMP1305 , X10_TEMP474 ) ; 
const int X10_TEMP475 = inRightStaying ; 
const int X10_TEMP476 = 1 ; 
inRightStaying = inRightStaying + X10_TEMP476 ; } 


} 


} 

const int X10_TEMP479 = inRightStaying ; 
struct Point1 RX10_TEMP1313  ; 
Point1_Point1( &RX10_TEMP1313/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1314 = inRt .distValue ; 
struct Region1 RX10_TEMP1315 = RX10_TEMP1314 .dReg ; 
const int RX10_TEMP1316 = searchPointInRegion1 ( RX10_TEMP1315 , RX10_TEMP1313 ) ; 
const int RX10_TEMP1317 = 0 ; 
const int RX10_TEMP1318 = RX10_TEMP1316 < RX10_TEMP1317 ; 
if ( RX10_TEMP1318 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1319 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1319 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1320 = getPlaceFromDist1 ( RX10_TEMP1314 , RX10_TEMP1316 ) ; 
const int RX10_TEMP1322 = /* here  */ 0 ; 
const int RX10_TEMP1323 = RX10_TEMP1320 != RX10_TEMP1322 ; 
if ( RX10_TEMP1323 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1321 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1321 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP1316 , X10_TEMP479 ) ; 
/*UpdatableVariableDeclaration*/int inLeftStaying = 0 ; 
const int X10_TEMP486 = 0 ; 
struct Point1 RX10_TEMP1324  ; 
Point1_Point1( &RX10_TEMP1324/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1325 = inLt .distValue ; 
struct Region1 RX10_TEMP1326 = RX10_TEMP1325 .dReg ; 
const int RX10_TEMP1327 = searchPointInRegion1 ( RX10_TEMP1326 , RX10_TEMP1324 ) ; 
const int RX10_TEMP1328 = 0 ; 
const int RX10_TEMP1329 = RX10_TEMP1327 < RX10_TEMP1328 ; 
if ( RX10_TEMP1329 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1330 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1330 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1331 = getPlaceFromDist1 ( RX10_TEMP1325 , RX10_TEMP1327 ) ; 
const int RX10_TEMP1333 = /* here  */ 0 ; 
const int RX10_TEMP1334 = RX10_TEMP1331 != RX10_TEMP1333 ; 
if ( RX10_TEMP1334 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1332 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP1332 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1335 = getRefArrayValue1int ( inLt , RX10_TEMP1327 ) ; 
const int X10_TEMP483 = RX10_TEMP1335 ; 
const int X10_TEMP484 = 1 ; 
const int X10_TEMP487 = X10_TEMP483 - X10_TEMP484 ; 
struct Region1 X10_TEMP489 = createNewRegion1R ( X10_TEMP486 , X10_TEMP487 ) ; 
const int RX10_TEMP1340 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1338 = X10_TEMP489 .regSize ; 
RX10_TEMP1338 = RX10_TEMP1338 - RX10_TEMP1340 ; const int SX10_TEMP167 = 1 ; 
const int RX10_TEMP1339 = RX10_TEMP1338 + SX10_TEMP167 ; 
for ( int SX10_TEMP168 = 0 ; SX10_TEMP168 < RX10_TEMP1339 ; SX10_TEMP168 ++ ) 
{ const int RX10_TEMP1336 = SX10_TEMP168 ; 
const int RX10_TEMP1341 = RX10_TEMP1336 ; 
struct Point1 RX10_TEMP1337 = regionOrdinalPoint1 ( X10_TEMP489 , RX10_TEMP1341 ) ; 
const int i = RX10_TEMP1337 .f0 ; 
struct Point2 RX10_TEMP1342  ; 
Point2_Point2( &RX10_TEMP1342/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1343 = rBufferL .distValue ; 
struct Region2 RX10_TEMP1344 = RX10_TEMP1343 .dReg ; 
const int RX10_TEMP1345 = searchPointInRegion2 ( RX10_TEMP1344 , RX10_TEMP1342 ) ; 
const int RX10_TEMP1346 = 0 ; 
const int RX10_TEMP1347 = RX10_TEMP1345 < RX10_TEMP1346 ; 
if ( RX10_TEMP1347 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1348 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1348 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1349 = getPlaceFromDist2 ( RX10_TEMP1343 , RX10_TEMP1345 ) ; 
const int RX10_TEMP1351 = /* here  */ 0 ; 
const int RX10_TEMP1352 = RX10_TEMP1349 != RX10_TEMP1351 ; 
if ( RX10_TEMP1352 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1350 = "Bad place access for array rBufferL" ; 
fprintf(stderr, RX10_TEMP1350 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP1353 = getRefArrayValue2Particle ( rBufferL , RX10_TEMP1345 ) ; 
struct Particle p = RX10_TEMP1353 ; 
/*UpdatableVariableDeclaration*/double y = Particle_getY ( p ) ; 
const int X10_TEMP495 = y >= ub ; 
if ( X10_TEMP495 ) 
{ struct Point1 RX10_TEMP1354  ; 
Point1_Point1( &RX10_TEMP1354/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1355 = outRt .distValue ; 
struct Region1 RX10_TEMP1356 = RX10_TEMP1355 .dReg ; 
const int RX10_TEMP1357 = searchPointInRegion1 ( RX10_TEMP1356 , RX10_TEMP1354 ) ; 
const int RX10_TEMP1358 = 0 ; 
const int RX10_TEMP1359 = RX10_TEMP1357 < RX10_TEMP1358 ; 
if ( RX10_TEMP1359 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1360 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1360 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1361 = getPlaceFromDist1 ( RX10_TEMP1355 , RX10_TEMP1357 ) ; 
const int RX10_TEMP1363 = /* here  */ 0 ; 
const int RX10_TEMP1364 = RX10_TEMP1361 != RX10_TEMP1363 ; 
if ( RX10_TEMP1364 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1362 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1362 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1365 = getRefArrayValue1int ( outRt , RX10_TEMP1357 ) ; 
const int X10_TEMP497 = RX10_TEMP1365 ; 
const int X10_TEMP498 = rBuffer .regSize ; 
const int X10_TEMP500 = X10_TEMP497 < X10_TEMP498 ; 
if ( X10_TEMP500 ) 
{ const int X10_TEMP501 = /* here  */ 0 ; 
const int X10_TEMP503 = /* X10_TEMP501 . isLast ( )  */ 1 ; 
if ( X10_TEMP503 ) 
{ const double X10_TEMP505 = y - rsize ; 
y = X10_TEMP505 ; } 

struct Point1 RX10_TEMP1366  ; 
Point1_Point1( &RX10_TEMP1366/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1367 = outRt .distValue ; 
struct Region1 RX10_TEMP1368 = RX10_TEMP1367 .dReg ; 
const int RX10_TEMP1369 = searchPointInRegion1 ( RX10_TEMP1368 , RX10_TEMP1366 ) ; 
const int RX10_TEMP1370 = 0 ; 
const int RX10_TEMP1371 = RX10_TEMP1369 < RX10_TEMP1370 ; 
if ( RX10_TEMP1371 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1372 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1372 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1373 = getPlaceFromDist1 ( RX10_TEMP1367 , RX10_TEMP1369 ) ; 
const int RX10_TEMP1375 = /* here  */ 0 ; 
const int RX10_TEMP1376 = RX10_TEMP1373 != RX10_TEMP1375 ; 
if ( RX10_TEMP1376 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1374 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1374 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1377 = getRefArrayValue1int ( outRt , RX10_TEMP1369 ) ; 
const int X10_TEMP509 = RX10_TEMP1377 ; 
struct Particle X10_TEMP512 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP513 = X10_TEMP512 ; 
struct Point2 RX10_TEMP1378  ; 
Point2_Point2( &RX10_TEMP1378/*Assignment*/, pl , X10_TEMP509 ) ; 
struct Dist2 RX10_TEMP1379 = sBufferR .distValue ; 
struct Region2 RX10_TEMP1380 = RX10_TEMP1379 .dReg ; 
const int RX10_TEMP1381 = searchPointInRegion2 ( RX10_TEMP1380 , RX10_TEMP1378 ) ; 
const int RX10_TEMP1382 = 0 ; 
const int RX10_TEMP1383 = RX10_TEMP1381 < RX10_TEMP1382 ; 
if ( RX10_TEMP1383 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1384 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1384 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1385 = getPlaceFromDist2 ( RX10_TEMP1379 , RX10_TEMP1381 ) ; 
const int RX10_TEMP1387 = /* here  */ 0 ; 
const int RX10_TEMP1388 = RX10_TEMP1385 != RX10_TEMP1387 ; 
if ( RX10_TEMP1388 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1386 = "Bad place access for array sBufferR" ; 
fprintf(stderr, RX10_TEMP1386 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferR , RX10_TEMP1381 , X10_TEMP513 ) ; 
struct Point1 RX10_TEMP1389  ; 
Point1_Point1( &RX10_TEMP1389/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1390 = outRt .distValue ; 
struct Region1 RX10_TEMP1391 = RX10_TEMP1390 .dReg ; 
const int RX10_TEMP1392 = searchPointInRegion1 ( RX10_TEMP1391 , RX10_TEMP1389 ) ; 
const int RX10_TEMP1393 = 0 ; 
const int RX10_TEMP1394 = RX10_TEMP1392 < RX10_TEMP1393 ; 
if ( RX10_TEMP1394 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1395 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1395 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1396 = getPlaceFromDist1 ( RX10_TEMP1390 , RX10_TEMP1392 ) ; 
const int RX10_TEMP1398 = /* here  */ 0 ; 
const int RX10_TEMP1399 = RX10_TEMP1396 != RX10_TEMP1398 ; 
if ( RX10_TEMP1399 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1397 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1397 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1400 = getRefArrayValue1int ( outRt , RX10_TEMP1392 ) ; 
const int X10_TEMP515 = RX10_TEMP1400 ; 
const int X10_TEMP516 = 1 ; 
struct Point1 RX10_TEMP1401  ; 
Point1_Point1( &RX10_TEMP1401/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1402 = outRt .distValue ; 
struct Region1 RX10_TEMP1403 = RX10_TEMP1402 .dReg ; 
const int RX10_TEMP1404 = searchPointInRegion1 ( RX10_TEMP1403 , RX10_TEMP1401 ) ; 
const int RX10_TEMP1405 = 0 ; 
const int RX10_TEMP1406 = RX10_TEMP1404 < RX10_TEMP1405 ; 
if ( RX10_TEMP1406 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1407 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1407 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1408 = getPlaceFromDist1 ( RX10_TEMP1402 , RX10_TEMP1404 ) ; 
const int RX10_TEMP1410 = /* here  */ 0 ; 
const int RX10_TEMP1411 = RX10_TEMP1408 != RX10_TEMP1410 ; 
if ( RX10_TEMP1411 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1409 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1409 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1412 = getRefArrayValue1int ( outRt , RX10_TEMP1404 ) ; 
const int X10_TEMP517 = RX10_TEMP1412 ; 
const int X10_TEMP518 = X10_TEMP517 + X10_TEMP516 ; 
struct Point1 RX10_TEMP1413  ; 
Point1_Point1( &RX10_TEMP1413/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1414 = outRt .distValue ; 
struct Region1 RX10_TEMP1415 = RX10_TEMP1414 .dReg ; 
const int RX10_TEMP1416 = searchPointInRegion1 ( RX10_TEMP1415 , RX10_TEMP1413 ) ; 
const int RX10_TEMP1417 = 0 ; 
const int RX10_TEMP1418 = RX10_TEMP1416 < RX10_TEMP1417 ; 
if ( RX10_TEMP1418 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1419 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1419 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1420 = getPlaceFromDist1 ( RX10_TEMP1414 , RX10_TEMP1416 ) ; 
const int RX10_TEMP1422 = /* here  */ 0 ; 
const int RX10_TEMP1423 = RX10_TEMP1420 != RX10_TEMP1422 ; 
if ( RX10_TEMP1423 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1421 = "Bad place access for array outRt" ; 
fprintf(stderr, RX10_TEMP1421 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outRt , RX10_TEMP1416 , X10_TEMP518 ) ; 
} 
else 
{ const int X10_TEMP520 = 2 ; 
const int X10_TEMP521 = rBuffer .regSize ; 
const int X10_TEMP523 = X10_TEMP520 * X10_TEMP521 ; 
const int X10_TEMP524 = X10_TEMP523 ; 
struct Point1 RX10_TEMP1424  ; 
Point1_Point1( &RX10_TEMP1424/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1425 = overflow .distValue ; 
struct Region1 RX10_TEMP1426 = RX10_TEMP1425 .dReg ; 
const int RX10_TEMP1427 = searchPointInRegion1 ( RX10_TEMP1426 , RX10_TEMP1424 ) ; 
const int RX10_TEMP1428 = 0 ; 
const int RX10_TEMP1429 = RX10_TEMP1427 < RX10_TEMP1428 ; 
if ( RX10_TEMP1429 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1430 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1430 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1431 = getPlaceFromDist1 ( RX10_TEMP1425 , RX10_TEMP1427 ) ; 
const int RX10_TEMP1433 = /* here  */ 0 ; 
const int RX10_TEMP1434 = RX10_TEMP1431 != RX10_TEMP1433 ; 
if ( RX10_TEMP1434 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1432 = "Bad place access for array overflow" ; 
fprintf(stderr, RX10_TEMP1432 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( overflow , RX10_TEMP1427 , X10_TEMP524 ) ; 
break ; 
} 


} 
else 
{ const int X10_TEMP526 = y < lb ; 
if ( X10_TEMP526 ) 
{ struct Point1 RX10_TEMP1435  ; 
Point1_Point1( &RX10_TEMP1435/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1436 = outLt .distValue ; 
struct Region1 RX10_TEMP1437 = RX10_TEMP1436 .dReg ; 
const int RX10_TEMP1438 = searchPointInRegion1 ( RX10_TEMP1437 , RX10_TEMP1435 ) ; 
const int RX10_TEMP1439 = 0 ; 
const int RX10_TEMP1440 = RX10_TEMP1438 < RX10_TEMP1439 ; 
if ( RX10_TEMP1440 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1441 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1441 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1442 = getPlaceFromDist1 ( RX10_TEMP1436 , RX10_TEMP1438 ) ; 
const int RX10_TEMP1444 = /* here  */ 0 ; 
const int RX10_TEMP1445 = RX10_TEMP1442 != RX10_TEMP1444 ; 
if ( RX10_TEMP1445 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1443 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1443 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1446 = getRefArrayValue1int ( outLt , RX10_TEMP1438 ) ; 
const int X10_TEMP528 = RX10_TEMP1446 ; 
const int X10_TEMP529 = rBuffer .regSize ; 
const int X10_TEMP531 = X10_TEMP528 < X10_TEMP529 ; 
if ( X10_TEMP531 ) 
{ const int X10_TEMP532 = /* here  */ 0 ; 
const int X10_TEMP534 = /* X10_TEMP532 . isFirst ( )  */ 1 ; 
if ( X10_TEMP534 ) 
{ const double X10_TEMP536 = y + rsize ; 
y = X10_TEMP536 ; } 

struct Point1 RX10_TEMP1447  ; 
Point1_Point1( &RX10_TEMP1447/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1448 = outLt .distValue ; 
struct Region1 RX10_TEMP1449 = RX10_TEMP1448 .dReg ; 
const int RX10_TEMP1450 = searchPointInRegion1 ( RX10_TEMP1449 , RX10_TEMP1447 ) ; 
const int RX10_TEMP1451 = 0 ; 
const int RX10_TEMP1452 = RX10_TEMP1450 < RX10_TEMP1451 ; 
if ( RX10_TEMP1452 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1453 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1453 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1454 = getPlaceFromDist1 ( RX10_TEMP1448 , RX10_TEMP1450 ) ; 
const int RX10_TEMP1456 = /* here  */ 0 ; 
const int RX10_TEMP1457 = RX10_TEMP1454 != RX10_TEMP1456 ; 
if ( RX10_TEMP1457 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1455 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1455 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1458 = getRefArrayValue1int ( outLt , RX10_TEMP1450 ) ; 
const int X10_TEMP540 = RX10_TEMP1458 ; 
struct Particle X10_TEMP543 = Particle_setY ( p , y ) ; 
struct Particle X10_TEMP544 = X10_TEMP543 ; 
struct Point2 RX10_TEMP1459  ; 
Point2_Point2( &RX10_TEMP1459/*Assignment*/, pl , X10_TEMP540 ) ; 
struct Dist2 RX10_TEMP1460 = sBufferL .distValue ; 
struct Region2 RX10_TEMP1461 = RX10_TEMP1460 .dReg ; 
const int RX10_TEMP1462 = searchPointInRegion2 ( RX10_TEMP1461 , RX10_TEMP1459 ) ; 
const int RX10_TEMP1463 = 0 ; 
const int RX10_TEMP1464 = RX10_TEMP1462 < RX10_TEMP1463 ; 
if ( RX10_TEMP1464 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1465 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1465 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1466 = getPlaceFromDist2 ( RX10_TEMP1460 , RX10_TEMP1462 ) ; 
const int RX10_TEMP1468 = /* here  */ 0 ; 
const int RX10_TEMP1469 = RX10_TEMP1466 != RX10_TEMP1468 ; 
if ( RX10_TEMP1469 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1467 = "Bad place access for array sBufferL" ; 
fprintf(stderr, RX10_TEMP1467 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( sBufferL , RX10_TEMP1462 , X10_TEMP544 ) ; 
struct Point1 RX10_TEMP1470  ; 
Point1_Point1( &RX10_TEMP1470/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1471 = outLt .distValue ; 
struct Region1 RX10_TEMP1472 = RX10_TEMP1471 .dReg ; 
const int RX10_TEMP1473 = searchPointInRegion1 ( RX10_TEMP1472 , RX10_TEMP1470 ) ; 
const int RX10_TEMP1474 = 0 ; 
const int RX10_TEMP1475 = RX10_TEMP1473 < RX10_TEMP1474 ; 
if ( RX10_TEMP1475 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1476 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1476 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1477 = getPlaceFromDist1 ( RX10_TEMP1471 , RX10_TEMP1473 ) ; 
const int RX10_TEMP1479 = /* here  */ 0 ; 
const int RX10_TEMP1480 = RX10_TEMP1477 != RX10_TEMP1479 ; 
if ( RX10_TEMP1480 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1478 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1478 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1481 = getRefArrayValue1int ( outLt , RX10_TEMP1473 ) ; 
const int X10_TEMP546 = RX10_TEMP1481 ; 
const int X10_TEMP547 = 1 ; 
struct Point1 RX10_TEMP1482  ; 
Point1_Point1( &RX10_TEMP1482/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1483 = outLt .distValue ; 
struct Region1 RX10_TEMP1484 = RX10_TEMP1483 .dReg ; 
const int RX10_TEMP1485 = searchPointInRegion1 ( RX10_TEMP1484 , RX10_TEMP1482 ) ; 
const int RX10_TEMP1486 = 0 ; 
const int RX10_TEMP1487 = RX10_TEMP1485 < RX10_TEMP1486 ; 
if ( RX10_TEMP1487 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1488 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1488 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1489 = getPlaceFromDist1 ( RX10_TEMP1483 , RX10_TEMP1485 ) ; 
const int RX10_TEMP1491 = /* here  */ 0 ; 
const int RX10_TEMP1492 = RX10_TEMP1489 != RX10_TEMP1491 ; 
if ( RX10_TEMP1492 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1490 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1490 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1493 = getRefArrayValue1int ( outLt , RX10_TEMP1485 ) ; 
const int X10_TEMP548 = RX10_TEMP1493 ; 
const int X10_TEMP549 = X10_TEMP548 + X10_TEMP547 ; 
struct Point1 RX10_TEMP1494  ; 
Point1_Point1( &RX10_TEMP1494/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1495 = outLt .distValue ; 
struct Region1 RX10_TEMP1496 = RX10_TEMP1495 .dReg ; 
const int RX10_TEMP1497 = searchPointInRegion1 ( RX10_TEMP1496 , RX10_TEMP1494 ) ; 
const int RX10_TEMP1498 = 0 ; 
const int RX10_TEMP1499 = RX10_TEMP1497 < RX10_TEMP1498 ; 
if ( RX10_TEMP1499 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1500 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1500 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1501 = getPlaceFromDist1 ( RX10_TEMP1495 , RX10_TEMP1497 ) ; 
const int RX10_TEMP1503 = /* here  */ 0 ; 
const int RX10_TEMP1504 = RX10_TEMP1501 != RX10_TEMP1503 ; 
if ( RX10_TEMP1504 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1502 = "Bad place access for array outLt" ; 
fprintf(stderr, RX10_TEMP1502 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( outLt , RX10_TEMP1497 , X10_TEMP549 ) ; 
} 
else 
{ const int X10_TEMP551 = 2 ; 
const int X10_TEMP552 = rBuffer .regSize ; 
const int X10_TEMP554 = X10_TEMP551 * X10_TEMP552 ; 
const int X10_TEMP555 = X10_TEMP554 ; 
struct Point1 RX10_TEMP1505  ; 
Point1_Point1( &RX10_TEMP1505/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1506 = overflow .distValue ; 
struct Region1 RX10_TEMP1507 = RX10_TEMP1506 .dReg ; 
const int RX10_TEMP1508 = searchPointInRegion1 ( RX10_TEMP1507 , RX10_TEMP1505 ) ; 
const int RX10_TEMP1509 = 0 ; 
const int RX10_TEMP1510 = RX10_TEMP1508 < RX10_TEMP1509 ; 
if ( RX10_TEMP1510 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1511 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1511 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1512 = getPlaceFromDist1 ( RX10_TEMP1506 , RX10_TEMP1508 ) ; 
const int RX10_TEMP1514 = /* here  */ 0 ; 
const int RX10_TEMP1515 = RX10_TEMP1512 != RX10_TEMP1514 ; 
if ( RX10_TEMP1515 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1513 = "Bad place access for array overflow" ; 
fprintf(stderr, RX10_TEMP1513 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( overflow , RX10_TEMP1508 , X10_TEMP555 ) ; 
break ; 
} 


} 
else 
{ struct Particle X10_TEMP559 = p ; 
struct Point2 RX10_TEMP1516  ; 
Point2_Point2( &RX10_TEMP1516/*Assignment*/, pl , inLeftStaying ) ; 
struct Dist2 RX10_TEMP1517 = rBufferL .distValue ; 
struct Region2 RX10_TEMP1518 = RX10_TEMP1517 .dReg ; 
const int RX10_TEMP1519 = searchPointInRegion2 ( RX10_TEMP1518 , RX10_TEMP1516 ) ; 
const int RX10_TEMP1520 = 0 ; 
const int RX10_TEMP1521 = RX10_TEMP1519 < RX10_TEMP1520 ; 
if ( RX10_TEMP1521 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1522 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1522 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1523 = getPlaceFromDist2 ( RX10_TEMP1517 , RX10_TEMP1519 ) ; 
const int RX10_TEMP1525 = /* here  */ 0 ; 
const int RX10_TEMP1526 = RX10_TEMP1523 != RX10_TEMP1525 ; 
if ( RX10_TEMP1526 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1524 = "Bad place access for array rBufferL" ; 
fprintf(stderr, RX10_TEMP1524 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( rBufferL , RX10_TEMP1519 , X10_TEMP559 ) ; 
const int X10_TEMP560 = inLeftStaying ; 
const int X10_TEMP561 = 1 ; 
inLeftStaying = inLeftStaying + X10_TEMP561 ; } 


} 


} 

const int X10_TEMP564 = inLeftStaying ; 
struct Point1 RX10_TEMP1527  ; 
Point1_Point1( &RX10_TEMP1527/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1528 = inLt .distValue ; 
struct Region1 RX10_TEMP1529 = RX10_TEMP1528 .dReg ; 
const int RX10_TEMP1530 = searchPointInRegion1 ( RX10_TEMP1529 , RX10_TEMP1527 ) ; 
const int RX10_TEMP1531 = 0 ; 
const int RX10_TEMP1532 = RX10_TEMP1530 < RX10_TEMP1531 ; 
if ( RX10_TEMP1532 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1533 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1533 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1534 = getPlaceFromDist1 ( RX10_TEMP1528 , RX10_TEMP1530 ) ; 
const int RX10_TEMP1536 = /* here  */ 0 ; 
const int RX10_TEMP1537 = RX10_TEMP1534 != RX10_TEMP1536 ; 
if ( RX10_TEMP1537 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1535 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP1535 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inLt , RX10_TEMP1530 , X10_TEMP564 ) ; 
} 

} 

} 

} 

const int rSize = rPart .regSize ; 
struct intRefArray1 X10_TEMP568 = nPart ; 
struct intRefArray1 X10_TEMP569 = inLt ; 
struct Region1 RX10_TEMP1538 = dUnique .dReg ; 
const int RX10_TEMP1539 = 0 ; 
const int RX10_TEMP1540 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1541 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1541 = RX10_TEMP1541 - RX10_TEMP1540 ; const int SX10_TEMP169 = 1 ; 
const int RX10_TEMP1542 = RX10_TEMP1541 + SX10_TEMP169 ; 
const int SX10_TEMP170 = 1 ; 
const int RX10_TEMP1543 = RX10_TEMP1541 + SX10_TEMP170 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1544 = (intStub *)calloc(RX10_TEMP1543,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP172 = 0 ; SX10_TEMP172 < RX10_TEMP1542 ; SX10_TEMP172 ++ ) 
{ const int RX10_TEMP1545 = SX10_TEMP172 ; 
const int RX10_TEMP1546 = /* here  */ 0 ; 
const int RX10_TEMP1547 = RX10_TEMP1545 ; 
const int RX10_TEMP1548 = /* place.places ( RX10_TEMP1547 )  */ 0 
; 
const int RX10_TEMP1549 = getDistLocalCount1 ( dUnique , RX10_TEMP1547 ) ; 
const int RX10_TEMP1550 = RX10_TEMP1549 - RX10_TEMP1540 ; 
struct Dist1 RX10_TEMP1551 = restrictDist1 ( dUnique , RX10_TEMP1548 ) ; 
struct Region1 RX10_TEMP1552 = RX10_TEMP1551 .dReg ; 
/* async ( RX10_TEMP1548 )  */ 
{ const int SX10_TEMP173 = 1 ; 
const int RX10_TEMP1577 = RX10_TEMP1550 + SX10_TEMP173 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP174 = (int *)calloc(RX10_TEMP1577,sizeof( int )); 
for ( int SX10_TEMP175 = 0 ; SX10_TEMP175 < RX10_TEMP1577 ; SX10_TEMP175 ++ ) 
{ const int RX10_TEMP1553 = SX10_TEMP175 ; 
const int RX10_TEMP1554 = RX10_TEMP1553 ; 
struct Point1 X10_TEMP567 = regionOrdinalPoint1 ( RX10_TEMP1552 , RX10_TEMP1554 ) ; 
struct Dist1 RX10_TEMP1555 = X10_TEMP568 .distValue ; 
struct Region1 RX10_TEMP1556 = RX10_TEMP1555 .dReg ; 
const int RX10_TEMP1557 = searchPointInRegion1 ( RX10_TEMP1556 , X10_TEMP567 ) ; 
const int RX10_TEMP1558 = 0 ; 
const int RX10_TEMP1559 = RX10_TEMP1557 < RX10_TEMP1558 ; 
if ( RX10_TEMP1559 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1560 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1560 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1561 = getPlaceFromDist1 ( RX10_TEMP1555 , RX10_TEMP1557 ) ; 
const int RX10_TEMP1563 = /* here  */ 0 ; 
const int RX10_TEMP1564 = RX10_TEMP1561 != RX10_TEMP1563 ; 
if ( RX10_TEMP1564 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1562 = "Bad place access for array X10_TEMP568" ; 
fprintf(stderr, RX10_TEMP1562 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1565 = getRefArrayValue1int ( X10_TEMP568 , RX10_TEMP1557 ) ; 
const int X10_TEMP570 = RX10_TEMP1565 ; 
struct Dist1 RX10_TEMP1566 = X10_TEMP569 .distValue ; 
struct Region1 RX10_TEMP1567 = RX10_TEMP1566 .dReg ; 
const int RX10_TEMP1568 = searchPointInRegion1 ( RX10_TEMP1567 , X10_TEMP567 ) ; 
const int RX10_TEMP1569 = 0 ; 
const int RX10_TEMP1570 = RX10_TEMP1568 < RX10_TEMP1569 ; 
if ( RX10_TEMP1570 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1571 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1571 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1572 = getPlaceFromDist1 ( RX10_TEMP1566 , RX10_TEMP1568 ) ; 
const int RX10_TEMP1574 = /* here  */ 0 ; 
const int RX10_TEMP1575 = RX10_TEMP1572 != RX10_TEMP1574 ; 
if ( RX10_TEMP1575 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1573 = "Bad place access for array X10_TEMP569" ; 
fprintf(stderr, RX10_TEMP1573 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1576 = getRefArrayValue1int ( X10_TEMP569 , RX10_TEMP1568 ) ; 
const int X10_TEMP571 = RX10_TEMP1576 ; 
const int X10_TEMP572 = X10_TEMP570 + X10_TEMP571 ; 
SX10_TEMP174 [ RX10_TEMP1553 ] = X10_TEMP572 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1578 = SX10_TEMP174 ; 
struct intStub RX10_TEMP1579  ; 
intStub_intStub( &RX10_TEMP1579/*Assignment*/, RX10_TEMP1578 ) ; 
/* async ( RX10_TEMP1546 )  */ 
{ RX10_TEMP1544 [ RX10_TEMP1545 ] = RX10_TEMP1579 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP176 = (intStub *)calloc(RX10_TEMP1542,sizeof( intStub )); 
for ( int SX10_TEMP177 = 0 ; SX10_TEMP177 < RX10_TEMP1542 ; SX10_TEMP177 ++ ) 
{ const int RX10_TEMP1582 = SX10_TEMP177 ; 
struct intStub RX10_TEMP1581 = RX10_TEMP1544 [ RX10_TEMP1582 ] 
; 
SX10_TEMP176 [ RX10_TEMP1582 ] = RX10_TEMP1581 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1580 = SX10_TEMP176 ; 
struct intRefArray1 RX10_TEMP1583  ; 
intRefArray1_intRefArray1( &RX10_TEMP1583/*Assignment*/, dUnique , RX10_TEMP1580 ) ; 
struct intRefArray1 X10_TEMP566 = RX10_TEMP1583 ; 
struct intRefArray1 X10_TEMP575 = X10_TEMP566 ; 
struct intRefArray1 X10_TEMP576 = inRt ; 
struct Region1 RX10_TEMP1584 = dUnique .dReg ; 
const int RX10_TEMP1585 = 0 ; 
const int RX10_TEMP1586 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1587 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1587 = RX10_TEMP1587 - RX10_TEMP1586 ; const int SX10_TEMP178 = 1 ; 
const int RX10_TEMP1588 = RX10_TEMP1587 + SX10_TEMP178 ; 
const int SX10_TEMP179 = 1 ; 
const int RX10_TEMP1589 = RX10_TEMP1587 + SX10_TEMP179 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1590 = (intStub *)calloc(RX10_TEMP1589,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP181 = 0 ; SX10_TEMP181 < RX10_TEMP1588 ; SX10_TEMP181 ++ ) 
{ const int RX10_TEMP1591 = SX10_TEMP181 ; 
const int RX10_TEMP1592 = /* here  */ 0 ; 
const int RX10_TEMP1593 = RX10_TEMP1591 ; 
const int RX10_TEMP1594 = /* place.places ( RX10_TEMP1593 )  */ 0 
; 
const int RX10_TEMP1595 = getDistLocalCount1 ( dUnique , RX10_TEMP1593 ) ; 
const int RX10_TEMP1596 = RX10_TEMP1595 - RX10_TEMP1586 ; 
struct Dist1 RX10_TEMP1597 = restrictDist1 ( dUnique , RX10_TEMP1594 ) ; 
struct Region1 RX10_TEMP1598 = RX10_TEMP1597 .dReg ; 
/* async ( RX10_TEMP1594 )  */ 
{ const int SX10_TEMP182 = 1 ; 
const int RX10_TEMP1623 = RX10_TEMP1596 + SX10_TEMP182 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP183 = (int *)calloc(RX10_TEMP1623,sizeof( int )); 
for ( int SX10_TEMP184 = 0 ; SX10_TEMP184 < RX10_TEMP1623 ; SX10_TEMP184 ++ ) 
{ const int RX10_TEMP1599 = SX10_TEMP184 ; 
const int RX10_TEMP1600 = RX10_TEMP1599 ; 
struct Point1 X10_TEMP574 = regionOrdinalPoint1 ( RX10_TEMP1598 , RX10_TEMP1600 ) ; 
struct Dist1 RX10_TEMP1601 = X10_TEMP575 .distValue ; 
struct Region1 RX10_TEMP1602 = RX10_TEMP1601 .dReg ; 
const int RX10_TEMP1603 = searchPointInRegion1 ( RX10_TEMP1602 , X10_TEMP574 ) ; 
const int RX10_TEMP1604 = 0 ; 
const int RX10_TEMP1605 = RX10_TEMP1603 < RX10_TEMP1604 ; 
if ( RX10_TEMP1605 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1606 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1606 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1607 = getPlaceFromDist1 ( RX10_TEMP1601 , RX10_TEMP1603 ) ; 
const int RX10_TEMP1609 = /* here  */ 0 ; 
const int RX10_TEMP1610 = RX10_TEMP1607 != RX10_TEMP1609 ; 
if ( RX10_TEMP1610 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1608 = "Bad place access for array X10_TEMP575" ; 
fprintf(stderr, RX10_TEMP1608 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1611 = getRefArrayValue1int ( X10_TEMP575 , RX10_TEMP1603 ) ; 
const int X10_TEMP577 = RX10_TEMP1611 ; 
struct Dist1 RX10_TEMP1612 = X10_TEMP576 .distValue ; 
struct Region1 RX10_TEMP1613 = RX10_TEMP1612 .dReg ; 
const int RX10_TEMP1614 = searchPointInRegion1 ( RX10_TEMP1613 , X10_TEMP574 ) ; 
const int RX10_TEMP1615 = 0 ; 
const int RX10_TEMP1616 = RX10_TEMP1614 < RX10_TEMP1615 ; 
if ( RX10_TEMP1616 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1617 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1617 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1618 = getPlaceFromDist1 ( RX10_TEMP1612 , RX10_TEMP1614 ) ; 
const int RX10_TEMP1620 = /* here  */ 0 ; 
const int RX10_TEMP1621 = RX10_TEMP1618 != RX10_TEMP1620 ; 
if ( RX10_TEMP1621 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1619 = "Bad place access for array X10_TEMP576" ; 
fprintf(stderr, RX10_TEMP1619 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1622 = getRefArrayValue1int ( X10_TEMP576 , RX10_TEMP1614 ) ; 
const int X10_TEMP578 = RX10_TEMP1622 ; 
const int X10_TEMP579 = X10_TEMP577 + X10_TEMP578 ; 
SX10_TEMP183 [ RX10_TEMP1599 ] = X10_TEMP579 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1624 = SX10_TEMP183 ; 
struct intStub RX10_TEMP1625  ; 
intStub_intStub( &RX10_TEMP1625/*Assignment*/, RX10_TEMP1624 ) ; 
/* async ( RX10_TEMP1592 )  */ 
{ RX10_TEMP1590 [ RX10_TEMP1591 ] = RX10_TEMP1625 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP185 = (intStub *)calloc(RX10_TEMP1588,sizeof( intStub )); 
for ( int SX10_TEMP186 = 0 ; SX10_TEMP186 < RX10_TEMP1588 ; SX10_TEMP186 ++ ) 
{ const int RX10_TEMP1628 = SX10_TEMP186 ; 
struct intStub RX10_TEMP1627 = RX10_TEMP1590 [ RX10_TEMP1628 ] 
; 
SX10_TEMP185 [ RX10_TEMP1628 ] = RX10_TEMP1627 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1626 = SX10_TEMP185 ; 
struct intRefArray1 RX10_TEMP1629  ; 
intRefArray1_intRefArray1( &RX10_TEMP1629/*Assignment*/, dUnique , RX10_TEMP1626 ) ; 
struct intRefArray1 X10_TEMP573 = RX10_TEMP1629 ; 
struct intRefArray1 X10_TEMP582 = X10_TEMP573 ; 
struct intRefArray1 X10_TEMP583 = nSent ; 
struct Region1 RX10_TEMP1630 = dUnique .dReg ; 
const int RX10_TEMP1631 = 0 ; 
const int RX10_TEMP1632 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1633 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1633 = RX10_TEMP1633 - RX10_TEMP1632 ; const int SX10_TEMP187 = 1 ; 
const int RX10_TEMP1634 = RX10_TEMP1633 + SX10_TEMP187 ; 
const int SX10_TEMP188 = 1 ; 
const int RX10_TEMP1635 = RX10_TEMP1633 + SX10_TEMP188 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1636 = (intStub *)calloc(RX10_TEMP1635,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP190 = 0 ; SX10_TEMP190 < RX10_TEMP1634 ; SX10_TEMP190 ++ ) 
{ const int RX10_TEMP1637 = SX10_TEMP190 ; 
const int RX10_TEMP1638 = /* here  */ 0 ; 
const int RX10_TEMP1639 = RX10_TEMP1637 ; 
const int RX10_TEMP1640 = /* place.places ( RX10_TEMP1639 )  */ 0 
; 
const int RX10_TEMP1641 = getDistLocalCount1 ( dUnique , RX10_TEMP1639 ) ; 
const int RX10_TEMP1642 = RX10_TEMP1641 - RX10_TEMP1632 ; 
struct Dist1 RX10_TEMP1643 = restrictDist1 ( dUnique , RX10_TEMP1640 ) ; 
struct Region1 RX10_TEMP1644 = RX10_TEMP1643 .dReg ; 
/* async ( RX10_TEMP1640 )  */ 
{ const int SX10_TEMP191 = 1 ; 
const int RX10_TEMP1669 = RX10_TEMP1642 + SX10_TEMP191 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP192 = (int *)calloc(RX10_TEMP1669,sizeof( int )); 
for ( int SX10_TEMP193 = 0 ; SX10_TEMP193 < RX10_TEMP1669 ; SX10_TEMP193 ++ ) 
{ const int RX10_TEMP1645 = SX10_TEMP193 ; 
const int RX10_TEMP1646 = RX10_TEMP1645 ; 
struct Point1 X10_TEMP581 = regionOrdinalPoint1 ( RX10_TEMP1644 , RX10_TEMP1646 ) ; 
struct Dist1 RX10_TEMP1647 = X10_TEMP582 .distValue ; 
struct Region1 RX10_TEMP1648 = RX10_TEMP1647 .dReg ; 
const int RX10_TEMP1649 = searchPointInRegion1 ( RX10_TEMP1648 , X10_TEMP581 ) ; 
const int RX10_TEMP1650 = 0 ; 
const int RX10_TEMP1651 = RX10_TEMP1649 < RX10_TEMP1650 ; 
if ( RX10_TEMP1651 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1652 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1652 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1653 = getPlaceFromDist1 ( RX10_TEMP1647 , RX10_TEMP1649 ) ; 
const int RX10_TEMP1655 = /* here  */ 0 ; 
const int RX10_TEMP1656 = RX10_TEMP1653 != RX10_TEMP1655 ; 
if ( RX10_TEMP1656 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1654 = "Bad place access for array X10_TEMP582" ; 
fprintf(stderr, RX10_TEMP1654 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1657 = getRefArrayValue1int ( X10_TEMP582 , RX10_TEMP1649 ) ; 
const int X10_TEMP584 = RX10_TEMP1657 ; 
struct Dist1 RX10_TEMP1658 = X10_TEMP583 .distValue ; 
struct Region1 RX10_TEMP1659 = RX10_TEMP1658 .dReg ; 
const int RX10_TEMP1660 = searchPointInRegion1 ( RX10_TEMP1659 , X10_TEMP581 ) ; 
const int RX10_TEMP1661 = 0 ; 
const int RX10_TEMP1662 = RX10_TEMP1660 < RX10_TEMP1661 ; 
if ( RX10_TEMP1662 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1663 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1663 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1664 = getPlaceFromDist1 ( RX10_TEMP1658 , RX10_TEMP1660 ) ; 
const int RX10_TEMP1666 = /* here  */ 0 ; 
const int RX10_TEMP1667 = RX10_TEMP1664 != RX10_TEMP1666 ; 
if ( RX10_TEMP1667 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1665 = "Bad place access for array X10_TEMP583" ; 
fprintf(stderr, RX10_TEMP1665 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1668 = getRefArrayValue1int ( X10_TEMP583 , RX10_TEMP1660 ) ; 
const int X10_TEMP585 = RX10_TEMP1668 ; 
const int X10_TEMP586 = X10_TEMP584 - X10_TEMP585 ; 
SX10_TEMP192 [ RX10_TEMP1645 ] = X10_TEMP586 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1670 = SX10_TEMP192 ; 
struct intStub RX10_TEMP1671  ; 
intStub_intStub( &RX10_TEMP1671/*Assignment*/, RX10_TEMP1670 ) ; 
/* async ( RX10_TEMP1638 )  */ 
{ RX10_TEMP1636 [ RX10_TEMP1637 ] = RX10_TEMP1671 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP194 = (intStub *)calloc(RX10_TEMP1634,sizeof( intStub )); 
for ( int SX10_TEMP195 = 0 ; SX10_TEMP195 < RX10_TEMP1634 ; SX10_TEMP195 ++ ) 
{ const int RX10_TEMP1674 = SX10_TEMP195 ; 
struct intStub RX10_TEMP1673 = RX10_TEMP1636 [ RX10_TEMP1674 ] 
; 
SX10_TEMP194 [ RX10_TEMP1674 ] = RX10_TEMP1673 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1672 = SX10_TEMP194 ; 
struct intRefArray1 RX10_TEMP1675  ; 
intRefArray1_intRefArray1( &RX10_TEMP1675/*Assignment*/, dUnique , RX10_TEMP1672 ) ; 
struct intRefArray1 X10_TEMP580 = RX10_TEMP1675 ; 
struct intRefArray1 X10_TEMP588 = X10_TEMP580 ; 
struct intRefArray1 tMaxSize = X10_TEMP588 ; 
struct Region1 RX10_TEMP1676 = dUnique .dReg ; 
const int RX10_TEMP1677 = 0 ; 
const int RX10_TEMP1678 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1679 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1679 = RX10_TEMP1679 - RX10_TEMP1678 ; const int SX10_TEMP196 = 1 ; 
const int RX10_TEMP1680 = RX10_TEMP1679 + SX10_TEMP196 ; 
const int SX10_TEMP197 = 1 ; 
const int RX10_TEMP1681 = RX10_TEMP1679 + SX10_TEMP197 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1682 = (intStub *)calloc(RX10_TEMP1681,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP199 = 0 ; SX10_TEMP199 < RX10_TEMP1680 ; SX10_TEMP199 ++ ) 
{ const int RX10_TEMP1683 = SX10_TEMP199 ; 
const int RX10_TEMP1684 = /* here  */ 0 ; 
const int RX10_TEMP1685 = RX10_TEMP1683 ; 
const int RX10_TEMP1686 = /* place.places ( RX10_TEMP1685 )  */ 0 
; 
const int RX10_TEMP1687 = getDistLocalCount1 ( dUnique , RX10_TEMP1685 ) ; 
const int RX10_TEMP1688 = RX10_TEMP1687 - RX10_TEMP1678 ; 
/* async ( RX10_TEMP1686 )  */ 
{ const int SX10_TEMP200 = 1 ; 
const int RX10_TEMP1690 = RX10_TEMP1688 + SX10_TEMP200 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP201 = (int *)calloc(RX10_TEMP1690,sizeof( int )); 
for ( int SX10_TEMP202 = 0 ; SX10_TEMP202 < RX10_TEMP1690 ; SX10_TEMP202 ++ ) 
{ const int RX10_TEMP1689 = SX10_TEMP202 ; 
SX10_TEMP201 [ RX10_TEMP1689 ] = rSize ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1691 = SX10_TEMP201 ; 
struct intStub RX10_TEMP1692  ; 
intStub_intStub( &RX10_TEMP1692/*Assignment*/, RX10_TEMP1691 ) ; 
/* async ( RX10_TEMP1684 )  */ 
{ RX10_TEMP1682 [ RX10_TEMP1683 ] = RX10_TEMP1692 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP203 = (intStub *)calloc(RX10_TEMP1680,sizeof( intStub )); 
for ( int SX10_TEMP204 = 0 ; SX10_TEMP204 < RX10_TEMP1680 ; SX10_TEMP204 ++ ) 
{ const int RX10_TEMP1695 = SX10_TEMP204 ; 
struct intStub RX10_TEMP1694 = RX10_TEMP1682 [ RX10_TEMP1695 ] 
; 
SX10_TEMP203 [ RX10_TEMP1695 ] = RX10_TEMP1694 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1693 = SX10_TEMP203 ; 
struct intRefArray1 RX10_TEMP1696  ; 
intRefArray1_intRefArray1( &RX10_TEMP1696/*Assignment*/, dUnique , RX10_TEMP1693 ) ; 
struct intRefArray1 X10_TEMP592 = RX10_TEMP1696 ; 
struct intRefArray1 X10_TEMP595 = X10_TEMP592 ; 
struct intRefArray1 X10_TEMP596 = tMaxSize ; 
struct Region1 RX10_TEMP1697 = dUnique .dReg ; 
const int RX10_TEMP1698 = 0 ; 
const int RX10_TEMP1699 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1700 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1700 = RX10_TEMP1700 - RX10_TEMP1699 ; const int SX10_TEMP205 = 1 ; 
const int RX10_TEMP1701 = RX10_TEMP1700 + SX10_TEMP205 ; 
const int SX10_TEMP206 = 1 ; 
const int RX10_TEMP1702 = RX10_TEMP1700 + SX10_TEMP206 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1703 = (intStub *)calloc(RX10_TEMP1702,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP208 = 0 ; SX10_TEMP208 < RX10_TEMP1701 ; SX10_TEMP208 ++ ) 
{ const int RX10_TEMP1704 = SX10_TEMP208 ; 
const int RX10_TEMP1705 = /* here  */ 0 ; 
const int RX10_TEMP1706 = RX10_TEMP1704 ; 
const int RX10_TEMP1707 = /* place.places ( RX10_TEMP1706 )  */ 0 
; 
const int RX10_TEMP1708 = getDistLocalCount1 ( dUnique , RX10_TEMP1706 ) ; 
const int RX10_TEMP1709 = RX10_TEMP1708 - RX10_TEMP1699 ; 
struct Dist1 RX10_TEMP1710 = restrictDist1 ( dUnique , RX10_TEMP1707 ) ; 
struct Region1 RX10_TEMP1711 = RX10_TEMP1710 .dReg ; 
/* async ( RX10_TEMP1707 )  */ 
{ const int SX10_TEMP209 = 1 ; 
const int RX10_TEMP1736 = RX10_TEMP1709 + SX10_TEMP209 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP210 = (int *)calloc(RX10_TEMP1736,sizeof( int )); 
for ( int SX10_TEMP211 = 0 ; SX10_TEMP211 < RX10_TEMP1736 ; SX10_TEMP211 ++ ) 
{ const int RX10_TEMP1712 = SX10_TEMP211 ; 
const int RX10_TEMP1713 = RX10_TEMP1712 ; 
struct Point1 X10_TEMP594 = regionOrdinalPoint1 ( RX10_TEMP1711 , RX10_TEMP1713 ) ; 
struct Dist1 RX10_TEMP1714 = X10_TEMP595 .distValue ; 
struct Region1 RX10_TEMP1715 = RX10_TEMP1714 .dReg ; 
const int RX10_TEMP1716 = searchPointInRegion1 ( RX10_TEMP1715 , X10_TEMP594 ) ; 
const int RX10_TEMP1717 = 0 ; 
const int RX10_TEMP1718 = RX10_TEMP1716 < RX10_TEMP1717 ; 
if ( RX10_TEMP1718 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1719 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1719 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1720 = getPlaceFromDist1 ( RX10_TEMP1714 , RX10_TEMP1716 ) ; 
const int RX10_TEMP1722 = /* here  */ 0 ; 
const int RX10_TEMP1723 = RX10_TEMP1720 != RX10_TEMP1722 ; 
if ( RX10_TEMP1723 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1721 = "Bad place access for array X10_TEMP595" ; 
fprintf(stderr, RX10_TEMP1721 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1724 = getRefArrayValue1int ( X10_TEMP595 , RX10_TEMP1716 ) ; 
const int X10_TEMP597 = RX10_TEMP1724 ; 
struct Dist1 RX10_TEMP1725 = X10_TEMP596 .distValue ; 
struct Region1 RX10_TEMP1726 = RX10_TEMP1725 .dReg ; 
const int RX10_TEMP1727 = searchPointInRegion1 ( RX10_TEMP1726 , X10_TEMP594 ) ; 
const int RX10_TEMP1728 = 0 ; 
const int RX10_TEMP1729 = RX10_TEMP1727 < RX10_TEMP1728 ; 
if ( RX10_TEMP1729 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1730 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1730 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1731 = getPlaceFromDist1 ( RX10_TEMP1725 , RX10_TEMP1727 ) ; 
const int RX10_TEMP1733 = /* here  */ 0 ; 
const int RX10_TEMP1734 = RX10_TEMP1731 != RX10_TEMP1733 ; 
if ( RX10_TEMP1734 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1732 = "Bad place access for array X10_TEMP596" ; 
fprintf(stderr, RX10_TEMP1732 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1735 = getRefArrayValue1int ( X10_TEMP596 , RX10_TEMP1727 ) ; 
const int X10_TEMP598 = RX10_TEMP1735 ; 
const int X10_TEMP599 = X10_TEMP597 - X10_TEMP598 ; 
SX10_TEMP210 [ RX10_TEMP1712 ] = X10_TEMP599 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1737 = SX10_TEMP210 ; 
struct intStub RX10_TEMP1738  ; 
intStub_intStub( &RX10_TEMP1738/*Assignment*/, RX10_TEMP1737 ) ; 
/* async ( RX10_TEMP1705 )  */ 
{ RX10_TEMP1703 [ RX10_TEMP1704 ] = RX10_TEMP1738 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP212 = (intStub *)calloc(RX10_TEMP1701,sizeof( intStub )); 
for ( int SX10_TEMP213 = 0 ; SX10_TEMP213 < RX10_TEMP1701 ; SX10_TEMP213 ++ ) 
{ const int RX10_TEMP1741 = SX10_TEMP213 ; 
struct intStub RX10_TEMP1740 = RX10_TEMP1703 [ RX10_TEMP1741 ] 
; 
SX10_TEMP212 [ RX10_TEMP1741 ] = RX10_TEMP1740 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1739 = SX10_TEMP212 ; 
struct intRefArray1 RX10_TEMP1742  ; 
intRefArray1_intRefArray1( &RX10_TEMP1742/*Assignment*/, dUnique , RX10_TEMP1739 ) ; 
struct intRefArray1 X10_TEMP593 = RX10_TEMP1742 ; 
struct intRefArray1 tMinSize = X10_TEMP593 ; 
const int X10_TEMP602 = 1 ; 
const int X10_TEMP604 = intrefArrayMax1 ( tMaxSize ) ; 
const int X10_TEMP605 = X10_TEMP604 ; 
struct Point1 RX10_TEMP1743  ; 
Point1_Point1( &RX10_TEMP1743/*Assignment*/, X10_TEMP602 ) ; 
struct Dist1 RX10_TEMP1744 = info .distValue ; 
struct Region1 RX10_TEMP1745 = RX10_TEMP1744 .dReg ; 
const int RX10_TEMP1746 = searchPointInRegion1 ( RX10_TEMP1745 , RX10_TEMP1743 ) ; 
const int RX10_TEMP1747 = 0 ; 
const int RX10_TEMP1748 = RX10_TEMP1746 < RX10_TEMP1747 ; 
if ( RX10_TEMP1748 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1749 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1749 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1750 = getPlaceFromDist1 ( RX10_TEMP1744 , RX10_TEMP1746 ) ; 
const int RX10_TEMP1752 = /* here  */ 0 ; 
const int RX10_TEMP1753 = RX10_TEMP1750 != RX10_TEMP1752 ; 
if ( RX10_TEMP1753 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1751 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP1751 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP1746 , X10_TEMP605 ) ; 
const int X10_TEMP607 = 2 ; 
const int X10_TEMP608 = intrefArrayMax1 ( tMinSize ) ; 
const int X10_TEMP610 = rSize - X10_TEMP608 ; 
const int X10_TEMP611 = X10_TEMP610 ; 
struct Point1 RX10_TEMP1754  ; 
Point1_Point1( &RX10_TEMP1754/*Assignment*/, X10_TEMP607 ) ; 
struct Dist1 RX10_TEMP1755 = info .distValue ; 
struct Region1 RX10_TEMP1756 = RX10_TEMP1755 .dReg ; 
const int RX10_TEMP1757 = searchPointInRegion1 ( RX10_TEMP1756 , RX10_TEMP1754 ) ; 
const int RX10_TEMP1758 = 0 ; 
const int RX10_TEMP1759 = RX10_TEMP1757 < RX10_TEMP1758 ; 
if ( RX10_TEMP1759 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1760 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1760 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1761 = getPlaceFromDist1 ( RX10_TEMP1755 , RX10_TEMP1757 ) ; 
const int RX10_TEMP1763 = /* here  */ 0 ; 
const int RX10_TEMP1764 = RX10_TEMP1761 != RX10_TEMP1763 ; 
if ( RX10_TEMP1764 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1762 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP1762 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP1757 , X10_TEMP611 ) ; 
const int X10_TEMP613 = 1 ; 
struct Point1 RX10_TEMP1765  ; 
Point1_Point1( &RX10_TEMP1765/*Assignment*/, X10_TEMP613 ) ; 
struct Dist1 RX10_TEMP1766 = ibflg .distValue ; 
struct Region1 RX10_TEMP1767 = RX10_TEMP1766 .dReg ; 
const int RX10_TEMP1768 = searchPointInRegion1 ( RX10_TEMP1767 , RX10_TEMP1765 ) ; 
const int RX10_TEMP1769 = 0 ; 
const int RX10_TEMP1770 = RX10_TEMP1768 < RX10_TEMP1769 ; 
if ( RX10_TEMP1770 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1771 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1771 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1772 = getPlaceFromDist1 ( RX10_TEMP1766 , RX10_TEMP1768 ) ; 
const int RX10_TEMP1774 = /* here  */ 0 ; 
const int RX10_TEMP1775 = RX10_TEMP1772 != RX10_TEMP1774 ; 
if ( RX10_TEMP1775 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1773 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP1773 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1776 = getRefArrayValue1int ( ibflg , RX10_TEMP1768 ) ; 
const int X10_TEMP614 = RX10_TEMP1776 ; 
const int X10_TEMP615 = rPart .regSize ; 
/*UpdatableVariableDeclaration*/int err = X10_TEMP614 - X10_TEMP615 ; 
const int X10_TEMP617 = 0 ; 
const int X10_TEMP619 = err > X10_TEMP617 ; 
if ( X10_TEMP619 ) 
{ const char * X10_TEMP620 = "Particle overflow error, err = " ; 
/*ASSIGNMENT STRING*/
 char * tempC75 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC75, "%s%d",X10_TEMP620,err);
const char * X10_TEMP622 = tempC75;; 
fprintf(stderr, "%s\n" , X10_TEMP622 ) ; 
const int X10_TEMP624 = 0 ; 
const int X10_TEMP626 = err ; 
struct Point1 RX10_TEMP1777  ; 
Point1_Point1( &RX10_TEMP1777/*Assignment*/, X10_TEMP624 ) ; 
struct Dist1 RX10_TEMP1778 = info .distValue ; 
struct Region1 RX10_TEMP1779 = RX10_TEMP1778 .dReg ; 
const int RX10_TEMP1780 = searchPointInRegion1 ( RX10_TEMP1779 , RX10_TEMP1777 ) ; 
const int RX10_TEMP1781 = 0 ; 
const int RX10_TEMP1782 = RX10_TEMP1780 < RX10_TEMP1781 ; 
if ( RX10_TEMP1782 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1783 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1783 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1784 = getPlaceFromDist1 ( RX10_TEMP1778 , RX10_TEMP1780 ) ; 
const int RX10_TEMP1786 = /* here  */ 0 ; 
const int RX10_TEMP1787 = RX10_TEMP1784 != RX10_TEMP1786 ; 
if ( RX10_TEMP1787 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1785 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP1785 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP1780 , X10_TEMP626 ) ; 
return particles ; 
} 

/* finish  */ 
{ struct Dist1 X10_TEMP629 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1789 = X10_TEMP629 .dReg ; 
const int RX10_TEMP1792 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1790 = RX10_TEMP1789 .regSize ; 
RX10_TEMP1790 = RX10_TEMP1790 - RX10_TEMP1792 ; const int SX10_TEMP214 = 1 ; 
const int RX10_TEMP1791 = RX10_TEMP1790 + SX10_TEMP214 ; 
for ( int SX10_TEMP215 = 0 ; SX10_TEMP215 < RX10_TEMP1791 ; SX10_TEMP215 ++ ) 
{ const int RX10_TEMP1788 = SX10_TEMP215 ; 
const int RX10_TEMP1793 = RX10_TEMP1788 ; 
struct Point1 X10_TEMP630 = regionOrdinalPoint1 ( RX10_TEMP1789 , RX10_TEMP1793 ) ; 
const int pl = X10_TEMP630 .f0 ; 
struct Region1 RX10_TEMP1794 = X10_TEMP629 .dReg ; 
const int RX10_TEMP1795 = searchPointInRegion1 ( RX10_TEMP1794 , X10_TEMP630 ) ; 
const int RX10_TEMP1796 = 0 ; 
const int RX10_TEMP1797 = RX10_TEMP1795 < RX10_TEMP1796 ; 
if ( RX10_TEMP1797 ) 
{ const char * RX10_TEMP1798 = "Point X10_TEMP630 not found in the distribution X10_TEMP629." ; 
fprintf(stderr, RX10_TEMP1798 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1799 = getPlaceFromDist1 ( X10_TEMP629 , RX10_TEMP1795 ) ; 
const int X10_TEMP631 = RX10_TEMP1799 ; 
/* async ( X10_TEMP631 )  */ 
{ struct Point1 RX10_TEMP1800  ; 
Point1_Point1( &RX10_TEMP1800/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1801 = nSent .distValue ; 
struct Region1 RX10_TEMP1802 = RX10_TEMP1801 .dReg ; 
const int RX10_TEMP1803 = searchPointInRegion1 ( RX10_TEMP1802 , RX10_TEMP1800 ) ; 
const int RX10_TEMP1804 = 0 ; 
const int RX10_TEMP1805 = RX10_TEMP1803 < RX10_TEMP1804 ; 
if ( RX10_TEMP1805 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1806 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1806 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1807 = getPlaceFromDist1 ( RX10_TEMP1801 , RX10_TEMP1803 ) ; 
const int RX10_TEMP1809 = /* here  */ 0 ; 
const int RX10_TEMP1810 = RX10_TEMP1807 != RX10_TEMP1809 ; 
if ( RX10_TEMP1810 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1808 = "Bad place access for array nSent" ; 
fprintf(stderr, RX10_TEMP1808 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1811 = getRefArrayValue1int ( nSent , RX10_TEMP1803 ) ; 
/*UpdatableVariableDeclaration*/int holesTotal = RX10_TEMP1811 ; 
struct Point1 RX10_TEMP1812  ; 
Point1_Point1( &RX10_TEMP1812/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1813 = nSent .distValue ; 
struct Region1 RX10_TEMP1814 = RX10_TEMP1813 .dReg ; 
const int RX10_TEMP1815 = searchPointInRegion1 ( RX10_TEMP1814 , RX10_TEMP1812 ) ; 
const int RX10_TEMP1816 = 0 ; 
const int RX10_TEMP1817 = RX10_TEMP1815 < RX10_TEMP1816 ; 
if ( RX10_TEMP1817 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1818 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1818 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1819 = getPlaceFromDist1 ( RX10_TEMP1813 , RX10_TEMP1815 ) ; 
const int RX10_TEMP1821 = /* here  */ 0 ; 
const int RX10_TEMP1822 = RX10_TEMP1819 != RX10_TEMP1821 ; 
if ( RX10_TEMP1822 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1820 = "Bad place access for array nSent" ; 
fprintf(stderr, RX10_TEMP1820 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1823 = getRefArrayValue1int ( nSent , RX10_TEMP1815 ) ; 
/*UpdatableVariableDeclaration*/int holesLeft = RX10_TEMP1823 ; 
struct Point1 RX10_TEMP1824  ; 
Point1_Point1( &RX10_TEMP1824/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1825 = inLt .distValue ; 
struct Region1 RX10_TEMP1826 = RX10_TEMP1825 .dReg ; 
const int RX10_TEMP1827 = searchPointInRegion1 ( RX10_TEMP1826 , RX10_TEMP1824 ) ; 
const int RX10_TEMP1828 = 0 ; 
const int RX10_TEMP1829 = RX10_TEMP1827 < RX10_TEMP1828 ; 
if ( RX10_TEMP1829 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1830 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1830 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1831 = getPlaceFromDist1 ( RX10_TEMP1825 , RX10_TEMP1827 ) ; 
const int RX10_TEMP1833 = /* here  */ 0 ; 
const int RX10_TEMP1834 = RX10_TEMP1831 != RX10_TEMP1833 ; 
if ( RX10_TEMP1834 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1832 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP1832 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1835 = getRefArrayValue1int ( inLt , RX10_TEMP1827 ) ; 
const int X10_TEMP639 = RX10_TEMP1835 ; 
/*UpdatableVariableDeclaration*/int nMove = X10Util_minInt ( holesLeft , X10_TEMP639 ) ; 
/* finish  */ 
{ const int X10_TEMP644 = 0 ; 
const int X10_TEMP642 = 1 ; 
const int X10_TEMP645 = nMove - X10_TEMP642 ; 
struct Region1 X10_TEMP647 = createNewRegion1R ( X10_TEMP644 , X10_TEMP645 ) ; 
const int X10_TEMP648 = /* here  */ 0 ; 
const int RX10_TEMP1840 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1838 = X10_TEMP647 .regSize ; 
RX10_TEMP1838 = RX10_TEMP1838 - RX10_TEMP1840 ; const int SX10_TEMP216 = 1 ; 
const int RX10_TEMP1839 = RX10_TEMP1838 + SX10_TEMP216 ; 
for ( int SX10_TEMP217 = 0 ; SX10_TEMP217 < RX10_TEMP1839 ; SX10_TEMP217 ++ ) 
{ const int RX10_TEMP1836 = SX10_TEMP217 ; 
const int RX10_TEMP1841 = RX10_TEMP1836 ; 
struct Point1 RX10_TEMP1837 = regionOrdinalPoint1 ( X10_TEMP647 , RX10_TEMP1841 ) ; 
const int i = RX10_TEMP1837 .f0 ; 
/* async ( X10_TEMP648 )  */ 
{ struct Point2 RX10_TEMP1842  ; 
Point2_Point2( &RX10_TEMP1842/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1843 = holes .distValue ; 
struct Region2 RX10_TEMP1844 = RX10_TEMP1843 .dReg ; 
const int RX10_TEMP1845 = searchPointInRegion2 ( RX10_TEMP1844 , RX10_TEMP1842 ) ; 
const int RX10_TEMP1846 = 0 ; 
const int RX10_TEMP1847 = RX10_TEMP1845 < RX10_TEMP1846 ; 
if ( RX10_TEMP1847 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1848 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1848 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1849 = getPlaceFromDist2 ( RX10_TEMP1843 , RX10_TEMP1845 ) ; 
const int RX10_TEMP1851 = /* here  */ 0 ; 
const int RX10_TEMP1852 = RX10_TEMP1849 != RX10_TEMP1851 ; 
if ( RX10_TEMP1852 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1850 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP1850 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1853 = getRefArrayValue2int ( holes , RX10_TEMP1845 ) ; 
const int X10_TEMP653 = RX10_TEMP1853 ; 
struct Point2 RX10_TEMP1854  ; 
Point2_Point2( &RX10_TEMP1854/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1855 = rBufferL .distValue ; 
struct Region2 RX10_TEMP1856 = RX10_TEMP1855 .dReg ; 
const int RX10_TEMP1857 = searchPointInRegion2 ( RX10_TEMP1856 , RX10_TEMP1854 ) ; 
const int RX10_TEMP1858 = 0 ; 
const int RX10_TEMP1859 = RX10_TEMP1857 < RX10_TEMP1858 ; 
if ( RX10_TEMP1859 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1860 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1860 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1861 = getPlaceFromDist2 ( RX10_TEMP1855 , RX10_TEMP1857 ) ; 
const int RX10_TEMP1863 = /* here  */ 0 ; 
const int RX10_TEMP1864 = RX10_TEMP1861 != RX10_TEMP1863 ; 
if ( RX10_TEMP1864 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1862 = "Bad place access for array rBufferL" ; 
fprintf(stderr, RX10_TEMP1862 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP1865 = getRefArrayValue2Particle ( rBufferL , RX10_TEMP1857 ) ; 
struct Particle X10_TEMP657 = RX10_TEMP1865 ; 
struct Particle X10_TEMP658 = X10_TEMP657 ; 
struct Point2 RX10_TEMP1866  ; 
Point2_Point2( &RX10_TEMP1866/*Assignment*/, pl , X10_TEMP653 ) ; 
struct Dist2 RX10_TEMP1867 = part .distValue ; 
struct Region2 RX10_TEMP1868 = RX10_TEMP1867 .dReg ; 
const int RX10_TEMP1869 = searchPointInRegion2 ( RX10_TEMP1868 , RX10_TEMP1866 ) ; 
const int RX10_TEMP1870 = 0 ; 
const int RX10_TEMP1871 = RX10_TEMP1869 < RX10_TEMP1870 ; 
if ( RX10_TEMP1871 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1872 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1872 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1873 = getPlaceFromDist2 ( RX10_TEMP1867 , RX10_TEMP1869 ) ; 
const int RX10_TEMP1875 = /* here  */ 0 ; 
const int RX10_TEMP1876 = RX10_TEMP1873 != RX10_TEMP1875 ; 
if ( RX10_TEMP1876 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1874 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP1874 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP1869 , X10_TEMP658 ) ; 
} 

} 

} 

struct Point1 RX10_TEMP1877  ; 
Point1_Point1( &RX10_TEMP1877/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1878 = inLt .distValue ; 
struct Region1 RX10_TEMP1879 = RX10_TEMP1878 .dReg ; 
const int RX10_TEMP1880 = searchPointInRegion1 ( RX10_TEMP1879 , RX10_TEMP1877 ) ; 
const int RX10_TEMP1881 = 0 ; 
const int RX10_TEMP1882 = RX10_TEMP1880 < RX10_TEMP1881 ; 
if ( RX10_TEMP1882 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1883 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1883 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1884 = getPlaceFromDist1 ( RX10_TEMP1878 , RX10_TEMP1880 ) ; 
const int RX10_TEMP1886 = /* here  */ 0 ; 
const int RX10_TEMP1887 = RX10_TEMP1884 != RX10_TEMP1886 ; 
if ( RX10_TEMP1887 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1885 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP1885 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1888 = getRefArrayValue1int ( inLt , RX10_TEMP1880 ) ; 
const int X10_TEMP660 = RX10_TEMP1888 ; 
const int X10_TEMP662 = holesLeft - X10_TEMP660 ; 
holesLeft = X10_TEMP662 ; const int X10_TEMP663 = 0 ; 
const int X10_TEMP665 = holesLeft > X10_TEMP663 ; 
if ( X10_TEMP665 ) 
{ struct Point1 RX10_TEMP1889  ; 
Point1_Point1( &RX10_TEMP1889/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1890 = inRt .distValue ; 
struct Region1 RX10_TEMP1891 = RX10_TEMP1890 .dReg ; 
const int RX10_TEMP1892 = searchPointInRegion1 ( RX10_TEMP1891 , RX10_TEMP1889 ) ; 
const int RX10_TEMP1893 = 0 ; 
const int RX10_TEMP1894 = RX10_TEMP1892 < RX10_TEMP1893 ; 
if ( RX10_TEMP1894 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1895 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1895 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1896 = getPlaceFromDist1 ( RX10_TEMP1890 , RX10_TEMP1892 ) ; 
const int RX10_TEMP1898 = /* here  */ 0 ; 
const int RX10_TEMP1899 = RX10_TEMP1896 != RX10_TEMP1898 ; 
if ( RX10_TEMP1899 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1897 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP1897 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1900 = getRefArrayValue1int ( inRt , RX10_TEMP1892 ) ; 
const int X10_TEMP669 = RX10_TEMP1900 ; 
const int X10_TEMP671 = X10Util_minInt ( holesLeft , X10_TEMP669 ) ; 
nMove = X10_TEMP671 ; const int X10_TEMP675 = 0 ; 
const int X10_TEMP673 = 1 ; 
const int X10_TEMP676 = nMove - X10_TEMP673 ; 
struct Region1 X10_TEMP678 = createNewRegion1R ( X10_TEMP675 , X10_TEMP676 ) ; 
const int RX10_TEMP1905 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1903 = X10_TEMP678 .regSize ; 
RX10_TEMP1903 = RX10_TEMP1903 - RX10_TEMP1905 ; const int SX10_TEMP218 = 1 ; 
const int RX10_TEMP1904 = RX10_TEMP1903 + SX10_TEMP218 ; 
for ( int SX10_TEMP219 = 0 ; SX10_TEMP219 < RX10_TEMP1904 ; SX10_TEMP219 ++ ) 
{ const int RX10_TEMP1901 = SX10_TEMP219 ; 
const int RX10_TEMP1906 = RX10_TEMP1901 ; 
struct Point1 RX10_TEMP1902 = regionOrdinalPoint1 ( X10_TEMP678 , RX10_TEMP1906 ) ; 
const int i = RX10_TEMP1902 .f0 ; 
struct Point1 RX10_TEMP1907  ; 
Point1_Point1( &RX10_TEMP1907/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1908 = inLt .distValue ; 
struct Region1 RX10_TEMP1909 = RX10_TEMP1908 .dReg ; 
const int RX10_TEMP1910 = searchPointInRegion1 ( RX10_TEMP1909 , RX10_TEMP1907 ) ; 
const int RX10_TEMP1911 = 0 ; 
const int RX10_TEMP1912 = RX10_TEMP1910 < RX10_TEMP1911 ; 
if ( RX10_TEMP1912 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1913 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1913 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1914 = getPlaceFromDist1 ( RX10_TEMP1908 , RX10_TEMP1910 ) ; 
const int RX10_TEMP1916 = /* here  */ 0 ; 
const int RX10_TEMP1917 = RX10_TEMP1914 != RX10_TEMP1916 ; 
if ( RX10_TEMP1917 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1915 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP1915 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1918 = getRefArrayValue1int ( inLt , RX10_TEMP1910 ) ; 
const int X10_TEMP682 = RX10_TEMP1918 ; 
const int X10_TEMP684 = i + X10_TEMP682 ; 
struct Point2 RX10_TEMP1919  ; 
Point2_Point2( &RX10_TEMP1919/*Assignment*/, pl , X10_TEMP684 ) ; 
struct Dist2 RX10_TEMP1920 = holes .distValue ; 
struct Region2 RX10_TEMP1921 = RX10_TEMP1920 .dReg ; 
const int RX10_TEMP1922 = searchPointInRegion2 ( RX10_TEMP1921 , RX10_TEMP1919 ) ; 
const int RX10_TEMP1923 = 0 ; 
const int RX10_TEMP1924 = RX10_TEMP1922 < RX10_TEMP1923 ; 
if ( RX10_TEMP1924 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1925 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1925 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1926 = getPlaceFromDist2 ( RX10_TEMP1920 , RX10_TEMP1922 ) ; 
const int RX10_TEMP1928 = /* here  */ 0 ; 
const int RX10_TEMP1929 = RX10_TEMP1926 != RX10_TEMP1928 ; 
if ( RX10_TEMP1929 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1927 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP1927 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1930 = getRefArrayValue2int ( holes , RX10_TEMP1922 ) ; 
const int X10_TEMP686 = RX10_TEMP1930 ; 
struct Point2 RX10_TEMP1931  ; 
Point2_Point2( &RX10_TEMP1931/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1932 = rBufferR .distValue ; 
struct Region2 RX10_TEMP1933 = RX10_TEMP1932 .dReg ; 
const int RX10_TEMP1934 = searchPointInRegion2 ( RX10_TEMP1933 , RX10_TEMP1931 ) ; 
const int RX10_TEMP1935 = 0 ; 
const int RX10_TEMP1936 = RX10_TEMP1934 < RX10_TEMP1935 ; 
if ( RX10_TEMP1936 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1937 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1937 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1938 = getPlaceFromDist2 ( RX10_TEMP1932 , RX10_TEMP1934 ) ; 
const int RX10_TEMP1940 = /* here  */ 0 ; 
const int RX10_TEMP1941 = RX10_TEMP1938 != RX10_TEMP1940 ; 
if ( RX10_TEMP1941 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1939 = "Bad place access for array rBufferR" ; 
fprintf(stderr, RX10_TEMP1939 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP1942 = getRefArrayValue2Particle ( rBufferR , RX10_TEMP1934 ) ; 
struct Particle X10_TEMP690 = RX10_TEMP1942 ; 
struct Particle X10_TEMP691 = X10_TEMP690 ; 
struct Point2 RX10_TEMP1943  ; 
Point2_Point2( &RX10_TEMP1943/*Assignment*/, pl , X10_TEMP686 ) ; 
struct Dist2 RX10_TEMP1944 = part .distValue ; 
struct Region2 RX10_TEMP1945 = RX10_TEMP1944 .dReg ; 
const int RX10_TEMP1946 = searchPointInRegion2 ( RX10_TEMP1945 , RX10_TEMP1943 ) ; 
const int RX10_TEMP1947 = 0 ; 
const int RX10_TEMP1948 = RX10_TEMP1946 < RX10_TEMP1947 ; 
if ( RX10_TEMP1948 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1949 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1949 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1950 = getPlaceFromDist2 ( RX10_TEMP1944 , RX10_TEMP1946 ) ; 
const int RX10_TEMP1952 = /* here  */ 0 ; 
const int RX10_TEMP1953 = RX10_TEMP1950 != RX10_TEMP1952 ; 
if ( RX10_TEMP1953 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1951 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP1951 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP1946 , X10_TEMP691 ) ; 
} 

} 
else 
{ const int X10_TEMP692 = 0 ; 
const int X10_TEMP694 = X10_TEMP692 - holesLeft ; 
nMove = X10_TEMP694 ; const int X10_TEMP698 = 0 ; 
const int X10_TEMP696 = 1 ; 
const int X10_TEMP699 = nMove - X10_TEMP696 ; 
struct Region1 X10_TEMP701 = createNewRegion1R ( X10_TEMP698 , X10_TEMP699 ) ; 
const int RX10_TEMP1958 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1956 = X10_TEMP701 .regSize ; 
RX10_TEMP1956 = RX10_TEMP1956 - RX10_TEMP1958 ; const int SX10_TEMP220 = 1 ; 
const int RX10_TEMP1957 = RX10_TEMP1956 + SX10_TEMP220 ; 
for ( int SX10_TEMP221 = 0 ; SX10_TEMP221 < RX10_TEMP1957 ; SX10_TEMP221 ++ ) 
{ const int RX10_TEMP1954 = SX10_TEMP221 ; 
const int RX10_TEMP1959 = RX10_TEMP1954 ; 
struct Point1 RX10_TEMP1955 = regionOrdinalPoint1 ( X10_TEMP701 , RX10_TEMP1959 ) ; 
const int i = RX10_TEMP1955 .f0 ; 
struct Point1 RX10_TEMP1960  ; 
Point1_Point1( &RX10_TEMP1960/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1961 = nPart .distValue ; 
struct Region1 RX10_TEMP1962 = RX10_TEMP1961 .dReg ; 
const int RX10_TEMP1963 = searchPointInRegion1 ( RX10_TEMP1962 , RX10_TEMP1960 ) ; 
const int RX10_TEMP1964 = 0 ; 
const int RX10_TEMP1965 = RX10_TEMP1963 < RX10_TEMP1964 ; 
if ( RX10_TEMP1965 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1966 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1966 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1967 = getPlaceFromDist1 ( RX10_TEMP1961 , RX10_TEMP1963 ) ; 
const int RX10_TEMP1969 = /* here  */ 0 ; 
const int RX10_TEMP1970 = RX10_TEMP1967 != RX10_TEMP1969 ; 
if ( RX10_TEMP1970 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1968 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP1968 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1971 = getRefArrayValue1int ( nPart , RX10_TEMP1963 ) ; 
const int X10_TEMP704 = RX10_TEMP1971 ; 
const int X10_TEMP706 = i + X10_TEMP704 ; 
const int X10_TEMP709 = i + holesTotal ; 
struct Point2 RX10_TEMP1972  ; 
Point2_Point2( &RX10_TEMP1972/*Assignment*/, pl , X10_TEMP709 ) ; 
struct Dist2 RX10_TEMP1973 = rBufferL .distValue ; 
struct Region2 RX10_TEMP1974 = RX10_TEMP1973 .dReg ; 
const int RX10_TEMP1975 = searchPointInRegion2 ( RX10_TEMP1974 , RX10_TEMP1972 ) ; 
const int RX10_TEMP1976 = 0 ; 
const int RX10_TEMP1977 = RX10_TEMP1975 < RX10_TEMP1976 ; 
if ( RX10_TEMP1977 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1978 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1978 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1979 = getPlaceFromDist2 ( RX10_TEMP1973 , RX10_TEMP1975 ) ; 
const int RX10_TEMP1981 = /* here  */ 0 ; 
const int RX10_TEMP1982 = RX10_TEMP1979 != RX10_TEMP1981 ; 
if ( RX10_TEMP1982 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1980 = "Bad place access for array rBufferL" ; 
fprintf(stderr, RX10_TEMP1980 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP1983 = getRefArrayValue2Particle ( rBufferL , RX10_TEMP1975 ) ; 
struct Particle X10_TEMP711 = RX10_TEMP1983 ; 
struct Particle X10_TEMP712 = X10_TEMP711 ; 
struct Point2 RX10_TEMP1984  ; 
Point2_Point2( &RX10_TEMP1984/*Assignment*/, pl , X10_TEMP706 ) ; 
struct Dist2 RX10_TEMP1985 = part .distValue ; 
struct Region2 RX10_TEMP1986 = RX10_TEMP1985 .dReg ; 
const int RX10_TEMP1987 = searchPointInRegion2 ( RX10_TEMP1986 , RX10_TEMP1984 ) ; 
const int RX10_TEMP1988 = 0 ; 
const int RX10_TEMP1989 = RX10_TEMP1987 < RX10_TEMP1988 ; 
if ( RX10_TEMP1989 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1990 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1990 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1991 = getPlaceFromDist2 ( RX10_TEMP1985 , RX10_TEMP1987 ) ; 
const int RX10_TEMP1993 = /* here  */ 0 ; 
const int RX10_TEMP1994 = RX10_TEMP1991 != RX10_TEMP1993 ; 
if ( RX10_TEMP1994 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1992 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP1992 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP1987 , X10_TEMP712 ) ; 
} 

} 


const int X10_TEMP713 = 0 ; 
const int X10_TEMP715 = holesLeft <= X10_TEMP713 ; 
if ( X10_TEMP715 ) 
{ struct Point1 RX10_TEMP1995  ; 
Point1_Point1( &RX10_TEMP1995/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1996 = nPart .distValue ; 
struct Region1 RX10_TEMP1997 = RX10_TEMP1996 .dReg ; 
const int RX10_TEMP1998 = searchPointInRegion1 ( RX10_TEMP1997 , RX10_TEMP1995 ) ; 
const int RX10_TEMP1999 = 0 ; 
const int RX10_TEMP2000 = RX10_TEMP1998 < RX10_TEMP1999 ; 
if ( RX10_TEMP2000 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2001 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2001 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2002 = getPlaceFromDist1 ( RX10_TEMP1996 , RX10_TEMP1998 ) ; 
const int RX10_TEMP2004 = /* here  */ 0 ; 
const int RX10_TEMP2005 = RX10_TEMP2002 != RX10_TEMP2004 ; 
if ( RX10_TEMP2005 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2003 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2003 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2006 = getRefArrayValue1int ( nPart , RX10_TEMP1998 ) ; 
const int X10_TEMP718 = RX10_TEMP2006 ; 
const int X10_TEMP720 = X10_TEMP718 - holesLeft ; 
const int X10_TEMP721 = X10_TEMP720 ; 
struct Point1 RX10_TEMP2007  ; 
Point1_Point1( &RX10_TEMP2007/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2008 = nPart .distValue ; 
struct Region1 RX10_TEMP2009 = RX10_TEMP2008 .dReg ; 
const int RX10_TEMP2010 = searchPointInRegion1 ( RX10_TEMP2009 , RX10_TEMP2007 ) ; 
const int RX10_TEMP2011 = 0 ; 
const int RX10_TEMP2012 = RX10_TEMP2010 < RX10_TEMP2011 ; 
if ( RX10_TEMP2012 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2013 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2013 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2014 = getPlaceFromDist1 ( RX10_TEMP2008 , RX10_TEMP2010 ) ; 
const int RX10_TEMP2016 = /* here  */ 0 ; 
const int RX10_TEMP2017 = RX10_TEMP2014 != RX10_TEMP2016 ; 
if ( RX10_TEMP2017 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2015 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2015 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nPart , RX10_TEMP2010 , X10_TEMP721 ) ; 
struct Point1 RX10_TEMP2018  ; 
Point1_Point1( &RX10_TEMP2018/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2019 = inLt .distValue ; 
struct Region1 RX10_TEMP2020 = RX10_TEMP2019 .dReg ; 
const int RX10_TEMP2021 = searchPointInRegion1 ( RX10_TEMP2020 , RX10_TEMP2018 ) ; 
const int RX10_TEMP2022 = 0 ; 
const int RX10_TEMP2023 = RX10_TEMP2021 < RX10_TEMP2022 ; 
if ( RX10_TEMP2023 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2024 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2024 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2025 = getPlaceFromDist1 ( RX10_TEMP2019 , RX10_TEMP2021 ) ; 
const int RX10_TEMP2027 = /* here  */ 0 ; 
const int RX10_TEMP2028 = RX10_TEMP2025 != RX10_TEMP2027 ; 
if ( RX10_TEMP2028 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2026 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP2026 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2029 = getRefArrayValue1int ( inLt , RX10_TEMP2021 ) ; 
const int X10_TEMP724 = RX10_TEMP2029 ; 
holesTotal = X10_TEMP724 ; } 

struct Point1 RX10_TEMP2030  ; 
Point1_Point1( &RX10_TEMP2030/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2031 = inLt .distValue ; 
struct Region1 RX10_TEMP2032 = RX10_TEMP2031 .dReg ; 
const int RX10_TEMP2033 = searchPointInRegion1 ( RX10_TEMP2032 , RX10_TEMP2030 ) ; 
const int RX10_TEMP2034 = 0 ; 
const int RX10_TEMP2035 = RX10_TEMP2033 < RX10_TEMP2034 ; 
if ( RX10_TEMP2035 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2036 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2036 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2037 = getPlaceFromDist1 ( RX10_TEMP2031 , RX10_TEMP2033 ) ; 
const int RX10_TEMP2039 = /* here  */ 0 ; 
const int RX10_TEMP2040 = RX10_TEMP2037 != RX10_TEMP2039 ; 
if ( RX10_TEMP2040 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2038 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP2038 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2041 = getRefArrayValue1int ( inLt , RX10_TEMP2033 ) ; 
const int X10_TEMP727 = RX10_TEMP2041 ; 
struct Point1 RX10_TEMP2042  ; 
Point1_Point1( &RX10_TEMP2042/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2043 = inRt .distValue ; 
struct Region1 RX10_TEMP2044 = RX10_TEMP2043 .dReg ; 
const int RX10_TEMP2045 = searchPointInRegion1 ( RX10_TEMP2044 , RX10_TEMP2042 ) ; 
const int RX10_TEMP2046 = 0 ; 
const int RX10_TEMP2047 = RX10_TEMP2045 < RX10_TEMP2046 ; 
if ( RX10_TEMP2047 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2048 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2048 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2049 = getPlaceFromDist1 ( RX10_TEMP2043 , RX10_TEMP2045 ) ; 
const int RX10_TEMP2051 = /* here  */ 0 ; 
const int RX10_TEMP2052 = RX10_TEMP2049 != RX10_TEMP2051 ; 
if ( RX10_TEMP2052 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2050 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2050 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2053 = getRefArrayValue1int ( inRt , RX10_TEMP2045 ) ; 
const int X10_TEMP728 = RX10_TEMP2053 ; 
const int X10_TEMP730 = X10_TEMP727 + X10_TEMP728 ; 
const int X10_TEMP732 = holesTotal - X10_TEMP730 ; 
holesLeft = X10_TEMP732 ; const int X10_TEMP733 = 0 ; 
const int X10_TEMP735 = holesLeft > X10_TEMP733 ; 
if ( X10_TEMP735 ) 
{ struct Point1 RX10_TEMP2054  ; 
Point1_Point1( &RX10_TEMP2054/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2055 = inLt .distValue ; 
struct Region1 RX10_TEMP2056 = RX10_TEMP2055 .dReg ; 
const int RX10_TEMP2057 = searchPointInRegion1 ( RX10_TEMP2056 , RX10_TEMP2054 ) ; 
const int RX10_TEMP2058 = 0 ; 
const int RX10_TEMP2059 = RX10_TEMP2057 < RX10_TEMP2058 ; 
if ( RX10_TEMP2059 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2060 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2060 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2061 = getPlaceFromDist1 ( RX10_TEMP2055 , RX10_TEMP2057 ) ; 
const int RX10_TEMP2063 = /* here  */ 0 ; 
const int RX10_TEMP2064 = RX10_TEMP2061 != RX10_TEMP2063 ; 
if ( RX10_TEMP2064 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2062 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP2062 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2065 = getRefArrayValue1int ( inLt , RX10_TEMP2057 ) ; 
const int X10_TEMP738 = RX10_TEMP2065 ; 
struct Point1 RX10_TEMP2066  ; 
Point1_Point1( &RX10_TEMP2066/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2067 = inRt .distValue ; 
struct Region1 RX10_TEMP2068 = RX10_TEMP2067 .dReg ; 
const int RX10_TEMP2069 = searchPointInRegion1 ( RX10_TEMP2068 , RX10_TEMP2066 ) ; 
const int RX10_TEMP2070 = 0 ; 
const int RX10_TEMP2071 = RX10_TEMP2069 < RX10_TEMP2070 ; 
if ( RX10_TEMP2071 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2072 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2072 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2073 = getPlaceFromDist1 ( RX10_TEMP2067 , RX10_TEMP2069 ) ; 
const int RX10_TEMP2075 = /* here  */ 0 ; 
const int RX10_TEMP2076 = RX10_TEMP2073 != RX10_TEMP2075 ; 
if ( RX10_TEMP2076 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2074 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2074 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2077 = getRefArrayValue1int ( inRt , RX10_TEMP2069 ) ; 
const int X10_TEMP739 = RX10_TEMP2077 ; 
const int X10_TEMP741 = X10_TEMP738 + X10_TEMP739 ; 
holesTotal = X10_TEMP741 ; const int X10_TEMP744 = holesLeft ; 
struct Point1 RX10_TEMP2078  ; 
Point1_Point1( &RX10_TEMP2078/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2079 = inRt .distValue ; 
struct Region1 RX10_TEMP2080 = RX10_TEMP2079 .dReg ; 
const int RX10_TEMP2081 = searchPointInRegion1 ( RX10_TEMP2080 , RX10_TEMP2078 ) ; 
const int RX10_TEMP2082 = 0 ; 
const int RX10_TEMP2083 = RX10_TEMP2081 < RX10_TEMP2082 ; 
if ( RX10_TEMP2083 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2084 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2084 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2085 = getPlaceFromDist1 ( RX10_TEMP2079 , RX10_TEMP2081 ) ; 
const int RX10_TEMP2087 = /* here  */ 0 ; 
const int RX10_TEMP2088 = RX10_TEMP2085 != RX10_TEMP2087 ; 
if ( RX10_TEMP2088 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2086 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2086 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP2081 , X10_TEMP744 ) ; 
} 
else 
{ struct Point1 RX10_TEMP2089  ; 
Point1_Point1( &RX10_TEMP2089/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2090 = inLt .distValue ; 
struct Region1 RX10_TEMP2091 = RX10_TEMP2090 .dReg ; 
const int RX10_TEMP2092 = searchPointInRegion1 ( RX10_TEMP2091 , RX10_TEMP2089 ) ; 
const int RX10_TEMP2093 = 0 ; 
const int RX10_TEMP2094 = RX10_TEMP2092 < RX10_TEMP2093 ; 
if ( RX10_TEMP2094 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2095 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2095 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2096 = getPlaceFromDist1 ( RX10_TEMP2090 , RX10_TEMP2092 ) ; 
const int RX10_TEMP2098 = /* here  */ 0 ; 
const int RX10_TEMP2099 = RX10_TEMP2096 != RX10_TEMP2098 ; 
if ( RX10_TEMP2099 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2097 = "Bad place access for array inLt" ; 
fprintf(stderr, RX10_TEMP2097 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2100 = getRefArrayValue1int ( inLt , RX10_TEMP2092 ) ; 
const int X10_TEMP746 = RX10_TEMP2100 ; 
const int X10_TEMP748 = holesTotal - X10_TEMP746 ; 
holesTotal = X10_TEMP748 ; const int X10_TEMP750 = 0 ; 
const int X10_TEMP752 = X10_TEMP750 - holesLeft ; 
const int X10_TEMP753 = X10_TEMP752 ; 
struct Point1 RX10_TEMP2101  ; 
Point1_Point1( &RX10_TEMP2101/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2102 = inRt .distValue ; 
struct Region1 RX10_TEMP2103 = RX10_TEMP2102 .dReg ; 
const int RX10_TEMP2104 = searchPointInRegion1 ( RX10_TEMP2103 , RX10_TEMP2101 ) ; 
const int RX10_TEMP2105 = 0 ; 
const int RX10_TEMP2106 = RX10_TEMP2104 < RX10_TEMP2105 ; 
if ( RX10_TEMP2106 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2107 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2107 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2108 = getPlaceFromDist1 ( RX10_TEMP2102 , RX10_TEMP2104 ) ; 
const int RX10_TEMP2110 = /* here  */ 0 ; 
const int RX10_TEMP2111 = RX10_TEMP2108 != RX10_TEMP2110 ; 
if ( RX10_TEMP2111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2109 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2109 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRt , RX10_TEMP2104 , X10_TEMP753 ) ; 
} 


const int X10_TEMP759 = 0 ; 
struct Point1 RX10_TEMP2112  ; 
Point1_Point1( &RX10_TEMP2112/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2113 = inRt .distValue ; 
struct Region1 RX10_TEMP2114 = RX10_TEMP2113 .dReg ; 
const int RX10_TEMP2115 = searchPointInRegion1 ( RX10_TEMP2114 , RX10_TEMP2112 ) ; 
const int RX10_TEMP2116 = 0 ; 
const int RX10_TEMP2117 = RX10_TEMP2115 < RX10_TEMP2116 ; 
if ( RX10_TEMP2117 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2118 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2118 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2119 = getPlaceFromDist1 ( RX10_TEMP2113 , RX10_TEMP2115 ) ; 
const int RX10_TEMP2121 = /* here  */ 0 ; 
const int RX10_TEMP2122 = RX10_TEMP2119 != RX10_TEMP2121 ; 
if ( RX10_TEMP2122 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2120 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2120 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2123 = getRefArrayValue1int ( inRt , RX10_TEMP2115 ) ; 
const int X10_TEMP756 = RX10_TEMP2123 ; 
const int X10_TEMP757 = 1 ; 
const int X10_TEMP760 = X10_TEMP756 - X10_TEMP757 ; 
struct Region1 X10_TEMP762 = createNewRegion1R ( X10_TEMP759 , X10_TEMP760 ) ; 
const int RX10_TEMP2128 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2126 = X10_TEMP762 .regSize ; 
RX10_TEMP2126 = RX10_TEMP2126 - RX10_TEMP2128 ; const int SX10_TEMP222 = 1 ; 
const int RX10_TEMP2127 = RX10_TEMP2126 + SX10_TEMP222 ; 
for ( int SX10_TEMP223 = 0 ; SX10_TEMP223 < RX10_TEMP2127 ; SX10_TEMP223 ++ ) 
{ const int RX10_TEMP2124 = SX10_TEMP223 ; 
const int RX10_TEMP2129 = RX10_TEMP2124 ; 
struct Point1 RX10_TEMP2125 = regionOrdinalPoint1 ( X10_TEMP762 , RX10_TEMP2129 ) ; 
const int i = RX10_TEMP2125 .f0 ; 
const int X10_TEMP763 = 0 ; 
const int X10_TEMP765 = holesLeft > X10_TEMP763 ; 
if ( X10_TEMP765 ) 
{ struct Point1 RX10_TEMP2130  ; 
Point1_Point1( &RX10_TEMP2130/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2131 = nPart .distValue ; 
struct Region1 RX10_TEMP2132 = RX10_TEMP2131 .dReg ; 
const int RX10_TEMP2133 = searchPointInRegion1 ( RX10_TEMP2132 , RX10_TEMP2130 ) ; 
const int RX10_TEMP2134 = 0 ; 
const int RX10_TEMP2135 = RX10_TEMP2133 < RX10_TEMP2134 ; 
if ( RX10_TEMP2135 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2136 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2136 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2137 = getPlaceFromDist1 ( RX10_TEMP2131 , RX10_TEMP2133 ) ; 
const int RX10_TEMP2139 = /* here  */ 0 ; 
const int RX10_TEMP2140 = RX10_TEMP2137 != RX10_TEMP2139 ; 
if ( RX10_TEMP2140 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2138 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2138 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2141 = getRefArrayValue1int ( nPart , RX10_TEMP2133 ) ; 
const int X10_TEMP767 = RX10_TEMP2141 ; 
const int X10_TEMP768 = X10_TEMP767 - i ; 
const int X10_TEMP769 = 1 ; 
const int i1 = X10_TEMP768 - X10_TEMP769 ; 
const int X10_TEMP771 = holesTotal + holesLeft ; 
const int X10_TEMP772 = X10_TEMP771 - i ; 
const int X10_TEMP773 = 1 ; 
const int i2 = X10_TEMP772 - X10_TEMP773 ; 
struct Point2 RX10_TEMP2142  ; 
Point2_Point2( &RX10_TEMP2142/*Assignment*/, pl , i2 ) ; 
struct Dist2 RX10_TEMP2143 = holes .distValue ; 
struct Region2 RX10_TEMP2144 = RX10_TEMP2143 .dReg ; 
const int RX10_TEMP2145 = searchPointInRegion2 ( RX10_TEMP2144 , RX10_TEMP2142 ) ; 
const int RX10_TEMP2146 = 0 ; 
const int RX10_TEMP2147 = RX10_TEMP2145 < RX10_TEMP2146 ; 
if ( RX10_TEMP2147 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2148 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2148 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2149 = getPlaceFromDist2 ( RX10_TEMP2143 , RX10_TEMP2145 ) ; 
const int RX10_TEMP2151 = /* here  */ 0 ; 
const int RX10_TEMP2152 = RX10_TEMP2149 != RX10_TEMP2151 ; 
if ( RX10_TEMP2152 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2150 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP2150 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2153 = getRefArrayValue2int ( holes , RX10_TEMP2145 ) ; 
const int X10_TEMP777 = RX10_TEMP2153 ; 
const int X10_TEMP779 = i1 > X10_TEMP777 ; 
if ( X10_TEMP779 ) 
{ struct Point2 RX10_TEMP2154  ; 
Point2_Point2( &RX10_TEMP2154/*Assignment*/, pl , i2 ) ; 
struct Dist2 RX10_TEMP2155 = holes .distValue ; 
struct Region2 RX10_TEMP2156 = RX10_TEMP2155 .dReg ; 
const int RX10_TEMP2157 = searchPointInRegion2 ( RX10_TEMP2156 , RX10_TEMP2154 ) ; 
const int RX10_TEMP2158 = 0 ; 
const int RX10_TEMP2159 = RX10_TEMP2157 < RX10_TEMP2158 ; 
if ( RX10_TEMP2159 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2160 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2160 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2161 = getPlaceFromDist2 ( RX10_TEMP2155 , RX10_TEMP2157 ) ; 
const int RX10_TEMP2163 = /* here  */ 0 ; 
const int RX10_TEMP2164 = RX10_TEMP2161 != RX10_TEMP2163 ; 
if ( RX10_TEMP2164 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2162 = "Bad place access for array holes" ; 
fprintf(stderr, RX10_TEMP2162 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2165 = getRefArrayValue2int ( holes , RX10_TEMP2157 ) ; 
const int X10_TEMP784 = RX10_TEMP2165 ; 
struct Point2 RX10_TEMP2166  ; 
Point2_Point2( &RX10_TEMP2166/*Assignment*/, pl , i1 ) ; 
struct Dist2 RX10_TEMP2167 = part .distValue ; 
struct Region2 RX10_TEMP2168 = RX10_TEMP2167 .dReg ; 
const int RX10_TEMP2169 = searchPointInRegion2 ( RX10_TEMP2168 , RX10_TEMP2166 ) ; 
const int RX10_TEMP2170 = 0 ; 
const int RX10_TEMP2171 = RX10_TEMP2169 < RX10_TEMP2170 ; 
if ( RX10_TEMP2171 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2172 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2172 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2173 = getPlaceFromDist2 ( RX10_TEMP2167 , RX10_TEMP2169 ) ; 
const int RX10_TEMP2175 = /* here  */ 0 ; 
const int RX10_TEMP2176 = RX10_TEMP2173 != RX10_TEMP2175 ; 
if ( RX10_TEMP2176 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2174 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP2174 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP2177 = getRefArrayValue2Particle ( part , RX10_TEMP2169 ) ; 
struct Particle X10_TEMP788 = RX10_TEMP2177 ; 
struct Particle X10_TEMP789 = X10_TEMP788 ; 
struct Point2 RX10_TEMP2178  ; 
Point2_Point2( &RX10_TEMP2178/*Assignment*/, pl , X10_TEMP784 ) ; 
struct Dist2 RX10_TEMP2179 = part .distValue ; 
struct Region2 RX10_TEMP2180 = RX10_TEMP2179 .dReg ; 
const int RX10_TEMP2181 = searchPointInRegion2 ( RX10_TEMP2180 , RX10_TEMP2178 ) ; 
const int RX10_TEMP2182 = 0 ; 
const int RX10_TEMP2183 = RX10_TEMP2181 < RX10_TEMP2182 ; 
if ( RX10_TEMP2183 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2184 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2184 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2185 = getPlaceFromDist2 ( RX10_TEMP2179 , RX10_TEMP2181 ) ; 
const int RX10_TEMP2187 = /* here  */ 0 ; 
const int RX10_TEMP2188 = RX10_TEMP2185 != RX10_TEMP2187 ; 
if ( RX10_TEMP2188 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2186 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP2186 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP2181 , X10_TEMP789 ) ; 
} 

} 
else 
{ struct Point1 RX10_TEMP2189  ; 
Point1_Point1( &RX10_TEMP2189/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2190 = nPart .distValue ; 
struct Region1 RX10_TEMP2191 = RX10_TEMP2190 .dReg ; 
const int RX10_TEMP2192 = searchPointInRegion1 ( RX10_TEMP2191 , RX10_TEMP2189 ) ; 
const int RX10_TEMP2193 = 0 ; 
const int RX10_TEMP2194 = RX10_TEMP2192 < RX10_TEMP2193 ; 
if ( RX10_TEMP2194 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2195 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2195 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2196 = getPlaceFromDist1 ( RX10_TEMP2190 , RX10_TEMP2192 ) ; 
const int RX10_TEMP2198 = /* here  */ 0 ; 
const int RX10_TEMP2199 = RX10_TEMP2196 != RX10_TEMP2198 ; 
if ( RX10_TEMP2199 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2197 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2197 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2200 = getRefArrayValue1int ( nPart , RX10_TEMP2192 ) ; 
const int X10_TEMP792 = RX10_TEMP2200 ; 
const int X10_TEMP794 = i + X10_TEMP792 ; 
const int X10_TEMP797 = i + holesTotal ; 
struct Point2 RX10_TEMP2201  ; 
Point2_Point2( &RX10_TEMP2201/*Assignment*/, pl , X10_TEMP797 ) ; 
struct Dist2 RX10_TEMP2202 = rBufferR .distValue ; 
struct Region2 RX10_TEMP2203 = RX10_TEMP2202 .dReg ; 
const int RX10_TEMP2204 = searchPointInRegion2 ( RX10_TEMP2203 , RX10_TEMP2201 ) ; 
const int RX10_TEMP2205 = 0 ; 
const int RX10_TEMP2206 = RX10_TEMP2204 < RX10_TEMP2205 ; 
if ( RX10_TEMP2206 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2207 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2207 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2208 = getPlaceFromDist2 ( RX10_TEMP2202 , RX10_TEMP2204 ) ; 
const int RX10_TEMP2210 = /* here  */ 0 ; 
const int RX10_TEMP2211 = RX10_TEMP2208 != RX10_TEMP2210 ; 
if ( RX10_TEMP2211 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2209 = "Bad place access for array rBufferR" ; 
fprintf(stderr, RX10_TEMP2209 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP2212 = getRefArrayValue2Particle ( rBufferR , RX10_TEMP2204 ) ; 
struct Particle X10_TEMP799 = RX10_TEMP2212 ; 
struct Particle X10_TEMP800 = X10_TEMP799 ; 
struct Point2 RX10_TEMP2213  ; 
Point2_Point2( &RX10_TEMP2213/*Assignment*/, pl , X10_TEMP794 ) ; 
struct Dist2 RX10_TEMP2214 = part .distValue ; 
struct Region2 RX10_TEMP2215 = RX10_TEMP2214 .dReg ; 
const int RX10_TEMP2216 = searchPointInRegion2 ( RX10_TEMP2215 , RX10_TEMP2213 ) ; 
const int RX10_TEMP2217 = 0 ; 
const int RX10_TEMP2218 = RX10_TEMP2216 < RX10_TEMP2217 ; 
if ( RX10_TEMP2218 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2219 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2219 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2220 = getPlaceFromDist2 ( RX10_TEMP2214 , RX10_TEMP2216 ) ; 
const int RX10_TEMP2222 = /* here  */ 0 ; 
const int RX10_TEMP2223 = RX10_TEMP2220 != RX10_TEMP2222 ; 
if ( RX10_TEMP2223 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2221 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP2221 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( part , RX10_TEMP2216 , X10_TEMP800 ) ; 
} 


} 

const int X10_TEMP801 = 0 ; 
const int X10_TEMP803 = holesLeft > X10_TEMP801 ; 
if ( X10_TEMP803 ) 
{ struct Point1 RX10_TEMP2224  ; 
Point1_Point1( &RX10_TEMP2224/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2225 = nPart .distValue ; 
struct Region1 RX10_TEMP2226 = RX10_TEMP2225 .dReg ; 
const int RX10_TEMP2227 = searchPointInRegion1 ( RX10_TEMP2226 , RX10_TEMP2224 ) ; 
const int RX10_TEMP2228 = 0 ; 
const int RX10_TEMP2229 = RX10_TEMP2227 < RX10_TEMP2228 ; 
if ( RX10_TEMP2229 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2230 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2230 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2231 = getPlaceFromDist1 ( RX10_TEMP2225 , RX10_TEMP2227 ) ; 
const int RX10_TEMP2233 = /* here  */ 0 ; 
const int RX10_TEMP2234 = RX10_TEMP2231 != RX10_TEMP2233 ; 
if ( RX10_TEMP2234 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2232 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2232 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2235 = getRefArrayValue1int ( nPart , RX10_TEMP2227 ) ; 
const int X10_TEMP807 = RX10_TEMP2235 ; 
struct Point1 RX10_TEMP2236  ; 
Point1_Point1( &RX10_TEMP2236/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2237 = inRt .distValue ; 
struct Region1 RX10_TEMP2238 = RX10_TEMP2237 .dReg ; 
const int RX10_TEMP2239 = searchPointInRegion1 ( RX10_TEMP2238 , RX10_TEMP2236 ) ; 
const int RX10_TEMP2240 = 0 ; 
const int RX10_TEMP2241 = RX10_TEMP2239 < RX10_TEMP2240 ; 
if ( RX10_TEMP2241 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2242 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2242 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2243 = getPlaceFromDist1 ( RX10_TEMP2237 , RX10_TEMP2239 ) ; 
const int RX10_TEMP2245 = /* here  */ 0 ; 
const int RX10_TEMP2246 = RX10_TEMP2243 != RX10_TEMP2245 ; 
if ( RX10_TEMP2246 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2244 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2244 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2247 = getRefArrayValue1int ( inRt , RX10_TEMP2239 ) ; 
const int X10_TEMP808 = RX10_TEMP2247 ; 
const int X10_TEMP810 = X10_TEMP807 - X10_TEMP808 ; 
const int X10_TEMP811 = X10_TEMP810 ; 
struct Point1 RX10_TEMP2248  ; 
Point1_Point1( &RX10_TEMP2248/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2249 = nPart .distValue ; 
struct Region1 RX10_TEMP2250 = RX10_TEMP2249 .dReg ; 
const int RX10_TEMP2251 = searchPointInRegion1 ( RX10_TEMP2250 , RX10_TEMP2248 ) ; 
const int RX10_TEMP2252 = 0 ; 
const int RX10_TEMP2253 = RX10_TEMP2251 < RX10_TEMP2252 ; 
if ( RX10_TEMP2253 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2254 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2254 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2255 = getPlaceFromDist1 ( RX10_TEMP2249 , RX10_TEMP2251 ) ; 
const int RX10_TEMP2257 = /* here  */ 0 ; 
const int RX10_TEMP2258 = RX10_TEMP2255 != RX10_TEMP2257 ; 
if ( RX10_TEMP2258 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2256 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2256 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nPart , RX10_TEMP2251 , X10_TEMP811 ) ; 
} 
else 
{ struct Point1 RX10_TEMP2259  ; 
Point1_Point1( &RX10_TEMP2259/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2260 = nPart .distValue ; 
struct Region1 RX10_TEMP2261 = RX10_TEMP2260 .dReg ; 
const int RX10_TEMP2262 = searchPointInRegion1 ( RX10_TEMP2261 , RX10_TEMP2259 ) ; 
const int RX10_TEMP2263 = 0 ; 
const int RX10_TEMP2264 = RX10_TEMP2262 < RX10_TEMP2263 ; 
if ( RX10_TEMP2264 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2265 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2265 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2266 = getPlaceFromDist1 ( RX10_TEMP2260 , RX10_TEMP2262 ) ; 
const int RX10_TEMP2268 = /* here  */ 0 ; 
const int RX10_TEMP2269 = RX10_TEMP2266 != RX10_TEMP2268 ; 
if ( RX10_TEMP2269 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2267 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2267 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2270 = getRefArrayValue1int ( nPart , RX10_TEMP2262 ) ; 
const int X10_TEMP815 = RX10_TEMP2270 ; 
struct Point1 RX10_TEMP2271  ; 
Point1_Point1( &RX10_TEMP2271/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2272 = inRt .distValue ; 
struct Region1 RX10_TEMP2273 = RX10_TEMP2272 .dReg ; 
const int RX10_TEMP2274 = searchPointInRegion1 ( RX10_TEMP2273 , RX10_TEMP2271 ) ; 
const int RX10_TEMP2275 = 0 ; 
const int RX10_TEMP2276 = RX10_TEMP2274 < RX10_TEMP2275 ; 
if ( RX10_TEMP2276 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2277 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2277 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2278 = getPlaceFromDist1 ( RX10_TEMP2272 , RX10_TEMP2274 ) ; 
const int RX10_TEMP2280 = /* here  */ 0 ; 
const int RX10_TEMP2281 = RX10_TEMP2278 != RX10_TEMP2280 ; 
if ( RX10_TEMP2281 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2279 = "Bad place access for array inRt" ; 
fprintf(stderr, RX10_TEMP2279 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2282 = getRefArrayValue1int ( inRt , RX10_TEMP2274 ) ; 
const int X10_TEMP816 = RX10_TEMP2282 ; 
const int X10_TEMP818 = X10_TEMP815 + X10_TEMP816 ; 
const int X10_TEMP819 = X10_TEMP818 ; 
struct Point1 RX10_TEMP2283  ; 
Point1_Point1( &RX10_TEMP2283/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2284 = nPart .distValue ; 
struct Region1 RX10_TEMP2285 = RX10_TEMP2284 .dReg ; 
const int RX10_TEMP2286 = searchPointInRegion1 ( RX10_TEMP2285 , RX10_TEMP2283 ) ; 
const int RX10_TEMP2287 = 0 ; 
const int RX10_TEMP2288 = RX10_TEMP2286 < RX10_TEMP2287 ; 
if ( RX10_TEMP2288 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2289 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2289 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2290 = getPlaceFromDist1 ( RX10_TEMP2284 , RX10_TEMP2286 ) ; 
const int RX10_TEMP2292 = /* here  */ 0 ; 
const int RX10_TEMP2293 = RX10_TEMP2290 != RX10_TEMP2292 ; 
if ( RX10_TEMP2293 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2291 = "Bad place access for array nPart" ; 
fprintf(stderr, RX10_TEMP2291 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nPart , RX10_TEMP2286 , X10_TEMP819 ) ; 
} 


const int X10_TEMP822 = 0 ; 
const int X10_TEMP823 = X10_TEMP822 ; 
struct Point1 RX10_TEMP2294  ; 
Point1_Point1( &RX10_TEMP2294/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP2295 = nSent .distValue ; 
struct Region1 RX10_TEMP2296 = RX10_TEMP2295 .dReg ; 
const int RX10_TEMP2297 = searchPointInRegion1 ( RX10_TEMP2296 , RX10_TEMP2294 ) ; 
const int RX10_TEMP2298 = 0 ; 
const int RX10_TEMP2299 = RX10_TEMP2297 < RX10_TEMP2298 ; 
if ( RX10_TEMP2299 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2300 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2300 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2301 = getPlaceFromDist1 ( RX10_TEMP2295 , RX10_TEMP2297 ) ; 
const int RX10_TEMP2303 = /* here  */ 0 ; 
const int RX10_TEMP2304 = RX10_TEMP2301 != RX10_TEMP2303 ; 
if ( RX10_TEMP2304 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2302 = "Bad place access for array nSent" ; 
fprintf(stderr, RX10_TEMP2302 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( nSent , RX10_TEMP2297 , X10_TEMP823 ) ; 
} 

} 

} 

const int X10_TEMP825 = 4 ; 
const int X10_TEMP827 = 4 ; 
struct Point1 RX10_TEMP2305  ; 
Point1_Point1( &RX10_TEMP2305/*Assignment*/, X10_TEMP827 ) ; 
struct Dist1 RX10_TEMP2306 = info .distValue ; 
struct Region1 RX10_TEMP2307 = RX10_TEMP2306 .dReg ; 
const int RX10_TEMP2308 = searchPointInRegion1 ( RX10_TEMP2307 , RX10_TEMP2305 ) ; 
const int RX10_TEMP2309 = 0 ; 
const int RX10_TEMP2310 = RX10_TEMP2308 < RX10_TEMP2309 ; 
if ( RX10_TEMP2310 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2311 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2311 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2312 = getPlaceFromDist1 ( RX10_TEMP2306 , RX10_TEMP2308 ) ; 
const int RX10_TEMP2314 = /* here  */ 0 ; 
const int RX10_TEMP2315 = RX10_TEMP2312 != RX10_TEMP2314 ; 
if ( RX10_TEMP2315 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2313 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2313 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2316 = getRefArrayValue1int ( info , RX10_TEMP2308 ) ; 
const int X10_TEMP830 = RX10_TEMP2316 ; 
const int X10_TEMP832 = X10Util_maxInt ( X10_TEMP830 , mter ) ; 
const int X10_TEMP833 = X10_TEMP832 ; 
struct Point1 RX10_TEMP2317  ; 
Point1_Point1( &RX10_TEMP2317/*Assignment*/, X10_TEMP825 ) ; 
struct Dist1 RX10_TEMP2318 = info .distValue ; 
struct Region1 RX10_TEMP2319 = RX10_TEMP2318 .dReg ; 
const int RX10_TEMP2320 = searchPointInRegion1 ( RX10_TEMP2319 , RX10_TEMP2317 ) ; 
const int RX10_TEMP2321 = 0 ; 
const int RX10_TEMP2322 = RX10_TEMP2320 < RX10_TEMP2321 ; 
if ( RX10_TEMP2322 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2323 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2323 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2324 = getPlaceFromDist1 ( RX10_TEMP2318 , RX10_TEMP2320 ) ; 
const int RX10_TEMP2326 = /* here  */ 0 ; 
const int RX10_TEMP2327 = RX10_TEMP2324 != RX10_TEMP2326 ; 
if ( RX10_TEMP2327 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2325 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2325 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2320 , X10_TEMP833 ) ; 
const int X10_TEMP835 = 1 ; 
struct Point1 RX10_TEMP2328  ; 
Point1_Point1( &RX10_TEMP2328/*Assignment*/, X10_TEMP835 ) ; 
struct Dist1 RX10_TEMP2329 = ibflg .distValue ; 
struct Region1 RX10_TEMP2330 = RX10_TEMP2329 .dReg ; 
const int RX10_TEMP2331 = searchPointInRegion1 ( RX10_TEMP2330 , RX10_TEMP2328 ) ; 
const int RX10_TEMP2332 = 0 ; 
const int RX10_TEMP2333 = RX10_TEMP2331 < RX10_TEMP2332 ; 
if ( RX10_TEMP2333 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2334 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2334 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2335 = getPlaceFromDist1 ( RX10_TEMP2329 , RX10_TEMP2331 ) ; 
const int RX10_TEMP2337 = /* here  */ 0 ; 
const int RX10_TEMP2338 = RX10_TEMP2335 != RX10_TEMP2337 ; 
if ( RX10_TEMP2338 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2336 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP2336 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2339 = getRefArrayValue1int ( ibflg , RX10_TEMP2331 ) ; 
const int X10_TEMP836 = RX10_TEMP2339 ; 
const int X10_TEMP837 = 0 ; 
const int X10_TEMP839 = X10_TEMP836 > X10_TEMP837 ; 
if ( X10_TEMP839 ) 
{ const char * X10_TEMP840 = "Info: particles being passed" ; 
const char * X10_TEMP841 = " further = " ; 
/*ASSIGNMENT STRING*/
 char * tempC76 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC76, "%s%s",X10_TEMP840,X10_TEMP841);
const char * X10_TEMP844 = tempC76;; 
const int X10_TEMP843 = 1 ; 
struct Point1 RX10_TEMP2340  ; 
Point1_Point1( &RX10_TEMP2340/*Assignment*/, X10_TEMP843 ) ; 
struct Dist1 RX10_TEMP2341 = ibflg .distValue ; 
struct Region1 RX10_TEMP2342 = RX10_TEMP2341 .dReg ; 
const int RX10_TEMP2343 = searchPointInRegion1 ( RX10_TEMP2342 , RX10_TEMP2340 ) ; 
const int RX10_TEMP2344 = 0 ; 
const int RX10_TEMP2345 = RX10_TEMP2343 < RX10_TEMP2344 ; 
if ( RX10_TEMP2345 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2346 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2346 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2347 = getPlaceFromDist1 ( RX10_TEMP2341 , RX10_TEMP2343 ) ; 
const int RX10_TEMP2349 = /* here  */ 0 ; 
const int RX10_TEMP2350 = RX10_TEMP2347 != RX10_TEMP2349 ; 
if ( RX10_TEMP2350 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2348 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP2348 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2351 = getRefArrayValue1int ( ibflg , RX10_TEMP2343 ) ; 
const int X10_TEMP845 = RX10_TEMP2351 ; 
/*ASSIGNMENT STRING*/
 char * tempC77 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC77, "%s%d",X10_TEMP844,X10_TEMP845);
const char * X10_TEMP847 = tempC77;; 
fprintf(stderr, "%s\n" , X10_TEMP847 ) ; 
const int X10_TEMP849 = 2 ; 
struct Point1 RX10_TEMP2352  ; 
Point1_Point1( &RX10_TEMP2352/*Assignment*/, X10_TEMP849 ) ; 
struct Dist1 RX10_TEMP2353 = ibflg .distValue ; 
struct Region1 RX10_TEMP2354 = RX10_TEMP2353 .dReg ; 
const int RX10_TEMP2355 = searchPointInRegion1 ( RX10_TEMP2354 , RX10_TEMP2352 ) ; 
const int RX10_TEMP2356 = 0 ; 
const int RX10_TEMP2357 = RX10_TEMP2355 < RX10_TEMP2356 ; 
if ( RX10_TEMP2357 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2358 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2358 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2359 = getPlaceFromDist1 ( RX10_TEMP2353 , RX10_TEMP2355 ) ; 
const int RX10_TEMP2361 = /* here  */ 0 ; 
const int RX10_TEMP2362 = RX10_TEMP2359 != RX10_TEMP2361 ; 
if ( RX10_TEMP2362 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2360 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP2360 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2363 = getRefArrayValue1int ( ibflg , RX10_TEMP2355 ) ; 
const int X10_TEMP850 = RX10_TEMP2363 ; 
const int X10_TEMP851 = 0 ; 
const int X10_TEMP853 = X10_TEMP850 > X10_TEMP851 ; 
if ( X10_TEMP853 ) 
{ const int X10_TEMP855 = 2 ; 
const int X10_TEMP857 = 1 ; 
const int X10_TEMP858 = X10_TEMP857 ; 
struct Point1 RX10_TEMP2364  ; 
Point1_Point1( &RX10_TEMP2364/*Assignment*/, X10_TEMP855 ) ; 
struct Dist1 RX10_TEMP2365 = ibflg .distValue ; 
struct Region1 RX10_TEMP2366 = RX10_TEMP2365 .dReg ; 
const int RX10_TEMP2367 = searchPointInRegion1 ( RX10_TEMP2366 , RX10_TEMP2364 ) ; 
const int RX10_TEMP2368 = 0 ; 
const int RX10_TEMP2369 = RX10_TEMP2367 < RX10_TEMP2368 ; 
if ( RX10_TEMP2369 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2370 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2370 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2371 = getPlaceFromDist1 ( RX10_TEMP2365 , RX10_TEMP2367 ) ; 
const int RX10_TEMP2373 = /* here  */ 0 ; 
const int RX10_TEMP2374 = RX10_TEMP2371 != RX10_TEMP2373 ; 
if ( RX10_TEMP2374 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2372 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP2372 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( ibflg , RX10_TEMP2367 , X10_TEMP858 ) ; 
} 

const int X10_TEMP860 = iter >= ITER_MAX ; 
if ( X10_TEMP860 ) 
{ const int X10_TEMP861 = 2 ; 
const int X10_TEMP862 = 2 ; 
const int X10_TEMP863 = X10_TEMP861 / X10_TEMP862 ; 
const int X10_TEMP865 = iter - X10_TEMP863 ; 
const int X10_TEMP867 = X10_TEMP865 ; 
const int X10_TEMP868 = 0 ; 
const int X10_TEMP870 = X10_TEMP868 - X10_TEMP867 ; 
err = X10_TEMP870 ; const char * X10_TEMP871 = "Iteration overflow, " ; 
const char * X10_TEMP872 = "iter = " ; 
/*ASSIGNMENT STRING*/
 char * tempC78 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC78, "%s%s",X10_TEMP871,X10_TEMP872);
const char * X10_TEMP873 = tempC78;; 
/*ASSIGNMENT STRING*/
 char * tempC79 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC79, "%s%d",X10_TEMP873,err);
const char * X10_TEMP875 = tempC79;; 
fprintf(stderr, "%s\n" , X10_TEMP875 ) ; 
const int X10_TEMP877 = 0 ; 
const int X10_TEMP879 = err ; 
struct Point1 RX10_TEMP2375  ; 
Point1_Point1( &RX10_TEMP2375/*Assignment*/, X10_TEMP877 ) ; 
struct Dist1 RX10_TEMP2376 = info .distValue ; 
struct Region1 RX10_TEMP2377 = RX10_TEMP2376 .dReg ; 
const int RX10_TEMP2378 = searchPointInRegion1 ( RX10_TEMP2377 , RX10_TEMP2375 ) ; 
const int RX10_TEMP2379 = 0 ; 
const int RX10_TEMP2380 = RX10_TEMP2378 < RX10_TEMP2379 ; 
if ( RX10_TEMP2380 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2381 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2381 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2382 = getPlaceFromDist1 ( RX10_TEMP2376 , RX10_TEMP2378 ) ; 
const int RX10_TEMP2384 = /* here  */ 0 ; 
const int RX10_TEMP2385 = RX10_TEMP2382 != RX10_TEMP2384 ; 
if ( RX10_TEMP2385 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2383 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2383 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2378 , X10_TEMP879 ) ; 
const int X10_TEMP881 = 1 ; 
doneInner = X10_TEMP881 ; const int X10_TEMP883 = 1 ; 
doneOuter = X10_TEMP883 ; } 

} 
else 
{ const int X10_TEMP885 = 1 ; 
doneInner = X10_TEMP885 ; } 


X10_TEMP252 = ! doneInner ; } 
while ( X10_TEMP252 ) ; 
const int X10_TEMP891 = ! doneOuter ; 
const int X10_TEMP888 = 2 ; 
struct Point1 RX10_TEMP2386  ; 
Point1_Point1( &RX10_TEMP2386/*Assignment*/, X10_TEMP888 ) ; 
struct Dist1 RX10_TEMP2387 = ibflg .distValue ; 
struct Region1 RX10_TEMP2388 = RX10_TEMP2387 .dReg ; 
const int RX10_TEMP2389 = searchPointInRegion1 ( RX10_TEMP2388 , RX10_TEMP2386 ) ; 
const int RX10_TEMP2390 = 0 ; 
const int RX10_TEMP2391 = RX10_TEMP2389 < RX10_TEMP2390 ; 
if ( RX10_TEMP2391 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2392 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2392 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2393 = getPlaceFromDist1 ( RX10_TEMP2387 , RX10_TEMP2389 ) ; 
const int RX10_TEMP2395 = /* here  */ 0 ; 
const int RX10_TEMP2396 = RX10_TEMP2393 != RX10_TEMP2395 ; 
if ( RX10_TEMP2396 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2394 = "Bad place access for array ibflg" ; 
fprintf(stderr, RX10_TEMP2394 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2397 = getRefArrayValue1int ( ibflg , RX10_TEMP2389 ) ; 
const int X10_TEMP889 = RX10_TEMP2397 ; 
const int X10_TEMP890 = 0 ; 
const int X10_TEMP892 = X10_TEMP889 > X10_TEMP890 ; 
const int X10_TEMP894 = X10_TEMP891 && X10_TEMP892 ; 
if ( X10_TEMP894 ) 
{ const int X10_TEMP895 = nter ; 
const int X10_TEMP896 = 1 ; 
nter = nter + X10_TEMP896 ; const int X10_TEMP898 = 3 ; 
const int X10_TEMP900 = nter ; 
struct Point1 RX10_TEMP2398  ; 
Point1_Point1( &RX10_TEMP2398/*Assignment*/, X10_TEMP898 ) ; 
struct Dist1 RX10_TEMP2399 = info .distValue ; 
struct Region1 RX10_TEMP2400 = RX10_TEMP2399 .dReg ; 
const int RX10_TEMP2401 = searchPointInRegion1 ( RX10_TEMP2400 , RX10_TEMP2398 ) ; 
const int RX10_TEMP2402 = 0 ; 
const int RX10_TEMP2403 = RX10_TEMP2401 < RX10_TEMP2402 ; 
if ( RX10_TEMP2403 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2404 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2404 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2405 = getPlaceFromDist1 ( RX10_TEMP2399 , RX10_TEMP2401 ) ; 
const int RX10_TEMP2407 = /* here  */ 0 ; 
const int RX10_TEMP2408 = RX10_TEMP2405 != RX10_TEMP2407 ; 
if ( RX10_TEMP2408 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2406 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2406 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2401 , X10_TEMP900 ) ; 
} 
else 
{ const int X10_TEMP902 = 1 ; 
doneOuter = X10_TEMP902 ; } 


X10_TEMP120 = ! doneOuter ; } 
while ( X10_TEMP120 ) ; 
const int X10_TEMP905 = 5 ; 
const int X10_TEMP907 = intrefArraySum1 ( nPart ) ; 
const int X10_TEMP908 = X10_TEMP907 ; 
struct Point1 RX10_TEMP2409  ; 
Point1_Point1( &RX10_TEMP2409/*Assignment*/, X10_TEMP905 ) ; 
struct Dist1 RX10_TEMP2410 = info .distValue ; 
struct Region1 RX10_TEMP2411 = RX10_TEMP2410 .dReg ; 
const int RX10_TEMP2412 = searchPointInRegion1 ( RX10_TEMP2411 , RX10_TEMP2409 ) ; 
const int RX10_TEMP2413 = 0 ; 
const int RX10_TEMP2414 = RX10_TEMP2412 < RX10_TEMP2413 ; 
if ( RX10_TEMP2414 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2415 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2415 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2416 = getPlaceFromDist1 ( RX10_TEMP2410 , RX10_TEMP2412 ) ; 
const int RX10_TEMP2418 = /* here  */ 0 ; 
const int RX10_TEMP2419 = RX10_TEMP2416 != RX10_TEMP2418 ; 
if ( RX10_TEMP2419 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2417 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2417 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2412 , X10_TEMP908 ) ; 
const int X10_TEMP910 = 6 ; 
const int X10_TEMP912 = intrefArraySum1 ( nPartOld ) ; 
const int X10_TEMP913 = X10_TEMP912 ; 
struct Point1 RX10_TEMP2420  ; 
Point1_Point1( &RX10_TEMP2420/*Assignment*/, X10_TEMP910 ) ; 
struct Dist1 RX10_TEMP2421 = info .distValue ; 
struct Region1 RX10_TEMP2422 = RX10_TEMP2421 .dReg ; 
const int RX10_TEMP2423 = searchPointInRegion1 ( RX10_TEMP2422 , RX10_TEMP2420 ) ; 
const int RX10_TEMP2424 = 0 ; 
const int RX10_TEMP2425 = RX10_TEMP2423 < RX10_TEMP2424 ; 
if ( RX10_TEMP2425 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2426 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2426 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2427 = getPlaceFromDist1 ( RX10_TEMP2421 , RX10_TEMP2423 ) ; 
const int RX10_TEMP2429 = /* here  */ 0 ; 
const int RX10_TEMP2430 = RX10_TEMP2427 != RX10_TEMP2429 ; 
if ( RX10_TEMP2430 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2428 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2428 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2423 , X10_TEMP913 ) ; 
const int X10_TEMP915 = 5 ; 
struct Point1 RX10_TEMP2431  ; 
Point1_Point1( &RX10_TEMP2431/*Assignment*/, X10_TEMP915 ) ; 
struct Dist1 RX10_TEMP2432 = info .distValue ; 
struct Region1 RX10_TEMP2433 = RX10_TEMP2432 .dReg ; 
const int RX10_TEMP2434 = searchPointInRegion1 ( RX10_TEMP2433 , RX10_TEMP2431 ) ; 
const int RX10_TEMP2435 = 0 ; 
const int RX10_TEMP2436 = RX10_TEMP2434 < RX10_TEMP2435 ; 
if ( RX10_TEMP2436 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2437 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2437 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2438 = getPlaceFromDist1 ( RX10_TEMP2432 , RX10_TEMP2434 ) ; 
const int RX10_TEMP2440 = /* here  */ 0 ; 
const int RX10_TEMP2441 = RX10_TEMP2438 != RX10_TEMP2440 ; 
if ( RX10_TEMP2441 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2439 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2439 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2442 = getRefArrayValue1int ( info , RX10_TEMP2434 ) ; 
const int X10_TEMP918 = RX10_TEMP2442 ; 
const int X10_TEMP917 = 6 ; 
struct Point1 RX10_TEMP2443  ; 
Point1_Point1( &RX10_TEMP2443/*Assignment*/, X10_TEMP917 ) ; 
struct Dist1 RX10_TEMP2444 = info .distValue ; 
struct Region1 RX10_TEMP2445 = RX10_TEMP2444 .dReg ; 
const int RX10_TEMP2446 = searchPointInRegion1 ( RX10_TEMP2445 , RX10_TEMP2443 ) ; 
const int RX10_TEMP2447 = 0 ; 
const int RX10_TEMP2448 = RX10_TEMP2446 < RX10_TEMP2447 ; 
if ( RX10_TEMP2448 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2449 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2449 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2450 = getPlaceFromDist1 ( RX10_TEMP2444 , RX10_TEMP2446 ) ; 
const int RX10_TEMP2452 = /* here  */ 0 ; 
const int RX10_TEMP2453 = RX10_TEMP2450 != RX10_TEMP2452 ; 
if ( RX10_TEMP2453 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2451 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2451 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2454 = getRefArrayValue1int ( info , RX10_TEMP2446 ) ; 
const int X10_TEMP919 = RX10_TEMP2454 ; 
const int X10_TEMP921 = X10_TEMP918 != X10_TEMP919 ; 
if ( X10_TEMP921 ) 
{ const char * X10_TEMP924 = "Particle number error, old/new = " ; 
const int X10_TEMP923 = 0 ; 
struct Point1 RX10_TEMP2455  ; 
Point1_Point1( &RX10_TEMP2455/*Assignment*/, X10_TEMP923 ) ; 
struct Dist1 RX10_TEMP2456 = info .distValue ; 
struct Region1 RX10_TEMP2457 = RX10_TEMP2456 .dReg ; 
const int RX10_TEMP2458 = searchPointInRegion1 ( RX10_TEMP2457 , RX10_TEMP2455 ) ; 
const int RX10_TEMP2459 = 0 ; 
const int RX10_TEMP2460 = RX10_TEMP2458 < RX10_TEMP2459 ; 
if ( RX10_TEMP2460 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2461 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2461 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2462 = getPlaceFromDist1 ( RX10_TEMP2456 , RX10_TEMP2458 ) ; 
const int RX10_TEMP2464 = /* here  */ 0 ; 
const int RX10_TEMP2465 = RX10_TEMP2462 != RX10_TEMP2464 ; 
if ( RX10_TEMP2465 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2463 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2463 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2466 = getRefArrayValue1int ( info , RX10_TEMP2458 ) ; 
const int X10_TEMP925 = RX10_TEMP2466 ; 
/*ASSIGNMENT STRING*/
 char * tempC80 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC80, "%s%d",X10_TEMP924,X10_TEMP925);
const char * X10_TEMP926 = tempC80;; 
const char * X10_TEMP927 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC81 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC81, "%s%s",X10_TEMP926,X10_TEMP927);
const char * X10_TEMP930 = tempC81;; 
const int X10_TEMP929 = 1 ; 
struct Point1 RX10_TEMP2467  ; 
Point1_Point1( &RX10_TEMP2467/*Assignment*/, X10_TEMP929 ) ; 
struct Dist1 RX10_TEMP2468 = info .distValue ; 
struct Region1 RX10_TEMP2469 = RX10_TEMP2468 .dReg ; 
const int RX10_TEMP2470 = searchPointInRegion1 ( RX10_TEMP2469 , RX10_TEMP2467 ) ; 
const int RX10_TEMP2471 = 0 ; 
const int RX10_TEMP2472 = RX10_TEMP2470 < RX10_TEMP2471 ; 
if ( RX10_TEMP2472 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2473 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP2473 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2474 = getPlaceFromDist1 ( RX10_TEMP2468 , RX10_TEMP2470 ) ; 
const int RX10_TEMP2476 = /* here  */ 0 ; 
const int RX10_TEMP2477 = RX10_TEMP2474 != RX10_TEMP2476 ; 
if ( RX10_TEMP2477 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2475 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2475 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2478 = getRefArrayValue1int ( info , RX10_TEMP2470 ) ; 
const int X10_TEMP931 = RX10_TEMP2478 ; 
/*ASSIGNMENT STRING*/
 char * tempC82 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC82, "%s%d",X10_TEMP930,X10_TEMP931);
const char * X10_TEMP933 = tempC82;; 
fprintf(stderr, "%s\n" , X10_TEMP933 ) ; 
const int X10_TEMP935 = 0 ; 
const int X10_TEMP937 = 1 ; 
const int X10_TEMP938 = X10_TEMP937 ; 
struct Point1 RX10_TEMP2479  ; 
Point1_Point1( &RX10_TEMP2479/*Assignment*/, X10_TEMP935 ) ; 
struct Dist1 RX10_TEMP2480 = info .distValue ; 
struct Region1 RX10_TEMP2481 = RX10_TEMP2480 .dReg ; 
const int RX10_TEMP2482 = searchPointInRegion1 ( RX10_TEMP2481 , RX10_TEMP2479 ) ; 
const int RX10_TEMP2483 = 0 ; 
const int RX10_TEMP2484 = RX10_TEMP2482 < RX10_TEMP2483 ; 
if ( RX10_TEMP2484 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2485 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP2485 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP2486 = getPlaceFromDist1 ( RX10_TEMP2480 , RX10_TEMP2482 ) ; 
const int RX10_TEMP2488 = /* here  */ 0 ; 
const int RX10_TEMP2489 = RX10_TEMP2486 != RX10_TEMP2488 ; 
if ( RX10_TEMP2489 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP2487 = "Bad place access for array info" ; 
fprintf(stderr, RX10_TEMP2487 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( info , RX10_TEMP2482 , X10_TEMP938 ) ; 
} 

const int X10_TEMP939 = 0 ; 
const int X10_TEMP941 = nter > X10_TEMP939 ; 
if ( X10_TEMP941 ) 
{ const char * X10_TEMP942 = "Info: " ; 
/*ASSIGNMENT STRING*/
 char * tempC83 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC83, "%s%d",X10_TEMP942,nter);
const char * X10_TEMP943 = tempC83;; 
const char * X10_TEMP944 = " buffer overflows, " ; 
/*ASSIGNMENT STRING*/
 char * tempC84 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC84, "%s%s",X10_TEMP943,X10_TEMP944);
const char * X10_TEMP945 = tempC84;; 
const char * X10_TEMP946 = "nbmax = " ; 
/*ASSIGNMENT STRING*/
 char * tempC85 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC85, "%s%s",X10_TEMP945,X10_TEMP946);
const char * X10_TEMP947 = tempC85;; 
const int X10_TEMP948 = rBuffer .regSize ; 
/*ASSIGNMENT STRING*/
 char * tempC86 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC86, "%s%d",X10_TEMP947,X10_TEMP948);
const char * X10_TEMP950 = tempC86;; 
fprintf(stderr, "%s\n" , X10_TEMP950 ) ; 
} 

struct ParticleRefArray1 X10_TEMP954 = LinearESOpenPIC2D_packParticleArray ( X10_TEMP0 , part , nPart ) ; 
return X10_TEMP954 ; 
} 

void /*static*/LinearESOpenPIC2D_transferParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray2 const leftOutBuffer ,  struct ParticleRefArray2 const rightOutBuffer ,  struct intRefArray1 const outLeft ,  struct intRefArray1 const outRight ,  struct ParticleRefArray2 const leftInBuffer ,  struct ParticleRefArray2 const rightInBuffer ,  struct intRefArray1 const inLeft ,  struct intRefArray1 const inRight ) 
{ /* finish  */ 
{ struct Dist1 X10_TEMP2 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP2 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 X10_TEMP3 = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
const int pl = X10_TEMP3 .f0 ; 
struct Region1 RX10_TEMP6 = X10_TEMP2 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , X10_TEMP3 ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point X10_TEMP3 not found in the distribution X10_TEMP2." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP2 , RX10_TEMP7 ) ; 
const int X10_TEMP4 = RX10_TEMP11 ; 
/* async ( X10_TEMP4 )  */ 
{ const int X10_TEMP5 = /* here  */ 0 ; 
const int pLeft = /* X10_TEMP5 . prev ( )  */ 0 ; 
const int X10_TEMP7 = /* here  */ 0 ; 
const int pRight = /* X10_TEMP7 . next ( )  */ 0 ; 
const int X10_TEMP14 = 0 ; 
struct Point1 RX10_TEMP12  ; 
Point1_Point1( &RX10_TEMP12/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP13 = outLeft .distValue ; 
struct Region1 RX10_TEMP14 = RX10_TEMP13 .dReg ; 
const int RX10_TEMP15 = searchPointInRegion1 ( RX10_TEMP14 , RX10_TEMP12 ) ; 
const int RX10_TEMP16 = 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16 ; 
if ( RX10_TEMP17 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP18 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP18 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP19 = getPlaceFromDist1 ( RX10_TEMP13 , RX10_TEMP15 ) ; 
const int RX10_TEMP21 = /* here  */ 0 ; 
const int RX10_TEMP22 = RX10_TEMP19 != RX10_TEMP21 ; 
if ( RX10_TEMP22 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP20 = "Bad place access for array outLeft" ; 
fprintf(stderr, RX10_TEMP20 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP23 = getRefArrayValue1int ( outLeft , RX10_TEMP15 ) ; 
const int X10_TEMP11 = RX10_TEMP23 ; 
const int X10_TEMP12 = 1 ; 
const int X10_TEMP15 = X10_TEMP11 - X10_TEMP12 ; 
struct Region1 rLeft = createNewRegion1R ( X10_TEMP14 , X10_TEMP15 ) ; 
const int X10_TEMP22 = 0 ; 
struct Point1 RX10_TEMP24  ; 
Point1_Point1( &RX10_TEMP24/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP25 = outRight .distValue ; 
struct Region1 RX10_TEMP26 = RX10_TEMP25 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , RX10_TEMP24 ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP30 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( RX10_TEMP25 , RX10_TEMP27 ) ; 
const int RX10_TEMP33 = /* here  */ 0 ; 
const int RX10_TEMP34 = RX10_TEMP31 != RX10_TEMP33 ; 
if ( RX10_TEMP34 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP32 = "Bad place access for array outRight" ; 
fprintf(stderr, RX10_TEMP32 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP35 = getRefArrayValue1int ( outRight , RX10_TEMP27 ) ; 
const int X10_TEMP19 = RX10_TEMP35 ; 
const int X10_TEMP20 = 1 ; 
const int X10_TEMP23 = X10_TEMP19 - X10_TEMP20 ; 
struct Region1 rRight = createNewRegion1R ( X10_TEMP22 , X10_TEMP23 ) ; 
struct Region1 RX10_TEMP36 = rLeft ; 
const int RX10_TEMP53 = rLeft .regSize ; 
const int RX10_TEMP54 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP53 - RX10_TEMP54 ; 
const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP52 = RX10_TEMP55 + SX10_TEMP2 ; 
/*Updatable ARRAY*/ struct Particle * const SX10_TEMP3 = (Particle *)calloc(RX10_TEMP52,sizeof( Particle )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < RX10_TEMP52 ; SX10_TEMP4 ++ ) 
{ const int RX10_TEMP37 = SX10_TEMP4 ; 
const int RX10_TEMP39 = RX10_TEMP37 ; 
struct Point1 RX10_TEMP38 = regionOrdinalPoint1 ( RX10_TEMP36 , RX10_TEMP39 ) ; 
const int i = RX10_TEMP38 .f0 ; 
struct Point2 RX10_TEMP40  ; 
Point2_Point2( &RX10_TEMP40/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP41 = leftOutBuffer .distValue ; 
struct Region2 RX10_TEMP42 = RX10_TEMP41 .dReg ; 
const int RX10_TEMP43 = searchPointInRegion2 ( RX10_TEMP42 , RX10_TEMP40 ) ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP47 = getPlaceFromDist2 ( RX10_TEMP41 , RX10_TEMP43 ) ; 
const int RX10_TEMP49 = /* here  */ 0 ; 
const int RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49 ; 
if ( RX10_TEMP50 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Bad place access for array leftOutBuffer" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP51 = getRefArrayValue2Particle ( leftOutBuffer , RX10_TEMP43 ) ; 
struct Particle X10_TEMP28 = RX10_TEMP51 ; 
SX10_TEMP3 [ RX10_TEMP37 ] = X10_TEMP28 ; 
} 

/*Updatable ARRAY*/ struct Particle * const RX10_TEMP56 = SX10_TEMP3 ; 
struct ParticleValArray1 RX10_TEMP57  ; 
ParticleValArray1_ParticleValArray1( &RX10_TEMP57/*Assignment*/, rLeft , RX10_TEMP56 ) ; 
struct ParticleValArray1 X10_TEMP29 = RX10_TEMP57 ; 
struct ParticleValArray1 lBuffer = X10_TEMP29 ; 
struct Region1 RX10_TEMP58 = rRight ; 
const int RX10_TEMP75 = rRight .regSize ; 
const int RX10_TEMP76 = 1 ; 
const int RX10_TEMP77 = RX10_TEMP75 - RX10_TEMP76 ; 
const int SX10_TEMP5 = 1 ; 
const int RX10_TEMP74 = RX10_TEMP77 + SX10_TEMP5 ; 
/*Updatable ARRAY*/ struct Particle * const SX10_TEMP6 = (Particle *)calloc(RX10_TEMP74,sizeof( Particle )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP74 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP59 = SX10_TEMP7 ; 
const int RX10_TEMP61 = RX10_TEMP59 ; 
struct Point1 RX10_TEMP60 = regionOrdinalPoint1 ( RX10_TEMP58 , RX10_TEMP61 ) ; 
const int i = RX10_TEMP60 .f0 ; 
struct Point2 RX10_TEMP62  ; 
Point2_Point2( &RX10_TEMP62/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP63 = rightOutBuffer .distValue ; 
struct Region2 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion2 ( RX10_TEMP64 , RX10_TEMP62 ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist2 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array rightOutBuffer" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP73 = getRefArrayValue2Particle ( rightOutBuffer , RX10_TEMP65 ) ; 
struct Particle X10_TEMP34 = RX10_TEMP73 ; 
SX10_TEMP6 [ RX10_TEMP59 ] = X10_TEMP34 ; 
} 

/*Updatable ARRAY*/ struct Particle * const RX10_TEMP78 = SX10_TEMP6 ; 
struct ParticleValArray1 RX10_TEMP79  ; 
ParticleValArray1_ParticleValArray1( &RX10_TEMP79/*Assignment*/, rRight , RX10_TEMP78 ) ; 
struct ParticleValArray1 X10_TEMP35 = RX10_TEMP79 ; 
struct ParticleValArray1 rBuffer = X10_TEMP35 ; 
/* async ( pLeft )  */ 
{ const int X10_TEMP38 = /* here  */ 0 ; 
const int pid = /* X10_TEMP38 . id  */ 0 ; 
struct Region1 RX10_TEMP80 = lBuffer .regionValue ; 
struct Region1 X10_TEMP41 = RX10_TEMP80 ; 
const int X10_TEMP43 = X10_TEMP41 .regSize ; 
const int X10_TEMP44 = X10_TEMP43 ; 
struct Point1 RX10_TEMP81  ; 
Point1_Point1( &RX10_TEMP81/*Assignment*/, pid ) ; 
struct Dist1 RX10_TEMP82 = inRight .distValue ; 
struct Region1 RX10_TEMP83 = RX10_TEMP82 .dReg ; 
const int RX10_TEMP84 = searchPointInRegion1 ( RX10_TEMP83 , RX10_TEMP81 ) ; 
const int RX10_TEMP85 = 0 ; 
const int RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85 ; 
if ( RX10_TEMP86 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP87 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP87 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP88 = getPlaceFromDist1 ( RX10_TEMP82 , RX10_TEMP84 ) ; 
const int RX10_TEMP90 = /* here  */ 0 ; 
const int RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90 ; 
if ( RX10_TEMP91 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP89 = "Bad place access for array inRight" ; 
fprintf(stderr, RX10_TEMP89 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inRight , RX10_TEMP84 , X10_TEMP44 ) ; 
const int X10_TEMP46 = /* here  */ 0 ; 
struct Region1 RX10_TEMP94 = lBuffer .regionValue ; 
const int RX10_TEMP97 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP95 = RX10_TEMP94 .regSize ; 
RX10_TEMP95 = RX10_TEMP95 - RX10_TEMP97 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP96 = RX10_TEMP95 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP96 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP92 = SX10_TEMP9 ; 
const int RX10_TEMP98 = RX10_TEMP92 ; 
struct Point1 RX10_TEMP93 = regionOrdinalPoint1 ( RX10_TEMP94 , RX10_TEMP98 ) ; 
const int i = RX10_TEMP93 .f0 ; 
/* async ( X10_TEMP46 )  */ 
{ struct Point1 RX10_TEMP99  ; 
Point1_Point1( &RX10_TEMP99/*Assignment*/, i ) ; 
struct Region1 RX10_TEMP100 = lBuffer .regionValue ; 
const int RX10_TEMP101 = searchPointInRegion1 ( RX10_TEMP100 , RX10_TEMP99 ) ; 
const int RX10_TEMP102 = 0 ; 
const int RX10_TEMP103 = RX10_TEMP101 < RX10_TEMP102 ; 
if ( RX10_TEMP103 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP104 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP104 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Particle * const RX10_TEMP105 = lBuffer .contents ; 
struct Particle X10_TEMP51 = RX10_TEMP105 [ RX10_TEMP101 ] 
; 
struct Particle X10_TEMP52 = X10_TEMP51 ; 
struct Point2 RX10_TEMP106  ; 
Point2_Point2( &RX10_TEMP106/*Assignment*/, pid , i ) ; 
struct Dist2 RX10_TEMP107 = rightInBuffer .distValue ; 
struct Region2 RX10_TEMP108 = RX10_TEMP107 .dReg ; 
const int RX10_TEMP109 = searchPointInRegion2 ( RX10_TEMP108 , RX10_TEMP106 ) ; 
const int RX10_TEMP110 = 0 ; 
const int RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP112 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP112 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP113 = getPlaceFromDist2 ( RX10_TEMP107 , RX10_TEMP109 ) ; 
const int RX10_TEMP115 = /* here  */ 0 ; 
const int RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115 ; 
if ( RX10_TEMP116 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP114 = "Bad place access for array rightInBuffer" ; 
fprintf(stderr, RX10_TEMP114 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( rightInBuffer , RX10_TEMP109 , X10_TEMP52 ) ; 
} 

} 

} 

/* async ( pRight )  */ 
{ const int X10_TEMP54 = /* here  */ 0 ; 
const int pid = /* X10_TEMP54 . id  */ 0 ; 
struct Region1 RX10_TEMP117 = rBuffer .regionValue ; 
struct Region1 X10_TEMP57 = RX10_TEMP117 ; 
const int X10_TEMP59 = X10_TEMP57 .regSize ; 
const int X10_TEMP60 = X10_TEMP59 ; 
struct Point1 RX10_TEMP118  ; 
Point1_Point1( &RX10_TEMP118/*Assignment*/, pid ) ; 
struct Dist1 RX10_TEMP119 = inLeft .distValue ; 
struct Region1 RX10_TEMP120 = RX10_TEMP119 .dReg ; 
const int RX10_TEMP121 = searchPointInRegion1 ( RX10_TEMP120 , RX10_TEMP118 ) ; 
const int RX10_TEMP122 = 0 ; 
const int RX10_TEMP123 = RX10_TEMP121 < RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP124 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP124 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP125 = getPlaceFromDist1 ( RX10_TEMP119 , RX10_TEMP121 ) ; 
const int RX10_TEMP127 = /* here  */ 0 ; 
const int RX10_TEMP128 = RX10_TEMP125 != RX10_TEMP127 ; 
if ( RX10_TEMP128 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP126 = "Bad place access for array inLeft" ; 
fprintf(stderr, RX10_TEMP126 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( inLeft , RX10_TEMP121 , X10_TEMP60 ) ; 
const int X10_TEMP62 = /* here  */ 0 ; 
struct Region1 RX10_TEMP131 = rBuffer .regionValue ; 
const int RX10_TEMP134 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP132 = RX10_TEMP131 .regSize ; 
RX10_TEMP132 = RX10_TEMP132 - RX10_TEMP134 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP133 = RX10_TEMP132 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP133 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP129 = SX10_TEMP11 ; 
const int RX10_TEMP135 = RX10_TEMP129 ; 
struct Point1 RX10_TEMP130 = regionOrdinalPoint1 ( RX10_TEMP131 , RX10_TEMP135 ) ; 
const int i = RX10_TEMP130 .f0 ; 
/* async ( X10_TEMP62 )  */ 
{ struct Point1 RX10_TEMP136  ; 
Point1_Point1( &RX10_TEMP136/*Assignment*/, i ) ; 
struct Region1 RX10_TEMP137 = rBuffer .regionValue ; 
const int RX10_TEMP138 = searchPointInRegion1 ( RX10_TEMP137 , RX10_TEMP136 ) ; 
const int RX10_TEMP139 = 0 ; 
const int RX10_TEMP140 = RX10_TEMP138 < RX10_TEMP139 ; 
if ( RX10_TEMP140 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP141 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP141 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ struct Particle * const RX10_TEMP142 = rBuffer .contents ; 
struct Particle X10_TEMP67 = RX10_TEMP142 [ RX10_TEMP138 ] 
; 
struct Particle X10_TEMP68 = X10_TEMP67 ; 
struct Point2 RX10_TEMP143  ; 
Point2_Point2( &RX10_TEMP143/*Assignment*/, pid , i ) ; 
struct Dist2 RX10_TEMP144 = leftInBuffer .distValue ; 
struct Region2 RX10_TEMP145 = RX10_TEMP144 .dReg ; 
const int RX10_TEMP146 = searchPointInRegion2 ( RX10_TEMP145 , RX10_TEMP143 ) ; 
const int RX10_TEMP147 = 0 ; 
const int RX10_TEMP148 = RX10_TEMP146 < RX10_TEMP147 ; 
if ( RX10_TEMP148 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP149 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP149 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP150 = getPlaceFromDist2 ( RX10_TEMP144 , RX10_TEMP146 ) ; 
const int RX10_TEMP152 = /* here  */ 0 ; 
const int RX10_TEMP153 = RX10_TEMP150 != RX10_TEMP152 ; 
if ( RX10_TEMP153 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP151 = "Bad place access for array leftInBuffer" ; 
fprintf(stderr, RX10_TEMP151 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Particle ( leftInBuffer , RX10_TEMP146 , X10_TEMP68 ) ; 
} 

} 

} 

} 

} 

} 

} 

ParticleRefArray1 /*static*/LinearESOpenPIC2D_packParticleArray (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray2 const part ,  struct intRefArray1 const nParticles ) 
{ /*UpdatableVariableDeclaration*/int lb = 0 ; 
const int X10_TEMP2 = 0 ; 
const int X10_TEMP3 = 1 ; 
const int X10_TEMP4 = X10_TEMP2 - X10_TEMP3 ; 
struct Region1 X10_TEMP5 = createNewRegion1R ( X10_TEMP2 , X10_TEMP4 ) ; 
const int X10_TEMP6 = /* here  */ 0 ; 
struct Dist1 X10_TEMP8 = getPlaceDist1 ( X10_TEMP5 , X10_TEMP6 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist1 dResult = X10_TEMP8 ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP11 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/int rsize = X10Util_pullInt ( nParticles , pt ) ; 
const int X10_TEMP17 = pt .f0 ; 
/*UpdatableVariableDeclaration*/int p = /* place.places ( X10_TEMP17 )  */ 0 
; 
const int X10_TEMP20 = lb + rsize ; 
const int X10_TEMP21 = 1 ; 
const int X10_TEMP23 = X10_TEMP20 - X10_TEMP21 ; 
struct Region1 X10_TEMP24 = createNewRegion1R ( lb , X10_TEMP23 ) ; 
struct Dist1 X10_TEMP26 = getPlaceDist1 ( X10_TEMP24 , p ) ; 
struct Dist1 X10_TEMP28 = unionDist1 ( dResult , X10_TEMP26 ) ; 
dResult = X10_TEMP28 ; const int X10_TEMP30 = lb + rsize ; 
lb = X10_TEMP30 ; } 

struct Region1 RX10_TEMP6 = dResult .dReg ; 
const int RX10_TEMP7 = 0 ; 
const int RX10_TEMP8 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP9 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP9 = RX10_TEMP9 - RX10_TEMP8 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP10 = RX10_TEMP9 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP11 = RX10_TEMP9 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP12 = (ParticleStub *)calloc(RX10_TEMP11,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP10 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP5 ; 
const int RX10_TEMP14 = /* here  */ 0 ; 
const int RX10_TEMP15 = RX10_TEMP13 ; 
const int RX10_TEMP16 = /* place.places ( RX10_TEMP15 )  */ 0 
; 
const int RX10_TEMP17 = getDistLocalCount1 ( dResult , RX10_TEMP15 ) ; 
const int RX10_TEMP18 = RX10_TEMP17 - RX10_TEMP8 ; 
/* async ( RX10_TEMP16 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP19 = RX10_TEMP18 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP20 = (Particle *)calloc(RX10_TEMP19,sizeof( Particle )); 
struct ParticleStub RX10_TEMP21  ; 
ParticleStub_ParticleStub( &RX10_TEMP21/*Assignment*/, RX10_TEMP20 ) ; 
/* async ( RX10_TEMP14 )  */ 
{ RX10_TEMP12 [ RX10_TEMP13 ] = RX10_TEMP21 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP8 = (ParticleStub *)calloc(RX10_TEMP10,sizeof( ParticleStub )); 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP10 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP24 = SX10_TEMP9 ; 
struct ParticleStub RX10_TEMP23 = RX10_TEMP12 [ RX10_TEMP24 ] 
; 
SX10_TEMP8 [ RX10_TEMP24 ] = RX10_TEMP23 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP22 = SX10_TEMP8 ; 
struct ParticleRefArray1 RX10_TEMP25  ; 
ParticleRefArray1_ParticleRefArray1( &RX10_TEMP25/*Assignment*/, dResult , RX10_TEMP22 ) ; 
struct ParticleRefArray1 result = RX10_TEMP25 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP33 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP27 = X10_TEMP33 .dReg ; 
const int RX10_TEMP30 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP28 = RX10_TEMP27 .regSize ; 
RX10_TEMP28 = RX10_TEMP28 - RX10_TEMP30 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP28 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP29 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP11 ; 
const int RX10_TEMP31 = RX10_TEMP26 ; 
struct Point1 X10_TEMP34 = regionOrdinalPoint1 ( RX10_TEMP27 , RX10_TEMP31 ) ; 
const int pl = X10_TEMP34 .f0 ; 
struct Region1 RX10_TEMP32 = X10_TEMP33 .dReg ; 
const int RX10_TEMP33 = searchPointInRegion1 ( RX10_TEMP32 , X10_TEMP34 ) ; 
const int RX10_TEMP34 = 0 ; 
const int RX10_TEMP35 = RX10_TEMP33 < RX10_TEMP34 ; 
if ( RX10_TEMP35 ) 
{ const char * RX10_TEMP36 = "Point X10_TEMP34 not found in the distribution X10_TEMP33." ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP37 = getPlaceFromDist1 ( X10_TEMP33 , RX10_TEMP33 ) ; 
const int X10_TEMP35 = RX10_TEMP37 ; 
/* async ( X10_TEMP35 )  */ 
{ struct Dist1 RX10_TEMP38 = result .distValue ; 
struct Dist1 X10_TEMP36 = RX10_TEMP38 ; 
const int X10_TEMP37 = /* here  */ 0 ; 
struct Dist1 X10_TEMP39 = restrictDist1 ( X10_TEMP36 , X10_TEMP37 ) ; 
struct Region1 RX10_TEMP39 = X10_TEMP39 .dReg ; 
struct Region1 X10_TEMP40 = RX10_TEMP39 ; 
struct Region1 rLocal = X10_TEMP40 ; 
const int X10_TEMP42 = rLocal .regSize ; 
const int X10_TEMP43 = 0 ; 
const int X10_TEMP45 = X10_TEMP42 > X10_TEMP43 ; 
if ( X10_TEMP45 ) 
{ const int RX10_TEMP40 = rLocal .regSize ; 
const int RX10_TEMP41 = 0 ; 
const int RX10_TEMP42 = RX10_TEMP40 <= RX10_TEMP41 ; 
if ( RX10_TEMP42 ) 
{ const char * RX10_TEMP43 = "Operation low() not defined on empty region rLocal" ; 
fprintf(stderr, RX10_TEMP43 ) ; 
exit(EXIT_FAILURE);
} 

const int offset = regionLow ( rLocal ) ; 
const int X10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP48 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP46 = rLocal .regSize ; 
RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP48 ; const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP46 + SX10_TEMP12 ; 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < RX10_TEMP47 ; SX10_TEMP13 ++ ) 
{ const int RX10_TEMP44 = SX10_TEMP13 ; 
const int RX10_TEMP49 = RX10_TEMP44 ; 
struct Point1 RX10_TEMP45 = regionOrdinalPoint1 ( rLocal , RX10_TEMP49 ) ; 
const int i = RX10_TEMP45 .f0 ; 
/* async ( X10_TEMP48 )  */ 
{ const int X10_TEMP52 = i - offset ; 
struct Point2 RX10_TEMP50  ; 
Point2_Point2( &RX10_TEMP50/*Assignment*/, pl , X10_TEMP52 ) ; 
struct Dist2 RX10_TEMP51 = part .distValue ; 
struct Region2 RX10_TEMP52 = RX10_TEMP51 .dReg ; 
const int RX10_TEMP53 = searchPointInRegion2 ( RX10_TEMP52 , RX10_TEMP50 ) ; 
const int RX10_TEMP54 = 0 ; 
const int RX10_TEMP55 = RX10_TEMP53 < RX10_TEMP54 ; 
if ( RX10_TEMP55 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP56 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP56 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP57 = getPlaceFromDist2 ( RX10_TEMP51 , RX10_TEMP53 ) ; 
const int RX10_TEMP59 = /* here  */ 0 ; 
const int RX10_TEMP60 = RX10_TEMP57 != RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP58 = "Bad place access for array part" ; 
fprintf(stderr, RX10_TEMP58 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP61 = getRefArrayValue2Particle ( part , RX10_TEMP53 ) ; 
struct Particle X10_TEMP54 = RX10_TEMP61 ; 
struct Particle X10_TEMP55 = X10_TEMP54 ; 
struct Point1 RX10_TEMP62  ; 
Point1_Point1( &RX10_TEMP62/*Assignment*/, i ) ; 
struct Dist1 RX10_TEMP63 = result .distValue ; 
struct Region1 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion1 ( RX10_TEMP64 , RX10_TEMP62 ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist1 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Particle ( result , RX10_TEMP65 , X10_TEMP55 ) ; 
} 

} 

} 

} 

} 

} 

return result ; 
} 

double /*static*/LinearESOpenPIC2D_pushParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct doubleRefArray2 const forceChargeX ,  struct doubleRefArray2 const fcGuardX ,  struct doubleRefArray2 const forceChargeY ,  struct doubleRefArray2 const fcGuardY ) 
{ /*UpdatableVariableDeclaration*/double lx = 0.0; 
/*UpdatableVariableDeclaration*/double ly = 0.0; 
/*UpdatableVariableDeclaration*/double rx = 0.0; 
/*UpdatableVariableDeclaration*/double ry = 0.0; 
const int X10_TEMP7 = 1 ; 
const int X10_TEMP10 = 2 ; 
const int X10_TEMP22 = 3 ; 
/*SWITCH CASE*/while(1)
{ 
 if(X10_TEMP7== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs0;
else if(X10_TEMP10== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs1;
else if(X10_TEMP22== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs2;
goto cs3;

cs0:
{ rx = _LinearESOpenPIC2D_XLENGTH ; break ; 
goto cs1;
} 


cs1:
{ const double X10_TEMP12 = 1.0; 
lx = X10_TEMP12 ; const double X10_TEMP14 = 1.0; 
ly = X10_TEMP14 ; const double X10_TEMP15 = 1.0; 
const double X10_TEMP17 = _LinearESOpenPIC2D_XLENGTH - X10_TEMP15 ; 
rx = X10_TEMP17 ; const double X10_TEMP18 = 1.0; 
const double X10_TEMP20 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP18 ; 
ry = X10_TEMP20 ; break ; 
goto cs2;
} 


cs2:
{ const double X10_TEMP24 = 1.0; 
lx = X10_TEMP24 ; const double X10_TEMP25 = 1.0; 
const double X10_TEMP27 = _LinearESOpenPIC2D_XLENGTH - X10_TEMP25 ; 
rx = X10_TEMP27 ; break ; 
} 

cs3: {break;}} /*END OF SWITCH*/
const double edgelx = lx ; 
const double edgely = ly ; 
const double edgerx = rx ; 
const double edgery = ry ; 
const double quantum = _LinearESOpenPIC2D_ELECTRON_CHARGE * _LinearESOpenPIC2D_DELTA_TIME ; 
struct Dist1 RX10_TEMP0 = particles .distValue ; 
struct Dist1 dEnergy = RX10_TEMP0 ; 
struct Region1 RX10_TEMP1 = dEnergy .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount1 ( dEnergy , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP15 = (double *)calloc(RX10_TEMP14,sizeof( double )); 
struct doubleStub RX10_TEMP16  ; 
doubleStub_doubleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP5 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP18 = RX10_TEMP7 [ RX10_TEMP19 ] 
; 
SX10_TEMP6 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP17 = SX10_TEMP6 ; 
struct doubleRefArray1 RX10_TEMP20  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP20/*Assignment*/, dEnergy , RX10_TEMP17 ) ; 
struct doubleRefArray1 energy = RX10_TEMP20 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP22 = X10_TEMP36 .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP24 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP9 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
struct Region1 RX10_TEMP27 = X10_TEMP36 .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , pl ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP28 ) ; 
const int X10_TEMP37 = RX10_TEMP32 ; 
/* async ( X10_TEMP37 )  */ 
{ struct doubleRefArray2 fcLocalX = LinearESOpenPIC2D_makeLocalSpace ( X10_TEMP0 , forceChargeX , fcGuardX ) ; 
struct doubleRefArray2 fcLocalY = LinearESOpenPIC2D_makeLocalSpace ( X10_TEMP0 , forceChargeY , fcGuardY ) ; 
struct Dist1 RX10_TEMP33 = particles .distValue ; 
struct Dist1 X10_TEMP44 = RX10_TEMP33 ; 
const int X10_TEMP45 = /* here  */ 0 ; 
struct Dist1 X10_TEMP47 = restrictDist1 ( X10_TEMP44 , X10_TEMP45 ) ; 
const int X10_TEMP48 = /* here  */ 0 ; 
struct Region1 RX10_TEMP35 = X10_TEMP47 .dReg ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = RX10_TEMP35 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP37 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP11 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP35 , RX10_TEMP39 ) ; 
/* async ( X10_TEMP48 )  */ 
{ LinearESOpenPIC2D_pushParticle ( X10_TEMP0 , particles , pt , fcLocalX , fcLocalY , quantum , edgelx , edgely , edgerx , edgery , energy ) ; 
} 

} 

} 

} 

} 

const double X10_TEMP59 = 0.125; 
const double X10_TEMP60 = doublerefArraySum1 ( energy ) ; 
const double X10_TEMP62 = X10_TEMP59 * X10_TEMP60 ; 
return X10_TEMP62 ; 
} 

doubleRefArray2 /*static*/LinearESOpenPIC2D_makeLocalSpace (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct doubleRefArray2 const data ,  struct doubleRefArray2 const guards ) 
{ struct Dist2 RX10_TEMP0 = data .distValue ; 
struct Dist2 dData = RX10_TEMP0 ; 
struct Dist2 RX10_TEMP1 = guards .distValue ; 
struct Dist2 dGuard = RX10_TEMP1 ; 
struct Region2 rLocalD = X10Util_get2DLRegion ( dData ) ; 
struct Region2 rLocalG = X10Util_get2DLRegion ( dGuard ) ; 
struct Region2 X10_TEMP8 = unionRegion2 ( rLocalD , rLocalG ) ; 
const int X10_TEMP9 = /* here  */ 0 ; 
struct Dist2 X10_TEMP11 = getPlaceDist2 ( X10_TEMP8 , X10_TEMP9 ) ; 
struct Dist2 dResult = X10_TEMP11 ; 
struct Region2 RX10_TEMP2 = dResult .dReg ; 
const int RX10_TEMP3 = 0 ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP5 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP5 = RX10_TEMP5 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP5 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP7 = RX10_TEMP5 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP8 = (doubleStub *)calloc(RX10_TEMP7,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP6 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP9 = SX10_TEMP3 ; 
const int RX10_TEMP10 = /* here  */ 0 ; 
const int RX10_TEMP11 = RX10_TEMP9 ; 
const int RX10_TEMP12 = /* place.places ( RX10_TEMP11 )  */ 0 
; 
const int RX10_TEMP13 = getDistLocalCount2 ( dResult , RX10_TEMP11 ) ; 
const int RX10_TEMP14 = RX10_TEMP13 - RX10_TEMP4 ; 
/* async ( RX10_TEMP12 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP15 = RX10_TEMP14 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP16 = (double *)calloc(RX10_TEMP15,sizeof( double )); 
struct doubleStub RX10_TEMP17  ; 
doubleStub_doubleStub( &RX10_TEMP17/*Assignment*/, RX10_TEMP16 ) ; 
/* async ( RX10_TEMP10 )  */ 
{ RX10_TEMP8 [ RX10_TEMP9 ] = RX10_TEMP17 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP6 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP19 = RX10_TEMP8 [ RX10_TEMP20 ] 
; 
SX10_TEMP6 [ RX10_TEMP20 ] = RX10_TEMP19 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP18 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP21  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP21/*Assignment*/, dResult , RX10_TEMP18 ) ; 
struct doubleRefArray2 result = RX10_TEMP21 ; 
/* finish  */ 
{ struct Dist2 RX10_TEMP22 = data .distValue ; 
struct Dist2 X10_TEMP14 = RX10_TEMP22 ; 
const int X10_TEMP15 = /* here  */ 0 ; 
struct Dist2 X10_TEMP17 = restrictDist2 ( X10_TEMP14 , X10_TEMP15 ) ; 
const int X10_TEMP18 = /* here  */ 0 ; 
struct Region2 RX10_TEMP24 = X10_TEMP17 .dReg ; 
const int RX10_TEMP27 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = RX10_TEMP24 .regSize ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP27 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP26 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP23 = SX10_TEMP9 ; 
const int RX10_TEMP28 = RX10_TEMP23 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP24 , RX10_TEMP28 ) ; 
/* async ( X10_TEMP18 )  */ 
{ struct Dist2 RX10_TEMP29 = data .distValue ; 
struct Region2 RX10_TEMP30 = RX10_TEMP29 .dReg ; 
const int RX10_TEMP31 = searchPointInRegion2 ( RX10_TEMP30 , pt ) ; 
const int RX10_TEMP32 = 0 ; 
const int RX10_TEMP33 = RX10_TEMP31 < RX10_TEMP32 ; 
if ( RX10_TEMP33 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP34 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP34 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP35 = getPlaceFromDist2 ( RX10_TEMP29 , RX10_TEMP31 ) ; 
const int RX10_TEMP37 = /* here  */ 0 ; 
const int RX10_TEMP38 = RX10_TEMP35 != RX10_TEMP37 ; 
if ( RX10_TEMP38 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP36 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP36 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP39 = getRefArrayValue2double ( data , RX10_TEMP31 ) ; 
const double X10_TEMP22 = RX10_TEMP39 ; 
const double X10_TEMP23 = X10_TEMP22 ; 
struct Dist2 RX10_TEMP40 = result .distValue ; 
struct Region2 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion2 ( RX10_TEMP41 , pt ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist2 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP42 , X10_TEMP23 ) ; 
} 

} 

struct Dist2 RX10_TEMP50 = guards .distValue ; 
struct Dist2 X10_TEMP24 = RX10_TEMP50 ; 
const int X10_TEMP25 = /* here  */ 0 ; 
struct Dist2 X10_TEMP27 = restrictDist2 ( X10_TEMP24 , X10_TEMP25 ) ; 
const int X10_TEMP28 = /* here  */ 0 ; 
struct Region2 RX10_TEMP52 = X10_TEMP27 .dReg ; 
const int RX10_TEMP55 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP53 = RX10_TEMP52 .regSize ; 
RX10_TEMP53 = RX10_TEMP53 - RX10_TEMP55 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP54 = RX10_TEMP53 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP54 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP51 = SX10_TEMP11 ; 
const int RX10_TEMP56 = RX10_TEMP51 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP52 , RX10_TEMP56 ) ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist2 RX10_TEMP57 = guards .distValue ; 
struct Region2 RX10_TEMP58 = RX10_TEMP57 .dReg ; 
const int RX10_TEMP59 = searchPointInRegion2 ( RX10_TEMP58 , pt ) ; 
const int RX10_TEMP60 = 0 ; 
const int RX10_TEMP61 = RX10_TEMP59 < RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP62 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP62 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP63 = getPlaceFromDist2 ( RX10_TEMP57 , RX10_TEMP59 ) ; 
const int RX10_TEMP65 = /* here  */ 0 ; 
const int RX10_TEMP66 = RX10_TEMP63 != RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP64 = "Bad place access for array guards" ; 
fprintf(stderr, RX10_TEMP64 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP67 = getRefArrayValue2double ( guards , RX10_TEMP59 ) ; 
const double X10_TEMP32 = RX10_TEMP67 ; 
const double X10_TEMP33 = X10_TEMP32 ; 
struct Dist2 RX10_TEMP68 = result .distValue ; 
struct Region2 RX10_TEMP69 = RX10_TEMP68 .dReg ; 
const int RX10_TEMP70 = searchPointInRegion2 ( RX10_TEMP69 , pt ) ; 
const int RX10_TEMP71 = 0 ; 
const int RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP74 = getPlaceFromDist2 ( RX10_TEMP68 , RX10_TEMP70 ) ; 
const int RX10_TEMP76 = /* here  */ 0 ; 
const int RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76 ; 
if ( RX10_TEMP77 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP75 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP75 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( result , RX10_TEMP70 , X10_TEMP33 ) ; 
} 

} 

} 

return result ; 
} 

void /*static*/LinearESOpenPIC2D_pushParticle (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct Point1 const pt ,  struct doubleRefArray2 const forceChargeX ,  struct doubleRefArray2 const forceChargeY , const double quantum , const double edgelx , const double edgely , const double edgerx , const double edgery ,  struct doubleRefArray1 const energy ) 
{ struct Dist1 RX10_TEMP0 = particles .distValue ; 
struct Region1 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
const int RX10_TEMP2 = searchPointInRegion1 ( RX10_TEMP1 , pt ) ; 
const int RX10_TEMP3 = 0 ; 
const int RX10_TEMP4 = RX10_TEMP2 < RX10_TEMP3 ; 
if ( RX10_TEMP4 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP5 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP5 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP6 = getPlaceFromDist1 ( RX10_TEMP0 , RX10_TEMP2 ) ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP6 != RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP7 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP7 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP10 = getRefArrayValue1Particle ( particles , RX10_TEMP2 ) ; 
struct Particle p = RX10_TEMP10 ; 
const double X10_TEMP3 = Particle_getX ( p ) ; 
const int x = /*casting*/( int ) X10_TEMP3 ; 
const double X10_TEMP5 = Particle_getY ( p ) ; 
const int y = /*casting*/( int ) X10_TEMP5 ; 
const double X10_TEMP7 = Particle_getX ( p ) ; 
const double dx = X10_TEMP7 - x ; 
const double X10_TEMP9 = Particle_getY ( p ) ; 
const double dy = X10_TEMP9 - y ; 
const double X10_TEMP11 = 1.0; 
const double mx = X10_TEMP11 - dx ; 
const double X10_TEMP13 = 1.0; 
const double my = X10_TEMP13 - dy ; 
const int X10_TEMP15 = 1 ; 
const int X10_TEMP19 = y + X10_TEMP15 ; 
const int X10_TEMP17 = 1 ; 
const int X10_TEMP20 = x + X10_TEMP17 ; 
struct Point2 RX10_TEMP11  ; 
Point2_Point2( &RX10_TEMP11/*Assignment*/, X10_TEMP19 , X10_TEMP20 ) ; 
struct Dist2 RX10_TEMP12 = forceChargeX .distValue ; 
struct Region2 RX10_TEMP13 = RX10_TEMP12 .dReg ; 
const int RX10_TEMP14 = searchPointInRegion2 ( RX10_TEMP13 , RX10_TEMP11 ) ; 
const int RX10_TEMP15 = 0 ; 
const int RX10_TEMP16 = RX10_TEMP14 < RX10_TEMP15 ; 
if ( RX10_TEMP16 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP17 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP17 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP18 = getPlaceFromDist2 ( RX10_TEMP12 , RX10_TEMP14 ) ; 
const int RX10_TEMP20 = /* here  */ 0 ; 
const int RX10_TEMP21 = RX10_TEMP18 != RX10_TEMP20 ; 
if ( RX10_TEMP21 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP19 = "Bad place access for array forceChargeX" ; 
fprintf(stderr, RX10_TEMP19 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP22 = getRefArrayValue2double ( forceChargeX , RX10_TEMP14 ) ; 
const double X10_TEMP21 = RX10_TEMP22 ; 
const double X10_TEMP27 = dx * X10_TEMP21 ; 
const int X10_TEMP22 = 1 ; 
const int X10_TEMP25 = y + X10_TEMP22 ; 
struct Point2 RX10_TEMP23  ; 
Point2_Point2( &RX10_TEMP23/*Assignment*/, X10_TEMP25 , x ) ; 
struct Dist2 RX10_TEMP24 = forceChargeX .distValue ; 
struct Region2 RX10_TEMP25 = RX10_TEMP24 .dReg ; 
const int RX10_TEMP26 = searchPointInRegion2 ( RX10_TEMP25 , RX10_TEMP23 ) ; 
const int RX10_TEMP27 = 0 ; 
const int RX10_TEMP28 = RX10_TEMP26 < RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP29 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP29 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP30 = getPlaceFromDist2 ( RX10_TEMP24 , RX10_TEMP26 ) ; 
const int RX10_TEMP32 = /* here  */ 0 ; 
const int RX10_TEMP33 = RX10_TEMP30 != RX10_TEMP32 ; 
if ( RX10_TEMP33 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP31 = "Bad place access for array forceChargeX" ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP34 = getRefArrayValue2double ( forceChargeX , RX10_TEMP26 ) ; 
const double X10_TEMP26 = RX10_TEMP34 ; 
const double X10_TEMP28 = mx * X10_TEMP26 ; 
const double X10_TEMP30 = X10_TEMP27 + X10_TEMP28 ; 
const double X10_TEMP43 = dy * X10_TEMP30 ; 
const int X10_TEMP32 = 1 ; 
const int X10_TEMP34 = x + X10_TEMP32 ; 
struct Point2 RX10_TEMP35  ; 
Point2_Point2( &RX10_TEMP35/*Assignment*/, y , X10_TEMP34 ) ; 
struct Dist2 RX10_TEMP36 = forceChargeX .distValue ; 
struct Region2 RX10_TEMP37 = RX10_TEMP36 .dReg ; 
const int RX10_TEMP38 = searchPointInRegion2 ( RX10_TEMP37 , RX10_TEMP35 ) ; 
const int RX10_TEMP39 = 0 ; 
const int RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP41 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP41 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP42 = getPlaceFromDist2 ( RX10_TEMP36 , RX10_TEMP38 ) ; 
const int RX10_TEMP44 = /* here  */ 0 ; 
const int RX10_TEMP45 = RX10_TEMP42 != RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP43 = "Bad place access for array forceChargeX" ; 
fprintf(stderr, RX10_TEMP43 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP46 = getRefArrayValue2double ( forceChargeX , RX10_TEMP38 ) ; 
const double X10_TEMP35 = RX10_TEMP46 ; 
const double X10_TEMP39 = dx * X10_TEMP35 ; 
struct Point2 RX10_TEMP47  ; 
Point2_Point2( &RX10_TEMP47/*Assignment*/, y , x ) ; 
struct Dist2 RX10_TEMP48 = forceChargeX .distValue ; 
struct Region2 RX10_TEMP49 = RX10_TEMP48 .dReg ; 
const int RX10_TEMP50 = searchPointInRegion2 ( RX10_TEMP49 , RX10_TEMP47 ) ; 
const int RX10_TEMP51 = 0 ; 
const int RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP53 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP53 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP54 = getPlaceFromDist2 ( RX10_TEMP48 , RX10_TEMP50 ) ; 
const int RX10_TEMP56 = /* here  */ 0 ; 
const int RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56 ; 
if ( RX10_TEMP57 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP55 = "Bad place access for array forceChargeX" ; 
fprintf(stderr, RX10_TEMP55 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP58 = getRefArrayValue2double ( forceChargeX , RX10_TEMP50 ) ; 
const double X10_TEMP38 = RX10_TEMP58 ; 
const double X10_TEMP40 = mx * X10_TEMP38 ; 
const double X10_TEMP42 = X10_TEMP39 + X10_TEMP40 ; 
const double X10_TEMP44 = my * X10_TEMP42 ; 
const double X10_TEMP46 = X10_TEMP43 + X10_TEMP44 ; 
const double ax = X10_TEMP46 ; 
const int X10_TEMP48 = 1 ; 
const int X10_TEMP52 = y + X10_TEMP48 ; 
const int X10_TEMP50 = 1 ; 
const int X10_TEMP53 = x + X10_TEMP50 ; 
struct Point2 RX10_TEMP59  ; 
Point2_Point2( &RX10_TEMP59/*Assignment*/, X10_TEMP52 , X10_TEMP53 ) ; 
struct Dist2 RX10_TEMP60 = forceChargeY .distValue ; 
struct Region2 RX10_TEMP61 = RX10_TEMP60 .dReg ; 
const int RX10_TEMP62 = searchPointInRegion2 ( RX10_TEMP61 , RX10_TEMP59 ) ; 
const int RX10_TEMP63 = 0 ; 
const int RX10_TEMP64 = RX10_TEMP62 < RX10_TEMP63 ; 
if ( RX10_TEMP64 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP66 = getPlaceFromDist2 ( RX10_TEMP60 , RX10_TEMP62 ) ; 
const int RX10_TEMP68 = /* here  */ 0 ; 
const int RX10_TEMP69 = RX10_TEMP66 != RX10_TEMP68 ; 
if ( RX10_TEMP69 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP67 = "Bad place access for array forceChargeY" ; 
fprintf(stderr, RX10_TEMP67 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP70 = getRefArrayValue2double ( forceChargeY , RX10_TEMP62 ) ; 
const double X10_TEMP54 = RX10_TEMP70 ; 
const double X10_TEMP60 = dx * X10_TEMP54 ; 
const int X10_TEMP55 = 1 ; 
const int X10_TEMP58 = y + X10_TEMP55 ; 
struct Point2 RX10_TEMP71  ; 
Point2_Point2( &RX10_TEMP71/*Assignment*/, X10_TEMP58 , x ) ; 
struct Dist2 RX10_TEMP72 = forceChargeY .distValue ; 
struct Region2 RX10_TEMP73 = RX10_TEMP72 .dReg ; 
const int RX10_TEMP74 = searchPointInRegion2 ( RX10_TEMP73 , RX10_TEMP71 ) ; 
const int RX10_TEMP75 = 0 ; 
const int RX10_TEMP76 = RX10_TEMP74 < RX10_TEMP75 ; 
if ( RX10_TEMP76 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP77 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP77 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP78 = getPlaceFromDist2 ( RX10_TEMP72 , RX10_TEMP74 ) ; 
const int RX10_TEMP80 = /* here  */ 0 ; 
const int RX10_TEMP81 = RX10_TEMP78 != RX10_TEMP80 ; 
if ( RX10_TEMP81 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP79 = "Bad place access for array forceChargeY" ; 
fprintf(stderr, RX10_TEMP79 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP82 = getRefArrayValue2double ( forceChargeY , RX10_TEMP74 ) ; 
const double X10_TEMP59 = RX10_TEMP82 ; 
const double X10_TEMP61 = mx * X10_TEMP59 ; 
const double X10_TEMP63 = X10_TEMP60 + X10_TEMP61 ; 
const double X10_TEMP76 = dy * X10_TEMP63 ; 
const int X10_TEMP65 = 1 ; 
const int X10_TEMP67 = x + X10_TEMP65 ; 
struct Point2 RX10_TEMP83  ; 
Point2_Point2( &RX10_TEMP83/*Assignment*/, y , X10_TEMP67 ) ; 
struct Dist2 RX10_TEMP84 = forceChargeY .distValue ; 
struct Region2 RX10_TEMP85 = RX10_TEMP84 .dReg ; 
const int RX10_TEMP86 = searchPointInRegion2 ( RX10_TEMP85 , RX10_TEMP83 ) ; 
const int RX10_TEMP87 = 0 ; 
const int RX10_TEMP88 = RX10_TEMP86 < RX10_TEMP87 ; 
if ( RX10_TEMP88 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP89 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP89 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP90 = getPlaceFromDist2 ( RX10_TEMP84 , RX10_TEMP86 ) ; 
const int RX10_TEMP92 = /* here  */ 0 ; 
const int RX10_TEMP93 = RX10_TEMP90 != RX10_TEMP92 ; 
if ( RX10_TEMP93 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP91 = "Bad place access for array forceChargeY" ; 
fprintf(stderr, RX10_TEMP91 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP94 = getRefArrayValue2double ( forceChargeY , RX10_TEMP86 ) ; 
const double X10_TEMP68 = RX10_TEMP94 ; 
const double X10_TEMP72 = dx * X10_TEMP68 ; 
struct Point2 RX10_TEMP95  ; 
Point2_Point2( &RX10_TEMP95/*Assignment*/, y , x ) ; 
struct Dist2 RX10_TEMP96 = forceChargeY .distValue ; 
struct Region2 RX10_TEMP97 = RX10_TEMP96 .dReg ; 
const int RX10_TEMP98 = searchPointInRegion2 ( RX10_TEMP97 , RX10_TEMP95 ) ; 
const int RX10_TEMP99 = 0 ; 
const int RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99 ; 
if ( RX10_TEMP100 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP101 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP101 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP102 = getPlaceFromDist2 ( RX10_TEMP96 , RX10_TEMP98 ) ; 
const int RX10_TEMP104 = /* here  */ 0 ; 
const int RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104 ; 
if ( RX10_TEMP105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP103 = "Bad place access for array forceChargeY" ; 
fprintf(stderr, RX10_TEMP103 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP106 = getRefArrayValue2double ( forceChargeY , RX10_TEMP98 ) ; 
const double X10_TEMP71 = RX10_TEMP106 ; 
const double X10_TEMP73 = mx * X10_TEMP71 ; 
const double X10_TEMP75 = X10_TEMP72 + X10_TEMP73 ; 
const double X10_TEMP77 = my * X10_TEMP75 ; 
const double X10_TEMP79 = X10_TEMP76 + X10_TEMP77 ; 
const double ay = X10_TEMP79 ; 
const double X10_TEMP81 = Particle_getXVel ( p ) ; 
const double X10_TEMP82 = quantum * ax ; 
/*UpdatableVariableDeclaration*/double vx = X10_TEMP81 + X10_TEMP82 ; 
const double X10_TEMP84 = Particle_getYVel ( p ) ; 
const double X10_TEMP85 = quantum * ay ; 
/*UpdatableVariableDeclaration*/double vy = X10_TEMP84 + X10_TEMP85 ; 
const double X10_TEMP87 = Particle_getX ( p ) ; 
const double X10_TEMP88 = vx * _LinearESOpenPIC2D_DELTA_TIME ; 
/*UpdatableVariableDeclaration*/double nx = X10_TEMP87 + X10_TEMP88 ; 
const double X10_TEMP90 = Particle_getY ( p ) ; 
const double X10_TEMP91 = vy * _LinearESOpenPIC2D_DELTA_TIME ; 
/*UpdatableVariableDeclaration*/double ny = X10_TEMP90 + X10_TEMP91 ; 
const double X10_TEMP94 = Particle_getXVel ( p ) ; 
const double X10_TEMP97 = vx + X10_TEMP94 ; 
const int X10_TEMP98 = 2 ; 
const double X10_TEMP104 = pow ( X10_TEMP97 , X10_TEMP98 ) ; 
const double X10_TEMP99 = Particle_getYVel ( p ) ; 
const double X10_TEMP102 = vy + X10_TEMP99 ; 
const int X10_TEMP103 = 2 ; 
const double X10_TEMP105 = pow ( X10_TEMP102 , X10_TEMP103 ) ; 
const double X10_TEMP107 = X10_TEMP104 + X10_TEMP105 ; 
const double X10_TEMP109 = X10_TEMP107 ; 
struct Dist1 RX10_TEMP107 = energy .distValue ; 
struct Region1 RX10_TEMP108 = RX10_TEMP107 .dReg ; 
const int RX10_TEMP109 = searchPointInRegion1 ( RX10_TEMP108 , pt ) ; 
const int RX10_TEMP110 = 0 ; 
const int RX10_TEMP111 = RX10_TEMP109 < RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP112 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP112 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP113 = getPlaceFromDist1 ( RX10_TEMP107 , RX10_TEMP109 ) ; 
const int RX10_TEMP115 = /* here  */ 0 ; 
const int RX10_TEMP116 = RX10_TEMP113 != RX10_TEMP115 ; 
if ( RX10_TEMP116 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP114 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP114 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP109 , X10_TEMP109 ) ; 
const int X10_TEMP112 = 1 ; 
const int X10_TEMP122 = 2 ; 
const int X10_TEMP133 = 3 ; 
/*SWITCH CASE*/while(1)
{ 
 if(X10_TEMP112== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs4;
else if(X10_TEMP122== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs5;
else if(X10_TEMP133== _LinearESOpenPIC2D_BOUNDARY_CONDITION)
goto cs6;
goto cs7;

cs4:
{ const int X10_TEMP114 = nx < edgelx ; 
if ( X10_TEMP114 ) 
{ const double X10_TEMP116 = nx + edgerx ; 
nx = X10_TEMP116 ; } 

const int X10_TEMP118 = nx >= edgerx ; 
if ( X10_TEMP118 ) 
{ const double X10_TEMP120 = nx - edgerx ; 
nx = X10_TEMP120 ; } 

break ; 
goto cs5;
} 


cs5:
{ const int X10_TEMP123 = ny < edgely ; 
const int X10_TEMP124 = ny >= edgery ; 
const int X10_TEMP126 = X10_TEMP123 || X10_TEMP124 ; 
if ( X10_TEMP126 ) 
{ const double X10_TEMP128 = Particle_getY ( p ) ; 
ny = X10_TEMP128 ; const int X10_TEMP129 = 0 ; 
const double X10_TEMP131 = X10_TEMP129 - vy ; 
vy = X10_TEMP131 ; } 

goto cs6;
} 


cs6:
{ const int X10_TEMP134 = nx < edgelx ; 
const int X10_TEMP135 = nx >= edgerx ; 
const int X10_TEMP137 = X10_TEMP134 || X10_TEMP135 ; 
if ( X10_TEMP137 ) 
{ const double X10_TEMP139 = Particle_getX ( p ) ; 
nx = X10_TEMP139 ; const int X10_TEMP140 = 0 ; 
const double X10_TEMP142 = X10_TEMP140 - vx ; 
vx = X10_TEMP142 ; } 

break ; 
} 

cs7: {break;}} /*END OF SWITCH*/
struct Particle X10_TEMP149  ; 
Particle_Particle_4( &X10_TEMP149/*Assignment*/, nx , ny , vx , vy ) ; 
struct Particle X10_TEMP150 = X10_TEMP149 ; 
struct Dist1 RX10_TEMP117 = particles .distValue ; 
struct Region1 RX10_TEMP118 = RX10_TEMP117 .dReg ; 
const int RX10_TEMP119 = searchPointInRegion1 ( RX10_TEMP118 , pt ) ; 
const int RX10_TEMP120 = 0 ; 
const int RX10_TEMP121 = RX10_TEMP119 < RX10_TEMP120 ; 
if ( RX10_TEMP121 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP122 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP122 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP123 = getPlaceFromDist1 ( RX10_TEMP117 , RX10_TEMP119 ) ; 
const int RX10_TEMP125 = /* here  */ 0 ; 
const int RX10_TEMP126 = RX10_TEMP123 != RX10_TEMP125 ; 
if ( RX10_TEMP126 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP124 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP124 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Particle ( particles , RX10_TEMP119 , X10_TEMP150 ) ; 
} 

intRefArray1 /*static*/LinearESOpenPIC2D_countParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct Dist2 const dField ) 
{ const int X10_TEMP3 = 0 ; 
struct Dist1 dCount = X10Util_get2DDistRank ( dField , X10_TEMP3 ) ; 
struct Region1 RX10_TEMP0 = dCount .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP6 = (intStub *)calloc(RX10_TEMP5,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dCount , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(RX10_TEMP14,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
const int X10_TEMP6 = 0 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = X10_TEMP6 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP15 = SX10_TEMP5 ; 
struct intStub RX10_TEMP16  ; 
intStub_intStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP7 = (intStub *)calloc(RX10_TEMP4,sizeof( intStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct intStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct intRefArray1 RX10_TEMP20  ; 
intRefArray1_intRefArray1( &RX10_TEMP20/*Assignment*/, dCount , RX10_TEMP17 ) ; 
struct intRefArray1 count = RX10_TEMP20 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP9 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP22 = X10_TEMP9 .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP24 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP10 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
struct Region1 RX10_TEMP27 = X10_TEMP9 .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , pl ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP9." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( X10_TEMP9 , RX10_TEMP28 ) ; 
const int X10_TEMP10 = RX10_TEMP32 ; 
/* async ( X10_TEMP10 )  */ 
{ struct Dist1 RX10_TEMP33 = particles .distValue ; 
struct Dist1 X10_TEMP11 = RX10_TEMP33 ; 
const int X10_TEMP12 = /* here  */ 0 ; 
struct Dist1 X10_TEMP14 = restrictDist1 ( X10_TEMP11 , X10_TEMP12 ) ; 
struct Region1 RX10_TEMP35 = X10_TEMP14 .dReg ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = RX10_TEMP35 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP37 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP12 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP35 , RX10_TEMP39 ) ; 
struct Dist1 RX10_TEMP40 = particles .distValue ; 
struct Region1 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion1 ( RX10_TEMP41 , pt ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist1 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP50 = getRefArrayValue1Particle ( particles , RX10_TEMP42 ) ; 
struct Particle X10_TEMP16 = RX10_TEMP50 ; 
const double X10_TEMP17 = Particle_getY ( X10_TEMP16 ) ; 
const int X10_TEMP19 = /*casting*/( int ) X10_TEMP17 ; 
struct Point1 RX10_TEMP51  ; 
Point1_Point1( &RX10_TEMP51/*Assignment*/, X10_TEMP19 ) ; 
struct Dist1 RX10_TEMP52 = count .distValue ; 
struct Region1 RX10_TEMP53 = RX10_TEMP52 .dReg ; 
const int RX10_TEMP54 = searchPointInRegion1 ( RX10_TEMP53 , RX10_TEMP51 ) ; 
const int RX10_TEMP55 = 0 ; 
const int RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP58 = getPlaceFromDist1 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
const int RX10_TEMP60 = /* here  */ 0 ; 
const int RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP62 = getRefArrayValue1int ( count , RX10_TEMP54 ) ; 
const int X10_TEMP20 = RX10_TEMP62 ; 
const int X10_TEMP21 = 1 ; 
struct Point1 RX10_TEMP63  ; 
Point1_Point1( &RX10_TEMP63/*Assignment*/, X10_TEMP19 ) ; 
struct Dist1 RX10_TEMP64 = count .distValue ; 
struct Region1 RX10_TEMP65 = RX10_TEMP64 .dReg ; 
const int RX10_TEMP66 = searchPointInRegion1 ( RX10_TEMP65 , RX10_TEMP63 ) ; 
const int RX10_TEMP67 = 0 ; 
const int RX10_TEMP68 = RX10_TEMP66 < RX10_TEMP67 ; 
if ( RX10_TEMP68 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP69 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP69 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP70 = getPlaceFromDist1 ( RX10_TEMP64 , RX10_TEMP66 ) ; 
const int RX10_TEMP72 = /* here  */ 0 ; 
const int RX10_TEMP73 = RX10_TEMP70 != RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP71 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP71 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP74 = getRefArrayValue1int ( count , RX10_TEMP66 ) ; 
const int X10_TEMP22 = RX10_TEMP74 ; 
const int X10_TEMP23 = X10_TEMP22 + X10_TEMP21 ; 
struct Point1 RX10_TEMP75  ; 
Point1_Point1( &RX10_TEMP75/*Assignment*/, X10_TEMP19 ) ; 
struct Dist1 RX10_TEMP76 = count .distValue ; 
struct Region1 RX10_TEMP77 = RX10_TEMP76 .dReg ; 
const int RX10_TEMP78 = searchPointInRegion1 ( RX10_TEMP77 , RX10_TEMP75 ) ; 
const int RX10_TEMP79 = 0 ; 
const int RX10_TEMP80 = RX10_TEMP78 < RX10_TEMP79 ; 
if ( RX10_TEMP80 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP81 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP81 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP82 = getPlaceFromDist1 ( RX10_TEMP76 , RX10_TEMP78 ) ; 
const int RX10_TEMP84 = /* here  */ 0 ; 
const int RX10_TEMP85 = RX10_TEMP82 != RX10_TEMP84 ; 
if ( RX10_TEMP85 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP83 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP83 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( count , RX10_TEMP78 , X10_TEMP23 ) ; 
} 

} 

} 

} 

return count ; 
} 

Dist2 /*static*/LinearESOpenPIC2D_repartition (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct intRefArray1 const particleCount ,  struct Dist2 const dField , const double countAve ) 
{ const int MAX = 32 ; 
struct Dist1 X10_TEMP2 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP2 ; 
const int X10_TEMP6 = 0 ; 
struct Dist1 dGrids = X10Util_get2DDistRank ( dField , X10_TEMP6 ) ; 
struct Region2 RX10_TEMP0 = dField .dReg ; 
struct Region2 rField = RX10_TEMP0 ; 
const int X10_TEMP11 = 1 ; 
struct Region1 rRows = X10Util_getRank2D ( rField , X10_TEMP11 ) ; 
struct Region1 RX10_TEMP1 = dUnique .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP6,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount1 ( dUnique , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP15 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP15,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP15 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP6 ; 
const double X10_TEMP14 = 0.0; 
SX10_TEMP5 [ RX10_TEMP14 ] = X10_TEMP14 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP16 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP17  ; 
doubleStub_doubleStub( &RX10_TEMP17/*Assignment*/, RX10_TEMP16 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP17 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP5 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP19 = RX10_TEMP7 [ RX10_TEMP20 ] 
; 
SX10_TEMP7 [ RX10_TEMP20 ] = RX10_TEMP19 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleRefArray1 RX10_TEMP21  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP21/*Assignment*/, dUnique , RX10_TEMP18 ) ; 
struct doubleRefArray1 border = RX10_TEMP21 ; 
struct Region1 RX10_TEMP22 = dUnique .dReg ; 
const int RX10_TEMP23 = 0 ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP25 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP25 = RX10_TEMP25 - RX10_TEMP24 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP25 + SX10_TEMP9 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP27 = RX10_TEMP25 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP28 = (intStub *)calloc(RX10_TEMP27,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP26 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP29 = SX10_TEMP12 ; 
const int RX10_TEMP30 = /* here  */ 0 ; 
const int RX10_TEMP31 = RX10_TEMP29 ; 
const int RX10_TEMP32 = /* place.places ( RX10_TEMP31 )  */ 0 
; 
const int RX10_TEMP33 = getDistLocalCount1 ( dUnique , RX10_TEMP31 ) ; 
const int RX10_TEMP34 = RX10_TEMP33 - RX10_TEMP24 ; 
/* async ( RX10_TEMP32 )  */ 
{ const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP36 = RX10_TEMP34 + SX10_TEMP13 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP14 = (int *)calloc(RX10_TEMP36,sizeof( int )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP36 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP35 = SX10_TEMP15 ; 
const int X10_TEMP17 = 0 ; 
SX10_TEMP14 [ RX10_TEMP35 ] = X10_TEMP17 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP37 = SX10_TEMP14 ; 
struct intStub RX10_TEMP38  ; 
intStub_intStub( &RX10_TEMP38/*Assignment*/, RX10_TEMP37 ) ; 
/* async ( RX10_TEMP30 )  */ 
{ RX10_TEMP28 [ RX10_TEMP29 ] = RX10_TEMP38 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP16 = (intStub *)calloc(RX10_TEMP26,sizeof( intStub )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP26 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP41 = SX10_TEMP17 ; 
struct intStub RX10_TEMP40 = RX10_TEMP28 [ RX10_TEMP41 ] 
; 
SX10_TEMP16 [ RX10_TEMP41 ] = RX10_TEMP40 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP39 = SX10_TEMP16 ; 
struct intRefArray1 RX10_TEMP42  ; 
intRefArray1_intRefArray1( &RX10_TEMP42/*Assignment*/, dUnique , RX10_TEMP39 ) ; 
struct intRefArray1 particleTotals = RX10_TEMP42 ; 
struct Region1 RX10_TEMP43 = dUnique .dReg ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP46 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP46 = RX10_TEMP46 - RX10_TEMP45 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP46 + SX10_TEMP18 ; 
const int SX10_TEMP19 = 1 ; 
const int RX10_TEMP48 = RX10_TEMP46 + SX10_TEMP19 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP49 = (intStub *)calloc(RX10_TEMP48,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP47 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP50 = SX10_TEMP21 ; 
const int RX10_TEMP51 = /* here  */ 0 ; 
const int RX10_TEMP52 = RX10_TEMP50 ; 
const int RX10_TEMP53 = /* place.places ( RX10_TEMP52 )  */ 0 
; 
const int RX10_TEMP54 = getDistLocalCount1 ( dUnique , RX10_TEMP52 ) ; 
const int RX10_TEMP55 = RX10_TEMP54 - RX10_TEMP45 ; 
/* async ( RX10_TEMP53 )  */ 
{ const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP57 = RX10_TEMP55 + SX10_TEMP22 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP23 = (int *)calloc(RX10_TEMP57,sizeof( int )); 
for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP57 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP56 = SX10_TEMP24 ; 
const int X10_TEMP20 = 0 ; 
SX10_TEMP23 [ RX10_TEMP56 ] = X10_TEMP20 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP58 = SX10_TEMP23 ; 
struct intStub RX10_TEMP59  ; 
intStub_intStub( &RX10_TEMP59/*Assignment*/, RX10_TEMP58 ) ; 
/* async ( RX10_TEMP51 )  */ 
{ RX10_TEMP49 [ RX10_TEMP50 ] = RX10_TEMP59 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP25 = (intStub *)calloc(RX10_TEMP47,sizeof( intStub )); 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP47 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP26 ; 
struct intStub RX10_TEMP61 = RX10_TEMP49 [ RX10_TEMP62 ] 
; 
SX10_TEMP25 [ RX10_TEMP62 ] = RX10_TEMP61 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP60 = SX10_TEMP25 ; 
struct intRefArray1 RX10_TEMP63  ; 
intRefArray1_intRefArray1( &RX10_TEMP63/*Assignment*/, dUnique , RX10_TEMP60 ) ; 
struct intRefArray1 gridTotals = RX10_TEMP63 ; 
struct Dist1 X10_TEMP22 = /*program*/UniqueDistribution ; 
const int X10_TEMP27 = 0 ; 
const int X10_TEMP25 = 1 ; 
const int X10_TEMP28 = MAX - X10_TEMP25 ; 
struct Region1 X10_TEMP30 = createNewRegion1R ( X10_TEMP27 , X10_TEMP28 ) ; 
struct Dist2 dBuffer = X10Util_extendDistRank2D ( X10_TEMP22 , X10_TEMP30 ) ; 
struct Region2 RX10_TEMP64 = dBuffer .dReg ; 
const int RX10_TEMP65 = 0 ; 
const int RX10_TEMP66 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP67 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP67 = RX10_TEMP67 - RX10_TEMP66 ; const int SX10_TEMP27 = 1 ; 
const int RX10_TEMP68 = RX10_TEMP67 + SX10_TEMP27 ; 
const int SX10_TEMP28 = 1 ; 
const int RX10_TEMP69 = RX10_TEMP67 + SX10_TEMP28 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP70 = (intStub *)calloc(RX10_TEMP69,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP30 = 0 ; SX10_TEMP30 < RX10_TEMP68 ; SX10_TEMP30 ++ ) 
{ const int RX10_TEMP71 = SX10_TEMP30 ; 
const int RX10_TEMP72 = /* here  */ 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 ; 
const int RX10_TEMP74 = /* place.places ( RX10_TEMP73 )  */ 0 
; 
const int RX10_TEMP75 = getDistLocalCount2 ( dBuffer , RX10_TEMP73 ) ; 
const int RX10_TEMP76 = RX10_TEMP75 - RX10_TEMP66 ; 
/* async ( RX10_TEMP74 )  */ 
{ const int SX10_TEMP31 = 1 ; 
const int RX10_TEMP77 = RX10_TEMP76 + SX10_TEMP31 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP78 = (int *)calloc(RX10_TEMP77,sizeof( int )); 
struct intStub RX10_TEMP79  ; 
intStub_intStub( &RX10_TEMP79/*Assignment*/, RX10_TEMP78 ) ; 
/* async ( RX10_TEMP72 )  */ 
{ RX10_TEMP70 [ RX10_TEMP71 ] = RX10_TEMP79 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP33 = (intStub *)calloc(RX10_TEMP68,sizeof( intStub )); 
for ( int SX10_TEMP34 = 0 ; SX10_TEMP34 < RX10_TEMP68 ; SX10_TEMP34 ++ ) 
{ const int RX10_TEMP82 = SX10_TEMP34 ; 
struct intStub RX10_TEMP81 = RX10_TEMP70 [ RX10_TEMP82 ] 
; 
SX10_TEMP33 [ RX10_TEMP82 ] = RX10_TEMP81 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP80 = SX10_TEMP33 ; 
struct intRefArray2 RX10_TEMP83  ; 
intRefArray2_intRefArray2( &RX10_TEMP83/*Assignment*/, dBuffer , RX10_TEMP80 ) ; 
struct intRefArray2 sCountBuffer = RX10_TEMP83 ; 
struct Region2 RX10_TEMP84 = dBuffer .dReg ; 
const int RX10_TEMP85 = 0 ; 
const int RX10_TEMP86 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP87 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP86 ; const int SX10_TEMP35 = 1 ; 
const int RX10_TEMP88 = RX10_TEMP87 + SX10_TEMP35 ; 
const int SX10_TEMP36 = 1 ; 
const int RX10_TEMP89 = RX10_TEMP87 + SX10_TEMP36 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP90 = (intStub *)calloc(RX10_TEMP89,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP38 = 0 ; SX10_TEMP38 < RX10_TEMP88 ; SX10_TEMP38 ++ ) 
{ const int RX10_TEMP91 = SX10_TEMP38 ; 
const int RX10_TEMP92 = /* here  */ 0 ; 
const int RX10_TEMP93 = RX10_TEMP91 ; 
const int RX10_TEMP94 = /* place.places ( RX10_TEMP93 )  */ 0 
; 
const int RX10_TEMP95 = getDistLocalCount2 ( dBuffer , RX10_TEMP93 ) ; 
const int RX10_TEMP96 = RX10_TEMP95 - RX10_TEMP86 ; 
/* async ( RX10_TEMP94 )  */ 
{ const int SX10_TEMP39 = 1 ; 
const int RX10_TEMP97 = RX10_TEMP96 + SX10_TEMP39 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP98 = (int *)calloc(RX10_TEMP97,sizeof( int )); 
struct intStub RX10_TEMP99  ; 
intStub_intStub( &RX10_TEMP99/*Assignment*/, RX10_TEMP98 ) ; 
/* async ( RX10_TEMP92 )  */ 
{ RX10_TEMP90 [ RX10_TEMP91 ] = RX10_TEMP99 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP41 = (intStub *)calloc(RX10_TEMP88,sizeof( intStub )); 
for ( int SX10_TEMP42 = 0 ; SX10_TEMP42 < RX10_TEMP88 ; SX10_TEMP42 ++ ) 
{ const int RX10_TEMP102 = SX10_TEMP42 ; 
struct intStub RX10_TEMP101 = RX10_TEMP90 [ RX10_TEMP102 ] 
; 
SX10_TEMP41 [ RX10_TEMP102 ] = RX10_TEMP101 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP100 = SX10_TEMP41 ; 
struct intRefArray2 RX10_TEMP103  ; 
intRefArray2_intRefArray2( &RX10_TEMP103/*Assignment*/, dBuffer , RX10_TEMP100 ) ; 
struct intRefArray2 rCountBuffer = RX10_TEMP103 ; 
struct Region1 RX10_TEMP104 = dUnique .dReg ; 
const int RX10_TEMP105 = 0 ; 
const int RX10_TEMP106 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP107 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP107 = RX10_TEMP107 - RX10_TEMP106 ; const int SX10_TEMP43 = 1 ; 
const int RX10_TEMP108 = RX10_TEMP107 + SX10_TEMP43 ; 
const int SX10_TEMP44 = 1 ; 
const int RX10_TEMP109 = RX10_TEMP107 + SX10_TEMP44 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP110 = (intStub *)calloc(RX10_TEMP109,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP46 = 0 ; SX10_TEMP46 < RX10_TEMP108 ; SX10_TEMP46 ++ ) 
{ const int RX10_TEMP111 = SX10_TEMP46 ; 
const int RX10_TEMP112 = /* here  */ 0 ; 
const int RX10_TEMP113 = RX10_TEMP111 ; 
const int RX10_TEMP114 = /* place.places ( RX10_TEMP113 )  */ 0 
; 
const int RX10_TEMP115 = getDistLocalCount1 ( dUnique , RX10_TEMP113 ) ; 
const int RX10_TEMP116 = RX10_TEMP115 - RX10_TEMP106 ; 
/* async ( RX10_TEMP114 )  */ 
{ const int SX10_TEMP47 = 1 ; 
const int RX10_TEMP117 = RX10_TEMP116 + SX10_TEMP47 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP118 = (int *)calloc(RX10_TEMP117,sizeof( int )); 
struct intStub RX10_TEMP119  ; 
intStub_intStub( &RX10_TEMP119/*Assignment*/, RX10_TEMP118 ) ; 
/* async ( RX10_TEMP112 )  */ 
{ RX10_TEMP110 [ RX10_TEMP111 ] = RX10_TEMP119 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP49 = (intStub *)calloc(RX10_TEMP108,sizeof( intStub )); 
for ( int SX10_TEMP50 = 0 ; SX10_TEMP50 < RX10_TEMP108 ; SX10_TEMP50 ++ ) 
{ const int RX10_TEMP122 = SX10_TEMP50 ; 
struct intStub RX10_TEMP121 = RX10_TEMP110 [ RX10_TEMP122 ] 
; 
SX10_TEMP49 [ RX10_TEMP122 ] = RX10_TEMP121 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP120 = SX10_TEMP49 ; 
struct intRefArray1 RX10_TEMP123  ; 
intRefArray1_intRefArray1( &RX10_TEMP123/*Assignment*/, dUnique , RX10_TEMP120 ) ; 
struct intRefArray1 sendCount = RX10_TEMP123 ; 
struct Region1 RX10_TEMP124 = dUnique .dReg ; 
const int RX10_TEMP125 = 0 ; 
const int RX10_TEMP126 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP127 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP127 = RX10_TEMP127 - RX10_TEMP126 ; const int SX10_TEMP51 = 1 ; 
const int RX10_TEMP128 = RX10_TEMP127 + SX10_TEMP51 ; 
const int SX10_TEMP52 = 1 ; 
const int RX10_TEMP129 = RX10_TEMP127 + SX10_TEMP52 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP130 = (intStub *)calloc(RX10_TEMP129,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP54 = 0 ; SX10_TEMP54 < RX10_TEMP128 ; SX10_TEMP54 ++ ) 
{ const int RX10_TEMP131 = SX10_TEMP54 ; 
const int RX10_TEMP132 = /* here  */ 0 ; 
const int RX10_TEMP133 = RX10_TEMP131 ; 
const int RX10_TEMP134 = /* place.places ( RX10_TEMP133 )  */ 0 
; 
const int RX10_TEMP135 = getDistLocalCount1 ( dUnique , RX10_TEMP133 ) ; 
const int RX10_TEMP136 = RX10_TEMP135 - RX10_TEMP126 ; 
/* async ( RX10_TEMP134 )  */ 
{ const int SX10_TEMP55 = 1 ; 
const int RX10_TEMP137 = RX10_TEMP136 + SX10_TEMP55 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP138 = (int *)calloc(RX10_TEMP137,sizeof( int )); 
struct intStub RX10_TEMP139  ; 
intStub_intStub( &RX10_TEMP139/*Assignment*/, RX10_TEMP138 ) ; 
/* async ( RX10_TEMP132 )  */ 
{ RX10_TEMP130 [ RX10_TEMP131 ] = RX10_TEMP139 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP57 = (intStub *)calloc(RX10_TEMP128,sizeof( intStub )); 
for ( int SX10_TEMP58 = 0 ; SX10_TEMP58 < RX10_TEMP128 ; SX10_TEMP58 ++ ) 
{ const int RX10_TEMP142 = SX10_TEMP58 ; 
struct intStub RX10_TEMP141 = RX10_TEMP130 [ RX10_TEMP142 ] 
; 
SX10_TEMP57 [ RX10_TEMP142 ] = RX10_TEMP141 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP140 = SX10_TEMP57 ; 
struct intRefArray1 RX10_TEMP143  ; 
intRefArray1_intRefArray1( &RX10_TEMP143/*Assignment*/, dUnique , RX10_TEMP140 ) ; 
struct intRefArray1 sendGrids = RX10_TEMP143 ; 
struct Region1 RX10_TEMP144 = dUnique .dReg ; 
const int RX10_TEMP145 = 0 ; 
const int RX10_TEMP146 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP147 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP147 = RX10_TEMP147 - RX10_TEMP146 ; const int SX10_TEMP59 = 1 ; 
const int RX10_TEMP148 = RX10_TEMP147 + SX10_TEMP59 ; 
const int SX10_TEMP60 = 1 ; 
const int RX10_TEMP149 = RX10_TEMP147 + SX10_TEMP60 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP150 = (intStub *)calloc(RX10_TEMP149,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP62 = 0 ; SX10_TEMP62 < RX10_TEMP148 ; SX10_TEMP62 ++ ) 
{ const int RX10_TEMP151 = SX10_TEMP62 ; 
const int RX10_TEMP152 = /* here  */ 0 ; 
const int RX10_TEMP153 = RX10_TEMP151 ; 
const int RX10_TEMP154 = /* place.places ( RX10_TEMP153 )  */ 0 
; 
const int RX10_TEMP155 = getDistLocalCount1 ( dUnique , RX10_TEMP153 ) ; 
const int RX10_TEMP156 = RX10_TEMP155 - RX10_TEMP146 ; 
/* async ( RX10_TEMP154 )  */ 
{ const int SX10_TEMP63 = 1 ; 
const int RX10_TEMP157 = RX10_TEMP156 + SX10_TEMP63 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP158 = (int *)calloc(RX10_TEMP157,sizeof( int )); 
struct intStub RX10_TEMP159  ; 
intStub_intStub( &RX10_TEMP159/*Assignment*/, RX10_TEMP158 ) ; 
/* async ( RX10_TEMP152 )  */ 
{ RX10_TEMP150 [ RX10_TEMP151 ] = RX10_TEMP159 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP65 = (intStub *)calloc(RX10_TEMP148,sizeof( intStub )); 
for ( int SX10_TEMP66 = 0 ; SX10_TEMP66 < RX10_TEMP148 ; SX10_TEMP66 ++ ) 
{ const int RX10_TEMP162 = SX10_TEMP66 ; 
struct intStub RX10_TEMP161 = RX10_TEMP150 [ RX10_TEMP162 ] 
; 
SX10_TEMP65 [ RX10_TEMP162 ] = RX10_TEMP161 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP160 = SX10_TEMP65 ; 
struct intRefArray1 RX10_TEMP163  ; 
intRefArray1_intRefArray1( &RX10_TEMP163/*Assignment*/, dUnique , RX10_TEMP160 ) ; 
struct intRefArray1 recvCount = RX10_TEMP163 ; 
struct Region1 RX10_TEMP164 = dUnique .dReg ; 
const int RX10_TEMP165 = 0 ; 
const int RX10_TEMP166 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP167 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP167 = RX10_TEMP167 - RX10_TEMP166 ; const int SX10_TEMP67 = 1 ; 
const int RX10_TEMP168 = RX10_TEMP167 + SX10_TEMP67 ; 
const int SX10_TEMP68 = 1 ; 
const int RX10_TEMP169 = RX10_TEMP167 + SX10_TEMP68 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP170 = (intStub *)calloc(RX10_TEMP169,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP70 = 0 ; SX10_TEMP70 < RX10_TEMP168 ; SX10_TEMP70 ++ ) 
{ const int RX10_TEMP171 = SX10_TEMP70 ; 
const int RX10_TEMP172 = /* here  */ 0 ; 
const int RX10_TEMP173 = RX10_TEMP171 ; 
const int RX10_TEMP174 = /* place.places ( RX10_TEMP173 )  */ 0 
; 
const int RX10_TEMP175 = getDistLocalCount1 ( dUnique , RX10_TEMP173 ) ; 
const int RX10_TEMP176 = RX10_TEMP175 - RX10_TEMP166 ; 
/* async ( RX10_TEMP174 )  */ 
{ const int SX10_TEMP71 = 1 ; 
const int RX10_TEMP177 = RX10_TEMP176 + SX10_TEMP71 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP178 = (int *)calloc(RX10_TEMP177,sizeof( int )); 
struct intStub RX10_TEMP179  ; 
intStub_intStub( &RX10_TEMP179/*Assignment*/, RX10_TEMP178 ) ; 
/* async ( RX10_TEMP172 )  */ 
{ RX10_TEMP170 [ RX10_TEMP171 ] = RX10_TEMP179 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP73 = (intStub *)calloc(RX10_TEMP168,sizeof( intStub )); 
for ( int SX10_TEMP74 = 0 ; SX10_TEMP74 < RX10_TEMP168 ; SX10_TEMP74 ++ ) 
{ const int RX10_TEMP182 = SX10_TEMP74 ; 
struct intStub RX10_TEMP181 = RX10_TEMP170 [ RX10_TEMP182 ] 
; 
SX10_TEMP73 [ RX10_TEMP182 ] = RX10_TEMP181 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP180 = SX10_TEMP73 ; 
struct intRefArray1 RX10_TEMP183  ; 
intRefArray1_intRefArray1( &RX10_TEMP183/*Assignment*/, dUnique , RX10_TEMP180 ) ; 
struct intRefArray1 recvGrids = RX10_TEMP183 ; 
struct Region1 RX10_TEMP184 = dUnique .dReg ; 
const int RX10_TEMP185 = 0 ; 
const int RX10_TEMP186 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP187 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP187 = RX10_TEMP187 - RX10_TEMP186 ; const int SX10_TEMP75 = 1 ; 
const int RX10_TEMP188 = RX10_TEMP187 + SX10_TEMP75 ; 
const int SX10_TEMP76 = 1 ; 
const int RX10_TEMP189 = RX10_TEMP187 + SX10_TEMP76 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP190 = (intStub *)calloc(RX10_TEMP189,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP78 = 0 ; SX10_TEMP78 < RX10_TEMP188 ; SX10_TEMP78 ++ ) 
{ const int RX10_TEMP191 = SX10_TEMP78 ; 
const int RX10_TEMP192 = /* here  */ 0 ; 
const int RX10_TEMP193 = RX10_TEMP191 ; 
const int RX10_TEMP194 = /* place.places ( RX10_TEMP193 )  */ 0 
; 
const int RX10_TEMP195 = getDistLocalCount1 ( dUnique , RX10_TEMP193 ) ; 
const int RX10_TEMP196 = RX10_TEMP195 - RX10_TEMP186 ; 
/* async ( RX10_TEMP194 )  */ 
{ const int SX10_TEMP79 = 1 ; 
const int RX10_TEMP198 = RX10_TEMP196 + SX10_TEMP79 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP80 = (int *)calloc(RX10_TEMP198,sizeof( int )); 
for ( int SX10_TEMP81 = 0 ; SX10_TEMP81 < RX10_TEMP198 ; SX10_TEMP81 ++ ) 
{ const int RX10_TEMP197 = SX10_TEMP81 ; 
const int X10_TEMP39 = 0 ; 
SX10_TEMP80 [ RX10_TEMP197 ] = X10_TEMP39 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP199 = SX10_TEMP80 ; 
struct intStub RX10_TEMP200  ; 
intStub_intStub( &RX10_TEMP200/*Assignment*/, RX10_TEMP199 ) ; 
/* async ( RX10_TEMP192 )  */ 
{ RX10_TEMP190 [ RX10_TEMP191 ] = RX10_TEMP200 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP82 = (intStub *)calloc(RX10_TEMP188,sizeof( intStub )); 
for ( int SX10_TEMP83 = 0 ; SX10_TEMP83 < RX10_TEMP188 ; SX10_TEMP83 ++ ) 
{ const int RX10_TEMP203 = SX10_TEMP83 ; 
struct intStub RX10_TEMP202 = RX10_TEMP190 [ RX10_TEMP203 ] 
; 
SX10_TEMP82 [ RX10_TEMP203 ] = RX10_TEMP202 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP201 = SX10_TEMP82 ; 
struct intRefArray1 RX10_TEMP204  ; 
intRefArray1_intRefArray1( &RX10_TEMP204/*Assignment*/, dUnique , RX10_TEMP201 ) ; 
struct intRefArray1 finished = RX10_TEMP204 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP42 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP206 = X10_TEMP42 .dReg ; 
const int RX10_TEMP209 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP207 = RX10_TEMP206 .regSize ; 
RX10_TEMP207 = RX10_TEMP207 - RX10_TEMP209 ; const int SX10_TEMP84 = 1 ; 
const int RX10_TEMP208 = RX10_TEMP207 + SX10_TEMP84 ; 
for ( int SX10_TEMP85 = 0 ; SX10_TEMP85 < RX10_TEMP208 ; SX10_TEMP85 ++ ) 
{ const int RX10_TEMP205 = SX10_TEMP85 ; 
const int RX10_TEMP210 = RX10_TEMP205 ; 
struct Point1 X10_TEMP43 = regionOrdinalPoint1 ( RX10_TEMP206 , RX10_TEMP210 ) ; 
const int pl = X10_TEMP43 .f0 ; 
struct Region1 RX10_TEMP211 = X10_TEMP42 .dReg ; 
const int RX10_TEMP212 = searchPointInRegion1 ( RX10_TEMP211 , X10_TEMP43 ) ; 
const int RX10_TEMP213 = 0 ; 
const int RX10_TEMP214 = RX10_TEMP212 < RX10_TEMP213 ; 
if ( RX10_TEMP214 ) 
{ const char * RX10_TEMP215 = "Point X10_TEMP43 not found in the distribution X10_TEMP42." ; 
fprintf(stderr, RX10_TEMP215 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP216 = getPlaceFromDist1 ( X10_TEMP42 , RX10_TEMP212 ) ; 
const int X10_TEMP44 = RX10_TEMP216 ; 
/* async ( X10_TEMP44 )  */ 
{ struct Dist1 RX10_TEMP217 = particleCount .distValue ; 
struct Dist1 dPC = RX10_TEMP217 ; 
struct Region1 rLocal = X10Util_get1DLRegion ( dPC ) ; 
const int rsize = rLocal .regSize ; 
const int X10_TEMP49 = 0 ; 
const int X10_TEMP51 = rsize > X10_TEMP49 ; 
const int X10_TEMP52 = X10_TEMP51 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP55 = 0 ; 
if ( X10_TEMP52 ) 
{ const int RX10_TEMP218 = rLocal .regSize ; 
const int RX10_TEMP219 = 0 ; 
const int RX10_TEMP220 = RX10_TEMP218 <= RX10_TEMP219 ; 
if ( RX10_TEMP220 ) 
{ const char * RX10_TEMP221 = "Operation low() not defined on empty region rLocal" ; 
fprintf(stderr, RX10_TEMP221 ) ; 
exit(EXIT_FAILURE);
} 

X10_TEMP55 = regionLow ( rLocal ) ; } 

const int X10_TEMP56 = X10_TEMP55 ; 
const int offset = X10_TEMP56 ; 
/*UpdatableVariableDeclaration*/int total = 0 ; 
struct Dist1 RX10_TEMP222 = particleCount .distValue ; 
struct Dist1 X10_TEMP58 = RX10_TEMP222 ; 
const int X10_TEMP59 = /* here  */ 0 ; 
struct Dist1 X10_TEMP61 = restrictDist1 ( X10_TEMP58 , X10_TEMP59 ) ; 
struct Region1 RX10_TEMP225 = X10_TEMP61 .dReg ; 
const int RX10_TEMP228 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP226 = RX10_TEMP225 .regSize ; 
RX10_TEMP226 = RX10_TEMP226 - RX10_TEMP228 ; const int SX10_TEMP86 = 1 ; 
const int RX10_TEMP227 = RX10_TEMP226 + SX10_TEMP86 ; 
for ( int SX10_TEMP87 = 0 ; SX10_TEMP87 < RX10_TEMP227 ; SX10_TEMP87 ++ ) 
{ const int RX10_TEMP223 = SX10_TEMP87 ; 
const int RX10_TEMP229 = RX10_TEMP223 ; 
struct Point1 RX10_TEMP224 = regionOrdinalPoint1 ( RX10_TEMP225 , RX10_TEMP229 ) ; 
const int i = RX10_TEMP224 .f0 ; 
struct Point1 RX10_TEMP230  ; 
Point1_Point1( &RX10_TEMP230/*Assignment*/, i ) ; 
struct Dist1 RX10_TEMP231 = particleCount .distValue ; 
struct Region1 RX10_TEMP232 = RX10_TEMP231 .dReg ; 
const int RX10_TEMP233 = searchPointInRegion1 ( RX10_TEMP232 , RX10_TEMP230 ) ; 
const int RX10_TEMP234 = 0 ; 
const int RX10_TEMP235 = RX10_TEMP233 < RX10_TEMP234 ; 
if ( RX10_TEMP235 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP236 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP236 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP237 = getPlaceFromDist1 ( RX10_TEMP231 , RX10_TEMP233 ) ; 
const int RX10_TEMP239 = /* here  */ 0 ; 
const int RX10_TEMP240 = RX10_TEMP237 != RX10_TEMP239 ; 
if ( RX10_TEMP240 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP238 = "Bad place access for array particleCount" ; 
fprintf(stderr, RX10_TEMP238 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP241 = getRefArrayValue1int ( particleCount , RX10_TEMP233 ) ; 
const int count = RX10_TEMP241 ; 
const int X10_TEMP66 = i - offset ; 
const int X10_TEMP68 = count ; 
struct Point2 RX10_TEMP242  ; 
Point2_Point2( &RX10_TEMP242/*Assignment*/, pl , X10_TEMP66 ) ; 
struct Dist2 RX10_TEMP243 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP244 = RX10_TEMP243 .dReg ; 
const int RX10_TEMP245 = searchPointInRegion2 ( RX10_TEMP244 , RX10_TEMP242 ) ; 
const int RX10_TEMP246 = 0 ; 
const int RX10_TEMP247 = RX10_TEMP245 < RX10_TEMP246 ; 
if ( RX10_TEMP247 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP248 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP248 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP249 = getPlaceFromDist2 ( RX10_TEMP243 , RX10_TEMP245 ) ; 
const int RX10_TEMP251 = /* here  */ 0 ; 
const int RX10_TEMP252 = RX10_TEMP249 != RX10_TEMP251 ; 
if ( RX10_TEMP252 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP250 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP250 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( sCountBuffer , RX10_TEMP245 , X10_TEMP68 ) ; 
const int X10_TEMP70 = total + count ; 
total = X10_TEMP70 ; } 

const int X10_TEMP73 = total ; 
struct Point1 RX10_TEMP253  ; 
Point1_Point1( &RX10_TEMP253/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP254 = particleTotals .distValue ; 
struct Region1 RX10_TEMP255 = RX10_TEMP254 .dReg ; 
const int RX10_TEMP256 = searchPointInRegion1 ( RX10_TEMP255 , RX10_TEMP253 ) ; 
const int RX10_TEMP257 = 0 ; 
const int RX10_TEMP258 = RX10_TEMP256 < RX10_TEMP257 ; 
if ( RX10_TEMP258 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP259 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP259 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP260 = getPlaceFromDist1 ( RX10_TEMP254 , RX10_TEMP256 ) ; 
const int RX10_TEMP262 = /* here  */ 0 ; 
const int RX10_TEMP263 = RX10_TEMP260 != RX10_TEMP262 ; 
if ( RX10_TEMP263 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP261 = "Bad place access for array particleTotals" ; 
fprintf(stderr, RX10_TEMP261 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( particleTotals , RX10_TEMP256 , X10_TEMP73 ) ; 
const int X10_TEMP76 = rsize ; 
struct Point1 RX10_TEMP264  ; 
Point1_Point1( &RX10_TEMP264/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP265 = gridTotals .distValue ; 
struct Region1 RX10_TEMP266 = RX10_TEMP265 .dReg ; 
const int RX10_TEMP267 = searchPointInRegion1 ( RX10_TEMP266 , RX10_TEMP264 ) ; 
const int RX10_TEMP268 = 0 ; 
const int RX10_TEMP269 = RX10_TEMP267 < RX10_TEMP268 ; 
if ( RX10_TEMP269 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP270 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP270 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP271 = getPlaceFromDist1 ( RX10_TEMP265 , RX10_TEMP267 ) ; 
const int RX10_TEMP273 = /* here  */ 0 ; 
const int RX10_TEMP274 = RX10_TEMP271 != RX10_TEMP273 ; 
if ( RX10_TEMP274 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP272 = "Bad place access for array gridTotals" ; 
fprintf(stderr, RX10_TEMP272 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( gridTotals , RX10_TEMP267 , X10_TEMP76 ) ; 
const int X10_TEMP79 = total ; 
struct Point1 RX10_TEMP275  ; 
Point1_Point1( &RX10_TEMP275/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP276 = sendCount .distValue ; 
struct Region1 RX10_TEMP277 = RX10_TEMP276 .dReg ; 
const int RX10_TEMP278 = searchPointInRegion1 ( RX10_TEMP277 , RX10_TEMP275 ) ; 
const int RX10_TEMP279 = 0 ; 
const int RX10_TEMP280 = RX10_TEMP278 < RX10_TEMP279 ; 
if ( RX10_TEMP280 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP281 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP281 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP282 = getPlaceFromDist1 ( RX10_TEMP276 , RX10_TEMP278 ) ; 
const int RX10_TEMP284 = /* here  */ 0 ; 
const int RX10_TEMP285 = RX10_TEMP282 != RX10_TEMP284 ; 
if ( RX10_TEMP285 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP283 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP283 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendCount , RX10_TEMP278 , X10_TEMP79 ) ; 
const int X10_TEMP82 = rsize ; 
struct Point1 RX10_TEMP286  ; 
Point1_Point1( &RX10_TEMP286/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP287 = sendGrids .distValue ; 
struct Region1 RX10_TEMP288 = RX10_TEMP287 .dReg ; 
const int RX10_TEMP289 = searchPointInRegion1 ( RX10_TEMP288 , RX10_TEMP286 ) ; 
const int RX10_TEMP290 = 0 ; 
const int RX10_TEMP291 = RX10_TEMP289 < RX10_TEMP290 ; 
if ( RX10_TEMP291 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP292 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP292 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP293 = getPlaceFromDist1 ( RX10_TEMP287 , RX10_TEMP289 ) ; 
const int RX10_TEMP295 = /* here  */ 0 ; 
const int RX10_TEMP296 = RX10_TEMP293 != RX10_TEMP295 ; 
if ( RX10_TEMP296 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP294 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP294 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendGrids , RX10_TEMP289 , X10_TEMP82 ) ; 
const int X10_TEMP85 = 0 ; 
const int X10_TEMP86 = X10_TEMP85 ; 
struct Point1 RX10_TEMP297  ; 
Point1_Point1( &RX10_TEMP297/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP298 = recvCount .distValue ; 
struct Region1 RX10_TEMP299 = RX10_TEMP298 .dReg ; 
const int RX10_TEMP300 = searchPointInRegion1 ( RX10_TEMP299 , RX10_TEMP297 ) ; 
const int RX10_TEMP301 = 0 ; 
const int RX10_TEMP302 = RX10_TEMP300 < RX10_TEMP301 ; 
if ( RX10_TEMP302 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP303 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP303 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP304 = getPlaceFromDist1 ( RX10_TEMP298 , RX10_TEMP300 ) ; 
const int RX10_TEMP306 = /* here  */ 0 ; 
const int RX10_TEMP307 = RX10_TEMP304 != RX10_TEMP306 ; 
if ( RX10_TEMP307 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP305 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP305 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvCount , RX10_TEMP300 , X10_TEMP86 ) ; 
const int X10_TEMP89 = 0 ; 
const int X10_TEMP90 = X10_TEMP89 ; 
struct Point1 RX10_TEMP308  ; 
Point1_Point1( &RX10_TEMP308/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP309 = recvGrids .distValue ; 
struct Region1 RX10_TEMP310 = RX10_TEMP309 .dReg ; 
const int RX10_TEMP311 = searchPointInRegion1 ( RX10_TEMP310 , RX10_TEMP308 ) ; 
const int RX10_TEMP312 = 0 ; 
const int RX10_TEMP313 = RX10_TEMP311 < RX10_TEMP312 ; 
if ( RX10_TEMP313 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP314 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP314 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP315 = getPlaceFromDist1 ( RX10_TEMP309 , RX10_TEMP311 ) ; 
const int RX10_TEMP317 = /* here  */ 0 ; 
const int RX10_TEMP318 = RX10_TEMP315 != RX10_TEMP317 ; 
if ( RX10_TEMP318 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP316 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP316 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvGrids , RX10_TEMP311 , X10_TEMP90 ) ; 
} 

} 

} 

struct intRefArray1 runningPTotals = LinearESOpenPIC2D_parallelPrefix ( X10_TEMP0 , particleTotals ) ; 
struct intRefArray1 runningGTotals = LinearESOpenPIC2D_parallelPrefix ( X10_TEMP0 , gridTotals ) ; 
/* finish  */ 
{ struct Dist1 X10_TEMP96 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP320 = X10_TEMP96 .dReg ; 
const int RX10_TEMP323 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP321 = RX10_TEMP320 .regSize ; 
RX10_TEMP321 = RX10_TEMP321 - RX10_TEMP323 ; const int SX10_TEMP88 = 1 ; 
const int RX10_TEMP322 = RX10_TEMP321 + SX10_TEMP88 ; 
for ( int SX10_TEMP89 = 0 ; SX10_TEMP89 < RX10_TEMP322 ; SX10_TEMP89 ++ ) 
{ const int RX10_TEMP319 = SX10_TEMP89 ; 
const int RX10_TEMP324 = RX10_TEMP319 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP320 , RX10_TEMP324 ) ; 
struct Region1 RX10_TEMP325 = X10_TEMP96 .dReg ; 
const int RX10_TEMP326 = searchPointInRegion1 ( RX10_TEMP325 , pl ) ; 
const int RX10_TEMP327 = 0 ; 
const int RX10_TEMP328 = RX10_TEMP326 < RX10_TEMP327 ; 
if ( RX10_TEMP328 ) 
{ const char * RX10_TEMP329 = "Point pl not found in the distribution X10_TEMP96." ; 
fprintf(stderr, RX10_TEMP329 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP330 = getPlaceFromDist1 ( X10_TEMP96 , RX10_TEMP326 ) ; 
const int X10_TEMP97 = RX10_TEMP330 ; 
/* async ( X10_TEMP97 )  */ 
{ struct Dist1 RX10_TEMP331 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP332 = RX10_TEMP331 .dReg ; 
const int RX10_TEMP333 = searchPointInRegion1 ( RX10_TEMP332 , pl ) ; 
const int RX10_TEMP334 = 0 ; 
const int RX10_TEMP335 = RX10_TEMP333 < RX10_TEMP334 ; 
if ( RX10_TEMP335 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP336 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP336 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP337 = getPlaceFromDist1 ( RX10_TEMP331 , RX10_TEMP333 ) ; 
const int RX10_TEMP339 = /* here  */ 0 ; 
const int RX10_TEMP340 = RX10_TEMP337 != RX10_TEMP339 ; 
if ( RX10_TEMP340 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP338 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP338 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP341 = getRefArrayValue1int ( runningPTotals , RX10_TEMP333 ) ; 
const int X10_TEMP101 = RX10_TEMP341 ; 
const int X10_TEMP102 = X10_TEMP101 ; 
struct Dist1 RX10_TEMP342 = particleTotals .distValue ; 
struct Region1 RX10_TEMP343 = RX10_TEMP342 .dReg ; 
const int RX10_TEMP344 = searchPointInRegion1 ( RX10_TEMP343 , pl ) ; 
const int RX10_TEMP345 = 0 ; 
const int RX10_TEMP346 = RX10_TEMP344 < RX10_TEMP345 ; 
if ( RX10_TEMP346 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP347 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP347 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP348 = getPlaceFromDist1 ( RX10_TEMP342 , RX10_TEMP344 ) ; 
const int RX10_TEMP350 = /* here  */ 0 ; 
const int RX10_TEMP351 = RX10_TEMP348 != RX10_TEMP350 ; 
if ( RX10_TEMP351 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP349 = "Bad place access for array particleTotals" ; 
fprintf(stderr, RX10_TEMP349 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( particleTotals , RX10_TEMP344 , X10_TEMP102 ) ; 
struct Dist1 RX10_TEMP352 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP353 = RX10_TEMP352 .dReg ; 
const int RX10_TEMP354 = searchPointInRegion1 ( RX10_TEMP353 , pl ) ; 
const int RX10_TEMP355 = 0 ; 
const int RX10_TEMP356 = RX10_TEMP354 < RX10_TEMP355 ; 
if ( RX10_TEMP356 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP357 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP357 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP358 = getPlaceFromDist1 ( RX10_TEMP352 , RX10_TEMP354 ) ; 
const int RX10_TEMP360 = /* here  */ 0 ; 
const int RX10_TEMP361 = RX10_TEMP358 != RX10_TEMP360 ; 
if ( RX10_TEMP361 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP359 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP359 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP362 = getRefArrayValue1int ( runningGTotals , RX10_TEMP354 ) ; 
const int X10_TEMP106 = RX10_TEMP362 ; 
const int X10_TEMP107 = X10_TEMP106 ; 
struct Dist1 RX10_TEMP363 = gridTotals .distValue ; 
struct Region1 RX10_TEMP364 = RX10_TEMP363 .dReg ; 
const int RX10_TEMP365 = searchPointInRegion1 ( RX10_TEMP364 , pl ) ; 
const int RX10_TEMP366 = 0 ; 
const int RX10_TEMP367 = RX10_TEMP365 < RX10_TEMP366 ; 
if ( RX10_TEMP367 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP368 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP368 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP369 = getPlaceFromDist1 ( RX10_TEMP363 , RX10_TEMP365 ) ; 
const int RX10_TEMP371 = /* here  */ 0 ; 
const int RX10_TEMP372 = RX10_TEMP369 != RX10_TEMP371 ; 
if ( RX10_TEMP372 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP370 = "Bad place access for array gridTotals" ; 
fprintf(stderr, RX10_TEMP370 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( gridTotals , RX10_TEMP365 , X10_TEMP107 ) ; 
} 

} 

} 

/*UpdatableVariableDeclaration*/int X10_TEMP108 = 0 ; 
do 
{ /* finish  */ 
{ struct Dist1 X10_TEMP110 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP374 = X10_TEMP110 .dReg ; 
const int RX10_TEMP377 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP375 = RX10_TEMP374 .regSize ; 
RX10_TEMP375 = RX10_TEMP375 - RX10_TEMP377 ; const int SX10_TEMP90 = 1 ; 
const int RX10_TEMP376 = RX10_TEMP375 + SX10_TEMP90 ; 
for ( int SX10_TEMP91 = 0 ; SX10_TEMP91 < RX10_TEMP376 ; SX10_TEMP91 ++ ) 
{ const int RX10_TEMP373 = SX10_TEMP91 ; 
const int RX10_TEMP378 = RX10_TEMP373 ; 
struct Point1 X10_TEMP111 = regionOrdinalPoint1 ( RX10_TEMP374 , RX10_TEMP378 ) ; 
const int pl = X10_TEMP111 .f0 ; 
struct Region1 RX10_TEMP379 = X10_TEMP110 .dReg ; 
const int RX10_TEMP380 = searchPointInRegion1 ( RX10_TEMP379 , X10_TEMP111 ) ; 
const int RX10_TEMP381 = 0 ; 
const int RX10_TEMP382 = RX10_TEMP380 < RX10_TEMP381 ; 
if ( RX10_TEMP382 ) 
{ const char * RX10_TEMP383 = "Point X10_TEMP111 not found in the distribution X10_TEMP110." ; 
fprintf(stderr, RX10_TEMP383 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP384 = getPlaceFromDist1 ( X10_TEMP110 , RX10_TEMP380 ) ; 
const int X10_TEMP112 = RX10_TEMP384 ; 
/* async ( X10_TEMP112 )  */ 
{ const int X10_TEMP113 = 1 ; 
const int X10_TEMP115 = pl + X10_TEMP113 ; 
const double X10_TEMP116 = X10_TEMP115 * countAve ; 
const double X10_TEMP117 = 0.5; 
const double X10_TEMP119 = X10_TEMP116 + X10_TEMP117 ; 
const int expected = /*casting*/( int ) X10_TEMP119 ; 
struct Point1 RX10_TEMP385  ; 
Point1_Point1( &RX10_TEMP385/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP386 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP387 = RX10_TEMP386 .dReg ; 
const int RX10_TEMP388 = searchPointInRegion1 ( RX10_TEMP387 , RX10_TEMP385 ) ; 
const int RX10_TEMP389 = 0 ; 
const int RX10_TEMP390 = RX10_TEMP388 < RX10_TEMP389 ; 
if ( RX10_TEMP390 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP391 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP391 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP392 = getPlaceFromDist1 ( RX10_TEMP386 , RX10_TEMP388 ) ; 
const int RX10_TEMP394 = /* here  */ 0 ; 
const int RX10_TEMP395 = RX10_TEMP392 != RX10_TEMP394 ; 
if ( RX10_TEMP395 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP393 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP393 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP396 = getRefArrayValue1int ( runningPTotals , RX10_TEMP388 ) ; 
const int X10_TEMP122 = RX10_TEMP396 ; 
const int surplus = X10_TEMP122 - expected ; 
const double X10_TEMP124 = 0.0; 
const int X10_TEMP126 = surplus > X10_TEMP124 ; 
if ( X10_TEMP126 ) 
{ const int X10_TEMP132 = 0 ; 
struct Point1 RX10_TEMP397  ; 
Point1_Point1( &RX10_TEMP397/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP398 = sendGrids .distValue ; 
struct Region1 RX10_TEMP399 = RX10_TEMP398 .dReg ; 
const int RX10_TEMP400 = searchPointInRegion1 ( RX10_TEMP399 , RX10_TEMP397 ) ; 
const int RX10_TEMP401 = 0 ; 
const int RX10_TEMP402 = RX10_TEMP400 < RX10_TEMP401 ; 
if ( RX10_TEMP402 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP403 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP403 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP404 = getPlaceFromDist1 ( RX10_TEMP398 , RX10_TEMP400 ) ; 
const int RX10_TEMP406 = /* here  */ 0 ; 
const int RX10_TEMP407 = RX10_TEMP404 != RX10_TEMP406 ; 
if ( RX10_TEMP407 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP405 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP405 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP408 = getRefArrayValue1int ( sendGrids , RX10_TEMP400 ) ; 
const int X10_TEMP129 = RX10_TEMP408 ; 
const int X10_TEMP130 = 1 ; 
const int X10_TEMP133 = X10_TEMP129 - X10_TEMP130 ; 
struct Region1 dSBuffer = createNewRegion1R ( X10_TEMP132 , X10_TEMP133 ) ; 
struct Region1 RX10_TEMP409 = dSBuffer ; 
const int RX10_TEMP426 = dSBuffer .regSize ; 
const int RX10_TEMP427 = 1 ; 
const int RX10_TEMP428 = RX10_TEMP426 - RX10_TEMP427 ; 
const int SX10_TEMP92 = 1 ; 
const int RX10_TEMP425 = RX10_TEMP428 + SX10_TEMP92 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP93 = (int *)calloc(RX10_TEMP425,sizeof( int )); 
for ( int SX10_TEMP94 = 0 ; SX10_TEMP94 < RX10_TEMP425 ; SX10_TEMP94 ++ ) 
{ const int RX10_TEMP410 = SX10_TEMP94 ; 
const int RX10_TEMP412 = RX10_TEMP410 ; 
struct Point1 RX10_TEMP411 = regionOrdinalPoint1 ( RX10_TEMP409 , RX10_TEMP412 ) ; 
const int i = RX10_TEMP411 .f0 ; 
struct Point2 RX10_TEMP413  ; 
Point2_Point2( &RX10_TEMP413/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP414 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP415 = RX10_TEMP414 .dReg ; 
const int RX10_TEMP416 = searchPointInRegion2 ( RX10_TEMP415 , RX10_TEMP413 ) ; 
const int RX10_TEMP417 = 0 ; 
const int RX10_TEMP418 = RX10_TEMP416 < RX10_TEMP417 ; 
if ( RX10_TEMP418 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP419 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP419 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP420 = getPlaceFromDist2 ( RX10_TEMP414 , RX10_TEMP416 ) ; 
const int RX10_TEMP422 = /* here  */ 0 ; 
const int RX10_TEMP423 = RX10_TEMP420 != RX10_TEMP422 ; 
if ( RX10_TEMP423 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP421 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP421 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP424 = getRefArrayValue2int ( sCountBuffer , RX10_TEMP416 ) ; 
const int X10_TEMP138 = RX10_TEMP424 ; 
SX10_TEMP93 [ RX10_TEMP410 ] = X10_TEMP138 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP429 = SX10_TEMP93 ; 
struct intValArray1 RX10_TEMP430  ; 
intValArray1_intValArray1( &RX10_TEMP430/*Assignment*/, dSBuffer , RX10_TEMP429 ) ; 
struct intValArray1 X10_TEMP139 = RX10_TEMP430 ; 
struct intValArray1 sBuffer = X10_TEMP139 ; 
struct Point1 RX10_TEMP431  ; 
Point1_Point1( &RX10_TEMP431/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP432 = sendCount .distValue ; 
struct Region1 RX10_TEMP433 = RX10_TEMP432 .dReg ; 
const int RX10_TEMP434 = searchPointInRegion1 ( RX10_TEMP433 , RX10_TEMP431 ) ; 
const int RX10_TEMP435 = 0 ; 
const int RX10_TEMP436 = RX10_TEMP434 < RX10_TEMP435 ; 
if ( RX10_TEMP436 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP437 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP437 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP438 = getPlaceFromDist1 ( RX10_TEMP432 , RX10_TEMP434 ) ; 
const int RX10_TEMP440 = /* here  */ 0 ; 
const int RX10_TEMP441 = RX10_TEMP438 != RX10_TEMP440 ; 
if ( RX10_TEMP441 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP439 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP439 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP442 = getRefArrayValue1int ( sendCount , RX10_TEMP434 ) ; 
const int nCount = RX10_TEMP442 ; 
struct Point1 RX10_TEMP443  ; 
Point1_Point1( &RX10_TEMP443/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP444 = sendGrids .distValue ; 
struct Region1 RX10_TEMP445 = RX10_TEMP444 .dReg ; 
const int RX10_TEMP446 = searchPointInRegion1 ( RX10_TEMP445 , RX10_TEMP443 ) ; 
const int RX10_TEMP447 = 0 ; 
const int RX10_TEMP448 = RX10_TEMP446 < RX10_TEMP447 ; 
if ( RX10_TEMP448 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP449 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP449 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP450 = getPlaceFromDist1 ( RX10_TEMP444 , RX10_TEMP446 ) ; 
const int RX10_TEMP452 = /* here  */ 0 ; 
const int RX10_TEMP453 = RX10_TEMP450 != RX10_TEMP452 ; 
if ( RX10_TEMP453 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP451 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP451 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP454 = getRefArrayValue1int ( sendGrids , RX10_TEMP446 ) ; 
const int nGrids = RX10_TEMP454 ; 
/* finish  */ 
{ const int X10_TEMP145 = /* here  */ 0 ; 
const int X10_TEMP147 = /* X10_TEMP145 . next ( )  */ 0 ; 
/* async ( X10_TEMP147 )  */ 
{ const int X10_TEMP148 = /* here  */ 0 ; 
const int X10_TEMP150 = /* X10_TEMP148 . id  */ 0 ; 
const int X10_TEMP152 = nCount ; 
struct Point1 RX10_TEMP455  ; 
Point1_Point1( &RX10_TEMP455/*Assignment*/, X10_TEMP150 ) ; 
struct Dist1 RX10_TEMP456 = recvCount .distValue ; 
struct Region1 RX10_TEMP457 = RX10_TEMP456 .dReg ; 
const int RX10_TEMP458 = searchPointInRegion1 ( RX10_TEMP457 , RX10_TEMP455 ) ; 
const int RX10_TEMP459 = 0 ; 
const int RX10_TEMP460 = RX10_TEMP458 < RX10_TEMP459 ; 
if ( RX10_TEMP460 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP461 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP461 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP462 = getPlaceFromDist1 ( RX10_TEMP456 , RX10_TEMP458 ) ; 
const int RX10_TEMP464 = /* here  */ 0 ; 
const int RX10_TEMP465 = RX10_TEMP462 != RX10_TEMP464 ; 
if ( RX10_TEMP465 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP463 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP463 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvCount , RX10_TEMP458 , X10_TEMP152 ) ; 
const int X10_TEMP153 = /* here  */ 0 ; 
const int X10_TEMP155 = /* X10_TEMP153 . id  */ 0 ; 
const int X10_TEMP157 = nGrids ; 
struct Point1 RX10_TEMP466  ; 
Point1_Point1( &RX10_TEMP466/*Assignment*/, X10_TEMP155 ) ; 
struct Dist1 RX10_TEMP467 = recvGrids .distValue ; 
struct Region1 RX10_TEMP468 = RX10_TEMP467 .dReg ; 
const int RX10_TEMP469 = searchPointInRegion1 ( RX10_TEMP468 , RX10_TEMP466 ) ; 
const int RX10_TEMP470 = 0 ; 
const int RX10_TEMP471 = RX10_TEMP469 < RX10_TEMP470 ; 
if ( RX10_TEMP471 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP472 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP472 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP473 = getPlaceFromDist1 ( RX10_TEMP467 , RX10_TEMP469 ) ; 
const int RX10_TEMP475 = /* here  */ 0 ; 
const int RX10_TEMP476 = RX10_TEMP473 != RX10_TEMP475 ; 
if ( RX10_TEMP476 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP474 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP474 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvGrids , RX10_TEMP469 , X10_TEMP157 ) ; 
/* finish  */ 
{ const int X10_TEMP159 = /* here  */ 0 ; 
const int RX10_TEMP481 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP479 = dSBuffer .regSize ; 
RX10_TEMP479 = RX10_TEMP479 - RX10_TEMP481 ; const int SX10_TEMP95 = 1 ; 
const int RX10_TEMP480 = RX10_TEMP479 + SX10_TEMP95 ; 
for ( int SX10_TEMP96 = 0 ; SX10_TEMP96 < RX10_TEMP480 ; SX10_TEMP96 ++ ) 
{ const int RX10_TEMP477 = SX10_TEMP96 ; 
const int RX10_TEMP482 = RX10_TEMP477 ; 
struct Point1 RX10_TEMP478 = regionOrdinalPoint1 ( dSBuffer , RX10_TEMP482 ) ; 
const int i = RX10_TEMP478 .f0 ; 
/* async ( X10_TEMP159 )  */ 
{ const int X10_TEMP160 = /* here  */ 0 ; 
const int X10_TEMP163 = /* X10_TEMP160 . id  */ 0 ; 
struct Point1 RX10_TEMP483  ; 
Point1_Point1( &RX10_TEMP483/*Assignment*/, i ) ; 
struct Region1 RX10_TEMP484 = sBuffer .regionValue ; 
const int RX10_TEMP485 = searchPointInRegion1 ( RX10_TEMP484 , RX10_TEMP483 ) ; 
const int RX10_TEMP486 = 0 ; 
const int RX10_TEMP487 = RX10_TEMP485 < RX10_TEMP486 ; 
if ( RX10_TEMP487 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP488 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP488 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ int * const RX10_TEMP489 = sBuffer .contents ; 
const int X10_TEMP166 = RX10_TEMP489 [ RX10_TEMP485 ] 
; 
const int X10_TEMP167 = X10_TEMP166 ; 
struct Point2 RX10_TEMP490  ; 
Point2_Point2( &RX10_TEMP490/*Assignment*/, X10_TEMP163 , i ) ; 
struct Dist2 RX10_TEMP491 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP492 = RX10_TEMP491 .dReg ; 
const int RX10_TEMP493 = searchPointInRegion2 ( RX10_TEMP492 , RX10_TEMP490 ) ; 
const int RX10_TEMP494 = 0 ; 
const int RX10_TEMP495 = RX10_TEMP493 < RX10_TEMP494 ; 
if ( RX10_TEMP495 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP496 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP496 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP497 = getPlaceFromDist2 ( RX10_TEMP491 , RX10_TEMP493 ) ; 
const int RX10_TEMP499 = /* here  */ 0 ; 
const int RX10_TEMP500 = RX10_TEMP497 != RX10_TEMP499 ; 
if ( RX10_TEMP500 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP498 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP498 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( rCountBuffer , RX10_TEMP493 , X10_TEMP167 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP169 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP502 = X10_TEMP169 .dReg ; 
const int RX10_TEMP505 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP503 = RX10_TEMP502 .regSize ; 
RX10_TEMP503 = RX10_TEMP503 - RX10_TEMP505 ; const int SX10_TEMP97 = 1 ; 
const int RX10_TEMP504 = RX10_TEMP503 + SX10_TEMP97 ; 
for ( int SX10_TEMP98 = 0 ; SX10_TEMP98 < RX10_TEMP504 ; SX10_TEMP98 ++ ) 
{ const int RX10_TEMP501 = SX10_TEMP98 ; 
const int RX10_TEMP506 = RX10_TEMP501 ; 
struct Point1 X10_TEMP170 = regionOrdinalPoint1 ( RX10_TEMP502 , RX10_TEMP506 ) ; 
const int pl = X10_TEMP170 .f0 ; 
struct Region1 RX10_TEMP507 = X10_TEMP169 .dReg ; 
const int RX10_TEMP508 = searchPointInRegion1 ( RX10_TEMP507 , X10_TEMP170 ) ; 
const int RX10_TEMP509 = 0 ; 
const int RX10_TEMP510 = RX10_TEMP508 < RX10_TEMP509 ; 
if ( RX10_TEMP510 ) 
{ const char * RX10_TEMP511 = "Point X10_TEMP170 not found in the distribution X10_TEMP169." ; 
fprintf(stderr, RX10_TEMP511 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP512 = getPlaceFromDist1 ( X10_TEMP169 , RX10_TEMP508 ) ; 
const int X10_TEMP171 = RX10_TEMP512 ; 
/* async ( X10_TEMP171 )  */ 
{ const int X10_TEMP174 = 0 ; 
const int X10_TEMP175 = X10_TEMP174 ; 
struct Point1 RX10_TEMP513  ; 
Point1_Point1( &RX10_TEMP513/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP514 = finished .distValue ; 
struct Region1 RX10_TEMP515 = RX10_TEMP514 .dReg ; 
const int RX10_TEMP516 = searchPointInRegion1 ( RX10_TEMP515 , RX10_TEMP513 ) ; 
const int RX10_TEMP517 = 0 ; 
const int RX10_TEMP518 = RX10_TEMP516 < RX10_TEMP517 ; 
if ( RX10_TEMP518 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP519 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP519 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP520 = getPlaceFromDist1 ( RX10_TEMP514 , RX10_TEMP516 ) ; 
const int RX10_TEMP522 = /* here  */ 0 ; 
const int RX10_TEMP523 = RX10_TEMP520 != RX10_TEMP522 ; 
if ( RX10_TEMP523 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP521 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP521 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP516 , X10_TEMP175 ) ; 
const double X10_TEMP176 = pl * countAve ; 
const double X10_TEMP177 = 0.5; 
const double X10_TEMP179 = X10_TEMP176 + X10_TEMP177 ; 
const int expected1 = /*casting*/( int ) X10_TEMP179 ; 
const int X10_TEMP181 = 1 ; 
const int X10_TEMP183 = pl + X10_TEMP181 ; 
const double X10_TEMP184 = X10_TEMP183 * countAve ; 
const double X10_TEMP185 = 0.5; 
const double X10_TEMP187 = X10_TEMP184 + X10_TEMP185 ; 
const int expected2 = /*casting*/( int ) X10_TEMP187 ; 
struct Point1 RX10_TEMP524  ; 
Point1_Point1( &RX10_TEMP524/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP525 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP526 = RX10_TEMP525 .dReg ; 
const int RX10_TEMP527 = searchPointInRegion1 ( RX10_TEMP526 , RX10_TEMP524 ) ; 
const int RX10_TEMP528 = 0 ; 
const int RX10_TEMP529 = RX10_TEMP527 < RX10_TEMP528 ; 
if ( RX10_TEMP529 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP530 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP530 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP531 = getPlaceFromDist1 ( RX10_TEMP525 , RX10_TEMP527 ) ; 
const int RX10_TEMP533 = /* here  */ 0 ; 
const int RX10_TEMP534 = RX10_TEMP531 != RX10_TEMP533 ; 
if ( RX10_TEMP534 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP532 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP532 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP535 = getRefArrayValue1int ( runningPTotals , RX10_TEMP527 ) ; 
const int X10_TEMP190 = RX10_TEMP535 ; 
const int X10_TEMP192 = expected1 - X10_TEMP190 ; 
struct Point1 RX10_TEMP536  ; 
Point1_Point1( &RX10_TEMP536/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP537 = sendCount .distValue ; 
struct Region1 RX10_TEMP538 = RX10_TEMP537 .dReg ; 
const int RX10_TEMP539 = searchPointInRegion1 ( RX10_TEMP538 , RX10_TEMP536 ) ; 
const int RX10_TEMP540 = 0 ; 
const int RX10_TEMP541 = RX10_TEMP539 < RX10_TEMP540 ; 
if ( RX10_TEMP541 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP542 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP542 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP543 = getPlaceFromDist1 ( RX10_TEMP537 , RX10_TEMP539 ) ; 
const int RX10_TEMP545 = /* here  */ 0 ; 
const int RX10_TEMP546 = RX10_TEMP543 != RX10_TEMP545 ; 
if ( RX10_TEMP546 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP544 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP544 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP547 = getRefArrayValue1int ( sendCount , RX10_TEMP539 ) ; 
const int X10_TEMP193 = RX10_TEMP547 ; 
const int lDeficit = X10_TEMP192 + X10_TEMP193 ; 
struct Point1 RX10_TEMP548  ; 
Point1_Point1( &RX10_TEMP548/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP549 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP550 = RX10_TEMP549 .dReg ; 
const int RX10_TEMP551 = searchPointInRegion1 ( RX10_TEMP550 , RX10_TEMP548 ) ; 
const int RX10_TEMP552 = 0 ; 
const int RX10_TEMP553 = RX10_TEMP551 < RX10_TEMP552 ; 
if ( RX10_TEMP553 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP554 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP554 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP555 = getPlaceFromDist1 ( RX10_TEMP549 , RX10_TEMP551 ) ; 
const int RX10_TEMP557 = /* here  */ 0 ; 
const int RX10_TEMP558 = RX10_TEMP555 != RX10_TEMP557 ; 
if ( RX10_TEMP558 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP556 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP556 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP559 = getRefArrayValue1int ( runningPTotals , RX10_TEMP551 ) ; 
const int X10_TEMP196 = RX10_TEMP559 ; 
const int rDeficit = X10_TEMP196 - expected2 ; 
const double X10_TEMP198 = 0.0; 
const int X10_TEMP200 = lDeficit < X10_TEMP198 ; 
if ( X10_TEMP200 ) 
{ struct Point1 RX10_TEMP560  ; 
Point1_Point1( &RX10_TEMP560/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP561 = recvCount .distValue ; 
struct Region1 RX10_TEMP562 = RX10_TEMP561 .dReg ; 
const int RX10_TEMP563 = searchPointInRegion1 ( RX10_TEMP562 , RX10_TEMP560 ) ; 
const int RX10_TEMP564 = 0 ; 
const int RX10_TEMP565 = RX10_TEMP563 < RX10_TEMP564 ; 
if ( RX10_TEMP565 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP566 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP566 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP567 = getPlaceFromDist1 ( RX10_TEMP561 , RX10_TEMP563 ) ; 
const int RX10_TEMP569 = /* here  */ 0 ; 
const int RX10_TEMP570 = RX10_TEMP567 != RX10_TEMP569 ; 
if ( RX10_TEMP570 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP568 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP568 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP571 = getRefArrayValue1int ( recvCount , RX10_TEMP563 ) ; 
const int X10_TEMP202 = RX10_TEMP571 ; 
const int X10_TEMP203 = lDeficit + X10_TEMP202 ; 
const double X10_TEMP204 = 0.0; 
const int X10_TEMP206 = X10_TEMP203 >= X10_TEMP204 ; 
if ( X10_TEMP206 ) 
{ /*UpdatableVariableDeclaration*/int total = 0 ; 
/*UpdatableVariableDeclaration*/int oldTotal = 0 ; 
struct Point1 RX10_TEMP572  ; 
Point1_Point1( &RX10_TEMP572/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP573 = recvGrids .distValue ; 
struct Region1 RX10_TEMP574 = RX10_TEMP573 .dReg ; 
const int RX10_TEMP575 = searchPointInRegion1 ( RX10_TEMP574 , RX10_TEMP572 ) ; 
const int RX10_TEMP576 = 0 ; 
const int RX10_TEMP577 = RX10_TEMP575 < RX10_TEMP576 ; 
if ( RX10_TEMP577 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP578 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP578 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP579 = getPlaceFromDist1 ( RX10_TEMP573 , RX10_TEMP575 ) ; 
const int RX10_TEMP581 = /* here  */ 0 ; 
const int RX10_TEMP582 = RX10_TEMP579 != RX10_TEMP581 ; 
if ( RX10_TEMP582 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP580 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP580 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP583 = getRefArrayValue1int ( recvGrids , RX10_TEMP575 ) ; 
/*UpdatableVariableDeclaration*/int gsize = RX10_TEMP583 ; 
/*UpdatableVariableDeclaration*/int i = gsize ; 
/*UpdatableVariableDeclaration*/int X10_TEMP212 = 0 ; 
do 
{ const int X10_TEMP213 = i ; 
const int X10_TEMP214 = 1 ; 
i = i - X10_TEMP214 ; oldTotal = total ; struct Point2 RX10_TEMP584  ; 
Point2_Point2( &RX10_TEMP584/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP585 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP586 = RX10_TEMP585 .dReg ; 
const int RX10_TEMP587 = searchPointInRegion2 ( RX10_TEMP586 , RX10_TEMP584 ) ; 
const int RX10_TEMP588 = 0 ; 
const int RX10_TEMP589 = RX10_TEMP587 < RX10_TEMP588 ; 
if ( RX10_TEMP589 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP590 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP590 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP591 = getPlaceFromDist2 ( RX10_TEMP585 , RX10_TEMP587 ) ; 
const int RX10_TEMP593 = /* here  */ 0 ; 
const int RX10_TEMP594 = RX10_TEMP591 != RX10_TEMP593 ; 
if ( RX10_TEMP594 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP592 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP592 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP595 = getRefArrayValue2int ( rCountBuffer , RX10_TEMP587 ) ; 
const int X10_TEMP218 = RX10_TEMP595 ; 
const int X10_TEMP220 = total - X10_TEMP218 ; 
total = X10_TEMP220 ; const int X10_TEMP222 = total > lDeficit ; 
const int X10_TEMP221 = 0 ; 
const int X10_TEMP223 = i >= X10_TEMP221 ; 
X10_TEMP212 = X10_TEMP222 && X10_TEMP223 ; } 
while ( X10_TEMP212 ) ; 
const int X10_TEMP226 = gsize - i ; 
const int X10_TEMP228 = lDeficit - oldTotal ; 
const double X10_TEMP230 = /*casting*/( double ) X10_TEMP228 ; 
const int X10_TEMP232 = total - oldTotal ; 
const double X10_TEMP234 = /*casting*/( double ) X10_TEMP232 ; 
const double X10_TEMP236 = X10_TEMP230 / X10_TEMP234 ; 
const double X10_TEMP238 = X10_TEMP226 + X10_TEMP236 ; 
/*UpdatableVariableDeclaration*/double offset = X10_TEMP238 ; 
struct Point1 RX10_TEMP596  ; 
Point1_Point1( &RX10_TEMP596/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP597 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP598 = RX10_TEMP597 .dReg ; 
const int RX10_TEMP599 = searchPointInRegion1 ( RX10_TEMP598 , RX10_TEMP596 ) ; 
const int RX10_TEMP600 = 0 ; 
const int RX10_TEMP601 = RX10_TEMP599 < RX10_TEMP600 ; 
if ( RX10_TEMP601 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP602 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP602 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP603 = getPlaceFromDist1 ( RX10_TEMP597 , RX10_TEMP599 ) ; 
const int RX10_TEMP605 = /* here  */ 0 ; 
const int RX10_TEMP606 = RX10_TEMP603 != RX10_TEMP605 ; 
if ( RX10_TEMP606 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP604 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP604 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP607 = getRefArrayValue1int ( runningGTotals , RX10_TEMP599 ) ; 
const int X10_TEMP243 = RX10_TEMP607 ; 
struct Point1 RX10_TEMP608  ; 
Point1_Point1( &RX10_TEMP608/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP609 = sendGrids .distValue ; 
struct Region1 RX10_TEMP610 = RX10_TEMP609 .dReg ; 
const int RX10_TEMP611 = searchPointInRegion1 ( RX10_TEMP610 , RX10_TEMP608 ) ; 
const int RX10_TEMP612 = 0 ; 
const int RX10_TEMP613 = RX10_TEMP611 < RX10_TEMP612 ; 
if ( RX10_TEMP613 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP614 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP614 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP615 = getPlaceFromDist1 ( RX10_TEMP609 , RX10_TEMP611 ) ; 
const int RX10_TEMP617 = /* here  */ 0 ; 
const int RX10_TEMP618 = RX10_TEMP615 != RX10_TEMP617 ; 
if ( RX10_TEMP618 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP616 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP616 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP619 = getRefArrayValue1int ( sendGrids , RX10_TEMP611 ) ; 
const int X10_TEMP244 = RX10_TEMP619 ; 
const double X10_TEMP245 = X10_TEMP243 - X10_TEMP244 ; 
const double X10_TEMP247 = X10_TEMP245 - offset ; 
const double X10_TEMP248 = X10_TEMP247 ; 
struct Point1 RX10_TEMP620  ; 
Point1_Point1( &RX10_TEMP620/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP621 = border .distValue ; 
struct Region1 RX10_TEMP622 = RX10_TEMP621 .dReg ; 
const int RX10_TEMP623 = searchPointInRegion1 ( RX10_TEMP622 , RX10_TEMP620 ) ; 
const int RX10_TEMP624 = 0 ; 
const int RX10_TEMP625 = RX10_TEMP623 < RX10_TEMP624 ; 
if ( RX10_TEMP625 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP626 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP626 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP627 = getPlaceFromDist1 ( RX10_TEMP621 , RX10_TEMP623 ) ; 
const int RX10_TEMP629 = /* here  */ 0 ; 
const int RX10_TEMP630 = RX10_TEMP627 != RX10_TEMP629 ; 
if ( RX10_TEMP630 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP628 = "Bad place access for array border" ; 
fprintf(stderr, RX10_TEMP628 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( border , RX10_TEMP623 , X10_TEMP248 ) ; 
} 
else 
{ struct Point1 RX10_TEMP631  ; 
Point1_Point1( &RX10_TEMP631/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP632 = finished .distValue ; 
struct Region1 RX10_TEMP633 = RX10_TEMP632 .dReg ; 
const int RX10_TEMP634 = searchPointInRegion1 ( RX10_TEMP633 , RX10_TEMP631 ) ; 
const int RX10_TEMP635 = 0 ; 
const int RX10_TEMP636 = RX10_TEMP634 < RX10_TEMP635 ; 
if ( RX10_TEMP636 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP637 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP637 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP638 = getPlaceFromDist1 ( RX10_TEMP632 , RX10_TEMP634 ) ; 
const int RX10_TEMP640 = /* here  */ 0 ; 
const int RX10_TEMP641 = RX10_TEMP638 != RX10_TEMP640 ; 
if ( RX10_TEMP641 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP639 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP639 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP642 = getRefArrayValue1int ( finished , RX10_TEMP634 ) ; 
const int X10_TEMP250 = RX10_TEMP642 ; 
const int X10_TEMP251 = 1 ; 
struct Point1 RX10_TEMP643  ; 
Point1_Point1( &RX10_TEMP643/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP644 = finished .distValue ; 
struct Region1 RX10_TEMP645 = RX10_TEMP644 .dReg ; 
const int RX10_TEMP646 = searchPointInRegion1 ( RX10_TEMP645 , RX10_TEMP643 ) ; 
const int RX10_TEMP647 = 0 ; 
const int RX10_TEMP648 = RX10_TEMP646 < RX10_TEMP647 ; 
if ( RX10_TEMP648 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP649 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP649 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP650 = getPlaceFromDist1 ( RX10_TEMP644 , RX10_TEMP646 ) ; 
const int RX10_TEMP652 = /* here  */ 0 ; 
const int RX10_TEMP653 = RX10_TEMP650 != RX10_TEMP652 ; 
if ( RX10_TEMP653 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP651 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP651 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP654 = getRefArrayValue1int ( finished , RX10_TEMP646 ) ; 
const int X10_TEMP252 = RX10_TEMP654 ; 
const int X10_TEMP253 = X10_TEMP252 + X10_TEMP251 ; 
struct Point1 RX10_TEMP655  ; 
Point1_Point1( &RX10_TEMP655/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP656 = finished .distValue ; 
struct Region1 RX10_TEMP657 = RX10_TEMP656 .dReg ; 
const int RX10_TEMP658 = searchPointInRegion1 ( RX10_TEMP657 , RX10_TEMP655 ) ; 
const int RX10_TEMP659 = 0 ; 
const int RX10_TEMP660 = RX10_TEMP658 < RX10_TEMP659 ; 
if ( RX10_TEMP660 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP661 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP661 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP662 = getPlaceFromDist1 ( RX10_TEMP656 , RX10_TEMP658 ) ; 
const int RX10_TEMP664 = /* here  */ 0 ; 
const int RX10_TEMP665 = RX10_TEMP662 != RX10_TEMP664 ; 
if ( RX10_TEMP665 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP663 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP663 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP658 , X10_TEMP253 ) ; 
} 


} 
else 
{ struct Point1 RX10_TEMP666  ; 
Point1_Point1( &RX10_TEMP666/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP667 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP668 = RX10_TEMP667 .dReg ; 
const int RX10_TEMP669 = searchPointInRegion1 ( RX10_TEMP668 , RX10_TEMP666 ) ; 
const int RX10_TEMP670 = 0 ; 
const int RX10_TEMP671 = RX10_TEMP669 < RX10_TEMP670 ; 
if ( RX10_TEMP671 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP672 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP672 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP673 = getPlaceFromDist1 ( RX10_TEMP667 , RX10_TEMP669 ) ; 
const int RX10_TEMP675 = /* here  */ 0 ; 
const int RX10_TEMP676 = RX10_TEMP673 != RX10_TEMP675 ; 
if ( RX10_TEMP676 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP674 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP674 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP677 = getRefArrayValue1int ( runningPTotals , RX10_TEMP669 ) ; 
const int X10_TEMP255 = RX10_TEMP677 ; 
const int X10_TEMP257 = X10_TEMP255 >= expected1 ; 
if ( X10_TEMP257 ) 
{ struct Point1 RX10_TEMP678  ; 
Point1_Point1( &RX10_TEMP678/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP679 = sendGrids .distValue ; 
struct Region1 RX10_TEMP680 = RX10_TEMP679 .dReg ; 
const int RX10_TEMP681 = searchPointInRegion1 ( RX10_TEMP680 , RX10_TEMP678 ) ; 
const int RX10_TEMP682 = 0 ; 
const int RX10_TEMP683 = RX10_TEMP681 < RX10_TEMP682 ; 
if ( RX10_TEMP683 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP684 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP684 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP685 = getPlaceFromDist1 ( RX10_TEMP679 , RX10_TEMP681 ) ; 
const int RX10_TEMP687 = /* here  */ 0 ; 
const int RX10_TEMP688 = RX10_TEMP685 != RX10_TEMP687 ; 
if ( RX10_TEMP688 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP686 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP686 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP689 = getRefArrayValue1int ( sendGrids , RX10_TEMP681 ) ; 
/*UpdatableVariableDeclaration*/int gsize = RX10_TEMP689 ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int total = 0 ; 
/*UpdatableVariableDeclaration*/int oldTotal = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP263 = 0 ; 
do 
{ oldTotal = total ; struct Point2 RX10_TEMP690  ; 
Point2_Point2( &RX10_TEMP690/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP691 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP692 = RX10_TEMP691 .dReg ; 
const int RX10_TEMP693 = searchPointInRegion2 ( RX10_TEMP692 , RX10_TEMP690 ) ; 
const int RX10_TEMP694 = 0 ; 
const int RX10_TEMP695 = RX10_TEMP693 < RX10_TEMP694 ; 
if ( RX10_TEMP695 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP696 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP696 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP697 = getPlaceFromDist2 ( RX10_TEMP691 , RX10_TEMP693 ) ; 
const int RX10_TEMP699 = /* here  */ 0 ; 
const int RX10_TEMP700 = RX10_TEMP697 != RX10_TEMP699 ; 
if ( RX10_TEMP700 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP698 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP698 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP701 = getRefArrayValue2int ( sCountBuffer , RX10_TEMP693 ) ; 
const int X10_TEMP267 = RX10_TEMP701 ; 
const int X10_TEMP269 = total + X10_TEMP267 ; 
total = X10_TEMP269 ; const int X10_TEMP270 = i ; 
const int X10_TEMP271 = 1 ; 
i = i + X10_TEMP271 ; const int X10_TEMP272 = total < lDeficit ; 
const int X10_TEMP273 = i < gsize ; 
X10_TEMP263 = X10_TEMP272 && X10_TEMP273 ; } 
while ( X10_TEMP263 ) ; 
const int X10_TEMP275 = 1 ; 
/*UpdatableVariableDeclaration*/double offset = i - X10_TEMP275 ; 
const int X10_TEMP278 = total > oldTotal ; 
if ( X10_TEMP278 ) 
{ const int X10_TEMP280 = lDeficit - oldTotal ; 
const double X10_TEMP282 = /*casting*/( double ) X10_TEMP280 ; 
const int X10_TEMP284 = total - oldTotal ; 
const double X10_TEMP286 = /*casting*/( double ) X10_TEMP284 ; 
const double X10_TEMP288 = X10_TEMP282 / X10_TEMP286 ; 
const double X10_TEMP290 = offset + X10_TEMP288 ; 
offset = X10_TEMP290 ; } 

struct Point1 RX10_TEMP702  ; 
Point1_Point1( &RX10_TEMP702/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP703 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP704 = RX10_TEMP703 .dReg ; 
const int RX10_TEMP705 = searchPointInRegion1 ( RX10_TEMP704 , RX10_TEMP702 ) ; 
const int RX10_TEMP706 = 0 ; 
const int RX10_TEMP707 = RX10_TEMP705 < RX10_TEMP706 ; 
if ( RX10_TEMP707 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP708 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP708 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP709 = getPlaceFromDist1 ( RX10_TEMP703 , RX10_TEMP705 ) ; 
const int RX10_TEMP711 = /* here  */ 0 ; 
const int RX10_TEMP712 = RX10_TEMP709 != RX10_TEMP711 ; 
if ( RX10_TEMP712 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP710 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP710 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP713 = getRefArrayValue1int ( runningGTotals , RX10_TEMP705 ) ; 
const int X10_TEMP294 = RX10_TEMP713 ; 
struct Point1 RX10_TEMP714  ; 
Point1_Point1( &RX10_TEMP714/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP715 = sendGrids .distValue ; 
struct Region1 RX10_TEMP716 = RX10_TEMP715 .dReg ; 
const int RX10_TEMP717 = searchPointInRegion1 ( RX10_TEMP716 , RX10_TEMP714 ) ; 
const int RX10_TEMP718 = 0 ; 
const int RX10_TEMP719 = RX10_TEMP717 < RX10_TEMP718 ; 
if ( RX10_TEMP719 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP720 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP720 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP721 = getPlaceFromDist1 ( RX10_TEMP715 , RX10_TEMP717 ) ; 
const int RX10_TEMP723 = /* here  */ 0 ; 
const int RX10_TEMP724 = RX10_TEMP721 != RX10_TEMP723 ; 
if ( RX10_TEMP724 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP722 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP722 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP725 = getRefArrayValue1int ( sendGrids , RX10_TEMP717 ) ; 
const int X10_TEMP295 = RX10_TEMP725 ; 
const int X10_TEMP296 = X10_TEMP294 - X10_TEMP295 ; 
const double X10_TEMP298 = X10_TEMP296 + offset ; 
const double X10_TEMP299 = X10_TEMP298 ; 
struct Point1 RX10_TEMP726  ; 
Point1_Point1( &RX10_TEMP726/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP727 = border .distValue ; 
struct Region1 RX10_TEMP728 = RX10_TEMP727 .dReg ; 
const int RX10_TEMP729 = searchPointInRegion1 ( RX10_TEMP728 , RX10_TEMP726 ) ; 
const int RX10_TEMP730 = 0 ; 
const int RX10_TEMP731 = RX10_TEMP729 < RX10_TEMP730 ; 
if ( RX10_TEMP731 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP732 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP732 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP733 = getPlaceFromDist1 ( RX10_TEMP727 , RX10_TEMP729 ) ; 
const int RX10_TEMP735 = /* here  */ 0 ; 
const int RX10_TEMP736 = RX10_TEMP733 != RX10_TEMP735 ; 
if ( RX10_TEMP736 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP734 = "Bad place access for array border" ; 
fprintf(stderr, RX10_TEMP734 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( border , RX10_TEMP729 , X10_TEMP299 ) ; 
} 

} 


struct Point1 RX10_TEMP737  ; 
Point1_Point1( &RX10_TEMP737/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP738 = sendCount .distValue ; 
struct Region1 RX10_TEMP739 = RX10_TEMP738 .dReg ; 
const int RX10_TEMP740 = searchPointInRegion1 ( RX10_TEMP739 , RX10_TEMP737 ) ; 
const int RX10_TEMP741 = 0 ; 
const int RX10_TEMP742 = RX10_TEMP740 < RX10_TEMP741 ; 
if ( RX10_TEMP742 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP743 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP743 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP744 = getPlaceFromDist1 ( RX10_TEMP738 , RX10_TEMP740 ) ; 
const int RX10_TEMP746 = /* here  */ 0 ; 
const int RX10_TEMP747 = RX10_TEMP744 != RX10_TEMP746 ; 
if ( RX10_TEMP747 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP745 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP745 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP748 = getRefArrayValue1int ( sendCount , RX10_TEMP740 ) ; 
const int X10_TEMP301 = RX10_TEMP748 ; 
const int X10_TEMP303 = rDeficit > X10_TEMP301 ; 
if ( X10_TEMP303 ) 
{ struct Point1 RX10_TEMP749  ; 
Point1_Point1( &RX10_TEMP749/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP750 = finished .distValue ; 
struct Region1 RX10_TEMP751 = RX10_TEMP750 .dReg ; 
const int RX10_TEMP752 = searchPointInRegion1 ( RX10_TEMP751 , RX10_TEMP749 ) ; 
const int RX10_TEMP753 = 0 ; 
const int RX10_TEMP754 = RX10_TEMP752 < RX10_TEMP753 ; 
if ( RX10_TEMP754 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP755 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP755 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP756 = getPlaceFromDist1 ( RX10_TEMP750 , RX10_TEMP752 ) ; 
const int RX10_TEMP758 = /* here  */ 0 ; 
const int RX10_TEMP759 = RX10_TEMP756 != RX10_TEMP758 ; 
if ( RX10_TEMP759 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP757 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP757 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP760 = getRefArrayValue1int ( finished , RX10_TEMP752 ) ; 
const int X10_TEMP305 = RX10_TEMP760 ; 
const int X10_TEMP306 = 1 ; 
struct Point1 RX10_TEMP761  ; 
Point1_Point1( &RX10_TEMP761/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP762 = finished .distValue ; 
struct Region1 RX10_TEMP763 = RX10_TEMP762 .dReg ; 
const int RX10_TEMP764 = searchPointInRegion1 ( RX10_TEMP763 , RX10_TEMP761 ) ; 
const int RX10_TEMP765 = 0 ; 
const int RX10_TEMP766 = RX10_TEMP764 < RX10_TEMP765 ; 
if ( RX10_TEMP766 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP767 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP767 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP768 = getPlaceFromDist1 ( RX10_TEMP762 , RX10_TEMP764 ) ; 
const int RX10_TEMP770 = /* here  */ 0 ; 
const int RX10_TEMP771 = RX10_TEMP768 != RX10_TEMP770 ; 
if ( RX10_TEMP771 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP769 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP769 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP772 = getRefArrayValue1int ( finished , RX10_TEMP764 ) ; 
const int X10_TEMP307 = RX10_TEMP772 ; 
const int X10_TEMP308 = X10_TEMP307 + X10_TEMP306 ; 
struct Point1 RX10_TEMP773  ; 
Point1_Point1( &RX10_TEMP773/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP774 = finished .distValue ; 
struct Region1 RX10_TEMP775 = RX10_TEMP774 .dReg ; 
const int RX10_TEMP776 = searchPointInRegion1 ( RX10_TEMP775 , RX10_TEMP773 ) ; 
const int RX10_TEMP777 = 0 ; 
const int RX10_TEMP778 = RX10_TEMP776 < RX10_TEMP777 ; 
if ( RX10_TEMP778 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP779 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP779 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP780 = getPlaceFromDist1 ( RX10_TEMP774 , RX10_TEMP776 ) ; 
const int RX10_TEMP782 = /* here  */ 0 ; 
const int RX10_TEMP783 = RX10_TEMP780 != RX10_TEMP782 ; 
if ( RX10_TEMP783 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP781 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP781 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP776 , X10_TEMP308 ) ; 
} 

const int X10_TEMP309 = /* here  */ 0 ; 
const int X10_TEMP310 = /* X10_TEMP309 . isFirst ( )  */ 1 ; 
const int X10_TEMP312 = ! X10_TEMP310 ; 
if ( X10_TEMP312 ) 
{ struct Point1 RX10_TEMP784  ; 
Point1_Point1( &RX10_TEMP784/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP785 = recvGrids .distValue ; 
struct Region1 RX10_TEMP786 = RX10_TEMP785 .dReg ; 
const int RX10_TEMP787 = searchPointInRegion1 ( RX10_TEMP786 , RX10_TEMP784 ) ; 
const int RX10_TEMP788 = 0 ; 
const int RX10_TEMP789 = RX10_TEMP787 < RX10_TEMP788 ; 
if ( RX10_TEMP789 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP790 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP790 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP791 = getPlaceFromDist1 ( RX10_TEMP785 , RX10_TEMP787 ) ; 
const int RX10_TEMP793 = /* here  */ 0 ; 
const int RX10_TEMP794 = RX10_TEMP791 != RX10_TEMP793 ; 
if ( RX10_TEMP794 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP792 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP792 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP795 = getRefArrayValue1int ( recvGrids , RX10_TEMP787 ) ; 
/*UpdatableVariableDeclaration*/int gsize = RX10_TEMP795 ; 
struct Point1 RX10_TEMP796  ; 
Point1_Point1( &RX10_TEMP796/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP797 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP798 = RX10_TEMP797 .dReg ; 
const int RX10_TEMP799 = searchPointInRegion1 ( RX10_TEMP798 , RX10_TEMP796 ) ; 
const int RX10_TEMP800 = 0 ; 
const int RX10_TEMP801 = RX10_TEMP799 < RX10_TEMP800 ; 
if ( RX10_TEMP801 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP802 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP802 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP803 = getPlaceFromDist1 ( RX10_TEMP797 , RX10_TEMP799 ) ; 
const int RX10_TEMP805 = /* here  */ 0 ; 
const int RX10_TEMP806 = RX10_TEMP803 != RX10_TEMP805 ; 
if ( RX10_TEMP806 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP804 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP804 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP807 = getRefArrayValue1int ( runningPTotals , RX10_TEMP799 ) ; 
const int X10_TEMP318 = RX10_TEMP807 ; 
struct Point1 RX10_TEMP808  ; 
Point1_Point1( &RX10_TEMP808/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP809 = sendCount .distValue ; 
struct Region1 RX10_TEMP810 = RX10_TEMP809 .dReg ; 
const int RX10_TEMP811 = searchPointInRegion1 ( RX10_TEMP810 , RX10_TEMP808 ) ; 
const int RX10_TEMP812 = 0 ; 
const int RX10_TEMP813 = RX10_TEMP811 < RX10_TEMP812 ; 
if ( RX10_TEMP813 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP814 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP814 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP815 = getPlaceFromDist1 ( RX10_TEMP809 , RX10_TEMP811 ) ; 
const int RX10_TEMP817 = /* here  */ 0 ; 
const int RX10_TEMP818 = RX10_TEMP815 != RX10_TEMP817 ; 
if ( RX10_TEMP818 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP816 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP816 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP819 = getRefArrayValue1int ( sendCount , RX10_TEMP811 ) ; 
const int X10_TEMP319 = RX10_TEMP819 ; 
const int X10_TEMP321 = X10_TEMP318 - X10_TEMP319 ; 
const int X10_TEMP322 = X10_TEMP321 ; 
struct Point1 RX10_TEMP820  ; 
Point1_Point1( &RX10_TEMP820/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP821 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP822 = RX10_TEMP821 .dReg ; 
const int RX10_TEMP823 = searchPointInRegion1 ( RX10_TEMP822 , RX10_TEMP820 ) ; 
const int RX10_TEMP824 = 0 ; 
const int RX10_TEMP825 = RX10_TEMP823 < RX10_TEMP824 ; 
if ( RX10_TEMP825 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP826 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP826 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP827 = getPlaceFromDist1 ( RX10_TEMP821 , RX10_TEMP823 ) ; 
const int RX10_TEMP829 = /* here  */ 0 ; 
const int RX10_TEMP830 = RX10_TEMP827 != RX10_TEMP829 ; 
if ( RX10_TEMP830 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP828 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP828 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningPTotals , RX10_TEMP823 , X10_TEMP322 ) ; 
struct Point1 RX10_TEMP831  ; 
Point1_Point1( &RX10_TEMP831/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP832 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP833 = RX10_TEMP832 .dReg ; 
const int RX10_TEMP834 = searchPointInRegion1 ( RX10_TEMP833 , RX10_TEMP831 ) ; 
const int RX10_TEMP835 = 0 ; 
const int RX10_TEMP836 = RX10_TEMP834 < RX10_TEMP835 ; 
if ( RX10_TEMP836 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP837 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP837 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP838 = getPlaceFromDist1 ( RX10_TEMP832 , RX10_TEMP834 ) ; 
const int RX10_TEMP840 = /* here  */ 0 ; 
const int RX10_TEMP841 = RX10_TEMP838 != RX10_TEMP840 ; 
if ( RX10_TEMP841 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP839 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP839 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP842 = getRefArrayValue1int ( runningGTotals , RX10_TEMP834 ) ; 
const int X10_TEMP326 = RX10_TEMP842 ; 
struct Point1 RX10_TEMP843  ; 
Point1_Point1( &RX10_TEMP843/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP844 = sendGrids .distValue ; 
struct Region1 RX10_TEMP845 = RX10_TEMP844 .dReg ; 
const int RX10_TEMP846 = searchPointInRegion1 ( RX10_TEMP845 , RX10_TEMP843 ) ; 
const int RX10_TEMP847 = 0 ; 
const int RX10_TEMP848 = RX10_TEMP846 < RX10_TEMP847 ; 
if ( RX10_TEMP848 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP849 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP849 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP850 = getPlaceFromDist1 ( RX10_TEMP844 , RX10_TEMP846 ) ; 
const int RX10_TEMP852 = /* here  */ 0 ; 
const int RX10_TEMP853 = RX10_TEMP850 != RX10_TEMP852 ; 
if ( RX10_TEMP853 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP851 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP851 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP854 = getRefArrayValue1int ( sendGrids , RX10_TEMP846 ) ; 
const int X10_TEMP327 = RX10_TEMP854 ; 
const int X10_TEMP329 = X10_TEMP326 - X10_TEMP327 ; 
const int X10_TEMP330 = X10_TEMP329 ; 
struct Point1 RX10_TEMP855  ; 
Point1_Point1( &RX10_TEMP855/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP856 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP857 = RX10_TEMP856 .dReg ; 
const int RX10_TEMP858 = searchPointInRegion1 ( RX10_TEMP857 , RX10_TEMP855 ) ; 
const int RX10_TEMP859 = 0 ; 
const int RX10_TEMP860 = RX10_TEMP858 < RX10_TEMP859 ; 
if ( RX10_TEMP860 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP861 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP861 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP862 = getPlaceFromDist1 ( RX10_TEMP856 , RX10_TEMP858 ) ; 
const int RX10_TEMP864 = /* here  */ 0 ; 
const int RX10_TEMP865 = RX10_TEMP862 != RX10_TEMP864 ; 
if ( RX10_TEMP865 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP863 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP863 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningGTotals , RX10_TEMP858 , X10_TEMP330 ) ; 
struct Point1 RX10_TEMP866  ; 
Point1_Point1( &RX10_TEMP866/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP867 = recvCount .distValue ; 
struct Region1 RX10_TEMP868 = RX10_TEMP867 .dReg ; 
const int RX10_TEMP869 = searchPointInRegion1 ( RX10_TEMP868 , RX10_TEMP866 ) ; 
const int RX10_TEMP870 = 0 ; 
const int RX10_TEMP871 = RX10_TEMP869 < RX10_TEMP870 ; 
if ( RX10_TEMP871 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP872 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP872 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP873 = getPlaceFromDist1 ( RX10_TEMP867 , RX10_TEMP869 ) ; 
const int RX10_TEMP875 = /* here  */ 0 ; 
const int RX10_TEMP876 = RX10_TEMP873 != RX10_TEMP875 ; 
if ( RX10_TEMP876 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP874 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP874 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP877 = getRefArrayValue1int ( recvCount , RX10_TEMP869 ) ; 
const int X10_TEMP334 = RX10_TEMP877 ; 
const int X10_TEMP335 = X10_TEMP334 ; 
struct Point1 RX10_TEMP878  ; 
Point1_Point1( &RX10_TEMP878/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP879 = sendCount .distValue ; 
struct Region1 RX10_TEMP880 = RX10_TEMP879 .dReg ; 
const int RX10_TEMP881 = searchPointInRegion1 ( RX10_TEMP880 , RX10_TEMP878 ) ; 
const int RX10_TEMP882 = 0 ; 
const int RX10_TEMP883 = RX10_TEMP881 < RX10_TEMP882 ; 
if ( RX10_TEMP883 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP884 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP884 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP885 = getPlaceFromDist1 ( RX10_TEMP879 , RX10_TEMP881 ) ; 
const int RX10_TEMP887 = /* here  */ 0 ; 
const int RX10_TEMP888 = RX10_TEMP885 != RX10_TEMP887 ; 
if ( RX10_TEMP888 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP886 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP886 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendCount , RX10_TEMP881 , X10_TEMP335 ) ; 
struct Point1 RX10_TEMP889  ; 
Point1_Point1( &RX10_TEMP889/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP890 = recvGrids .distValue ; 
struct Region1 RX10_TEMP891 = RX10_TEMP890 .dReg ; 
const int RX10_TEMP892 = searchPointInRegion1 ( RX10_TEMP891 , RX10_TEMP889 ) ; 
const int RX10_TEMP893 = 0 ; 
const int RX10_TEMP894 = RX10_TEMP892 < RX10_TEMP893 ; 
if ( RX10_TEMP894 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP895 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP895 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP896 = getPlaceFromDist1 ( RX10_TEMP890 , RX10_TEMP892 ) ; 
const int RX10_TEMP898 = /* here  */ 0 ; 
const int RX10_TEMP899 = RX10_TEMP896 != RX10_TEMP898 ; 
if ( RX10_TEMP899 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP897 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP897 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP900 = getRefArrayValue1int ( recvGrids , RX10_TEMP892 ) ; 
const int X10_TEMP339 = RX10_TEMP900 ; 
const int X10_TEMP340 = X10_TEMP339 ; 
struct Point1 RX10_TEMP901  ; 
Point1_Point1( &RX10_TEMP901/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP902 = sendGrids .distValue ; 
struct Region1 RX10_TEMP903 = RX10_TEMP902 .dReg ; 
const int RX10_TEMP904 = searchPointInRegion1 ( RX10_TEMP903 , RX10_TEMP901 ) ; 
const int RX10_TEMP905 = 0 ; 
const int RX10_TEMP906 = RX10_TEMP904 < RX10_TEMP905 ; 
if ( RX10_TEMP906 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP907 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP907 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP908 = getPlaceFromDist1 ( RX10_TEMP902 , RX10_TEMP904 ) ; 
const int RX10_TEMP910 = /* here  */ 0 ; 
const int RX10_TEMP911 = RX10_TEMP908 != RX10_TEMP910 ; 
if ( RX10_TEMP911 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP909 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP909 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendGrids , RX10_TEMP904 , X10_TEMP340 ) ; 
/* finish  */ 
{ const int X10_TEMP346 = 0 ; 
const int X10_TEMP344 = 1 ; 
const int X10_TEMP347 = gsize - X10_TEMP344 ; 
struct Region2 X10_TEMP349 = createNewRegion2RR ( pl , pl , X10_TEMP346 , X10_TEMP347 ) ; 
const int X10_TEMP350 = /* here  */ 0 ; 
const int RX10_TEMP915 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP913 = X10_TEMP349 .regSize ; 
RX10_TEMP913 = RX10_TEMP913 - RX10_TEMP915 ; const int SX10_TEMP99 = 1 ; 
const int RX10_TEMP914 = RX10_TEMP913 + SX10_TEMP99 ; 
for ( int SX10_TEMP100 = 0 ; SX10_TEMP100 < RX10_TEMP914 ; SX10_TEMP100 ++ ) 
{ const int RX10_TEMP912 = SX10_TEMP100 ; 
const int RX10_TEMP916 = RX10_TEMP912 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP349 , RX10_TEMP916 ) ; 
/* async ( X10_TEMP350 )  */ 
{ struct Dist2 RX10_TEMP917 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP918 = RX10_TEMP917 .dReg ; 
const int RX10_TEMP919 = searchPointInRegion2 ( RX10_TEMP918 , pt ) ; 
const int RX10_TEMP920 = 0 ; 
const int RX10_TEMP921 = RX10_TEMP919 < RX10_TEMP920 ; 
if ( RX10_TEMP921 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP922 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP922 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP923 = getPlaceFromDist2 ( RX10_TEMP917 , RX10_TEMP919 ) ; 
const int RX10_TEMP925 = /* here  */ 0 ; 
const int RX10_TEMP926 = RX10_TEMP923 != RX10_TEMP925 ; 
if ( RX10_TEMP926 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP924 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP924 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP927 = getRefArrayValue2int ( rCountBuffer , RX10_TEMP919 ) ; 
const int X10_TEMP354 = RX10_TEMP927 ; 
const int X10_TEMP355 = X10_TEMP354 ; 
struct Dist2 RX10_TEMP928 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP929 = RX10_TEMP928 .dReg ; 
const int RX10_TEMP930 = searchPointInRegion2 ( RX10_TEMP929 , pt ) ; 
const int RX10_TEMP931 = 0 ; 
const int RX10_TEMP932 = RX10_TEMP930 < RX10_TEMP931 ; 
if ( RX10_TEMP932 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP933 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP933 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP934 = getPlaceFromDist2 ( RX10_TEMP928 , RX10_TEMP930 ) ; 
const int RX10_TEMP936 = /* here  */ 0 ; 
const int RX10_TEMP937 = RX10_TEMP934 != RX10_TEMP936 ; 
if ( RX10_TEMP937 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP935 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP935 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( sCountBuffer , RX10_TEMP930 , X10_TEMP355 ) ; 
} 

} 

} 

} 

} 

} 

} 

const int X10_TEMP356 = intrefArraySum1 ( finished ) ; 
const int X10_TEMP357 = 0 ; 
X10_TEMP108 = X10_TEMP356 != X10_TEMP357 ; } 
while ( X10_TEMP108 ) ; 
/* finish  */ 
{ struct Dist1 X10_TEMP360 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP939 = X10_TEMP360 .dReg ; 
const int RX10_TEMP942 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP940 = RX10_TEMP939 .regSize ; 
RX10_TEMP940 = RX10_TEMP940 - RX10_TEMP942 ; const int SX10_TEMP101 = 1 ; 
const int RX10_TEMP941 = RX10_TEMP940 + SX10_TEMP101 ; 
for ( int SX10_TEMP102 = 0 ; SX10_TEMP102 < RX10_TEMP941 ; SX10_TEMP102 ++ ) 
{ const int RX10_TEMP938 = SX10_TEMP102 ; 
const int RX10_TEMP943 = RX10_TEMP938 ; 
struct Point1 X10_TEMP361 = regionOrdinalPoint1 ( RX10_TEMP939 , RX10_TEMP943 ) ; 
const int pl = X10_TEMP361 .f0 ; 
struct Region1 RX10_TEMP944 = X10_TEMP360 .dReg ; 
const int RX10_TEMP945 = searchPointInRegion1 ( RX10_TEMP944 , X10_TEMP361 ) ; 
const int RX10_TEMP946 = 0 ; 
const int RX10_TEMP947 = RX10_TEMP945 < RX10_TEMP946 ; 
if ( RX10_TEMP947 ) 
{ const char * RX10_TEMP948 = "Point X10_TEMP361 not found in the distribution X10_TEMP360." ; 
fprintf(stderr, RX10_TEMP948 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP949 = getPlaceFromDist1 ( X10_TEMP360 , RX10_TEMP945 ) ; 
const int X10_TEMP362 = RX10_TEMP949 ; 
/* async ( X10_TEMP362 )  */ 
{ struct Dist1 RX10_TEMP950 = particleCount .distValue ; 
struct Dist1 dPC = RX10_TEMP950 ; 
struct Region1 rLocal = X10Util_get1DLRegion ( dPC ) ; 
const int rsize = rLocal .regSize ; 
const int X10_TEMP367 = 0 ; 
const int X10_TEMP369 = rsize > X10_TEMP367 ; 
const int X10_TEMP370 = X10_TEMP369 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP373 = 0 ; 
if ( X10_TEMP370 ) 
{ const int RX10_TEMP951 = rLocal .regSize ; 
const int RX10_TEMP952 = 0 ; 
const int RX10_TEMP953 = RX10_TEMP951 <= RX10_TEMP952 ; 
if ( RX10_TEMP953 ) 
{ const char * RX10_TEMP954 = "Operation low() not defined on empty region rLocal" ; 
fprintf(stderr, RX10_TEMP954 ) ; 
exit(EXIT_FAILURE);
} 

X10_TEMP373 = regionLow ( rLocal ) ; } 

const int X10_TEMP374 = X10_TEMP373 ; 
const int offset = X10_TEMP374 ; 
/*UpdatableVariableDeclaration*/int total = 0 ; 
struct Dist1 RX10_TEMP955 = particleCount .distValue ; 
struct Dist1 X10_TEMP376 = RX10_TEMP955 ; 
const int X10_TEMP377 = /* here  */ 0 ; 
struct Dist1 X10_TEMP379 = restrictDist1 ( X10_TEMP376 , X10_TEMP377 ) ; 
struct Region1 RX10_TEMP958 = X10_TEMP379 .dReg ; 
const int RX10_TEMP961 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP959 = RX10_TEMP958 .regSize ; 
RX10_TEMP959 = RX10_TEMP959 - RX10_TEMP961 ; const int SX10_TEMP103 = 1 ; 
const int RX10_TEMP960 = RX10_TEMP959 + SX10_TEMP103 ; 
for ( int SX10_TEMP104 = 0 ; SX10_TEMP104 < RX10_TEMP960 ; SX10_TEMP104 ++ ) 
{ const int RX10_TEMP956 = SX10_TEMP104 ; 
const int RX10_TEMP962 = RX10_TEMP956 ; 
struct Point1 RX10_TEMP957 = regionOrdinalPoint1 ( RX10_TEMP958 , RX10_TEMP962 ) ; 
const int i = RX10_TEMP957 .f0 ; 
struct Point1 RX10_TEMP963  ; 
Point1_Point1( &RX10_TEMP963/*Assignment*/, i ) ; 
struct Dist1 RX10_TEMP964 = particleCount .distValue ; 
struct Region1 RX10_TEMP965 = RX10_TEMP964 .dReg ; 
const int RX10_TEMP966 = searchPointInRegion1 ( RX10_TEMP965 , RX10_TEMP963 ) ; 
const int RX10_TEMP967 = 0 ; 
const int RX10_TEMP968 = RX10_TEMP966 < RX10_TEMP967 ; 
if ( RX10_TEMP968 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP969 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP969 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP970 = getPlaceFromDist1 ( RX10_TEMP964 , RX10_TEMP966 ) ; 
const int RX10_TEMP972 = /* here  */ 0 ; 
const int RX10_TEMP973 = RX10_TEMP970 != RX10_TEMP972 ; 
if ( RX10_TEMP973 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP971 = "Bad place access for array particleCount" ; 
fprintf(stderr, RX10_TEMP971 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP974 = getRefArrayValue1int ( particleCount , RX10_TEMP966 ) ; 
const int count = RX10_TEMP974 ; 
const int X10_TEMP384 = i - offset ; 
const int X10_TEMP386 = count ; 
struct Point2 RX10_TEMP975  ; 
Point2_Point2( &RX10_TEMP975/*Assignment*/, pl , X10_TEMP384 ) ; 
struct Dist2 RX10_TEMP976 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP977 = RX10_TEMP976 .dReg ; 
const int RX10_TEMP978 = searchPointInRegion2 ( RX10_TEMP977 , RX10_TEMP975 ) ; 
const int RX10_TEMP979 = 0 ; 
const int RX10_TEMP980 = RX10_TEMP978 < RX10_TEMP979 ; 
if ( RX10_TEMP980 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP981 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP981 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP982 = getPlaceFromDist2 ( RX10_TEMP976 , RX10_TEMP978 ) ; 
const int RX10_TEMP984 = /* here  */ 0 ; 
const int RX10_TEMP985 = RX10_TEMP982 != RX10_TEMP984 ; 
if ( RX10_TEMP985 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP983 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP983 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( sCountBuffer , RX10_TEMP978 , X10_TEMP386 ) ; 
const int X10_TEMP388 = total + count ; 
total = X10_TEMP388 ; } 

struct Point1 RX10_TEMP986  ; 
Point1_Point1( &RX10_TEMP986/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP987 = particleTotals .distValue ; 
struct Region1 RX10_TEMP988 = RX10_TEMP987 .dReg ; 
const int RX10_TEMP989 = searchPointInRegion1 ( RX10_TEMP988 , RX10_TEMP986 ) ; 
const int RX10_TEMP990 = 0 ; 
const int RX10_TEMP991 = RX10_TEMP989 < RX10_TEMP990 ; 
if ( RX10_TEMP991 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP992 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP992 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP993 = getPlaceFromDist1 ( RX10_TEMP987 , RX10_TEMP989 ) ; 
const int RX10_TEMP995 = /* here  */ 0 ; 
const int RX10_TEMP996 = RX10_TEMP993 != RX10_TEMP995 ; 
if ( RX10_TEMP996 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP994 = "Bad place access for array particleTotals" ; 
fprintf(stderr, RX10_TEMP994 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP997 = getRefArrayValue1int ( particleTotals , RX10_TEMP989 ) ; 
const int X10_TEMP392 = RX10_TEMP997 ; 
const int X10_TEMP393 = X10_TEMP392 ; 
struct Point1 RX10_TEMP998  ; 
Point1_Point1( &RX10_TEMP998/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP999 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1000 = RX10_TEMP999 .dReg ; 
const int RX10_TEMP1001 = searchPointInRegion1 ( RX10_TEMP1000 , RX10_TEMP998 ) ; 
const int RX10_TEMP1002 = 0 ; 
const int RX10_TEMP1003 = RX10_TEMP1001 < RX10_TEMP1002 ; 
if ( RX10_TEMP1003 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1004 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1004 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1005 = getPlaceFromDist1 ( RX10_TEMP999 , RX10_TEMP1001 ) ; 
const int RX10_TEMP1007 = /* here  */ 0 ; 
const int RX10_TEMP1008 = RX10_TEMP1005 != RX10_TEMP1007 ; 
if ( RX10_TEMP1008 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1006 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1006 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningPTotals , RX10_TEMP1001 , X10_TEMP393 ) ; 
struct Point1 RX10_TEMP1009  ; 
Point1_Point1( &RX10_TEMP1009/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1010 = gridTotals .distValue ; 
struct Region1 RX10_TEMP1011 = RX10_TEMP1010 .dReg ; 
const int RX10_TEMP1012 = searchPointInRegion1 ( RX10_TEMP1011 , RX10_TEMP1009 ) ; 
const int RX10_TEMP1013 = 0 ; 
const int RX10_TEMP1014 = RX10_TEMP1012 < RX10_TEMP1013 ; 
if ( RX10_TEMP1014 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1015 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1015 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1016 = getPlaceFromDist1 ( RX10_TEMP1010 , RX10_TEMP1012 ) ; 
const int RX10_TEMP1018 = /* here  */ 0 ; 
const int RX10_TEMP1019 = RX10_TEMP1016 != RX10_TEMP1018 ; 
if ( RX10_TEMP1019 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1017 = "Bad place access for array gridTotals" ; 
fprintf(stderr, RX10_TEMP1017 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1020 = getRefArrayValue1int ( gridTotals , RX10_TEMP1012 ) ; 
const int X10_TEMP397 = RX10_TEMP1020 ; 
const int X10_TEMP398 = X10_TEMP397 ; 
struct Point1 RX10_TEMP1021  ; 
Point1_Point1( &RX10_TEMP1021/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1022 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP1023 = RX10_TEMP1022 .dReg ; 
const int RX10_TEMP1024 = searchPointInRegion1 ( RX10_TEMP1023 , RX10_TEMP1021 ) ; 
const int RX10_TEMP1025 = 0 ; 
const int RX10_TEMP1026 = RX10_TEMP1024 < RX10_TEMP1025 ; 
if ( RX10_TEMP1026 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1027 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1027 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1028 = getPlaceFromDist1 ( RX10_TEMP1022 , RX10_TEMP1024 ) ; 
const int RX10_TEMP1030 = /* here  */ 0 ; 
const int RX10_TEMP1031 = RX10_TEMP1028 != RX10_TEMP1030 ; 
if ( RX10_TEMP1031 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1029 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP1029 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningGTotals , RX10_TEMP1024 , X10_TEMP398 ) ; 
const int X10_TEMP401 = total ; 
struct Point1 RX10_TEMP1032  ; 
Point1_Point1( &RX10_TEMP1032/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1033 = sendCount .distValue ; 
struct Region1 RX10_TEMP1034 = RX10_TEMP1033 .dReg ; 
const int RX10_TEMP1035 = searchPointInRegion1 ( RX10_TEMP1034 , RX10_TEMP1032 ) ; 
const int RX10_TEMP1036 = 0 ; 
const int RX10_TEMP1037 = RX10_TEMP1035 < RX10_TEMP1036 ; 
if ( RX10_TEMP1037 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1038 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1038 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1039 = getPlaceFromDist1 ( RX10_TEMP1033 , RX10_TEMP1035 ) ; 
const int RX10_TEMP1041 = /* here  */ 0 ; 
const int RX10_TEMP1042 = RX10_TEMP1039 != RX10_TEMP1041 ; 
if ( RX10_TEMP1042 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1040 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1040 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendCount , RX10_TEMP1035 , X10_TEMP401 ) ; 
const int X10_TEMP404 = rsize ; 
struct Point1 RX10_TEMP1043  ; 
Point1_Point1( &RX10_TEMP1043/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1044 = sendGrids .distValue ; 
struct Region1 RX10_TEMP1045 = RX10_TEMP1044 .dReg ; 
const int RX10_TEMP1046 = searchPointInRegion1 ( RX10_TEMP1045 , RX10_TEMP1043 ) ; 
const int RX10_TEMP1047 = 0 ; 
const int RX10_TEMP1048 = RX10_TEMP1046 < RX10_TEMP1047 ; 
if ( RX10_TEMP1048 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1049 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1049 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1050 = getPlaceFromDist1 ( RX10_TEMP1044 , RX10_TEMP1046 ) ; 
const int RX10_TEMP1052 = /* here  */ 0 ; 
const int RX10_TEMP1053 = RX10_TEMP1050 != RX10_TEMP1052 ; 
if ( RX10_TEMP1053 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1051 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP1051 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendGrids , RX10_TEMP1046 , X10_TEMP404 ) ; 
const int X10_TEMP407 = 0 ; 
const int X10_TEMP408 = X10_TEMP407 ; 
struct Point1 RX10_TEMP1054  ; 
Point1_Point1( &RX10_TEMP1054/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1055 = recvCount .distValue ; 
struct Region1 RX10_TEMP1056 = RX10_TEMP1055 .dReg ; 
const int RX10_TEMP1057 = searchPointInRegion1 ( RX10_TEMP1056 , RX10_TEMP1054 ) ; 
const int RX10_TEMP1058 = 0 ; 
const int RX10_TEMP1059 = RX10_TEMP1057 < RX10_TEMP1058 ; 
if ( RX10_TEMP1059 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1060 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1060 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1061 = getPlaceFromDist1 ( RX10_TEMP1055 , RX10_TEMP1057 ) ; 
const int RX10_TEMP1063 = /* here  */ 0 ; 
const int RX10_TEMP1064 = RX10_TEMP1061 != RX10_TEMP1063 ; 
if ( RX10_TEMP1064 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1062 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP1062 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvCount , RX10_TEMP1057 , X10_TEMP408 ) ; 
const int X10_TEMP411 = 0 ; 
const int X10_TEMP412 = X10_TEMP411 ; 
struct Point1 RX10_TEMP1065  ; 
Point1_Point1( &RX10_TEMP1065/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1066 = recvGrids .distValue ; 
struct Region1 RX10_TEMP1067 = RX10_TEMP1066 .dReg ; 
const int RX10_TEMP1068 = searchPointInRegion1 ( RX10_TEMP1067 , RX10_TEMP1065 ) ; 
const int RX10_TEMP1069 = 0 ; 
const int RX10_TEMP1070 = RX10_TEMP1068 < RX10_TEMP1069 ; 
if ( RX10_TEMP1070 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1071 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1071 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1072 = getPlaceFromDist1 ( RX10_TEMP1066 , RX10_TEMP1068 ) ; 
const int RX10_TEMP1074 = /* here  */ 0 ; 
const int RX10_TEMP1075 = RX10_TEMP1072 != RX10_TEMP1074 ; 
if ( RX10_TEMP1075 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1073 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP1073 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvGrids , RX10_TEMP1068 , X10_TEMP412 ) ; 
} 

} 

} 

/*UpdatableVariableDeclaration*/int X10_TEMP413 = 0 ; 
do 
{ /* finish  */ 
{ struct Dist1 X10_TEMP415 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1077 = X10_TEMP415 .dReg ; 
const int RX10_TEMP1080 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1078 = RX10_TEMP1077 .regSize ; 
RX10_TEMP1078 = RX10_TEMP1078 - RX10_TEMP1080 ; const int SX10_TEMP105 = 1 ; 
const int RX10_TEMP1079 = RX10_TEMP1078 + SX10_TEMP105 ; 
for ( int SX10_TEMP106 = 0 ; SX10_TEMP106 < RX10_TEMP1079 ; SX10_TEMP106 ++ ) 
{ const int RX10_TEMP1076 = SX10_TEMP106 ; 
const int RX10_TEMP1081 = RX10_TEMP1076 ; 
struct Point1 X10_TEMP416 = regionOrdinalPoint1 ( RX10_TEMP1077 , RX10_TEMP1081 ) ; 
const int pl = X10_TEMP416 .f0 ; 
struct Region1 RX10_TEMP1082 = X10_TEMP415 .dReg ; 
const int RX10_TEMP1083 = searchPointInRegion1 ( RX10_TEMP1082 , X10_TEMP416 ) ; 
const int RX10_TEMP1084 = 0 ; 
const int RX10_TEMP1085 = RX10_TEMP1083 < RX10_TEMP1084 ; 
if ( RX10_TEMP1085 ) 
{ const char * RX10_TEMP1086 = "Point X10_TEMP416 not found in the distribution X10_TEMP415." ; 
fprintf(stderr, RX10_TEMP1086 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1087 = getPlaceFromDist1 ( X10_TEMP415 , RX10_TEMP1083 ) ; 
const int X10_TEMP417 = RX10_TEMP1087 ; 
/* async ( X10_TEMP417 )  */ 
{ const double X10_TEMP418 = pl * countAve ; 
const double X10_TEMP419 = 0.5; 
const double X10_TEMP421 = X10_TEMP418 + X10_TEMP419 ; 
const int expected = /*casting*/( int ) X10_TEMP421 ; 
const int X10_TEMP423 = 1 ; 
const int X10_TEMP425 = pl - X10_TEMP423 ; 
const double X10_TEMP426 = X10_TEMP425 * countAve ; 
const double X10_TEMP427 = 0.5; 
const double X10_TEMP429 = X10_TEMP426 + X10_TEMP427 ; 
const int X10_TEMP431 = /*casting*/( int ) X10_TEMP429 ; 
struct Point1 RX10_TEMP1088  ; 
Point1_Point1( &RX10_TEMP1088/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1089 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1090 = RX10_TEMP1089 .dReg ; 
const int RX10_TEMP1091 = searchPointInRegion1 ( RX10_TEMP1090 , RX10_TEMP1088 ) ; 
const int RX10_TEMP1092 = 0 ; 
const int RX10_TEMP1093 = RX10_TEMP1091 < RX10_TEMP1092 ; 
if ( RX10_TEMP1093 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1094 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1094 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1095 = getPlaceFromDist1 ( RX10_TEMP1089 , RX10_TEMP1091 ) ; 
const int RX10_TEMP1097 = /* here  */ 0 ; 
const int RX10_TEMP1098 = RX10_TEMP1095 != RX10_TEMP1097 ; 
if ( RX10_TEMP1098 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1096 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1096 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1099 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1091 ) ; 
const int X10_TEMP433 = RX10_TEMP1099 ; 
const int X10_TEMP435 = X10_TEMP431 - X10_TEMP433 ; 
struct Point1 RX10_TEMP1100  ; 
Point1_Point1( &RX10_TEMP1100/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1101 = sendCount .distValue ; 
struct Region1 RX10_TEMP1102 = RX10_TEMP1101 .dReg ; 
const int RX10_TEMP1103 = searchPointInRegion1 ( RX10_TEMP1102 , RX10_TEMP1100 ) ; 
const int RX10_TEMP1104 = 0 ; 
const int RX10_TEMP1105 = RX10_TEMP1103 < RX10_TEMP1104 ; 
if ( RX10_TEMP1105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1106 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1106 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1107 = getPlaceFromDist1 ( RX10_TEMP1101 , RX10_TEMP1103 ) ; 
const int RX10_TEMP1109 = /* here  */ 0 ; 
const int RX10_TEMP1110 = RX10_TEMP1107 != RX10_TEMP1109 ; 
if ( RX10_TEMP1110 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1108 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1108 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1111 = getRefArrayValue1int ( sendCount , RX10_TEMP1103 ) ; 
const int X10_TEMP436 = RX10_TEMP1111 ; 
const int X10_TEMP438 = X10_TEMP435 + X10_TEMP436 ; 
const int lDeficit = X10_TEMP438 ; 
const int X10_TEMP440 = 0 ; 
const int X10_TEMP442 = lDeficit > X10_TEMP440 ; 
if ( X10_TEMP442 ) 
{ const int X10_TEMP448 = 0 ; 
struct Point1 RX10_TEMP1112  ; 
Point1_Point1( &RX10_TEMP1112/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1113 = sendGrids .distValue ; 
struct Region1 RX10_TEMP1114 = RX10_TEMP1113 .dReg ; 
const int RX10_TEMP1115 = searchPointInRegion1 ( RX10_TEMP1114 , RX10_TEMP1112 ) ; 
const int RX10_TEMP1116 = 0 ; 
const int RX10_TEMP1117 = RX10_TEMP1115 < RX10_TEMP1116 ; 
if ( RX10_TEMP1117 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1118 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1118 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1119 = getPlaceFromDist1 ( RX10_TEMP1113 , RX10_TEMP1115 ) ; 
const int RX10_TEMP1121 = /* here  */ 0 ; 
const int RX10_TEMP1122 = RX10_TEMP1119 != RX10_TEMP1121 ; 
if ( RX10_TEMP1122 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1120 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP1120 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1123 = getRefArrayValue1int ( sendGrids , RX10_TEMP1115 ) ; 
const int X10_TEMP445 = RX10_TEMP1123 ; 
const int X10_TEMP446 = 1 ; 
const int X10_TEMP449 = X10_TEMP445 - X10_TEMP446 ; 
struct Region1 dSBuffer = createNewRegion1R ( X10_TEMP448 , X10_TEMP449 ) ; 
struct Region1 RX10_TEMP1124 = dSBuffer ; 
const int RX10_TEMP1141 = dSBuffer .regSize ; 
const int RX10_TEMP1142 = 1 ; 
const int RX10_TEMP1143 = RX10_TEMP1141 - RX10_TEMP1142 ; 
const int SX10_TEMP107 = 1 ; 
const int RX10_TEMP1140 = RX10_TEMP1143 + SX10_TEMP107 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP108 = (int *)calloc(RX10_TEMP1140,sizeof( int )); 
for ( int SX10_TEMP109 = 0 ; SX10_TEMP109 < RX10_TEMP1140 ; SX10_TEMP109 ++ ) 
{ const int RX10_TEMP1125 = SX10_TEMP109 ; 
const int RX10_TEMP1127 = RX10_TEMP1125 ; 
struct Point1 RX10_TEMP1126 = regionOrdinalPoint1 ( RX10_TEMP1124 , RX10_TEMP1127 ) ; 
const int i = RX10_TEMP1126 .f0 ; 
struct Point2 RX10_TEMP1128  ; 
Point2_Point2( &RX10_TEMP1128/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1129 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP1130 = RX10_TEMP1129 .dReg ; 
const int RX10_TEMP1131 = searchPointInRegion2 ( RX10_TEMP1130 , RX10_TEMP1128 ) ; 
const int RX10_TEMP1132 = 0 ; 
const int RX10_TEMP1133 = RX10_TEMP1131 < RX10_TEMP1132 ; 
if ( RX10_TEMP1133 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1134 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1134 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1135 = getPlaceFromDist2 ( RX10_TEMP1129 , RX10_TEMP1131 ) ; 
const int RX10_TEMP1137 = /* here  */ 0 ; 
const int RX10_TEMP1138 = RX10_TEMP1135 != RX10_TEMP1137 ; 
if ( RX10_TEMP1138 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1136 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP1136 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1139 = getRefArrayValue2int ( sCountBuffer , RX10_TEMP1131 ) ; 
const int X10_TEMP454 = RX10_TEMP1139 ; 
SX10_TEMP108 [ RX10_TEMP1125 ] = X10_TEMP454 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1144 = SX10_TEMP108 ; 
struct intValArray1 RX10_TEMP1145  ; 
intValArray1_intValArray1( &RX10_TEMP1145/*Assignment*/, dSBuffer , RX10_TEMP1144 ) ; 
struct intValArray1 X10_TEMP455 = RX10_TEMP1145 ; 
struct intValArray1 sBuffer = X10_TEMP455 ; 
struct Point1 RX10_TEMP1146  ; 
Point1_Point1( &RX10_TEMP1146/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1147 = sendCount .distValue ; 
struct Region1 RX10_TEMP1148 = RX10_TEMP1147 .dReg ; 
const int RX10_TEMP1149 = searchPointInRegion1 ( RX10_TEMP1148 , RX10_TEMP1146 ) ; 
const int RX10_TEMP1150 = 0 ; 
const int RX10_TEMP1151 = RX10_TEMP1149 < RX10_TEMP1150 ; 
if ( RX10_TEMP1151 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1152 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1152 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1153 = getPlaceFromDist1 ( RX10_TEMP1147 , RX10_TEMP1149 ) ; 
const int RX10_TEMP1155 = /* here  */ 0 ; 
const int RX10_TEMP1156 = RX10_TEMP1153 != RX10_TEMP1155 ; 
if ( RX10_TEMP1156 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1154 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1154 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1157 = getRefArrayValue1int ( sendCount , RX10_TEMP1149 ) ; 
const int nCount = RX10_TEMP1157 ; 
struct Point1 RX10_TEMP1158  ; 
Point1_Point1( &RX10_TEMP1158/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1159 = sendGrids .distValue ; 
struct Region1 RX10_TEMP1160 = RX10_TEMP1159 .dReg ; 
const int RX10_TEMP1161 = searchPointInRegion1 ( RX10_TEMP1160 , RX10_TEMP1158 ) ; 
const int RX10_TEMP1162 = 0 ; 
const int RX10_TEMP1163 = RX10_TEMP1161 < RX10_TEMP1162 ; 
if ( RX10_TEMP1163 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1164 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1164 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1165 = getPlaceFromDist1 ( RX10_TEMP1159 , RX10_TEMP1161 ) ; 
const int RX10_TEMP1167 = /* here  */ 0 ; 
const int RX10_TEMP1168 = RX10_TEMP1165 != RX10_TEMP1167 ; 
if ( RX10_TEMP1168 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1166 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP1166 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1169 = getRefArrayValue1int ( sendGrids , RX10_TEMP1161 ) ; 
const int nGrids = RX10_TEMP1169 ; 
/* finish  */ 
{ const int X10_TEMP461 = /* here  */ 0 ; 
const int X10_TEMP463 = /* X10_TEMP461 . prev ( )  */ 0 ; 
/* async ( X10_TEMP463 )  */ 
{ const int X10_TEMP464 = /* here  */ 0 ; 
const int X10_TEMP466 = /* X10_TEMP464 . id  */ 0 ; 
const int X10_TEMP468 = nCount ; 
struct Point1 RX10_TEMP1170  ; 
Point1_Point1( &RX10_TEMP1170/*Assignment*/, X10_TEMP466 ) ; 
struct Dist1 RX10_TEMP1171 = recvCount .distValue ; 
struct Region1 RX10_TEMP1172 = RX10_TEMP1171 .dReg ; 
const int RX10_TEMP1173 = searchPointInRegion1 ( RX10_TEMP1172 , RX10_TEMP1170 ) ; 
const int RX10_TEMP1174 = 0 ; 
const int RX10_TEMP1175 = RX10_TEMP1173 < RX10_TEMP1174 ; 
if ( RX10_TEMP1175 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1176 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1176 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1177 = getPlaceFromDist1 ( RX10_TEMP1171 , RX10_TEMP1173 ) ; 
const int RX10_TEMP1179 = /* here  */ 0 ; 
const int RX10_TEMP1180 = RX10_TEMP1177 != RX10_TEMP1179 ; 
if ( RX10_TEMP1180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1178 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP1178 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvCount , RX10_TEMP1173 , X10_TEMP468 ) ; 
const int X10_TEMP469 = /* here  */ 0 ; 
const int X10_TEMP471 = /* X10_TEMP469 . id  */ 0 ; 
const int X10_TEMP473 = nGrids ; 
struct Point1 RX10_TEMP1181  ; 
Point1_Point1( &RX10_TEMP1181/*Assignment*/, X10_TEMP471 ) ; 
struct Dist1 RX10_TEMP1182 = recvGrids .distValue ; 
struct Region1 RX10_TEMP1183 = RX10_TEMP1182 .dReg ; 
const int RX10_TEMP1184 = searchPointInRegion1 ( RX10_TEMP1183 , RX10_TEMP1181 ) ; 
const int RX10_TEMP1185 = 0 ; 
const int RX10_TEMP1186 = RX10_TEMP1184 < RX10_TEMP1185 ; 
if ( RX10_TEMP1186 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1187 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1187 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1188 = getPlaceFromDist1 ( RX10_TEMP1182 , RX10_TEMP1184 ) ; 
const int RX10_TEMP1190 = /* here  */ 0 ; 
const int RX10_TEMP1191 = RX10_TEMP1188 != RX10_TEMP1190 ; 
if ( RX10_TEMP1191 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1189 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP1189 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( recvGrids , RX10_TEMP1184 , X10_TEMP473 ) ; 
const int X10_TEMP475 = /* here  */ 0 ; 
const int RX10_TEMP1196 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1194 = dSBuffer .regSize ; 
RX10_TEMP1194 = RX10_TEMP1194 - RX10_TEMP1196 ; const int SX10_TEMP110 = 1 ; 
const int RX10_TEMP1195 = RX10_TEMP1194 + SX10_TEMP110 ; 
for ( int SX10_TEMP111 = 0 ; SX10_TEMP111 < RX10_TEMP1195 ; SX10_TEMP111 ++ ) 
{ const int RX10_TEMP1192 = SX10_TEMP111 ; 
const int RX10_TEMP1197 = RX10_TEMP1192 ; 
struct Point1 RX10_TEMP1193 = regionOrdinalPoint1 ( dSBuffer , RX10_TEMP1197 ) ; 
const int i = RX10_TEMP1193 .f0 ; 
/* async ( X10_TEMP475 )  */ 
{ const int X10_TEMP476 = /* here  */ 0 ; 
const int X10_TEMP479 = /* X10_TEMP476 . id  */ 0 ; 
struct Point1 RX10_TEMP1198  ; 
Point1_Point1( &RX10_TEMP1198/*Assignment*/, i ) ; 
struct Region1 RX10_TEMP1199 = sBuffer .regionValue ; 
const int RX10_TEMP1200 = searchPointInRegion1 ( RX10_TEMP1199 , RX10_TEMP1198 ) ; 
const int RX10_TEMP1201 = 0 ; 
const int RX10_TEMP1202 = RX10_TEMP1200 < RX10_TEMP1201 ; 
if ( RX10_TEMP1202 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1203 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1203 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ int * const RX10_TEMP1204 = sBuffer .contents ; 
const int X10_TEMP482 = RX10_TEMP1204 [ RX10_TEMP1200 ] 
; 
const int X10_TEMP483 = X10_TEMP482 ; 
struct Point2 RX10_TEMP1205  ; 
Point2_Point2( &RX10_TEMP1205/*Assignment*/, X10_TEMP479 , i ) ; 
struct Dist2 RX10_TEMP1206 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP1207 = RX10_TEMP1206 .dReg ; 
const int RX10_TEMP1208 = searchPointInRegion2 ( RX10_TEMP1207 , RX10_TEMP1205 ) ; 
const int RX10_TEMP1209 = 0 ; 
const int RX10_TEMP1210 = RX10_TEMP1208 < RX10_TEMP1209 ; 
if ( RX10_TEMP1210 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1211 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1211 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1212 = getPlaceFromDist2 ( RX10_TEMP1206 , RX10_TEMP1208 ) ; 
const int RX10_TEMP1214 = /* here  */ 0 ; 
const int RX10_TEMP1215 = RX10_TEMP1212 != RX10_TEMP1214 ; 
if ( RX10_TEMP1215 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1213 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP1213 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( rCountBuffer , RX10_TEMP1208 , X10_TEMP483 ) ; 
} 

} 

} 

} 

} 

} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP485 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1217 = X10_TEMP485 .dReg ; 
const int RX10_TEMP1220 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1218 = RX10_TEMP1217 .regSize ; 
RX10_TEMP1218 = RX10_TEMP1218 - RX10_TEMP1220 ; const int SX10_TEMP112 = 1 ; 
const int RX10_TEMP1219 = RX10_TEMP1218 + SX10_TEMP112 ; 
for ( int SX10_TEMP113 = 0 ; SX10_TEMP113 < RX10_TEMP1219 ; SX10_TEMP113 ++ ) 
{ const int RX10_TEMP1216 = SX10_TEMP113 ; 
const int RX10_TEMP1221 = RX10_TEMP1216 ; 
struct Point1 X10_TEMP486 = regionOrdinalPoint1 ( RX10_TEMP1217 , RX10_TEMP1221 ) ; 
const int pl = X10_TEMP486 .f0 ; 
struct Region1 RX10_TEMP1222 = X10_TEMP485 .dReg ; 
const int RX10_TEMP1223 = searchPointInRegion1 ( RX10_TEMP1222 , X10_TEMP486 ) ; 
const int RX10_TEMP1224 = 0 ; 
const int RX10_TEMP1225 = RX10_TEMP1223 < RX10_TEMP1224 ; 
if ( RX10_TEMP1225 ) 
{ const char * RX10_TEMP1226 = "Point X10_TEMP486 not found in the distribution X10_TEMP485." ; 
fprintf(stderr, RX10_TEMP1226 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1227 = getPlaceFromDist1 ( X10_TEMP485 , RX10_TEMP1223 ) ; 
const int X10_TEMP487 = RX10_TEMP1227 ; 
/* async ( X10_TEMP487 )  */ 
{ const int X10_TEMP490 = 0 ; 
const int X10_TEMP491 = X10_TEMP490 ; 
struct Point1 RX10_TEMP1228  ; 
Point1_Point1( &RX10_TEMP1228/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1229 = finished .distValue ; 
struct Region1 RX10_TEMP1230 = RX10_TEMP1229 .dReg ; 
const int RX10_TEMP1231 = searchPointInRegion1 ( RX10_TEMP1230 , RX10_TEMP1228 ) ; 
const int RX10_TEMP1232 = 0 ; 
const int RX10_TEMP1233 = RX10_TEMP1231 < RX10_TEMP1232 ; 
if ( RX10_TEMP1233 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1234 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1234 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1235 = getPlaceFromDist1 ( RX10_TEMP1229 , RX10_TEMP1231 ) ; 
const int RX10_TEMP1237 = /* here  */ 0 ; 
const int RX10_TEMP1238 = RX10_TEMP1235 != RX10_TEMP1237 ; 
if ( RX10_TEMP1238 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1236 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1236 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP1231 , X10_TEMP491 ) ; 
const double X10_TEMP492 = pl * countAve ; 
const double X10_TEMP493 = 0.5; 
const double X10_TEMP495 = X10_TEMP492 + X10_TEMP493 ; 
const int expected1 = /*casting*/( int ) X10_TEMP495 ; 
const int X10_TEMP497 = 1 ; 
const int X10_TEMP499 = pl - X10_TEMP497 ; 
const double X10_TEMP500 = X10_TEMP499 * countAve ; 
const double X10_TEMP501 = 0.5; 
const double X10_TEMP503 = X10_TEMP500 + X10_TEMP501 ; 
const int expected2 = /*casting*/( int ) X10_TEMP503 ; 
struct Point1 RX10_TEMP1239  ; 
Point1_Point1( &RX10_TEMP1239/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1240 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1241 = RX10_TEMP1240 .dReg ; 
const int RX10_TEMP1242 = searchPointInRegion1 ( RX10_TEMP1241 , RX10_TEMP1239 ) ; 
const int RX10_TEMP1243 = 0 ; 
const int RX10_TEMP1244 = RX10_TEMP1242 < RX10_TEMP1243 ; 
if ( RX10_TEMP1244 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1245 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1245 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1246 = getPlaceFromDist1 ( RX10_TEMP1240 , RX10_TEMP1242 ) ; 
const int RX10_TEMP1248 = /* here  */ 0 ; 
const int RX10_TEMP1249 = RX10_TEMP1246 != RX10_TEMP1248 ; 
if ( RX10_TEMP1249 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1247 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1247 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1250 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1242 ) ; 
const int X10_TEMP506 = RX10_TEMP1250 ; 
const int X10_TEMP508 = expected2 - X10_TEMP506 ; 
struct Point1 RX10_TEMP1251  ; 
Point1_Point1( &RX10_TEMP1251/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1252 = sendCount .distValue ; 
struct Region1 RX10_TEMP1253 = RX10_TEMP1252 .dReg ; 
const int RX10_TEMP1254 = searchPointInRegion1 ( RX10_TEMP1253 , RX10_TEMP1251 ) ; 
const int RX10_TEMP1255 = 0 ; 
const int RX10_TEMP1256 = RX10_TEMP1254 < RX10_TEMP1255 ; 
if ( RX10_TEMP1256 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1257 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1257 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1258 = getPlaceFromDist1 ( RX10_TEMP1252 , RX10_TEMP1254 ) ; 
const int RX10_TEMP1260 = /* here  */ 0 ; 
const int RX10_TEMP1261 = RX10_TEMP1258 != RX10_TEMP1260 ; 
if ( RX10_TEMP1261 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1259 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1259 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1262 = getRefArrayValue1int ( sendCount , RX10_TEMP1254 ) ; 
const int X10_TEMP509 = RX10_TEMP1262 ; 
const int lDeficit = X10_TEMP508 + X10_TEMP509 ; 
struct Point1 RX10_TEMP1263  ; 
Point1_Point1( &RX10_TEMP1263/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1264 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1265 = RX10_TEMP1264 .dReg ; 
const int RX10_TEMP1266 = searchPointInRegion1 ( RX10_TEMP1265 , RX10_TEMP1263 ) ; 
const int RX10_TEMP1267 = 0 ; 
const int RX10_TEMP1268 = RX10_TEMP1266 < RX10_TEMP1267 ; 
if ( RX10_TEMP1268 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1269 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1269 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1270 = getPlaceFromDist1 ( RX10_TEMP1264 , RX10_TEMP1266 ) ; 
const int RX10_TEMP1272 = /* here  */ 0 ; 
const int RX10_TEMP1273 = RX10_TEMP1270 != RX10_TEMP1272 ; 
if ( RX10_TEMP1273 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1271 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1271 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1274 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1266 ) ; 
const int X10_TEMP512 = RX10_TEMP1274 ; 
const int rDeficit = X10_TEMP512 - expected1 ; 
struct Point1 RX10_TEMP1275  ; 
Point1_Point1( &RX10_TEMP1275/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1276 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1277 = RX10_TEMP1276 .dReg ; 
const int RX10_TEMP1278 = searchPointInRegion1 ( RX10_TEMP1277 , RX10_TEMP1275 ) ; 
const int RX10_TEMP1279 = 0 ; 
const int RX10_TEMP1280 = RX10_TEMP1278 < RX10_TEMP1279 ; 
if ( RX10_TEMP1280 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1281 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1281 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1282 = getPlaceFromDist1 ( RX10_TEMP1276 , RX10_TEMP1278 ) ; 
const int RX10_TEMP1284 = /* here  */ 0 ; 
const int RX10_TEMP1285 = RX10_TEMP1282 != RX10_TEMP1284 ; 
if ( RX10_TEMP1285 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1283 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1283 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1286 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1278 ) ; 
const int X10_TEMP515 = RX10_TEMP1286 ; 
const int X10_TEMP517 = X10_TEMP515 < expected1 ; 
if ( X10_TEMP517 ) 
{ struct Point1 RX10_TEMP1287  ; 
Point1_Point1( &RX10_TEMP1287/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1288 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1289 = RX10_TEMP1288 .dReg ; 
const int RX10_TEMP1290 = searchPointInRegion1 ( RX10_TEMP1289 , RX10_TEMP1287 ) ; 
const int RX10_TEMP1291 = 0 ; 
const int RX10_TEMP1292 = RX10_TEMP1290 < RX10_TEMP1291 ; 
if ( RX10_TEMP1292 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1293 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1293 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1294 = getPlaceFromDist1 ( RX10_TEMP1288 , RX10_TEMP1290 ) ; 
const int RX10_TEMP1296 = /* here  */ 0 ; 
const int RX10_TEMP1297 = RX10_TEMP1294 != RX10_TEMP1296 ; 
if ( RX10_TEMP1297 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1295 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1295 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1298 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1290 ) ; 
const int X10_TEMP520 = RX10_TEMP1298 ; 
struct Point1 RX10_TEMP1299  ; 
Point1_Point1( &RX10_TEMP1299/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1300 = recvCount .distValue ; 
struct Region1 RX10_TEMP1301 = RX10_TEMP1300 .dReg ; 
const int RX10_TEMP1302 = searchPointInRegion1 ( RX10_TEMP1301 , RX10_TEMP1299 ) ; 
const int RX10_TEMP1303 = 0 ; 
const int RX10_TEMP1304 = RX10_TEMP1302 < RX10_TEMP1303 ; 
if ( RX10_TEMP1304 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1305 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1305 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1306 = getPlaceFromDist1 ( RX10_TEMP1300 , RX10_TEMP1302 ) ; 
const int RX10_TEMP1308 = /* here  */ 0 ; 
const int RX10_TEMP1309 = RX10_TEMP1306 != RX10_TEMP1308 ; 
if ( RX10_TEMP1309 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1307 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP1307 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1310 = getRefArrayValue1int ( recvCount , RX10_TEMP1302 ) ; 
const int X10_TEMP521 = RX10_TEMP1310 ; 
const int X10_TEMP522 = X10_TEMP520 + X10_TEMP521 ; 
const int X10_TEMP524 = X10_TEMP522 >= expected1 ; 
if ( X10_TEMP524 ) 
{ struct Point1 RX10_TEMP1311  ; 
Point1_Point1( &RX10_TEMP1311/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1312 = recvGrids .distValue ; 
struct Region1 RX10_TEMP1313 = RX10_TEMP1312 .dReg ; 
const int RX10_TEMP1314 = searchPointInRegion1 ( RX10_TEMP1313 , RX10_TEMP1311 ) ; 
const int RX10_TEMP1315 = 0 ; 
const int RX10_TEMP1316 = RX10_TEMP1314 < RX10_TEMP1315 ; 
if ( RX10_TEMP1316 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1317 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1317 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1318 = getPlaceFromDist1 ( RX10_TEMP1312 , RX10_TEMP1314 ) ; 
const int RX10_TEMP1320 = /* here  */ 0 ; 
const int RX10_TEMP1321 = RX10_TEMP1318 != RX10_TEMP1320 ; 
if ( RX10_TEMP1321 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1319 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP1319 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1322 = getRefArrayValue1int ( recvGrids , RX10_TEMP1314 ) ; 
const int gsize = RX10_TEMP1322 ; 
/*UpdatableVariableDeclaration*/int oldTotal = 0 ; 
/*UpdatableVariableDeclaration*/int total = 0 ; 
/*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP530 = 0 ; 
do 
{ oldTotal = total ; struct Point2 RX10_TEMP1323  ; 
Point2_Point2( &RX10_TEMP1323/*Assignment*/, pl , i ) ; 
struct Dist2 RX10_TEMP1324 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP1325 = RX10_TEMP1324 .dReg ; 
const int RX10_TEMP1326 = searchPointInRegion2 ( RX10_TEMP1325 , RX10_TEMP1323 ) ; 
const int RX10_TEMP1327 = 0 ; 
const int RX10_TEMP1328 = RX10_TEMP1326 < RX10_TEMP1327 ; 
if ( RX10_TEMP1328 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1329 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1329 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1330 = getPlaceFromDist2 ( RX10_TEMP1324 , RX10_TEMP1326 ) ; 
const int RX10_TEMP1332 = /* here  */ 0 ; 
const int RX10_TEMP1333 = RX10_TEMP1330 != RX10_TEMP1332 ; 
if ( RX10_TEMP1333 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1331 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP1331 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1334 = getRefArrayValue2int ( rCountBuffer , RX10_TEMP1326 ) ; 
const int X10_TEMP534 = RX10_TEMP1334 ; 
const int X10_TEMP536 = total + X10_TEMP534 ; 
total = X10_TEMP536 ; const int X10_TEMP537 = i ; 
const int X10_TEMP538 = 1 ; 
i = i + X10_TEMP538 ; const int X10_TEMP539 = 0 ; 
const int X10_TEMP540 = X10_TEMP539 - rDeficit ; 
const int X10_TEMP541 = total < X10_TEMP540 ; 
const int X10_TEMP542 = i < gsize ; 
X10_TEMP530 = X10_TEMP541 && X10_TEMP542 ; } 
while ( X10_TEMP530 ) ; 
const int X10_TEMP544 = 1 ; 
const int X10_TEMP557 = i - X10_TEMP544 ; 
const int X10_TEMP545 = 0 ; 
const int X10_TEMP546 = X10_TEMP545 - rDeficit ; 
const int X10_TEMP548 = X10_TEMP546 - oldTotal ; 
const double X10_TEMP550 = /*casting*/( double ) X10_TEMP548 ; 
const int X10_TEMP552 = total - oldTotal ; 
const double X10_TEMP554 = /*casting*/( double ) X10_TEMP552 ; 
const double X10_TEMP556 = X10_TEMP550 / X10_TEMP554 ; 
const double X10_TEMP559 = X10_TEMP557 + X10_TEMP556 ; 
const int offset = /*casting*/( int ) X10_TEMP559 ; 
struct Point1 RX10_TEMP1335  ; 
Point1_Point1( &RX10_TEMP1335/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1336 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP1337 = RX10_TEMP1336 .dReg ; 
const int RX10_TEMP1338 = searchPointInRegion1 ( RX10_TEMP1337 , RX10_TEMP1335 ) ; 
const int RX10_TEMP1339 = 0 ; 
const int RX10_TEMP1340 = RX10_TEMP1338 < RX10_TEMP1339 ; 
if ( RX10_TEMP1340 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1341 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1341 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1342 = getPlaceFromDist1 ( RX10_TEMP1336 , RX10_TEMP1338 ) ; 
const int RX10_TEMP1344 = /* here  */ 0 ; 
const int RX10_TEMP1345 = RX10_TEMP1342 != RX10_TEMP1344 ; 
if ( RX10_TEMP1345 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1343 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP1343 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1346 = getRefArrayValue1int ( runningGTotals , RX10_TEMP1338 ) ; 
const int X10_TEMP563 = RX10_TEMP1346 ; 
const double X10_TEMP565 = X10_TEMP563 + offset ; 
const double X10_TEMP566 = X10_TEMP565 ; 
struct Point1 RX10_TEMP1347  ; 
Point1_Point1( &RX10_TEMP1347/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1348 = border .distValue ; 
struct Region1 RX10_TEMP1349 = RX10_TEMP1348 .dReg ; 
const int RX10_TEMP1350 = searchPointInRegion1 ( RX10_TEMP1349 , RX10_TEMP1347 ) ; 
const int RX10_TEMP1351 = 0 ; 
const int RX10_TEMP1352 = RX10_TEMP1350 < RX10_TEMP1351 ; 
if ( RX10_TEMP1352 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1353 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1353 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1354 = getPlaceFromDist1 ( RX10_TEMP1348 , RX10_TEMP1350 ) ; 
const int RX10_TEMP1356 = /* here  */ 0 ; 
const int RX10_TEMP1357 = RX10_TEMP1354 != RX10_TEMP1356 ; 
if ( RX10_TEMP1357 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1355 = "Bad place access for array border" ; 
fprintf(stderr, RX10_TEMP1355 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( border , RX10_TEMP1350 , X10_TEMP566 ) ; 
} 
else 
{ struct Point1 RX10_TEMP1358  ; 
Point1_Point1( &RX10_TEMP1358/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1359 = finished .distValue ; 
struct Region1 RX10_TEMP1360 = RX10_TEMP1359 .dReg ; 
const int RX10_TEMP1361 = searchPointInRegion1 ( RX10_TEMP1360 , RX10_TEMP1358 ) ; 
const int RX10_TEMP1362 = 0 ; 
const int RX10_TEMP1363 = RX10_TEMP1361 < RX10_TEMP1362 ; 
if ( RX10_TEMP1363 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1364 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1364 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1365 = getPlaceFromDist1 ( RX10_TEMP1359 , RX10_TEMP1361 ) ; 
const int RX10_TEMP1367 = /* here  */ 0 ; 
const int RX10_TEMP1368 = RX10_TEMP1365 != RX10_TEMP1367 ; 
if ( RX10_TEMP1368 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1366 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1366 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1369 = getRefArrayValue1int ( finished , RX10_TEMP1361 ) ; 
const int X10_TEMP568 = RX10_TEMP1369 ; 
const int X10_TEMP569 = 1 ; 
struct Point1 RX10_TEMP1370  ; 
Point1_Point1( &RX10_TEMP1370/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1371 = finished .distValue ; 
struct Region1 RX10_TEMP1372 = RX10_TEMP1371 .dReg ; 
const int RX10_TEMP1373 = searchPointInRegion1 ( RX10_TEMP1372 , RX10_TEMP1370 ) ; 
const int RX10_TEMP1374 = 0 ; 
const int RX10_TEMP1375 = RX10_TEMP1373 < RX10_TEMP1374 ; 
if ( RX10_TEMP1375 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1376 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1376 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1377 = getPlaceFromDist1 ( RX10_TEMP1371 , RX10_TEMP1373 ) ; 
const int RX10_TEMP1379 = /* here  */ 0 ; 
const int RX10_TEMP1380 = RX10_TEMP1377 != RX10_TEMP1379 ; 
if ( RX10_TEMP1380 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1378 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1378 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1381 = getRefArrayValue1int ( finished , RX10_TEMP1373 ) ; 
const int X10_TEMP570 = RX10_TEMP1381 ; 
const int X10_TEMP571 = X10_TEMP570 + X10_TEMP569 ; 
struct Point1 RX10_TEMP1382  ; 
Point1_Point1( &RX10_TEMP1382/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1383 = finished .distValue ; 
struct Region1 RX10_TEMP1384 = RX10_TEMP1383 .dReg ; 
const int RX10_TEMP1385 = searchPointInRegion1 ( RX10_TEMP1384 , RX10_TEMP1382 ) ; 
const int RX10_TEMP1386 = 0 ; 
const int RX10_TEMP1387 = RX10_TEMP1385 < RX10_TEMP1386 ; 
if ( RX10_TEMP1387 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1388 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1388 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1389 = getPlaceFromDist1 ( RX10_TEMP1383 , RX10_TEMP1385 ) ; 
const int RX10_TEMP1391 = /* here  */ 0 ; 
const int RX10_TEMP1392 = RX10_TEMP1389 != RX10_TEMP1391 ; 
if ( RX10_TEMP1392 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1390 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1390 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP1385 , X10_TEMP571 ) ; 
} 


} 

struct Point1 RX10_TEMP1393  ; 
Point1_Point1( &RX10_TEMP1393/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1394 = sendCount .distValue ; 
struct Region1 RX10_TEMP1395 = RX10_TEMP1394 .dReg ; 
const int RX10_TEMP1396 = searchPointInRegion1 ( RX10_TEMP1395 , RX10_TEMP1393 ) ; 
const int RX10_TEMP1397 = 0 ; 
const int RX10_TEMP1398 = RX10_TEMP1396 < RX10_TEMP1397 ; 
if ( RX10_TEMP1398 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1399 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1399 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1400 = getPlaceFromDist1 ( RX10_TEMP1394 , RX10_TEMP1396 ) ; 
const int RX10_TEMP1402 = /* here  */ 0 ; 
const int RX10_TEMP1403 = RX10_TEMP1400 != RX10_TEMP1402 ; 
if ( RX10_TEMP1403 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1401 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1401 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1404 = getRefArrayValue1int ( sendCount , RX10_TEMP1396 ) ; 
const int X10_TEMP573 = RX10_TEMP1404 ; 
const int X10_TEMP575 = lDeficit > X10_TEMP573 ; 
if ( X10_TEMP575 ) 
{ struct Point1 RX10_TEMP1405  ; 
Point1_Point1( &RX10_TEMP1405/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1406 = finished .distValue ; 
struct Region1 RX10_TEMP1407 = RX10_TEMP1406 .dReg ; 
const int RX10_TEMP1408 = searchPointInRegion1 ( RX10_TEMP1407 , RX10_TEMP1405 ) ; 
const int RX10_TEMP1409 = 0 ; 
const int RX10_TEMP1410 = RX10_TEMP1408 < RX10_TEMP1409 ; 
if ( RX10_TEMP1410 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1411 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1411 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1412 = getPlaceFromDist1 ( RX10_TEMP1406 , RX10_TEMP1408 ) ; 
const int RX10_TEMP1414 = /* here  */ 0 ; 
const int RX10_TEMP1415 = RX10_TEMP1412 != RX10_TEMP1414 ; 
if ( RX10_TEMP1415 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1413 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1413 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1416 = getRefArrayValue1int ( finished , RX10_TEMP1408 ) ; 
const int X10_TEMP577 = RX10_TEMP1416 ; 
const int X10_TEMP578 = 1 ; 
struct Point1 RX10_TEMP1417  ; 
Point1_Point1( &RX10_TEMP1417/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1418 = finished .distValue ; 
struct Region1 RX10_TEMP1419 = RX10_TEMP1418 .dReg ; 
const int RX10_TEMP1420 = searchPointInRegion1 ( RX10_TEMP1419 , RX10_TEMP1417 ) ; 
const int RX10_TEMP1421 = 0 ; 
const int RX10_TEMP1422 = RX10_TEMP1420 < RX10_TEMP1421 ; 
if ( RX10_TEMP1422 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1423 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1423 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1424 = getPlaceFromDist1 ( RX10_TEMP1418 , RX10_TEMP1420 ) ; 
const int RX10_TEMP1426 = /* here  */ 0 ; 
const int RX10_TEMP1427 = RX10_TEMP1424 != RX10_TEMP1426 ; 
if ( RX10_TEMP1427 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1425 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1425 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1428 = getRefArrayValue1int ( finished , RX10_TEMP1420 ) ; 
const int X10_TEMP579 = RX10_TEMP1428 ; 
const int X10_TEMP580 = X10_TEMP579 + X10_TEMP578 ; 
struct Point1 RX10_TEMP1429  ; 
Point1_Point1( &RX10_TEMP1429/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1430 = finished .distValue ; 
struct Region1 RX10_TEMP1431 = RX10_TEMP1430 .dReg ; 
const int RX10_TEMP1432 = searchPointInRegion1 ( RX10_TEMP1431 , RX10_TEMP1429 ) ; 
const int RX10_TEMP1433 = 0 ; 
const int RX10_TEMP1434 = RX10_TEMP1432 < RX10_TEMP1433 ; 
if ( RX10_TEMP1434 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1435 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1435 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1436 = getPlaceFromDist1 ( RX10_TEMP1430 , RX10_TEMP1432 ) ; 
const int RX10_TEMP1438 = /* here  */ 0 ; 
const int RX10_TEMP1439 = RX10_TEMP1436 != RX10_TEMP1438 ; 
if ( RX10_TEMP1439 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1437 = "Bad place access for array finished" ; 
fprintf(stderr, RX10_TEMP1437 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( finished , RX10_TEMP1432 , X10_TEMP580 ) ; 
} 

const int X10_TEMP581 = /* here  */ 0 ; 
const int X10_TEMP582 = /* X10_TEMP581 . isLast ( )  */ 1 ; 
const int X10_TEMP584 = ! X10_TEMP582 ; 
if ( X10_TEMP584 ) 
{ struct Point1 RX10_TEMP1440  ; 
Point1_Point1( &RX10_TEMP1440/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1441 = recvCount .distValue ; 
struct Region1 RX10_TEMP1442 = RX10_TEMP1441 .dReg ; 
const int RX10_TEMP1443 = searchPointInRegion1 ( RX10_TEMP1442 , RX10_TEMP1440 ) ; 
const int RX10_TEMP1444 = 0 ; 
const int RX10_TEMP1445 = RX10_TEMP1443 < RX10_TEMP1444 ; 
if ( RX10_TEMP1445 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1446 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1446 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1447 = getPlaceFromDist1 ( RX10_TEMP1441 , RX10_TEMP1443 ) ; 
const int RX10_TEMP1449 = /* here  */ 0 ; 
const int RX10_TEMP1450 = RX10_TEMP1447 != RX10_TEMP1449 ; 
if ( RX10_TEMP1450 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1448 = "Bad place access for array recvCount" ; 
fprintf(stderr, RX10_TEMP1448 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1451 = getRefArrayValue1int ( recvCount , RX10_TEMP1443 ) ; 
const int count = RX10_TEMP1451 ; 
struct Point1 RX10_TEMP1452  ; 
Point1_Point1( &RX10_TEMP1452/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1453 = recvGrids .distValue ; 
struct Region1 RX10_TEMP1454 = RX10_TEMP1453 .dReg ; 
const int RX10_TEMP1455 = searchPointInRegion1 ( RX10_TEMP1454 , RX10_TEMP1452 ) ; 
const int RX10_TEMP1456 = 0 ; 
const int RX10_TEMP1457 = RX10_TEMP1455 < RX10_TEMP1456 ; 
if ( RX10_TEMP1457 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1458 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1458 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1459 = getPlaceFromDist1 ( RX10_TEMP1453 , RX10_TEMP1455 ) ; 
const int RX10_TEMP1461 = /* here  */ 0 ; 
const int RX10_TEMP1462 = RX10_TEMP1459 != RX10_TEMP1461 ; 
if ( RX10_TEMP1462 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1460 = "Bad place access for array recvGrids" ; 
fprintf(stderr, RX10_TEMP1460 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1463 = getRefArrayValue1int ( recvGrids , RX10_TEMP1455 ) ; 
const int gsize = RX10_TEMP1463 ; 
struct Point1 RX10_TEMP1464  ; 
Point1_Point1( &RX10_TEMP1464/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1465 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1466 = RX10_TEMP1465 .dReg ; 
const int RX10_TEMP1467 = searchPointInRegion1 ( RX10_TEMP1466 , RX10_TEMP1464 ) ; 
const int RX10_TEMP1468 = 0 ; 
const int RX10_TEMP1469 = RX10_TEMP1467 < RX10_TEMP1468 ; 
if ( RX10_TEMP1469 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1470 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1470 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1471 = getPlaceFromDist1 ( RX10_TEMP1465 , RX10_TEMP1467 ) ; 
const int RX10_TEMP1473 = /* here  */ 0 ; 
const int RX10_TEMP1474 = RX10_TEMP1471 != RX10_TEMP1473 ; 
if ( RX10_TEMP1474 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1472 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1472 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1475 = getRefArrayValue1int ( runningPTotals , RX10_TEMP1467 ) ; 
const int X10_TEMP591 = RX10_TEMP1475 ; 
const int X10_TEMP593 = X10_TEMP591 + count ; 
const int X10_TEMP594 = X10_TEMP593 ; 
struct Point1 RX10_TEMP1476  ; 
Point1_Point1( &RX10_TEMP1476/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1477 = runningPTotals .distValue ; 
struct Region1 RX10_TEMP1478 = RX10_TEMP1477 .dReg ; 
const int RX10_TEMP1479 = searchPointInRegion1 ( RX10_TEMP1478 , RX10_TEMP1476 ) ; 
const int RX10_TEMP1480 = 0 ; 
const int RX10_TEMP1481 = RX10_TEMP1479 < RX10_TEMP1480 ; 
if ( RX10_TEMP1481 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1482 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1482 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1483 = getPlaceFromDist1 ( RX10_TEMP1477 , RX10_TEMP1479 ) ; 
const int RX10_TEMP1485 = /* here  */ 0 ; 
const int RX10_TEMP1486 = RX10_TEMP1483 != RX10_TEMP1485 ; 
if ( RX10_TEMP1486 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1484 = "Bad place access for array runningPTotals" ; 
fprintf(stderr, RX10_TEMP1484 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningPTotals , RX10_TEMP1479 , X10_TEMP594 ) ; 
struct Point1 RX10_TEMP1487  ; 
Point1_Point1( &RX10_TEMP1487/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1488 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP1489 = RX10_TEMP1488 .dReg ; 
const int RX10_TEMP1490 = searchPointInRegion1 ( RX10_TEMP1489 , RX10_TEMP1487 ) ; 
const int RX10_TEMP1491 = 0 ; 
const int RX10_TEMP1492 = RX10_TEMP1490 < RX10_TEMP1491 ; 
if ( RX10_TEMP1492 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1493 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1493 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1494 = getPlaceFromDist1 ( RX10_TEMP1488 , RX10_TEMP1490 ) ; 
const int RX10_TEMP1496 = /* here  */ 0 ; 
const int RX10_TEMP1497 = RX10_TEMP1494 != RX10_TEMP1496 ; 
if ( RX10_TEMP1497 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1495 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP1495 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1498 = getRefArrayValue1int ( runningGTotals , RX10_TEMP1490 ) ; 
const int X10_TEMP597 = RX10_TEMP1498 ; 
const int X10_TEMP599 = X10_TEMP597 + gsize ; 
const int X10_TEMP600 = X10_TEMP599 ; 
struct Point1 RX10_TEMP1499  ; 
Point1_Point1( &RX10_TEMP1499/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1500 = runningGTotals .distValue ; 
struct Region1 RX10_TEMP1501 = RX10_TEMP1500 .dReg ; 
const int RX10_TEMP1502 = searchPointInRegion1 ( RX10_TEMP1501 , RX10_TEMP1499 ) ; 
const int RX10_TEMP1503 = 0 ; 
const int RX10_TEMP1504 = RX10_TEMP1502 < RX10_TEMP1503 ; 
if ( RX10_TEMP1504 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1505 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1505 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1506 = getPlaceFromDist1 ( RX10_TEMP1500 , RX10_TEMP1502 ) ; 
const int RX10_TEMP1508 = /* here  */ 0 ; 
const int RX10_TEMP1509 = RX10_TEMP1506 != RX10_TEMP1508 ; 
if ( RX10_TEMP1509 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1507 = "Bad place access for array runningGTotals" ; 
fprintf(stderr, RX10_TEMP1507 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( runningGTotals , RX10_TEMP1502 , X10_TEMP600 ) ; 
const int X10_TEMP603 = count ; 
struct Point1 RX10_TEMP1510  ; 
Point1_Point1( &RX10_TEMP1510/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1511 = sendCount .distValue ; 
struct Region1 RX10_TEMP1512 = RX10_TEMP1511 .dReg ; 
const int RX10_TEMP1513 = searchPointInRegion1 ( RX10_TEMP1512 , RX10_TEMP1510 ) ; 
const int RX10_TEMP1514 = 0 ; 
const int RX10_TEMP1515 = RX10_TEMP1513 < RX10_TEMP1514 ; 
if ( RX10_TEMP1515 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1516 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1516 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1517 = getPlaceFromDist1 ( RX10_TEMP1511 , RX10_TEMP1513 ) ; 
const int RX10_TEMP1519 = /* here  */ 0 ; 
const int RX10_TEMP1520 = RX10_TEMP1517 != RX10_TEMP1519 ; 
if ( RX10_TEMP1520 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1518 = "Bad place access for array sendCount" ; 
fprintf(stderr, RX10_TEMP1518 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendCount , RX10_TEMP1513 , X10_TEMP603 ) ; 
const int X10_TEMP606 = gsize ; 
struct Point1 RX10_TEMP1521  ; 
Point1_Point1( &RX10_TEMP1521/*Assignment*/, pl ) ; 
struct Dist1 RX10_TEMP1522 = sendGrids .distValue ; 
struct Region1 RX10_TEMP1523 = RX10_TEMP1522 .dReg ; 
const int RX10_TEMP1524 = searchPointInRegion1 ( RX10_TEMP1523 , RX10_TEMP1521 ) ; 
const int RX10_TEMP1525 = 0 ; 
const int RX10_TEMP1526 = RX10_TEMP1524 < RX10_TEMP1525 ; 
if ( RX10_TEMP1526 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1527 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1527 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1528 = getPlaceFromDist1 ( RX10_TEMP1522 , RX10_TEMP1524 ) ; 
const int RX10_TEMP1530 = /* here  */ 0 ; 
const int RX10_TEMP1531 = RX10_TEMP1528 != RX10_TEMP1530 ; 
if ( RX10_TEMP1531 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1529 = "Bad place access for array sendGrids" ; 
fprintf(stderr, RX10_TEMP1529 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( sendGrids , RX10_TEMP1524 , X10_TEMP606 ) ; 
const int X10_TEMP612 = 0 ; 
const int X10_TEMP610 = 1 ; 
const int X10_TEMP613 = gsize - X10_TEMP610 ; 
struct Region2 X10_TEMP615 = createNewRegion2RR ( pl , pl , X10_TEMP612 , X10_TEMP613 ) ; 
const int X10_TEMP616 = /* here  */ 0 ; 
const int RX10_TEMP1535 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1533 = X10_TEMP615 .regSize ; 
RX10_TEMP1533 = RX10_TEMP1533 - RX10_TEMP1535 ; const int SX10_TEMP114 = 1 ; 
const int RX10_TEMP1534 = RX10_TEMP1533 + SX10_TEMP114 ; 
for ( int SX10_TEMP115 = 0 ; SX10_TEMP115 < RX10_TEMP1534 ; SX10_TEMP115 ++ ) 
{ const int RX10_TEMP1532 = SX10_TEMP115 ; 
const int RX10_TEMP1536 = RX10_TEMP1532 ; 
struct Point2 pt = regionOrdinalPoint2 ( X10_TEMP615 , RX10_TEMP1536 ) ; 
/* async ( X10_TEMP616 )  */ 
{ struct Dist2 RX10_TEMP1537 = rCountBuffer .distValue ; 
struct Region2 RX10_TEMP1538 = RX10_TEMP1537 .dReg ; 
const int RX10_TEMP1539 = searchPointInRegion2 ( RX10_TEMP1538 , pt ) ; 
const int RX10_TEMP1540 = 0 ; 
const int RX10_TEMP1541 = RX10_TEMP1539 < RX10_TEMP1540 ; 
if ( RX10_TEMP1541 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1542 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1542 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1543 = getPlaceFromDist2 ( RX10_TEMP1537 , RX10_TEMP1539 ) ; 
const int RX10_TEMP1545 = /* here  */ 0 ; 
const int RX10_TEMP1546 = RX10_TEMP1543 != RX10_TEMP1545 ; 
if ( RX10_TEMP1546 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1544 = "Bad place access for array rCountBuffer" ; 
fprintf(stderr, RX10_TEMP1544 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1547 = getRefArrayValue2int ( rCountBuffer , RX10_TEMP1539 ) ; 
const int X10_TEMP620 = RX10_TEMP1547 ; 
const int X10_TEMP621 = X10_TEMP620 ; 
struct Dist2 RX10_TEMP1548 = sCountBuffer .distValue ; 
struct Region2 RX10_TEMP1549 = RX10_TEMP1548 .dReg ; 
const int RX10_TEMP1550 = searchPointInRegion2 ( RX10_TEMP1549 , pt ) ; 
const int RX10_TEMP1551 = 0 ; 
const int RX10_TEMP1552 = RX10_TEMP1550 < RX10_TEMP1551 ; 
if ( RX10_TEMP1552 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1553 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1553 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1554 = getPlaceFromDist2 ( RX10_TEMP1548 , RX10_TEMP1550 ) ; 
const int RX10_TEMP1556 = /* here  */ 0 ; 
const int RX10_TEMP1557 = RX10_TEMP1554 != RX10_TEMP1556 ; 
if ( RX10_TEMP1557 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1555 = "Bad place access for array sCountBuffer" ; 
fprintf(stderr, RX10_TEMP1555 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2int ( sCountBuffer , RX10_TEMP1550 , X10_TEMP621 ) ; 
} 

} 

} 

} 

} 

} 

const int X10_TEMP622 = intrefArraySum1 ( finished ) ; 
const int X10_TEMP623 = 0 ; 
X10_TEMP413 = X10_TEMP622 != X10_TEMP623 ; } 
while ( X10_TEMP413 ) ; 
const int pHere = /* here  */ 0 ; 
const int X10_TEMP628 = 0 ; 
const int X10_TEMP629 = /* place.MAX_PLACES  */ 1 ; 
struct Region1 X10_TEMP630 = createNewRegion1R ( X10_TEMP628 , X10_TEMP629 ) ; 
const int X10_TEMP631 = /* here  */ 0 ; 
struct Dist1 dBounds = getPlaceDist1 ( X10_TEMP630 , X10_TEMP631 ) ; 
struct Region1 RX10_TEMP1558 = dBounds .dReg ; 
const int RX10_TEMP1559 = 0 ; 
const int RX10_TEMP1560 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1561 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1561 = RX10_TEMP1561 - RX10_TEMP1560 ; const int SX10_TEMP116 = 1 ; 
const int RX10_TEMP1562 = RX10_TEMP1561 + SX10_TEMP116 ; 
const int SX10_TEMP117 = 1 ; 
const int RX10_TEMP1563 = RX10_TEMP1561 + SX10_TEMP117 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1564 = (intStub *)calloc(RX10_TEMP1563,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP119 = 0 ; SX10_TEMP119 < RX10_TEMP1562 ; SX10_TEMP119 ++ ) 
{ const int RX10_TEMP1565 = SX10_TEMP119 ; 
const int RX10_TEMP1566 = /* here  */ 0 ; 
const int RX10_TEMP1567 = RX10_TEMP1565 ; 
const int RX10_TEMP1568 = /* place.places ( RX10_TEMP1567 )  */ 0 
; 
const int RX10_TEMP1569 = getDistLocalCount1 ( dBounds , RX10_TEMP1567 ) ; 
const int RX10_TEMP1570 = RX10_TEMP1569 - RX10_TEMP1560 ; 
/* async ( RX10_TEMP1568 )  */ 
{ const int SX10_TEMP120 = 1 ; 
const int RX10_TEMP1571 = RX10_TEMP1570 + SX10_TEMP120 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP1572 = (int *)calloc(RX10_TEMP1571,sizeof( int )); 
struct intStub RX10_TEMP1573  ; 
intStub_intStub( &RX10_TEMP1573/*Assignment*/, RX10_TEMP1572 ) ; 
/* async ( RX10_TEMP1566 )  */ 
{ RX10_TEMP1564 [ RX10_TEMP1565 ] = RX10_TEMP1573 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP122 = (intStub *)calloc(RX10_TEMP1562,sizeof( intStub )); 
for ( int SX10_TEMP123 = 0 ; SX10_TEMP123 < RX10_TEMP1562 ; SX10_TEMP123 ++ ) 
{ const int RX10_TEMP1576 = SX10_TEMP123 ; 
struct intStub RX10_TEMP1575 = RX10_TEMP1564 [ RX10_TEMP1576 ] 
; 
SX10_TEMP122 [ RX10_TEMP1576 ] = RX10_TEMP1575 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1574 = SX10_TEMP122 ; 
struct intRefArray1 RX10_TEMP1577  ; 
intRefArray1_intRefArray1( &RX10_TEMP1577/*Assignment*/, dBounds , RX10_TEMP1574 ) ; 
struct intRefArray1 lowerbounds = RX10_TEMP1577 ; 
struct Region1 RX10_TEMP1578 = dBounds .dReg ; 
const int RX10_TEMP1579 = 0 ; 
const int RX10_TEMP1580 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1581 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP1581 = RX10_TEMP1581 - RX10_TEMP1580 ; const int SX10_TEMP124 = 1 ; 
const int RX10_TEMP1582 = RX10_TEMP1581 + SX10_TEMP124 ; 
const int SX10_TEMP125 = 1 ; 
const int RX10_TEMP1583 = RX10_TEMP1581 + SX10_TEMP125 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1584 = (intStub *)calloc(RX10_TEMP1583,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP127 = 0 ; SX10_TEMP127 < RX10_TEMP1582 ; SX10_TEMP127 ++ ) 
{ const int RX10_TEMP1585 = SX10_TEMP127 ; 
const int RX10_TEMP1586 = /* here  */ 0 ; 
const int RX10_TEMP1587 = RX10_TEMP1585 ; 
const int RX10_TEMP1588 = /* place.places ( RX10_TEMP1587 )  */ 0 
; 
const int RX10_TEMP1589 = getDistLocalCount1 ( dBounds , RX10_TEMP1587 ) ; 
const int RX10_TEMP1590 = RX10_TEMP1589 - RX10_TEMP1580 ; 
/* async ( RX10_TEMP1588 )  */ 
{ const int SX10_TEMP128 = 1 ; 
const int RX10_TEMP1591 = RX10_TEMP1590 + SX10_TEMP128 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP1592 = (int *)calloc(RX10_TEMP1591,sizeof( int )); 
struct intStub RX10_TEMP1593  ; 
intStub_intStub( &RX10_TEMP1593/*Assignment*/, RX10_TEMP1592 ) ; 
/* async ( RX10_TEMP1586 )  */ 
{ RX10_TEMP1584 [ RX10_TEMP1585 ] = RX10_TEMP1593 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP130 = (intStub *)calloc(RX10_TEMP1582,sizeof( intStub )); 
for ( int SX10_TEMP131 = 0 ; SX10_TEMP131 < RX10_TEMP1582 ; SX10_TEMP131 ++ ) 
{ const int RX10_TEMP1596 = SX10_TEMP131 ; 
struct intStub RX10_TEMP1595 = RX10_TEMP1584 [ RX10_TEMP1596 ] 
; 
SX10_TEMP130 [ RX10_TEMP1596 ] = RX10_TEMP1595 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP1594 = SX10_TEMP130 ; 
struct intRefArray1 RX10_TEMP1597  ; 
intRefArray1_intRefArray1( &RX10_TEMP1597/*Assignment*/, dBounds , RX10_TEMP1594 ) ; 
struct intRefArray1 upperbounds = RX10_TEMP1597 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP636 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1599 = X10_TEMP636 .dReg ; 
const int RX10_TEMP1602 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1600 = RX10_TEMP1599 .regSize ; 
RX10_TEMP1600 = RX10_TEMP1600 - RX10_TEMP1602 ; const int SX10_TEMP132 = 1 ; 
const int RX10_TEMP1601 = RX10_TEMP1600 + SX10_TEMP132 ; 
for ( int SX10_TEMP133 = 0 ; SX10_TEMP133 < RX10_TEMP1601 ; SX10_TEMP133 ++ ) 
{ const int RX10_TEMP1598 = SX10_TEMP133 ; 
const int RX10_TEMP1603 = RX10_TEMP1598 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1599 , RX10_TEMP1603 ) ; 
struct Region1 RX10_TEMP1604 = X10_TEMP636 .dReg ; 
const int RX10_TEMP1605 = searchPointInRegion1 ( RX10_TEMP1604 , pl ) ; 
const int RX10_TEMP1606 = 0 ; 
const int RX10_TEMP1607 = RX10_TEMP1605 < RX10_TEMP1606 ; 
if ( RX10_TEMP1607 ) 
{ const char * RX10_TEMP1608 = "Point pl not found in the distribution X10_TEMP636." ; 
fprintf(stderr, RX10_TEMP1608 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1609 = getPlaceFromDist1 ( X10_TEMP636 , RX10_TEMP1605 ) ; 
const int X10_TEMP637 = RX10_TEMP1609 ; 
/* async ( X10_TEMP637 )  */ 
{ struct Dist1 RX10_TEMP1610 = border .distValue ; 
struct Region1 RX10_TEMP1611 = RX10_TEMP1610 .dReg ; 
const int RX10_TEMP1612 = searchPointInRegion1 ( RX10_TEMP1611 , pl ) ; 
const int RX10_TEMP1613 = 0 ; 
const int RX10_TEMP1614 = RX10_TEMP1612 < RX10_TEMP1613 ; 
if ( RX10_TEMP1614 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1615 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1615 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1616 = getPlaceFromDist1 ( RX10_TEMP1610 , RX10_TEMP1612 ) ; 
const int RX10_TEMP1618 = /* here  */ 0 ; 
const int RX10_TEMP1619 = RX10_TEMP1616 != RX10_TEMP1618 ; 
if ( RX10_TEMP1619 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1617 = "Bad place access for array border" ; 
fprintf(stderr, RX10_TEMP1617 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP1620 = getRefArrayValue1double ( border , RX10_TEMP1612 ) ; 
const double edge = RX10_TEMP1620 ; 
/* async ( pHere )  */ 
{ const double X10_TEMP642 = 0.5; 
const double X10_TEMP644 = edge + X10_TEMP642 ; 
const int X10_TEMP646 = /*casting*/( int ) X10_TEMP644 ; 
const int X10_TEMP647 = X10_TEMP646 ; 
struct Dist1 RX10_TEMP1621 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1622 = RX10_TEMP1621 .dReg ; 
const int RX10_TEMP1623 = searchPointInRegion1 ( RX10_TEMP1622 , pl ) ; 
const int RX10_TEMP1624 = 0 ; 
const int RX10_TEMP1625 = RX10_TEMP1623 < RX10_TEMP1624 ; 
if ( RX10_TEMP1625 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1626 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1626 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1627 = getPlaceFromDist1 ( RX10_TEMP1621 , RX10_TEMP1623 ) ; 
const int RX10_TEMP1629 = /* here  */ 0 ; 
const int RX10_TEMP1630 = RX10_TEMP1627 != RX10_TEMP1629 ; 
if ( RX10_TEMP1630 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1628 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1628 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( lowerbounds , RX10_TEMP1623 , X10_TEMP647 ) ; 
} 

} 

} 

} 

const int X10_TEMP652 = 0 ; 
const int X10_TEMP649 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP650 = 1 ; 
const int X10_TEMP653 = X10_TEMP649 - X10_TEMP650 ; 
struct Region1 X10_TEMP655 = createNewRegion1R ( X10_TEMP652 , X10_TEMP653 ) ; 
const int RX10_TEMP1634 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1632 = X10_TEMP655 .regSize ; 
RX10_TEMP1632 = RX10_TEMP1632 - RX10_TEMP1634 ; const int SX10_TEMP134 = 1 ; 
const int RX10_TEMP1633 = RX10_TEMP1632 + SX10_TEMP134 ; 
for ( int SX10_TEMP135 = 0 ; SX10_TEMP135 < RX10_TEMP1633 ; SX10_TEMP135 ++ ) 
{ const int RX10_TEMP1631 = SX10_TEMP135 ; 
const int RX10_TEMP1635 = RX10_TEMP1631 ; 
struct Point1 i = regionOrdinalPoint1 ( X10_TEMP655 , RX10_TEMP1635 ) ; 
struct Dist1 RX10_TEMP1636 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1637 = RX10_TEMP1636 .dReg ; 
const int RX10_TEMP1638 = searchPointInRegion1 ( RX10_TEMP1637 , i ) ; 
const int RX10_TEMP1639 = 0 ; 
const int RX10_TEMP1640 = RX10_TEMP1638 < RX10_TEMP1639 ; 
if ( RX10_TEMP1640 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1641 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1641 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1642 = getPlaceFromDist1 ( RX10_TEMP1636 , RX10_TEMP1638 ) ; 
const int RX10_TEMP1644 = /* here  */ 0 ; 
const int RX10_TEMP1645 = RX10_TEMP1642 != RX10_TEMP1644 ; 
if ( RX10_TEMP1645 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1643 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1643 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1646 = getRefArrayValue1int ( lowerbounds , RX10_TEMP1638 ) ; 
const int lb = RX10_TEMP1646 ; 
const int X10_TEMP659 = i .f0 ; 
const int X10_TEMP660 = 1 ; 
const int X10_TEMP665 = X10_TEMP659 + X10_TEMP660 ; 
const int X10_TEMP662 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP663 = 1 ; 
const int X10_TEMP666 = X10_TEMP662 - X10_TEMP663 ; 
struct Region1 X10_TEMP668 = createNewRegion1R ( X10_TEMP665 , X10_TEMP666 ) ; 
const int RX10_TEMP1650 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1648 = X10_TEMP668 .regSize ; 
RX10_TEMP1648 = RX10_TEMP1648 - RX10_TEMP1650 ; const int SX10_TEMP136 = 1 ; 
const int RX10_TEMP1649 = RX10_TEMP1648 + SX10_TEMP136 ; 
for ( int SX10_TEMP137 = 0 ; SX10_TEMP137 < RX10_TEMP1649 ; SX10_TEMP137 ++ ) 
{ const int RX10_TEMP1647 = SX10_TEMP137 ; 
const int RX10_TEMP1651 = RX10_TEMP1647 ; 
struct Point1 j = regionOrdinalPoint1 ( X10_TEMP668 , RX10_TEMP1651 ) ; 
struct Dist1 RX10_TEMP1652 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1653 = RX10_TEMP1652 .dReg ; 
const int RX10_TEMP1654 = searchPointInRegion1 ( RX10_TEMP1653 , j ) ; 
const int RX10_TEMP1655 = 0 ; 
const int RX10_TEMP1656 = RX10_TEMP1654 < RX10_TEMP1655 ; 
if ( RX10_TEMP1656 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1657 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1657 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1658 = getPlaceFromDist1 ( RX10_TEMP1652 , RX10_TEMP1654 ) ; 
const int RX10_TEMP1660 = /* here  */ 0 ; 
const int RX10_TEMP1661 = RX10_TEMP1658 != RX10_TEMP1660 ; 
if ( RX10_TEMP1661 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1659 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1659 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1662 = getRefArrayValue1int ( lowerbounds , RX10_TEMP1654 ) ; 
const int X10_TEMP670 = RX10_TEMP1662 ; 
const int X10_TEMP672 = X10_TEMP670 <= lb ; 
if ( X10_TEMP672 ) 
{ const int X10_TEMP674 = 1 ; 
const int X10_TEMP676 = lb + X10_TEMP674 ; 
const int X10_TEMP677 = X10_TEMP676 ; 
struct Dist1 RX10_TEMP1663 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1664 = RX10_TEMP1663 .dReg ; 
const int RX10_TEMP1665 = searchPointInRegion1 ( RX10_TEMP1664 , j ) ; 
const int RX10_TEMP1666 = 0 ; 
const int RX10_TEMP1667 = RX10_TEMP1665 < RX10_TEMP1666 ; 
if ( RX10_TEMP1667 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1668 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1668 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1669 = getPlaceFromDist1 ( RX10_TEMP1663 , RX10_TEMP1665 ) ; 
const int RX10_TEMP1671 = /* here  */ 0 ; 
const int RX10_TEMP1672 = RX10_TEMP1669 != RX10_TEMP1671 ; 
if ( RX10_TEMP1672 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1670 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1670 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( lowerbounds , RX10_TEMP1665 , X10_TEMP677 ) ; 
} 

} 

} 

const int X10_TEMP682 = 0 ; 
const int X10_TEMP679 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP680 = 2 ; 
const int X10_TEMP683 = X10_TEMP679 - X10_TEMP680 ; 
struct Region1 X10_TEMP685 = createNewRegion1R ( X10_TEMP682 , X10_TEMP683 ) ; 
const int RX10_TEMP1676 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1674 = X10_TEMP685 .regSize ; 
RX10_TEMP1674 = RX10_TEMP1674 - RX10_TEMP1676 ; const int SX10_TEMP138 = 1 ; 
const int RX10_TEMP1675 = RX10_TEMP1674 + SX10_TEMP138 ; 
for ( int SX10_TEMP139 = 0 ; SX10_TEMP139 < RX10_TEMP1675 ; SX10_TEMP139 ++ ) 
{ const int RX10_TEMP1673 = SX10_TEMP139 ; 
const int RX10_TEMP1677 = RX10_TEMP1673 ; 
struct Point1 i = regionOrdinalPoint1 ( X10_TEMP685 , RX10_TEMP1677 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP688 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1678 = i .f0 ; 
RX10_TEMP1678 = RX10_TEMP1678 + X10_TEMP688 ; struct Point1 X10_TEMP690  ; 
Point1_Point1( &X10_TEMP690/*Assignment*/, RX10_TEMP1678 ) ; 
struct Dist1 RX10_TEMP1679 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1680 = RX10_TEMP1679 .dReg ; 
const int RX10_TEMP1681 = searchPointInRegion1 ( RX10_TEMP1680 , X10_TEMP690 ) ; 
const int RX10_TEMP1682 = 0 ; 
const int RX10_TEMP1683 = RX10_TEMP1681 < RX10_TEMP1682 ; 
if ( RX10_TEMP1683 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1684 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1684 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1685 = getPlaceFromDist1 ( RX10_TEMP1679 , RX10_TEMP1681 ) ; 
const int RX10_TEMP1687 = /* here  */ 0 ; 
const int RX10_TEMP1688 = RX10_TEMP1685 != RX10_TEMP1687 ; 
if ( RX10_TEMP1688 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1686 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1686 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1689 = getRefArrayValue1int ( lowerbounds , RX10_TEMP1681 ) ; 
const int X10_TEMP691 = RX10_TEMP1689 ; 
const int X10_TEMP692 = 1 ; 
const int X10_TEMP694 = X10_TEMP691 - X10_TEMP692 ; 
const int X10_TEMP695 = X10_TEMP694 ; 
struct Dist1 RX10_TEMP1690 = upperbounds .distValue ; 
struct Region1 RX10_TEMP1691 = RX10_TEMP1690 .dReg ; 
const int RX10_TEMP1692 = searchPointInRegion1 ( RX10_TEMP1691 , i ) ; 
const int RX10_TEMP1693 = 0 ; 
const int RX10_TEMP1694 = RX10_TEMP1692 < RX10_TEMP1693 ; 
if ( RX10_TEMP1694 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1695 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1695 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1696 = getPlaceFromDist1 ( RX10_TEMP1690 , RX10_TEMP1692 ) ; 
const int RX10_TEMP1698 = /* here  */ 0 ; 
const int RX10_TEMP1699 = RX10_TEMP1696 != RX10_TEMP1698 ; 
if ( RX10_TEMP1699 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1697 = "Bad place access for array upperbounds" ; 
fprintf(stderr, RX10_TEMP1697 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( upperbounds , RX10_TEMP1692 , X10_TEMP695 ) ; 
} 

const int X10_TEMP696 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP697 = 1 ; 
const int X10_TEMP699 = X10_TEMP696 - X10_TEMP697 ; 
const int X10_TEMP700 = 1 ; 
const int X10_TEMP702 = _LinearESOpenPIC2D_YLENGTH - X10_TEMP700 ; 
const int X10_TEMP703 = X10_TEMP702 ; 
struct Point1 RX10_TEMP1700  ; 
Point1_Point1( &RX10_TEMP1700/*Assignment*/, X10_TEMP699 ) ; 
struct Dist1 RX10_TEMP1701 = upperbounds .distValue ; 
struct Region1 RX10_TEMP1702 = RX10_TEMP1701 .dReg ; 
const int RX10_TEMP1703 = searchPointInRegion1 ( RX10_TEMP1702 , RX10_TEMP1700 ) ; 
const int RX10_TEMP1704 = 0 ; 
const int RX10_TEMP1705 = RX10_TEMP1703 < RX10_TEMP1704 ; 
if ( RX10_TEMP1705 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1706 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1706 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1707 = getPlaceFromDist1 ( RX10_TEMP1701 , RX10_TEMP1703 ) ; 
const int RX10_TEMP1709 = /* here  */ 0 ; 
const int RX10_TEMP1710 = RX10_TEMP1707 != RX10_TEMP1709 ; 
if ( RX10_TEMP1710 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1708 = "Bad place access for array upperbounds" ; 
fprintf(stderr, RX10_TEMP1708 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( upperbounds , RX10_TEMP1703 , X10_TEMP703 ) ; 
const int X10_TEMP704 = 0 ; 
const int X10_TEMP705 = 1 ; 
const int X10_TEMP706 = X10_TEMP704 - X10_TEMP705 ; 
struct Region2 X10_TEMP707 = createNewRegion2RR ( X10_TEMP704 , X10_TEMP706 , X10_TEMP704 , X10_TEMP706 ) ; 
const int X10_TEMP708 = /* here  */ 0 ; 
struct Dist2 X10_TEMP710 = getPlaceDist2 ( X10_TEMP707 , X10_TEMP708 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP710 ; 
struct Dist1 X10_TEMP713 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1712 = X10_TEMP713 .dReg ; 
const int RX10_TEMP1715 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP1713 = RX10_TEMP1712 .regSize ; 
RX10_TEMP1713 = RX10_TEMP1713 - RX10_TEMP1715 ; const int SX10_TEMP140 = 1 ; 
const int RX10_TEMP1714 = RX10_TEMP1713 + SX10_TEMP140 ; 
for ( int SX10_TEMP141 = 0 ; SX10_TEMP141 < RX10_TEMP1714 ; SX10_TEMP141 ++ ) 
{ const int RX10_TEMP1711 = SX10_TEMP141 ; 
const int RX10_TEMP1716 = RX10_TEMP1711 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1712 , RX10_TEMP1716 ) ; 
struct Dist1 X10_TEMP714 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1717 = X10_TEMP714 .dReg ; 
const int RX10_TEMP1718 = searchPointInRegion1 ( RX10_TEMP1717 , pl ) ; 
const int RX10_TEMP1719 = 0 ; 
const int RX10_TEMP1720 = RX10_TEMP1718 < RX10_TEMP1719 ; 
if ( RX10_TEMP1720 ) 
{ const char * RX10_TEMP1721 = "Point pl not found in the distribution X10_TEMP714." ; 
fprintf(stderr, RX10_TEMP1721 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1722 = getPlaceFromDist1 ( X10_TEMP714 , RX10_TEMP1718 ) ; 
const int p = RX10_TEMP1722 ; 
struct Dist1 RX10_TEMP1723 = lowerbounds .distValue ; 
struct Region1 RX10_TEMP1724 = RX10_TEMP1723 .dReg ; 
const int RX10_TEMP1725 = searchPointInRegion1 ( RX10_TEMP1724 , pl ) ; 
const int RX10_TEMP1726 = 0 ; 
const int RX10_TEMP1727 = RX10_TEMP1725 < RX10_TEMP1726 ; 
if ( RX10_TEMP1727 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1728 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1728 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1729 = getPlaceFromDist1 ( RX10_TEMP1723 , RX10_TEMP1725 ) ; 
const int RX10_TEMP1731 = /* here  */ 0 ; 
const int RX10_TEMP1732 = RX10_TEMP1729 != RX10_TEMP1731 ; 
if ( RX10_TEMP1732 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1730 = "Bad place access for array lowerbounds" ; 
fprintf(stderr, RX10_TEMP1730 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1733 = getRefArrayValue1int ( lowerbounds , RX10_TEMP1725 ) ; 
const int X10_TEMP721 = RX10_TEMP1733 ; 
struct Dist1 RX10_TEMP1734 = upperbounds .distValue ; 
struct Region1 RX10_TEMP1735 = RX10_TEMP1734 .dReg ; 
const int RX10_TEMP1736 = searchPointInRegion1 ( RX10_TEMP1735 , pl ) ; 
const int RX10_TEMP1737 = 0 ; 
const int RX10_TEMP1738 = RX10_TEMP1736 < RX10_TEMP1737 ; 
if ( RX10_TEMP1738 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1739 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1739 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1740 = getPlaceFromDist1 ( RX10_TEMP1734 , RX10_TEMP1736 ) ; 
const int RX10_TEMP1742 = /* here  */ 0 ; 
const int RX10_TEMP1743 = RX10_TEMP1740 != RX10_TEMP1742 ; 
if ( RX10_TEMP1743 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1741 = "Bad place access for array upperbounds" ; 
fprintf(stderr, RX10_TEMP1741 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1744 = getRefArrayValue1int ( upperbounds , RX10_TEMP1736 ) ; 
const int X10_TEMP722 = RX10_TEMP1744 ; 
struct Region2 X10_TEMP724 = createNewRegion2RA ( X10_TEMP721 , X10_TEMP722 , rRows ) ; 
struct Dist2 X10_TEMP726 = getPlaceDist2 ( X10_TEMP724 , p ) ; 
struct Dist2 X10_TEMP728 = unionDist2 ( dResult , X10_TEMP726 ) ; 
dResult = X10_TEMP728 ; } 

return dResult ; 
} 

ParticleRefArray1 /*static*/LinearESOpenPIC2D_sortParticles (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct ParticleRefArray1 const particles ,  struct Dist2 const dField ) 
{ struct Dist1 RX10_TEMP0 = particles .distValue ; 
struct Dist1 dParticles = RX10_TEMP0 ; 
struct Region1 RX10_TEMP1 = dParticles .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP7 = (ParticleStub *)calloc(RX10_TEMP6,sizeof( ParticleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount1 ( dParticles , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Particle * const RX10_TEMP15 = (Particle *)calloc(RX10_TEMP14,sizeof( Particle )); 
struct ParticleStub RX10_TEMP16  ; 
ParticleStub_ParticleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ParticleStub * const SX10_TEMP6 = (ParticleStub *)calloc(RX10_TEMP5,sizeof( ParticleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP5 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP7 ; 
struct ParticleStub RX10_TEMP18 = RX10_TEMP7 [ RX10_TEMP19 ] 
; 
SX10_TEMP6 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct ParticleStub * const RX10_TEMP17 = SX10_TEMP6 ; 
struct ParticleRefArray1 RX10_TEMP20  ; 
ParticleRefArray1_ParticleRefArray1( &RX10_TEMP20/*Assignment*/, dParticles , RX10_TEMP17 ) ; 
struct ParticleRefArray1 result = RX10_TEMP20 ; 
struct Region1 RX10_TEMP21 = dParticles .dReg ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP24 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP23 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP25 = RX10_TEMP24 + SX10_TEMP8 ; 
const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP24 + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP27 = (intStub *)calloc(RX10_TEMP26,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP25 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP28 = SX10_TEMP11 ; 
const int RX10_TEMP29 = /* here  */ 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 ; 
const int RX10_TEMP31 = /* place.places ( RX10_TEMP30 )  */ 0 
; 
const int RX10_TEMP32 = getDistLocalCount1 ( dParticles , RX10_TEMP30 ) ; 
const int RX10_TEMP33 = RX10_TEMP32 - RX10_TEMP23 ; 
/* async ( RX10_TEMP31 )  */ 
{ const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP34 = RX10_TEMP33 + SX10_TEMP12 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP35 = (int *)calloc(RX10_TEMP34,sizeof( int )); 
struct intStub RX10_TEMP36  ; 
intStub_intStub( &RX10_TEMP36/*Assignment*/, RX10_TEMP35 ) ; 
/* async ( RX10_TEMP29 )  */ 
{ RX10_TEMP27 [ RX10_TEMP28 ] = RX10_TEMP36 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP14 = (intStub *)calloc(RX10_TEMP25,sizeof( intStub )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP25 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP39 = SX10_TEMP15 ; 
struct intStub RX10_TEMP38 = RX10_TEMP27 [ RX10_TEMP39 ] 
; 
SX10_TEMP14 [ RX10_TEMP39 ] = RX10_TEMP38 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP37 = SX10_TEMP14 ; 
struct intRefArray1 RX10_TEMP40  ; 
intRefArray1_intRefArray1( &RX10_TEMP40/*Assignment*/, dParticles , RX10_TEMP37 ) ; 
struct intRefArray1 indices = RX10_TEMP40 ; 
const int X10_TEMP6 = 0 ; 
struct Dist1 dCount = X10Util_get2DDistRank ( dField , X10_TEMP6 ) ; 
struct Region1 RX10_TEMP41 = dCount .dReg ; 
const int RX10_TEMP42 = 0 ; 
const int RX10_TEMP43 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP44 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP44 = RX10_TEMP44 - RX10_TEMP43 ; const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP45 = RX10_TEMP44 + SX10_TEMP16 ; 
const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP44 + SX10_TEMP17 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP47 = (intStub *)calloc(RX10_TEMP46,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP45 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP48 = SX10_TEMP19 ; 
const int RX10_TEMP49 = /* here  */ 0 ; 
const int RX10_TEMP50 = RX10_TEMP48 ; 
const int RX10_TEMP51 = /* place.places ( RX10_TEMP50 )  */ 0 
; 
const int RX10_TEMP52 = getDistLocalCount1 ( dCount , RX10_TEMP50 ) ; 
const int RX10_TEMP53 = RX10_TEMP52 - RX10_TEMP43 ; 
/* async ( RX10_TEMP51 )  */ 
{ const int SX10_TEMP20 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP53 + SX10_TEMP20 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP21 = (int *)calloc(RX10_TEMP55,sizeof( int )); 
for ( int SX10_TEMP22 = 0 ; SX10_TEMP22 < RX10_TEMP55 ; SX10_TEMP22 ++ ) 
{ const int RX10_TEMP54 = SX10_TEMP22 ; 
const int X10_TEMP9 = 0 ; 
SX10_TEMP21 [ RX10_TEMP54 ] = X10_TEMP9 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP56 = SX10_TEMP21 ; 
struct intStub RX10_TEMP57  ; 
intStub_intStub( &RX10_TEMP57/*Assignment*/, RX10_TEMP56 ) ; 
/* async ( RX10_TEMP49 )  */ 
{ RX10_TEMP47 [ RX10_TEMP48 ] = RX10_TEMP57 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP23 = (intStub *)calloc(RX10_TEMP45,sizeof( intStub )); 
for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP45 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP60 = SX10_TEMP24 ; 
struct intStub RX10_TEMP59 = RX10_TEMP47 [ RX10_TEMP60 ] 
; 
SX10_TEMP23 [ RX10_TEMP60 ] = RX10_TEMP59 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP58 = SX10_TEMP23 ; 
struct intRefArray1 RX10_TEMP61  ; 
intRefArray1_intRefArray1( &RX10_TEMP61/*Assignment*/, dCount , RX10_TEMP58 ) ; 
struct intRefArray1 count = RX10_TEMP61 ; 
/* finish  */ 
{ struct Dist1 X10_TEMP12 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP63 = X10_TEMP12 .dReg ; 
const int RX10_TEMP66 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP64 = RX10_TEMP63 .regSize ; 
RX10_TEMP64 = RX10_TEMP64 - RX10_TEMP66 ; const int SX10_TEMP25 = 1 ; 
const int RX10_TEMP65 = RX10_TEMP64 + SX10_TEMP25 ; 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP65 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP26 ; 
const int RX10_TEMP67 = RX10_TEMP62 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP63 , RX10_TEMP67 ) ; 
struct Region1 RX10_TEMP68 = X10_TEMP12 .dReg ; 
const int RX10_TEMP69 = searchPointInRegion1 ( RX10_TEMP68 , pl ) ; 
const int RX10_TEMP70 = 0 ; 
const int RX10_TEMP71 = RX10_TEMP69 < RX10_TEMP70 ; 
if ( RX10_TEMP71 ) 
{ const char * RX10_TEMP72 = "Point pl not found in the distribution X10_TEMP12." ; 
fprintf(stderr, RX10_TEMP72 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP73 = getPlaceFromDist1 ( X10_TEMP12 , RX10_TEMP69 ) ; 
const int X10_TEMP13 = RX10_TEMP73 ; 
/* async ( X10_TEMP13 )  */ 
{ struct Dist1 RX10_TEMP74 = particles .distValue ; 
struct Dist1 dP = RX10_TEMP74 ; 
struct Region1 rLocalP = X10Util_get1DLRegion ( dP ) ; 
struct Region1 rLocalC = X10Util_get1DLRegion ( dCount ) ; 
struct Dist1 RX10_TEMP75 = particles .distValue ; 
struct Dist1 X10_TEMP19 = RX10_TEMP75 ; 
const int X10_TEMP20 = /* here  */ 0 ; 
struct Dist1 X10_TEMP22 = restrictDist1 ( X10_TEMP19 , X10_TEMP20 ) ; 
struct Region1 RX10_TEMP77 = X10_TEMP22 .dReg ; 
const int RX10_TEMP80 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP78 = RX10_TEMP77 .regSize ; 
RX10_TEMP78 = RX10_TEMP78 - RX10_TEMP80 ; const int SX10_TEMP27 = 1 ; 
const int RX10_TEMP79 = RX10_TEMP78 + SX10_TEMP27 ; 
for ( int SX10_TEMP28 = 0 ; SX10_TEMP28 < RX10_TEMP79 ; SX10_TEMP28 ++ ) 
{ const int RX10_TEMP76 = SX10_TEMP28 ; 
const int RX10_TEMP81 = RX10_TEMP76 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP77 , RX10_TEMP81 ) ; 
struct Dist1 RX10_TEMP82 = particles .distValue ; 
struct Region1 RX10_TEMP83 = RX10_TEMP82 .dReg ; 
const int RX10_TEMP84 = searchPointInRegion1 ( RX10_TEMP83 , pt ) ; 
const int RX10_TEMP85 = 0 ; 
const int RX10_TEMP86 = RX10_TEMP84 < RX10_TEMP85 ; 
if ( RX10_TEMP86 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP87 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP87 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP88 = getPlaceFromDist1 ( RX10_TEMP82 , RX10_TEMP84 ) ; 
const int RX10_TEMP90 = /* here  */ 0 ; 
const int RX10_TEMP91 = RX10_TEMP88 != RX10_TEMP90 ; 
if ( RX10_TEMP91 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP89 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP89 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP92 = getRefArrayValue1Particle ( particles , RX10_TEMP84 ) ; 
struct Particle X10_TEMP24 = RX10_TEMP92 ; 
const double X10_TEMP25 = Particle_getY ( X10_TEMP24 ) ; 
const int y = /*casting*/( int ) X10_TEMP25 ; 
struct Point1 RX10_TEMP93  ; 
Point1_Point1( &RX10_TEMP93/*Assignment*/, y ) ; 
struct Dist1 RX10_TEMP94 = count .distValue ; 
struct Region1 RX10_TEMP95 = RX10_TEMP94 .dReg ; 
const int RX10_TEMP96 = searchPointInRegion1 ( RX10_TEMP95 , RX10_TEMP93 ) ; 
const int RX10_TEMP97 = 0 ; 
const int RX10_TEMP98 = RX10_TEMP96 < RX10_TEMP97 ; 
if ( RX10_TEMP98 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP99 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP99 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP100 = getPlaceFromDist1 ( RX10_TEMP94 , RX10_TEMP96 ) ; 
const int RX10_TEMP102 = /* here  */ 0 ; 
const int RX10_TEMP103 = RX10_TEMP100 != RX10_TEMP102 ; 
if ( RX10_TEMP103 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP101 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP101 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP104 = getRefArrayValue1int ( count , RX10_TEMP96 ) ; 
const int X10_TEMP28 = RX10_TEMP104 ; 
const int X10_TEMP29 = 1 ; 
struct Point1 RX10_TEMP105  ; 
Point1_Point1( &RX10_TEMP105/*Assignment*/, y ) ; 
struct Dist1 RX10_TEMP106 = count .distValue ; 
struct Region1 RX10_TEMP107 = RX10_TEMP106 .dReg ; 
const int RX10_TEMP108 = searchPointInRegion1 ( RX10_TEMP107 , RX10_TEMP105 ) ; 
const int RX10_TEMP109 = 0 ; 
const int RX10_TEMP110 = RX10_TEMP108 < RX10_TEMP109 ; 
if ( RX10_TEMP110 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP111 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP111 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP112 = getPlaceFromDist1 ( RX10_TEMP106 , RX10_TEMP108 ) ; 
const int RX10_TEMP114 = /* here  */ 0 ; 
const int RX10_TEMP115 = RX10_TEMP112 != RX10_TEMP114 ; 
if ( RX10_TEMP115 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP113 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP113 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP116 = getRefArrayValue1int ( count , RX10_TEMP108 ) ; 
const int X10_TEMP30 = RX10_TEMP116 ; 
const int X10_TEMP31 = X10_TEMP30 + X10_TEMP29 ; 
struct Point1 RX10_TEMP117  ; 
Point1_Point1( &RX10_TEMP117/*Assignment*/, y ) ; 
struct Dist1 RX10_TEMP118 = count .distValue ; 
struct Region1 RX10_TEMP119 = RX10_TEMP118 .dReg ; 
const int RX10_TEMP120 = searchPointInRegion1 ( RX10_TEMP119 , RX10_TEMP117 ) ; 
const int RX10_TEMP121 = 0 ; 
const int RX10_TEMP122 = RX10_TEMP120 < RX10_TEMP121 ; 
if ( RX10_TEMP122 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP123 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP123 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP124 = getPlaceFromDist1 ( RX10_TEMP118 , RX10_TEMP120 ) ; 
const int RX10_TEMP126 = /* here  */ 0 ; 
const int RX10_TEMP127 = RX10_TEMP124 != RX10_TEMP126 ; 
if ( RX10_TEMP127 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP125 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP125 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( count , RX10_TEMP120 , X10_TEMP31 ) ; 
const int X10_TEMP34 = y ; 
struct Dist1 RX10_TEMP128 = indices .distValue ; 
struct Region1 RX10_TEMP129 = RX10_TEMP128 .dReg ; 
const int RX10_TEMP130 = searchPointInRegion1 ( RX10_TEMP129 , pt ) ; 
const int RX10_TEMP131 = 0 ; 
const int RX10_TEMP132 = RX10_TEMP130 < RX10_TEMP131 ; 
if ( RX10_TEMP132 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP133 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP133 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP134 = getPlaceFromDist1 ( RX10_TEMP128 , RX10_TEMP130 ) ; 
const int RX10_TEMP136 = /* here  */ 0 ; 
const int RX10_TEMP137 = RX10_TEMP134 != RX10_TEMP136 ; 
if ( RX10_TEMP137 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP135 = "Bad place access for array indices" ; 
fprintf(stderr, RX10_TEMP135 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( indices , RX10_TEMP130 , X10_TEMP34 ) ; 
} 

const int X10_TEMP35 = /* here  */ 0 ; 
struct Dist1 dLocalC = getPlaceDist1 ( rLocalC , X10_TEMP35 ) ; 
const int X10_TEMP37 = rLocalP .regSize ; 
const int X10_TEMP38 = 0 ; 
const int X10_TEMP40 = X10_TEMP37 > X10_TEMP38 ; 
const int X10_TEMP41 = X10_TEMP40 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP44 = 0 ; 
if ( X10_TEMP41 ) 
{ const int RX10_TEMP138 = rLocalP .regSize ; 
const int RX10_TEMP139 = 0 ; 
const int RX10_TEMP140 = RX10_TEMP138 <= RX10_TEMP139 ; 
if ( RX10_TEMP140 ) 
{ const char * RX10_TEMP141 = "Operation low() not defined on empty region rLocalP" ; 
fprintf(stderr, RX10_TEMP141 ) ; 
exit(EXIT_FAILURE);
} 

X10_TEMP44 = regionLow ( rLocalP ) ; } 

const int X10_TEMP45 = X10_TEMP44 ; 
/*UpdatableVariableDeclaration*/int offset = X10_TEMP45 ; 
struct Region1 RX10_TEMP142 = dLocalC .dReg ; 
const int RX10_TEMP143 = 0 ; 
const int RX10_TEMP144 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP145 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP145 = RX10_TEMP145 - RX10_TEMP144 ; const int SX10_TEMP29 = 1 ; 
const int RX10_TEMP146 = RX10_TEMP145 + SX10_TEMP29 ; 
const int SX10_TEMP30 = 1 ; 
const int RX10_TEMP147 = RX10_TEMP145 + SX10_TEMP30 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP148 = (intStub *)calloc(RX10_TEMP147,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP32 = 0 ; SX10_TEMP32 < RX10_TEMP146 ; SX10_TEMP32 ++ ) 
{ const int RX10_TEMP149 = SX10_TEMP32 ; 
const int RX10_TEMP150 = /* here  */ 0 ; 
const int RX10_TEMP151 = RX10_TEMP149 ; 
const int RX10_TEMP152 = /* place.places ( RX10_TEMP151 )  */ 0 
; 
const int RX10_TEMP153 = getDistLocalCount1 ( dLocalC , RX10_TEMP151 ) ; 
const int RX10_TEMP154 = RX10_TEMP153 - RX10_TEMP144 ; 
/* async ( RX10_TEMP152 )  */ 
{ const int SX10_TEMP33 = 1 ; 
const int RX10_TEMP155 = RX10_TEMP154 + SX10_TEMP33 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP156 = (int *)calloc(RX10_TEMP155,sizeof( int )); 
struct intStub RX10_TEMP157  ; 
intStub_intStub( &RX10_TEMP157/*Assignment*/, RX10_TEMP156 ) ; 
/* async ( RX10_TEMP150 )  */ 
{ RX10_TEMP148 [ RX10_TEMP149 ] = RX10_TEMP157 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP35 = (intStub *)calloc(RX10_TEMP146,sizeof( intStub )); 
for ( int SX10_TEMP36 = 0 ; SX10_TEMP36 < RX10_TEMP146 ; SX10_TEMP36 ++ ) 
{ const int RX10_TEMP160 = SX10_TEMP36 ; 
struct intStub RX10_TEMP159 = RX10_TEMP148 [ RX10_TEMP160 ] 
; 
SX10_TEMP35 [ RX10_TEMP160 ] = RX10_TEMP159 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP158 = SX10_TEMP35 ; 
struct intRefArray1 RX10_TEMP161  ; 
intRefArray1_intRefArray1( &RX10_TEMP161/*Assignment*/, dLocalC , RX10_TEMP158 ) ; 
/*UpdatableVariableDeclaration*/ struct intRefArray1 offsets = RX10_TEMP161 ; 
const int RX10_TEMP165 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP163 = rLocalC .regSize ; 
RX10_TEMP163 = RX10_TEMP163 - RX10_TEMP165 ; const int SX10_TEMP37 = 1 ; 
const int RX10_TEMP164 = RX10_TEMP163 + SX10_TEMP37 ; 
for ( int SX10_TEMP38 = 0 ; SX10_TEMP38 < RX10_TEMP164 ; SX10_TEMP38 ++ ) 
{ const int RX10_TEMP162 = SX10_TEMP38 ; 
const int RX10_TEMP166 = RX10_TEMP162 ; 
struct Point1 pt = regionOrdinalPoint1 ( rLocalC , RX10_TEMP166 ) ; 
struct Dist1 RX10_TEMP167 = count .distValue ; 
struct Region1 RX10_TEMP168 = RX10_TEMP167 .dReg ; 
const int RX10_TEMP169 = searchPointInRegion1 ( RX10_TEMP168 , pt ) ; 
const int RX10_TEMP170 = 0 ; 
const int RX10_TEMP171 = RX10_TEMP169 < RX10_TEMP170 ; 
if ( RX10_TEMP171 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP172 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP172 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP173 = getPlaceFromDist1 ( RX10_TEMP167 , RX10_TEMP169 ) ; 
const int RX10_TEMP175 = /* here  */ 0 ; 
const int RX10_TEMP176 = RX10_TEMP173 != RX10_TEMP175 ; 
if ( RX10_TEMP176 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP174 = "Bad place access for array count" ; 
fprintf(stderr, RX10_TEMP174 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP177 = getRefArrayValue1int ( count , RX10_TEMP169 ) ; 
const int n = RX10_TEMP177 ; 
const int X10_TEMP52 = offset ; 
struct Dist1 RX10_TEMP178 = offsets .distValue ; 
struct Region1 RX10_TEMP179 = RX10_TEMP178 .dReg ; 
const int RX10_TEMP180 = searchPointInRegion1 ( RX10_TEMP179 , pt ) ; 
const int RX10_TEMP181 = 0 ; 
const int RX10_TEMP182 = RX10_TEMP180 < RX10_TEMP181 ; 
if ( RX10_TEMP182 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP183 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP183 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP184 = getPlaceFromDist1 ( RX10_TEMP178 , RX10_TEMP180 ) ; 
const int RX10_TEMP186 = /* here  */ 0 ; 
const int RX10_TEMP187 = RX10_TEMP184 != RX10_TEMP186 ; 
if ( RX10_TEMP187 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP185 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP185 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( offsets , RX10_TEMP180 , X10_TEMP52 ) ; 
const int X10_TEMP54 = offset + n ; 
offset = X10_TEMP54 ; } 

const int RX10_TEMP191 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP189 = rLocalP .regSize ; 
RX10_TEMP189 = RX10_TEMP189 - RX10_TEMP191 ; const int SX10_TEMP39 = 1 ; 
const int RX10_TEMP190 = RX10_TEMP189 + SX10_TEMP39 ; 
for ( int SX10_TEMP40 = 0 ; SX10_TEMP40 < RX10_TEMP190 ; SX10_TEMP40 ++ ) 
{ const int RX10_TEMP188 = SX10_TEMP40 ; 
const int RX10_TEMP192 = RX10_TEMP188 ; 
struct Point1 pt = regionOrdinalPoint1 ( rLocalP , RX10_TEMP192 ) ; 
struct Dist1 RX10_TEMP193 = indices .distValue ; 
struct Region1 RX10_TEMP194 = RX10_TEMP193 .dReg ; 
const int RX10_TEMP195 = searchPointInRegion1 ( RX10_TEMP194 , pt ) ; 
const int RX10_TEMP196 = 0 ; 
const int RX10_TEMP197 = RX10_TEMP195 < RX10_TEMP196 ; 
if ( RX10_TEMP197 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP198 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP198 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP199 = getPlaceFromDist1 ( RX10_TEMP193 , RX10_TEMP195 ) ; 
const int RX10_TEMP201 = /* here  */ 0 ; 
const int RX10_TEMP202 = RX10_TEMP199 != RX10_TEMP201 ; 
if ( RX10_TEMP202 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP200 = "Bad place access for array indices" ; 
fprintf(stderr, RX10_TEMP200 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP203 = getRefArrayValue1int ( indices , RX10_TEMP195 ) ; 
const int index = RX10_TEMP203 ; 
struct Point1 RX10_TEMP204  ; 
Point1_Point1( &RX10_TEMP204/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP205 = offsets .distValue ; 
struct Region1 RX10_TEMP206 = RX10_TEMP205 .dReg ; 
const int RX10_TEMP207 = searchPointInRegion1 ( RX10_TEMP206 , RX10_TEMP204 ) ; 
const int RX10_TEMP208 = 0 ; 
const int RX10_TEMP209 = RX10_TEMP207 < RX10_TEMP208 ; 
if ( RX10_TEMP209 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP210 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP210 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP211 = getPlaceFromDist1 ( RX10_TEMP205 , RX10_TEMP207 ) ; 
const int RX10_TEMP213 = /* here  */ 0 ; 
const int RX10_TEMP214 = RX10_TEMP211 != RX10_TEMP213 ; 
if ( RX10_TEMP214 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP212 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP212 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP215 = getRefArrayValue1int ( offsets , RX10_TEMP207 ) ; 
const int X10_TEMP61 = RX10_TEMP215 ; 
const int X10_TEMP62 = X10_TEMP61 ; 
struct Dist1 RX10_TEMP216 = indices .distValue ; 
struct Region1 RX10_TEMP217 = RX10_TEMP216 .dReg ; 
const int RX10_TEMP218 = searchPointInRegion1 ( RX10_TEMP217 , pt ) ; 
const int RX10_TEMP219 = 0 ; 
const int RX10_TEMP220 = RX10_TEMP218 < RX10_TEMP219 ; 
if ( RX10_TEMP220 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP221 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP221 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP222 = getPlaceFromDist1 ( RX10_TEMP216 , RX10_TEMP218 ) ; 
const int RX10_TEMP224 = /* here  */ 0 ; 
const int RX10_TEMP225 = RX10_TEMP222 != RX10_TEMP224 ; 
if ( RX10_TEMP225 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP223 = "Bad place access for array indices" ; 
fprintf(stderr, RX10_TEMP223 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( indices , RX10_TEMP218 , X10_TEMP62 ) ; 
struct Point1 RX10_TEMP226  ; 
Point1_Point1( &RX10_TEMP226/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP227 = offsets .distValue ; 
struct Region1 RX10_TEMP228 = RX10_TEMP227 .dReg ; 
const int RX10_TEMP229 = searchPointInRegion1 ( RX10_TEMP228 , RX10_TEMP226 ) ; 
const int RX10_TEMP230 = 0 ; 
const int RX10_TEMP231 = RX10_TEMP229 < RX10_TEMP230 ; 
if ( RX10_TEMP231 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP232 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP232 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP233 = getPlaceFromDist1 ( RX10_TEMP227 , RX10_TEMP229 ) ; 
const int RX10_TEMP235 = /* here  */ 0 ; 
const int RX10_TEMP236 = RX10_TEMP233 != RX10_TEMP235 ; 
if ( RX10_TEMP236 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP234 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP234 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP237 = getRefArrayValue1int ( offsets , RX10_TEMP229 ) ; 
const int X10_TEMP64 = RX10_TEMP237 ; 
const int X10_TEMP65 = 1 ; 
struct Point1 RX10_TEMP238  ; 
Point1_Point1( &RX10_TEMP238/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP239 = offsets .distValue ; 
struct Region1 RX10_TEMP240 = RX10_TEMP239 .dReg ; 
const int RX10_TEMP241 = searchPointInRegion1 ( RX10_TEMP240 , RX10_TEMP238 ) ; 
const int RX10_TEMP242 = 0 ; 
const int RX10_TEMP243 = RX10_TEMP241 < RX10_TEMP242 ; 
if ( RX10_TEMP243 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP244 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP244 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP245 = getPlaceFromDist1 ( RX10_TEMP239 , RX10_TEMP241 ) ; 
const int RX10_TEMP247 = /* here  */ 0 ; 
const int RX10_TEMP248 = RX10_TEMP245 != RX10_TEMP247 ; 
if ( RX10_TEMP248 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP246 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP246 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP249 = getRefArrayValue1int ( offsets , RX10_TEMP241 ) ; 
const int X10_TEMP66 = RX10_TEMP249 ; 
const int X10_TEMP67 = X10_TEMP66 + X10_TEMP65 ; 
struct Point1 RX10_TEMP250  ; 
Point1_Point1( &RX10_TEMP250/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP251 = offsets .distValue ; 
struct Region1 RX10_TEMP252 = RX10_TEMP251 .dReg ; 
const int RX10_TEMP253 = searchPointInRegion1 ( RX10_TEMP252 , RX10_TEMP250 ) ; 
const int RX10_TEMP254 = 0 ; 
const int RX10_TEMP255 = RX10_TEMP253 < RX10_TEMP254 ; 
if ( RX10_TEMP255 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP256 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP256 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP257 = getPlaceFromDist1 ( RX10_TEMP251 , RX10_TEMP253 ) ; 
const int RX10_TEMP259 = /* here  */ 0 ; 
const int RX10_TEMP260 = RX10_TEMP257 != RX10_TEMP259 ; 
if ( RX10_TEMP260 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP258 = "Bad place access for array offsets" ; 
fprintf(stderr, RX10_TEMP258 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( offsets , RX10_TEMP253 , X10_TEMP67 ) ; 
} 

const int X10_TEMP69 = /* here  */ 0 ; 
const int RX10_TEMP264 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP262 = rLocalP .regSize ; 
RX10_TEMP262 = RX10_TEMP262 - RX10_TEMP264 ; const int SX10_TEMP41 = 1 ; 
const int RX10_TEMP263 = RX10_TEMP262 + SX10_TEMP41 ; 
for ( int SX10_TEMP42 = 0 ; SX10_TEMP42 < RX10_TEMP263 ; SX10_TEMP42 ++ ) 
{ const int RX10_TEMP261 = SX10_TEMP42 ; 
const int RX10_TEMP265 = RX10_TEMP261 ; 
struct Point1 i = regionOrdinalPoint1 ( rLocalP , RX10_TEMP265 ) ; 
/* async ( X10_TEMP69 )  */ 
{ struct Dist1 RX10_TEMP266 = indices .distValue ; 
struct Region1 RX10_TEMP267 = RX10_TEMP266 .dReg ; 
const int RX10_TEMP268 = searchPointInRegion1 ( RX10_TEMP267 , i ) ; 
const int RX10_TEMP269 = 0 ; 
const int RX10_TEMP270 = RX10_TEMP268 < RX10_TEMP269 ; 
if ( RX10_TEMP270 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP271 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP271 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP272 = getPlaceFromDist1 ( RX10_TEMP266 , RX10_TEMP268 ) ; 
const int RX10_TEMP274 = /* here  */ 0 ; 
const int RX10_TEMP275 = RX10_TEMP272 != RX10_TEMP274 ; 
if ( RX10_TEMP275 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP273 = "Bad place access for array indices" ; 
fprintf(stderr, RX10_TEMP273 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP276 = getRefArrayValue1int ( indices , RX10_TEMP268 ) ; 
const int X10_TEMP72 = RX10_TEMP276 ; 
struct Dist1 RX10_TEMP277 = particles .distValue ; 
struct Region1 RX10_TEMP278 = RX10_TEMP277 .dReg ; 
const int RX10_TEMP279 = searchPointInRegion1 ( RX10_TEMP278 , i ) ; 
const int RX10_TEMP280 = 0 ; 
const int RX10_TEMP281 = RX10_TEMP279 < RX10_TEMP280 ; 
if ( RX10_TEMP281 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP282 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP282 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP283 = getPlaceFromDist1 ( RX10_TEMP277 , RX10_TEMP279 ) ; 
const int RX10_TEMP285 = /* here  */ 0 ; 
const int RX10_TEMP286 = RX10_TEMP283 != RX10_TEMP285 ; 
if ( RX10_TEMP286 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP284 = "Bad place access for array particles" ; 
fprintf(stderr, RX10_TEMP284 ) ; 
exit(EXIT_FAILURE);
} 

struct Particle RX10_TEMP287 = getRefArrayValue1Particle ( particles , RX10_TEMP279 ) ; 
struct Particle X10_TEMP75 = RX10_TEMP287 ; 
struct Particle X10_TEMP76 = X10_TEMP75 ; 
struct Point1 RX10_TEMP288  ; 
Point1_Point1( &RX10_TEMP288/*Assignment*/, X10_TEMP72 ) ; 
struct Dist1 RX10_TEMP289 = result .distValue ; 
struct Region1 RX10_TEMP290 = RX10_TEMP289 .dReg ; 
const int RX10_TEMP291 = searchPointInRegion1 ( RX10_TEMP290 , RX10_TEMP288 ) ; 
const int RX10_TEMP292 = 0 ; 
const int RX10_TEMP293 = RX10_TEMP291 < RX10_TEMP292 ; 
if ( RX10_TEMP293 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP294 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP294 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP295 = getPlaceFromDist1 ( RX10_TEMP289 , RX10_TEMP291 ) ; 
const int RX10_TEMP297 = /* here  */ 0 ; 
const int RX10_TEMP298 = RX10_TEMP295 != RX10_TEMP297 ; 
if ( RX10_TEMP298 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP296 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP296 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Particle ( result , RX10_TEMP291 , X10_TEMP76 ) ; 
} 

} 

} 

} 

} 

return result ; 
} 

intRefArray1 /*static*/LinearESOpenPIC2D_parallelPrefix (  struct LinearESOpenPIC2D  * const X10_TEMP0 ,  struct intRefArray1 const data ) 
{ struct Dist1 RX10_TEMP0 = data .distValue ; 
struct Dist1 dData = RX10_TEMP0 ; 
struct Region1 RX10_TEMP1 = dData .dReg ; 
const int RX10_TEMP2 = 0 ; 
const int RX10_TEMP3 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP4 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP4 = RX10_TEMP4 - RX10_TEMP3 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP4 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP7 = (intStub *)calloc(RX10_TEMP6,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP5 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP3 ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 ; 
const int RX10_TEMP11 = /* place.places ( RX10_TEMP10 )  */ 0 
; 
const int RX10_TEMP12 = getDistLocalCount1 ( dData , RX10_TEMP10 ) ; 
const int RX10_TEMP13 = RX10_TEMP12 - RX10_TEMP3 ; 
struct Dist1 RX10_TEMP14 = restrictDist1 ( dData , RX10_TEMP11 ) ; 
struct Region1 RX10_TEMP15 = RX10_TEMP14 .dReg ; 
/* async ( RX10_TEMP11 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP13 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(RX10_TEMP29,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP29 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP16 = SX10_TEMP6 ; 
const int RX10_TEMP17 = RX10_TEMP16 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP15 , RX10_TEMP17 ) ; 
struct Dist1 RX10_TEMP18 = data .distValue ; 
struct Region1 RX10_TEMP19 = RX10_TEMP18 .dReg ; 
const int RX10_TEMP20 = searchPointInRegion1 ( RX10_TEMP19 , pt ) ; 
const int RX10_TEMP21 = 0 ; 
const int RX10_TEMP22 = RX10_TEMP20 < RX10_TEMP21 ; 
if ( RX10_TEMP22 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP23 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP23 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP24 = getPlaceFromDist1 ( RX10_TEMP18 , RX10_TEMP20 ) ; 
const int RX10_TEMP26 = /* here  */ 0 ; 
const int RX10_TEMP27 = RX10_TEMP24 != RX10_TEMP26 ; 
if ( RX10_TEMP27 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP25 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP25 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP28 = getRefArrayValue1int ( data , RX10_TEMP20 ) ; 
const int X10_TEMP4 = RX10_TEMP28 ; 
SX10_TEMP5 [ RX10_TEMP16 ] = X10_TEMP4 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP30 = SX10_TEMP5 ; 
struct intStub RX10_TEMP31  ; 
intStub_intStub( &RX10_TEMP31/*Assignment*/, RX10_TEMP30 ) ; 
/* async ( RX10_TEMP9 )  */ 
{ RX10_TEMP7 [ RX10_TEMP8 ] = RX10_TEMP31 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP7 = (intStub *)calloc(RX10_TEMP5,sizeof( intStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP5 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP8 ; 
struct intStub RX10_TEMP33 = RX10_TEMP7 [ RX10_TEMP34 ] 
; 
SX10_TEMP7 [ RX10_TEMP34 ] = RX10_TEMP33 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP32 = SX10_TEMP7 ; 
struct intRefArray1 RX10_TEMP35  ; 
intRefArray1_intRefArray1( &RX10_TEMP35/*Assignment*/, dData , RX10_TEMP32 ) ; 
struct intRefArray1 result = RX10_TEMP35 ; 
struct Region1 RX10_TEMP36 = dData .dReg ; 
const int RX10_TEMP37 = 0 ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP39 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP39 = RX10_TEMP39 - RX10_TEMP38 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP40 = RX10_TEMP39 + SX10_TEMP9 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP41 = RX10_TEMP39 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP42 = (intStub *)calloc(RX10_TEMP41,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP40 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP43 = SX10_TEMP12 ; 
const int RX10_TEMP44 = /* here  */ 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 ; 
const int RX10_TEMP46 = /* place.places ( RX10_TEMP45 )  */ 0 
; 
const int RX10_TEMP47 = getDistLocalCount1 ( dData , RX10_TEMP45 ) ; 
const int RX10_TEMP48 = RX10_TEMP47 - RX10_TEMP38 ; 
struct Dist1 RX10_TEMP49 = restrictDist1 ( dData , RX10_TEMP46 ) ; 
struct Region1 RX10_TEMP50 = RX10_TEMP49 .dReg ; 
/* async ( RX10_TEMP46 )  */ 
{ const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP64 = RX10_TEMP48 + SX10_TEMP13 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP14 = (int *)calloc(RX10_TEMP64,sizeof( int )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP64 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP51 = SX10_TEMP15 ; 
const int RX10_TEMP52 = RX10_TEMP51 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP50 , RX10_TEMP52 ) ; 
struct Dist1 RX10_TEMP53 = data .distValue ; 
struct Region1 RX10_TEMP54 = RX10_TEMP53 .dReg ; 
const int RX10_TEMP55 = searchPointInRegion1 ( RX10_TEMP54 , pt ) ; 
const int RX10_TEMP56 = 0 ; 
const int RX10_TEMP57 = RX10_TEMP55 < RX10_TEMP56 ; 
if ( RX10_TEMP57 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP58 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP58 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP59 = getPlaceFromDist1 ( RX10_TEMP53 , RX10_TEMP55 ) ; 
const int RX10_TEMP61 = /* here  */ 0 ; 
const int RX10_TEMP62 = RX10_TEMP59 != RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP60 = "Bad place access for array data" ; 
fprintf(stderr, RX10_TEMP60 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP63 = getRefArrayValue1int ( data , RX10_TEMP55 ) ; 
const int X10_TEMP8 = RX10_TEMP63 ; 
SX10_TEMP14 [ RX10_TEMP51 ] = X10_TEMP8 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP65 = SX10_TEMP14 ; 
struct intStub RX10_TEMP66  ; 
intStub_intStub( &RX10_TEMP66/*Assignment*/, RX10_TEMP65 ) ; 
/* async ( RX10_TEMP44 )  */ 
{ RX10_TEMP42 [ RX10_TEMP43 ] = RX10_TEMP66 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP16 = (intStub *)calloc(RX10_TEMP40,sizeof( intStub )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP40 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP69 = SX10_TEMP17 ; 
struct intStub RX10_TEMP68 = RX10_TEMP42 [ RX10_TEMP69 ] 
; 
SX10_TEMP16 [ RX10_TEMP69 ] = RX10_TEMP68 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP67 = SX10_TEMP16 ; 
struct intRefArray1 RX10_TEMP70  ; 
intRefArray1_intRefArray1( &RX10_TEMP70/*Assignment*/, dData , RX10_TEMP67 ) ; 
struct intRefArray1 tmp1 = RX10_TEMP70 ; 
struct Region1 RX10_TEMP71 = dData .dReg ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP74 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP74 = RX10_TEMP74 - RX10_TEMP73 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP75 = RX10_TEMP74 + SX10_TEMP18 ; 
const int SX10_TEMP19 = 1 ; 
const int RX10_TEMP76 = RX10_TEMP74 + SX10_TEMP19 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP77 = (intStub *)calloc(RX10_TEMP76,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP75 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP78 = SX10_TEMP21 ; 
const int RX10_TEMP79 = /* here  */ 0 ; 
const int RX10_TEMP80 = RX10_TEMP78 ; 
const int RX10_TEMP81 = /* place.places ( RX10_TEMP80 )  */ 0 
; 
const int RX10_TEMP82 = getDistLocalCount1 ( dData , RX10_TEMP80 ) ; 
const int RX10_TEMP83 = RX10_TEMP82 - RX10_TEMP73 ; 
/* async ( RX10_TEMP81 )  */ 
{ const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP85 = RX10_TEMP83 + SX10_TEMP22 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP23 = (int *)calloc(RX10_TEMP85,sizeof( int )); 
for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP85 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP84 = SX10_TEMP24 ; 
const int X10_TEMP11 = 0 ; 
SX10_TEMP23 [ RX10_TEMP84 ] = X10_TEMP11 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP86 = SX10_TEMP23 ; 
struct intStub RX10_TEMP87  ; 
intStub_intStub( &RX10_TEMP87/*Assignment*/, RX10_TEMP86 ) ; 
/* async ( RX10_TEMP79 )  */ 
{ RX10_TEMP77 [ RX10_TEMP78 ] = RX10_TEMP87 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP25 = (intStub *)calloc(RX10_TEMP75,sizeof( intStub )); 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP75 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP90 = SX10_TEMP26 ; 
struct intStub RX10_TEMP89 = RX10_TEMP77 [ RX10_TEMP90 ] 
; 
SX10_TEMP25 [ RX10_TEMP90 ] = RX10_TEMP89 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP88 = SX10_TEMP25 ; 
struct intRefArray1 RX10_TEMP91  ; 
intRefArray1_intRefArray1( &RX10_TEMP91/*Assignment*/, dData , RX10_TEMP88 ) ; 
struct intRefArray1 tmp2 = RX10_TEMP91 ; 
/*UpdatableVariableDeclaration*/int strides = 1 ; 
const int X10_TEMP14 = /* place.MAX_PLACES  */ 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP18 = strides < X10_TEMP14 ; 

while ( X10_TEMP18 ) 
{ const int stride = strides ; 
/* finish  */ 
{ struct Dist1 X10_TEMP21 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP93 = X10_TEMP21 .dReg ; 
const int RX10_TEMP96 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP94 = RX10_TEMP93 .regSize ; 
RX10_TEMP94 = RX10_TEMP94 - RX10_TEMP96 ; const int SX10_TEMP27 = 1 ; 
const int RX10_TEMP95 = RX10_TEMP94 + SX10_TEMP27 ; 
for ( int SX10_TEMP28 = 0 ; SX10_TEMP28 < RX10_TEMP95 ; SX10_TEMP28 ++ ) 
{ const int RX10_TEMP92 = SX10_TEMP28 ; 
const int RX10_TEMP97 = RX10_TEMP92 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP93 , RX10_TEMP97 ) ; 
struct Region1 RX10_TEMP98 = X10_TEMP21 .dReg ; 
const int RX10_TEMP99 = searchPointInRegion1 ( RX10_TEMP98 , pl ) ; 
const int RX10_TEMP100 = 0 ; 
const int RX10_TEMP101 = RX10_TEMP99 < RX10_TEMP100 ; 
if ( RX10_TEMP101 ) 
{ const char * RX10_TEMP102 = "Point pl not found in the distribution X10_TEMP21." ; 
fprintf(stderr, RX10_TEMP102 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP103 = getPlaceFromDist1 ( X10_TEMP21 , RX10_TEMP99 ) ; 
const int X10_TEMP22 = RX10_TEMP103 ; 
/* async ( X10_TEMP22 )  */ 
{ const int X10_TEMP24 = pl .f0 ; 
const int X10_TEMP26 = X10_TEMP24 / stride ; 
const int X10_TEMP27 = 2 ; 
const int dir = X10_TEMP26 % X10_TEMP27 ; 
struct Dist1 RX10_TEMP104 = tmp1 .distValue ; 
struct Region1 RX10_TEMP105 = RX10_TEMP104 .dReg ; 
const int RX10_TEMP106 = searchPointInRegion1 ( RX10_TEMP105 , pl ) ; 
const int RX10_TEMP107 = 0 ; 
const int RX10_TEMP108 = RX10_TEMP106 < RX10_TEMP107 ; 
if ( RX10_TEMP108 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP110 = getPlaceFromDist1 ( RX10_TEMP104 , RX10_TEMP106 ) ; 
const int RX10_TEMP112 = /* here  */ 0 ; 
const int RX10_TEMP113 = RX10_TEMP110 != RX10_TEMP112 ; 
if ( RX10_TEMP113 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP111 = "Bad place access for array tmp1" ; 
fprintf(stderr, RX10_TEMP111 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getRefArrayValue1int ( tmp1 , RX10_TEMP106 ) ; 
const int val = RX10_TEMP114 ; 
const int X10_TEMP43 = pl .f0 ; 
const int X10_TEMP32 = 0 ; 
const int X10_TEMP34 = dir == X10_TEMP32 ; 
const int X10_TEMP35 = X10_TEMP34 ; 
const int X10_TEMP37 = 1 ; 
const int X10_TEMP38 = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP40 = X10_TEMP38 - X10_TEMP37 ; 
if ( X10_TEMP35 ) 
{ X10_TEMP40 = 1 ; } 

const int X10_TEMP41 = X10_TEMP40 ; 
const int X10_TEMP42 = X10_TEMP41 ; 
const int X10_TEMP44 = X10_TEMP42 * stride ; 
const int X10_TEMP46 = X10_TEMP43 + X10_TEMP44 ; 
const int pDst = /* place.places ( X10_TEMP46 )  */ 0 
; 
/* finish  */ 
{ /* async ( pDst )  */ 
{ const int X10_TEMP49 = 0 ; 
const int X10_TEMP51 = dir == X10_TEMP49 ; 
if ( X10_TEMP51 ) 
{ const int X10_TEMP52 = /* here  */ 0 ; 
const int X10_TEMP54 = /* X10_TEMP52 . id  */ 0 ; 
const int X10_TEMP55 = /* here  */ 0 ; 
const int X10_TEMP57 = /* X10_TEMP55 . id  */ 0 ; 
struct Point1 RX10_TEMP115  ; 
Point1_Point1( &RX10_TEMP115/*Assignment*/, X10_TEMP57 ) ; 
struct Dist1 RX10_TEMP116 = result .distValue ; 
struct Region1 RX10_TEMP117 = RX10_TEMP116 .dReg ; 
const int RX10_TEMP118 = searchPointInRegion1 ( RX10_TEMP117 , RX10_TEMP115 ) ; 
const int RX10_TEMP119 = 0 ; 
const int RX10_TEMP120 = RX10_TEMP118 < RX10_TEMP119 ; 
if ( RX10_TEMP120 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP121 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP121 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP122 = getPlaceFromDist1 ( RX10_TEMP116 , RX10_TEMP118 ) ; 
const int RX10_TEMP124 = /* here  */ 0 ; 
const int RX10_TEMP125 = RX10_TEMP122 != RX10_TEMP124 ; 
if ( RX10_TEMP125 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP123 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP123 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP126 = getRefArrayValue1int ( result , RX10_TEMP118 ) ; 
const int X10_TEMP58 = RX10_TEMP126 ; 
const int X10_TEMP60 = X10_TEMP58 + val ; 
const int X10_TEMP61 = X10_TEMP60 ; 
struct Point1 RX10_TEMP127  ; 
Point1_Point1( &RX10_TEMP127/*Assignment*/, X10_TEMP54 ) ; 
struct Dist1 RX10_TEMP128 = result .distValue ; 
struct Region1 RX10_TEMP129 = RX10_TEMP128 .dReg ; 
const int RX10_TEMP130 = searchPointInRegion1 ( RX10_TEMP129 , RX10_TEMP127 ) ; 
const int RX10_TEMP131 = 0 ; 
const int RX10_TEMP132 = RX10_TEMP130 < RX10_TEMP131 ; 
if ( RX10_TEMP132 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP133 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP133 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP134 = getPlaceFromDist1 ( RX10_TEMP128 , RX10_TEMP130 ) ; 
const int RX10_TEMP136 = /* here  */ 0 ; 
const int RX10_TEMP137 = RX10_TEMP134 != RX10_TEMP136 ; 
if ( RX10_TEMP137 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP135 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP135 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( result , RX10_TEMP130 , X10_TEMP61 ) ; 
} 

const int X10_TEMP62 = /* here  */ 0 ; 
const int X10_TEMP64 = /* X10_TEMP62 . id  */ 0 ; 
const int X10_TEMP66 = val ; 
struct Point1 RX10_TEMP138  ; 
Point1_Point1( &RX10_TEMP138/*Assignment*/, X10_TEMP64 ) ; 
struct Dist1 RX10_TEMP139 = tmp2 .distValue ; 
struct Region1 RX10_TEMP140 = RX10_TEMP139 .dReg ; 
const int RX10_TEMP141 = searchPointInRegion1 ( RX10_TEMP140 , RX10_TEMP138 ) ; 
const int RX10_TEMP142 = 0 ; 
const int RX10_TEMP143 = RX10_TEMP141 < RX10_TEMP142 ; 
if ( RX10_TEMP143 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP144 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP144 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP145 = getPlaceFromDist1 ( RX10_TEMP139 , RX10_TEMP141 ) ; 
const int RX10_TEMP147 = /* here  */ 0 ; 
const int RX10_TEMP148 = RX10_TEMP145 != RX10_TEMP147 ; 
if ( RX10_TEMP148 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP146 = "Bad place access for array tmp2" ; 
fprintf(stderr, RX10_TEMP146 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( tmp2 , RX10_TEMP141 , X10_TEMP66 ) ; 
} 

} 

} 

} 

} 

/* finish  */ 
{ struct Dist1 X10_TEMP68 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP150 = X10_TEMP68 .dReg ; 
const int RX10_TEMP153 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP151 = RX10_TEMP150 .regSize ; 
RX10_TEMP151 = RX10_TEMP151 - RX10_TEMP153 ; const int SX10_TEMP29 = 1 ; 
const int RX10_TEMP152 = RX10_TEMP151 + SX10_TEMP29 ; 
for ( int SX10_TEMP30 = 0 ; SX10_TEMP30 < RX10_TEMP152 ; SX10_TEMP30 ++ ) 
{ const int RX10_TEMP149 = SX10_TEMP30 ; 
const int RX10_TEMP154 = RX10_TEMP149 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP150 , RX10_TEMP154 ) ; 
struct Region1 RX10_TEMP155 = X10_TEMP68 .dReg ; 
const int RX10_TEMP156 = searchPointInRegion1 ( RX10_TEMP155 , pl ) ; 
const int RX10_TEMP157 = 0 ; 
const int RX10_TEMP158 = RX10_TEMP156 < RX10_TEMP157 ; 
if ( RX10_TEMP158 ) 
{ const char * RX10_TEMP159 = "Point pl not found in the distribution X10_TEMP68." ; 
fprintf(stderr, RX10_TEMP159 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP160 = getPlaceFromDist1 ( X10_TEMP68 , RX10_TEMP156 ) ; 
const int X10_TEMP69 = RX10_TEMP160 ; 
/* async ( X10_TEMP69 )  */ 
{ struct Dist1 RX10_TEMP161 = tmp1 .distValue ; 
struct Region1 RX10_TEMP162 = RX10_TEMP161 .dReg ; 
const int RX10_TEMP163 = searchPointInRegion1 ( RX10_TEMP162 , pl ) ; 
const int RX10_TEMP164 = 0 ; 
const int RX10_TEMP165 = RX10_TEMP163 < RX10_TEMP164 ; 
if ( RX10_TEMP165 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP166 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP166 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP167 = getPlaceFromDist1 ( RX10_TEMP161 , RX10_TEMP163 ) ; 
const int RX10_TEMP169 = /* here  */ 0 ; 
const int RX10_TEMP170 = RX10_TEMP167 != RX10_TEMP169 ; 
if ( RX10_TEMP170 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP168 = "Bad place access for array tmp1" ; 
fprintf(stderr, RX10_TEMP168 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP171 = getRefArrayValue1int ( tmp1 , RX10_TEMP163 ) ; 
const int X10_TEMP73 = RX10_TEMP171 ; 
struct Dist1 RX10_TEMP172 = tmp2 .distValue ; 
struct Region1 RX10_TEMP173 = RX10_TEMP172 .dReg ; 
const int RX10_TEMP174 = searchPointInRegion1 ( RX10_TEMP173 , pl ) ; 
const int RX10_TEMP175 = 0 ; 
const int RX10_TEMP176 = RX10_TEMP174 < RX10_TEMP175 ; 
if ( RX10_TEMP176 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP177 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP177 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP178 = getPlaceFromDist1 ( RX10_TEMP172 , RX10_TEMP174 ) ; 
const int RX10_TEMP180 = /* here  */ 0 ; 
const int RX10_TEMP181 = RX10_TEMP178 != RX10_TEMP180 ; 
if ( RX10_TEMP181 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP179 = "Bad place access for array tmp2" ; 
fprintf(stderr, RX10_TEMP179 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP182 = getRefArrayValue1int ( tmp2 , RX10_TEMP174 ) ; 
const int X10_TEMP74 = RX10_TEMP182 ; 
const int X10_TEMP76 = X10_TEMP73 + X10_TEMP74 ; 
const int X10_TEMP77 = X10_TEMP76 ; 
struct Dist1 RX10_TEMP183 = tmp1 .distValue ; 
struct Region1 RX10_TEMP184 = RX10_TEMP183 .dReg ; 
const int RX10_TEMP185 = searchPointInRegion1 ( RX10_TEMP184 , pl ) ; 
const int RX10_TEMP186 = 0 ; 
const int RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186 ; 
if ( RX10_TEMP187 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP188 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP188 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP189 = getPlaceFromDist1 ( RX10_TEMP183 , RX10_TEMP185 ) ; 
const int RX10_TEMP191 = /* here  */ 0 ; 
const int RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191 ; 
if ( RX10_TEMP192 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP190 = "Bad place access for array tmp1" ; 
fprintf(stderr, RX10_TEMP190 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( tmp1 , RX10_TEMP185 , X10_TEMP77 ) ; 
} 

} 

} 

const int X10_TEMP79 = strides + strides ; 
strides = X10_TEMP79 ; const int X10_TEMP16 = /* place.MAX_PLACES  */ 1 ; 
X10_TEMP18 = strides < X10_TEMP16 ; } 

return result ; 
} 

double /*static*/Particle_getX (  struct Particle const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .x ; 
return X10_TEMP2 ; 
} 

double /*static*/Particle_getY (  struct Particle const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .y ; 
return X10_TEMP2 ; 
} 

double /*static*/Particle_getXVel (  struct Particle const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .xVel ; 
return X10_TEMP2 ; 
} 

double /*static*/Particle_getYVel (  struct Particle const X10_TEMP0 ) 
{ const double X10_TEMP2 = X10_TEMP0 .yVel ; 
return X10_TEMP2 ; 
} 

Particle /*static*/Particle_setX (  struct Particle const X10_TEMP0 , const double x ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .y ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .xVel ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP0 .yVel ; 
/*UpdatableVariableDeclaration*/int X10_TEMP9 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP11  ; 
Particle_Particle_5( &X10_TEMP11/*Assignment*/, x , X10_TEMP6 , X10_TEMP7 , X10_TEMP8 , X10_TEMP9 ) ; 
return X10_TEMP11 ; 
} 

Particle /*static*/Particle_setY (  struct Particle const X10_TEMP0 , const double y ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .x ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .xVel ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP0 .yVel ; 
/*UpdatableVariableDeclaration*/int X10_TEMP9 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP11  ; 
Particle_Particle_5( &X10_TEMP11/*Assignment*/, X10_TEMP6 , y , X10_TEMP7 , X10_TEMP8 , X10_TEMP9 ) ; 
return X10_TEMP11 ; 
} 

Particle /*static*/Particle_setXVel (  struct Particle const X10_TEMP0 , const double xVel ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .x ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .y ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP0 .yVel ; 
/*UpdatableVariableDeclaration*/int X10_TEMP9 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP11  ; 
Particle_Particle_5( &X10_TEMP11/*Assignment*/, X10_TEMP6 , X10_TEMP7 , xVel , X10_TEMP8 , X10_TEMP9 ) ; 
return X10_TEMP11 ; 
} 

Particle /*static*/Particle_setYVel (  struct Particle const X10_TEMP0 , const double yVel ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .x ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .y ; 
/*UpdatableVariableDeclaration*/double X10_TEMP8 = X10_TEMP0 .xVel ; 
/*UpdatableVariableDeclaration*/int X10_TEMP9 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP11  ; 
Particle_Particle_5( &X10_TEMP11/*Assignment*/, X10_TEMP6 , X10_TEMP7 , X10_TEMP8 , yVel , X10_TEMP9 ) ; 
return X10_TEMP11 ; 
} 

Particle /*static*/Particle_setPos (  struct Particle const X10_TEMP0 , const double x , const double y ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .xVel ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .yVel ; 
/*UpdatableVariableDeclaration*/int X10_TEMP8 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP10  ; 
Particle_Particle_5( &X10_TEMP10/*Assignment*/, x , y , X10_TEMP6 , X10_TEMP7 , X10_TEMP8 ) ; 
return X10_TEMP10 ; 
} 

Particle /*static*/Particle_setVel (  struct Particle const X10_TEMP0 , const double xVel , const double yVel ) 
{ /*UpdatableVariableDeclaration*/double X10_TEMP6 = X10_TEMP0 .x ; 
/*UpdatableVariableDeclaration*/double X10_TEMP7 = X10_TEMP0 .y ; 
/*UpdatableVariableDeclaration*/int X10_TEMP8 = X10_TEMP0 .pid ; 
struct Particle X10_TEMP10  ; 
Particle_Particle_5( &X10_TEMP10/*Assignment*/, X10_TEMP6 , X10_TEMP7 , xVel , yVel , X10_TEMP8 ) ; 
return X10_TEMP10 ; 
} 

char * /*static*/Particle_toString (  struct Particle const X10_TEMP0 ) 
{ const int X10_TEMP1 = X10_TEMP0 .pid ; 
const int X10_TEMP2 = 0 ; 
const int X10_TEMP4 = X10_TEMP1 >= X10_TEMP2 ; 
const int X10_TEMP5 = X10_TEMP4 ; 
const char * X10_TEMP6 = "p" ; 
const int X10_TEMP7 = X10_TEMP0 .pid ; 
/*UpdatableVariableDeclaration*/char * X10_TEMP10 = "" ; 
if ( X10_TEMP5 ) 
{ /*ASSIGNMENT STRING*/
 char * tempC87 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC87, "%s%d",X10_TEMP6,X10_TEMP7);
X10_TEMP10 = tempC87;} 

const char * X10_TEMP11 = X10_TEMP10 ; 
/*UpdatableVariableDeclaration*/char * result = X10_TEMP11 ; 
const char * X10_TEMP12 = "(" ; 
/*ASSIGNMENT STRING*/
 char * tempC88 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC88, "%s%s",result,X10_TEMP12);
const char * X10_TEMP13 = tempC88;; 
const double X10_TEMP14 = X10_TEMP0 .x ; 
/*ASSIGNMENT STRING*/
 char * tempC89 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC89, "%s%f",X10_TEMP13,X10_TEMP14);
const char * X10_TEMP15 = tempC89;; 
const char * X10_TEMP16 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC90 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC90, "%s%s",X10_TEMP15,X10_TEMP16);
const char * X10_TEMP17 = tempC90;; 
const double X10_TEMP18 = X10_TEMP0 .y ; 
/*ASSIGNMENT STRING*/
 char * tempC91 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC91, "%s%f",X10_TEMP17,X10_TEMP18);
const char * X10_TEMP19 = tempC91;; 
const char * X10_TEMP20 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC92 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC92, "%s%s",X10_TEMP19,X10_TEMP20);
const char * X10_TEMP21 = tempC92;; 
const double X10_TEMP22 = X10_TEMP0 .xVel ; 
/*ASSIGNMENT STRING*/
 char * tempC93 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC93, "%s%f",X10_TEMP21,X10_TEMP22);
const char * X10_TEMP23 = tempC93;; 
const char * X10_TEMP24 = "," ; 
/*ASSIGNMENT STRING*/
 char * tempC94 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC94, "%s%s",X10_TEMP23,X10_TEMP24);
const char * X10_TEMP25 = tempC94;; 
const double X10_TEMP26 = X10_TEMP0 .yVel ; 
/*ASSIGNMENT STRING*/
 char * tempC95 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC95, "%s%f",X10_TEMP25,X10_TEMP26);
const char * X10_TEMP27 = tempC95;; 
const char * X10_TEMP28 = ")" ; 
/*ASSIGNMENT STRING*/
 char * tempC96 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC96, "%s%s",X10_TEMP27,X10_TEMP28);
const char * X10_TEMP30 = tempC96;; 
result = X10_TEMP30 ; return result ; 
} 

int /*static*/Particle_particleEquals (  struct Particle const X10_TEMP0 ,  struct Particle const p ) 
{ const double error = _X10Util_ERROR ; 
const int X10_TEMP2 = X10_TEMP0 .pid ; 
const int X10_TEMP3 = 0 ; 
const int X10_TEMP6 = X10_TEMP2 >= X10_TEMP3 ; 
const int X10_TEMP4 = X10_TEMP0 .pid ; 
const int X10_TEMP5 = p .pid ; 
const int X10_TEMP7 = X10_TEMP4 != X10_TEMP5 ; 
const int X10_TEMP9 = X10_TEMP6 && X10_TEMP7 ; 
if ( X10_TEMP9 ) 
{ const int X10_TEMP11 = 0 ; 
return X10_TEMP11 ; 
} 

const double X10_TEMP12 = Particle_getX ( X10_TEMP0 ) ; 
const double X10_TEMP13 = Particle_getX ( p ) ; 
const double X10_TEMP15 = X10_TEMP12 - X10_TEMP13 ; 
const double X10_TEMP16 = fabs ( X10_TEMP15 ) ; 
const int X10_TEMP18 = X10_TEMP16 < error ; 
const double X10_TEMP19 = Particle_getY ( X10_TEMP0 ) ; 
const double X10_TEMP20 = Particle_getY ( p ) ; 
const double X10_TEMP22 = X10_TEMP19 - X10_TEMP20 ; 
const double X10_TEMP23 = fabs ( X10_TEMP22 ) ; 
const int X10_TEMP25 = X10_TEMP23 < error ; 
const int X10_TEMP33 = X10_TEMP18 && X10_TEMP25 ; 
const double X10_TEMP26 = Particle_getXVel ( X10_TEMP0 ) ; 
const double X10_TEMP27 = Particle_getXVel ( p ) ; 
const double X10_TEMP29 = X10_TEMP26 - X10_TEMP27 ; 
const double X10_TEMP30 = fabs ( X10_TEMP29 ) ; 
const int X10_TEMP32 = X10_TEMP30 < error ; 
const int X10_TEMP41 = X10_TEMP33 && X10_TEMP32 ; 
const double X10_TEMP34 = Particle_getYVel ( X10_TEMP0 ) ; 
const double X10_TEMP35 = Particle_getYVel ( p ) ; 
const double X10_TEMP37 = X10_TEMP34 - X10_TEMP35 ; 
const double X10_TEMP38 = fabs ( X10_TEMP37 ) ; 
const int X10_TEMP40 = X10_TEMP38 < error ; 
const int X10_TEMP43 = X10_TEMP41 && X10_TEMP40 ; 
return X10_TEMP43 ; 
} 

double /*static*/_PoissonSolver_PI4I_init ( ) 
{ const double X10_TEMP1 = 0.5; 
const double X10_TEMP2 = 6.28318530717959; 
const double X10_TEMP4 = X10_TEMP1 / X10_TEMP2 ; 
return X10_TEMP4 ; 
} 

double /*static*/_PoissonSolver_SQT2I_init ( ) 
{ const double X10_TEMP2 = 0.707106781186548; 
return X10_TEMP2 ; 
} 

double /*static*/_PoissonSolver_SQT2PI_init ( ) 
{ const double X10_TEMP2 = 0.797884560802865; 
return X10_TEMP2 ; 
} 

int /*static*/_PoissonSolver_GREENS_IDX_init ( ) 
{ const int X10_TEMP2 = 0 ; 
return X10_TEMP2 ; 
} 

int /*static*/_PoissonSolver_SHAPE_IDX_init ( ) 
{ const int X10_TEMP2 = 1 ; 
return X10_TEMP2 ; 
} 

int /*static*/_PoissonSolver_ELECX_IDX_init ( ) 
{ const int X10_TEMP2 = 2 ; 
return X10_TEMP2 ; 
} 

int /*static*/_PoissonSolver_ELECY_IDX_init ( ) 
{ const int X10_TEMP2 = 3 ; 
return X10_TEMP2 ; 
} 

double /*static*/_PoissonSolver_AR_init ( ) 
{ const double X10_TEMP2 = 0.912871; 
return X10_TEMP2 ; 
} 

ComplexRefArray2 /*static*/PoissonSolver_makeForceArray (  struct PoissonSolver const X10_TEMP0 ) 
{ const int X10_TEMP7 = 0 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP3 = X10_TEMP0 .y ; 
const int X10_TEMP4 = X10_TEMP2 * X10_TEMP3 ; 
const int X10_TEMP5 = 1 ; 
const int X10_TEMP8 = X10_TEMP4 - X10_TEMP5 ; 
const int X10_TEMP13 = 0 ; 
const int X10_TEMP10 = X10_TEMP0 .x ; 
const int X10_TEMP11 = 1 ; 
const int X10_TEMP14 = X10_TEMP10 - X10_TEMP11 ; 
struct Region2 X10_TEMP16 = createNewRegion2RR ( X10_TEMP7 , X10_TEMP8 , X10_TEMP13 , X10_TEMP14 ) ; 
struct Dist2 dResult = X10Util_distBlockStar1 ( X10_TEMP16 ) ; 
struct Region2 RX10_TEMP0 = dResult .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP5,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dResult , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP14 = (Complex *)calloc(RX10_TEMP13,sizeof( Complex )); 
struct ComplexStub RX10_TEMP15  ; 
ComplexStub_ComplexStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP4,sizeof( ComplexStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct ComplexStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct ComplexRefArray2 RX10_TEMP19  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP19/*Assignment*/, dResult , RX10_TEMP16 ) ; 
struct ComplexRefArray2 X10_TEMP19 = RX10_TEMP19 ; 
return X10_TEMP19 ; 
} 

double /*static*/PoissonSolver_getForceCharge (  struct PoissonSolver const X10_TEMP0 ,  struct ComplexRefArray2 const q ,  struct ComplexRefArray2 const forceX ,  struct ComplexRefArray2 const forceY ) 
{ const int X10_TEMP5 = 0 ; 
const int X10_TEMP2 = X10_TEMP0 .x ; 
const int X10_TEMP3 = 1 ; 
const int X10_TEMP6 = X10_TEMP2 - X10_TEMP3 ; 
const int X10_TEMP13 = 0 ; 
const int X10_TEMP8 = 2 ; 
const int X10_TEMP9 = X10_TEMP0 .y ; 
const int X10_TEMP10 = X10_TEMP8 * X10_TEMP9 ; 
const int X10_TEMP11 = 1 ; 
const int X10_TEMP14 = X10_TEMP10 - X10_TEMP11 ; 
struct Region2 X10_TEMP16 = createNewRegion2RR ( X10_TEMP5 , X10_TEMP6 , X10_TEMP13 , X10_TEMP14 ) ; 
struct Dist2 dForce = X10Util_distBlockStar1 ( X10_TEMP16 ) ; 
struct Region2 RX10_TEMP0 = dForce .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP5,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dForce , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP14 = (Complex *)calloc(RX10_TEMP13,sizeof( Complex )); 
struct ComplexStub RX10_TEMP15  ; 
ComplexStub_ComplexStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP4,sizeof( ComplexStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct ComplexStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct ComplexRefArray2 RX10_TEMP19  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP19/*Assignment*/, dForce , RX10_TEMP16 ) ; 
struct ComplexRefArray2 fxfft = RX10_TEMP19 ; 
struct Region2 RX10_TEMP20 = dForce .dReg ; 
const int RX10_TEMP21 = 0 ; 
const int RX10_TEMP22 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP22 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP8 ; 
const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP25 = RX10_TEMP23 + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP26 = (ComplexStub *)calloc(RX10_TEMP25,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP24 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP27 = SX10_TEMP11 ; 
const int RX10_TEMP28 = /* here  */ 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 ; 
const int RX10_TEMP30 = /* place.places ( RX10_TEMP29 )  */ 0 
; 
const int RX10_TEMP31 = getDistLocalCount2 ( dForce , RX10_TEMP29 ) ; 
const int RX10_TEMP32 = RX10_TEMP31 - RX10_TEMP22 ; 
/* async ( RX10_TEMP30 )  */ 
{ const int SX10_TEMP12 = 1 ; 
const int RX10_TEMP33 = RX10_TEMP32 + SX10_TEMP12 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP34 = (Complex *)calloc(RX10_TEMP33,sizeof( Complex )); 
struct ComplexStub RX10_TEMP35  ; 
ComplexStub_ComplexStub( &RX10_TEMP35/*Assignment*/, RX10_TEMP34 ) ; 
/* async ( RX10_TEMP28 )  */ 
{ RX10_TEMP26 [ RX10_TEMP27 ] = RX10_TEMP35 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP14 = (ComplexStub *)calloc(RX10_TEMP24,sizeof( ComplexStub )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP24 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP38 = SX10_TEMP15 ; 
struct ComplexStub RX10_TEMP37 = RX10_TEMP26 [ RX10_TEMP38 ] 
; 
SX10_TEMP14 [ RX10_TEMP38 ] = RX10_TEMP37 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP36 = SX10_TEMP14 ; 
struct ComplexRefArray2 RX10_TEMP39  ; 
ComplexRefArray2_ComplexRefArray2( &RX10_TEMP39/*Assignment*/, dForce , RX10_TEMP36 ) ; 
struct ComplexRefArray2 fyfft = RX10_TEMP39 ; 
struct FourierTransform2D X10_TEMP20 = X10_TEMP0 .fft ; 
struct ComplexRefArray2 qfft = FourierTransform2D_inverseTransformC ( X10_TEMP20 , q ) ; 
const double we = PoissonSolver_solveForceCharge ( X10_TEMP0 , qfft , fxfft , fyfft ) ; 
struct FourierTransform2D X10_TEMP27 = X10_TEMP0 .fft ; 
struct ComplexRefArray2 fx = FourierTransform2D_transformC ( X10_TEMP27 , fxfft ) ; 
struct FourierTransform2D X10_TEMP30 = X10_TEMP0 .fft ; 
struct ComplexRefArray2 fy = FourierTransform2D_transformC ( X10_TEMP30 , fyfft ) ; 
/* finish  */ 
{ struct Dist2 RX10_TEMP41 = forceX .distValue ; 
struct Region2 RX10_TEMP42 = RX10_TEMP41 .dReg ; 
const int RX10_TEMP45 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP43 = RX10_TEMP42 .regSize ; 
RX10_TEMP43 = RX10_TEMP43 - RX10_TEMP45 ; const int SX10_TEMP16 = 1 ; 
const int RX10_TEMP44 = RX10_TEMP43 + SX10_TEMP16 ; 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP44 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP40 = SX10_TEMP17 ; 
const int RX10_TEMP46 = RX10_TEMP40 ; 
struct Point2 pt = regionOrdinalPoint2 ( RX10_TEMP42 , RX10_TEMP46 ) ; 
struct Dist2 RX10_TEMP47 = forceX .distValue ; 
struct Dist2 X10_TEMP34 = RX10_TEMP47 ; 
struct Region2 RX10_TEMP48 = X10_TEMP34 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion2 ( RX10_TEMP48 , pt ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ const char * RX10_TEMP52 = "Point pt not found in the distribution X10_TEMP34." ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist2 ( X10_TEMP34 , RX10_TEMP49 ) ; 
const int X10_TEMP35 = RX10_TEMP53 ; 
/* async ( X10_TEMP35 )  */ 
{ struct Dist2 RX10_TEMP54 = fx .distValue ; 
struct Region2 RX10_TEMP55 = RX10_TEMP54 .dReg ; 
const int RX10_TEMP56 = searchPointInRegion2 ( RX10_TEMP55 , pt ) ; 
const int RX10_TEMP57 = 0 ; 
const int RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57 ; 
if ( RX10_TEMP58 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP60 = getPlaceFromDist2 ( RX10_TEMP54 , RX10_TEMP56 ) ; 
const int RX10_TEMP62 = /* here  */ 0 ; 
const int RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62 ; 
if ( RX10_TEMP63 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Bad place access for array fx" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP64 = getRefArrayValue2Complex ( fx , RX10_TEMP56 ) ; 
struct Complex X10_TEMP39 = RX10_TEMP64 ; 
struct Complex X10_TEMP40 = X10_TEMP39 ; 
struct Dist2 RX10_TEMP65 = forceX .distValue ; 
struct Region2 RX10_TEMP66 = RX10_TEMP65 .dReg ; 
const int RX10_TEMP67 = searchPointInRegion2 ( RX10_TEMP66 , pt ) ; 
const int RX10_TEMP68 = 0 ; 
const int RX10_TEMP69 = RX10_TEMP67 < RX10_TEMP68 ; 
if ( RX10_TEMP69 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP71 = getPlaceFromDist2 ( RX10_TEMP65 , RX10_TEMP67 ) ; 
const int RX10_TEMP73 = /* here  */ 0 ; 
const int RX10_TEMP74 = RX10_TEMP71 != RX10_TEMP73 ; 
if ( RX10_TEMP74 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP72 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP72 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP67 , X10_TEMP40 ) ; 
struct Dist2 RX10_TEMP75 = fy .distValue ; 
struct Region2 RX10_TEMP76 = RX10_TEMP75 .dReg ; 
const int RX10_TEMP77 = searchPointInRegion2 ( RX10_TEMP76 , pt ) ; 
const int RX10_TEMP78 = 0 ; 
const int RX10_TEMP79 = RX10_TEMP77 < RX10_TEMP78 ; 
if ( RX10_TEMP79 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP80 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP80 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP81 = getPlaceFromDist2 ( RX10_TEMP75 , RX10_TEMP77 ) ; 
const int RX10_TEMP83 = /* here  */ 0 ; 
const int RX10_TEMP84 = RX10_TEMP81 != RX10_TEMP83 ; 
if ( RX10_TEMP84 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP82 = "Bad place access for array fy" ; 
fprintf(stderr, RX10_TEMP82 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP85 = getRefArrayValue2Complex ( fy , RX10_TEMP77 ) ; 
struct Complex X10_TEMP44 = RX10_TEMP85 ; 
struct Complex X10_TEMP45 = X10_TEMP44 ; 
struct Dist2 RX10_TEMP86 = forceY .distValue ; 
struct Region2 RX10_TEMP87 = RX10_TEMP86 .dReg ; 
const int RX10_TEMP88 = searchPointInRegion2 ( RX10_TEMP87 , pt ) ; 
const int RX10_TEMP89 = 0 ; 
const int RX10_TEMP90 = RX10_TEMP88 < RX10_TEMP89 ; 
if ( RX10_TEMP90 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP91 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP91 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP92 = getPlaceFromDist2 ( RX10_TEMP86 , RX10_TEMP88 ) ; 
const int RX10_TEMP94 = /* here  */ 0 ; 
const int RX10_TEMP95 = RX10_TEMP92 != RX10_TEMP94 ; 
if ( RX10_TEMP95 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP93 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP93 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP88 , X10_TEMP45 ) ; 
} 

} 

} 

return we ; 
} 

double /*static*/PoissonSolver_solveForceCharge (  struct PoissonSolver const X10_TEMP0 ,  struct ComplexRefArray2 const q ,  struct ComplexRefArray2 const forceX ,  struct ComplexRefArray2 const forceY ) 
{ struct Dist1 X10_TEMP1 = /*program*/UniqueDistribution ; 
struct Dist1 dUnique = X10_TEMP1 ; 
struct Region1 RX10_TEMP0 = dUnique .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dUnique , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP14,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
const double X10_TEMP4 = 0.0; 
SX10_TEMP5 [ RX10_TEMP13 ] = X10_TEMP4 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP15 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP16  ; 
doubleStub_doubleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct doubleRefArray1 RX10_TEMP20  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP20/*Assignment*/, dUnique , RX10_TEMP17 ) ; 
struct doubleRefArray1 energy = RX10_TEMP20 ; 
struct Dist1 X10_TEMP7 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP22 = X10_TEMP7 .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP24 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP10 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
/* finish  */ 
{ struct Dist1 X10_TEMP8 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP27 = X10_TEMP8 .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , pl ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point pl not found in the distribution X10_TEMP8." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( X10_TEMP8 , RX10_TEMP28 ) ; 
const int X10_TEMP11 = RX10_TEMP32 ; 
/* async ( X10_TEMP11 )  */ 
{ const int X10_TEMP13 = pl .f0 ; 
const int X10_TEMP14 = X10_TEMP0 .x ; 
const int X10_TEMP16 = X10_TEMP13 <= X10_TEMP14 ; 
if ( X10_TEMP16 ) 
{ struct doubleRefArray3 X10_TEMP17 = X10_TEMP0 .ffg ; 
struct Dist3 RX10_TEMP33 = X10_TEMP17 .distValue ; 
struct Dist3 dFFG = RX10_TEMP33 ; 
struct Region3 rLocal = X10Util_get3DLRegion ( dFFG ) ; 
const int X10_TEMP23 = 0 ; 
struct Region1 rLocal1 = X10Util_getRank3D ( rLocal , X10_TEMP23 ) ; 
const int X10_TEMP27 = 1 ; 
struct Region1 rLocal2 = X10Util_getRank3D ( rLocal , X10_TEMP27 ) ; 
const double X10_TEMP29 = 1.0; 
const int X10_TEMP30 = 0 ; 
/*UpdatableVariableDeclaration*/double tmp3 = X10_TEMP30 - X10_TEMP29 ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = rLocal1 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP37 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP12 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 RX10_TEMP35 = regionOrdinalPoint1 ( rLocal1 , RX10_TEMP39 ) ; 
const int i = RX10_TEMP35 .f0 ; 
const int X10_TEMP33 = 2 ; 
const int X10_TEMP34 = i % X10_TEMP33 ; 
const int X10_TEMP35 = 0 ; 
const int X10_TEMP37 = X10_TEMP34 == X10_TEMP35 ; 
const int X10_TEMP38 = X10_TEMP37 ; 
const double X10_TEMP40 = 1.0; 
const int X10_TEMP41 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP43 = X10_TEMP41 - X10_TEMP40 ; 
if ( X10_TEMP38 ) 
{ X10_TEMP43 = 1.0; } 

const double X10_TEMP44 = X10_TEMP43 ; 
tmp3 = X10_TEMP44 ; const int X10_TEMP45 = 0 ; 
const int X10_TEMP47 = i > X10_TEMP45 ; 
if ( X10_TEMP47 ) 
{ struct doubleRefArray3 X10_TEMP48 = X10_TEMP0 .ffg ; 
const int X10_TEMP52 = 0 ; 
struct Point3 RX10_TEMP40  ; 
Point3_Point3( &RX10_TEMP40/*Assignment*/, i , X10_TEMP52 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP41 = X10_TEMP48 .distValue ; 
struct Region3 RX10_TEMP42 = RX10_TEMP41 .dReg ; 
const int RX10_TEMP43 = searchPointInRegion3 ( RX10_TEMP42 , RX10_TEMP40 ) ; 
const int RX10_TEMP44 = 0 ; 
const int RX10_TEMP45 = RX10_TEMP43 < RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP47 = getPlaceFromDist3 ( RX10_TEMP41 , RX10_TEMP43 ) ; 
const int RX10_TEMP49 = /* here  */ 0 ; 
const int RX10_TEMP50 = RX10_TEMP47 != RX10_TEMP49 ; 
if ( RX10_TEMP50 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Bad place access for array X10_TEMP48" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP51 = getRefArrayValue3double ( X10_TEMP48 , RX10_TEMP43 ) ; 
/*UpdatableVariableDeclaration*/double tmp2 = RX10_TEMP51 ; 
const int X10_TEMP58 = 1 ; 
const int X10_TEMP55 = X10_TEMP0 .y ; 
const int X10_TEMP56 = 1 ; 
const int X10_TEMP59 = X10_TEMP55 - X10_TEMP56 ; 
struct Region1 X10_TEMP61 = createNewRegion1R ( X10_TEMP58 , X10_TEMP59 ) ; 
const int RX10_TEMP56 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP54 = X10_TEMP61 .regSize ; 
RX10_TEMP54 = RX10_TEMP54 - RX10_TEMP56 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP55 = RX10_TEMP54 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP55 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP52 = SX10_TEMP14 ; 
const int RX10_TEMP57 = RX10_TEMP52 ; 
struct Point1 RX10_TEMP53 = regionOrdinalPoint1 ( X10_TEMP61 , RX10_TEMP57 ) ; 
const int j1 = RX10_TEMP53 .f0 ; 
const int X10_TEMP62 = 2 ; 
const int X10_TEMP63 = X10_TEMP0 .y ; 
const int X10_TEMP64 = X10_TEMP62 * X10_TEMP63 ; 
const int j2 = X10_TEMP64 - j1 ; 
const int X10_TEMP66 = /* here  */ 0 ; 
const int X10_TEMP68 = /* X10_TEMP66 . isFirst ( )  */ 1 ; 
const int X10_TEMP69 = X10_TEMP68 ; 
struct doubleRefArray3 X10_TEMP70 = X10_TEMP0 .ffg ; 
const int X10_TEMP74 = 0 ; 
struct doubleValArray2 X10_TEMP76 = X10_TEMP0 .ffg2 ; 
struct Point2 RX10_TEMP58  ; 
Point2_Point2( &RX10_TEMP58/*Assignment*/, j1 , _PoissonSolver_ELECX_IDX ) ; 
struct Region2 RX10_TEMP59 = X10_TEMP76 .regionValue ; 
const int RX10_TEMP60 = searchPointInRegion2 ( RX10_TEMP59 , RX10_TEMP58 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP64 = X10_TEMP76 .contents ; 
/*UpdatableVariableDeclaration*/double X10_TEMP80 = RX10_TEMP64 [ RX10_TEMP60 ] 
; 
if ( X10_TEMP69 ) 
{ struct Point3 RX10_TEMP65  ; 
Point3_Point3( &RX10_TEMP65/*Assignment*/, X10_TEMP74 , j1 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP66 = X10_TEMP70 .distValue ; 
struct Region3 RX10_TEMP67 = RX10_TEMP66 .dReg ; 
const int RX10_TEMP68 = searchPointInRegion3 ( RX10_TEMP67 , RX10_TEMP65 ) ; 
const int RX10_TEMP69 = 0 ; 
const int RX10_TEMP70 = RX10_TEMP68 < RX10_TEMP69 ; 
if ( RX10_TEMP70 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP71 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP71 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP72 = getPlaceFromDist3 ( RX10_TEMP66 , RX10_TEMP68 ) ; 
const int RX10_TEMP74 = /* here  */ 0 ; 
const int RX10_TEMP75 = RX10_TEMP72 != RX10_TEMP74 ; 
if ( RX10_TEMP75 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Bad place access for array X10_TEMP70" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP76 = getRefArrayValue3double ( X10_TEMP70 , RX10_TEMP68 ) ; 
X10_TEMP80 = RX10_TEMP76 ; } 

const double X10_TEMP81 = X10_TEMP80 ; 
const double X10_TEMP82 = X10_TEMP81 ; 
const double tmp0 = X10_TEMP82 ; 
const double tmp1 = tmp3 * tmp0 ; 
const int X10_TEMP85 = 0 ; 
const double X10_TEMP87 = X10_TEMP85 - tmp2 ; 
tmp2 = X10_TEMP87 ; struct doubleRefArray3 X10_TEMP89 = X10_TEMP0 .ffg ; 
struct Point3 RX10_TEMP77  ; 
Point3_Point3( &RX10_TEMP77/*Assignment*/, i , j1 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP78 = X10_TEMP89 .distValue ; 
struct Region3 RX10_TEMP79 = RX10_TEMP78 .dReg ; 
const int RX10_TEMP80 = searchPointInRegion3 ( RX10_TEMP79 , RX10_TEMP77 ) ; 
const int RX10_TEMP81 = 0 ; 
const int RX10_TEMP82 = RX10_TEMP80 < RX10_TEMP81 ; 
if ( RX10_TEMP82 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP83 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP83 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP84 = getPlaceFromDist3 ( RX10_TEMP78 , RX10_TEMP80 ) ; 
const int RX10_TEMP86 = /* here  */ 0 ; 
const int RX10_TEMP87 = RX10_TEMP84 != RX10_TEMP86 ; 
if ( RX10_TEMP87 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP85 = "Bad place access for array X10_TEMP89" ; 
fprintf(stderr, RX10_TEMP85 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP88 = getRefArrayValue3double ( X10_TEMP89 , RX10_TEMP80 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP94 = RX10_TEMP88 ; 
struct Complex cx  ; 
Complex_Complex( &cx/*Assignment*/, tmp1 , X10_TEMP94 ) ; 
struct doubleRefArray3 X10_TEMP97 = X10_TEMP0 .ffg ; 
struct Point3 RX10_TEMP89  ; 
Point3_Point3( &RX10_TEMP89/*Assignment*/, i , j1 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP90 = X10_TEMP97 .distValue ; 
struct Region3 RX10_TEMP91 = RX10_TEMP90 .dReg ; 
const int RX10_TEMP92 = searchPointInRegion3 ( RX10_TEMP91 , RX10_TEMP89 ) ; 
const int RX10_TEMP93 = 0 ; 
const int RX10_TEMP94 = RX10_TEMP92 < RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP95 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP95 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP96 = getPlaceFromDist3 ( RX10_TEMP90 , RX10_TEMP92 ) ; 
const int RX10_TEMP98 = /* here  */ 0 ; 
const int RX10_TEMP99 = RX10_TEMP96 != RX10_TEMP98 ; 
if ( RX10_TEMP99 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP97 = "Bad place access for array X10_TEMP97" ; 
fprintf(stderr, RX10_TEMP97 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP100 = getRefArrayValue3double ( X10_TEMP97 , RX10_TEMP92 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP102 = RX10_TEMP100 ; 
struct Complex cy  ; 
Complex_Complex( &cy/*Assignment*/, tmp2 , X10_TEMP102 ) ; 
struct Point2 RX10_TEMP101  ; 
Point2_Point2( &RX10_TEMP101/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP102 = q .distValue ; 
struct Region2 RX10_TEMP103 = RX10_TEMP102 .dReg ; 
const int RX10_TEMP104 = searchPointInRegion2 ( RX10_TEMP103 , RX10_TEMP101 ) ; 
const int RX10_TEMP105 = 0 ; 
const int RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105 ; 
if ( RX10_TEMP106 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP107 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP107 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP108 = getPlaceFromDist2 ( RX10_TEMP102 , RX10_TEMP104 ) ; 
const int RX10_TEMP110 = /* here  */ 0 ; 
const int RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP112 = getRefArrayValue2Complex ( q , RX10_TEMP104 ) ; 
struct Complex X10_TEMP109 = RX10_TEMP112 ; 
struct Complex X10_TEMP111 = Complex_mult ( cx , X10_TEMP109 ) ; 
struct Complex X10_TEMP112 = X10_TEMP111 ; 
struct Point2 RX10_TEMP113  ; 
Point2_Point2( &RX10_TEMP113/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP114 = forceX .distValue ; 
struct Region2 RX10_TEMP115 = RX10_TEMP114 .dReg ; 
const int RX10_TEMP116 = searchPointInRegion2 ( RX10_TEMP115 , RX10_TEMP113 ) ; 
const int RX10_TEMP117 = 0 ; 
const int RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117 ; 
if ( RX10_TEMP118 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP119 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP119 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP120 = getPlaceFromDist2 ( RX10_TEMP114 , RX10_TEMP116 ) ; 
const int RX10_TEMP122 = /* here  */ 0 ; 
const int RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP121 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP121 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP116 , X10_TEMP112 ) ; 
struct Point2 RX10_TEMP124  ; 
Point2_Point2( &RX10_TEMP124/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP125 = q .distValue ; 
struct Region2 RX10_TEMP126 = RX10_TEMP125 .dReg ; 
const int RX10_TEMP127 = searchPointInRegion2 ( RX10_TEMP126 , RX10_TEMP124 ) ; 
const int RX10_TEMP128 = 0 ; 
const int RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128 ; 
if ( RX10_TEMP129 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP130 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP130 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP131 = getPlaceFromDist2 ( RX10_TEMP125 , RX10_TEMP127 ) ; 
const int RX10_TEMP133 = /* here  */ 0 ; 
const int RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133 ; 
if ( RX10_TEMP134 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP132 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP132 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP135 = getRefArrayValue2Complex ( q , RX10_TEMP127 ) ; 
struct Complex X10_TEMP118 = RX10_TEMP135 ; 
struct Complex X10_TEMP120 = Complex_mult ( cx , X10_TEMP118 ) ; 
struct Complex X10_TEMP121 = X10_TEMP120 ; 
struct Point2 RX10_TEMP136  ; 
Point2_Point2( &RX10_TEMP136/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP137 = forceX .distValue ; 
struct Region2 RX10_TEMP138 = RX10_TEMP137 .dReg ; 
const int RX10_TEMP139 = searchPointInRegion2 ( RX10_TEMP138 , RX10_TEMP136 ) ; 
const int RX10_TEMP140 = 0 ; 
const int RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140 ; 
if ( RX10_TEMP141 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP142 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP142 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP143 = getPlaceFromDist2 ( RX10_TEMP137 , RX10_TEMP139 ) ; 
const int RX10_TEMP145 = /* here  */ 0 ; 
const int RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145 ; 
if ( RX10_TEMP146 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP144 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP144 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP139 , X10_TEMP121 ) ; 
struct Point2 RX10_TEMP147  ; 
Point2_Point2( &RX10_TEMP147/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP148 = q .distValue ; 
struct Region2 RX10_TEMP149 = RX10_TEMP148 .dReg ; 
const int RX10_TEMP150 = searchPointInRegion2 ( RX10_TEMP149 , RX10_TEMP147 ) ; 
const int RX10_TEMP151 = 0 ; 
const int RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151 ; 
if ( RX10_TEMP152 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP153 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP153 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP154 = getPlaceFromDist2 ( RX10_TEMP148 , RX10_TEMP150 ) ; 
const int RX10_TEMP156 = /* here  */ 0 ; 
const int RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156 ; 
if ( RX10_TEMP157 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP155 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP155 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP158 = getRefArrayValue2Complex ( q , RX10_TEMP150 ) ; 
struct Complex X10_TEMP127 = RX10_TEMP158 ; 
struct Complex X10_TEMP129 = Complex_mult ( cy , X10_TEMP127 ) ; 
struct Complex X10_TEMP130 = X10_TEMP129 ; 
struct Point2 RX10_TEMP159  ; 
Point2_Point2( &RX10_TEMP159/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP160 = forceY .distValue ; 
struct Region2 RX10_TEMP161 = RX10_TEMP160 .dReg ; 
const int RX10_TEMP162 = searchPointInRegion2 ( RX10_TEMP161 , RX10_TEMP159 ) ; 
const int RX10_TEMP163 = 0 ; 
const int RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163 ; 
if ( RX10_TEMP164 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP165 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP165 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP166 = getPlaceFromDist2 ( RX10_TEMP160 , RX10_TEMP162 ) ; 
const int RX10_TEMP168 = /* here  */ 0 ; 
const int RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168 ; 
if ( RX10_TEMP169 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP167 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP167 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP162 , X10_TEMP130 ) ; 
struct Complex X10_TEMP134 = Complex_getConjg ( cy ) ; 
struct Point2 RX10_TEMP170  ; 
Point2_Point2( &RX10_TEMP170/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP171 = q .distValue ; 
struct Region2 RX10_TEMP172 = RX10_TEMP171 .dReg ; 
const int RX10_TEMP173 = searchPointInRegion2 ( RX10_TEMP172 , RX10_TEMP170 ) ; 
const int RX10_TEMP174 = 0 ; 
const int RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174 ; 
if ( RX10_TEMP175 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP176 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP176 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP177 = getPlaceFromDist2 ( RX10_TEMP171 , RX10_TEMP173 ) ; 
const int RX10_TEMP179 = /* here  */ 0 ; 
const int RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179 ; 
if ( RX10_TEMP180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP178 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP178 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP181 = getRefArrayValue2Complex ( q , RX10_TEMP173 ) ; 
struct Complex X10_TEMP138 = RX10_TEMP181 ; 
struct Complex X10_TEMP140 = Complex_mult ( X10_TEMP134 , X10_TEMP138 ) ; 
struct Complex X10_TEMP141 = X10_TEMP140 ; 
struct Point2 RX10_TEMP182  ; 
Point2_Point2( &RX10_TEMP182/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP183 = forceY .distValue ; 
struct Region2 RX10_TEMP184 = RX10_TEMP183 .dReg ; 
const int RX10_TEMP185 = searchPointInRegion2 ( RX10_TEMP184 , RX10_TEMP182 ) ; 
const int RX10_TEMP186 = 0 ; 
const int RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186 ; 
if ( RX10_TEMP187 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP188 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP188 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP189 = getPlaceFromDist2 ( RX10_TEMP183 , RX10_TEMP185 ) ; 
const int RX10_TEMP191 = /* here  */ 0 ; 
const int RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191 ; 
if ( RX10_TEMP192 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP190 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP190 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP185 , X10_TEMP141 ) ; 
struct Dist1 RX10_TEMP193 = energy .distValue ; 
struct Region1 RX10_TEMP194 = RX10_TEMP193 .dReg ; 
const int RX10_TEMP195 = searchPointInRegion1 ( RX10_TEMP194 , pl ) ; 
const int RX10_TEMP196 = 0 ; 
const int RX10_TEMP197 = RX10_TEMP195 < RX10_TEMP196 ; 
if ( RX10_TEMP197 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP198 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP198 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP199 = getPlaceFromDist1 ( RX10_TEMP193 , RX10_TEMP195 ) ; 
const int RX10_TEMP201 = /* here  */ 0 ; 
const int RX10_TEMP202 = RX10_TEMP199 != RX10_TEMP201 ; 
if ( RX10_TEMP202 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP200 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP200 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP203 = getRefArrayValue1double ( energy , RX10_TEMP195 ) ; 
const double X10_TEMP161 = RX10_TEMP203 ; 
struct doubleRefArray3 X10_TEMP144 = X10_TEMP0 .ffg ; 
struct Point3 RX10_TEMP204  ; 
Point3_Point3( &RX10_TEMP204/*Assignment*/, i , j1 , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP205 = X10_TEMP144 .distValue ; 
struct Region3 RX10_TEMP206 = RX10_TEMP205 .dReg ; 
const int RX10_TEMP207 = searchPointInRegion3 ( RX10_TEMP206 , RX10_TEMP204 ) ; 
const int RX10_TEMP208 = 0 ; 
const int RX10_TEMP209 = RX10_TEMP207 < RX10_TEMP208 ; 
if ( RX10_TEMP209 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP210 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP210 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP211 = getPlaceFromDist3 ( RX10_TEMP205 , RX10_TEMP207 ) ; 
const int RX10_TEMP213 = /* here  */ 0 ; 
const int RX10_TEMP214 = RX10_TEMP211 != RX10_TEMP213 ; 
if ( RX10_TEMP214 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP212 = "Bad place access for array X10_TEMP144" ; 
fprintf(stderr, RX10_TEMP212 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP215 = getRefArrayValue3double ( X10_TEMP144 , RX10_TEMP207 ) ; 
const double X10_TEMP158 = RX10_TEMP215 ; 
struct Point2 RX10_TEMP216  ; 
Point2_Point2( &RX10_TEMP216/*Assignment*/, i , j1 ) ; 
struct Dist2 RX10_TEMP217 = q .distValue ; 
struct Region2 RX10_TEMP218 = RX10_TEMP217 .dReg ; 
const int RX10_TEMP219 = searchPointInRegion2 ( RX10_TEMP218 , RX10_TEMP216 ) ; 
const int RX10_TEMP220 = 0 ; 
const int RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220 ; 
if ( RX10_TEMP221 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP222 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP222 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP223 = getPlaceFromDist2 ( RX10_TEMP217 , RX10_TEMP219 ) ; 
const int RX10_TEMP225 = /* here  */ 0 ; 
const int RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225 ; 
if ( RX10_TEMP226 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP224 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP224 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP227 = getRefArrayValue2Complex ( q , RX10_TEMP219 ) ; 
struct Complex X10_TEMP150 = RX10_TEMP227 ; 
const double X10_TEMP154 = Complex_multConjg ( X10_TEMP150 ) ; 
struct Point2 RX10_TEMP228  ; 
Point2_Point2( &RX10_TEMP228/*Assignment*/, i , j2 ) ; 
struct Dist2 RX10_TEMP229 = q .distValue ; 
struct Region2 RX10_TEMP230 = RX10_TEMP229 .dReg ; 
const int RX10_TEMP231 = searchPointInRegion2 ( RX10_TEMP230 , RX10_TEMP228 ) ; 
const int RX10_TEMP232 = 0 ; 
const int RX10_TEMP233 = RX10_TEMP231 < RX10_TEMP232 ; 
if ( RX10_TEMP233 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP234 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP234 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP235 = getPlaceFromDist2 ( RX10_TEMP229 , RX10_TEMP231 ) ; 
const int RX10_TEMP237 = /* here  */ 0 ; 
const int RX10_TEMP238 = RX10_TEMP235 != RX10_TEMP237 ; 
if ( RX10_TEMP238 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP236 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP236 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP239 = getRefArrayValue2Complex ( q , RX10_TEMP231 ) ; 
struct Complex X10_TEMP153 = RX10_TEMP239 ; 
const double X10_TEMP155 = Complex_multConjg ( X10_TEMP153 ) ; 
const double X10_TEMP157 = X10_TEMP154 + X10_TEMP155 ; 
const double X10_TEMP160 = X10_TEMP158 * X10_TEMP157 ; 
const double X10_TEMP163 = X10_TEMP161 + X10_TEMP160 ; 
const double X10_TEMP164 = X10_TEMP163 ; 
struct Dist1 RX10_TEMP240 = energy .distValue ; 
struct Region1 RX10_TEMP241 = RX10_TEMP240 .dReg ; 
const int RX10_TEMP242 = searchPointInRegion1 ( RX10_TEMP241 , pl ) ; 
const int RX10_TEMP243 = 0 ; 
const int RX10_TEMP244 = RX10_TEMP242 < RX10_TEMP243 ; 
if ( RX10_TEMP244 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP245 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP245 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP246 = getPlaceFromDist1 ( RX10_TEMP240 , RX10_TEMP242 ) ; 
const int RX10_TEMP248 = /* here  */ 0 ; 
const int RX10_TEMP249 = RX10_TEMP246 != RX10_TEMP248 ; 
if ( RX10_TEMP249 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP247 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP247 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP242 , X10_TEMP164 ) ; 
} 

const int X10_TEMP165 = /* here  */ 0 ; 
const int X10_TEMP167 = /* X10_TEMP165 . isFirst ( )  */ 1 ; 
const int X10_TEMP168 = X10_TEMP167 ; 
struct doubleRefArray3 X10_TEMP169 = X10_TEMP0 .ffg ; 
const int X10_TEMP173 = 0 ; 
const int X10_TEMP174 = 0 ; 
struct doubleValArray2 X10_TEMP176 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP179 = 0 ; 
struct Point2 RX10_TEMP250  ; 
Point2_Point2( &RX10_TEMP250/*Assignment*/, X10_TEMP179 , _PoissonSolver_ELECX_IDX ) ; 
struct Region2 RX10_TEMP251 = X10_TEMP176 .regionValue ; 
const int RX10_TEMP252 = searchPointInRegion2 ( RX10_TEMP251 , RX10_TEMP250 ) ; 
const int RX10_TEMP253 = 0 ; 
const int RX10_TEMP254 = RX10_TEMP252 < RX10_TEMP253 ; 
if ( RX10_TEMP254 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP255 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP255 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP256 = X10_TEMP176 .contents ; 
/*UpdatableVariableDeclaration*/double X10_TEMP181 = RX10_TEMP256 [ RX10_TEMP252 ] 
; 
if ( X10_TEMP168 ) 
{ struct Point3 RX10_TEMP257  ; 
Point3_Point3( &RX10_TEMP257/*Assignment*/, X10_TEMP173 , X10_TEMP174 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP258 = X10_TEMP169 .distValue ; 
struct Region3 RX10_TEMP259 = RX10_TEMP258 .dReg ; 
const int RX10_TEMP260 = searchPointInRegion3 ( RX10_TEMP259 , RX10_TEMP257 ) ; 
const int RX10_TEMP261 = 0 ; 
const int RX10_TEMP262 = RX10_TEMP260 < RX10_TEMP261 ; 
if ( RX10_TEMP262 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP263 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP263 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP264 = getPlaceFromDist3 ( RX10_TEMP258 , RX10_TEMP260 ) ; 
const int RX10_TEMP266 = /* here  */ 0 ; 
const int RX10_TEMP267 = RX10_TEMP264 != RX10_TEMP266 ; 
if ( RX10_TEMP267 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP265 = "Bad place access for array X10_TEMP169" ; 
fprintf(stderr, RX10_TEMP265 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP268 = getRefArrayValue3double ( X10_TEMP169 , RX10_TEMP260 ) ; 
X10_TEMP181 = RX10_TEMP268 ; } 

const double X10_TEMP182 = X10_TEMP181 ; 
const double X10_TEMP183 = X10_TEMP182 ; 
/*UpdatableVariableDeclaration*/double tmp0 = X10_TEMP183 ; 
/*UpdatableVariableDeclaration*/double tmp1 = tmp3 * tmp0 ; 
struct doubleRefArray3 X10_TEMP187 = X10_TEMP0 .ffg ; 
const int X10_TEMP191 = 0 ; 
struct Point3 RX10_TEMP269  ; 
Point3_Point3( &RX10_TEMP269/*Assignment*/, i , X10_TEMP191 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP270 = X10_TEMP187 .distValue ; 
struct Region3 RX10_TEMP271 = RX10_TEMP270 .dReg ; 
const int RX10_TEMP272 = searchPointInRegion3 ( RX10_TEMP271 , RX10_TEMP269 ) ; 
const int RX10_TEMP273 = 0 ; 
const int RX10_TEMP274 = RX10_TEMP272 < RX10_TEMP273 ; 
if ( RX10_TEMP274 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP275 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP275 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP276 = getPlaceFromDist3 ( RX10_TEMP270 , RX10_TEMP272 ) ; 
const int RX10_TEMP278 = /* here  */ 0 ; 
const int RX10_TEMP279 = RX10_TEMP276 != RX10_TEMP278 ; 
if ( RX10_TEMP279 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP277 = "Bad place access for array X10_TEMP187" ; 
fprintf(stderr, RX10_TEMP277 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP280 = getRefArrayValue3double ( X10_TEMP187 , RX10_TEMP272 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP193 = RX10_TEMP280 ; 
struct Complex x0  ; 
Complex_Complex( &x0/*Assignment*/, tmp1 , X10_TEMP193 ) ; 
const int X10_TEMP197 = 0 ; 
const int X10_TEMP200 = 0 ; 
struct Point2 RX10_TEMP281  ; 
Point2_Point2( &RX10_TEMP281/*Assignment*/, i , X10_TEMP200 ) ; 
struct Dist2 RX10_TEMP282 = q .distValue ; 
struct Region2 RX10_TEMP283 = RX10_TEMP282 .dReg ; 
const int RX10_TEMP284 = searchPointInRegion2 ( RX10_TEMP283 , RX10_TEMP281 ) ; 
const int RX10_TEMP285 = 0 ; 
const int RX10_TEMP286 = RX10_TEMP284 < RX10_TEMP285 ; 
if ( RX10_TEMP286 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP287 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP287 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP288 = getPlaceFromDist2 ( RX10_TEMP282 , RX10_TEMP284 ) ; 
const int RX10_TEMP290 = /* here  */ 0 ; 
const int RX10_TEMP291 = RX10_TEMP288 != RX10_TEMP290 ; 
if ( RX10_TEMP291 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP289 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP289 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP292 = getRefArrayValue2Complex ( q , RX10_TEMP284 ) ; 
struct Complex X10_TEMP202 = RX10_TEMP292 ; 
struct Complex X10_TEMP204 = Complex_mult ( x0 , X10_TEMP202 ) ; 
struct Complex X10_TEMP205 = X10_TEMP204 ; 
struct Point2 RX10_TEMP293  ; 
Point2_Point2( &RX10_TEMP293/*Assignment*/, i , X10_TEMP197 ) ; 
struct Dist2 RX10_TEMP294 = forceX .distValue ; 
struct Region2 RX10_TEMP295 = RX10_TEMP294 .dReg ; 
const int RX10_TEMP296 = searchPointInRegion2 ( RX10_TEMP295 , RX10_TEMP293 ) ; 
const int RX10_TEMP297 = 0 ; 
const int RX10_TEMP298 = RX10_TEMP296 < RX10_TEMP297 ; 
if ( RX10_TEMP298 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP299 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP299 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP300 = getPlaceFromDist2 ( RX10_TEMP294 , RX10_TEMP296 ) ; 
const int RX10_TEMP302 = /* here  */ 0 ; 
const int RX10_TEMP303 = RX10_TEMP300 != RX10_TEMP302 ; 
if ( RX10_TEMP303 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP301 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP301 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP296 , X10_TEMP205 ) ; 
const int X10_TEMP208 = 0 ; 
const int X10_TEMP211 = 0 ; 
struct Point2 RX10_TEMP304  ; 
Point2_Point2( &RX10_TEMP304/*Assignment*/, i , X10_TEMP211 ) ; 
struct Dist2 RX10_TEMP305 = q .distValue ; 
struct Region2 RX10_TEMP306 = RX10_TEMP305 .dReg ; 
const int RX10_TEMP307 = searchPointInRegion2 ( RX10_TEMP306 , RX10_TEMP304 ) ; 
const int RX10_TEMP308 = 0 ; 
const int RX10_TEMP309 = RX10_TEMP307 < RX10_TEMP308 ; 
if ( RX10_TEMP309 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP310 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP310 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP311 = getPlaceFromDist2 ( RX10_TEMP305 , RX10_TEMP307 ) ; 
const int RX10_TEMP313 = /* here  */ 0 ; 
const int RX10_TEMP314 = RX10_TEMP311 != RX10_TEMP313 ; 
if ( RX10_TEMP314 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP312 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP312 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP315 = getRefArrayValue2Complex ( q , RX10_TEMP307 ) ; 
struct Complex X10_TEMP212 = RX10_TEMP315 ; 
struct doubleRefArray3 X10_TEMP213 = X10_TEMP0 .ffg ; 
const int X10_TEMP217 = 0 ; 
struct Point3 RX10_TEMP316  ; 
Point3_Point3( &RX10_TEMP316/*Assignment*/, i , X10_TEMP217 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP317 = X10_TEMP213 .distValue ; 
struct Region3 RX10_TEMP318 = RX10_TEMP317 .dReg ; 
const int RX10_TEMP319 = searchPointInRegion3 ( RX10_TEMP318 , RX10_TEMP316 ) ; 
const int RX10_TEMP320 = 0 ; 
const int RX10_TEMP321 = RX10_TEMP319 < RX10_TEMP320 ; 
if ( RX10_TEMP321 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP322 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP322 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP323 = getPlaceFromDist3 ( RX10_TEMP317 , RX10_TEMP319 ) ; 
const int RX10_TEMP325 = /* here  */ 0 ; 
const int RX10_TEMP326 = RX10_TEMP323 != RX10_TEMP325 ; 
if ( RX10_TEMP326 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP324 = "Bad place access for array X10_TEMP213" ; 
fprintf(stderr, RX10_TEMP324 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP327 = getRefArrayValue3double ( X10_TEMP213 , RX10_TEMP319 ) ; 
const double X10_TEMP219 = RX10_TEMP327 ; 
struct Complex X10_TEMP221 = Complex_multS ( X10_TEMP212 , X10_TEMP219 ) ; 
struct Complex X10_TEMP222 = X10_TEMP221 ; 
struct Point2 RX10_TEMP328  ; 
Point2_Point2( &RX10_TEMP328/*Assignment*/, i , X10_TEMP208 ) ; 
struct Dist2 RX10_TEMP329 = forceY .distValue ; 
struct Region2 RX10_TEMP330 = RX10_TEMP329 .dReg ; 
const int RX10_TEMP331 = searchPointInRegion2 ( RX10_TEMP330 , RX10_TEMP328 ) ; 
const int RX10_TEMP332 = 0 ; 
const int RX10_TEMP333 = RX10_TEMP331 < RX10_TEMP332 ; 
if ( RX10_TEMP333 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP334 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP334 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP335 = getPlaceFromDist2 ( RX10_TEMP329 , RX10_TEMP331 ) ; 
const int RX10_TEMP337 = /* here  */ 0 ; 
const int RX10_TEMP338 = RX10_TEMP335 != RX10_TEMP337 ; 
if ( RX10_TEMP338 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP336 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP336 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP331 , X10_TEMP222 ) ; 
struct Dist1 RX10_TEMP339 = energy .distValue ; 
struct Region1 RX10_TEMP340 = RX10_TEMP339 .dReg ; 
const int RX10_TEMP341 = searchPointInRegion1 ( RX10_TEMP340 , pl ) ; 
const int RX10_TEMP342 = 0 ; 
const int RX10_TEMP343 = RX10_TEMP341 < RX10_TEMP342 ; 
if ( RX10_TEMP343 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP344 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP344 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP345 = getPlaceFromDist1 ( RX10_TEMP339 , RX10_TEMP341 ) ; 
const int RX10_TEMP347 = /* here  */ 0 ; 
const int RX10_TEMP348 = RX10_TEMP345 != RX10_TEMP347 ; 
if ( RX10_TEMP348 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP346 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP346 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP349 = getRefArrayValue1double ( energy , RX10_TEMP341 ) ; 
const double X10_TEMP238 = RX10_TEMP349 ; 
struct doubleRefArray3 X10_TEMP225 = X10_TEMP0 .ffg ; 
const int X10_TEMP229 = 0 ; 
struct Point3 RX10_TEMP350  ; 
Point3_Point3( &RX10_TEMP350/*Assignment*/, i , X10_TEMP229 , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP351 = X10_TEMP225 .distValue ; 
struct Region3 RX10_TEMP352 = RX10_TEMP351 .dReg ; 
const int RX10_TEMP353 = searchPointInRegion3 ( RX10_TEMP352 , RX10_TEMP350 ) ; 
const int RX10_TEMP354 = 0 ; 
const int RX10_TEMP355 = RX10_TEMP353 < RX10_TEMP354 ; 
if ( RX10_TEMP355 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP356 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP356 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP357 = getPlaceFromDist3 ( RX10_TEMP351 , RX10_TEMP353 ) ; 
const int RX10_TEMP359 = /* here  */ 0 ; 
const int RX10_TEMP360 = RX10_TEMP357 != RX10_TEMP359 ; 
if ( RX10_TEMP360 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP358 = "Bad place access for array X10_TEMP225" ; 
fprintf(stderr, RX10_TEMP358 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP361 = getRefArrayValue3double ( X10_TEMP225 , RX10_TEMP353 ) ; 
const double X10_TEMP234 = RX10_TEMP361 ; 
const int X10_TEMP232 = 0 ; 
struct Point2 RX10_TEMP362  ; 
Point2_Point2( &RX10_TEMP362/*Assignment*/, i , X10_TEMP232 ) ; 
struct Dist2 RX10_TEMP363 = q .distValue ; 
struct Region2 RX10_TEMP364 = RX10_TEMP363 .dReg ; 
const int RX10_TEMP365 = searchPointInRegion2 ( RX10_TEMP364 , RX10_TEMP362 ) ; 
const int RX10_TEMP366 = 0 ; 
const int RX10_TEMP367 = RX10_TEMP365 < RX10_TEMP366 ; 
if ( RX10_TEMP367 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP368 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP368 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP369 = getPlaceFromDist2 ( RX10_TEMP363 , RX10_TEMP365 ) ; 
const int RX10_TEMP371 = /* here  */ 0 ; 
const int RX10_TEMP372 = RX10_TEMP369 != RX10_TEMP371 ; 
if ( RX10_TEMP372 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP370 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP370 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP373 = getRefArrayValue2Complex ( q , RX10_TEMP365 ) ; 
struct Complex X10_TEMP233 = RX10_TEMP373 ; 
const double X10_TEMP235 = Complex_multConjg ( X10_TEMP233 ) ; 
const double X10_TEMP237 = X10_TEMP234 * X10_TEMP235 ; 
const double X10_TEMP240 = X10_TEMP238 + X10_TEMP237 ; 
const double X10_TEMP241 = X10_TEMP240 ; 
struct Dist1 RX10_TEMP374 = energy .distValue ; 
struct Region1 RX10_TEMP375 = RX10_TEMP374 .dReg ; 
const int RX10_TEMP376 = searchPointInRegion1 ( RX10_TEMP375 , pl ) ; 
const int RX10_TEMP377 = 0 ; 
const int RX10_TEMP378 = RX10_TEMP376 < RX10_TEMP377 ; 
if ( RX10_TEMP378 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP379 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP379 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP380 = getPlaceFromDist1 ( RX10_TEMP374 , RX10_TEMP376 ) ; 
const int RX10_TEMP382 = /* here  */ 0 ; 
const int RX10_TEMP383 = RX10_TEMP380 != RX10_TEMP382 ; 
if ( RX10_TEMP383 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP381 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP381 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP376 , X10_TEMP241 ) ; 
const int X10_TEMP242 = /* here  */ 0 ; 
const int X10_TEMP244 = /* X10_TEMP242 . isFirst ( )  */ 1 ; 
const int X10_TEMP245 = X10_TEMP244 ; 
struct doubleRefArray3 X10_TEMP246 = X10_TEMP0 .ffg ; 
const int X10_TEMP250 = 0 ; 
const int X10_TEMP251 = X10_TEMP0 .y ; 
struct doubleValArray2 X10_TEMP253 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP256 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP384  ; 
Point2_Point2( &RX10_TEMP384/*Assignment*/, X10_TEMP256 , _PoissonSolver_ELECX_IDX ) ; 
struct Region2 RX10_TEMP385 = X10_TEMP253 .regionValue ; 
const int RX10_TEMP386 = searchPointInRegion2 ( RX10_TEMP385 , RX10_TEMP384 ) ; 
const int RX10_TEMP387 = 0 ; 
const int RX10_TEMP388 = RX10_TEMP386 < RX10_TEMP387 ; 
if ( RX10_TEMP388 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP389 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP389 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP390 = X10_TEMP253 .contents ; 
/*UpdatableVariableDeclaration*/double X10_TEMP258 = RX10_TEMP390 [ RX10_TEMP386 ] 
; 
if ( X10_TEMP245 ) 
{ struct Point3 RX10_TEMP391  ; 
Point3_Point3( &RX10_TEMP391/*Assignment*/, X10_TEMP250 , X10_TEMP251 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP392 = X10_TEMP246 .distValue ; 
struct Region3 RX10_TEMP393 = RX10_TEMP392 .dReg ; 
const int RX10_TEMP394 = searchPointInRegion3 ( RX10_TEMP393 , RX10_TEMP391 ) ; 
const int RX10_TEMP395 = 0 ; 
const int RX10_TEMP396 = RX10_TEMP394 < RX10_TEMP395 ; 
if ( RX10_TEMP396 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP397 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP397 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP398 = getPlaceFromDist3 ( RX10_TEMP392 , RX10_TEMP394 ) ; 
const int RX10_TEMP400 = /* here  */ 0 ; 
const int RX10_TEMP401 = RX10_TEMP398 != RX10_TEMP400 ; 
if ( RX10_TEMP401 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP399 = "Bad place access for array X10_TEMP246" ; 
fprintf(stderr, RX10_TEMP399 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP402 = getRefArrayValue3double ( X10_TEMP246 , RX10_TEMP394 ) ; 
X10_TEMP258 = RX10_TEMP402 ; } 

const double X10_TEMP259 = X10_TEMP258 ; 
const double X10_TEMP260 = X10_TEMP259 ; 
tmp0 = X10_TEMP260 ; const double X10_TEMP263 = tmp3 * tmp0 ; 
tmp1 = X10_TEMP263 ; struct doubleRefArray3 X10_TEMP265 = X10_TEMP0 .ffg ; 
const int X10_TEMP269 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP403  ; 
Point3_Point3( &RX10_TEMP403/*Assignment*/, i , X10_TEMP269 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP404 = X10_TEMP265 .distValue ; 
struct Region3 RX10_TEMP405 = RX10_TEMP404 .dReg ; 
const int RX10_TEMP406 = searchPointInRegion3 ( RX10_TEMP405 , RX10_TEMP403 ) ; 
const int RX10_TEMP407 = 0 ; 
const int RX10_TEMP408 = RX10_TEMP406 < RX10_TEMP407 ; 
if ( RX10_TEMP408 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP409 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP409 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP410 = getPlaceFromDist3 ( RX10_TEMP404 , RX10_TEMP406 ) ; 
const int RX10_TEMP412 = /* here  */ 0 ; 
const int RX10_TEMP413 = RX10_TEMP410 != RX10_TEMP412 ; 
if ( RX10_TEMP413 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP411 = "Bad place access for array X10_TEMP265" ; 
fprintf(stderr, RX10_TEMP411 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP414 = getRefArrayValue3double ( X10_TEMP265 , RX10_TEMP406 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP271 = RX10_TEMP414 ; 
struct Complex xNY  ; 
Complex_Complex( &xNY/*Assignment*/, tmp1 , X10_TEMP271 ) ; 
const int X10_TEMP275 = X10_TEMP0 .y ; 
const int X10_TEMP278 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP415  ; 
Point2_Point2( &RX10_TEMP415/*Assignment*/, i , X10_TEMP278 ) ; 
struct Dist2 RX10_TEMP416 = q .distValue ; 
struct Region2 RX10_TEMP417 = RX10_TEMP416 .dReg ; 
const int RX10_TEMP418 = searchPointInRegion2 ( RX10_TEMP417 , RX10_TEMP415 ) ; 
const int RX10_TEMP419 = 0 ; 
const int RX10_TEMP420 = RX10_TEMP418 < RX10_TEMP419 ; 
if ( RX10_TEMP420 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP421 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP421 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP422 = getPlaceFromDist2 ( RX10_TEMP416 , RX10_TEMP418 ) ; 
const int RX10_TEMP424 = /* here  */ 0 ; 
const int RX10_TEMP425 = RX10_TEMP422 != RX10_TEMP424 ; 
if ( RX10_TEMP425 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP423 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP423 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP426 = getRefArrayValue2Complex ( q , RX10_TEMP418 ) ; 
struct Complex X10_TEMP280 = RX10_TEMP426 ; 
struct Complex X10_TEMP282 = Complex_mult ( xNY , X10_TEMP280 ) ; 
struct Complex X10_TEMP283 = X10_TEMP282 ; 
struct Point2 RX10_TEMP427  ; 
Point2_Point2( &RX10_TEMP427/*Assignment*/, i , X10_TEMP275 ) ; 
struct Dist2 RX10_TEMP428 = forceX .distValue ; 
struct Region2 RX10_TEMP429 = RX10_TEMP428 .dReg ; 
const int RX10_TEMP430 = searchPointInRegion2 ( RX10_TEMP429 , RX10_TEMP427 ) ; 
const int RX10_TEMP431 = 0 ; 
const int RX10_TEMP432 = RX10_TEMP430 < RX10_TEMP431 ; 
if ( RX10_TEMP432 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP433 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP433 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP434 = getPlaceFromDist2 ( RX10_TEMP428 , RX10_TEMP430 ) ; 
const int RX10_TEMP436 = /* here  */ 0 ; 
const int RX10_TEMP437 = RX10_TEMP434 != RX10_TEMP436 ; 
if ( RX10_TEMP437 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP435 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP435 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP430 , X10_TEMP283 ) ; 
const int X10_TEMP286 = X10_TEMP0 .y ; 
const int X10_TEMP289 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP438  ; 
Point2_Point2( &RX10_TEMP438/*Assignment*/, i , X10_TEMP289 ) ; 
struct Dist2 RX10_TEMP439 = q .distValue ; 
struct Region2 RX10_TEMP440 = RX10_TEMP439 .dReg ; 
const int RX10_TEMP441 = searchPointInRegion2 ( RX10_TEMP440 , RX10_TEMP438 ) ; 
const int RX10_TEMP442 = 0 ; 
const int RX10_TEMP443 = RX10_TEMP441 < RX10_TEMP442 ; 
if ( RX10_TEMP443 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP444 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP444 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP445 = getPlaceFromDist2 ( RX10_TEMP439 , RX10_TEMP441 ) ; 
const int RX10_TEMP447 = /* here  */ 0 ; 
const int RX10_TEMP448 = RX10_TEMP445 != RX10_TEMP447 ; 
if ( RX10_TEMP448 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP446 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP446 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP449 = getRefArrayValue2Complex ( q , RX10_TEMP441 ) ; 
struct Complex X10_TEMP290 = RX10_TEMP449 ; 
struct doubleRefArray3 X10_TEMP291 = X10_TEMP0 .ffg ; 
const int X10_TEMP295 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP450  ; 
Point3_Point3( &RX10_TEMP450/*Assignment*/, i , X10_TEMP295 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP451 = X10_TEMP291 .distValue ; 
struct Region3 RX10_TEMP452 = RX10_TEMP451 .dReg ; 
const int RX10_TEMP453 = searchPointInRegion3 ( RX10_TEMP452 , RX10_TEMP450 ) ; 
const int RX10_TEMP454 = 0 ; 
const int RX10_TEMP455 = RX10_TEMP453 < RX10_TEMP454 ; 
if ( RX10_TEMP455 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP456 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP456 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP457 = getPlaceFromDist3 ( RX10_TEMP451 , RX10_TEMP453 ) ; 
const int RX10_TEMP459 = /* here  */ 0 ; 
const int RX10_TEMP460 = RX10_TEMP457 != RX10_TEMP459 ; 
if ( RX10_TEMP460 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP458 = "Bad place access for array X10_TEMP291" ; 
fprintf(stderr, RX10_TEMP458 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP461 = getRefArrayValue3double ( X10_TEMP291 , RX10_TEMP453 ) ; 
const double X10_TEMP297 = RX10_TEMP461 ; 
struct Complex X10_TEMP299 = Complex_multS ( X10_TEMP290 , X10_TEMP297 ) ; 
struct Complex X10_TEMP300 = X10_TEMP299 ; 
struct Point2 RX10_TEMP462  ; 
Point2_Point2( &RX10_TEMP462/*Assignment*/, i , X10_TEMP286 ) ; 
struct Dist2 RX10_TEMP463 = forceY .distValue ; 
struct Region2 RX10_TEMP464 = RX10_TEMP463 .dReg ; 
const int RX10_TEMP465 = searchPointInRegion2 ( RX10_TEMP464 , RX10_TEMP462 ) ; 
const int RX10_TEMP466 = 0 ; 
const int RX10_TEMP467 = RX10_TEMP465 < RX10_TEMP466 ; 
if ( RX10_TEMP467 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP468 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP468 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP469 = getPlaceFromDist2 ( RX10_TEMP463 , RX10_TEMP465 ) ; 
const int RX10_TEMP471 = /* here  */ 0 ; 
const int RX10_TEMP472 = RX10_TEMP469 != RX10_TEMP471 ; 
if ( RX10_TEMP472 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP470 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP470 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP465 , X10_TEMP300 ) ; 
struct Dist1 RX10_TEMP473 = energy .distValue ; 
struct Region1 RX10_TEMP474 = RX10_TEMP473 .dReg ; 
const int RX10_TEMP475 = searchPointInRegion1 ( RX10_TEMP474 , pl ) ; 
const int RX10_TEMP476 = 0 ; 
const int RX10_TEMP477 = RX10_TEMP475 < RX10_TEMP476 ; 
if ( RX10_TEMP477 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP478 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP478 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP479 = getPlaceFromDist1 ( RX10_TEMP473 , RX10_TEMP475 ) ; 
const int RX10_TEMP481 = /* here  */ 0 ; 
const int RX10_TEMP482 = RX10_TEMP479 != RX10_TEMP481 ; 
if ( RX10_TEMP482 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP480 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP480 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP483 = getRefArrayValue1double ( energy , RX10_TEMP475 ) ; 
const double X10_TEMP316 = RX10_TEMP483 ; 
struct doubleRefArray3 X10_TEMP303 = X10_TEMP0 .ffg ; 
const int X10_TEMP307 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP484  ; 
Point3_Point3( &RX10_TEMP484/*Assignment*/, i , X10_TEMP307 , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP485 = X10_TEMP303 .distValue ; 
struct Region3 RX10_TEMP486 = RX10_TEMP485 .dReg ; 
const int RX10_TEMP487 = searchPointInRegion3 ( RX10_TEMP486 , RX10_TEMP484 ) ; 
const int RX10_TEMP488 = 0 ; 
const int RX10_TEMP489 = RX10_TEMP487 < RX10_TEMP488 ; 
if ( RX10_TEMP489 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP490 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP490 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP491 = getPlaceFromDist3 ( RX10_TEMP485 , RX10_TEMP487 ) ; 
const int RX10_TEMP493 = /* here  */ 0 ; 
const int RX10_TEMP494 = RX10_TEMP491 != RX10_TEMP493 ; 
if ( RX10_TEMP494 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP492 = "Bad place access for array X10_TEMP303" ; 
fprintf(stderr, RX10_TEMP492 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP495 = getRefArrayValue3double ( X10_TEMP303 , RX10_TEMP487 ) ; 
const double X10_TEMP312 = RX10_TEMP495 ; 
const int X10_TEMP310 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP496  ; 
Point2_Point2( &RX10_TEMP496/*Assignment*/, i , X10_TEMP310 ) ; 
struct Dist2 RX10_TEMP497 = q .distValue ; 
struct Region2 RX10_TEMP498 = RX10_TEMP497 .dReg ; 
const int RX10_TEMP499 = searchPointInRegion2 ( RX10_TEMP498 , RX10_TEMP496 ) ; 
const int RX10_TEMP500 = 0 ; 
const int RX10_TEMP501 = RX10_TEMP499 < RX10_TEMP500 ; 
if ( RX10_TEMP501 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP502 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP502 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP503 = getPlaceFromDist2 ( RX10_TEMP497 , RX10_TEMP499 ) ; 
const int RX10_TEMP505 = /* here  */ 0 ; 
const int RX10_TEMP506 = RX10_TEMP503 != RX10_TEMP505 ; 
if ( RX10_TEMP506 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP504 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP504 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP507 = getRefArrayValue2Complex ( q , RX10_TEMP499 ) ; 
struct Complex X10_TEMP311 = RX10_TEMP507 ; 
const double X10_TEMP313 = Complex_multConjg ( X10_TEMP311 ) ; 
const double X10_TEMP315 = X10_TEMP312 * X10_TEMP313 ; 
const double X10_TEMP318 = X10_TEMP316 + X10_TEMP315 ; 
const double X10_TEMP319 = X10_TEMP318 ; 
struct Dist1 RX10_TEMP508 = energy .distValue ; 
struct Region1 RX10_TEMP509 = RX10_TEMP508 .dReg ; 
const int RX10_TEMP510 = searchPointInRegion1 ( RX10_TEMP509 , pl ) ; 
const int RX10_TEMP511 = 0 ; 
const int RX10_TEMP512 = RX10_TEMP510 < RX10_TEMP511 ; 
if ( RX10_TEMP512 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP513 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP513 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP514 = getPlaceFromDist1 ( RX10_TEMP508 , RX10_TEMP510 ) ; 
const int RX10_TEMP516 = /* here  */ 0 ; 
const int RX10_TEMP517 = RX10_TEMP514 != RX10_TEMP516 ; 
if ( RX10_TEMP517 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP515 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP515 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP510 , X10_TEMP319 ) ; 
} 

} 

const int X10_TEMP320 = /* here  */ 0 ; 
const int X10_TEMP322 = /* X10_TEMP320 . isFirst ( )  */ 1 ; 
if ( X10_TEMP322 ) 
{ struct doubleRefArray3 X10_TEMP323 = X10_TEMP0 .ffg ; 
const int X10_TEMP327 = 0 ; 
const int X10_TEMP328 = 0 ; 
struct Point3 RX10_TEMP518  ; 
Point3_Point3( &RX10_TEMP518/*Assignment*/, X10_TEMP327 , X10_TEMP328 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP519 = X10_TEMP323 .distValue ; 
struct Region3 RX10_TEMP520 = RX10_TEMP519 .dReg ; 
const int RX10_TEMP521 = searchPointInRegion3 ( RX10_TEMP520 , RX10_TEMP518 ) ; 
const int RX10_TEMP522 = 0 ; 
const int RX10_TEMP523 = RX10_TEMP521 < RX10_TEMP522 ; 
if ( RX10_TEMP523 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP524 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP524 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP525 = getPlaceFromDist3 ( RX10_TEMP519 , RX10_TEMP521 ) ; 
const int RX10_TEMP527 = /* here  */ 0 ; 
const int RX10_TEMP528 = RX10_TEMP525 != RX10_TEMP527 ; 
if ( RX10_TEMP528 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP526 = "Bad place access for array X10_TEMP323" ; 
fprintf(stderr, RX10_TEMP526 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP529 = getRefArrayValue3double ( X10_TEMP323 , RX10_TEMP521 ) ; 
const double X10_TEMP330 = RX10_TEMP529 ; 
tmp3 = X10_TEMP330 ; const int X10_TEMP335 = 1 ; 
const int X10_TEMP332 = X10_TEMP0 .y ; 
const int X10_TEMP333 = 1 ; 
const int X10_TEMP336 = X10_TEMP332 - X10_TEMP333 ; 
struct Region1 X10_TEMP338 = createNewRegion1R ( X10_TEMP335 , X10_TEMP336 ) ; 
const int RX10_TEMP534 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP532 = X10_TEMP338 .regSize ; 
RX10_TEMP532 = RX10_TEMP532 - RX10_TEMP534 ; const int SX10_TEMP15 = 1 ; 
const int RX10_TEMP533 = RX10_TEMP532 + SX10_TEMP15 ; 
for ( int SX10_TEMP16 = 0 ; SX10_TEMP16 < RX10_TEMP533 ; SX10_TEMP16 ++ ) 
{ const int RX10_TEMP530 = SX10_TEMP16 ; 
const int RX10_TEMP535 = RX10_TEMP530 ; 
struct Point1 RX10_TEMP531 = regionOrdinalPoint1 ( X10_TEMP338 , RX10_TEMP535 ) ; 
const int j = RX10_TEMP531 .f0 ; 
const int X10_TEMP339 = 0 ; 
const double X10_TEMP341 = X10_TEMP339 - tmp3 ; 
tmp3 = X10_TEMP341 ; struct doubleRefArray3 X10_TEMP343 = X10_TEMP0 .ffg ; 
const int X10_TEMP347 = 0 ; 
struct Point3 RX10_TEMP536  ; 
Point3_Point3( &RX10_TEMP536/*Assignment*/, X10_TEMP347 , j , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP537 = X10_TEMP343 .distValue ; 
struct Region3 RX10_TEMP538 = RX10_TEMP537 .dReg ; 
const int RX10_TEMP539 = searchPointInRegion3 ( RX10_TEMP538 , RX10_TEMP536 ) ; 
const int RX10_TEMP540 = 0 ; 
const int RX10_TEMP541 = RX10_TEMP539 < RX10_TEMP540 ; 
if ( RX10_TEMP541 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP542 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP542 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP543 = getPlaceFromDist3 ( RX10_TEMP537 , RX10_TEMP539 ) ; 
const int RX10_TEMP545 = /* here  */ 0 ; 
const int RX10_TEMP546 = RX10_TEMP543 != RX10_TEMP545 ; 
if ( RX10_TEMP546 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP544 = "Bad place access for array X10_TEMP343" ; 
fprintf(stderr, RX10_TEMP544 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP547 = getRefArrayValue3double ( X10_TEMP343 , RX10_TEMP539 ) ; 
/*UpdatableVariableDeclaration*/double X10_TEMP349 = RX10_TEMP547 ; 
struct Complex s  ; 
Complex_Complex( &s/*Assignment*/, tmp3 , X10_TEMP349 ) ; 
const int X10_TEMP353 = 0 ; 
const int X10_TEMP356 = 0 ; 
struct Point2 RX10_TEMP548  ; 
Point2_Point2( &RX10_TEMP548/*Assignment*/, X10_TEMP356 , j ) ; 
struct Dist2 RX10_TEMP549 = q .distValue ; 
struct Region2 RX10_TEMP550 = RX10_TEMP549 .dReg ; 
const int RX10_TEMP551 = searchPointInRegion2 ( RX10_TEMP550 , RX10_TEMP548 ) ; 
const int RX10_TEMP552 = 0 ; 
const int RX10_TEMP553 = RX10_TEMP551 < RX10_TEMP552 ; 
if ( RX10_TEMP553 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP554 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP554 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP555 = getPlaceFromDist2 ( RX10_TEMP549 , RX10_TEMP551 ) ; 
const int RX10_TEMP557 = /* here  */ 0 ; 
const int RX10_TEMP558 = RX10_TEMP555 != RX10_TEMP557 ; 
if ( RX10_TEMP558 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP556 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP556 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP559 = getRefArrayValue2Complex ( q , RX10_TEMP551 ) ; 
struct Complex X10_TEMP357 = RX10_TEMP559 ; 
struct doubleRefArray3 X10_TEMP358 = X10_TEMP0 .ffg ; 
const int X10_TEMP362 = 0 ; 
struct Point3 RX10_TEMP560  ; 
Point3_Point3( &RX10_TEMP560/*Assignment*/, X10_TEMP362 , j , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP561 = X10_TEMP358 .distValue ; 
struct Region3 RX10_TEMP562 = RX10_TEMP561 .dReg ; 
const int RX10_TEMP563 = searchPointInRegion3 ( RX10_TEMP562 , RX10_TEMP560 ) ; 
const int RX10_TEMP564 = 0 ; 
const int RX10_TEMP565 = RX10_TEMP563 < RX10_TEMP564 ; 
if ( RX10_TEMP565 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP566 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP566 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP567 = getPlaceFromDist3 ( RX10_TEMP561 , RX10_TEMP563 ) ; 
const int RX10_TEMP569 = /* here  */ 0 ; 
const int RX10_TEMP570 = RX10_TEMP567 != RX10_TEMP569 ; 
if ( RX10_TEMP570 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP568 = "Bad place access for array X10_TEMP358" ; 
fprintf(stderr, RX10_TEMP568 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP571 = getRefArrayValue3double ( X10_TEMP358 , RX10_TEMP563 ) ; 
const double X10_TEMP364 = RX10_TEMP571 ; 
struct Complex X10_TEMP366 = Complex_multS ( X10_TEMP357 , X10_TEMP364 ) ; 
struct Complex X10_TEMP367 = X10_TEMP366 ; 
struct Point2 RX10_TEMP572  ; 
Point2_Point2( &RX10_TEMP572/*Assignment*/, X10_TEMP353 , j ) ; 
struct Dist2 RX10_TEMP573 = forceX .distValue ; 
struct Region2 RX10_TEMP574 = RX10_TEMP573 .dReg ; 
const int RX10_TEMP575 = searchPointInRegion2 ( RX10_TEMP574 , RX10_TEMP572 ) ; 
const int RX10_TEMP576 = 0 ; 
const int RX10_TEMP577 = RX10_TEMP575 < RX10_TEMP576 ; 
if ( RX10_TEMP577 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP578 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP578 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP579 = getPlaceFromDist2 ( RX10_TEMP573 , RX10_TEMP575 ) ; 
const int RX10_TEMP581 = /* here  */ 0 ; 
const int RX10_TEMP582 = RX10_TEMP579 != RX10_TEMP581 ; 
if ( RX10_TEMP582 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP580 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP580 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP575 , X10_TEMP367 ) ; 
const int X10_TEMP370 = 0 ; 
const int X10_TEMP373 = 0 ; 
struct Point2 RX10_TEMP583  ; 
Point2_Point2( &RX10_TEMP583/*Assignment*/, X10_TEMP373 , j ) ; 
struct Dist2 RX10_TEMP584 = q .distValue ; 
struct Region2 RX10_TEMP585 = RX10_TEMP584 .dReg ; 
const int RX10_TEMP586 = searchPointInRegion2 ( RX10_TEMP585 , RX10_TEMP583 ) ; 
const int RX10_TEMP587 = 0 ; 
const int RX10_TEMP588 = RX10_TEMP586 < RX10_TEMP587 ; 
if ( RX10_TEMP588 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP589 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP589 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP590 = getPlaceFromDist2 ( RX10_TEMP584 , RX10_TEMP586 ) ; 
const int RX10_TEMP592 = /* here  */ 0 ; 
const int RX10_TEMP593 = RX10_TEMP590 != RX10_TEMP592 ; 
if ( RX10_TEMP593 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP591 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP591 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP594 = getRefArrayValue2Complex ( q , RX10_TEMP586 ) ; 
struct Complex X10_TEMP375 = RX10_TEMP594 ; 
struct Complex X10_TEMP377 = Complex_mult ( s , X10_TEMP375 ) ; 
struct Complex X10_TEMP378 = X10_TEMP377 ; 
struct Point2 RX10_TEMP595  ; 
Point2_Point2( &RX10_TEMP595/*Assignment*/, X10_TEMP370 , j ) ; 
struct Dist2 RX10_TEMP596 = forceY .distValue ; 
struct Region2 RX10_TEMP597 = RX10_TEMP596 .dReg ; 
const int RX10_TEMP598 = searchPointInRegion2 ( RX10_TEMP597 , RX10_TEMP595 ) ; 
const int RX10_TEMP599 = 0 ; 
const int RX10_TEMP600 = RX10_TEMP598 < RX10_TEMP599 ; 
if ( RX10_TEMP600 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP601 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP601 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP602 = getPlaceFromDist2 ( RX10_TEMP596 , RX10_TEMP598 ) ; 
const int RX10_TEMP604 = /* here  */ 0 ; 
const int RX10_TEMP605 = RX10_TEMP602 != RX10_TEMP604 ; 
if ( RX10_TEMP605 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP603 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP603 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP598 , X10_TEMP378 ) ; 
struct Dist1 RX10_TEMP606 = energy .distValue ; 
struct Region1 RX10_TEMP607 = RX10_TEMP606 .dReg ; 
const int RX10_TEMP608 = searchPointInRegion1 ( RX10_TEMP607 , pl ) ; 
const int RX10_TEMP609 = 0 ; 
const int RX10_TEMP610 = RX10_TEMP608 < RX10_TEMP609 ; 
if ( RX10_TEMP610 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP611 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP611 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP612 = getPlaceFromDist1 ( RX10_TEMP606 , RX10_TEMP608 ) ; 
const int RX10_TEMP614 = /* here  */ 0 ; 
const int RX10_TEMP615 = RX10_TEMP612 != RX10_TEMP614 ; 
if ( RX10_TEMP615 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP613 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP613 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP616 = getRefArrayValue1double ( energy , RX10_TEMP608 ) ; 
const double X10_TEMP394 = RX10_TEMP616 ; 
struct doubleRefArray3 X10_TEMP381 = X10_TEMP0 .ffg ; 
const int X10_TEMP385 = 0 ; 
struct Point3 RX10_TEMP617  ; 
Point3_Point3( &RX10_TEMP617/*Assignment*/, X10_TEMP385 , j , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP618 = X10_TEMP381 .distValue ; 
struct Region3 RX10_TEMP619 = RX10_TEMP618 .dReg ; 
const int RX10_TEMP620 = searchPointInRegion3 ( RX10_TEMP619 , RX10_TEMP617 ) ; 
const int RX10_TEMP621 = 0 ; 
const int RX10_TEMP622 = RX10_TEMP620 < RX10_TEMP621 ; 
if ( RX10_TEMP622 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP623 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP623 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP624 = getPlaceFromDist3 ( RX10_TEMP618 , RX10_TEMP620 ) ; 
const int RX10_TEMP626 = /* here  */ 0 ; 
const int RX10_TEMP627 = RX10_TEMP624 != RX10_TEMP626 ; 
if ( RX10_TEMP627 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP625 = "Bad place access for array X10_TEMP381" ; 
fprintf(stderr, RX10_TEMP625 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP628 = getRefArrayValue3double ( X10_TEMP381 , RX10_TEMP620 ) ; 
const double X10_TEMP390 = RX10_TEMP628 ; 
const int X10_TEMP388 = 0 ; 
struct Point2 RX10_TEMP629  ; 
Point2_Point2( &RX10_TEMP629/*Assignment*/, X10_TEMP388 , j ) ; 
struct Dist2 RX10_TEMP630 = q .distValue ; 
struct Region2 RX10_TEMP631 = RX10_TEMP630 .dReg ; 
const int RX10_TEMP632 = searchPointInRegion2 ( RX10_TEMP631 , RX10_TEMP629 ) ; 
const int RX10_TEMP633 = 0 ; 
const int RX10_TEMP634 = RX10_TEMP632 < RX10_TEMP633 ; 
if ( RX10_TEMP634 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP635 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP635 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP636 = getPlaceFromDist2 ( RX10_TEMP630 , RX10_TEMP632 ) ; 
const int RX10_TEMP638 = /* here  */ 0 ; 
const int RX10_TEMP639 = RX10_TEMP636 != RX10_TEMP638 ; 
if ( RX10_TEMP639 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP637 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP637 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP640 = getRefArrayValue2Complex ( q , RX10_TEMP632 ) ; 
struct Complex X10_TEMP389 = RX10_TEMP640 ; 
const double X10_TEMP391 = Complex_multConjg ( X10_TEMP389 ) ; 
const double X10_TEMP393 = X10_TEMP390 * X10_TEMP391 ; 
const double X10_TEMP396 = X10_TEMP394 + X10_TEMP393 ; 
const double X10_TEMP397 = X10_TEMP396 ; 
struct Dist1 RX10_TEMP641 = energy .distValue ; 
struct Region1 RX10_TEMP642 = RX10_TEMP641 .dReg ; 
const int RX10_TEMP643 = searchPointInRegion1 ( RX10_TEMP642 , pl ) ; 
const int RX10_TEMP644 = 0 ; 
const int RX10_TEMP645 = RX10_TEMP643 < RX10_TEMP644 ; 
if ( RX10_TEMP645 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP646 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP646 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP647 = getPlaceFromDist1 ( RX10_TEMP641 , RX10_TEMP643 ) ; 
const int RX10_TEMP649 = /* here  */ 0 ; 
const int RX10_TEMP650 = RX10_TEMP647 != RX10_TEMP649 ; 
if ( RX10_TEMP650 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP648 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP648 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP643 , X10_TEMP397 ) ; 
} 

struct doubleValArray2 X10_TEMP398 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP401 = 0 ; 
struct Point2 RX10_TEMP651  ; 
Point2_Point2( &RX10_TEMP651/*Assignment*/, X10_TEMP401 , _PoissonSolver_ELECY_IDX ) ; 
struct Region2 RX10_TEMP652 = X10_TEMP398 .regionValue ; 
const int RX10_TEMP653 = searchPointInRegion2 ( RX10_TEMP652 , RX10_TEMP651 ) ; 
const int RX10_TEMP654 = 0 ; 
const int RX10_TEMP655 = RX10_TEMP653 < RX10_TEMP654 ; 
if ( RX10_TEMP655 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP656 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP656 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP657 = X10_TEMP398 .contents ; 
const double X10_TEMP403 = RX10_TEMP657 [ RX10_TEMP653 ] 
; 
tmp3 = X10_TEMP403 ; const int X10_TEMP408 = 1 ; 
const int X10_TEMP405 = X10_TEMP0 .y ; 
const int X10_TEMP406 = 1 ; 
const int X10_TEMP409 = X10_TEMP405 - X10_TEMP406 ; 
struct Region1 X10_TEMP411 = createNewRegion1R ( X10_TEMP408 , X10_TEMP409 ) ; 
const int RX10_TEMP662 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP660 = X10_TEMP411 .regSize ; 
RX10_TEMP660 = RX10_TEMP660 - RX10_TEMP662 ; const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP661 = RX10_TEMP660 + SX10_TEMP17 ; 
for ( int SX10_TEMP18 = 0 ; SX10_TEMP18 < RX10_TEMP661 ; SX10_TEMP18 ++ ) 
{ const int RX10_TEMP658 = SX10_TEMP18 ; 
const int RX10_TEMP663 = RX10_TEMP658 ; 
struct Point1 RX10_TEMP659 = regionOrdinalPoint1 ( X10_TEMP411 , RX10_TEMP663 ) ; 
const int j1 = RX10_TEMP659 .f0 ; 
const int X10_TEMP412 = 0 ; 
const double X10_TEMP414 = X10_TEMP412 - tmp3 ; 
tmp3 = X10_TEMP414 ; const int X10_TEMP415 = 2 ; 
const int X10_TEMP416 = X10_TEMP0 .y ; 
const int X10_TEMP417 = X10_TEMP415 * X10_TEMP416 ; 
const int j2 = X10_TEMP417 - j1 ; 
struct doubleValArray2 X10_TEMP420 = X10_TEMP0 .ffg2 ; 
struct Point2 RX10_TEMP664  ; 
Point2_Point2( &RX10_TEMP664/*Assignment*/, j1 , _PoissonSolver_ELECY_IDX ) ; 
struct Region2 RX10_TEMP665 = X10_TEMP420 .regionValue ; 
const int RX10_TEMP666 = searchPointInRegion2 ( RX10_TEMP665 , RX10_TEMP664 ) ; 
const int RX10_TEMP667 = 0 ; 
const int RX10_TEMP668 = RX10_TEMP666 < RX10_TEMP667 ; 
if ( RX10_TEMP668 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP669 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP669 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP670 = X10_TEMP420 .contents ; 
/*UpdatableVariableDeclaration*/double X10_TEMP424 = RX10_TEMP670 [ RX10_TEMP666 ] 
; 
struct Complex s  ; 
Complex_Complex( &s/*Assignment*/, tmp3 , X10_TEMP424 ) ; 
const int X10_TEMP428 = 0 ; 
const int X10_TEMP431 = 0 ; 
struct Point2 RX10_TEMP671  ; 
Point2_Point2( &RX10_TEMP671/*Assignment*/, X10_TEMP431 , j2 ) ; 
struct Dist2 RX10_TEMP672 = q .distValue ; 
struct Region2 RX10_TEMP673 = RX10_TEMP672 .dReg ; 
const int RX10_TEMP674 = searchPointInRegion2 ( RX10_TEMP673 , RX10_TEMP671 ) ; 
const int RX10_TEMP675 = 0 ; 
const int RX10_TEMP676 = RX10_TEMP674 < RX10_TEMP675 ; 
if ( RX10_TEMP676 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP677 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP677 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP678 = getPlaceFromDist2 ( RX10_TEMP672 , RX10_TEMP674 ) ; 
const int RX10_TEMP680 = /* here  */ 0 ; 
const int RX10_TEMP681 = RX10_TEMP678 != RX10_TEMP680 ; 
if ( RX10_TEMP681 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP679 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP679 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP682 = getRefArrayValue2Complex ( q , RX10_TEMP674 ) ; 
struct Complex X10_TEMP432 = RX10_TEMP682 ; 
struct doubleRefArray3 X10_TEMP433 = X10_TEMP0 .ffg ; 
const int X10_TEMP437 = 0 ; 
struct Point3 RX10_TEMP683  ; 
Point3_Point3( &RX10_TEMP683/*Assignment*/, X10_TEMP437 , j1 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP684 = X10_TEMP433 .distValue ; 
struct Region3 RX10_TEMP685 = RX10_TEMP684 .dReg ; 
const int RX10_TEMP686 = searchPointInRegion3 ( RX10_TEMP685 , RX10_TEMP683 ) ; 
const int RX10_TEMP687 = 0 ; 
const int RX10_TEMP688 = RX10_TEMP686 < RX10_TEMP687 ; 
if ( RX10_TEMP688 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP689 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP689 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP690 = getPlaceFromDist3 ( RX10_TEMP684 , RX10_TEMP686 ) ; 
const int RX10_TEMP692 = /* here  */ 0 ; 
const int RX10_TEMP693 = RX10_TEMP690 != RX10_TEMP692 ; 
if ( RX10_TEMP693 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP691 = "Bad place access for array X10_TEMP433" ; 
fprintf(stderr, RX10_TEMP691 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP694 = getRefArrayValue3double ( X10_TEMP433 , RX10_TEMP686 ) ; 
const double X10_TEMP439 = RX10_TEMP694 ; 
struct Complex X10_TEMP441 = Complex_multS ( X10_TEMP432 , X10_TEMP439 ) ; 
struct Complex X10_TEMP442 = X10_TEMP441 ; 
struct Point2 RX10_TEMP695  ; 
Point2_Point2( &RX10_TEMP695/*Assignment*/, X10_TEMP428 , j2 ) ; 
struct Dist2 RX10_TEMP696 = forceX .distValue ; 
struct Region2 RX10_TEMP697 = RX10_TEMP696 .dReg ; 
const int RX10_TEMP698 = searchPointInRegion2 ( RX10_TEMP697 , RX10_TEMP695 ) ; 
const int RX10_TEMP699 = 0 ; 
const int RX10_TEMP700 = RX10_TEMP698 < RX10_TEMP699 ; 
if ( RX10_TEMP700 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP701 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP701 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP702 = getPlaceFromDist2 ( RX10_TEMP696 , RX10_TEMP698 ) ; 
const int RX10_TEMP704 = /* here  */ 0 ; 
const int RX10_TEMP705 = RX10_TEMP702 != RX10_TEMP704 ; 
if ( RX10_TEMP705 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP703 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP703 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP698 , X10_TEMP442 ) ; 
const int X10_TEMP445 = 0 ; 
const int X10_TEMP448 = 0 ; 
struct Point2 RX10_TEMP706  ; 
Point2_Point2( &RX10_TEMP706/*Assignment*/, X10_TEMP448 , j2 ) ; 
struct Dist2 RX10_TEMP707 = q .distValue ; 
struct Region2 RX10_TEMP708 = RX10_TEMP707 .dReg ; 
const int RX10_TEMP709 = searchPointInRegion2 ( RX10_TEMP708 , RX10_TEMP706 ) ; 
const int RX10_TEMP710 = 0 ; 
const int RX10_TEMP711 = RX10_TEMP709 < RX10_TEMP710 ; 
if ( RX10_TEMP711 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP712 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP712 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP713 = getPlaceFromDist2 ( RX10_TEMP707 , RX10_TEMP709 ) ; 
const int RX10_TEMP715 = /* here  */ 0 ; 
const int RX10_TEMP716 = RX10_TEMP713 != RX10_TEMP715 ; 
if ( RX10_TEMP716 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP714 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP714 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP717 = getRefArrayValue2Complex ( q , RX10_TEMP709 ) ; 
struct Complex X10_TEMP450 = RX10_TEMP717 ; 
struct Complex X10_TEMP452 = Complex_mult ( s , X10_TEMP450 ) ; 
struct Complex X10_TEMP453 = X10_TEMP452 ; 
struct Point2 RX10_TEMP718  ; 
Point2_Point2( &RX10_TEMP718/*Assignment*/, X10_TEMP445 , j2 ) ; 
struct Dist2 RX10_TEMP719 = forceY .distValue ; 
struct Region2 RX10_TEMP720 = RX10_TEMP719 .dReg ; 
const int RX10_TEMP721 = searchPointInRegion2 ( RX10_TEMP720 , RX10_TEMP718 ) ; 
const int RX10_TEMP722 = 0 ; 
const int RX10_TEMP723 = RX10_TEMP721 < RX10_TEMP722 ; 
if ( RX10_TEMP723 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP724 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP724 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP725 = getPlaceFromDist2 ( RX10_TEMP719 , RX10_TEMP721 ) ; 
const int RX10_TEMP727 = /* here  */ 0 ; 
const int RX10_TEMP728 = RX10_TEMP725 != RX10_TEMP727 ; 
if ( RX10_TEMP728 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP726 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP726 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP721 , X10_TEMP453 ) ; 
struct Dist1 RX10_TEMP729 = energy .distValue ; 
struct Region1 RX10_TEMP730 = RX10_TEMP729 .dReg ; 
const int RX10_TEMP731 = searchPointInRegion1 ( RX10_TEMP730 , pl ) ; 
const int RX10_TEMP732 = 0 ; 
const int RX10_TEMP733 = RX10_TEMP731 < RX10_TEMP732 ; 
if ( RX10_TEMP733 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP734 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP734 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP735 = getPlaceFromDist1 ( RX10_TEMP729 , RX10_TEMP731 ) ; 
const int RX10_TEMP737 = /* here  */ 0 ; 
const int RX10_TEMP738 = RX10_TEMP735 != RX10_TEMP737 ; 
if ( RX10_TEMP738 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP736 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP736 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP739 = getRefArrayValue1double ( energy , RX10_TEMP731 ) ; 
const double X10_TEMP467 = RX10_TEMP739 ; 
struct doubleValArray2 X10_TEMP456 = X10_TEMP0 .ffg2 ; 
struct Point2 RX10_TEMP740  ; 
Point2_Point2( &RX10_TEMP740/*Assignment*/, j1 , _PoissonSolver_GREENS_IDX ) ; 
struct Region2 RX10_TEMP741 = X10_TEMP456 .regionValue ; 
const int RX10_TEMP742 = searchPointInRegion2 ( RX10_TEMP741 , RX10_TEMP740 ) ; 
const int RX10_TEMP743 = 0 ; 
const int RX10_TEMP744 = RX10_TEMP742 < RX10_TEMP743 ; 
if ( RX10_TEMP744 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP745 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP745 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP746 = X10_TEMP456 .contents ; 
const double X10_TEMP463 = RX10_TEMP746 [ RX10_TEMP742 ] 
; 
const int X10_TEMP461 = 0 ; 
struct Point2 RX10_TEMP747  ; 
Point2_Point2( &RX10_TEMP747/*Assignment*/, X10_TEMP461 , j2 ) ; 
struct Dist2 RX10_TEMP748 = q .distValue ; 
struct Region2 RX10_TEMP749 = RX10_TEMP748 .dReg ; 
const int RX10_TEMP750 = searchPointInRegion2 ( RX10_TEMP749 , RX10_TEMP747 ) ; 
const int RX10_TEMP751 = 0 ; 
const int RX10_TEMP752 = RX10_TEMP750 < RX10_TEMP751 ; 
if ( RX10_TEMP752 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP753 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP753 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP754 = getPlaceFromDist2 ( RX10_TEMP748 , RX10_TEMP750 ) ; 
const int RX10_TEMP756 = /* here  */ 0 ; 
const int RX10_TEMP757 = RX10_TEMP754 != RX10_TEMP756 ; 
if ( RX10_TEMP757 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP755 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP755 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP758 = getRefArrayValue2Complex ( q , RX10_TEMP750 ) ; 
struct Complex X10_TEMP462 = RX10_TEMP758 ; 
const double X10_TEMP464 = Complex_multConjg ( X10_TEMP462 ) ; 
const double X10_TEMP466 = X10_TEMP463 * X10_TEMP464 ; 
const double X10_TEMP469 = X10_TEMP467 + X10_TEMP466 ; 
const double X10_TEMP470 = X10_TEMP469 ; 
struct Dist1 RX10_TEMP759 = energy .distValue ; 
struct Region1 RX10_TEMP760 = RX10_TEMP759 .dReg ; 
const int RX10_TEMP761 = searchPointInRegion1 ( RX10_TEMP760 , pl ) ; 
const int RX10_TEMP762 = 0 ; 
const int RX10_TEMP763 = RX10_TEMP761 < RX10_TEMP762 ; 
if ( RX10_TEMP763 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP764 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP764 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP765 = getPlaceFromDist1 ( RX10_TEMP759 , RX10_TEMP761 ) ; 
const int RX10_TEMP767 = /* here  */ 0 ; 
const int RX10_TEMP768 = RX10_TEMP765 != RX10_TEMP767 ; 
if ( RX10_TEMP768 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP766 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP766 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP761 , X10_TEMP470 ) ; 
} 

const int X10_TEMP473 = 0 ; 
const int X10_TEMP474 = 0 ; 
struct Point2 RX10_TEMP769  ; 
Point2_Point2( &RX10_TEMP769/*Assignment*/, X10_TEMP473 , X10_TEMP474 ) ; 
struct Dist2 RX10_TEMP770 = q .distValue ; 
struct Region2 RX10_TEMP771 = RX10_TEMP770 .dReg ; 
const int RX10_TEMP772 = searchPointInRegion2 ( RX10_TEMP771 , RX10_TEMP769 ) ; 
const int RX10_TEMP773 = 0 ; 
const int RX10_TEMP774 = RX10_TEMP772 < RX10_TEMP773 ; 
if ( RX10_TEMP774 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP775 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP775 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP776 = getPlaceFromDist2 ( RX10_TEMP770 , RX10_TEMP772 ) ; 
const int RX10_TEMP778 = /* here  */ 0 ; 
const int RX10_TEMP779 = RX10_TEMP776 != RX10_TEMP778 ; 
if ( RX10_TEMP779 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP777 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP777 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP780 = getRefArrayValue2Complex ( q , RX10_TEMP772 ) ; 
struct Complex X10_TEMP475 = RX10_TEMP780 ; 
const double q00R = Complex_getReal ( X10_TEMP475 ) ; 
const int X10_TEMP479 = 0 ; 
const int X10_TEMP480 = 0 ; 
struct Point2 RX10_TEMP781  ; 
Point2_Point2( &RX10_TEMP781/*Assignment*/, X10_TEMP479 , X10_TEMP480 ) ; 
struct Dist2 RX10_TEMP782 = q .distValue ; 
struct Region2 RX10_TEMP783 = RX10_TEMP782 .dReg ; 
const int RX10_TEMP784 = searchPointInRegion2 ( RX10_TEMP783 , RX10_TEMP781 ) ; 
const int RX10_TEMP785 = 0 ; 
const int RX10_TEMP786 = RX10_TEMP784 < RX10_TEMP785 ; 
if ( RX10_TEMP786 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP787 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP787 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP788 = getPlaceFromDist2 ( RX10_TEMP782 , RX10_TEMP784 ) ; 
const int RX10_TEMP790 = /* here  */ 0 ; 
const int RX10_TEMP791 = RX10_TEMP788 != RX10_TEMP790 ; 
if ( RX10_TEMP791 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP789 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP789 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP792 = getRefArrayValue2Complex ( q , RX10_TEMP784 ) ; 
struct Complex X10_TEMP481 = RX10_TEMP792 ; 
const double q00I = Complex_getImag ( X10_TEMP481 ) ; 
const int X10_TEMP485 = 0 ; 
const int X10_TEMP486 = 0 ; 
struct doubleRefArray3 X10_TEMP487 = X10_TEMP0 .ffg ; 
const int X10_TEMP491 = 0 ; 
const int X10_TEMP492 = 0 ; 
struct Point3 RX10_TEMP793  ; 
Point3_Point3( &RX10_TEMP793/*Assignment*/, X10_TEMP491 , X10_TEMP492 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP794 = X10_TEMP487 .distValue ; 
struct Region3 RX10_TEMP795 = RX10_TEMP794 .dReg ; 
const int RX10_TEMP796 = searchPointInRegion3 ( RX10_TEMP795 , RX10_TEMP793 ) ; 
const int RX10_TEMP797 = 0 ; 
const int RX10_TEMP798 = RX10_TEMP796 < RX10_TEMP797 ; 
if ( RX10_TEMP798 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP799 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP799 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP800 = getPlaceFromDist3 ( RX10_TEMP794 , RX10_TEMP796 ) ; 
const int RX10_TEMP802 = /* here  */ 0 ; 
const int RX10_TEMP803 = RX10_TEMP800 != RX10_TEMP802 ; 
if ( RX10_TEMP803 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP801 = "Bad place access for array X10_TEMP487" ; 
fprintf(stderr, RX10_TEMP801 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP804 = getRefArrayValue3double ( X10_TEMP487 , RX10_TEMP796 ) ; 
const double X10_TEMP493 = RX10_TEMP804 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP501 = X10_TEMP493 * q00R ; 
struct doubleValArray2 X10_TEMP495 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP498 = 0 ; 
struct Point2 RX10_TEMP805  ; 
Point2_Point2( &RX10_TEMP805/*Assignment*/, X10_TEMP498 , _PoissonSolver_ELECX_IDX ) ; 
struct Region2 RX10_TEMP806 = X10_TEMP495 .regionValue ; 
const int RX10_TEMP807 = searchPointInRegion2 ( RX10_TEMP806 , RX10_TEMP805 ) ; 
const int RX10_TEMP808 = 0 ; 
const int RX10_TEMP809 = RX10_TEMP807 < RX10_TEMP808 ; 
if ( RX10_TEMP809 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP810 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP810 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP811 = X10_TEMP495 .contents ; 
const double X10_TEMP499 = RX10_TEMP811 [ RX10_TEMP807 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP502 = X10_TEMP499 * q00I ; 
struct Complex X10_TEMP504  ; 
Complex_Complex( &X10_TEMP504/*Assignment*/, X10_TEMP501 , X10_TEMP502 ) ; 
struct Complex X10_TEMP505 = X10_TEMP504 ; 
struct Point2 RX10_TEMP812  ; 
Point2_Point2( &RX10_TEMP812/*Assignment*/, X10_TEMP485 , X10_TEMP486 ) ; 
struct Dist2 RX10_TEMP813 = forceX .distValue ; 
struct Region2 RX10_TEMP814 = RX10_TEMP813 .dReg ; 
const int RX10_TEMP815 = searchPointInRegion2 ( RX10_TEMP814 , RX10_TEMP812 ) ; 
const int RX10_TEMP816 = 0 ; 
const int RX10_TEMP817 = RX10_TEMP815 < RX10_TEMP816 ; 
if ( RX10_TEMP817 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP818 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP818 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP819 = getPlaceFromDist2 ( RX10_TEMP813 , RX10_TEMP815 ) ; 
const int RX10_TEMP821 = /* here  */ 0 ; 
const int RX10_TEMP822 = RX10_TEMP819 != RX10_TEMP821 ; 
if ( RX10_TEMP822 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP820 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP820 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP815 , X10_TEMP505 ) ; 
const int X10_TEMP508 = 0 ; 
const int X10_TEMP509 = 0 ; 
struct doubleRefArray3 X10_TEMP510 = X10_TEMP0 .ffg ; 
const int X10_TEMP514 = 0 ; 
const int X10_TEMP515 = 0 ; 
struct Point3 RX10_TEMP823  ; 
Point3_Point3( &RX10_TEMP823/*Assignment*/, X10_TEMP514 , X10_TEMP515 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP824 = X10_TEMP510 .distValue ; 
struct Region3 RX10_TEMP825 = RX10_TEMP824 .dReg ; 
const int RX10_TEMP826 = searchPointInRegion3 ( RX10_TEMP825 , RX10_TEMP823 ) ; 
const int RX10_TEMP827 = 0 ; 
const int RX10_TEMP828 = RX10_TEMP826 < RX10_TEMP827 ; 
if ( RX10_TEMP828 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP829 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP829 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP830 = getPlaceFromDist3 ( RX10_TEMP824 , RX10_TEMP826 ) ; 
const int RX10_TEMP832 = /* here  */ 0 ; 
const int RX10_TEMP833 = RX10_TEMP830 != RX10_TEMP832 ; 
if ( RX10_TEMP833 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP831 = "Bad place access for array X10_TEMP510" ; 
fprintf(stderr, RX10_TEMP831 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP834 = getRefArrayValue3double ( X10_TEMP510 , RX10_TEMP826 ) ; 
const double X10_TEMP516 = RX10_TEMP834 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP524 = X10_TEMP516 * q00R ; 
struct doubleValArray2 X10_TEMP518 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP521 = 0 ; 
struct Point2 RX10_TEMP835  ; 
Point2_Point2( &RX10_TEMP835/*Assignment*/, X10_TEMP521 , _PoissonSolver_ELECY_IDX ) ; 
struct Region2 RX10_TEMP836 = X10_TEMP518 .regionValue ; 
const int RX10_TEMP837 = searchPointInRegion2 ( RX10_TEMP836 , RX10_TEMP835 ) ; 
const int RX10_TEMP838 = 0 ; 
const int RX10_TEMP839 = RX10_TEMP837 < RX10_TEMP838 ; 
if ( RX10_TEMP839 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP840 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP840 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP841 = X10_TEMP518 .contents ; 
const double X10_TEMP522 = RX10_TEMP841 [ RX10_TEMP837 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP525 = X10_TEMP522 * q00I ; 
struct Complex X10_TEMP527  ; 
Complex_Complex( &X10_TEMP527/*Assignment*/, X10_TEMP524 , X10_TEMP525 ) ; 
struct Complex X10_TEMP528 = X10_TEMP527 ; 
struct Point2 RX10_TEMP842  ; 
Point2_Point2( &RX10_TEMP842/*Assignment*/, X10_TEMP508 , X10_TEMP509 ) ; 
struct Dist2 RX10_TEMP843 = forceY .distValue ; 
struct Region2 RX10_TEMP844 = RX10_TEMP843 .dReg ; 
const int RX10_TEMP845 = searchPointInRegion2 ( RX10_TEMP844 , RX10_TEMP842 ) ; 
const int RX10_TEMP846 = 0 ; 
const int RX10_TEMP847 = RX10_TEMP845 < RX10_TEMP846 ; 
if ( RX10_TEMP847 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP848 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP848 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP849 = getPlaceFromDist2 ( RX10_TEMP843 , RX10_TEMP845 ) ; 
const int RX10_TEMP851 = /* here  */ 0 ; 
const int RX10_TEMP852 = RX10_TEMP849 != RX10_TEMP851 ; 
if ( RX10_TEMP852 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP850 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP850 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP845 , X10_TEMP528 ) ; 
struct Dist1 RX10_TEMP853 = energy .distValue ; 
struct Region1 RX10_TEMP854 = RX10_TEMP853 .dReg ; 
const int RX10_TEMP855 = searchPointInRegion1 ( RX10_TEMP854 , pl ) ; 
const int RX10_TEMP856 = 0 ; 
const int RX10_TEMP857 = RX10_TEMP855 < RX10_TEMP856 ; 
if ( RX10_TEMP857 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP858 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP858 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP859 = getPlaceFromDist1 ( RX10_TEMP853 , RX10_TEMP855 ) ; 
const int RX10_TEMP861 = /* here  */ 0 ; 
const int RX10_TEMP862 = RX10_TEMP859 != RX10_TEMP861 ; 
if ( RX10_TEMP862 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP860 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP860 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP863 = getRefArrayValue1double ( energy , RX10_TEMP855 ) ; 
const double X10_TEMP558 = RX10_TEMP863 ; 
const double X10_TEMP557 = 0.5; 
struct doubleRefArray3 X10_TEMP531 = X10_TEMP0 .ffg ; 
const int X10_TEMP535 = 0 ; 
const int X10_TEMP536 = 0 ; 
struct Point3 RX10_TEMP864  ; 
Point3_Point3( &RX10_TEMP864/*Assignment*/, X10_TEMP535 , X10_TEMP536 , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP865 = X10_TEMP531 .distValue ; 
struct Region3 RX10_TEMP866 = RX10_TEMP865 .dReg ; 
const int RX10_TEMP867 = searchPointInRegion3 ( RX10_TEMP866 , RX10_TEMP864 ) ; 
const int RX10_TEMP868 = 0 ; 
const int RX10_TEMP869 = RX10_TEMP867 < RX10_TEMP868 ; 
if ( RX10_TEMP869 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP870 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP870 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP871 = getPlaceFromDist3 ( RX10_TEMP865 , RX10_TEMP867 ) ; 
const int RX10_TEMP873 = /* here  */ 0 ; 
const int RX10_TEMP874 = RX10_TEMP871 != RX10_TEMP873 ; 
if ( RX10_TEMP874 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP872 = "Bad place access for array X10_TEMP531" ; 
fprintf(stderr, RX10_TEMP872 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP875 = getRefArrayValue3double ( X10_TEMP531 , RX10_TEMP867 ) ; 
const double X10_TEMP540 = RX10_TEMP875 ; 
const int X10_TEMP539 = 2 ; 
const double X10_TEMP541 = pow ( q00R , X10_TEMP539 ) ; 
const double X10_TEMP543 = X10_TEMP540 * X10_TEMP541 ; 
struct doubleValArray2 X10_TEMP544 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP547 = 0 ; 
struct Point2 RX10_TEMP876  ; 
Point2_Point2( &RX10_TEMP876/*Assignment*/, X10_TEMP547 , _PoissonSolver_GREENS_IDX ) ; 
struct Region2 RX10_TEMP877 = X10_TEMP544 .regionValue ; 
const int RX10_TEMP878 = searchPointInRegion2 ( RX10_TEMP877 , RX10_TEMP876 ) ; 
const int RX10_TEMP879 = 0 ; 
const int RX10_TEMP880 = RX10_TEMP878 < RX10_TEMP879 ; 
if ( RX10_TEMP880 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP881 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP881 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP882 = X10_TEMP544 .contents ; 
const double X10_TEMP551 = RX10_TEMP882 [ RX10_TEMP878 ] 
; 
const int X10_TEMP550 = 2 ; 
const double X10_TEMP552 = pow ( q00I , X10_TEMP550 ) ; 
const double X10_TEMP554 = X10_TEMP551 * X10_TEMP552 ; 
const double X10_TEMP556 = X10_TEMP543 + X10_TEMP554 ; 
const double X10_TEMP559 = X10_TEMP557 * X10_TEMP556 ; 
const double X10_TEMP561 = X10_TEMP558 + X10_TEMP559 ; 
const double X10_TEMP562 = X10_TEMP561 ; 
struct Dist1 RX10_TEMP883 = energy .distValue ; 
struct Region1 RX10_TEMP884 = RX10_TEMP883 .dReg ; 
const int RX10_TEMP885 = searchPointInRegion1 ( RX10_TEMP884 , pl ) ; 
const int RX10_TEMP886 = 0 ; 
const int RX10_TEMP887 = RX10_TEMP885 < RX10_TEMP886 ; 
if ( RX10_TEMP887 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP888 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP888 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP889 = getPlaceFromDist1 ( RX10_TEMP883 , RX10_TEMP885 ) ; 
const int RX10_TEMP891 = /* here  */ 0 ; 
const int RX10_TEMP892 = RX10_TEMP889 != RX10_TEMP891 ; 
if ( RX10_TEMP892 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP890 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP890 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP885 , X10_TEMP562 ) ; 
const int X10_TEMP565 = 0 ; 
const int X10_TEMP566 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP893  ; 
Point2_Point2( &RX10_TEMP893/*Assignment*/, X10_TEMP565 , X10_TEMP566 ) ; 
struct Dist2 RX10_TEMP894 = q .distValue ; 
struct Region2 RX10_TEMP895 = RX10_TEMP894 .dReg ; 
const int RX10_TEMP896 = searchPointInRegion2 ( RX10_TEMP895 , RX10_TEMP893 ) ; 
const int RX10_TEMP897 = 0 ; 
const int RX10_TEMP898 = RX10_TEMP896 < RX10_TEMP897 ; 
if ( RX10_TEMP898 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP899 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP899 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP900 = getPlaceFromDist2 ( RX10_TEMP894 , RX10_TEMP896 ) ; 
const int RX10_TEMP902 = /* here  */ 0 ; 
const int RX10_TEMP903 = RX10_TEMP900 != RX10_TEMP902 ; 
if ( RX10_TEMP903 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP901 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP901 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP904 = getRefArrayValue2Complex ( q , RX10_TEMP896 ) ; 
struct Complex X10_TEMP567 = RX10_TEMP904 ; 
const double q0NYR = Complex_getReal ( X10_TEMP567 ) ; 
const int X10_TEMP571 = 0 ; 
const int X10_TEMP572 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP905  ; 
Point2_Point2( &RX10_TEMP905/*Assignment*/, X10_TEMP571 , X10_TEMP572 ) ; 
struct Dist2 RX10_TEMP906 = q .distValue ; 
struct Region2 RX10_TEMP907 = RX10_TEMP906 .dReg ; 
const int RX10_TEMP908 = searchPointInRegion2 ( RX10_TEMP907 , RX10_TEMP905 ) ; 
const int RX10_TEMP909 = 0 ; 
const int RX10_TEMP910 = RX10_TEMP908 < RX10_TEMP909 ; 
if ( RX10_TEMP910 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP911 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP911 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP912 = getPlaceFromDist2 ( RX10_TEMP906 , RX10_TEMP908 ) ; 
const int RX10_TEMP914 = /* here  */ 0 ; 
const int RX10_TEMP915 = RX10_TEMP912 != RX10_TEMP914 ; 
if ( RX10_TEMP915 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP913 = "Bad place access for array q" ; 
fprintf(stderr, RX10_TEMP913 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP916 = getRefArrayValue2Complex ( q , RX10_TEMP908 ) ; 
struct Complex X10_TEMP573 = RX10_TEMP916 ; 
const double q0NYI = Complex_getImag ( X10_TEMP573 ) ; 
const int X10_TEMP577 = 0 ; 
const int X10_TEMP578 = X10_TEMP0 .y ; 
struct doubleRefArray3 X10_TEMP579 = X10_TEMP0 .ffg ; 
const int X10_TEMP583 = 0 ; 
const int X10_TEMP584 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP917  ; 
Point3_Point3( &RX10_TEMP917/*Assignment*/, X10_TEMP583 , X10_TEMP584 , _PoissonSolver_ELECX_IDX ) ; 
struct Dist3 RX10_TEMP918 = X10_TEMP579 .distValue ; 
struct Region3 RX10_TEMP919 = RX10_TEMP918 .dReg ; 
const int RX10_TEMP920 = searchPointInRegion3 ( RX10_TEMP919 , RX10_TEMP917 ) ; 
const int RX10_TEMP921 = 0 ; 
const int RX10_TEMP922 = RX10_TEMP920 < RX10_TEMP921 ; 
if ( RX10_TEMP922 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP923 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP923 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP924 = getPlaceFromDist3 ( RX10_TEMP918 , RX10_TEMP920 ) ; 
const int RX10_TEMP926 = /* here  */ 0 ; 
const int RX10_TEMP927 = RX10_TEMP924 != RX10_TEMP926 ; 
if ( RX10_TEMP927 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP925 = "Bad place access for array X10_TEMP579" ; 
fprintf(stderr, RX10_TEMP925 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP928 = getRefArrayValue3double ( X10_TEMP579 , RX10_TEMP920 ) ; 
const double X10_TEMP585 = RX10_TEMP928 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP593 = X10_TEMP585 * q0NYR ; 
struct doubleValArray2 X10_TEMP587 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP590 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP929  ; 
Point2_Point2( &RX10_TEMP929/*Assignment*/, X10_TEMP590 , _PoissonSolver_ELECX_IDX ) ; 
struct Region2 RX10_TEMP930 = X10_TEMP587 .regionValue ; 
const int RX10_TEMP931 = searchPointInRegion2 ( RX10_TEMP930 , RX10_TEMP929 ) ; 
const int RX10_TEMP932 = 0 ; 
const int RX10_TEMP933 = RX10_TEMP931 < RX10_TEMP932 ; 
if ( RX10_TEMP933 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP934 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP934 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP935 = X10_TEMP587 .contents ; 
const double X10_TEMP591 = RX10_TEMP935 [ RX10_TEMP931 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP594 = X10_TEMP591 * q0NYI ; 
struct Complex X10_TEMP596  ; 
Complex_Complex( &X10_TEMP596/*Assignment*/, X10_TEMP593 , X10_TEMP594 ) ; 
struct Complex X10_TEMP597 = X10_TEMP596 ; 
struct Point2 RX10_TEMP936  ; 
Point2_Point2( &RX10_TEMP936/*Assignment*/, X10_TEMP577 , X10_TEMP578 ) ; 
struct Dist2 RX10_TEMP937 = forceX .distValue ; 
struct Region2 RX10_TEMP938 = RX10_TEMP937 .dReg ; 
const int RX10_TEMP939 = searchPointInRegion2 ( RX10_TEMP938 , RX10_TEMP936 ) ; 
const int RX10_TEMP940 = 0 ; 
const int RX10_TEMP941 = RX10_TEMP939 < RX10_TEMP940 ; 
if ( RX10_TEMP941 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP942 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP942 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP943 = getPlaceFromDist2 ( RX10_TEMP937 , RX10_TEMP939 ) ; 
const int RX10_TEMP945 = /* here  */ 0 ; 
const int RX10_TEMP946 = RX10_TEMP943 != RX10_TEMP945 ; 
if ( RX10_TEMP946 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP944 = "Bad place access for array forceX" ; 
fprintf(stderr, RX10_TEMP944 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceX , RX10_TEMP939 , X10_TEMP597 ) ; 
const int X10_TEMP600 = 0 ; 
const int X10_TEMP601 = X10_TEMP0 .y ; 
struct doubleRefArray3 X10_TEMP602 = X10_TEMP0 .ffg ; 
const int X10_TEMP606 = 0 ; 
const int X10_TEMP607 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP947  ; 
Point3_Point3( &RX10_TEMP947/*Assignment*/, X10_TEMP606 , X10_TEMP607 , _PoissonSolver_ELECY_IDX ) ; 
struct Dist3 RX10_TEMP948 = X10_TEMP602 .distValue ; 
struct Region3 RX10_TEMP949 = RX10_TEMP948 .dReg ; 
const int RX10_TEMP950 = searchPointInRegion3 ( RX10_TEMP949 , RX10_TEMP947 ) ; 
const int RX10_TEMP951 = 0 ; 
const int RX10_TEMP952 = RX10_TEMP950 < RX10_TEMP951 ; 
if ( RX10_TEMP952 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP953 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP953 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP954 = getPlaceFromDist3 ( RX10_TEMP948 , RX10_TEMP950 ) ; 
const int RX10_TEMP956 = /* here  */ 0 ; 
const int RX10_TEMP957 = RX10_TEMP954 != RX10_TEMP956 ; 
if ( RX10_TEMP957 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP955 = "Bad place access for array X10_TEMP602" ; 
fprintf(stderr, RX10_TEMP955 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP958 = getRefArrayValue3double ( X10_TEMP602 , RX10_TEMP950 ) ; 
const double X10_TEMP608 = RX10_TEMP958 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP616 = X10_TEMP608 * q0NYR ; 
struct doubleValArray2 X10_TEMP610 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP613 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP959  ; 
Point2_Point2( &RX10_TEMP959/*Assignment*/, X10_TEMP613 , _PoissonSolver_ELECY_IDX ) ; 
struct Region2 RX10_TEMP960 = X10_TEMP610 .regionValue ; 
const int RX10_TEMP961 = searchPointInRegion2 ( RX10_TEMP960 , RX10_TEMP959 ) ; 
const int RX10_TEMP962 = 0 ; 
const int RX10_TEMP963 = RX10_TEMP961 < RX10_TEMP962 ; 
if ( RX10_TEMP963 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP964 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP964 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP965 = X10_TEMP610 .contents ; 
const double X10_TEMP614 = RX10_TEMP965 [ RX10_TEMP961 ] 
; 
/*UpdatableVariableDeclaration*/double X10_TEMP617 = X10_TEMP614 * q0NYI ; 
struct Complex X10_TEMP619  ; 
Complex_Complex( &X10_TEMP619/*Assignment*/, X10_TEMP616 , X10_TEMP617 ) ; 
struct Complex X10_TEMP620 = X10_TEMP619 ; 
struct Point2 RX10_TEMP966  ; 
Point2_Point2( &RX10_TEMP966/*Assignment*/, X10_TEMP600 , X10_TEMP601 ) ; 
struct Dist2 RX10_TEMP967 = forceY .distValue ; 
struct Region2 RX10_TEMP968 = RX10_TEMP967 .dReg ; 
const int RX10_TEMP969 = searchPointInRegion2 ( RX10_TEMP968 , RX10_TEMP966 ) ; 
const int RX10_TEMP970 = 0 ; 
const int RX10_TEMP971 = RX10_TEMP969 < RX10_TEMP970 ; 
if ( RX10_TEMP971 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP972 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP972 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP973 = getPlaceFromDist2 ( RX10_TEMP967 , RX10_TEMP969 ) ; 
const int RX10_TEMP975 = /* here  */ 0 ; 
const int RX10_TEMP976 = RX10_TEMP973 != RX10_TEMP975 ; 
if ( RX10_TEMP976 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP974 = "Bad place access for array forceY" ; 
fprintf(stderr, RX10_TEMP974 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2Complex ( forceY , RX10_TEMP969 , X10_TEMP620 ) ; 
struct Dist1 RX10_TEMP977 = energy .distValue ; 
struct Region1 RX10_TEMP978 = RX10_TEMP977 .dReg ; 
const int RX10_TEMP979 = searchPointInRegion1 ( RX10_TEMP978 , pl ) ; 
const int RX10_TEMP980 = 0 ; 
const int RX10_TEMP981 = RX10_TEMP979 < RX10_TEMP980 ; 
if ( RX10_TEMP981 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP982 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP982 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP983 = getPlaceFromDist1 ( RX10_TEMP977 , RX10_TEMP979 ) ; 
const int RX10_TEMP985 = /* here  */ 0 ; 
const int RX10_TEMP986 = RX10_TEMP983 != RX10_TEMP985 ; 
if ( RX10_TEMP986 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP984 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP984 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP987 = getRefArrayValue1double ( energy , RX10_TEMP979 ) ; 
const double X10_TEMP650 = RX10_TEMP987 ; 
const double X10_TEMP649 = 0.5; 
struct doubleRefArray3 X10_TEMP623 = X10_TEMP0 .ffg ; 
const int X10_TEMP627 = 0 ; 
const int X10_TEMP628 = X10_TEMP0 .y ; 
struct Point3 RX10_TEMP988  ; 
Point3_Point3( &RX10_TEMP988/*Assignment*/, X10_TEMP627 , X10_TEMP628 , _PoissonSolver_GREENS_IDX ) ; 
struct Dist3 RX10_TEMP989 = X10_TEMP623 .distValue ; 
struct Region3 RX10_TEMP990 = RX10_TEMP989 .dReg ; 
const int RX10_TEMP991 = searchPointInRegion3 ( RX10_TEMP990 , RX10_TEMP988 ) ; 
const int RX10_TEMP992 = 0 ; 
const int RX10_TEMP993 = RX10_TEMP991 < RX10_TEMP992 ; 
if ( RX10_TEMP993 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP994 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP994 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP995 = getPlaceFromDist3 ( RX10_TEMP989 , RX10_TEMP991 ) ; 
const int RX10_TEMP997 = /* here  */ 0 ; 
const int RX10_TEMP998 = RX10_TEMP995 != RX10_TEMP997 ; 
if ( RX10_TEMP998 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP996 = "Bad place access for array X10_TEMP623" ; 
fprintf(stderr, RX10_TEMP996 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP999 = getRefArrayValue3double ( X10_TEMP623 , RX10_TEMP991 ) ; 
const double X10_TEMP632 = RX10_TEMP999 ; 
const int X10_TEMP631 = 2 ; 
const double X10_TEMP633 = pow ( q0NYR , X10_TEMP631 ) ; 
const double X10_TEMP635 = X10_TEMP632 * X10_TEMP633 ; 
struct doubleValArray2 X10_TEMP636 = X10_TEMP0 .ffg2 ; 
const int X10_TEMP639 = X10_TEMP0 .y ; 
struct Point2 RX10_TEMP1000  ; 
Point2_Point2( &RX10_TEMP1000/*Assignment*/, X10_TEMP639 , _PoissonSolver_GREENS_IDX ) ; 
struct Region2 RX10_TEMP1001 = X10_TEMP636 .regionValue ; 
const int RX10_TEMP1002 = searchPointInRegion2 ( RX10_TEMP1001 , RX10_TEMP1000 ) ; 
const int RX10_TEMP1003 = 0 ; 
const int RX10_TEMP1004 = RX10_TEMP1002 < RX10_TEMP1003 ; 
if ( RX10_TEMP1004 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1005 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP1005 ) ; 
exit(EXIT_FAILURE);
} 

/*Updatable ARRAY*/ double * const RX10_TEMP1006 = X10_TEMP636 .contents ; 
const double X10_TEMP643 = RX10_TEMP1006 [ RX10_TEMP1002 ] 
; 
const int X10_TEMP642 = 2 ; 
const double X10_TEMP644 = pow ( q0NYI , X10_TEMP642 ) ; 
const double X10_TEMP646 = X10_TEMP643 * X10_TEMP644 ; 
const double X10_TEMP648 = X10_TEMP635 + X10_TEMP646 ; 
const double X10_TEMP651 = X10_TEMP649 * X10_TEMP648 ; 
const double X10_TEMP653 = X10_TEMP650 + X10_TEMP651 ; 
const double X10_TEMP654 = X10_TEMP653 ; 
struct Dist1 RX10_TEMP1007 = energy .distValue ; 
struct Region1 RX10_TEMP1008 = RX10_TEMP1007 .dReg ; 
const int RX10_TEMP1009 = searchPointInRegion1 ( RX10_TEMP1008 , pl ) ; 
const int RX10_TEMP1010 = 0 ; 
const int RX10_TEMP1011 = RX10_TEMP1009 < RX10_TEMP1010 ; 
if ( RX10_TEMP1011 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1012 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP1012 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP1013 = getPlaceFromDist1 ( RX10_TEMP1007 , RX10_TEMP1009 ) ; 
const int RX10_TEMP1015 = /* here  */ 0 ; 
const int RX10_TEMP1016 = RX10_TEMP1013 != RX10_TEMP1015 ; 
if ( RX10_TEMP1016 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP1014 = "Bad place access for array energy" ; 
fprintf(stderr, RX10_TEMP1014 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( energy , RX10_TEMP1009 , X10_TEMP654 ) ; 
} 

} 

} 

} 

} 

const double X10_TEMP655 = 4.0; 
const int X10_TEMP656 = X10_TEMP0 .x ; 
const double X10_TEMP657 = X10_TEMP655 * X10_TEMP656 ; 
const int X10_TEMP658 = X10_TEMP0 .y ; 
const double X10_TEMP659 = X10_TEMP657 * X10_TEMP658 ; 
const double X10_TEMP660 = doublerefArraySum1 ( energy ) ; 
const double X10_TEMP662 = X10_TEMP659 * X10_TEMP660 ; 
return X10_TEMP662 ; 
} 

double /*static*/PoissonSolver_expIntNL (  struct PoissonSolver const X10_TEMP0 , const double x ) 
{ const double X10_TEMP1 = 0.57721566; 
const int X10_TEMP2 = 0 ; 
const double a0 = X10_TEMP2 - X10_TEMP1 ; 
const double a1 = 0.99999193; 
const double X10_TEMP5 = 0.24991055; 
const int X10_TEMP6 = 0 ; 
const double a2 = X10_TEMP6 - X10_TEMP5 ; 
const double a3 = 0.05519968; 
const double X10_TEMP9 = 0.00976004; 
const int X10_TEMP10 = 0 ; 
const double a4 = X10_TEMP10 - X10_TEMP9 ; 
const double a5 = 0.00107857; 
const double b1 = 8.5733287401; 
const double b2 = 18.0590169730; 
const double b3 = 8.6347608925; 
const double b4 = 0.2677737343; 
const double c1 = 9.5733223454; 
const double c2 = 25.6329561486; 
const double c3 = 21.0996530827; 
const double c4 = 3.9584969228; 
const double X10_TEMP21 = 1.0; 
const int X10_TEMP23 = x < X10_TEMP21 ; 
if ( X10_TEMP23 ) 
{ const double X10_TEMP24 = x * a5 ; 
const double X10_TEMP26 = a4 + X10_TEMP24 ; 
const double X10_TEMP27 = x * X10_TEMP26 ; 
const double X10_TEMP29 = a3 + X10_TEMP27 ; 
const double X10_TEMP30 = x * X10_TEMP29 ; 
const double X10_TEMP32 = a2 + X10_TEMP30 ; 
const double X10_TEMP33 = x * X10_TEMP32 ; 
const double X10_TEMP35 = a1 + X10_TEMP33 ; 
const double X10_TEMP36 = x * X10_TEMP35 ; 
const double X10_TEMP38 = a0 + X10_TEMP36 ; 
return X10_TEMP38 ; 
} 
else 
{ const double X10_TEMP39 = 50.0; 
const int X10_TEMP41 = x < X10_TEMP39 ; 
if ( X10_TEMP41 ) 
{ const double X10_TEMP75 = log ( x ) ; 
const int X10_TEMP43 = 0 ; 
const double X10_TEMP45 = X10_TEMP43 - x ; 
const double X10_TEMP46 = exp ( X10_TEMP45 ) ; 
const double X10_TEMP48 = X10_TEMP46 / x ; 
const double X10_TEMP50 = b1 + x ; 
const double X10_TEMP51 = x * X10_TEMP50 ; 
const double X10_TEMP53 = b2 + X10_TEMP51 ; 
const double X10_TEMP54 = x * X10_TEMP53 ; 
const double X10_TEMP56 = b3 + X10_TEMP54 ; 
const double X10_TEMP57 = x * X10_TEMP56 ; 
const double X10_TEMP59 = b4 + X10_TEMP57 ; 
const double X10_TEMP61 = c1 + x ; 
const double X10_TEMP62 = x * X10_TEMP61 ; 
const double X10_TEMP64 = c2 + X10_TEMP62 ; 
const double X10_TEMP65 = x * X10_TEMP64 ; 
const double X10_TEMP67 = c3 + X10_TEMP65 ; 
const double X10_TEMP68 = x * X10_TEMP67 ; 
const double X10_TEMP70 = c4 + X10_TEMP68 ; 
const double X10_TEMP72 = X10_TEMP59 / X10_TEMP70 ; 
const double X10_TEMP74 = X10_TEMP48 * X10_TEMP72 ; 
const double X10_TEMP77 = X10_TEMP75 + X10_TEMP74 ; 
return X10_TEMP77 ; 
} 
else 
{ const double X10_TEMP80 = log ( x ) ; 
return X10_TEMP80 ; 
} 


} 


} 

char * /*static*/PoissonSolver_toString (  struct PoissonSolver const X10_TEMP0 ) 
{ const char * X10_TEMP1 = "PoisonSolver: xbits = " ; 
const int X10_TEMP2 = X10_TEMP0 .xBits ; 
/*ASSIGNMENT STRING*/
 char * tempC97 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC97, "%s%d",X10_TEMP1,X10_TEMP2);
const char * X10_TEMP3 = tempC97;; 
const char * X10_TEMP4 = " ybits = " ; 
/*ASSIGNMENT STRING*/
 char * tempC98 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC98, "%s%s",X10_TEMP3,X10_TEMP4);
const char * X10_TEMP5 = tempC98;; 
const int X10_TEMP6 = X10_TEMP0 .yBits ; 
/*ASSIGNMENT STRING*/
 char * tempC99 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC99, "%s%d",X10_TEMP5,X10_TEMP6);
const char * X10_TEMP8 = tempC99;; 
return X10_TEMP8 ; 
} 

double /*static*/Random_nextNormal (  struct Random  * const X10_TEMP0 ) 
{ /*UpdatableVariableDeclaration*/double ret = 0.0; 
const int X10_TEMP2 = X10_TEMP0 ->flag ; 
const int X10_TEMP3 = 0 ; 
const int X10_TEMP5 = X10_TEMP2 != X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const double X10_TEMP7 = X10_TEMP0 ->r0 ; 
ret = X10_TEMP7 ; const double X10_TEMP9 = 0.0; 
const double X10_TEMP10 = X10_TEMP9 ; 
X10_TEMP0 ->r0 = ( X10_TEMP10 ) ; 
const int X10_TEMP12 = 0 ; 
const int X10_TEMP13 = X10_TEMP12 ; 
X10_TEMP0 ->flag = ( X10_TEMP13 ) ; 
} 
else 
{ /*UpdatableVariableDeclaration*/int isc = 65536 ; 
/*UpdatableVariableDeclaration*/double asc = isc ; 
/*UpdatableVariableDeclaration*/double bsc = asc * asc ; 
const int X10_TEMP20 = X10_TEMP0 ->r1 ; 
const int X10_TEMP17 = X10_TEMP0 ->r1 ; 
const int X10_TEMP19 = X10_TEMP17 / isc ; 
const int X10_TEMP21 = X10_TEMP19 * isc ; 
/*UpdatableVariableDeclaration*/int i1 = X10_TEMP20 - X10_TEMP21 ; 
const double X10_TEMP23 = X10_TEMP0 ->h1l ; 
const int X10_TEMP24 = X10_TEMP0 ->r1 ; 
const double X10_TEMP27 = X10_TEMP23 * X10_TEMP24 ; 
const double X10_TEMP25 = X10_TEMP0 ->h1u ; 
const double X10_TEMP26 = asc * X10_TEMP25 ; 
const double X10_TEMP28 = X10_TEMP26 * i1 ; 
/*UpdatableVariableDeclaration*/double r3 = X10_TEMP27 + X10_TEMP28 ; 
const double X10_TEMP31 = r3 / bsc ; 
const int X10_TEMP33 = /*casting*/( int ) X10_TEMP31 ; 
i1 = X10_TEMP33 ; const double X10_TEMP35 = i1 * bsc ; 
const double X10_TEMP37 = r3 - X10_TEMP35 ; 
r3 = X10_TEMP37 ; const double X10_TEMP38 = 0.5; 
const double X10_TEMP40 = X10_TEMP38 * bsc ; 
bsc = X10_TEMP40 ; const int X10_TEMP41 = X10_TEMP0 ->r2 ; 
const int X10_TEMP43 = X10_TEMP41 / isc ; 
i1 = X10_TEMP43 ; const int X10_TEMP44 = X10_TEMP0 ->r2 ; 
const int X10_TEMP45 = i1 * isc ; 
const int X10_TEMP47 = X10_TEMP44 - X10_TEMP45 ; 
isc = X10_TEMP47 ; const double X10_TEMP48 = X10_TEMP0 ->h1l ; 
const int X10_TEMP49 = X10_TEMP0 ->r2 ; 
const double X10_TEMP52 = X10_TEMP48 * X10_TEMP49 ; 
const double X10_TEMP50 = X10_TEMP0 ->h1u ; 
const double X10_TEMP51 = asc * X10_TEMP50 ; 
const double X10_TEMP53 = X10_TEMP51 * isc ; 
const double X10_TEMP55 = X10_TEMP52 + X10_TEMP53 ; 
const double X10_TEMP56 = X10_TEMP55 ; 
X10_TEMP0 ->r0 = ( X10_TEMP56 ) ; 
const double X10_TEMP57 = 1.0; 
const double X10_TEMP59 = X10_TEMP57 / bsc ; 
asc = X10_TEMP59 ; const double X10_TEMP60 = X10_TEMP0 ->r0 ; 
const double X10_TEMP62 = X10_TEMP60 * asc ; 
const int X10_TEMP64 = /*casting*/( int ) X10_TEMP62 ; 
isc = X10_TEMP64 ; const double X10_TEMP65 = X10_TEMP0 ->r0 ; 
const double X10_TEMP66 = isc * bsc ; 
const double X10_TEMP68 = X10_TEMP65 - X10_TEMP66 ; 
const int X10_TEMP70 = /*casting*/( int ) X10_TEMP68 ; 
const int X10_TEMP71 = X10_TEMP70 ; 
X10_TEMP0 ->r2 = ( X10_TEMP71 ) ; 
const double X10_TEMP75 = r3 + isc ; 
const double X10_TEMP72 = 2.0; 
const double X10_TEMP73 = X10_TEMP0 ->h1u ; 
const double X10_TEMP74 = X10_TEMP72 * X10_TEMP73 ; 
const double X10_TEMP76 = X10_TEMP74 * i1 ; 
const double X10_TEMP78 = X10_TEMP75 + X10_TEMP76 ; 
r3 = X10_TEMP78 ; const double X10_TEMP80 = r3 * asc ; 
const int X10_TEMP82 = /*casting*/( int ) X10_TEMP80 ; 
isc = X10_TEMP82 ; const double X10_TEMP83 = isc * bsc ; 
const double X10_TEMP85 = r3 - X10_TEMP83 ; 
const int X10_TEMP87 = /*casting*/( int ) X10_TEMP85 ; 
const int X10_TEMP88 = X10_TEMP87 ; 
X10_TEMP0 ->r1 = ( X10_TEMP88 ) ; 
const double X10_TEMP89 = 2.0; 
const int X10_TEMP90 = 0 ; 
const double X10_TEMP98 = X10_TEMP90 - X10_TEMP89 ; 
const int X10_TEMP92 = X10_TEMP0 ->r1 ; 
const double X10_TEMP91 = X10_TEMP0 ->r2 ; 
const double X10_TEMP93 = X10_TEMP91 * asc ; 
const double X10_TEMP95 = X10_TEMP92 + X10_TEMP93 ; 
const double X10_TEMP97 = X10_TEMP95 * asc ; 
const double X10_TEMP99 = log ( X10_TEMP97 ) ; 
const double X10_TEMP101 = X10_TEMP98 * X10_TEMP99 ; 
/*UpdatableVariableDeclaration*/double temp = sqrt ( X10_TEMP101 ) ; 
const int X10_TEMP104 = 65536 ; 
isc = X10_TEMP104 ; asc = isc ; const double X10_TEMP107 = asc * asc ; 
bsc = X10_TEMP107 ; const int X10_TEMP111 = X10_TEMP0 ->r4 ; 
const int X10_TEMP108 = X10_TEMP0 ->r4 ; 
const int X10_TEMP110 = X10_TEMP108 / isc ; 
const int X10_TEMP112 = X10_TEMP110 * isc ; 
const int X10_TEMP114 = X10_TEMP111 - X10_TEMP112 ; 
i1 = X10_TEMP114 ; const double X10_TEMP115 = X10_TEMP0 ->h2l ; 
const int X10_TEMP116 = X10_TEMP0 ->r4 ; 
const double X10_TEMP119 = X10_TEMP115 * X10_TEMP116 ; 
const double X10_TEMP117 = X10_TEMP0 ->h1u ; 
const double X10_TEMP118 = asc * X10_TEMP117 ; 
const double X10_TEMP120 = X10_TEMP118 * i1 ; 
const double X10_TEMP122 = X10_TEMP119 + X10_TEMP120 ; 
r3 = X10_TEMP122 ; const double X10_TEMP124 = r3 / bsc ; 
const int X10_TEMP126 = /*casting*/( int ) X10_TEMP124 ; 
i1 = X10_TEMP126 ; const double X10_TEMP128 = i1 * bsc ; 
const double X10_TEMP130 = r3 - X10_TEMP128 ; 
r3 = X10_TEMP130 ; const double X10_TEMP131 = 0.5; 
const double X10_TEMP133 = X10_TEMP131 * bsc ; 
bsc = X10_TEMP133 ; const int X10_TEMP134 = X10_TEMP0 ->r5 ; 
const int X10_TEMP136 = X10_TEMP134 / isc ; 
i1 = X10_TEMP136 ; const int X10_TEMP137 = X10_TEMP0 ->r5 ; 
const int X10_TEMP138 = i1 * isc ; 
const int X10_TEMP140 = X10_TEMP137 - X10_TEMP138 ; 
isc = X10_TEMP140 ; const double X10_TEMP141 = X10_TEMP0 ->h2l ; 
const int X10_TEMP142 = X10_TEMP0 ->r5 ; 
const double X10_TEMP145 = X10_TEMP141 * X10_TEMP142 ; 
const double X10_TEMP143 = X10_TEMP0 ->h1u ; 
const double X10_TEMP144 = asc * X10_TEMP143 ; 
const double X10_TEMP146 = X10_TEMP144 * isc ; 
const double X10_TEMP148 = X10_TEMP145 + X10_TEMP146 ; 
const double X10_TEMP149 = X10_TEMP148 ; 
X10_TEMP0 ->r0 = ( X10_TEMP149 ) ; 
const double X10_TEMP150 = 1.0; 
const double X10_TEMP152 = X10_TEMP150 / bsc ; 
asc = X10_TEMP152 ; const double X10_TEMP153 = X10_TEMP0 ->r0 ; 
const double X10_TEMP155 = X10_TEMP153 * asc ; 
const int X10_TEMP157 = /*casting*/( int ) X10_TEMP155 ; 
isc = X10_TEMP157 ; const double X10_TEMP158 = X10_TEMP0 ->r0 ; 
const double X10_TEMP159 = isc * bsc ; 
const double X10_TEMP161 = X10_TEMP158 - X10_TEMP159 ; 
const int X10_TEMP163 = /*casting*/( int ) X10_TEMP161 ; 
const int X10_TEMP164 = X10_TEMP163 ; 
X10_TEMP0 ->r5 = ( X10_TEMP164 ) ; 
const double X10_TEMP165 = 2.0; 
const double X10_TEMP166 = X10_TEMP0 ->h1u ; 
const double X10_TEMP167 = X10_TEMP165 * X10_TEMP166 ; 
const double X10_TEMP168 = X10_TEMP167 * i1 ; 
const double X10_TEMP170 = isc + X10_TEMP168 ; 
const double X10_TEMP172 = r3 + X10_TEMP170 ; 
r3 = X10_TEMP172 ; const double X10_TEMP174 = r3 * asc ; 
const int X10_TEMP176 = /*casting*/( int ) X10_TEMP174 ; 
isc = X10_TEMP176 ; const double X10_TEMP177 = isc * bsc ; 
const double X10_TEMP179 = r3 - X10_TEMP177 ; 
const int X10_TEMP181 = /*casting*/( int ) X10_TEMP179 ; 
const int X10_TEMP182 = X10_TEMP181 ; 
X10_TEMP0 ->r4 = ( X10_TEMP182 ) ; 
const double X10_TEMP190 = 6.28318530717959; 
const int X10_TEMP184 = X10_TEMP0 ->r4 ; 
const double X10_TEMP183 = X10_TEMP0 ->r5 ; 
const double X10_TEMP185 = X10_TEMP183 * asc ; 
const double X10_TEMP187 = X10_TEMP184 + X10_TEMP185 ; 
const double X10_TEMP189 = X10_TEMP187 * asc ; 
const double X10_TEMP192 = X10_TEMP190 * X10_TEMP189 ; 
const double X10_TEMP193 = X10_TEMP192 ; 
X10_TEMP0 ->r0 = ( X10_TEMP193 ) ; 
const double X10_TEMP195 = X10_TEMP0 ->r0 ; 
const double X10_TEMP196 = sin ( X10_TEMP195 ) ; 
const double X10_TEMP198 = temp * X10_TEMP196 ; 
ret = X10_TEMP198 ; const double X10_TEMP200 = X10_TEMP0 ->r0 ; 
const double X10_TEMP201 = cos ( X10_TEMP200 ) ; 
const double X10_TEMP203 = temp * X10_TEMP201 ; 
const double X10_TEMP204 = X10_TEMP203 ; 
X10_TEMP0 ->r0 = ( X10_TEMP204 ) ; 
const int X10_TEMP206 = 1 ; 
const int X10_TEMP207 = X10_TEMP206 ; 
X10_TEMP0 ->flag = ( X10_TEMP207 ) ; 
} 


return ret ; 
} 

int /*static*/_Timer_max_counters_init ( ) 
{ const int X10_TEMP2 = 64 ; 
return X10_TEMP2 ; 
} 

void /*static*/Timer_start (  struct Timer  * const X10_TEMP0 , const int n ) 
{ struct doubleRefArray1 X10_TEMP1 = X10_TEMP0 ->start_time ; 
const double X10_TEMP4 = getTIME( ) 
; 
const double X10_TEMP5 = X10_TEMP4 ; 
struct Point1 RX10_TEMP0  ; 
Point1_Point1( &RX10_TEMP0/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP1 = X10_TEMP1 .distValue ; 
struct Region1 RX10_TEMP2 = RX10_TEMP1 .dReg ; 
const int RX10_TEMP3 = searchPointInRegion1 ( RX10_TEMP2 , RX10_TEMP0 ) ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4 ; 
if ( RX10_TEMP5 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP6 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP6 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP7 = getPlaceFromDist1 ( RX10_TEMP1 , RX10_TEMP3 ) ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP8 = "Bad place access for array X10_TEMP1" ; 
fprintf(stderr, RX10_TEMP8 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP1 , RX10_TEMP3 , X10_TEMP5 ) ; 
} 

void /*static*/Timer_stop (  struct Timer  * const X10_TEMP0 , const int n ) 
{ struct doubleRefArray1 X10_TEMP1 = X10_TEMP0 ->elapsed_time ; 
const double X10_TEMP5 = getTIME( ) 
; 
struct doubleRefArray1 X10_TEMP3 = X10_TEMP0 ->start_time ; 
struct Point1 RX10_TEMP0  ; 
Point1_Point1( &RX10_TEMP0/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP1 = X10_TEMP3 .distValue ; 
struct Region1 RX10_TEMP2 = RX10_TEMP1 .dReg ; 
const int RX10_TEMP3 = searchPointInRegion1 ( RX10_TEMP2 , RX10_TEMP0 ) ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4 ; 
if ( RX10_TEMP5 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP6 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP6 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP7 = getPlaceFromDist1 ( RX10_TEMP1 , RX10_TEMP3 ) ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP8 = "Bad place access for array X10_TEMP3" ; 
fprintf(stderr, RX10_TEMP8 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP11 = getRefArrayValue1double ( X10_TEMP3 , RX10_TEMP3 ) ; 
const double X10_TEMP6 = RX10_TEMP11 ; 
const double X10_TEMP8 = X10_TEMP5 - X10_TEMP6 ; 
const double X10_TEMP9 = X10_TEMP8 ; 
struct Point1 RX10_TEMP12  ; 
Point1_Point1( &RX10_TEMP12/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP13 = X10_TEMP1 .distValue ; 
struct Region1 RX10_TEMP14 = RX10_TEMP13 .dReg ; 
const int RX10_TEMP15 = searchPointInRegion1 ( RX10_TEMP14 , RX10_TEMP12 ) ; 
const int RX10_TEMP16 = 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16 ; 
if ( RX10_TEMP17 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP18 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP18 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP19 = getPlaceFromDist1 ( RX10_TEMP13 , RX10_TEMP15 ) ; 
const int RX10_TEMP21 = /* here  */ 0 ; 
const int RX10_TEMP22 = RX10_TEMP19 != RX10_TEMP21 ; 
if ( RX10_TEMP22 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP20 = "Bad place access for array X10_TEMP1" ; 
fprintf(stderr, RX10_TEMP20 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP1 , RX10_TEMP15 , X10_TEMP9 ) ; 
struct doubleRefArray1 X10_TEMP10 = X10_TEMP0 ->elapsed_time ; 
struct doubleRefArray1 X10_TEMP12 = X10_TEMP0 ->elapsed_time ; 
struct Point1 RX10_TEMP23  ; 
Point1_Point1( &RX10_TEMP23/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP24 = X10_TEMP12 .distValue ; 
struct Region1 RX10_TEMP25 = RX10_TEMP24 .dReg ; 
const int RX10_TEMP26 = searchPointInRegion1 ( RX10_TEMP25 , RX10_TEMP23 ) ; 
const int RX10_TEMP27 = 0 ; 
const int RX10_TEMP28 = RX10_TEMP26 < RX10_TEMP27 ; 
if ( RX10_TEMP28 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP29 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP29 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP30 = getPlaceFromDist1 ( RX10_TEMP24 , RX10_TEMP26 ) ; 
const int RX10_TEMP32 = /* here  */ 0 ; 
const int RX10_TEMP33 = RX10_TEMP30 != RX10_TEMP32 ; 
if ( RX10_TEMP33 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP31 = "Bad place access for array X10_TEMP12" ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP34 = getRefArrayValue1double ( X10_TEMP12 , RX10_TEMP26 ) ; 
const double X10_TEMP14 = RX10_TEMP34 ; 
const int X10_TEMP15 = 1000 ; 
const double X10_TEMP17 = X10_TEMP14 / X10_TEMP15 ; 
const double X10_TEMP18 = X10_TEMP17 ; 
struct Point1 RX10_TEMP35  ; 
Point1_Point1( &RX10_TEMP35/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP36 = X10_TEMP10 .distValue ; 
struct Region1 RX10_TEMP37 = RX10_TEMP36 .dReg ; 
const int RX10_TEMP38 = searchPointInRegion1 ( RX10_TEMP37 , RX10_TEMP35 ) ; 
const int RX10_TEMP39 = 0 ; 
const int RX10_TEMP40 = RX10_TEMP38 < RX10_TEMP39 ; 
if ( RX10_TEMP40 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP41 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP41 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP42 = getPlaceFromDist1 ( RX10_TEMP36 , RX10_TEMP38 ) ; 
const int RX10_TEMP44 = /* here  */ 0 ; 
const int RX10_TEMP45 = RX10_TEMP42 != RX10_TEMP44 ; 
if ( RX10_TEMP45 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP43 = "Bad place access for array X10_TEMP10" ; 
fprintf(stderr, RX10_TEMP43 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP10 , RX10_TEMP38 , X10_TEMP18 ) ; 
struct doubleRefArray1 X10_TEMP19 = X10_TEMP0 ->total_time ; 
struct doubleRefArray1 X10_TEMP21 = X10_TEMP0 ->total_time ; 
struct Point1 RX10_TEMP46  ; 
Point1_Point1( &RX10_TEMP46/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP47 = X10_TEMP21 .distValue ; 
struct Region1 RX10_TEMP48 = RX10_TEMP47 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion1 ( RX10_TEMP48 , RX10_TEMP46 ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist1 ( RX10_TEMP47 , RX10_TEMP49 ) ; 
const int RX10_TEMP55 = /* here  */ 0 ; 
const int RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP54 = "Bad place access for array X10_TEMP21" ; 
fprintf(stderr, RX10_TEMP54 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP57 = getRefArrayValue1double ( X10_TEMP21 , RX10_TEMP49 ) ; 
const double X10_TEMP25 = RX10_TEMP57 ; 
struct doubleRefArray1 X10_TEMP23 = X10_TEMP0 ->elapsed_time ; 
struct Point1 RX10_TEMP58  ; 
Point1_Point1( &RX10_TEMP58/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP59 = X10_TEMP23 .distValue ; 
struct Region1 RX10_TEMP60 = RX10_TEMP59 .dReg ; 
const int RX10_TEMP61 = searchPointInRegion1 ( RX10_TEMP60 , RX10_TEMP58 ) ; 
const int RX10_TEMP62 = 0 ; 
const int RX10_TEMP63 = RX10_TEMP61 < RX10_TEMP62 ; 
if ( RX10_TEMP63 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP64 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP64 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP65 = getPlaceFromDist1 ( RX10_TEMP59 , RX10_TEMP61 ) ; 
const int RX10_TEMP67 = /* here  */ 0 ; 
const int RX10_TEMP68 = RX10_TEMP65 != RX10_TEMP67 ; 
if ( RX10_TEMP68 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP66 = "Bad place access for array X10_TEMP23" ; 
fprintf(stderr, RX10_TEMP66 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP69 = getRefArrayValue1double ( X10_TEMP23 , RX10_TEMP61 ) ; 
const double X10_TEMP26 = RX10_TEMP69 ; 
const double X10_TEMP28 = X10_TEMP25 + X10_TEMP26 ; 
const double X10_TEMP29 = X10_TEMP28 ; 
struct Point1 RX10_TEMP70  ; 
Point1_Point1( &RX10_TEMP70/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP71 = X10_TEMP19 .distValue ; 
struct Region1 RX10_TEMP72 = RX10_TEMP71 .dReg ; 
const int RX10_TEMP73 = searchPointInRegion1 ( RX10_TEMP72 , RX10_TEMP70 ) ; 
const int RX10_TEMP74 = 0 ; 
const int RX10_TEMP75 = RX10_TEMP73 < RX10_TEMP74 ; 
if ( RX10_TEMP75 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP77 = getPlaceFromDist1 ( RX10_TEMP71 , RX10_TEMP73 ) ; 
const int RX10_TEMP79 = /* here  */ 0 ; 
const int RX10_TEMP80 = RX10_TEMP77 != RX10_TEMP79 ; 
if ( RX10_TEMP80 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP78 = "Bad place access for array X10_TEMP19" ; 
fprintf(stderr, RX10_TEMP78 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP19 , RX10_TEMP73 , X10_TEMP29 ) ; 
} 

double /*static*/Timer_readTimer (  struct Timer  * const X10_TEMP0 , const int n ) 
{ struct doubleRefArray1 X10_TEMP1 = X10_TEMP0 ->total_time ; 
struct Point1 RX10_TEMP0  ; 
Point1_Point1( &RX10_TEMP0/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP1 = X10_TEMP1 .distValue ; 
struct Region1 RX10_TEMP2 = RX10_TEMP1 .dReg ; 
const int RX10_TEMP3 = searchPointInRegion1 ( RX10_TEMP2 , RX10_TEMP0 ) ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4 ; 
if ( RX10_TEMP5 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP6 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP6 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP7 = getPlaceFromDist1 ( RX10_TEMP1 , RX10_TEMP3 ) ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP8 = "Bad place access for array X10_TEMP1" ; 
fprintf(stderr, RX10_TEMP8 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP11 = getRefArrayValue1double ( X10_TEMP1 , RX10_TEMP3 ) ; 
const double X10_TEMP4 = RX10_TEMP11 ; 
return X10_TEMP4 ; 
} 

void /*static*/Timer_resetTimer (  struct Timer  * const X10_TEMP0 , const int n ) 
{ struct doubleRefArray1 X10_TEMP1 = X10_TEMP0 ->total_time ; 
const double X10_TEMP4 = 0 ; 
const double X10_TEMP5 = X10_TEMP4 ; 
struct Point1 RX10_TEMP0  ; 
Point1_Point1( &RX10_TEMP0/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP1 = X10_TEMP1 .distValue ; 
struct Region1 RX10_TEMP2 = RX10_TEMP1 .dReg ; 
const int RX10_TEMP3 = searchPointInRegion1 ( RX10_TEMP2 , RX10_TEMP0 ) ; 
const int RX10_TEMP4 = 0 ; 
const int RX10_TEMP5 = RX10_TEMP3 < RX10_TEMP4 ; 
if ( RX10_TEMP5 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP6 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP6 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP7 = getPlaceFromDist1 ( RX10_TEMP1 , RX10_TEMP3 ) ; 
const int RX10_TEMP9 = /* here  */ 0 ; 
const int RX10_TEMP10 = RX10_TEMP7 != RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP8 = "Bad place access for array X10_TEMP1" ; 
fprintf(stderr, RX10_TEMP8 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP1 , RX10_TEMP3 , X10_TEMP5 ) ; 
struct doubleRefArray1 X10_TEMP6 = X10_TEMP0 ->start_time ; 
const double X10_TEMP9 = 0 ; 
const double X10_TEMP10 = X10_TEMP9 ; 
struct Point1 RX10_TEMP11  ; 
Point1_Point1( &RX10_TEMP11/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP12 = X10_TEMP6 .distValue ; 
struct Region1 RX10_TEMP13 = RX10_TEMP12 .dReg ; 
const int RX10_TEMP14 = searchPointInRegion1 ( RX10_TEMP13 , RX10_TEMP11 ) ; 
const int RX10_TEMP15 = 0 ; 
const int RX10_TEMP16 = RX10_TEMP14 < RX10_TEMP15 ; 
if ( RX10_TEMP16 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP17 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP17 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP18 = getPlaceFromDist1 ( RX10_TEMP12 , RX10_TEMP14 ) ; 
const int RX10_TEMP20 = /* here  */ 0 ; 
const int RX10_TEMP21 = RX10_TEMP18 != RX10_TEMP20 ; 
if ( RX10_TEMP21 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP19 = "Bad place access for array X10_TEMP6" ; 
fprintf(stderr, RX10_TEMP19 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP6 , RX10_TEMP14 , X10_TEMP10 ) ; 
struct doubleRefArray1 X10_TEMP11 = X10_TEMP0 ->elapsed_time ; 
const double X10_TEMP14 = 0 ; 
const double X10_TEMP15 = X10_TEMP14 ; 
struct Point1 RX10_TEMP22  ; 
Point1_Point1( &RX10_TEMP22/*Assignment*/, n ) ; 
struct Dist1 RX10_TEMP23 = X10_TEMP11 .distValue ; 
struct Region1 RX10_TEMP24 = RX10_TEMP23 .dReg ; 
const int RX10_TEMP25 = searchPointInRegion1 ( RX10_TEMP24 , RX10_TEMP22 ) ; 
const int RX10_TEMP26 = 0 ; 
const int RX10_TEMP27 = RX10_TEMP25 < RX10_TEMP26 ; 
if ( RX10_TEMP27 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP28 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP28 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP29 = getPlaceFromDist1 ( RX10_TEMP23 , RX10_TEMP25 ) ; 
const int RX10_TEMP31 = /* here  */ 0 ; 
const int RX10_TEMP32 = RX10_TEMP29 != RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP30 = "Bad place access for array X10_TEMP11" ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( X10_TEMP11 , RX10_TEMP25 , X10_TEMP15 ) ; 
} 

void /*static*/Timer_resetAllTimers (  struct Timer  * const X10_TEMP0 ) 
{ /*UpdatableVariableDeclaration*/int i = 0 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP4 = i < _Timer_max_counters ; 

while ( X10_TEMP4 ) 
{ Timer_resetTimer ( X10_TEMP0 , i ) ; 
const int X10_TEMP6 = i ; 
const int X10_TEMP7 = 1 ; 
i = i + X10_TEMP7 ; X10_TEMP4 = i < _Timer_max_counters ; } 

} 

int /*static*/_X10Util_DEBUG_init ( ) 
{ const int X10_TEMP2 = 1 ; 
return X10_TEMP2 ; 
} 

int /*static*/_X10Util_ENABLE_CHECKS_init ( ) 
{ const int X10_TEMP2 = 1 ; 
return X10_TEMP2 ; 
} 

double /*static*/_X10Util_ERROR_init ( ) 
{ const double X10_TEMP2 = 1.0e-13; 
return X10_TEMP2 ; 
} 

double /*static*/X10Util_maxDouble ( const double d1 , const double d2 ) 
{ const int X10_TEMP2 = d1 >= d2 ; 
const int X10_TEMP3 = X10_TEMP2 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP6 = d2 ; 
if ( X10_TEMP3 ) 
{ X10_TEMP6 = d1 ; } 

const double X10_TEMP7 = X10_TEMP6 ; 
return X10_TEMP7 ; 
} 

double /*static*/X10Util_minDouble ( const double d1 , const double d2 ) 
{ const int X10_TEMP2 = d1 >= d2 ; 
const int X10_TEMP3 = X10_TEMP2 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP6 = d1 ; 
if ( X10_TEMP3 ) 
{ X10_TEMP6 = d2 ; } 

const double X10_TEMP7 = X10_TEMP6 ; 
return X10_TEMP7 ; 
} 

int /*static*/X10Util_maxInt ( const int i1 , const int i2 ) 
{ const int X10_TEMP2 = i1 >= i2 ; 
const int X10_TEMP3 = X10_TEMP2 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP6 = i2 ; 
if ( X10_TEMP3 ) 
{ X10_TEMP6 = i1 ; } 

const int X10_TEMP7 = X10_TEMP6 ; 
return X10_TEMP7 ; 
} 

int /*static*/X10Util_minInt ( const int i1 , const int i2 ) 
{ const int X10_TEMP2 = i1 >= i2 ; 
const int X10_TEMP3 = X10_TEMP2 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP6 = i1 ; 
if ( X10_TEMP3 ) 
{ X10_TEMP6 = i2 ; } 

const int X10_TEMP7 = X10_TEMP6 ; 
return X10_TEMP7 ; 
} 

Region2 /*static*/X10Util_prependRegionRank2D (  struct Region1 const r1 ,  struct Region1 const r2 ) 
{ struct Region2 X10_TEMP4 = X10Util_extendRegionRank2D ( r1 , r2 ) ; 
return X10_TEMP4 ; 
} 

Region3 /*static*/X10Util_prependRegionRank3D (  struct Region1 const r1 ,  struct Region2 const r2 ) 
{ const int X10_TEMP4 = 0 ; 
struct Region1 X10_TEMP6 = X10Util_getRank2D ( r2 , X10_TEMP4 ) ; 
const int X10_TEMP9 = 1 ; 
struct Region1 X10_TEMP11 = X10Util_getRank2D ( r2 , X10_TEMP9 ) ; 
struct Region3 X10_TEMP13 = createNewRegion3AAA ( r1 , X10_TEMP6 , X10_TEMP11 ) ; 
return X10_TEMP13 ; 
} 

Region2 /*static*/X10Util_extendRegionRank2D (  struct Region1 const r1 ,  struct Region1 const r2 ) 
{ struct Region2 X10_TEMP4 = createNewRegion2AA ( r1 , r2 ) ; 
return X10_TEMP4 ; 
} 

Region3 /*static*/X10Util_extendRegionRank3D (  struct Region2 const r1 ,  struct Region1 const r2 ) 
{ const int X10_TEMP3 = 0 ; 
struct Region1 X10_TEMP5 = X10Util_getRank2D ( r1 , X10_TEMP3 ) ; 
const int X10_TEMP8 = 1 ; 
struct Region1 X10_TEMP10 = X10Util_getRank2D ( r1 , X10_TEMP8 ) ; 
struct Region3 X10_TEMP13 = createNewRegion3AAA ( X10_TEMP5 , X10_TEMP10 , r2 ) ; 
return X10_TEMP13 ; 
} 

Dist2 /*static*/X10Util_prependDistRank2D (  struct Region1 const r1 ,  struct Dist1 const d2 ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region2 X10_TEMP4 = createNewRegion2RR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist2 X10_TEMP7 = getPlaceDist2 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist1 X10_TEMP15 = restrictDist1 ( d2 , p ) ; 
struct Region1 RX10_TEMP12 = X10_TEMP15 .dReg ; 
struct Region1 X10_TEMP16 = RX10_TEMP12 ; 
struct Region1 rLocal = X10_TEMP16 ; 
struct Region2 X10_TEMP20 = X10Util_prependRegionRank2D ( r1 , rLocal ) ; 
struct Dist2 X10_TEMP22 = getPlaceDist2 ( X10_TEMP20 , p ) ; 
struct Dist2 X10_TEMP24 = unionDist2 ( dResult , X10_TEMP22 ) ; 
dResult = X10_TEMP24 ; } 

return dResult ; 
} 

Dist3 /*static*/X10Util_prependDistRank3D (  struct Region1 const r1 ,  struct Dist2 const d2 ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region3 X10_TEMP4 = createNewRegion3RRR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist3 X10_TEMP7 = getPlaceDist3 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist3 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist2 X10_TEMP15 = restrictDist2 ( d2 , p ) ; 
struct Region2 RX10_TEMP12 = X10_TEMP15 .dReg ; 
struct Region2 X10_TEMP16 = RX10_TEMP12 ; 
struct Region2 rLocal = X10_TEMP16 ; 
struct Region3 X10_TEMP20 = X10Util_prependRegionRank3D ( r1 , rLocal ) ; 
struct Dist3 X10_TEMP22 = getPlaceDist3 ( X10_TEMP20 , p ) ; 
struct Dist3 X10_TEMP24 = unionDist3 ( dResult , X10_TEMP22 ) ; 
dResult = X10_TEMP24 ; } 

return dResult ; 
} 

Dist2 /*static*/X10Util_extendDistRank2D (  struct Dist1 const d1 ,  struct Region1 const r2 ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region2 X10_TEMP4 = createNewRegion2RR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist2 X10_TEMP7 = getPlaceDist2 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist1 X10_TEMP15 = restrictDist1 ( d1 , p ) ; 
struct Region1 RX10_TEMP12 = X10_TEMP15 .dReg ; 
struct Region1 X10_TEMP16 = RX10_TEMP12 ; 
struct Region1 rLocal = X10_TEMP16 ; 
struct Region2 X10_TEMP20 = X10Util_extendRegionRank2D ( rLocal , r2 ) ; 
struct Dist2 X10_TEMP22 = getPlaceDist2 ( X10_TEMP20 , p ) ; 
struct Dist2 X10_TEMP24 = unionDist2 ( dResult , X10_TEMP22 ) ; 
dResult = X10_TEMP24 ; } 

return dResult ; 
} 

Dist3 /*static*/X10Util_extendDistRank3D (  struct Dist2 const d1 ,  struct Region1 const r2 ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region3 X10_TEMP4 = createNewRegion3RRR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist3 X10_TEMP7 = getPlaceDist3 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist3 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist2 X10_TEMP15 = restrictDist2 ( d1 , p ) ; 
struct Region2 RX10_TEMP12 = X10_TEMP15 .dReg ; 
struct Region2 X10_TEMP16 = RX10_TEMP12 ; 
struct Region2 rLocal = X10_TEMP16 ; 
struct Region3 X10_TEMP20 = X10Util_extendRegionRank3D ( rLocal , r2 ) ; 
struct Dist3 X10_TEMP22 = getPlaceDist3 ( X10_TEMP20 , p ) ; 
struct Dist3 X10_TEMP24 = unionDist3 ( dResult , X10_TEMP22 ) ; 
dResult = X10_TEMP24 ; } 

return dResult ; 
} 

Dist1 /*static*/X10Util_distBlock (  struct Region1 const r ) 
{ const int RX10_TEMP0 = r .regSize ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = RX10_TEMP0 <= RX10_TEMP1 ; 
if ( RX10_TEMP2 ) 
{ const char * RX10_TEMP3 = "Operation low() not defined on empty region r" ; 
fprintf(stderr, RX10_TEMP3 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP1 = regionLow ( r ) ; 
const int X10_TEMP2 = 0 ; 
const int X10_TEMP4 = X10_TEMP1 != X10_TEMP2 ; 
if ( X10_TEMP4 ) 
{ const char * X10_TEMP6 = "distBlock only applies to rails" ; 
fprintf(stderr, X10_TEMP6 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP4 = r .regSize ; 
const int RX10_TEMP5 = 0 ; 
const int RX10_TEMP6 = RX10_TEMP4 <= RX10_TEMP5 ; 
if ( RX10_TEMP6 ) 
{ const char * RX10_TEMP7 = "Operation high() not defined on empty region r" ; 
fprintf(stderr, RX10_TEMP7 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP9 = regionHigh ( r ) ; 
const int X10_TEMP7 = r .regSize ; 
const int X10_TEMP8 = 1 ; 
const int X10_TEMP10 = X10_TEMP7 - X10_TEMP8 ; 
const int X10_TEMP12 = X10_TEMP9 != X10_TEMP10 ; 
if ( X10_TEMP12 ) 
{ const char * X10_TEMP14 = "distblock only applies to rails" ; 
fprintf(stderr, X10_TEMP14 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP15 = r .regSize ; 
const int X10_TEMP16 = /* place.MAX_PLACES  */ 1 ; 
/*UpdatableVariableDeclaration*/int blockSize = X10_TEMP15 / X10_TEMP16 ; 
const int X10_TEMP18 = 0 ; 
const int X10_TEMP19 = 1 ; 
const int X10_TEMP20 = X10_TEMP18 - X10_TEMP19 ; 
struct Region1 X10_TEMP21 = createNewRegion1R ( X10_TEMP18 , X10_TEMP20 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
struct Dist1 X10_TEMP24 = getPlaceDist1 ( X10_TEMP21 , X10_TEMP22 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist1 dResult = X10_TEMP24 ; 
struct Dist1 X10_TEMP27 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP9 = X10_TEMP27 .dReg ; 
const int RX10_TEMP12 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP10 = RX10_TEMP9 .regSize ; 
RX10_TEMP10 = RX10_TEMP10 - RX10_TEMP12 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP11 = RX10_TEMP10 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP11 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP8 = SX10_TEMP1 ; 
const int RX10_TEMP13 = RX10_TEMP8 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP9 , RX10_TEMP13 ) ; 
struct Dist1 X10_TEMP28 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP14 = X10_TEMP28 .dReg ; 
const int RX10_TEMP15 = searchPointInRegion1 ( RX10_TEMP14 , pl ) ; 
const int RX10_TEMP16 = 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 < RX10_TEMP16 ; 
if ( RX10_TEMP17 ) 
{ const char * RX10_TEMP18 = "Point pl not found in the distribution X10_TEMP28." ; 
fprintf(stderr, RX10_TEMP18 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP19 = getPlaceFromDist1 ( X10_TEMP28 , RX10_TEMP15 ) ; 
const int p = RX10_TEMP19 ; 
const int X10_TEMP32 = pl .f0 ; 
const int X10_TEMP43 = X10_TEMP32 * blockSize ; 
const int X10_TEMP35 = pl .f0 ; 
const int X10_TEMP36 = 1 ; 
const int X10_TEMP38 = X10_TEMP35 + X10_TEMP36 ; 
const int X10_TEMP40 = X10_TEMP38 * blockSize ; 
const int X10_TEMP41 = 1 ; 
const int X10_TEMP44 = X10_TEMP40 - X10_TEMP41 ; 
struct Region1 X10_TEMP45 = createNewRegion1R ( X10_TEMP43 , X10_TEMP44 ) ; 
struct Dist1 X10_TEMP47 = getPlaceDist1 ( X10_TEMP45 , p ) ; 
/*UpdatableVariableDeclaration*/ struct Dist1 ext = X10_TEMP47 ; 
struct Dist1 X10_TEMP50 = unionDist1 ( dResult , ext ) ; 
dResult = X10_TEMP50 ; } 

const int X10_TEMP52 = r .regSize ; 
const int X10_TEMP51 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP53 = blockSize * X10_TEMP51 ; 
/*UpdatableVariableDeclaration*/int diff = X10_TEMP52 - X10_TEMP53 ; 
const int X10_TEMP55 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP56 = blockSize * X10_TEMP55 ; 
const int X10_TEMP57 = r .regSize ; 
const int X10_TEMP59 = X10_TEMP56 != X10_TEMP57 ; 
if ( X10_TEMP59 ) 
{ const int X10_TEMP60 = /* place.MAX_PLACES  */ 1 ; 
const int X10_TEMP61 = 1 ; 
const int X10_TEMP63 = X10_TEMP60 - X10_TEMP61 ; 
/*UpdatableVariableDeclaration*/int l = /* place.places ( X10_TEMP63 )  */ 0 
; 
const int X10_TEMP65 = r .regSize ; 
const int X10_TEMP70 = X10_TEMP65 - diff ; 
const int X10_TEMP67 = r .regSize ; 
const int X10_TEMP68 = 1 ; 
const int X10_TEMP71 = X10_TEMP67 - X10_TEMP68 ; 
struct Region1 X10_TEMP72 = createNewRegion1R ( X10_TEMP70 , X10_TEMP71 ) ; 
struct Dist1 X10_TEMP74 = getPlaceDist1 ( X10_TEMP72 , l ) ; 
/*UpdatableVariableDeclaration*/ struct Dist1 ext = X10_TEMP74 ; 
struct Dist1 X10_TEMP77 = unionDist1 ( dResult , ext ) ; 
dResult = X10_TEMP77 ; } 

return dResult ; 
} 

Dist2 /*static*/X10Util_distBlockStar1 (  struct Region2 const r ) 
{ const int X10_TEMP3 = 0 ; 
struct Region1 r1 = X10Util_getRank2D ( r , X10_TEMP3 ) ; 
struct Dist1 d1 = X10Util_distBlock ( r1 ) ; 
const int X10_TEMP10 = 1 ; 
struct Region1 X10_TEMP12 = X10Util_getRank2D ( r , X10_TEMP10 ) ; 
struct Dist2 X10_TEMP14 = X10Util_extendDistRank2D ( d1 , X10_TEMP12 ) ; 
return X10_TEMP14 ; 
} 

Dist2 /*static*/X10Util_distBlockStar2 (  struct Region1 const r1 ,  struct Region1 const r2 ) 
{ struct Region2 X10_TEMP4 = createNewRegion2AA ( r1 , r2 ) ; 
struct Dist2 X10_TEMP6 = X10Util_distBlockStar1 ( X10_TEMP4 ) ; 
return X10_TEMP6 ; 
} 

Dist2 /*static*/X10Util_distStarBlock1 (  struct Region2 const r ) 
{ const int X10_TEMP3 = 1 ; 
struct Region1 r2 = X10Util_getRank2D ( r , X10_TEMP3 ) ; 
struct Dist1 d2 = X10Util_distBlock ( r2 ) ; 
const int X10_TEMP9 = 0 ; 
struct Region1 X10_TEMP12 = X10Util_getRank2D ( r , X10_TEMP9 ) ; 
struct Dist2 X10_TEMP14 = X10Util_prependDistRank2D ( X10_TEMP12 , d2 ) ; 
return X10_TEMP14 ; 
} 

Dist2 /*static*/X10Util_distStarBlock2 (  struct Region1 const r1 ,  struct Region1 const r2 ) 
{ struct Region2 X10_TEMP4 = createNewRegion2AA ( r1 , r2 ) ; 
struct Dist2 X10_TEMP6 = X10Util_distStarBlock1 ( X10_TEMP4 ) ; 
return X10_TEMP6 ; 
} 

int /*static*/X10Util_isDistBlockStar (  struct Dist2 const d ) 
{ if ( _X10Util_ENABLE_CHECKS ) 
{ struct Region2 RX10_TEMP0 = d .dReg ; 
struct Region2 rd = RX10_TEMP0 ; 
const int X10_TEMP5 = 0 ; 
struct Region1 r1 = X10Util_getRank2D ( rd , X10_TEMP5 ) ; 
const int X10_TEMP9 = 1 ; 
struct Region1 r2 = X10Util_getRank2D ( rd , X10_TEMP9 ) ; 
struct Dist1 X10_TEMP12 = getBlockDist1 ( r1 ) ; 
struct Dist1 dRef = X10_TEMP12 ; 
struct Dist1 X10_TEMP15 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP2 = X10_TEMP15 .dReg ; 
const int RX10_TEMP5 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = RX10_TEMP2 .regSize ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP4 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP1 ; 
const int RX10_TEMP6 = RX10_TEMP1 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP2 , RX10_TEMP6 ) ; 
struct Dist1 X10_TEMP16 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP7 = X10_TEMP16 .dReg ; 
const int RX10_TEMP8 = searchPointInRegion1 ( RX10_TEMP7 , pl ) ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ const char * RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP16." ; 
fprintf(stderr, RX10_TEMP11 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP12 = getPlaceFromDist1 ( X10_TEMP16 , RX10_TEMP8 ) ; 
const int p = RX10_TEMP12 ; 
struct Dist2 X10_TEMP20 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP13 = X10_TEMP20 .dReg ; 
struct Region2 X10_TEMP21 = RX10_TEMP13 ; 
struct Region2 rLocal = X10_TEMP21 ; 
struct Dist1 X10_TEMP24 = restrictDist1 ( dRef , p ) ; 
struct Region1 RX10_TEMP14 = X10_TEMP24 .dReg ; 
struct Region1 X10_TEMP25 = RX10_TEMP14 ; 
struct Region1 rRefLocal = X10_TEMP25 ; 
const int X10_TEMP29 = 0 ; 
struct Region1 X10_TEMP31 = X10Util_getRank2D ( rLocal , X10_TEMP29 ) ; 
const int X10_TEMP34 = 0 ; 
const int X10_TEMP35 = 0 ; 
const int X10_TEMP32 = X10_TEMP31 .regSize ; 
const int X10_TEMP33 = rRefLocal .regSize ; 
/*UpdatableVariableDeclaration*/int X10_TEMP36 = X10_TEMP32 == X10_TEMP33 ; 
if ( X10_TEMP36 ) 
{ struct Region1 X10_TEMP37 = createNewRegion1R ( X10_TEMP34 , X10_TEMP34 ) ; 
const int X10_TEMP38 = /* here  */ 0 ; 
struct Dist1 X10_TEMP39 = getPlaceDist1 ( X10_TEMP37 , X10_TEMP38 ) ; 
struct Region1 RX10_TEMP15 = X10_TEMP39 .dReg ; 
const int RX10_TEMP16 = 0 ; 
const int RX10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP18 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP18 = RX10_TEMP18 - RX10_TEMP17 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP19 = RX10_TEMP18 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP20 = RX10_TEMP18 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP21 = (booleanStub *)calloc(RX10_TEMP20,sizeof( booleanStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP19 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP22 = SX10_TEMP5 ; 
const int RX10_TEMP23 = /* here  */ 0 ; 
const int RX10_TEMP24 = RX10_TEMP22 ; 
const int RX10_TEMP25 = /* place.places ( RX10_TEMP24 )  */ 0 
; 
const int RX10_TEMP26 = getDistLocalCount1 ( X10_TEMP39 , RX10_TEMP24 ) ; 
const int RX10_TEMP27 = RX10_TEMP26 - RX10_TEMP17 ; 
/* async ( RX10_TEMP25 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP27 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP7 = (int *)calloc(RX10_TEMP29,sizeof( int )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP29 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP28 = SX10_TEMP8 ; 
const int X10_TEMP42 = 1 ; 
SX10_TEMP7 [ RX10_TEMP28 ] = X10_TEMP42 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP30 = SX10_TEMP7 ; 
struct booleanStub RX10_TEMP31  ; 
booleanStub_booleanStub( &RX10_TEMP31/*Assignment*/, RX10_TEMP30 ) ; 
/* async ( RX10_TEMP23 )  */ 
{ RX10_TEMP21 [ RX10_TEMP22 ] = RX10_TEMP31 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct booleanStub * const SX10_TEMP9 = (booleanStub *)calloc(RX10_TEMP19,sizeof( booleanStub )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP19 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP10 ; 
struct booleanStub RX10_TEMP33 = RX10_TEMP21 [ RX10_TEMP34 ] 
; 
SX10_TEMP9 [ RX10_TEMP34 ] = RX10_TEMP33 ; 
} 

/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP32 = SX10_TEMP9 ; 
struct booleanRefArray1 RX10_TEMP35  ; 
booleanRefArray1_booleanRefArray1( &RX10_TEMP35/*Assignment*/, X10_TEMP39 , RX10_TEMP32 ) ; 
struct booleanRefArray1 X10_TEMP40 = RX10_TEMP35 ; 
/* finish  */ 
{ const int RX10_TEMP39 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP37 = X10_TEMP31 .regSize ; 
RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP38 = RX10_TEMP37 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP38 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP36 = SX10_TEMP12 ; 
const int RX10_TEMP40 = RX10_TEMP36 ; 
struct Point1 X10_TEMP43 = regionOrdinalPoint1 ( X10_TEMP31 , RX10_TEMP40 ) ; 
/* async ( X10_TEMP38 )  */ 
{ const int RX10_TEMP41 = regionContainsPoint1 ( rRefLocal , X10_TEMP43 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP44 = RX10_TEMP41 ; 
X10_TEMP44 = ! X10_TEMP44 ; if ( X10_TEMP44 ) 
{ struct Point1 RX10_TEMP42  ; 
Point1_Point1( &RX10_TEMP42/*Assignment*/, X10_TEMP34 ) ; 
struct Dist1 RX10_TEMP43 = X10_TEMP40 .distValue ; 
struct Region1 RX10_TEMP44 = RX10_TEMP43 .dReg ; 
const int RX10_TEMP45 = searchPointInRegion1 ( RX10_TEMP44 , RX10_TEMP42 ) ; 
const int RX10_TEMP46 = 0 ; 
const int RX10_TEMP47 = RX10_TEMP45 < RX10_TEMP46 ; 
if ( RX10_TEMP47 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP49 = getPlaceFromDist1 ( RX10_TEMP43 , RX10_TEMP45 ) ; 
const int RX10_TEMP51 = /* here  */ 0 ; 
const int RX10_TEMP52 = RX10_TEMP49 != RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Bad place access for array X10_TEMP40" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1boolean ( X10_TEMP40 , RX10_TEMP45 , X10_TEMP35 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP53  ; 
Point1_Point1( &RX10_TEMP53/*Assignment*/, X10_TEMP34 ) ; 
struct Dist1 RX10_TEMP54 = X10_TEMP40 .distValue ; 
struct Region1 RX10_TEMP55 = RX10_TEMP54 .dReg ; 
const int RX10_TEMP56 = searchPointInRegion1 ( RX10_TEMP55 , RX10_TEMP53 ) ; 
const int RX10_TEMP57 = 0 ; 
const int RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57 ; 
if ( RX10_TEMP58 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP60 = getPlaceFromDist1 ( RX10_TEMP54 , RX10_TEMP56 ) ; 
const int RX10_TEMP62 = /* here  */ 0 ; 
const int RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62 ; 
if ( RX10_TEMP63 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Bad place access for array X10_TEMP40" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getRefArrayValue1boolean ( X10_TEMP40 , RX10_TEMP56 ) ; 
X10_TEMP36 = RX10_TEMP64 ; } 

const int X10_TEMP45 = X10_TEMP36 ; 
const int X10_TEMP47 = X10_TEMP45 ; 
const int X10_TEMP49 = ! X10_TEMP47 ; 
if ( X10_TEMP49 ) 
{ const int X10_TEMP51 = 0 ; 
return X10_TEMP51 ; 
} 
else 
{ const int X10_TEMP54 = 1 ; 
struct Region1 X10_TEMP56 = X10Util_getRank2D ( rLocal , X10_TEMP54 ) ; 
const int X10_TEMP59 = 0 ; 
const int X10_TEMP60 = 0 ; 
const int X10_TEMP57 = X10_TEMP56 .regSize ; 
const int X10_TEMP58 = r2 .regSize ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = X10_TEMP57 == X10_TEMP58 ; 
if ( X10_TEMP61 ) 
{ struct Region1 X10_TEMP62 = createNewRegion1R ( X10_TEMP59 , X10_TEMP59 ) ; 
const int X10_TEMP63 = /* here  */ 0 ; 
struct Dist1 X10_TEMP64 = getPlaceDist1 ( X10_TEMP62 , X10_TEMP63 ) ; 
struct Region1 RX10_TEMP65 = X10_TEMP64 .dReg ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP68 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP69 = RX10_TEMP68 + SX10_TEMP13 ; 
const int SX10_TEMP14 = 1 ; 
const int RX10_TEMP70 = RX10_TEMP68 + SX10_TEMP14 ; 
/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP71 = (booleanStub *)calloc(RX10_TEMP70,sizeof( booleanStub )); 
/* finish  */ 
{ for ( int SX10_TEMP16 = 0 ; SX10_TEMP16 < RX10_TEMP69 ; SX10_TEMP16 ++ ) 
{ const int RX10_TEMP72 = SX10_TEMP16 ; 
const int RX10_TEMP73 = /* here  */ 0 ; 
const int RX10_TEMP74 = RX10_TEMP72 ; 
const int RX10_TEMP75 = /* place.places ( RX10_TEMP74 )  */ 0 
; 
const int RX10_TEMP76 = getDistLocalCount1 ( X10_TEMP64 , RX10_TEMP74 ) ; 
const int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67 ; 
/* async ( RX10_TEMP75 )  */ 
{ const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP79 = RX10_TEMP77 + SX10_TEMP17 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP18 = (int *)calloc(RX10_TEMP79,sizeof( int )); 
for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP79 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP78 = SX10_TEMP19 ; 
const int X10_TEMP67 = 1 ; 
SX10_TEMP18 [ RX10_TEMP78 ] = X10_TEMP67 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP80 = SX10_TEMP18 ; 
struct booleanStub RX10_TEMP81  ; 
booleanStub_booleanStub( &RX10_TEMP81/*Assignment*/, RX10_TEMP80 ) ; 
/* async ( RX10_TEMP73 )  */ 
{ RX10_TEMP71 [ RX10_TEMP72 ] = RX10_TEMP81 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct booleanStub * const SX10_TEMP20 = (booleanStub *)calloc(RX10_TEMP69,sizeof( booleanStub )); 
for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP69 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP84 = SX10_TEMP21 ; 
struct booleanStub RX10_TEMP83 = RX10_TEMP71 [ RX10_TEMP84 ] 
; 
SX10_TEMP20 [ RX10_TEMP84 ] = RX10_TEMP83 ; 
} 

/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP82 = SX10_TEMP20 ; 
struct booleanRefArray1 RX10_TEMP85  ; 
booleanRefArray1_booleanRefArray1( &RX10_TEMP85/*Assignment*/, X10_TEMP64 , RX10_TEMP82 ) ; 
struct booleanRefArray1 X10_TEMP65 = RX10_TEMP85 ; 
/* finish  */ 
{ const int RX10_TEMP89 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP87 = X10_TEMP56 .regSize ; 
RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP89 ; const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP88 = RX10_TEMP87 + SX10_TEMP22 ; 
for ( int SX10_TEMP23 = 0 ; SX10_TEMP23 < RX10_TEMP88 ; SX10_TEMP23 ++ ) 
{ const int RX10_TEMP86 = SX10_TEMP23 ; 
const int RX10_TEMP90 = RX10_TEMP86 ; 
struct Point1 X10_TEMP68 = regionOrdinalPoint1 ( X10_TEMP56 , RX10_TEMP90 ) ; 
/* async ( X10_TEMP63 )  */ 
{ const int RX10_TEMP91 = regionContainsPoint1 ( r2 , X10_TEMP68 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP69 = RX10_TEMP91 ; 
X10_TEMP69 = ! X10_TEMP69 ; if ( X10_TEMP69 ) 
{ struct Point1 RX10_TEMP92  ; 
Point1_Point1( &RX10_TEMP92/*Assignment*/, X10_TEMP59 ) ; 
struct Dist1 RX10_TEMP93 = X10_TEMP65 .distValue ; 
struct Region1 RX10_TEMP94 = RX10_TEMP93 .dReg ; 
const int RX10_TEMP95 = searchPointInRegion1 ( RX10_TEMP94 , RX10_TEMP92 ) ; 
const int RX10_TEMP96 = 0 ; 
const int RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96 ; 
if ( RX10_TEMP97 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP98 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP98 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP99 = getPlaceFromDist1 ( RX10_TEMP93 , RX10_TEMP95 ) ; 
const int RX10_TEMP101 = /* here  */ 0 ; 
const int RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101 ; 
if ( RX10_TEMP102 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP100 = "Bad place access for array X10_TEMP65" ; 
fprintf(stderr, RX10_TEMP100 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1boolean ( X10_TEMP65 , RX10_TEMP95 , X10_TEMP60 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP103  ; 
Point1_Point1( &RX10_TEMP103/*Assignment*/, X10_TEMP59 ) ; 
struct Dist1 RX10_TEMP104 = X10_TEMP65 .distValue ; 
struct Region1 RX10_TEMP105 = RX10_TEMP104 .dReg ; 
const int RX10_TEMP106 = searchPointInRegion1 ( RX10_TEMP105 , RX10_TEMP103 ) ; 
const int RX10_TEMP107 = 0 ; 
const int RX10_TEMP108 = RX10_TEMP106 < RX10_TEMP107 ; 
if ( RX10_TEMP108 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP110 = getPlaceFromDist1 ( RX10_TEMP104 , RX10_TEMP106 ) ; 
const int RX10_TEMP112 = /* here  */ 0 ; 
const int RX10_TEMP113 = RX10_TEMP110 != RX10_TEMP112 ; 
if ( RX10_TEMP113 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP111 = "Bad place access for array X10_TEMP65" ; 
fprintf(stderr, RX10_TEMP111 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getRefArrayValue1boolean ( X10_TEMP65 , RX10_TEMP106 ) ; 
X10_TEMP61 = RX10_TEMP114 ; } 

const int X10_TEMP70 = X10_TEMP61 ; 
const int X10_TEMP72 = X10_TEMP70 ; 
const int X10_TEMP74 = ! X10_TEMP72 ; 
if ( X10_TEMP74 ) 
{ const int X10_TEMP75 = rRefLocal .regSize ; 
const int X10_TEMP76 = 0 ; 
const int X10_TEMP78 = X10_TEMP75 > X10_TEMP76 ; 
if ( X10_TEMP78 ) 
{ const int X10_TEMP80 = 0 ; 
return X10_TEMP80 ; 
} 

} 

} 


} 

} 

const int X10_TEMP82 = 1 ; 
return X10_TEMP82 ; 
} 

int /*static*/X10Util_isDistStarBlock (  struct Dist2 const d ) 
{ if ( _X10Util_ENABLE_CHECKS ) 
{ struct Region2 RX10_TEMP0 = d .dReg ; 
struct Region2 rd = RX10_TEMP0 ; 
const int X10_TEMP5 = 0 ; 
struct Region1 r1 = X10Util_getRank2D ( rd , X10_TEMP5 ) ; 
const int X10_TEMP9 = 1 ; 
struct Region1 r2 = X10Util_getRank2D ( rd , X10_TEMP9 ) ; 
struct Dist1 X10_TEMP12 = getBlockDist1 ( r2 ) ; 
struct Dist1 dRef = X10_TEMP12 ; 
struct Dist1 X10_TEMP15 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP2 = X10_TEMP15 .dReg ; 
const int RX10_TEMP5 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = RX10_TEMP2 .regSize ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP5 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP4 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP1 ; 
const int RX10_TEMP6 = RX10_TEMP1 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP2 , RX10_TEMP6 ) ; 
struct Dist1 X10_TEMP16 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP7 = X10_TEMP16 .dReg ; 
const int RX10_TEMP8 = searchPointInRegion1 ( RX10_TEMP7 , pl ) ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = RX10_TEMP8 < RX10_TEMP9 ; 
if ( RX10_TEMP10 ) 
{ const char * RX10_TEMP11 = "Point pl not found in the distribution X10_TEMP16." ; 
fprintf(stderr, RX10_TEMP11 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP12 = getPlaceFromDist1 ( X10_TEMP16 , RX10_TEMP8 ) ; 
const int p = RX10_TEMP12 ; 
struct Dist2 X10_TEMP20 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP13 = X10_TEMP20 .dReg ; 
struct Region2 X10_TEMP21 = RX10_TEMP13 ; 
struct Region2 rLocal = X10_TEMP21 ; 
struct Dist1 X10_TEMP24 = restrictDist1 ( dRef , p ) ; 
struct Region1 RX10_TEMP14 = X10_TEMP24 .dReg ; 
struct Region1 X10_TEMP25 = RX10_TEMP14 ; 
struct Region1 rRefLocal = X10_TEMP25 ; 
const int X10_TEMP29 = 0 ; 
struct Region1 X10_TEMP31 = X10Util_getRank2D ( rLocal , X10_TEMP29 ) ; 
const int X10_TEMP34 = 0 ; 
const int X10_TEMP35 = 0 ; 
const int X10_TEMP32 = X10_TEMP31 .regSize ; 
const int X10_TEMP33 = r1 .regSize ; 
/*UpdatableVariableDeclaration*/int X10_TEMP36 = X10_TEMP32 == X10_TEMP33 ; 
if ( X10_TEMP36 ) 
{ struct Region1 X10_TEMP37 = createNewRegion1R ( X10_TEMP34 , X10_TEMP34 ) ; 
const int X10_TEMP38 = /* here  */ 0 ; 
struct Dist1 X10_TEMP39 = getPlaceDist1 ( X10_TEMP37 , X10_TEMP38 ) ; 
struct Region1 RX10_TEMP15 = X10_TEMP39 .dReg ; 
const int RX10_TEMP16 = 0 ; 
const int RX10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP18 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP18 = RX10_TEMP18 - RX10_TEMP17 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP19 = RX10_TEMP18 + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP20 = RX10_TEMP18 + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP21 = (booleanStub *)calloc(RX10_TEMP20,sizeof( booleanStub )); 
/* finish  */ 
{ for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP19 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP22 = SX10_TEMP5 ; 
const int RX10_TEMP23 = /* here  */ 0 ; 
const int RX10_TEMP24 = RX10_TEMP22 ; 
const int RX10_TEMP25 = /* place.places ( RX10_TEMP24 )  */ 0 
; 
const int RX10_TEMP26 = getDistLocalCount1 ( X10_TEMP39 , RX10_TEMP24 ) ; 
const int RX10_TEMP27 = RX10_TEMP26 - RX10_TEMP17 ; 
/* async ( RX10_TEMP25 )  */ 
{ const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP29 = RX10_TEMP27 + SX10_TEMP6 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP7 = (int *)calloc(RX10_TEMP29,sizeof( int )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP29 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP28 = SX10_TEMP8 ; 
const int X10_TEMP42 = 1 ; 
SX10_TEMP7 [ RX10_TEMP28 ] = X10_TEMP42 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP30 = SX10_TEMP7 ; 
struct booleanStub RX10_TEMP31  ; 
booleanStub_booleanStub( &RX10_TEMP31/*Assignment*/, RX10_TEMP30 ) ; 
/* async ( RX10_TEMP23 )  */ 
{ RX10_TEMP21 [ RX10_TEMP22 ] = RX10_TEMP31 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct booleanStub * const SX10_TEMP9 = (booleanStub *)calloc(RX10_TEMP19,sizeof( booleanStub )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP19 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP10 ; 
struct booleanStub RX10_TEMP33 = RX10_TEMP21 [ RX10_TEMP34 ] 
; 
SX10_TEMP9 [ RX10_TEMP34 ] = RX10_TEMP33 ; 
} 

/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP32 = SX10_TEMP9 ; 
struct booleanRefArray1 RX10_TEMP35  ; 
booleanRefArray1_booleanRefArray1( &RX10_TEMP35/*Assignment*/, X10_TEMP39 , RX10_TEMP32 ) ; 
struct booleanRefArray1 X10_TEMP40 = RX10_TEMP35 ; 
/* finish  */ 
{ const int RX10_TEMP39 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP37 = X10_TEMP31 .regSize ; 
RX10_TEMP37 = RX10_TEMP37 - RX10_TEMP39 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP38 = RX10_TEMP37 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP38 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP36 = SX10_TEMP12 ; 
const int RX10_TEMP40 = RX10_TEMP36 ; 
struct Point1 X10_TEMP43 = regionOrdinalPoint1 ( X10_TEMP31 , RX10_TEMP40 ) ; 
/* async ( X10_TEMP38 )  */ 
{ const int RX10_TEMP41 = regionContainsPoint1 ( r1 , X10_TEMP43 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP44 = RX10_TEMP41 ; 
X10_TEMP44 = ! X10_TEMP44 ; if ( X10_TEMP44 ) 
{ struct Point1 RX10_TEMP42  ; 
Point1_Point1( &RX10_TEMP42/*Assignment*/, X10_TEMP34 ) ; 
struct Dist1 RX10_TEMP43 = X10_TEMP40 .distValue ; 
struct Region1 RX10_TEMP44 = RX10_TEMP43 .dReg ; 
const int RX10_TEMP45 = searchPointInRegion1 ( RX10_TEMP44 , RX10_TEMP42 ) ; 
const int RX10_TEMP46 = 0 ; 
const int RX10_TEMP47 = RX10_TEMP45 < RX10_TEMP46 ; 
if ( RX10_TEMP47 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP48 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP48 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP49 = getPlaceFromDist1 ( RX10_TEMP43 , RX10_TEMP45 ) ; 
const int RX10_TEMP51 = /* here  */ 0 ; 
const int RX10_TEMP52 = RX10_TEMP49 != RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP50 = "Bad place access for array X10_TEMP40" ; 
fprintf(stderr, RX10_TEMP50 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1boolean ( X10_TEMP40 , RX10_TEMP45 , X10_TEMP35 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP53  ; 
Point1_Point1( &RX10_TEMP53/*Assignment*/, X10_TEMP34 ) ; 
struct Dist1 RX10_TEMP54 = X10_TEMP40 .distValue ; 
struct Region1 RX10_TEMP55 = RX10_TEMP54 .dReg ; 
const int RX10_TEMP56 = searchPointInRegion1 ( RX10_TEMP55 , RX10_TEMP53 ) ; 
const int RX10_TEMP57 = 0 ; 
const int RX10_TEMP58 = RX10_TEMP56 < RX10_TEMP57 ; 
if ( RX10_TEMP58 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP60 = getPlaceFromDist1 ( RX10_TEMP54 , RX10_TEMP56 ) ; 
const int RX10_TEMP62 = /* here  */ 0 ; 
const int RX10_TEMP63 = RX10_TEMP60 != RX10_TEMP62 ; 
if ( RX10_TEMP63 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Bad place access for array X10_TEMP40" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getRefArrayValue1boolean ( X10_TEMP40 , RX10_TEMP56 ) ; 
X10_TEMP36 = RX10_TEMP64 ; } 

const int X10_TEMP45 = X10_TEMP36 ; 
const int X10_TEMP48 = 1 ; 
struct Region1 X10_TEMP50 = X10Util_getRank2D ( rLocal , X10_TEMP48 ) ; 
const int X10_TEMP53 = 0 ; 
const int X10_TEMP54 = 0 ; 
const int X10_TEMP51 = X10_TEMP50 .regSize ; 
const int X10_TEMP52 = rRefLocal .regSize ; 
/*UpdatableVariableDeclaration*/int X10_TEMP55 = X10_TEMP51 == X10_TEMP52 ; 
if ( X10_TEMP55 ) 
{ struct Region1 X10_TEMP56 = createNewRegion1R ( X10_TEMP53 , X10_TEMP53 ) ; 
const int X10_TEMP57 = /* here  */ 0 ; 
struct Dist1 X10_TEMP58 = getPlaceDist1 ( X10_TEMP56 , X10_TEMP57 ) ; 
struct Region1 RX10_TEMP65 = X10_TEMP58 .dReg ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP68 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP68 = RX10_TEMP68 - RX10_TEMP67 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP69 = RX10_TEMP68 + SX10_TEMP13 ; 
const int SX10_TEMP14 = 1 ; 
const int RX10_TEMP70 = RX10_TEMP68 + SX10_TEMP14 ; 
/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP71 = (booleanStub *)calloc(RX10_TEMP70,sizeof( booleanStub )); 
/* finish  */ 
{ for ( int SX10_TEMP16 = 0 ; SX10_TEMP16 < RX10_TEMP69 ; SX10_TEMP16 ++ ) 
{ const int RX10_TEMP72 = SX10_TEMP16 ; 
const int RX10_TEMP73 = /* here  */ 0 ; 
const int RX10_TEMP74 = RX10_TEMP72 ; 
const int RX10_TEMP75 = /* place.places ( RX10_TEMP74 )  */ 0 
; 
const int RX10_TEMP76 = getDistLocalCount1 ( X10_TEMP58 , RX10_TEMP74 ) ; 
const int RX10_TEMP77 = RX10_TEMP76 - RX10_TEMP67 ; 
/* async ( RX10_TEMP75 )  */ 
{ const int SX10_TEMP17 = 1 ; 
const int RX10_TEMP79 = RX10_TEMP77 + SX10_TEMP17 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP18 = (int *)calloc(RX10_TEMP79,sizeof( int )); 
for ( int SX10_TEMP19 = 0 ; SX10_TEMP19 < RX10_TEMP79 ; SX10_TEMP19 ++ ) 
{ const int RX10_TEMP78 = SX10_TEMP19 ; 
const int X10_TEMP61 = 1 ; 
SX10_TEMP18 [ RX10_TEMP78 ] = X10_TEMP61 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP80 = SX10_TEMP18 ; 
struct booleanStub RX10_TEMP81  ; 
booleanStub_booleanStub( &RX10_TEMP81/*Assignment*/, RX10_TEMP80 ) ; 
/* async ( RX10_TEMP73 )  */ 
{ RX10_TEMP71 [ RX10_TEMP72 ] = RX10_TEMP81 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct booleanStub * const SX10_TEMP20 = (booleanStub *)calloc(RX10_TEMP69,sizeof( booleanStub )); 
for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP69 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP84 = SX10_TEMP21 ; 
struct booleanStub RX10_TEMP83 = RX10_TEMP71 [ RX10_TEMP84 ] 
; 
SX10_TEMP20 [ RX10_TEMP84 ] = RX10_TEMP83 ; 
} 

/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP82 = SX10_TEMP20 ; 
struct booleanRefArray1 RX10_TEMP85  ; 
booleanRefArray1_booleanRefArray1( &RX10_TEMP85/*Assignment*/, X10_TEMP58 , RX10_TEMP82 ) ; 
struct booleanRefArray1 X10_TEMP59 = RX10_TEMP85 ; 
/* finish  */ 
{ const int RX10_TEMP89 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP87 = X10_TEMP50 .regSize ; 
RX10_TEMP87 = RX10_TEMP87 - RX10_TEMP89 ; const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP88 = RX10_TEMP87 + SX10_TEMP22 ; 
for ( int SX10_TEMP23 = 0 ; SX10_TEMP23 < RX10_TEMP88 ; SX10_TEMP23 ++ ) 
{ const int RX10_TEMP86 = SX10_TEMP23 ; 
const int RX10_TEMP90 = RX10_TEMP86 ; 
struct Point1 X10_TEMP62 = regionOrdinalPoint1 ( X10_TEMP50 , RX10_TEMP90 ) ; 
/* async ( X10_TEMP57 )  */ 
{ const int RX10_TEMP91 = regionContainsPoint1 ( rRefLocal , X10_TEMP62 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP63 = RX10_TEMP91 ; 
X10_TEMP63 = ! X10_TEMP63 ; if ( X10_TEMP63 ) 
{ struct Point1 RX10_TEMP92  ; 
Point1_Point1( &RX10_TEMP92/*Assignment*/, X10_TEMP53 ) ; 
struct Dist1 RX10_TEMP93 = X10_TEMP59 .distValue ; 
struct Region1 RX10_TEMP94 = RX10_TEMP93 .dReg ; 
const int RX10_TEMP95 = searchPointInRegion1 ( RX10_TEMP94 , RX10_TEMP92 ) ; 
const int RX10_TEMP96 = 0 ; 
const int RX10_TEMP97 = RX10_TEMP95 < RX10_TEMP96 ; 
if ( RX10_TEMP97 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP98 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP98 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP99 = getPlaceFromDist1 ( RX10_TEMP93 , RX10_TEMP95 ) ; 
const int RX10_TEMP101 = /* here  */ 0 ; 
const int RX10_TEMP102 = RX10_TEMP99 != RX10_TEMP101 ; 
if ( RX10_TEMP102 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP100 = "Bad place access for array X10_TEMP59" ; 
fprintf(stderr, RX10_TEMP100 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1boolean ( X10_TEMP59 , RX10_TEMP95 , X10_TEMP54 ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP103  ; 
Point1_Point1( &RX10_TEMP103/*Assignment*/, X10_TEMP53 ) ; 
struct Dist1 RX10_TEMP104 = X10_TEMP59 .distValue ; 
struct Region1 RX10_TEMP105 = RX10_TEMP104 .dReg ; 
const int RX10_TEMP106 = searchPointInRegion1 ( RX10_TEMP105 , RX10_TEMP103 ) ; 
const int RX10_TEMP107 = 0 ; 
const int RX10_TEMP108 = RX10_TEMP106 < RX10_TEMP107 ; 
if ( RX10_TEMP108 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP110 = getPlaceFromDist1 ( RX10_TEMP104 , RX10_TEMP106 ) ; 
const int RX10_TEMP112 = /* here  */ 0 ; 
const int RX10_TEMP113 = RX10_TEMP110 != RX10_TEMP112 ; 
if ( RX10_TEMP113 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP111 = "Bad place access for array X10_TEMP59" ; 
fprintf(stderr, RX10_TEMP111 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getRefArrayValue1boolean ( X10_TEMP59 , RX10_TEMP106 ) ; 
X10_TEMP55 = RX10_TEMP114 ; } 

const int X10_TEMP64 = X10_TEMP55 ; 
const int X10_TEMP66 = X10_TEMP45 && X10_TEMP64 ; 
const int X10_TEMP68 = ! X10_TEMP66 ; 
if ( X10_TEMP68 ) 
{ const int X10_TEMP70 = 0 ; 
return X10_TEMP70 ; 
} 

} 

} 

const int X10_TEMP72 = 1 ; 
return X10_TEMP72 ; 
} 

Dist1 /*static*/X10Util_get2DDistRank (  struct Dist2 const d , const int n ) 
{ const int X10_TEMP1 = 2 ; 
const int X10_TEMP3 = n > X10_TEMP1 ; 
const int X10_TEMP2 = 0 ; 
const int X10_TEMP4 = n < X10_TEMP2 ; 
const int X10_TEMP6 = X10_TEMP3 || X10_TEMP4 ; 
if ( X10_TEMP6 ) 
{ const char * X10_TEMP8 = "Rank must within bounds" ; 
fprintf(stderr, X10_TEMP8 ) ; 
exit(EXIT_FAILURE);
} 

const int X10_TEMP9 = 0 ; 
const int X10_TEMP10 = 1 ; 
const int X10_TEMP11 = X10_TEMP9 - X10_TEMP10 ; 
struct Region1 X10_TEMP12 = createNewRegion1R ( X10_TEMP9 , X10_TEMP11 ) ; 
const int X10_TEMP13 = /* here  */ 0 ; 
struct Dist1 X10_TEMP15 = getPlaceDist1 ( X10_TEMP12 , X10_TEMP13 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist1 dResult = X10_TEMP15 ; 
struct Dist1 X10_TEMP18 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP18 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP19 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP19 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP19." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP19 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist2 X10_TEMP23 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP12 = X10_TEMP23 .dReg ; 
struct Region2 rLocal = RX10_TEMP12 ; 
struct Region1 rLocalN = X10Util_getRank2D ( rLocal , n ) ; 
struct Region1 RX10_TEMP13 = dResult .dReg ; 
struct Region1 X10_TEMP28 = RX10_TEMP13 ; 
const int X10_TEMP29 = 0 ; 
const int X10_TEMP30 = 1 ; 
const int X10_TEMP31 = X10_TEMP29 - X10_TEMP30 ; 
const int X10_TEMP32 = /* here  */ 0 ; 
/*UpdatableVariableDeclaration*/ struct Region1 X10_TEMP33 = createNewRegion1R ( X10_TEMP29 , X10_TEMP31 ) ; 
const int RX10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP15 = rLocalN .regSize ; 
RX10_TEMP15 = RX10_TEMP15 - RX10_TEMP17 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP16 = RX10_TEMP15 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP16 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP3 ; 
const int RX10_TEMP18 = RX10_TEMP14 ; 
struct Point1 X10_TEMP34 = regionOrdinalPoint1 ( rLocalN , RX10_TEMP18 ) ; 
const int X10_TEMP35 = X10_TEMP34 .f0 ; 
const int RX10_TEMP19 = regionContainsPoint1 ( X10_TEMP28 , X10_TEMP34 ) ; 
/*UpdatableVariableDeclaration*/int X10_TEMP36 = RX10_TEMP19 ; 
X10_TEMP36 = ! X10_TEMP36 ; if ( X10_TEMP36 ) 
{ struct Region1 X10_TEMP37 = createNewRegion1R ( X10_TEMP35 , X10_TEMP35 ) ; 
X10_TEMP33 = unionRegion1 ( X10_TEMP33 , X10_TEMP37 ) ; } 

} 

struct Region1 X10_TEMP38 = X10_TEMP33 ; 
struct Region1 X10_TEMP40 = X10_TEMP38 ; 
struct Dist1 X10_TEMP42 = getPlaceDist1 ( X10_TEMP40 , p ) ; 
struct Dist1 X10_TEMP44 = unionDist1 ( dResult , X10_TEMP42 ) ; 
dResult = X10_TEMP44 ; } 

return dResult ; 
} 

Region2 /*static*/X10Util_transposeRegion (  struct Region2 const r ) 
{ const int X10_TEMP3 = 1 ; 
struct Region1 X10_TEMP5 = X10Util_getRank2D ( r , X10_TEMP3 ) ; 
const int X10_TEMP8 = 0 ; 
struct Region1 X10_TEMP10 = X10Util_getRank2D ( r , X10_TEMP8 ) ; 
struct Region2 X10_TEMP12 = createNewRegion2AA ( X10_TEMP5 , X10_TEMP10 ) ; 
return X10_TEMP12 ; 
} 

Dist2 /*static*/X10Util_transposeDist (  struct Dist2 const d ) 
{ const int X10_TEMP1 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP3 = X10_TEMP1 - X10_TEMP2 ; 
struct Region2 X10_TEMP4 = createNewRegion2RR ( X10_TEMP1 , X10_TEMP3 , X10_TEMP1 , X10_TEMP3 ) ; 
const int X10_TEMP5 = /* here  */ 0 ; 
struct Dist2 X10_TEMP7 = getPlaceDist2 ( X10_TEMP4 , X10_TEMP5 ) ; 
/*UpdatableVariableDeclaration*/ struct Dist2 dResult = X10_TEMP7 ; 
struct Dist1 X10_TEMP10 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP10 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Dist1 X10_TEMP11 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP6 = X10_TEMP11 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP11." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP11 , RX10_TEMP7 ) ; 
const int p = RX10_TEMP11 ; 
struct Dist2 X10_TEMP15 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP12 = X10_TEMP15 .dReg ; 
struct Region2 X10_TEMP16 = RX10_TEMP12 ; 
struct Region2 rLocal = X10_TEMP16 ; 
struct Region2 X10_TEMP19 = X10Util_transposeRegion ( rLocal ) ; 
struct Dist2 X10_TEMP21 = getPlaceDist2 ( X10_TEMP19 , p ) ; 
struct Dist2 X10_TEMP23 = unionDist2 ( dResult , X10_TEMP21 ) ; 
dResult = X10_TEMP23 ; } 

return dResult ; 
} 

Dist2 /*static*/X10Util_transposeBlockStar (  struct Dist2 const d ) 
{ struct Region2 RX10_TEMP0 = d .dReg ; 
struct Region2 rd = RX10_TEMP0 ; 
const int X10_TEMP4 = 0 ; 
struct Region1 r1 = X10Util_getRank2D ( rd , X10_TEMP4 ) ; 
const int X10_TEMP8 = 1 ; 
struct Region1 r2 = X10Util_getRank2D ( rd , X10_TEMP8 ) ; 
struct Dist1 X10_TEMP13 = X10Util_distBlock ( r2 ) ; 
struct Dist2 X10_TEMP15 = X10Util_extendDistRank2D ( X10_TEMP13 , r1 ) ; 
return X10_TEMP15 ; 
} 

int /*static*/X10Util_pullBoolean (  struct booleanRefArray1 const b ,  struct Point1 const pt ) 
{ struct Dist1 RX10_TEMP0 = b .distValue ; 
struct Region1 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region1 X10_TEMP1 = RX10_TEMP1 ; 
const int RX10_TEMP2 = regionContainsPoint1 ( X10_TEMP1 , pt ) ; 
const int X10_TEMP3 = RX10_TEMP2 ; 
const int X10_TEMP5 = ! X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const char * X10_TEMP6 = "pt must be contained in b.region: " ; 
struct Dist1 RX10_TEMP3 = b .distValue ; 
struct Region1 RX10_TEMP4 = RX10_TEMP3 .dReg ; 
struct Region1 X10_TEMP7 = RX10_TEMP4 ; 
const char * RX10_TEMP5 = toStringRegion1 ( X10_TEMP7 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC100 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC100, "%s%s",X10_TEMP6,RX10_TEMP5);
const char * X10_TEMP8 = tempC100;; 
const char * X10_TEMP9 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC101 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC101, "%s%s",X10_TEMP8,X10_TEMP9);
const char * X10_TEMP10 = tempC101;; 
const char * RX10_TEMP6 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC102 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC102, "%s%s",X10_TEMP10,RX10_TEMP6);
const char * X10_TEMP12 = tempC102;; 
X10Util_println ( X10_TEMP12 ) ; 
const char * X10_TEMP13 = "pullBoolean Exception: " ; 
const char * RX10_TEMP7 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC103 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC103, "%s%s",X10_TEMP13,RX10_TEMP7);
const char * X10_TEMP15 = tempC103;; 
fprintf(stderr, X10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int pHere = /* here  */ 0 ; 
const int X10_TEMP19 = 0 ; 
const int X10_TEMP20 = 0 ; 
struct Region1 X10_TEMP21 = createNewRegion1R ( X10_TEMP19 , X10_TEMP20 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
struct Dist1 dDst = getPlaceDist1 ( X10_TEMP21 , X10_TEMP22 ) ; 
struct Region1 RX10_TEMP8 = dDst .dReg ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP11 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP12 = RX10_TEMP11 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP11 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP14 = (booleanStub *)calloc(RX10_TEMP13,sizeof( booleanStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP12 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP3 ; 
const int RX10_TEMP16 = /* here  */ 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 ; 
const int RX10_TEMP18 = /* place.places ( RX10_TEMP17 )  */ 0 
; 
const int RX10_TEMP19 = getDistLocalCount1 ( dDst , RX10_TEMP17 ) ; 
const int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10 ; 
/* async ( RX10_TEMP18 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP21 = RX10_TEMP20 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP22 = (int *)calloc(RX10_TEMP21,sizeof( int )); 
struct booleanStub RX10_TEMP23  ; 
booleanStub_booleanStub( &RX10_TEMP23/*Assignment*/, RX10_TEMP22 ) ; 
/* async ( RX10_TEMP16 )  */ 
{ RX10_TEMP14 [ RX10_TEMP15 ] = RX10_TEMP23 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct booleanStub * const SX10_TEMP6 = (booleanStub *)calloc(RX10_TEMP12,sizeof( booleanStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP12 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP7 ; 
struct booleanStub RX10_TEMP25 = RX10_TEMP14 [ RX10_TEMP26 ] 
; 
SX10_TEMP6 [ RX10_TEMP26 ] = RX10_TEMP25 ; 
} 

/*Updatable ARRAY*/ struct booleanStub * const RX10_TEMP24 = SX10_TEMP6 ; 
struct booleanRefArray1 RX10_TEMP27  ; 
booleanRefArray1_booleanRefArray1( &RX10_TEMP27/*Assignment*/, dDst , RX10_TEMP24 ) ; 
struct booleanRefArray1 result = RX10_TEMP27 ; 
/* finish  */ 
{ struct Dist1 RX10_TEMP28 = b .distValue ; 
struct Dist1 X10_TEMP25 = RX10_TEMP28 ; 
struct Region1 RX10_TEMP29 = X10_TEMP25 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pt ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP25 , RX10_TEMP30 ) ; 
const int X10_TEMP28 = RX10_TEMP34 ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist1 RX10_TEMP35 = b .distValue ; 
struct Region1 RX10_TEMP36 = RX10_TEMP35 .dReg ; 
const int RX10_TEMP37 = searchPointInRegion1 ( RX10_TEMP36 , pt ) ; 
const int RX10_TEMP38 = 0 ; 
const int RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38 ; 
if ( RX10_TEMP39 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP41 = getPlaceFromDist1 ( RX10_TEMP35 , RX10_TEMP37 ) ; 
const int RX10_TEMP43 = /* here  */ 0 ; 
const int RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Bad place access for array b" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP45 = getRefArrayValue1boolean ( b , RX10_TEMP37 ) ; 
const int val = RX10_TEMP45 ; 
/* async ( pHere )  */ 
{ const int X10_TEMP33 = 0 ; 
const int X10_TEMP35 = val ; 
struct Point1 RX10_TEMP46  ; 
Point1_Point1( &RX10_TEMP46/*Assignment*/, X10_TEMP33 ) ; 
struct Dist1 RX10_TEMP47 = result .distValue ; 
struct Region1 RX10_TEMP48 = RX10_TEMP47 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion1 ( RX10_TEMP48 , RX10_TEMP46 ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist1 ( RX10_TEMP47 , RX10_TEMP49 ) ; 
const int RX10_TEMP55 = /* here  */ 0 ; 
const int RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP54 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP54 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1boolean ( result , RX10_TEMP49 , X10_TEMP35 ) ; 
} 

} 

} 

const int X10_TEMP37 = 0 ; 
struct Point1 RX10_TEMP57  ; 
Point1_Point1( &RX10_TEMP57/*Assignment*/, X10_TEMP37 ) ; 
struct Dist1 RX10_TEMP58 = result .distValue ; 
struct Region1 RX10_TEMP59 = RX10_TEMP58 .dReg ; 
const int RX10_TEMP60 = searchPointInRegion1 ( RX10_TEMP59 , RX10_TEMP57 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getPlaceFromDist1 ( RX10_TEMP58 , RX10_TEMP60 ) ; 
const int RX10_TEMP66 = /* here  */ 0 ; 
const int RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP68 = getRefArrayValue1boolean ( result , RX10_TEMP60 ) ; 
const int X10_TEMP39 = RX10_TEMP68 ; 
return X10_TEMP39 ; 
} 

Complex /*static*/X10Util_pullComplex (  struct ComplexRefArray1 const c ,  struct Point1 const pt ) 
{ struct Dist1 RX10_TEMP0 = c .distValue ; 
struct Region1 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region1 X10_TEMP1 = RX10_TEMP1 ; 
const int RX10_TEMP2 = regionContainsPoint1 ( X10_TEMP1 , pt ) ; 
const int X10_TEMP3 = RX10_TEMP2 ; 
const int X10_TEMP5 = ! X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const char * X10_TEMP6 = "pt must be contained in c.region: " ; 
struct Dist1 RX10_TEMP3 = c .distValue ; 
struct Region1 RX10_TEMP4 = RX10_TEMP3 .dReg ; 
struct Region1 X10_TEMP7 = RX10_TEMP4 ; 
const char * RX10_TEMP5 = toStringRegion1 ( X10_TEMP7 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC104 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC104, "%s%s",X10_TEMP6,RX10_TEMP5);
const char * X10_TEMP8 = tempC104;; 
const char * X10_TEMP9 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC105 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC105, "%s%s",X10_TEMP8,X10_TEMP9);
const char * X10_TEMP10 = tempC105;; 
const char * RX10_TEMP6 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC106 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC106, "%s%s",X10_TEMP10,RX10_TEMP6);
const char * X10_TEMP12 = tempC106;; 
X10Util_println ( X10_TEMP12 ) ; 
const char * X10_TEMP13 = "Complex Exception: " ; 
const char * RX10_TEMP7 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC107 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC107, "%s%s",X10_TEMP13,RX10_TEMP7);
const char * X10_TEMP15 = tempC107;; 
fprintf(stderr, X10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int pHere = /* here  */ 0 ; 
const int X10_TEMP19 = 0 ; 
const int X10_TEMP20 = 0 ; 
struct Region1 X10_TEMP21 = createNewRegion1R ( X10_TEMP19 , X10_TEMP20 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
struct Dist1 dDst = getPlaceDist1 ( X10_TEMP21 , X10_TEMP22 ) ; 
struct Region1 RX10_TEMP8 = dDst .dReg ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP11 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP12 = RX10_TEMP11 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP11 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP14 = (ComplexStub *)calloc(RX10_TEMP13,sizeof( ComplexStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP12 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP3 ; 
const int RX10_TEMP16 = /* here  */ 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 ; 
const int RX10_TEMP18 = /* place.places ( RX10_TEMP17 )  */ 0 
; 
const int RX10_TEMP19 = getDistLocalCount1 ( dDst , RX10_TEMP17 ) ; 
const int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10 ; 
/* async ( RX10_TEMP18 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP21 = RX10_TEMP20 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct Complex * const RX10_TEMP22 = (Complex *)calloc(RX10_TEMP21,sizeof( Complex )); 
struct ComplexStub RX10_TEMP23  ; 
ComplexStub_ComplexStub( &RX10_TEMP23/*Assignment*/, RX10_TEMP22 ) ; 
/* async ( RX10_TEMP16 )  */ 
{ RX10_TEMP14 [ RX10_TEMP15 ] = RX10_TEMP23 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct ComplexStub * const SX10_TEMP6 = (ComplexStub *)calloc(RX10_TEMP12,sizeof( ComplexStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP12 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP7 ; 
struct ComplexStub RX10_TEMP25 = RX10_TEMP14 [ RX10_TEMP26 ] 
; 
SX10_TEMP6 [ RX10_TEMP26 ] = RX10_TEMP25 ; 
} 

/*Updatable ARRAY*/ struct ComplexStub * const RX10_TEMP24 = SX10_TEMP6 ; 
struct ComplexRefArray1 RX10_TEMP27  ; 
ComplexRefArray1_ComplexRefArray1( &RX10_TEMP27/*Assignment*/, dDst , RX10_TEMP24 ) ; 
struct ComplexRefArray1 result = RX10_TEMP27 ; 
/* finish  */ 
{ struct Dist1 RX10_TEMP28 = c .distValue ; 
struct Dist1 X10_TEMP25 = RX10_TEMP28 ; 
struct Region1 RX10_TEMP29 = X10_TEMP25 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pt ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP25 , RX10_TEMP30 ) ; 
const int X10_TEMP28 = RX10_TEMP34 ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist1 RX10_TEMP35 = c .distValue ; 
struct Region1 RX10_TEMP36 = RX10_TEMP35 .dReg ; 
const int RX10_TEMP37 = searchPointInRegion1 ( RX10_TEMP36 , pt ) ; 
const int RX10_TEMP38 = 0 ; 
const int RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38 ; 
if ( RX10_TEMP39 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP41 = getPlaceFromDist1 ( RX10_TEMP35 , RX10_TEMP37 ) ; 
const int RX10_TEMP43 = /* here  */ 0 ; 
const int RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Bad place access for array c" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP45 = getRefArrayValue1Complex ( c , RX10_TEMP37 ) ; 
struct Complex val = RX10_TEMP45 ; 
/* async ( pHere )  */ 
{ const int X10_TEMP33 = 0 ; 
struct Complex X10_TEMP35 = val ; 
struct Point1 RX10_TEMP46  ; 
Point1_Point1( &RX10_TEMP46/*Assignment*/, X10_TEMP33 ) ; 
struct Dist1 RX10_TEMP47 = result .distValue ; 
struct Region1 RX10_TEMP48 = RX10_TEMP47 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion1 ( RX10_TEMP48 , RX10_TEMP46 ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist1 ( RX10_TEMP47 , RX10_TEMP49 ) ; 
const int RX10_TEMP55 = /* here  */ 0 ; 
const int RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP54 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP54 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1Complex ( result , RX10_TEMP49 , X10_TEMP35 ) ; 
} 

} 

} 

const int X10_TEMP37 = 0 ; 
struct Point1 RX10_TEMP57  ; 
Point1_Point1( &RX10_TEMP57/*Assignment*/, X10_TEMP37 ) ; 
struct Dist1 RX10_TEMP58 = result .distValue ; 
struct Region1 RX10_TEMP59 = RX10_TEMP58 .dReg ; 
const int RX10_TEMP60 = searchPointInRegion1 ( RX10_TEMP59 , RX10_TEMP57 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getPlaceFromDist1 ( RX10_TEMP58 , RX10_TEMP60 ) ; 
const int RX10_TEMP66 = /* here  */ 0 ; 
const int RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP68 = getRefArrayValue1Complex ( result , RX10_TEMP60 ) ; 
struct Complex X10_TEMP39 = RX10_TEMP68 ; 
return X10_TEMP39 ; 
} 

int /*static*/X10Util_pullInt (  struct intRefArray1 const i ,  struct Point1 const pt ) 
{ struct Dist1 RX10_TEMP0 = i .distValue ; 
struct Region1 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region1 X10_TEMP1 = RX10_TEMP1 ; 
const int RX10_TEMP2 = regionContainsPoint1 ( X10_TEMP1 , pt ) ; 
const int X10_TEMP3 = RX10_TEMP2 ; 
const int X10_TEMP5 = ! X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const char * X10_TEMP6 = "pt must be contained in i.region: " ; 
struct Dist1 RX10_TEMP3 = i .distValue ; 
struct Region1 RX10_TEMP4 = RX10_TEMP3 .dReg ; 
struct Region1 X10_TEMP7 = RX10_TEMP4 ; 
const char * RX10_TEMP5 = toStringRegion1 ( X10_TEMP7 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC108 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC108, "%s%s",X10_TEMP6,RX10_TEMP5);
const char * X10_TEMP8 = tempC108;; 
const char * X10_TEMP9 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC109 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC109, "%s%s",X10_TEMP8,X10_TEMP9);
const char * X10_TEMP10 = tempC109;; 
const char * RX10_TEMP6 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC110 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC110, "%s%s",X10_TEMP10,RX10_TEMP6);
const char * X10_TEMP12 = tempC110;; 
X10Util_println ( X10_TEMP12 ) ; 
const char * X10_TEMP13 = "pullDouble Exception: " ; 
const char * RX10_TEMP7 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC111 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC111, "%s%s",X10_TEMP13,RX10_TEMP7);
const char * X10_TEMP15 = tempC111;; 
fprintf(stderr, X10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int pHere = /* here  */ 0 ; 
const int X10_TEMP19 = 0 ; 
const int X10_TEMP20 = 0 ; 
struct Region1 X10_TEMP21 = createNewRegion1R ( X10_TEMP19 , X10_TEMP20 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
struct Dist1 dDst = getPlaceDist1 ( X10_TEMP21 , X10_TEMP22 ) ; 
struct Region1 RX10_TEMP8 = dDst .dReg ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP11 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP12 = RX10_TEMP11 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP11 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP14 = (intStub *)calloc(RX10_TEMP13,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP12 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP3 ; 
const int RX10_TEMP16 = /* here  */ 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 ; 
const int RX10_TEMP18 = /* place.places ( RX10_TEMP17 )  */ 0 
; 
const int RX10_TEMP19 = getDistLocalCount1 ( dDst , RX10_TEMP17 ) ; 
const int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10 ; 
/* async ( RX10_TEMP18 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP21 = RX10_TEMP20 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const RX10_TEMP22 = (int *)calloc(RX10_TEMP21,sizeof( int )); 
struct intStub RX10_TEMP23  ; 
intStub_intStub( &RX10_TEMP23/*Assignment*/, RX10_TEMP22 ) ; 
/* async ( RX10_TEMP16 )  */ 
{ RX10_TEMP14 [ RX10_TEMP15 ] = RX10_TEMP23 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP6 = (intStub *)calloc(RX10_TEMP12,sizeof( intStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP12 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP7 ; 
struct intStub RX10_TEMP25 = RX10_TEMP14 [ RX10_TEMP26 ] 
; 
SX10_TEMP6 [ RX10_TEMP26 ] = RX10_TEMP25 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP24 = SX10_TEMP6 ; 
struct intRefArray1 RX10_TEMP27  ; 
intRefArray1_intRefArray1( &RX10_TEMP27/*Assignment*/, dDst , RX10_TEMP24 ) ; 
struct intRefArray1 result = RX10_TEMP27 ; 
/* finish  */ 
{ struct Dist1 RX10_TEMP28 = i .distValue ; 
struct Dist1 X10_TEMP25 = RX10_TEMP28 ; 
struct Region1 RX10_TEMP29 = X10_TEMP25 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pt ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP25 , RX10_TEMP30 ) ; 
const int X10_TEMP28 = RX10_TEMP34 ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist1 RX10_TEMP35 = i .distValue ; 
struct Region1 RX10_TEMP36 = RX10_TEMP35 .dReg ; 
const int RX10_TEMP37 = searchPointInRegion1 ( RX10_TEMP36 , pt ) ; 
const int RX10_TEMP38 = 0 ; 
const int RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38 ; 
if ( RX10_TEMP39 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP41 = getPlaceFromDist1 ( RX10_TEMP35 , RX10_TEMP37 ) ; 
const int RX10_TEMP43 = /* here  */ 0 ; 
const int RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Bad place access for array i" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP45 = getRefArrayValue1int ( i , RX10_TEMP37 ) ; 
const int val = RX10_TEMP45 ; 
/* async ( pHere )  */ 
{ const int X10_TEMP33 = 0 ; 
const int X10_TEMP35 = val ; 
struct Point1 RX10_TEMP46  ; 
Point1_Point1( &RX10_TEMP46/*Assignment*/, X10_TEMP33 ) ; 
struct Dist1 RX10_TEMP47 = result .distValue ; 
struct Region1 RX10_TEMP48 = RX10_TEMP47 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion1 ( RX10_TEMP48 , RX10_TEMP46 ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist1 ( RX10_TEMP47 , RX10_TEMP49 ) ; 
const int RX10_TEMP55 = /* here  */ 0 ; 
const int RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP54 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP54 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( result , RX10_TEMP49 , X10_TEMP35 ) ; 
} 

} 

} 

const int X10_TEMP37 = 0 ; 
struct Point1 RX10_TEMP57  ; 
Point1_Point1( &RX10_TEMP57/*Assignment*/, X10_TEMP37 ) ; 
struct Dist1 RX10_TEMP58 = result .distValue ; 
struct Region1 RX10_TEMP59 = RX10_TEMP58 .dReg ; 
const int RX10_TEMP60 = searchPointInRegion1 ( RX10_TEMP59 , RX10_TEMP57 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getPlaceFromDist1 ( RX10_TEMP58 , RX10_TEMP60 ) ; 
const int RX10_TEMP66 = /* here  */ 0 ; 
const int RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP68 = getRefArrayValue1int ( result , RX10_TEMP60 ) ; 
const int X10_TEMP39 = RX10_TEMP68 ; 
return X10_TEMP39 ; 
} 

double /*static*/X10Util_pullDouble (  struct doubleRefArray1 const d ,  struct Point1 const pt ) 
{ struct Dist1 RX10_TEMP0 = d .distValue ; 
struct Region1 RX10_TEMP1 = RX10_TEMP0 .dReg ; 
struct Region1 X10_TEMP1 = RX10_TEMP1 ; 
const int RX10_TEMP2 = regionContainsPoint1 ( X10_TEMP1 , pt ) ; 
const int X10_TEMP3 = RX10_TEMP2 ; 
const int X10_TEMP5 = ! X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const char * X10_TEMP6 = "pt must be contained in d.region: " ; 
struct Dist1 RX10_TEMP3 = d .distValue ; 
struct Region1 RX10_TEMP4 = RX10_TEMP3 .dReg ; 
struct Region1 X10_TEMP7 = RX10_TEMP4 ; 
const char * RX10_TEMP5 = toStringRegion1 ( X10_TEMP7 ) ; 
/*ASSIGNMENT STRING*/
 char * tempC112 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC112, "%s%s",X10_TEMP6,RX10_TEMP5);
const char * X10_TEMP8 = tempC112;; 
const char * X10_TEMP9 = " " ; 
/*ASSIGNMENT STRING*/
 char * tempC113 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC113, "%s%s",X10_TEMP8,X10_TEMP9);
const char * X10_TEMP10 = tempC113;; 
const char * RX10_TEMP6 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC114 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC114, "%s%s",X10_TEMP10,RX10_TEMP6);
const char * X10_TEMP12 = tempC114;; 
X10Util_println ( X10_TEMP12 ) ; 
const char * X10_TEMP13 = "pullDouble Exception: " ; 
const char * RX10_TEMP7 = toStringPoint1 ( pt ) ; 
/*ASSIGNMENT STRING*/
 char * tempC115 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC115, "%s%s",X10_TEMP13,RX10_TEMP7);
const char * X10_TEMP15 = tempC115;; 
fprintf(stderr, X10_TEMP15 ) ; 
exit(EXIT_FAILURE);
} 

const int pHere = /* here  */ 0 ; 
const int X10_TEMP19 = 0 ; 
const int X10_TEMP20 = 0 ; 
struct Region1 X10_TEMP21 = createNewRegion1R ( X10_TEMP19 , X10_TEMP20 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
struct Dist1 dDst = getPlaceDist1 ( X10_TEMP21 , X10_TEMP22 ) ; 
struct Region1 RX10_TEMP8 = dDst .dReg ; 
const int RX10_TEMP9 = 0 ; 
const int RX10_TEMP10 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP11 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP11 = RX10_TEMP11 - RX10_TEMP10 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP12 = RX10_TEMP11 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP11 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP14 = (doubleStub *)calloc(RX10_TEMP13,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP12 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP3 ; 
const int RX10_TEMP16 = /* here  */ 0 ; 
const int RX10_TEMP17 = RX10_TEMP15 ; 
const int RX10_TEMP18 = /* place.places ( RX10_TEMP17 )  */ 0 
; 
const int RX10_TEMP19 = getDistLocalCount1 ( dDst , RX10_TEMP17 ) ; 
const int RX10_TEMP20 = RX10_TEMP19 - RX10_TEMP10 ; 
/* async ( RX10_TEMP18 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP21 = RX10_TEMP20 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP22 = (double *)calloc(RX10_TEMP21,sizeof( double )); 
struct doubleStub RX10_TEMP23  ; 
doubleStub_doubleStub( &RX10_TEMP23/*Assignment*/, RX10_TEMP22 ) ; 
/* async ( RX10_TEMP16 )  */ 
{ RX10_TEMP14 [ RX10_TEMP15 ] = RX10_TEMP23 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP12,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP12 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP26 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP25 = RX10_TEMP14 [ RX10_TEMP26 ] 
; 
SX10_TEMP6 [ RX10_TEMP26 ] = RX10_TEMP25 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP24 = SX10_TEMP6 ; 
struct doubleRefArray1 RX10_TEMP27  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP27/*Assignment*/, dDst , RX10_TEMP24 ) ; 
struct doubleRefArray1 result = RX10_TEMP27 ; 
/* finish  */ 
{ struct Dist1 RX10_TEMP28 = d .distValue ; 
struct Dist1 X10_TEMP25 = RX10_TEMP28 ; 
struct Region1 RX10_TEMP29 = X10_TEMP25 .dReg ; 
const int RX10_TEMP30 = searchPointInRegion1 ( RX10_TEMP29 , pt ) ; 
const int RX10_TEMP31 = 0 ; 
const int RX10_TEMP32 = RX10_TEMP30 < RX10_TEMP31 ; 
if ( RX10_TEMP32 ) 
{ const char * RX10_TEMP33 = "Point pt not found in the distribution X10_TEMP25." ; 
fprintf(stderr, RX10_TEMP33 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP34 = getPlaceFromDist1 ( X10_TEMP25 , RX10_TEMP30 ) ; 
const int X10_TEMP28 = RX10_TEMP34 ; 
/* async ( X10_TEMP28 )  */ 
{ struct Dist1 RX10_TEMP35 = d .distValue ; 
struct Region1 RX10_TEMP36 = RX10_TEMP35 .dReg ; 
const int RX10_TEMP37 = searchPointInRegion1 ( RX10_TEMP36 , pt ) ; 
const int RX10_TEMP38 = 0 ; 
const int RX10_TEMP39 = RX10_TEMP37 < RX10_TEMP38 ; 
if ( RX10_TEMP39 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP41 = getPlaceFromDist1 ( RX10_TEMP35 , RX10_TEMP37 ) ; 
const int RX10_TEMP43 = /* here  */ 0 ; 
const int RX10_TEMP44 = RX10_TEMP41 != RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Bad place access for array d" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP45 = getRefArrayValue1double ( d , RX10_TEMP37 ) ; 
const double val = RX10_TEMP45 ; 
/* async ( pHere )  */ 
{ const int X10_TEMP33 = 0 ; 
const double X10_TEMP35 = val ; 
struct Point1 RX10_TEMP46  ; 
Point1_Point1( &RX10_TEMP46/*Assignment*/, X10_TEMP33 ) ; 
struct Dist1 RX10_TEMP47 = result .distValue ; 
struct Region1 RX10_TEMP48 = RX10_TEMP47 .dReg ; 
const int RX10_TEMP49 = searchPointInRegion1 ( RX10_TEMP48 , RX10_TEMP46 ) ; 
const int RX10_TEMP50 = 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 < RX10_TEMP50 ; 
if ( RX10_TEMP51 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP52 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP52 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP53 = getPlaceFromDist1 ( RX10_TEMP47 , RX10_TEMP49 ) ; 
const int RX10_TEMP55 = /* here  */ 0 ; 
const int RX10_TEMP56 = RX10_TEMP53 != RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP54 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP54 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( result , RX10_TEMP49 , X10_TEMP35 ) ; 
} 

} 

} 

const int X10_TEMP37 = 0 ; 
struct Point1 RX10_TEMP57  ; 
Point1_Point1( &RX10_TEMP57/*Assignment*/, X10_TEMP37 ) ; 
struct Dist1 RX10_TEMP58 = result .distValue ; 
struct Region1 RX10_TEMP59 = RX10_TEMP58 .dReg ; 
const int RX10_TEMP60 = searchPointInRegion1 ( RX10_TEMP59 , RX10_TEMP57 ) ; 
const int RX10_TEMP61 = 0 ; 
const int RX10_TEMP62 = RX10_TEMP60 < RX10_TEMP61 ; 
if ( RX10_TEMP62 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP64 = getPlaceFromDist1 ( RX10_TEMP58 , RX10_TEMP60 ) ; 
const int RX10_TEMP66 = /* here  */ 0 ; 
const int RX10_TEMP67 = RX10_TEMP64 != RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP65 = "Bad place access for array result" ; 
fprintf(stderr, RX10_TEMP65 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP68 = getRefArrayValue1double ( result , RX10_TEMP60 ) ; 
const double X10_TEMP39 = RX10_TEMP68 ; 
return X10_TEMP39 ; 
} 

Region1 /*static*/X10Util_getRank2D (  struct Region2 const r , const int n ) 
{ struct Region1 RX10_TEMP0 = getRank2 ( r , n ) ; 
struct Region1 X10_TEMP2 = RX10_TEMP0 ; 
return X10_TEMP2 ; 
} 

Region1 /*static*/X10Util_getRank3D (  struct Region3 const r , const int n ) 
{ struct Region1 RX10_TEMP0 = getRank3 ( r , n ) ; 
struct Region1 X10_TEMP2 = RX10_TEMP0 ; 
return X10_TEMP2 ; 
} 

Region1 /*static*/X10Util_getLRank2D (  struct Dist2 const d , const int n ) 
{ const int X10_TEMP4 = /* here  */ 0 ; 
struct Region1 X10_TEMP6 = X10Util_getPRank2D ( d , X10_TEMP4 , n ) ; 
return X10_TEMP6 ; 
} 

Region1 /*static*/X10Util_getLRank3D (  struct Dist3 const d , const int n ) 
{ const int X10_TEMP4 = /* here  */ 0 ; 
struct Region1 X10_TEMP6 = X10Util_getPRank3D ( d , X10_TEMP4 , n ) ; 
return X10_TEMP6 ; 
} 

Region1 /*static*/X10Util_getPRank2D (  struct Dist2 const d , const int p , const int n ) 
{ struct Dist2 X10_TEMP2 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP0 = X10_TEMP2 .dReg ; 
struct Region2 X10_TEMP5 = RX10_TEMP0 ; 
struct Region1 X10_TEMP7 = X10Util_getRank2D ( X10_TEMP5 , n ) ; 
return X10_TEMP7 ; 
} 

Region1 /*static*/X10Util_getPRank3D (  struct Dist3 const d , const int p , const int n ) 
{ struct Dist3 X10_TEMP2 = restrictDist3 ( d , p ) ; 
struct Region3 RX10_TEMP0 = X10_TEMP2 .dReg ; 
struct Region3 X10_TEMP5 = RX10_TEMP0 ; 
struct Region1 X10_TEMP7 = X10Util_getRank3D ( X10_TEMP5 , n ) ; 
return X10_TEMP7 ; 
} 

Region1 /*static*/X10Util_get1DLRegion (  struct Dist1 const d ) 
{ const int X10_TEMP1 = /* here  */ 0 ; 
struct Dist1 X10_TEMP3 = restrictDist1 ( d , X10_TEMP1 ) ; 
struct Region1 RX10_TEMP0 = X10_TEMP3 .dReg ; 
struct Region1 X10_TEMP4 = RX10_TEMP0 ; 
return X10_TEMP4 ; 
} 

Region1 /*static*/X10Util_get1DPRegion (  struct Dist1 const d , const int p ) 
{ struct Dist1 X10_TEMP2 = restrictDist1 ( d , p ) ; 
struct Region1 RX10_TEMP0 = X10_TEMP2 .dReg ; 
struct Region1 X10_TEMP3 = RX10_TEMP0 ; 
return X10_TEMP3 ; 
} 

Region2 /*static*/X10Util_get2DLRegion (  struct Dist2 const d ) 
{ const int X10_TEMP1 = /* here  */ 0 ; 
struct Dist2 X10_TEMP3 = restrictDist2 ( d , X10_TEMP1 ) ; 
struct Region2 RX10_TEMP0 = X10_TEMP3 .dReg ; 
struct Region2 X10_TEMP4 = RX10_TEMP0 ; 
return X10_TEMP4 ; 
} 

Region2 /*static*/X10Util_get2DPRegion (  struct Dist2 const d , const int p ) 
{ struct Dist2 X10_TEMP2 = restrictDist2 ( d , p ) ; 
struct Region2 RX10_TEMP0 = X10_TEMP2 .dReg ; 
struct Region2 X10_TEMP3 = RX10_TEMP0 ; 
return X10_TEMP3 ; 
} 

Region3 /*static*/X10Util_get3DLRegion (  struct Dist3 const d ) 
{ const int X10_TEMP1 = /* here  */ 0 ; 
struct Dist3 X10_TEMP3 = restrictDist3 ( d , X10_TEMP1 ) ; 
struct Region3 RX10_TEMP0 = X10_TEMP3 .dReg ; 
struct Region3 X10_TEMP4 = RX10_TEMP0 ; 
return X10_TEMP4 ; 
} 

Region3 /*static*/X10Util_get3DPRegion (  struct Dist3 const d , const int p ) 
{ struct Dist3 X10_TEMP2 = restrictDist3 ( d , p ) ; 
struct Region3 RX10_TEMP0 = X10_TEMP2 .dReg ; 
struct Region3 X10_TEMP3 = RX10_TEMP0 ; 
return X10_TEMP3 ; 
} 

void /*static*/X10Util_print ( const char * s ) 
{ if ( _X10Util_DEBUG ) 
{ printf( "%s",s ) ; 
} 

} 

void /*static*/X10Util_println ( const char * s ) 
{ X10Util_print ( s ) ; 
X10Util_newline ( ) ; 
} 

void /*static*/X10Util_newline ( ) 
{ const char * X10_TEMP2 = "\n" ; 
X10Util_print ( X10_TEMP2 ) ; 
} 

double /*static*/doublerefArraySum1 (  struct doubleRefArray1 const sumArray ) 
{ const int maxPlaces = /* place.MAX_PLACES  */ 1 ; 
const int one = 1 ; 
const int zero = 0 ; 
const int maxPlacesMinusOne = maxPlaces - one ; 
struct Region1 dReg = createNewRegion1R ( zero , maxPlacesMinusOne ) ; 
const int source = /* here  */ 0 ; 
struct Dist1 dSum = getPlaceDist1 ( dReg , source ) ; 
const double initVal = 0 ; 
struct Region1 RX10_TEMP0 = dSum .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dSum , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP14,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = initVal ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP15 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP16  ; 
doubleStub_doubleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct doubleRefArray1 RX10_TEMP20  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP20/*Assignment*/, dSum , RX10_TEMP17 ) ; 
struct doubleRefArray1 localSumArray = RX10_TEMP20 ; 
struct Dist1 dUnique = /*program*/UniqueDistribution ; 
/* finish  */ 
{ struct Region1 RX10_TEMP22 = dUnique .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP24 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP10 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
struct Region1 RX10_TEMP27 = dUnique .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , p ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point p not found in the distribution dUnique." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( dUnique , RX10_TEMP28 ) ; 
const int nthPlace = RX10_TEMP32 ; 
/* async ( nthPlace )  */ 
{ /*UpdatableVariableDeclaration*/double localSumTemp = 0 ; 
const int thisPlace = /* here  */ 0 ; 
struct Dist1 RX10_TEMP33 = sumArray .distValue ; 
struct Dist1 sumArrayDist = RX10_TEMP33 ; 
struct Dist1 sumArrayDistHere = restrictDist1 ( sumArrayDist , thisPlace ) ; 
struct Region1 RX10_TEMP35 = sumArrayDistHere .dReg ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = RX10_TEMP35 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP37 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP12 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP35 , RX10_TEMP39 ) ; 
struct Dist1 RX10_TEMP40 = sumArray .distValue ; 
struct Region1 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion1 ( RX10_TEMP41 , pt ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist1 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array sumArray" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP50 = getRefArrayValue1double ( sumArray , RX10_TEMP42 ) ; 
const double localSumCurr = RX10_TEMP50 ; 
localSumTemp = localSumTemp + localSumCurr ; } 

const int isNotEqual = localSumTemp != zero ; 
if ( isNotEqual ) 
{ const int index = /* thisPlace . id  */ 0 ; 
const double localSum = localSumTemp ; 
/* async ( source )  */ 
{ struct Point1 RX10_TEMP51  ; 
Point1_Point1( &RX10_TEMP51/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP52 = localSumArray .distValue ; 
struct Region1 RX10_TEMP53 = RX10_TEMP52 .dReg ; 
const int RX10_TEMP54 = searchPointInRegion1 ( RX10_TEMP53 , RX10_TEMP51 ) ; 
const int RX10_TEMP55 = 0 ; 
const int RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP58 = getPlaceFromDist1 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
const int RX10_TEMP60 = /* here  */ 0 ; 
const int RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Bad place access for array localSumArray" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( localSumArray , RX10_TEMP54 , localSum ) ; 
} 

} 

} 

} 

} 

/*UpdatableVariableDeclaration*/double globalSum = 0 ; 
struct Dist1 RX10_TEMP63 = localSumArray .distValue ; 
struct Region1 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP65 = RX10_TEMP64 .regSize ; 
RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP66 = RX10_TEMP65 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP66 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP14 ; 
const int RX10_TEMP68 = RX10_TEMP62 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP64 , RX10_TEMP68 ) ; 
struct Dist1 RX10_TEMP69 = localSumArray .distValue ; 
struct Region1 RX10_TEMP70 = RX10_TEMP69 .dReg ; 
const int RX10_TEMP71 = searchPointInRegion1 ( RX10_TEMP70 , p ) ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP75 = getPlaceFromDist1 ( RX10_TEMP69 , RX10_TEMP71 ) ; 
const int RX10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Bad place access for array localSumArray" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP79 = getRefArrayValue1double ( localSumArray , RX10_TEMP71 ) ; 
const double localSumCurr = RX10_TEMP79 ; 
globalSum = globalSum + localSumCurr ; } 

return globalSum ; 
} 

int /*static*/intrefArrayMax1 (  struct intRefArray1 const maxArray ) 
{ const int maxPlaces = /* place.MAX_PLACES  */ 1 ; 
const int one = 1 ; 
const int zero = 0 ; 
const int maxPlacesMinusOne = maxPlaces - one ; 
struct Region1 dReg = createNewRegion1R ( zero , maxPlacesMinusOne ) ; 
const int source = /* here  */ 0 ; 
struct Dist1 dMax = getPlaceDist1 ( dReg , source ) ; 
const int zeroVal = 0 ; 
const int maxVal = 2147483647 ; 
const int initVal = zeroVal - maxVal ; 
struct Region1 RX10_TEMP0 = dMax .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP6 = (intStub *)calloc(RX10_TEMP5,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dMax , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(RX10_TEMP14,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = initVal ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP15 = SX10_TEMP5 ; 
struct intStub RX10_TEMP16  ; 
intStub_intStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP7 = (intStub *)calloc(RX10_TEMP4,sizeof( intStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct intStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct intRefArray1 RX10_TEMP20  ; 
intRefArray1_intRefArray1( &RX10_TEMP20/*Assignment*/, dMax , RX10_TEMP17 ) ; 
struct intRefArray1 localMaxArray = RX10_TEMP20 ; 
struct Dist1 dUnique = /*program*/UniqueDistribution ; 
/* finish  */ 
{ struct Region1 RX10_TEMP22 = dUnique .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP24 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP10 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
struct Region1 RX10_TEMP27 = dUnique .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , p ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point p not found in the distribution dUnique." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( dUnique , RX10_TEMP28 ) ; 
const int nthPlace = RX10_TEMP32 ; 
/* async ( nthPlace )  */ 
{ /*UpdatableVariableDeclaration*/int localMaxTemp = initVal ; 
const int thisPlace = /* here  */ 0 ; 
struct Dist1 RX10_TEMP33 = maxArray .distValue ; 
struct Dist1 maxArrayDist = RX10_TEMP33 ; 
struct Dist1 maxArrayDistHere = restrictDist1 ( maxArrayDist , thisPlace ) ; 
struct Region1 RX10_TEMP35 = maxArrayDistHere .dReg ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = RX10_TEMP35 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP37 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP12 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP35 , RX10_TEMP39 ) ; 
struct Dist1 RX10_TEMP40 = maxArray .distValue ; 
struct Region1 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion1 ( RX10_TEMP41 , pt ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist1 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array maxArray" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP50 = getRefArrayValue1int ( maxArray , RX10_TEMP42 ) ; 
const int localMaxCurr = RX10_TEMP50 ; 
const int isGreater = localMaxCurr > localMaxTemp ; 
if ( isGreater ) 
{ localMaxTemp = localMaxCurr ; } 

} 

const int index = /* thisPlace . id  */ 0 ; 
const int localMax = localMaxTemp ; 
/* async ( source )  */ 
{ struct Point1 RX10_TEMP51  ; 
Point1_Point1( &RX10_TEMP51/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP52 = localMaxArray .distValue ; 
struct Region1 RX10_TEMP53 = RX10_TEMP52 .dReg ; 
const int RX10_TEMP54 = searchPointInRegion1 ( RX10_TEMP53 , RX10_TEMP51 ) ; 
const int RX10_TEMP55 = 0 ; 
const int RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP58 = getPlaceFromDist1 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
const int RX10_TEMP60 = /* here  */ 0 ; 
const int RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Bad place access for array localMaxArray" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( localMaxArray , RX10_TEMP54 , localMax ) ; 
} 

} 

} 

} 

struct Point1 RX10_TEMP62  ; 
Point1_Point1( &RX10_TEMP62/*Assignment*/, zero ) ; 
struct Dist1 RX10_TEMP63 = localMaxArray .distValue ; 
struct Region1 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP65 = searchPointInRegion1 ( RX10_TEMP64 , RX10_TEMP62 ) ; 
const int RX10_TEMP66 = 0 ; 
const int RX10_TEMP67 = RX10_TEMP65 < RX10_TEMP66 ; 
if ( RX10_TEMP67 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP68 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP68 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP69 = getPlaceFromDist1 ( RX10_TEMP63 , RX10_TEMP65 ) ; 
const int RX10_TEMP71 = /* here  */ 0 ; 
const int RX10_TEMP72 = RX10_TEMP69 != RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP70 = "Bad place access for array localMaxArray" ; 
fprintf(stderr, RX10_TEMP70 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP73 = getRefArrayValue1int ( localMaxArray , RX10_TEMP65 ) ; 
/*UpdatableVariableDeclaration*/int globalMax = RX10_TEMP73 ; 
struct Dist1 RX10_TEMP75 = localMaxArray .distValue ; 
struct Region1 RX10_TEMP76 = RX10_TEMP75 .dReg ; 
const int RX10_TEMP79 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP77 = RX10_TEMP76 .regSize ; 
RX10_TEMP77 = RX10_TEMP77 - RX10_TEMP79 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP78 = RX10_TEMP77 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP78 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP74 = SX10_TEMP14 ; 
const int RX10_TEMP80 = RX10_TEMP74 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP76 , RX10_TEMP80 ) ; 
struct Dist1 RX10_TEMP81 = localMaxArray .distValue ; 
struct Region1 RX10_TEMP82 = RX10_TEMP81 .dReg ; 
const int RX10_TEMP83 = searchPointInRegion1 ( RX10_TEMP82 , p ) ; 
const int RX10_TEMP84 = 0 ; 
const int RX10_TEMP85 = RX10_TEMP83 < RX10_TEMP84 ; 
if ( RX10_TEMP85 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP86 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP86 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP87 = getPlaceFromDist1 ( RX10_TEMP81 , RX10_TEMP83 ) ; 
const int RX10_TEMP89 = /* here  */ 0 ; 
const int RX10_TEMP90 = RX10_TEMP87 != RX10_TEMP89 ; 
if ( RX10_TEMP90 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP88 = "Bad place access for array localMaxArray" ; 
fprintf(stderr, RX10_TEMP88 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP91 = getRefArrayValue1int ( localMaxArray , RX10_TEMP83 ) ; 
const int localMaxCurr = RX10_TEMP91 ; 
const int isGreater = localMaxCurr > globalMax ; 
if ( isGreater ) 
{ globalMax = localMaxCurr ; } 

} 

return globalMax ; 
} 

int /*static*/intrefArraySum1 (  struct intRefArray1 const sumArray ) 
{ const int maxPlaces = /* place.MAX_PLACES  */ 1 ; 
const int one = 1 ; 
const int zero = 0 ; 
const int maxPlacesMinusOne = maxPlaces - one ; 
struct Region1 dReg = createNewRegion1R ( zero , maxPlacesMinusOne ) ; 
const int source = /* here  */ 0 ; 
struct Dist1 dSum = getPlaceDist1 ( dReg , source ) ; 
const int initVal = 0 ; 
struct Region1 RX10_TEMP0 = dSum .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct intStub * const RX10_TEMP6 = (intStub *)calloc(RX10_TEMP5,sizeof( intStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( dSum , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(RX10_TEMP14,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = initVal ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP15 = SX10_TEMP5 ; 
struct intStub RX10_TEMP16  ; 
intStub_intStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct intStub * const SX10_TEMP7 = (intStub *)calloc(RX10_TEMP4,sizeof( intStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct intStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct intStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct intRefArray1 RX10_TEMP20  ; 
intRefArray1_intRefArray1( &RX10_TEMP20/*Assignment*/, dSum , RX10_TEMP17 ) ; 
struct intRefArray1 localSumArray = RX10_TEMP20 ; 
struct Dist1 dUnique = /*program*/UniqueDistribution ; 
/* finish  */ 
{ struct Region1 RX10_TEMP22 = dUnique .dReg ; 
const int RX10_TEMP25 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP23 = RX10_TEMP22 .regSize ; 
RX10_TEMP23 = RX10_TEMP23 - RX10_TEMP25 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP24 = RX10_TEMP23 + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP24 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP21 = SX10_TEMP10 ; 
const int RX10_TEMP26 = RX10_TEMP21 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP22 , RX10_TEMP26 ) ; 
struct Region1 RX10_TEMP27 = dUnique .dReg ; 
const int RX10_TEMP28 = searchPointInRegion1 ( RX10_TEMP27 , p ) ; 
const int RX10_TEMP29 = 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 < RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ const char * RX10_TEMP31 = "Point p not found in the distribution dUnique." ; 
fprintf(stderr, RX10_TEMP31 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP32 = getPlaceFromDist1 ( dUnique , RX10_TEMP28 ) ; 
const int nthPlace = RX10_TEMP32 ; 
/* async ( nthPlace )  */ 
{ /*UpdatableVariableDeclaration*/int localSumTemp = 0 ; 
const int thisPlace = /* here  */ 0 ; 
struct Dist1 RX10_TEMP33 = sumArray .distValue ; 
struct Dist1 sumArrayDist = RX10_TEMP33 ; 
struct Dist1 sumArrayDistHere = restrictDist1 ( sumArrayDist , thisPlace ) ; 
struct Region1 RX10_TEMP35 = sumArrayDistHere .dReg ; 
const int RX10_TEMP38 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP36 = RX10_TEMP35 .regSize ; 
RX10_TEMP36 = RX10_TEMP36 - RX10_TEMP38 ; const int SX10_TEMP11 = 1 ; 
const int RX10_TEMP37 = RX10_TEMP36 + SX10_TEMP11 ; 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP37 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP12 ; 
const int RX10_TEMP39 = RX10_TEMP34 ; 
struct Point1 pt = regionOrdinalPoint1 ( RX10_TEMP35 , RX10_TEMP39 ) ; 
struct Dist1 RX10_TEMP40 = sumArray .distValue ; 
struct Region1 RX10_TEMP41 = RX10_TEMP40 .dReg ; 
const int RX10_TEMP42 = searchPointInRegion1 ( RX10_TEMP41 , pt ) ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = RX10_TEMP42 < RX10_TEMP43 ; 
if ( RX10_TEMP44 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP45 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP45 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP46 = getPlaceFromDist1 ( RX10_TEMP40 , RX10_TEMP42 ) ; 
const int RX10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP49 = RX10_TEMP46 != RX10_TEMP48 ; 
if ( RX10_TEMP49 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP47 = "Bad place access for array sumArray" ; 
fprintf(stderr, RX10_TEMP47 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP50 = getRefArrayValue1int ( sumArray , RX10_TEMP42 ) ; 
const int localSumCurr = RX10_TEMP50 ; 
localSumTemp = localSumTemp + localSumCurr ; } 

const int isNotEqual = localSumTemp != zero ; 
if ( isNotEqual ) 
{ const int index = /* thisPlace . id  */ 0 ; 
const int localSum = localSumTemp ; 
/* async ( source )  */ 
{ struct Point1 RX10_TEMP51  ; 
Point1_Point1( &RX10_TEMP51/*Assignment*/, index ) ; 
struct Dist1 RX10_TEMP52 = localSumArray .distValue ; 
struct Region1 RX10_TEMP53 = RX10_TEMP52 .dReg ; 
const int RX10_TEMP54 = searchPointInRegion1 ( RX10_TEMP53 , RX10_TEMP51 ) ; 
const int RX10_TEMP55 = 0 ; 
const int RX10_TEMP56 = RX10_TEMP54 < RX10_TEMP55 ; 
if ( RX10_TEMP56 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP58 = getPlaceFromDist1 ( RX10_TEMP52 , RX10_TEMP54 ) ; 
const int RX10_TEMP60 = /* here  */ 0 ; 
const int RX10_TEMP61 = RX10_TEMP58 != RX10_TEMP60 ; 
if ( RX10_TEMP61 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP59 = "Bad place access for array localSumArray" ; 
fprintf(stderr, RX10_TEMP59 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1int ( localSumArray , RX10_TEMP54 , localSum ) ; 
} 

} 

} 

} 

} 

/*UpdatableVariableDeclaration*/int globalSum = 0 ; 
struct Dist1 RX10_TEMP63 = localSumArray .distValue ; 
struct Region1 RX10_TEMP64 = RX10_TEMP63 .dReg ; 
const int RX10_TEMP67 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP65 = RX10_TEMP64 .regSize ; 
RX10_TEMP65 = RX10_TEMP65 - RX10_TEMP67 ; const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP66 = RX10_TEMP65 + SX10_TEMP13 ; 
for ( int SX10_TEMP14 = 0 ; SX10_TEMP14 < RX10_TEMP66 ; SX10_TEMP14 ++ ) 
{ const int RX10_TEMP62 = SX10_TEMP14 ; 
const int RX10_TEMP68 = RX10_TEMP62 ; 
struct Point1 p = regionOrdinalPoint1 ( RX10_TEMP64 , RX10_TEMP68 ) ; 
struct Dist1 RX10_TEMP69 = localSumArray .distValue ; 
struct Region1 RX10_TEMP70 = RX10_TEMP69 .dReg ; 
const int RX10_TEMP71 = searchPointInRegion1 ( RX10_TEMP70 , p ) ; 
const int RX10_TEMP72 = 0 ; 
const int RX10_TEMP73 = RX10_TEMP71 < RX10_TEMP72 ; 
if ( RX10_TEMP73 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP74 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP74 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP75 = getPlaceFromDist1 ( RX10_TEMP69 , RX10_TEMP71 ) ; 
const int RX10_TEMP77 = /* here  */ 0 ; 
const int RX10_TEMP78 = RX10_TEMP75 != RX10_TEMP77 ; 
if ( RX10_TEMP78 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP76 = "Bad place access for array localSumArray" ; 
fprintf(stderr, RX10_TEMP76 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP79 = getRefArrayValue1int ( localSumArray , RX10_TEMP71 ) ; 
const int localSumCurr = RX10_TEMP79 ; 
globalSum = globalSum + localSumCurr ; } 

return globalSum ; 
} 

int /*static*/constantSearchRegion1 (  struct Region1 const r ,  struct Point1 const target ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int dim0 = r .dim0 ; 
const int low0 = r .low0 ; 
const int high0 = low0 + dim0 ; 
/*UpdatableVariableDeclaration*/int pt0 = target .f0 ; 
const int lbound0 = pt0 < low0 ; 
const int hbound0 = pt0 >= high0 ; 
const int dim1 = 1 ; 
/*UpdatableVariableDeclaration*/int outRegion = 0 ; 
outRegion = outRegion || lbound0 ; outRegion = outRegion || hbound0 ; if ( outRegion ) 
{ /*UpdatableVariableDeclaration*/int notFound = 0 ; 
notFound = notFound - one ; return notFound ; 
} 

const int stride1 = 1 ; 
const int stride0 = stride1 * dim1 ; 
pt0 = pt0 - low0 ; const int offset0 = stride0 * pt0 ; 
/*UpdatableVariableDeclaration*/int found = 0 ; 
found = found + offset0 ; return found ; 
} 

int /*static*/constantSearchRegion3 (  struct Region3 const r ,  struct Point3 const target ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int dim0 = r .dim0 ; 
const int low0 = r .low0 ; 
const int high0 = low0 + dim0 ; 
/*UpdatableVariableDeclaration*/int pt0 = target .f0 ; 
const int lbound0 = pt0 < low0 ; 
const int hbound0 = pt0 >= high0 ; 
const int dim1 = r .dim1 ; 
const int low1 = r .low1 ; 
const int high1 = low1 + dim1 ; 
/*UpdatableVariableDeclaration*/int pt1 = target .f1 ; 
const int lbound1 = pt1 < low1 ; 
const int hbound1 = pt1 >= high1 ; 
const int dim2 = r .dim2 ; 
const int low2 = r .low2 ; 
const int high2 = low2 + dim2 ; 
/*UpdatableVariableDeclaration*/int pt2 = target .f2 ; 
const int lbound2 = pt2 < low2 ; 
const int hbound2 = pt2 >= high2 ; 
const int dim3 = 1 ; 
/*UpdatableVariableDeclaration*/int outRegion = 0 ; 
outRegion = outRegion || lbound0 ; outRegion = outRegion || hbound0 ; outRegion = outRegion || lbound1 ; outRegion = outRegion || hbound1 ; outRegion = outRegion || lbound2 ; outRegion = outRegion || hbound2 ; if ( outRegion ) 
{ /*UpdatableVariableDeclaration*/int notFound = 0 ; 
notFound = notFound - one ; return notFound ; 
} 

const int stride3 = 1 ; 
const int stride2 = stride3 * dim3 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
pt0 = pt0 - low0 ; const int offset0 = stride0 * pt0 ; 
pt1 = pt1 - low1 ; const int offset1 = stride1 * pt1 ; 
pt2 = pt2 - low2 ; const int offset2 = stride2 * pt2 ; 
/*UpdatableVariableDeclaration*/int found = 0 ; 
found = found + offset0 ; found = found + offset1 ; found = found + offset2 ; return found ; 
} 

int /*static*/constantSearchRegion2 (  struct Region2 const r ,  struct Point2 const target ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int dim0 = r .dim0 ; 
const int low0 = r .low0 ; 
const int high0 = low0 + dim0 ; 
/*UpdatableVariableDeclaration*/int pt0 = target .f0 ; 
const int lbound0 = pt0 < low0 ; 
const int hbound0 = pt0 >= high0 ; 
const int dim1 = r .dim1 ; 
const int low1 = r .low1 ; 
const int high1 = low1 + dim1 ; 
/*UpdatableVariableDeclaration*/int pt1 = target .f1 ; 
const int lbound1 = pt1 < low1 ; 
const int hbound1 = pt1 >= high1 ; 
const int dim2 = 1 ; 
/*UpdatableVariableDeclaration*/int outRegion = 0 ; 
outRegion = outRegion || lbound0 ; outRegion = outRegion || hbound0 ; outRegion = outRegion || lbound1 ; outRegion = outRegion || hbound1 ; if ( outRegion ) 
{ /*UpdatableVariableDeclaration*/int notFound = 0 ; 
notFound = notFound - one ; return notFound ; 
} 

const int stride2 = 1 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
pt0 = pt0 - low0 ; const int offset0 = stride0 * pt0 ; 
pt1 = pt1 - low1 ; const int offset1 = stride1 * pt1 ; 
/*UpdatableVariableDeclaration*/int found = 0 ; 
found = found + offset0 ; found = found + offset1 ; return found ; 
} 

char * /*static*/toStringPoint1 (  struct Point1 const p ) 
{ /*UpdatableVariableDeclaration*/char * str = "" ; 
const int f0 = p .f0 ; 
/*UpdatableVariableDeclaration*/char * lSq = "[" ; 
/*UpdatableVariableDeclaration*/char * rSq = "]" ; 
/*ASSIGNMENT STRING*/
 char * tempC116 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC116, "%s%s",str,lSq);
str = tempC116;/*ASSIGNMENT STRING*/
 char * tempC117 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC117, "%s%d",str,f0);
str = tempC117;/*ASSIGNMENT STRING*/
 char * tempC118 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC118, "%s%s",str,rSq);
str = tempC118;return str ; 
} 

char * /*static*/toStringPoint2 (  struct Point2 const p ) 
{ /*UpdatableVariableDeclaration*/char * str = "" ; 
const int f0 = p .f0 ; 
const int f1 = p .f1 ; 
/*UpdatableVariableDeclaration*/char * lSq = "[" ; 
/*UpdatableVariableDeclaration*/char * comma = "," ; 
/*UpdatableVariableDeclaration*/char * rSq = "]" ; 
/*ASSIGNMENT STRING*/
 char * tempC119 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC119, "%s%s",str,lSq);
str = tempC119;/*ASSIGNMENT STRING*/
 char * tempC120 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC120, "%s%d",str,f0);
str = tempC120;/*ASSIGNMENT STRING*/
 char * tempC121 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC121, "%s%s",str,comma);
str = tempC121;/*ASSIGNMENT STRING*/
 char * tempC122 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC122, "%s%d",str,f1);
str = tempC122;/*ASSIGNMENT STRING*/
 char * tempC123 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC123, "%s%s",str,rSq);
str = tempC123;return str ; 
} 

void /*static*/setRefArrayValue2Complex (  struct ComplexRefArray2 const array , const int index ,  struct Complex const val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ComplexStub * const contents = array .contents ; 
struct ComplexStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Complex * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

void /*static*/setRefArrayValue1double (  struct doubleRefArray1 const array , const int index , const double val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/getPlaceFromDist3 (  struct Dist3 const dn , const int index ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const placeArray = d .placeArray ; 
const int retPlace = placeArray [ index ] 
; 
return retPlace ; 
} 

void /*static*/setRefArrayValue1Region1 (  struct Region1RefArray1 const array , const int index ,  struct Region1 const val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct Region1Stub * const contents = array .contents ; 
struct Region1Stub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Region1 * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/getPlaceFromDist1 (  struct Dist1 const dn , const int index ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const placeArray = d .placeArray ; 
const int retPlace = placeArray [ index ] 
; 
return retPlace ; 
} 

int /*static*/getPlaceFromDist2 (  struct Dist2 const dn , const int index ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const placeArray = d .placeArray ; 
const int retPlace = placeArray [ index ] 
; 
return retPlace ; 
} 

Particle /*static*/getRefArrayValue1Particle (  struct ParticleRefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ParticleStub * const contents = array .contents ; 
struct ParticleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Particle * const localArray = indexStub .localArray ; 
struct Particle returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

void /*static*/setRefArrayValue1Complex (  struct ComplexRefArray1 const array , const int index ,  struct Complex const val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ComplexStub * const contents = array .contents ; 
struct ComplexStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Complex * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

Region1 /*static*/getRank2 (  struct Region2 const r , const int dim ) 
{ const int zero = 0 ; 
const int regRank = 2 ; 
const int cond1 = dim >= regRank ; 
const int cond2 = dim < zero ; 
const int invalidRank = cond1 || cond2 ; 
if ( invalidRank ) 
{ const char * errorMsgHeader = "Invalid dimension for rank projection. Got " ; 
const char * errorMsgTrailer = ", expected value between 0 and 2" ; 
/*UpdatableVariableDeclaration*//*ASSIGNMENT STRING*/
 char * tempC124 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC124, "%s%d",errorMsgHeader,dim);
char * errorMsg = tempC124;
/*ASSIGNMENT STRING*/
 char * tempC125 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC125, "%s%s",errorMsg,errorMsgTrailer);
errorMsg = tempC125;fprintf(stderr, errorMsg ) ; 
exit(EXIT_FAILURE);
} 

const int regType = r .regType ; 
if ( regType ) 
{ struct Region1 regularRank = getRankRegular2 ( r , dim ) ; 
return regularRank ; 
} 

struct Region1 arbitraryRank = getRankArbitrary2 ( r , dim ) ; 
return arbitraryRank ; 
} 

Region1 /*static*/getRankArbitrary2 (  struct Region2 const r , const int dim ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
const int minusOne = zero - one ; 
const int proj0 = 0 ; 
const int proj1 = 1 ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * regArr = r .pointArray ; 
const int regSize = r .regSize ; 
const int regSizeMinusOne = regSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArrRegion = regSizeMinusOne + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int distArrRegion = regSizeMinusOne + SX10_TEMP1 ; 
/*UpdatableVariableDeclaration*/int maxIndex = minusOne ; 
/*UpdatableVariableDeclaration*/int minIndex = zero ; 
/*UpdatableVariableDeclaration*/int isFirstMinIndex = 1 ; 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArrRegion ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
const int idx = p ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs8;
else if(proj1== dim)
goto cs9;
goto cs10;

cs8:
{ struct Point2 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f0 ; 
const int isMax = crd >= maxIndex ; 
if ( isMax ) 
{ maxIndex = crd ; } 

const int lt = crd <= minIndex ; 
const int isMin = lt || isFirstMinIndex ; 
if ( isMin ) 
{ isFirstMinIndex = 0 ; minIndex = crd ; } 

break ; 
goto cs9;
} 


cs9:
{ struct Point2 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f1 ; 
const int isMax = crd >= maxIndex ; 
if ( isMax ) 
{ maxIndex = crd ; } 

const int lt = crd <= minIndex ; 
const int isMin = lt || isFirstMinIndex ; 
if ( isMin ) 
{ isFirstMinIndex = 0 ; minIndex = crd ; } 

break ; 
} 

cs10: {break;}} /*END OF SWITCH*/
} 

const int regIndexSizeMinusOne = maxIndex - minIndex ; 
const int regIndexSize = regIndexSizeMinusOne + one ; 
const int SX10_TEMP3 = 1 ; 
const int regIndexRegion = regIndexSizeMinusOne + SX10_TEMP3 ; 
const int SX10_TEMP4 = 1 ; 
const int regIndexDist = regIndexSizeMinusOne + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(regIndexDist,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < regIndexDist ; SX10_TEMP6 ++ ) 
{ const int p = SX10_TEMP6 ; 
SX10_TEMP5 [ p ] = zero ; 
} 

/*Updatable ARRAY*/ int * const indexArr = SX10_TEMP5 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < regArrRegion ; SX10_TEMP7 ++ ) 
{ const int p = SX10_TEMP7 ; 
const int idx = p ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs11;
else if(proj1== dim)
goto cs12;
goto cs13;

cs11:
{ struct Point2 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f0 ; 
const int newRegIndex = crd - minIndex ; 
indexArr [ newRegIndex ] = one ; 
break ; 
goto cs12;
} 


cs12:
{ struct Point2 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f1 ; 
const int newRegIndex = crd - minIndex ; 
indexArr [ newRegIndex ] = one ; 
break ; 
} 

cs13: {break;}} /*END OF SWITCH*/
} 

/*UpdatableVariableDeclaration*/int newRegSize = 0 ; 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regIndexRegion ; SX10_TEMP8 ++ ) 
{ const int p = SX10_TEMP8 ; 
const int hit = indexArr [ p ] 
; 
newRegSize = newRegSize + hit ; } 

const int isRegular = newRegSize == regIndexSize ; 
if ( isRegular ) 
{ const int SX10_TEMP9 = 1 ; 
const int regRegularRegion = minusOne + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP10 = (Point1 *)calloc(regRegularRegion,sizeof( Point1 )); 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < regRegularRegion ; SX10_TEMP11 ++ ) 
{ const int p = SX10_TEMP11 ; 
struct Point1 pt  ; 
Point1_Point1( &pt/*Assignment*/, zero ) ; 
SX10_TEMP10 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const ptArray = SX10_TEMP10 ; 
struct Region1 retRegRegular  ; 
Region1_Region1_4( &retRegRegular/*Assignment*/, ptArray , regIndexSize , minIndex , regIndexSize ) ; 
return retRegRegular ; 
} 

const int newRegSizeMinusOne = newRegSize - one ; 
const int SX10_TEMP12 = 1 ; 
const int newRegRegion = newRegSizeMinusOne + SX10_TEMP12 ; 
const int SX10_TEMP13 = 1 ; 
const int newRegDist = newRegSizeMinusOne + SX10_TEMP13 ; 
/*Updatable ARRAY*/ struct Point1 * const indexPointArr = (Point1 *)calloc(newRegDist,sizeof( Point1 )); 
/*UpdatableVariableDeclaration*/int newArrIndex = 0 ; 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < regIndexRegion ; SX10_TEMP15 ++ ) 
{ const int p = SX10_TEMP15 ; 
const int indx = indexArr [ p ] 
; 
const int isOne = indx == one ; 
if ( isOne ) 
{ const int idx = p ; 
const int pointValue = idx + minIndex ; 
struct Point1 tempPoint  ; 
Point1_Point1( &tempPoint/*Assignment*/, pointValue ) ; 
indexPointArr [ newArrIndex ] = tempPoint ; 
newArrIndex = newArrIndex + one ; } 

} 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP16 = (Point1 *)calloc(newRegRegion,sizeof( Point1 )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < newRegRegion ; SX10_TEMP17 ++ ) 
{ const int p = SX10_TEMP17 ; 
struct Point1 pt = indexPointArr [ p ] 
; 
SX10_TEMP16 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const indexPointValueArr = SX10_TEMP16 ; 
struct Region1 retRegArbitrary  ; 
Region1_Region1_2( &retRegArbitrary/*Assignment*/, indexPointValueArr , regIndexSize ) ; 
return retRegArbitrary ; 
} 

Region1 /*static*/getRankRegular2 (  struct Region2 const r , const int dim ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int pointRegion = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP1 = (Point1 *)calloc(pointRegion,sizeof( Point1 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < pointRegion ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point1 pt1  ; 
Point1_Point1( &pt1/*Assignment*/, zero ) ; 
SX10_TEMP1 [ p ] = pt1 ; 
} 

/*Updatable ARRAY*/ struct Point1 * const pointArray = SX10_TEMP1 ; 
const int proj0 = 0 ; 
const int proj1 = 1 ; 
/*UpdatableVariableDeclaration*/int low0 = 0 ; 
/*UpdatableVariableDeclaration*/int dim0 = 0 ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs14;
else if(proj1== dim)
goto cs15;
goto cs16;

cs14:
{ low0 = r .low0 ; dim0 = r .dim0 ; break ; 
goto cs15;
} 


cs15:
{ low0 = r .low1 ; dim0 = r .dim1 ; break ; 
} 

cs16: {break;}} /*END OF SWITCH*/
struct Region1 retRegRegular  ; 
Region1_Region1_4( &retRegRegular/*Assignment*/, pointArray , dim0 , low0 , dim0 ) ; 
return retRegRegular ; 
} 

Region1 /*static*/getRank3 (  struct Region3 const r , const int dim ) 
{ const int zero = 0 ; 
const int regRank = 3 ; 
const int cond1 = dim >= regRank ; 
const int cond2 = dim < zero ; 
const int invalidRank = cond1 || cond2 ; 
if ( invalidRank ) 
{ const char * errorMsgHeader = "Invalid dimension for rank projection. Got " ; 
const char * errorMsgTrailer = ", expected value between 0 and 3" ; 
/*UpdatableVariableDeclaration*//*ASSIGNMENT STRING*/
 char * tempC126 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC126, "%s%d",errorMsgHeader,dim);
char * errorMsg = tempC126;
/*ASSIGNMENT STRING*/
 char * tempC127 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC127, "%s%s",errorMsg,errorMsgTrailer);
errorMsg = tempC127;fprintf(stderr, errorMsg ) ; 
exit(EXIT_FAILURE);
} 

const int regType = r .regType ; 
if ( regType ) 
{ struct Region1 regularRank = getRankRegular3 ( r , dim ) ; 
return regularRank ; 
} 

struct Region1 arbitraryRank = getRankArbitrary3 ( r , dim ) ; 
return arbitraryRank ; 
} 

Region1 /*static*/getRankArbitrary3 (  struct Region3 const r , const int dim ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
const int minusOne = zero - one ; 
const int proj0 = 0 ; 
const int proj1 = 1 ; 
const int proj2 = 2 ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point3 * regArr = r .pointArray ; 
const int regSize = r .regSize ; 
const int regSizeMinusOne = regSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArrRegion = regSizeMinusOne + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int distArrRegion = regSizeMinusOne + SX10_TEMP1 ; 
/*UpdatableVariableDeclaration*/int maxIndex = minusOne ; 
/*UpdatableVariableDeclaration*/int minIndex = zero ; 
/*UpdatableVariableDeclaration*/int isFirstMinIndex = 1 ; 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArrRegion ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
const int idx = p ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs17;
else if(proj1== dim)
goto cs18;
else if(proj2== dim)
goto cs19;
goto cs20;

cs17:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f0 ; 
const int isMax = crd >= maxIndex ; 
if ( isMax ) 
{ maxIndex = crd ; } 

const int lt = crd <= minIndex ; 
const int isMin = lt || isFirstMinIndex ; 
if ( isMin ) 
{ isFirstMinIndex = 0 ; minIndex = crd ; } 

break ; 
goto cs18;
} 


cs18:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f1 ; 
const int isMax = crd >= maxIndex ; 
if ( isMax ) 
{ maxIndex = crd ; } 

const int lt = crd <= minIndex ; 
const int isMin = lt || isFirstMinIndex ; 
if ( isMin ) 
{ isFirstMinIndex = 0 ; minIndex = crd ; } 

break ; 
goto cs19;
} 


cs19:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f2 ; 
const int isMax = crd >= maxIndex ; 
if ( isMax ) 
{ maxIndex = crd ; } 

const int lt = crd <= minIndex ; 
const int isMin = lt || isFirstMinIndex ; 
if ( isMin ) 
{ isFirstMinIndex = 0 ; minIndex = crd ; } 

break ; 
} 

cs20: {break;}} /*END OF SWITCH*/
} 

const int regIndexSizeMinusOne = maxIndex - minIndex ; 
const int regIndexSize = regIndexSizeMinusOne + one ; 
const int SX10_TEMP3 = 1 ; 
const int regIndexRegion = regIndexSizeMinusOne + SX10_TEMP3 ; 
const int SX10_TEMP4 = 1 ; 
const int regIndexDist = regIndexSizeMinusOne + SX10_TEMP4 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP5 = (int *)calloc(regIndexDist,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < regIndexDist ; SX10_TEMP6 ++ ) 
{ const int p = SX10_TEMP6 ; 
SX10_TEMP5 [ p ] = zero ; 
} 

/*Updatable ARRAY*/ int * const indexArr = SX10_TEMP5 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < regArrRegion ; SX10_TEMP7 ++ ) 
{ const int p = SX10_TEMP7 ; 
const int idx = p ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs21;
else if(proj1== dim)
goto cs22;
else if(proj2== dim)
goto cs23;
goto cs24;

cs21:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f0 ; 
const int newRegIndex = crd - minIndex ; 
indexArr [ newRegIndex ] = one ; 
break ; 
goto cs22;
} 


cs22:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f1 ; 
const int newRegIndex = crd - minIndex ; 
indexArr [ newRegIndex ] = one ; 
break ; 
goto cs23;
} 


cs23:
{ struct Point3 tempPt = regArr [ idx ] 
; 
const int crd = tempPt .f2 ; 
const int newRegIndex = crd - minIndex ; 
indexArr [ newRegIndex ] = one ; 
break ; 
} 

cs24: {break;}} /*END OF SWITCH*/
} 

/*UpdatableVariableDeclaration*/int newRegSize = 0 ; 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regIndexRegion ; SX10_TEMP8 ++ ) 
{ const int p = SX10_TEMP8 ; 
const int hit = indexArr [ p ] 
; 
newRegSize = newRegSize + hit ; } 

const int isRegular = newRegSize == regIndexSize ; 
if ( isRegular ) 
{ const int SX10_TEMP9 = 1 ; 
const int regRegularRegion = minusOne + SX10_TEMP9 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP10 = (Point1 *)calloc(regRegularRegion,sizeof( Point1 )); 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < regRegularRegion ; SX10_TEMP11 ++ ) 
{ const int p = SX10_TEMP11 ; 
struct Point1 pt  ; 
Point1_Point1( &pt/*Assignment*/, zero ) ; 
SX10_TEMP10 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const ptArray = SX10_TEMP10 ; 
struct Region1 retRegRegular  ; 
Region1_Region1_4( &retRegRegular/*Assignment*/, ptArray , regIndexSize , minIndex , regIndexSize ) ; 
return retRegRegular ; 
} 

const int newRegSizeMinusOne = newRegSize - one ; 
const int SX10_TEMP12 = 1 ; 
const int newRegRegion = newRegSizeMinusOne + SX10_TEMP12 ; 
const int SX10_TEMP13 = 1 ; 
const int newRegDist = newRegSizeMinusOne + SX10_TEMP13 ; 
/*Updatable ARRAY*/ struct Point1 * const indexPointArr = (Point1 *)calloc(newRegDist,sizeof( Point1 )); 
/*UpdatableVariableDeclaration*/int newArrIndex = 0 ; 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < regIndexRegion ; SX10_TEMP15 ++ ) 
{ const int p = SX10_TEMP15 ; 
const int indx = indexArr [ p ] 
; 
const int isOne = indx == one ; 
if ( isOne ) 
{ const int idx = p ; 
const int pointValue = idx + minIndex ; 
struct Point1 tempPoint  ; 
Point1_Point1( &tempPoint/*Assignment*/, pointValue ) ; 
indexPointArr [ newArrIndex ] = tempPoint ; 
newArrIndex = newArrIndex + one ; } 

} 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP16 = (Point1 *)calloc(newRegRegion,sizeof( Point1 )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < newRegRegion ; SX10_TEMP17 ++ ) 
{ const int p = SX10_TEMP17 ; 
struct Point1 pt = indexPointArr [ p ] 
; 
SX10_TEMP16 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const indexPointValueArr = SX10_TEMP16 ; 
struct Region1 retRegArbitrary  ; 
Region1_Region1_2( &retRegArbitrary/*Assignment*/, indexPointValueArr , regIndexSize ) ; 
return retRegArbitrary ; 
} 

Region1 /*static*/getRankRegular3 (  struct Region3 const r , const int dim ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int pointRegion = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP1 = (Point1 *)calloc(pointRegion,sizeof( Point1 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < pointRegion ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point1 pt1  ; 
Point1_Point1( &pt1/*Assignment*/, zero ) ; 
SX10_TEMP1 [ p ] = pt1 ; 
} 

/*Updatable ARRAY*/ struct Point1 * const pointArray = SX10_TEMP1 ; 
const int proj0 = 0 ; 
const int proj1 = 1 ; 
const int proj2 = 2 ; 
/*UpdatableVariableDeclaration*/int low0 = 0 ; 
/*UpdatableVariableDeclaration*/int dim0 = 0 ; 
/*SWITCH CASE*/while(1)
{ 
 if(proj0== dim)
goto cs25;
else if(proj1== dim)
goto cs26;
else if(proj2== dim)
goto cs27;
goto cs28;

cs25:
{ low0 = r .low0 ; dim0 = r .dim0 ; break ; 
goto cs26;
} 


cs26:
{ low0 = r .low1 ; dim0 = r .dim1 ; break ; 
goto cs27;
} 


cs27:
{ low0 = r .low2 ; dim0 = r .dim2 ; break ; 
} 

cs28: {break;}} /*END OF SWITCH*/
struct Region1 retRegRegular  ; 
Region1_Region1_4( &retRegRegular/*Assignment*/, pointArray , dim0 , low0 , dim0 ) ; 
return retRegRegular ; 
} 

Complex /*static*/getRefArrayValue2Complex (  struct ComplexRefArray2 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ComplexStub * const contents = array .contents ; 
struct ComplexStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Complex * const localArray = indexStub .localArray ; 
struct Complex returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

Complex /*static*/getRefArrayValue1Complex (  struct ComplexRefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ComplexStub * const contents = array .contents ; 
struct ComplexStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Complex * const localArray = indexStub .localArray ; 
struct Complex returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

int /*static*/regionLow (  struct Region1 const r ) 
{ const int regType = r .regType ; 
if ( regType ) 
{ const int lw = regionLowRegular ( r ) ; 
return lw ; 
} 

const int lw = regionLowArbitrary ( r ) ; 
return lw ; 
} 

int /*static*/regionLowRegular (  struct Region1 const r ) 
{ const int lw = r .low0 ; 
return lw ; 
} 

int /*static*/regionLowArbitrary (  struct Region1 const r ) 
{ const int index = 0 ; 
/*Updatable ARRAY*/ struct Point1 * const array = r .pointArray ; 
struct Point1 lowPoint = array [ index ] 
; 
const int lw = lowPoint .f0 ; 
return lw ; 
} 

double /*static*/getRefArrayValue1double (  struct doubleRefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
const double returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

Dist1 /*static*/restrictDist1 (  struct Dist1 const dn , const int p ) 
{ struct Region1 r = dn .dReg ; 
const int regType = r .regType ; 
if ( regType ) 
{ struct Dist1 regDist = restrictDistRegular1 ( dn , p ) ; 
return regDist ; 
} 

struct Dist1 arbDist = restrictDistArbitrary1 ( dn , p ) ; 
return arbDist ; 
} 

Dist1 /*static*/restrictDistRegular1 (  struct Dist1 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region1 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
const int stride1 = 1 ; 
const int dim1 = dReg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = dReg .low0 ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP7 = (Point1 *)calloc(tempReg,sizeof( Point1 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
/*UpdatableVariableDeclaration*/int f1 = idx / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 dpt  ; 
Point1_Point1( &dpt/*Assignment*/, f1 ) ; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const pointArray = SX10_TEMP7 ; 
struct Region1 dpReg  ; 
Region1_Region1_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist1 dpDistn  ; 
Dist1_Dist1( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Dist1 /*static*/restrictDistArbitrary1 (  struct Dist1 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region1 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const dArray = dReg .pointArray ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP7 = (Point1 *)calloc(tempReg,sizeof( Point1 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
struct Point1 dpt = dArray [ idx ] 
; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const pointArray = SX10_TEMP7 ; 
struct Region1 dpReg  ; 
Region1_Region1_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist1 dpDistn  ; 
Dist1_Dist1( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Region2 /*static*/unionRegion2 (  struct Region2 const reg1 ,  struct Region2 const reg2 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
/*UpdatableVariableDeclaration*/int index1 = 0 ; 
/*UpdatableVariableDeclaration*/int index2 = 0 ; 
/*UpdatableVariableDeclaration*/int index = 0 ; 
const int regType1 = reg1 .regType ; 
const int regType2 = reg2 .regType ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * tempArr1 = reg1 .pointArray ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * tempArr2 = reg2 .pointArray ; 
if ( regType1 ) 
{ const int stride2 = 1 ; 
const int dim2 = reg1 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg1 .low1 ; 
const int dim1 = reg1 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg1 .low0 ; 
const int regSize1 = reg1 .regSize ; 
const int sizeMinusOne = regSize1 - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP1 [ pt ] = retPoint ; 
} 

tempArr1 = SX10_TEMP1 ; } 

if ( regType2 ) 
{ const int stride2 = 1 ; 
const int dim2 = reg2 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg2 .low1 ; 
const int dim1 = reg2 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg2 .low0 ; 
const int regSize2 = reg2 .regSize ; 
const int sizeMinusOne = regSize2 - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int pt = SX10_TEMP5 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP4 [ pt ] = retPoint ; 
} 

tempArr2 = SX10_TEMP4 ; } 

/*Updatable ARRAY*/ struct Point2 * const arr1 = tempArr1 ; 
/*Updatable ARRAY*/ struct Point2 * const arr2 = tempArr2 ; 
const int size1 = reg1 .regSize ; 
const int size2 = reg2 .regSize ; 
/*UpdatableVariableDeclaration*/int cond1 = index1 < size1 ; 
/*UpdatableVariableDeclaration*/int cond2 = index2 < size2 ; 
/*UpdatableVariableDeclaration*/int cond = cond1 && cond2 ; 

while ( cond ) 
{ struct Point2 p1 = arr1 [ index1 ] 
; 
struct Point2 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint2 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
const int gt = pointCompare == two ; 
if ( eq ) 
{ index1 = index1 + one ; index2 = index2 + one ; } 

if ( lt ) 
{ index1 = index1 + one ; } 

if ( gt ) 
{ index2 = index2 + one ; } 

index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

const int rSize = index ; 
const int sizeMinusOne = rSize - one ; 
const int SX10_TEMP6 = 1 ; 
const int tempReg = sizeMinusOne + SX10_TEMP6 ; 
const int SX10_TEMP7 = 1 ; 
const int tempDist = sizeMinusOne + SX10_TEMP7 ; 
/*Updatable ARRAY*/ struct Point2 * const tempArr = (Point2 *)calloc(tempDist,sizeof( Point2 )); 
index1 = 0 ; index2 = 0 ; index = 0 ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; 
while ( cond ) 
{ struct Point2 p1 = arr1 [ index1 ] 
; 
struct Point2 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint2 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
const int gt = pointCompare == two ; 
if ( eq ) 
{ tempArr [ index ] = p1 ; 
index1 = index1 + one ; index2 = index2 + one ; } 

if ( lt ) 
{ tempArr [ index ] = p1 ; 
index1 = index1 + one ; } 

if ( gt ) 
{ tempArr [ index ] = p2 ; 
index2 = index2 + one ; } 

index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ struct Point2 tempArrPt = arr1 [ index1 ] 
; 
tempArr [ index ] = tempArrPt ; 
index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ struct Point2 tempArrPt = arr2 [ index2 ] 
; 
tempArr [ index ] = tempArrPt ; 
index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP9 = (Point2 *)calloc(tempReg,sizeof( Point2 )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < tempReg ; SX10_TEMP10 ++ ) 
{ const int pt = SX10_TEMP10 ; 
struct Point2 retPoint = tempArr [ pt ] 
; 
SX10_TEMP9 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const arr = SX10_TEMP9 ; 
struct Region2 unionReg  ; 
Region2_Region2_2( &unionReg/*Assignment*/, arr , rSize ) ; 
return unionReg ; 
} 

Region1 /*static*/unionRegion1 (  struct Region1 const reg1 ,  struct Region1 const reg2 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
/*UpdatableVariableDeclaration*/int index1 = 0 ; 
/*UpdatableVariableDeclaration*/int index2 = 0 ; 
/*UpdatableVariableDeclaration*/int index = 0 ; 
const int regType1 = reg1 .regType ; 
const int regType2 = reg2 .regType ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point1 * tempArr1 = reg1 .pointArray ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point1 * tempArr2 = reg2 .pointArray ; 
if ( regType1 ) 
{ const int stride1 = 1 ; 
const int dim1 = reg1 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg1 .low0 ; 
const int regSize1 = reg1 .regSize ; 
const int sizeMinusOne = regSize1 - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP1 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 retPoint  ; 
Point1_Point1( &retPoint/*Assignment*/, f1 ) ; 
SX10_TEMP1 [ pt ] = retPoint ; 
} 

tempArr1 = SX10_TEMP1 ; } 

if ( regType2 ) 
{ const int stride1 = 1 ; 
const int dim1 = reg2 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg2 .low0 ; 
const int regSize2 = reg2 .regSize ; 
const int sizeMinusOne = regSize2 - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP4 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int pt = SX10_TEMP5 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 retPoint  ; 
Point1_Point1( &retPoint/*Assignment*/, f1 ) ; 
SX10_TEMP4 [ pt ] = retPoint ; 
} 

tempArr2 = SX10_TEMP4 ; } 

/*Updatable ARRAY*/ struct Point1 * const arr1 = tempArr1 ; 
/*Updatable ARRAY*/ struct Point1 * const arr2 = tempArr2 ; 
const int size1 = reg1 .regSize ; 
const int size2 = reg2 .regSize ; 
/*UpdatableVariableDeclaration*/int cond1 = index1 < size1 ; 
/*UpdatableVariableDeclaration*/int cond2 = index2 < size2 ; 
/*UpdatableVariableDeclaration*/int cond = cond1 && cond2 ; 

while ( cond ) 
{ struct Point1 p1 = arr1 [ index1 ] 
; 
struct Point1 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint1 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
const int gt = pointCompare == two ; 
if ( eq ) 
{ index1 = index1 + one ; index2 = index2 + one ; } 

if ( lt ) 
{ index1 = index1 + one ; } 

if ( gt ) 
{ index2 = index2 + one ; } 

index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

const int rSize = index ; 
const int sizeMinusOne = rSize - one ; 
const int SX10_TEMP6 = 1 ; 
const int tempReg = sizeMinusOne + SX10_TEMP6 ; 
const int SX10_TEMP7 = 1 ; 
const int tempDist = sizeMinusOne + SX10_TEMP7 ; 
/*Updatable ARRAY*/ struct Point1 * const tempArr = (Point1 *)calloc(tempDist,sizeof( Point1 )); 
index1 = 0 ; index2 = 0 ; index = 0 ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; 
while ( cond ) 
{ struct Point1 p1 = arr1 [ index1 ] 
; 
struct Point1 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint1 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
const int gt = pointCompare == two ; 
if ( eq ) 
{ tempArr [ index ] = p1 ; 
index1 = index1 + one ; index2 = index2 + one ; } 

if ( lt ) 
{ tempArr [ index ] = p1 ; 
index1 = index1 + one ; } 

if ( gt ) 
{ tempArr [ index ] = p2 ; 
index2 = index2 + one ; } 

index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ struct Point1 tempArrPt = arr1 [ index1 ] 
; 
tempArr [ index ] = tempArrPt ; 
index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ struct Point1 tempArrPt = arr2 [ index2 ] 
; 
tempArr [ index ] = tempArrPt ; 
index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP9 = (Point1 *)calloc(tempReg,sizeof( Point1 )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < tempReg ; SX10_TEMP10 ++ ) 
{ const int pt = SX10_TEMP10 ; 
struct Point1 retPoint = tempArr [ pt ] 
; 
SX10_TEMP9 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point1 * const arr = SX10_TEMP9 ; 
struct Region1 unionReg  ; 
Region1_Region1_2( &unionReg/*Assignment*/, arr , rSize ) ; 
return unionReg ; 
} 

void /*static*/setRefArrayValue1Particle (  struct ParticleRefArray1 const array , const int index ,  struct Particle const val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ParticleStub * const contents = array .contents ; 
struct ParticleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Particle * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

char * /*static*/toStringRegion1 (  struct Region1 const r ) 
{ /*UpdatableVariableDeclaration*/char * str = "" ; 
const int dim = r .regSize ; 
const int one = 1 ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int rReg = dimMinusOne + SX10_TEMP0 ; 
const int regType = r .regType ; 
if ( regType ) 
{ const int stride1 = 1 ; 
const int dim1 = r .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = r .low0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < rReg ; SX10_TEMP1 ++ ) 
{ const int pt1 = SX10_TEMP1 ; 
const int ordl = pt1 ; 
/*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; /*UpdatableVariableDeclaration*/ struct Point1 pt = Point1_Point1( &pt/*Assignment*/, f1 ) ; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint1 ( pt ) ; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC128 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC128, "%s%s",str,lBrace);
str = tempC128;/*ASSIGNMENT STRING*/
 char * tempC129 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC129, "%s%d",str,pt1);
str = tempC129;/*ASSIGNMENT STRING*/
 char * tempC130 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC130, "%s%s",str,colon);
str = tempC130;/*ASSIGNMENT STRING*/
 char * tempC131 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC131, "%s%s",str,ptStr);
str = tempC131;/*ASSIGNMENT STRING*/
 char * tempC132 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC132, "%s%s",str,rBrace);
str = tempC132;/*ASSIGNMENT STRING*/
 char * tempC133 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC133, "%s%s",str,endLine);
str = tempC133;} 

return str ; 
} 
else 
{ /*Updatable ARRAY*/ struct Point1 * const regArray = r .pointArray ; 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < rReg ; SX10_TEMP2 ++ ) 
{ const int pt1 = SX10_TEMP2 ; 
/*UpdatableVariableDeclaration*/ struct Point1 pt = regArray [ pt1 ] 
; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint1 ( pt ) ; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC134 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC134, "%s%s",str,lBrace);
str = tempC134;/*ASSIGNMENT STRING*/
 char * tempC135 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC135, "%s%d",str,pt1);
str = tempC135;/*ASSIGNMENT STRING*/
 char * tempC136 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC136, "%s%s",str,colon);
str = tempC136;/*ASSIGNMENT STRING*/
 char * tempC137 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC137, "%s%s",str,ptStr);
str = tempC137;/*ASSIGNMENT STRING*/
 char * tempC138 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC138, "%s%s",str,rBrace);
str = tempC138;/*ASSIGNMENT STRING*/
 char * tempC139 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC139, "%s%s",str,endLine);
str = tempC139;} 

return str ; 
} 


} 

int /*static*/regionContainsPoint1 (  struct Region1 const r ,  struct Point1 const target ) 
{ const int temp = searchPointInRegion1 ( r , target ) ; 
const int zero = 0 ; 
const int containsPt = temp >= zero ; 
return containsPt ; 
} 

int /*static*/regionContainsPoint2 (  struct Region2 const r ,  struct Point2 const target ) 
{ const int temp = searchPointInRegion2 ( r , target ) ; 
const int zero = 0 ; 
const int containsPt = temp >= zero ; 
return containsPt ; 
} 

int /*static*/getDistLocalCount2 (  struct Dist2 const dn , const int placeIndex ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const counts = d .counts ; 
const int localCount = counts [ placeIndex ] 
; 
return localCount ; 
} 

int /*static*/getDistLocalCount3 (  struct Dist3 const dn , const int placeIndex ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const counts = d .counts ; 
const int localCount = counts [ placeIndex ] 
; 
return localCount ; 
} 

Region1 /*static*/getRefArrayValue1Region1 (  struct Region1RefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct Region1Stub * const contents = array .contents ; 
struct Region1Stub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Region1 * const localArray = indexStub .localArray ; 
struct Region1 returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

int /*static*/getDistLocalCount1 (  struct Dist1 const dn , const int placeIndex ) 
{ struct Dist d = dn .dDist ; 
/*Updatable ARRAY*/ int * const counts = d .counts ; 
const int localCount = counts [ placeIndex ] 
; 
return localCount ; 
} 

Dist2 /*static*/getPlaceDist2 (  struct Region2 const r , const int p ) 
{ const int rSize = r .regSize ; 
const int one = 1 ; 
const int rSizeMinusOne = rSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int dReg = rSizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP1 = (int *)calloc(dReg,sizeof( int )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < dReg ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
SX10_TEMP1 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP1 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist2 retDist  ; 
Dist2_Dist2( &retDist/*Assignment*/, r , pointDist ) ; 
return retDist ; 
} 

Dist1 /*static*/getPlaceDist1 (  struct Region1 const r , const int p ) 
{ const int rSize = r .regSize ; 
const int one = 1 ; 
const int rSizeMinusOne = rSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int dReg = rSizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP1 = (int *)calloc(dReg,sizeof( int )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < dReg ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
SX10_TEMP1 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP1 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist1 retDist  ; 
Dist1_Dist1( &retDist/*Assignment*/, r , pointDist ) ; 
return retDist ; 
} 

Dist2 /*static*/restrictDist2 (  struct Dist2 const dn , const int p ) 
{ struct Region2 r = dn .dReg ; 
const int regType = r .regType ; 
if ( regType ) 
{ struct Dist2 regDist = restrictDistRegular2 ( dn , p ) ; 
return regDist ; 
} 

struct Dist2 arbDist = restrictDistArbitrary2 ( dn , p ) ; 
return arbDist ; 
} 

Dist2 /*static*/restrictDistRegular2 (  struct Dist2 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region2 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
const int stride2 = 1 ; 
const int dim2 = dReg .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = dReg .low1 ; 
const int dim1 = dReg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = dReg .low0 ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(tempReg,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
/*UpdatableVariableDeclaration*/int f2 = idx / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = idx / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 dpt  ; 
Point2_Point2( &dpt/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const pointArray = SX10_TEMP7 ; 
struct Region2 dpReg  ; 
Region2_Region2_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist2 dpDistn  ; 
Dist2_Dist2( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Dist2 /*static*/restrictDistArbitrary2 (  struct Dist2 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region2 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const dArray = dReg .pointArray ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(tempReg,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
struct Point2 dpt = dArray [ idx ] 
; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const pointArray = SX10_TEMP7 ; 
struct Region2 dpReg  ; 
Region2_Region2_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist2 dpDistn  ; 
Dist2_Dist2( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Dist3 /*static*/restrictDist3 (  struct Dist3 const dn , const int p ) 
{ struct Region3 r = dn .dReg ; 
const int regType = r .regType ; 
if ( regType ) 
{ struct Dist3 regDist = restrictDistRegular3 ( dn , p ) ; 
return regDist ; 
} 

struct Dist3 arbDist = restrictDistArbitrary3 ( dn , p ) ; 
return arbDist ; 
} 

Dist3 /*static*/restrictDistRegular3 (  struct Dist3 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region3 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
const int stride3 = 1 ; 
const int dim3 = dReg .dim2 ; 
const int stride2 = stride3 * dim3 ; 
const int regLow3 = dReg .low2 ; 
const int dim2 = dReg .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = dReg .low1 ; 
const int dim1 = dReg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = dReg .low0 ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP7 = (Point3 *)calloc(tempReg,sizeof( Point3 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
/*UpdatableVariableDeclaration*/int f3 = idx / stride3 ; 
f3 = f3 % dim3 ; f3 = f3 + regLow3 ; /*UpdatableVariableDeclaration*/int f2 = idx / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = idx / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point3 dpt  ; 
Point3_Point3( &dpt/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const pointArray = SX10_TEMP7 ; 
struct Region3 dpReg  ; 
Region3_Region3_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist3 dpDistn  ; 
Dist3_Dist3( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Dist3 /*static*/restrictDistArbitrary3 (  struct Dist3 const d , const int p ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int h = /* here  */ 0 ; 
struct Region3 dReg = d .dReg ; 
struct Dist dDist = d .dDist ; 
const int dim = dReg .regSize ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int dRegReg = dimMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point3 * const dArray = dReg .pointArray ; 
/*Updatable ARRAY*/ int * const dPlace = dDist .placeArray ; 
/*Updatable ARRAY*/ int * const dCounts = dDist .counts ; 
const int index = /* p . id  */ 0 ; 
/*UpdatableVariableDeclaration*/int numPoints = dCounts [ index ] 
; 
const int rSizeNumPoints = numPoints ; 
const int rSize = numPoints - one ; 
const int SX10_TEMP1 = 1 ; 
const int tempReg = rSize + SX10_TEMP1 ; 
const int SX10_TEMP2 = 1 ; 
const int tempDist = rSize + SX10_TEMP2 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < tempReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
SX10_TEMP3 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const rPlace = SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempArray = (int *)calloc(tempDist,sizeof( int )); 
const int cond1 = numPoints > zero ; 
if ( cond1 ) 
{ numPoints = 0 ; for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < dRegReg ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int dP = dPlace [ pt ] 
; 
const int cond2 = p == dP ; 
if ( cond2 ) 
{ const int i = pt ; 
tempArray [ numPoints ] = i ; 
numPoints = numPoints + one ; } 

} 

} 

/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP7 = (Point3 *)calloc(tempReg,sizeof( Point3 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < tempReg ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int idx = tempArray [ pt ] 
; 
struct Point3 dpt = dArray [ idx ] 
; 
SX10_TEMP7 [ pt ] = dpt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const pointArray = SX10_TEMP7 ; 
struct Region3 dpReg  ; 
Region3_Region3_2( &dpReg/*Assignment*/, pointArray , rSizeNumPoints ) ; 
struct Dist dpDist  ; 
Dist_Dist( &dpDist/*Assignment*/, rPlace , rSizeNumPoints ) ; 
struct Dist3 dpDistn  ; 
Dist3_Dist3( &dpDistn/*Assignment*/, dpReg , dpDist ) ; 
return dpDistn ; 
} 

Dist3 /*static*/getPlaceDist3 (  struct Region3 const r , const int p ) 
{ const int rSize = r .regSize ; 
const int one = 1 ; 
const int rSizeMinusOne = rSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int dReg = rSizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP1 = (int *)calloc(dReg,sizeof( int )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < dReg ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
SX10_TEMP1 [ pt ] = p ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP1 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist3 retDist  ; 
Dist3_Dist3( &retDist/*Assignment*/, r , pointDist ) ; 
return retDist ; 
} 

void /*static*/setRefArrayValue2double (  struct doubleRefArray2 const array , const int index , const double val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/binarySearchRegion2 (  struct Region2 const r ,  struct Point2 const target ) 
{ /*Updatable ARRAY*/ struct Point2 * const pointArray = r .pointArray ; 
/*UpdatableVariableDeclaration*/int start = 0 ; 
/*UpdatableVariableDeclaration*/int end = r .regSize ; 
const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
end = end - one ; /*UpdatableVariableDeclaration*/int result = zero - one ; 
/*UpdatableVariableDeclaration*/int notDone = start <= end ; 

while ( notDone ) 
{ /*UpdatableVariableDeclaration*/int mid = start + end ; 
mid = mid / two ; struct Point2 temp = pointArray [ mid ] 
; 
const int pointCompare = comparePoint2 ( target , temp ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ return mid ; 
} 
else 
{ if ( lt ) 
{ end = mid - one ; } 
else 
{ start = mid + one ; } 


} 


notDone = start <= end ; } 

return result ; 
} 

int /*static*/binarySearchRegion1 (  struct Region1 const r ,  struct Point1 const target ) 
{ /*Updatable ARRAY*/ struct Point1 * const pointArray = r .pointArray ; 
/*UpdatableVariableDeclaration*/int start = 0 ; 
/*UpdatableVariableDeclaration*/int end = r .regSize ; 
const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
end = end - one ; /*UpdatableVariableDeclaration*/int result = zero - one ; 
/*UpdatableVariableDeclaration*/int notDone = start <= end ; 

while ( notDone ) 
{ /*UpdatableVariableDeclaration*/int mid = start + end ; 
mid = mid / two ; struct Point1 temp = pointArray [ mid ] 
; 
const int pointCompare = comparePoint1 ( target , temp ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ return mid ; 
} 
else 
{ if ( lt ) 
{ end = mid - one ; } 
else 
{ start = mid + one ; } 


} 


notDone = start <= end ; } 

return result ; 
} 

void /*static*/setRefArrayValue2Particle (  struct ParticleRefArray2 const array , const int index ,  struct Particle const val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ParticleStub * const contents = array .contents ; 
struct ParticleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Particle * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/binarySearchRegion3 (  struct Region3 const r ,  struct Point3 const target ) 
{ /*Updatable ARRAY*/ struct Point3 * const pointArray = r .pointArray ; 
/*UpdatableVariableDeclaration*/int start = 0 ; 
/*UpdatableVariableDeclaration*/int end = r .regSize ; 
const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
end = end - one ; /*UpdatableVariableDeclaration*/int result = zero - one ; 
/*UpdatableVariableDeclaration*/int notDone = start <= end ; 

while ( notDone ) 
{ /*UpdatableVariableDeclaration*/int mid = start + end ; 
mid = mid / two ; struct Point3 temp = pointArray [ mid ] 
; 
const int pointCompare = comparePoint3 ( target , temp ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ return mid ; 
} 
else 
{ if ( lt ) 
{ end = mid - one ; } 
else 
{ start = mid + one ; } 


} 


notDone = start <= end ; } 

return result ; 
} 

Dist1 /*static*/getUniqueDist ( ) 
{ const int one = 1 ; 
const int zero = 0 ; 
const int maxPlaces = /* place.MAX_PLACES  */ 1 ; 
const int rSize = maxPlaces - one ; 
const int SX10_TEMP0 = 1 ; 
const int placeRegion = rSize + SX10_TEMP0 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP1 = (int *)calloc(placeRegion,sizeof( int )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < placeRegion ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
const int i = p ; 
const int pl1 = /* place.places ( i )  */ 0 
; 
SX10_TEMP1 [ p ] = pl1 ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP1 ; 
const int minusOne = zero - one ; 
const int SX10_TEMP3 = 1 ; 
const int pointRegion = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP4 = (Point1 *)calloc(pointRegion,sizeof( Point1 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < pointRegion ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point1 pt1  ; 
Point1_Point1( &pt1/*Assignment*/, zero ) ; 
SX10_TEMP4 [ p ] = pt1 ; 
} 

/*Updatable ARRAY*/ struct Point1 * const pointArray = SX10_TEMP4 ; 
struct Region1 reg  ; 
Region1_Region1_4( &reg/*Assignment*/, pointArray , maxPlaces , zero , maxPlaces ) ; 
struct Dist pointDist1  ; 
Dist_Dist( &pointDist1/*Assignment*/, vPlaceArray , maxPlaces ) ; 
struct Dist1 retDist  ; 
Dist1_Dist1( &retDist/*Assignment*/, reg , pointDist1 ) ; 
return retDist ; 
} 

void /*static*/setRefArrayValue3double (  struct doubleRefArray3 const array , const int index , const double val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist3 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/regionHigh (  struct Region1 const r ) 
{ const int regType = r .regType ; 
if ( regType ) 
{ const int hgh = regionHighRegular ( r ) ; 
return hgh ; 
} 

const int hgh = regionHighArbitrary ( r ) ; 
return hgh ; 
} 

int /*static*/regionHighRegular (  struct Region1 const r ) 
{ const int one = 1 ; 
const int index = r .dim0 ; 
const int offset = r .low0 ; 
const int hgh = index - one ; 
const int hghOff = hgh + offset ; 
return hghOff ; 
} 

int /*static*/regionHighArbitrary (  struct Region1 const r ) 
{ const int one = 1 ; 
/*Updatable ARRAY*/ struct Point1 * const array = r .pointArray ; 
/*UpdatableVariableDeclaration*/int index = r .regSize ; 
index = index - one ; struct Point1 highPoint = array [ index ] 
; 
const int hgh = highPoint .f0 ; 
return hgh ; 
} 

int /*static*/getRefArrayValue1int (  struct intRefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct intStub * const contents = array .contents ; 
struct intStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
const int returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

int /*static*/comparePoint1 (  struct Point1 const pt1 ,  struct Point1 const pt2 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
/*UpdatableVariableDeclaration*/int point1 = 0 ; 
/*UpdatableVariableDeclaration*/int point2 = 0 ; 
/*UpdatableVariableDeclaration*/int lt = 0 ; 
/*UpdatableVariableDeclaration*/int gt = 0 ; 
point1 = pt1 .f0 ; point2 = pt2 .f0 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

return zero ; 
} 

int /*static*/comparePoint2 (  struct Point2 const pt1 ,  struct Point2 const pt2 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
/*UpdatableVariableDeclaration*/int point1 = 0 ; 
/*UpdatableVariableDeclaration*/int point2 = 0 ; 
/*UpdatableVariableDeclaration*/int lt = 0 ; 
/*UpdatableVariableDeclaration*/int gt = 0 ; 
point1 = pt1 .f0 ; point2 = pt2 .f0 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

point1 = pt1 .f1 ; point2 = pt2 .f1 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

return zero ; 
} 

Point2 /*static*/regionOrdinalPoint2 (  struct Region2 const reg , const int ordl ) 
{ const int regType = reg .regType ; 
if ( regType ) 
{ struct Point2 pt = regionOrdinalPointRegular2 ( reg , ordl ) ; 
return pt ; 
} 

struct Point2 pt = regionOrdinalPointArbitrary2 ( reg , ordl ) ; 
return pt ; 
} 

Point2 /*static*/regionOrdinalPointRegular2 (  struct Region2 const reg , const int ordl ) 
{ const int stride2 = 1 ; 
const int dim2 = reg .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg .low1 ; 
const int dim1 = reg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg .low0 ; 
/*UpdatableVariableDeclaration*/int f2 = ordl / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, f1 , f2 ) ; 
return pt ; 
} 

Point2 /*static*/regionOrdinalPointArbitrary2 (  struct Region2 const reg , const int ordl ) 
{ /*Updatable ARRAY*/ struct Point2 * const pointArray = reg .pointArray ; 
struct Point2 pt = pointArray [ ordl ] 
; 
return pt ; 
} 

Point1 /*static*/regionOrdinalPoint1 (  struct Region1 const reg , const int ordl ) 
{ const int regType = reg .regType ; 
if ( regType ) 
{ struct Point1 pt = regionOrdinalPointRegular1 ( reg , ordl ) ; 
return pt ; 
} 

struct Point1 pt = regionOrdinalPointArbitrary1 ( reg , ordl ) ; 
return pt ; 
} 

Point1 /*static*/regionOrdinalPointRegular1 (  struct Region1 const reg , const int ordl ) 
{ const int stride1 = 1 ; 
const int dim1 = reg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg .low0 ; 
/*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 pt  ; 
Point1_Point1( &pt/*Assignment*/, f1 ) ; 
return pt ; 
} 

Point1 /*static*/regionOrdinalPointArbitrary1 (  struct Region1 const reg , const int ordl ) 
{ /*Updatable ARRAY*/ struct Point1 * const pointArray = reg .pointArray ; 
struct Point1 pt = pointArray [ ordl ] 
; 
return pt ; 
} 

int /*static*/comparePoint3 (  struct Point3 const pt1 ,  struct Point3 const pt2 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int two = 2 ; 
/*UpdatableVariableDeclaration*/int point1 = 0 ; 
/*UpdatableVariableDeclaration*/int point2 = 0 ; 
/*UpdatableVariableDeclaration*/int lt = 0 ; 
/*UpdatableVariableDeclaration*/int gt = 0 ; 
point1 = pt1 .f0 ; point2 = pt2 .f0 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

point1 = pt1 .f1 ; point2 = pt2 .f1 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

point1 = pt1 .f2 ; point2 = pt2 .f2 ; lt = point1 < point2 ; gt = point1 > point2 ; if ( lt ) 
{ return one ; 
} 

if ( gt ) 
{ return two ; 
} 

return zero ; 
} 

void /*static*/setRefArrayValue1int (  struct intRefArray1 const array , const int index , const int val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct intStub * const contents = array .contents ; 
struct intStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

double /*static*/getRefArrayValue3double (  struct doubleRefArray3 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist3 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
const double returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

char * /*static*/toStringDist2 (  struct Dist2 const d ) 
{ /*UpdatableVariableDeclaration*/char * str = "" ; 
struct Region2 r = d .dReg ; 
struct Dist pointDist = d .dDist ; 
/*Updatable ARRAY*/ int * const placeDist = pointDist .placeArray ; 
const int dim = r .regSize ; 
const int one = 1 ; 
const int dimMinusOne = dim - one ; 
const int SX10_TEMP0 = 1 ; 
const int rReg = dimMinusOne + SX10_TEMP0 ; 
const int regType = r .regType ; 
if ( regType ) 
{ const int stride2 = 1 ; 
const int dim2 = r .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = r .low1 ; 
const int dim1 = r .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = r .low0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < rReg ; SX10_TEMP1 ++ ) 
{ const int pt1 = SX10_TEMP1 ; 
const int ordl = pt1 ; 
/*UpdatableVariableDeclaration*/int f2 = ordl / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; /*UpdatableVariableDeclaration*/ struct Point2 pt = Point2_Point2( &pt/*Assignment*/, f1 , f2 ) ; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint2 ( pt ) ; 
/*UpdatableVariableDeclaration*/int plStr = placeDist [ pt1 ] 
; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * arrow = "->" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC140 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC140, "%s%s",str,lBrace);
str = tempC140;/*ASSIGNMENT STRING*/
 char * tempC141 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC141, "%s%d",str,pt1);
str = tempC141;/*ASSIGNMENT STRING*/
 char * tempC142 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC142, "%s%s",str,colon);
str = tempC142;/*ASSIGNMENT STRING*/
 char * tempC143 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC143, "%s%s",str,ptStr);
str = tempC143;/*ASSIGNMENT STRING*/
 char * tempC144 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC144, "%s%s",str,arrow);
str = tempC144;/*ASSIGNMENT STRING*/
 char * tempC145 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC145, "%s%d",str,plStr);
str = tempC145;/*ASSIGNMENT STRING*/
 char * tempC146 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC146, "%s%s",str,rBrace);
str = tempC146;/*ASSIGNMENT STRING*/
 char * tempC147 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC147, "%s%s",str,endLine);
str = tempC147;} 

return str ; 
} 
else 
{ for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < rReg ; SX10_TEMP2 ++ ) 
{ const int pt1 = SX10_TEMP2 ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * regArray = r .pointArray ; 
/*UpdatableVariableDeclaration*/ struct Point2 pt = regArray [ pt1 ] 
; 
/*UpdatableVariableDeclaration*/char * ptStr = toStringPoint2 ( pt ) ; 
/*UpdatableVariableDeclaration*/int plStr = placeDist [ pt1 ] 
; 
/*UpdatableVariableDeclaration*/char * lBrace = "{" ; 
/*UpdatableVariableDeclaration*/char * arrow = "->" ; 
/*UpdatableVariableDeclaration*/char * rBrace = "}" ; 
/*UpdatableVariableDeclaration*/char * endLine = "\n" ; 
/*UpdatableVariableDeclaration*/char * colon = ":" ; 
/*ASSIGNMENT STRING*/
 char * tempC148 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC148, "%s%s",str,lBrace);
str = tempC148;/*ASSIGNMENT STRING*/
 char * tempC149 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC149, "%s%d",str,pt1);
str = tempC149;/*ASSIGNMENT STRING*/
 char * tempC150 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC150, "%s%s",str,colon);
str = tempC150;/*ASSIGNMENT STRING*/
 char * tempC151 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC151, "%s%s",str,ptStr);
str = tempC151;/*ASSIGNMENT STRING*/
 char * tempC152 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC152, "%s%s",str,arrow);
str = tempC152;/*ASSIGNMENT STRING*/
 char * tempC153 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC153, "%s%d",str,plStr);
str = tempC153;/*ASSIGNMENT STRING*/
 char * tempC154 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC154, "%s%s",str,rBrace);
str = tempC154;/*ASSIGNMENT STRING*/
 char * tempC155 = (char *)GC_MALLOC(1000 * sizeof(char));
sprintf(tempC155, "%s%s",str,endLine);
str = tempC155;} 

return str ; 
} 


} 

int /*static*/getRefArrayValue1boolean (  struct booleanRefArray1 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct booleanStub * const contents = array .contents ; 
struct booleanStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
const int returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

Dist1 /*static*/getBlockDist1 (  struct Region1 const r ) 
{ const int rSize = r .regSize ; 
const int zero = 0 ; 
const int one = 1 ; 
const int rSizeMinusOne = rSize - one ; 
const int SX10_TEMP0 = 1 ; 
const int dReg = rSizeMinusOne + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int dDist = rSizeMinusOne + SX10_TEMP1 ; 
/*Updatable ARRAY*/ int * const placeArray = (int *)calloc(dDist,sizeof( int )); 
const int N = /* place.MAX_PLACES  */ 1 ; 
const int q = rSize % N ; 
const int p = rSize / N ; 
/*UpdatableVariableDeclaration*/int blockSize = p + one ; 
/*UpdatableVariableDeclaration*/int arraySize = q * blockSize ; 
/*UpdatableVariableDeclaration*/int offset = 0 ; 
/*UpdatableVariableDeclaration*/int initPlace = /* place.FIRST_PLACE  */ 0 ; 
getCyclic ( placeArray , arraySize , initPlace , blockSize ) ; 
/*UpdatableVariableDeclaration*/int remainingPlaces = N - q ; 
const int cond = remainingPlaces == zero ; 
if ( cond ) 
{ /*Updatable ARRAY*/ int * const SX10_TEMP3 = (int *)calloc(dReg,sizeof( int )); 
for ( int SX10_TEMP4 = 0 ; SX10_TEMP4 < dReg ; SX10_TEMP4 ++ ) 
{ const int pt = SX10_TEMP4 ; 
const int tempPl = placeArray [ pt ] 
; 
SX10_TEMP3 [ pt ] = tempPl ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP3 ; 
struct Dist pointDist1  ; 
Dist_Dist( &pointDist1/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist1 retDist  ; 
Dist1_Dist1( &retDist/*Assignment*/, r , pointDist1 ) ; 
return retDist ; 
} 

offset = arraySize ; blockSize = p ; arraySize = remainingPlaces * blockSize ; initPlace = /* place.places ( q )  */ 0 
; /*UpdatableVariableDeclaration*/int chunk = blockSize ; 
const int ifCond = blockSize > arraySize ; 
if ( ifCond ) 
{ chunk = arraySize ; } 

/*UpdatableVariableDeclaration*/int index = offset ; 
/*UpdatableVariableDeclaration*/int dSize = index + chunk ; 
dSize = dSize - one ; const int ub0 = chunk - one ; 
const int SX10_TEMP5 = 1 ; 
const int pointReg0 = ub0 + SX10_TEMP5 ; 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < pointReg0 ; SX10_TEMP6 ++ ) 
{ const int pt = SX10_TEMP6 ; 
const int tempPt = pt + index ; 
placeArray [ tempPt ] = initPlace ; 
} 

index = index + chunk ; arraySize = arraySize - chunk ; /*UpdatableVariableDeclaration*/int pl = /* initPlace . next ( )  */ 0 ; 
/*UpdatableVariableDeclaration*/int whileCond = arraySize != zero ; 

while ( whileCond ) 
{ const int tailCond = chunk > arraySize ; 
if ( tailCond ) 
{ dSize = index + arraySize ; dSize = dSize - one ; const int ub = arraySize - one ; 
const int SX10_TEMP7 = 1 ; 
const int pointReg1 = ub + SX10_TEMP7 ; 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < pointReg1 ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int tempPt = pt + index ; 
placeArray [ tempPt ] = pl ; 
} 

arraySize = 0 ; } 
else 
{ dSize = index + chunk ; dSize = dSize - one ; const int ub = chunk - one ; 
const int SX10_TEMP9 = 1 ; 
const int pointReg1 = ub + SX10_TEMP9 ; 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < pointReg1 ; SX10_TEMP10 ++ ) 
{ const int pt = SX10_TEMP10 ; 
const int tempPt = pt + index ; 
placeArray [ tempPt ] = pl ; 
} 

index = index + chunk ; arraySize = arraySize - chunk ; } 


pl = /* pl . next ( )  */ 0 ; whileCond = arraySize != zero ; } 

/*Updatable ARRAY*/ int * const SX10_TEMP11 = (int *)calloc(dReg,sizeof( int )); 
for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < dReg ; SX10_TEMP12 ++ ) 
{ const int pt = SX10_TEMP12 ; 
const int tempPl = placeArray [ pt ] 
; 
SX10_TEMP11 [ pt ] = tempPl ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP11 ; 
struct Dist pointDist1  ; 
Dist_Dist( &pointDist1/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist1 retDist  ; 
Dist1_Dist1( &retDist/*Assignment*/, r , pointDist1 ) ; 
return retDist ; 
} 

Dist1 /*static*/unionDist1 (  struct Dist1 const d1 ,  struct Dist1 const d2 ) 
{ /*UpdatableVariableDeclaration*/int index1 = 0 ; 
/*UpdatableVariableDeclaration*/int index2 = 0 ; 
/*UpdatableVariableDeclaration*/int index = 0 ; 
const int zero = 0 ; 
const int one = 1 ; 
struct Region1 reg1 = d1 .dReg ; 
struct Region1 reg2 = d2 .dReg ; 
const int regType1 = reg1 .regType ; 
const int regType2 = reg2 .regType ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point1 * tempArr1 = reg1 .pointArray ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point1 * tempArr2 = reg2 .pointArray ; 
if ( regType1 ) 
{ const int stride1 = 1 ; 
const int dim1 = reg1 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg1 .low0 ; 
const int regSize1 = reg1 .regSize ; 
const int sizeMinusOne = regSize1 - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP1 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 retPoint  ; 
Point1_Point1( &retPoint/*Assignment*/, f1 ) ; 
SX10_TEMP1 [ pt ] = retPoint ; 
} 

tempArr1 = SX10_TEMP1 ; } 

if ( regType2 ) 
{ const int stride1 = 1 ; 
const int dim1 = reg2 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg2 .low0 ; 
const int regSize2 = reg2 .regSize ; 
const int sizeMinusOne = regSize2 - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP4 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int pt = SX10_TEMP5 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point1 retPoint  ; 
Point1_Point1( &retPoint/*Assignment*/, f1 ) ; 
SX10_TEMP4 [ pt ] = retPoint ; 
} 

tempArr2 = SX10_TEMP4 ; } 

/*Updatable ARRAY*/ struct Point1 * const arr1 = tempArr1 ; 
/*Updatable ARRAY*/ struct Point1 * const arr2 = tempArr2 ; 
struct Dist dDist1 = d1 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray1 = dDist1 .placeArray ; 
struct Dist dDist2 = d2 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray2 = dDist2 .placeArray ; 
const int size1 = reg1 .regSize ; 
const int size2 = reg2 .regSize ; 
const int rSize = size1 + size2 ; 
const int sizeMinusOne = rSize - one ; 
const int SX10_TEMP6 = 1 ; 
const int tempReg = sizeMinusOne + SX10_TEMP6 ; 
const int SX10_TEMP7 = 1 ; 
const int tempDist = sizeMinusOne + SX10_TEMP7 ; 
/*Updatable ARRAY*/ struct Point1 * const tempArr = (Point1 *)calloc(tempDist,sizeof( Point1 )); 
/*Updatable ARRAY*/ int * const placeArray = (int *)calloc(tempDist,sizeof( int )); 
/*UpdatableVariableDeclaration*/int cond1 = index1 < size1 ; 
/*UpdatableVariableDeclaration*/int cond2 = index2 < size2 ; 
/*UpdatableVariableDeclaration*/int cond = cond1 && cond2 ; 

while ( cond ) 
{ struct Point1 p1 = arr1 [ index1 ] 
; 
struct Point1 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint1 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ const char * errMsg = "Non-disjoint region in a disjoint union" ; 
fprintf(stderr, errMsg ) ; 
exit(EXIT_FAILURE);
} 

if ( lt ) 
{ tempArr [ index ] = p1 ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; } 
else 
{ tempArr [ index ] = p2 ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; } 


index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ struct Point1 tempArrPt = arr1 [ index1 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ struct Point1 tempArrPt = arr2 [ index2 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP10 = (Point1 *)calloc(tempReg,sizeof( Point1 )); 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < tempReg ; SX10_TEMP11 ++ ) 
{ const int pt = SX10_TEMP11 ; 
struct Point1 retPoint = tempArr [ pt ] 
; 
SX10_TEMP10 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point1 * const arr = SX10_TEMP10 ; 
struct Region1 unionReg  ; 
Region1_Region1_2( &unionReg/*Assignment*/, arr , rSize ) ; 
/*Updatable ARRAY*/ int * const SX10_TEMP12 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < tempReg ; SX10_TEMP13 ++ ) 
{ const int pt = SX10_TEMP13 ; 
const int tempPl = placeArray [ pt ] 
; 
SX10_TEMP12 [ pt ] = tempPl ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP12 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist1 unionDist  ; 
Dist1_Dist1( &unionDist/*Assignment*/, unionReg , pointDist ) ; 
return unionDist ; 
} 

Dist2 /*static*/unionDist2 (  struct Dist2 const d1 ,  struct Dist2 const d2 ) 
{ /*UpdatableVariableDeclaration*/int index1 = 0 ; 
/*UpdatableVariableDeclaration*/int index2 = 0 ; 
/*UpdatableVariableDeclaration*/int index = 0 ; 
const int zero = 0 ; 
const int one = 1 ; 
struct Region2 reg1 = d1 .dReg ; 
struct Region2 reg2 = d2 .dReg ; 
const int regType1 = reg1 .regType ; 
const int regType2 = reg2 .regType ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * tempArr1 = reg1 .pointArray ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point2 * tempArr2 = reg2 .pointArray ; 
if ( regType1 ) 
{ const int stride2 = 1 ; 
const int dim2 = reg1 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg1 .low1 ; 
const int dim1 = reg1 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg1 .low0 ; 
const int regSize1 = reg1 .regSize ; 
const int sizeMinusOne = regSize1 - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP1 [ pt ] = retPoint ; 
} 

tempArr1 = SX10_TEMP1 ; } 

if ( regType2 ) 
{ const int stride2 = 1 ; 
const int dim2 = reg2 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg2 .low1 ; 
const int dim1 = reg2 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg2 .low0 ; 
const int regSize2 = reg2 .regSize ; 
const int sizeMinusOne = regSize2 - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int pt = SX10_TEMP5 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP4 [ pt ] = retPoint ; 
} 

tempArr2 = SX10_TEMP4 ; } 

/*Updatable ARRAY*/ struct Point2 * const arr1 = tempArr1 ; 
/*Updatable ARRAY*/ struct Point2 * const arr2 = tempArr2 ; 
struct Dist dDist1 = d1 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray1 = dDist1 .placeArray ; 
struct Dist dDist2 = d2 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray2 = dDist2 .placeArray ; 
const int size1 = reg1 .regSize ; 
const int size2 = reg2 .regSize ; 
const int rSize = size1 + size2 ; 
const int sizeMinusOne = rSize - one ; 
const int SX10_TEMP6 = 1 ; 
const int tempReg = sizeMinusOne + SX10_TEMP6 ; 
const int SX10_TEMP7 = 1 ; 
const int tempDist = sizeMinusOne + SX10_TEMP7 ; 
/*Updatable ARRAY*/ struct Point2 * const tempArr = (Point2 *)calloc(tempDist,sizeof( Point2 )); 
/*Updatable ARRAY*/ int * const placeArray = (int *)calloc(tempDist,sizeof( int )); 
/*UpdatableVariableDeclaration*/int cond1 = index1 < size1 ; 
/*UpdatableVariableDeclaration*/int cond2 = index2 < size2 ; 
/*UpdatableVariableDeclaration*/int cond = cond1 && cond2 ; 

while ( cond ) 
{ struct Point2 p1 = arr1 [ index1 ] 
; 
struct Point2 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint2 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ const char * errMsg = "Non-disjoint region in a disjoint union" ; 
fprintf(stderr, errMsg ) ; 
exit(EXIT_FAILURE);
} 

if ( lt ) 
{ tempArr [ index ] = p1 ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; } 
else 
{ tempArr [ index ] = p2 ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; } 


index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ struct Point2 tempArrPt = arr1 [ index1 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ struct Point2 tempArrPt = arr2 [ index2 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP10 = (Point2 *)calloc(tempReg,sizeof( Point2 )); 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < tempReg ; SX10_TEMP11 ++ ) 
{ const int pt = SX10_TEMP11 ; 
struct Point2 retPoint = tempArr [ pt ] 
; 
SX10_TEMP10 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const arr = SX10_TEMP10 ; 
struct Region2 unionReg  ; 
Region2_Region2_2( &unionReg/*Assignment*/, arr , rSize ) ; 
/*Updatable ARRAY*/ int * const SX10_TEMP12 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < tempReg ; SX10_TEMP13 ++ ) 
{ const int pt = SX10_TEMP13 ; 
const int tempPl = placeArray [ pt ] 
; 
SX10_TEMP12 [ pt ] = tempPl ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP12 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist2 unionDist  ; 
Dist2_Dist2( &unionDist/*Assignment*/, unionReg , pointDist ) ; 
return unionDist ; 
} 

Dist3 /*static*/unionDist3 (  struct Dist3 const d1 ,  struct Dist3 const d2 ) 
{ /*UpdatableVariableDeclaration*/int index1 = 0 ; 
/*UpdatableVariableDeclaration*/int index2 = 0 ; 
/*UpdatableVariableDeclaration*/int index = 0 ; 
const int zero = 0 ; 
const int one = 1 ; 
struct Region3 reg1 = d1 .dReg ; 
struct Region3 reg2 = d2 .dReg ; 
const int regType1 = reg1 .regType ; 
const int regType2 = reg2 .regType ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point3 * tempArr1 = reg1 .pointArray ; 
/*UpdatableVariableDeclaration*//*Updatable ARRAY*/ struct Point3 * tempArr2 = reg2 .pointArray ; 
if ( regType1 ) 
{ const int stride3 = 1 ; 
const int dim3 = reg1 .dim2 ; 
const int stride2 = stride3 * dim3 ; 
const int regLow3 = reg1 .low2 ; 
const int dim2 = reg1 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg1 .low1 ; 
const int dim1 = reg1 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg1 .low0 ; 
const int regSize1 = reg1 .regSize ; 
const int sizeMinusOne = regSize1 - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP1 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int pt = SX10_TEMP2 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f3 = p / stride3 ; 
f3 = f3 % dim3 ; f3 = f3 + regLow3 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point3 retPoint  ; 
Point3_Point3( &retPoint/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP1 [ pt ] = retPoint ; 
} 

tempArr1 = SX10_TEMP1 ; } 

if ( regType2 ) 
{ const int stride3 = 1 ; 
const int dim3 = reg2 .dim2 ; 
const int stride2 = stride3 * dim3 ; 
const int regLow3 = reg2 .low2 ; 
const int dim2 = reg2 .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg2 .low1 ; 
const int dim1 = reg2 .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg2 .low0 ; 
const int regSize2 = reg2 .regSize ; 
const int sizeMinusOne = regSize2 - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = sizeMinusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP4 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int pt = SX10_TEMP5 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f3 = p / stride3 ; 
f3 = f3 % dim3 ; f3 = f3 + regLow3 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point3 retPoint  ; 
Point3_Point3( &retPoint/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP4 [ pt ] = retPoint ; 
} 

tempArr2 = SX10_TEMP4 ; } 

/*Updatable ARRAY*/ struct Point3 * const arr1 = tempArr1 ; 
/*Updatable ARRAY*/ struct Point3 * const arr2 = tempArr2 ; 
struct Dist dDist1 = d1 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray1 = dDist1 .placeArray ; 
struct Dist dDist2 = d2 .dDist ; 
/*Updatable ARRAY*/ int * const dPlaceArray2 = dDist2 .placeArray ; 
const int size1 = reg1 .regSize ; 
const int size2 = reg2 .regSize ; 
const int rSize = size1 + size2 ; 
const int sizeMinusOne = rSize - one ; 
const int SX10_TEMP6 = 1 ; 
const int tempReg = sizeMinusOne + SX10_TEMP6 ; 
const int SX10_TEMP7 = 1 ; 
const int tempDist = sizeMinusOne + SX10_TEMP7 ; 
/*Updatable ARRAY*/ struct Point3 * const tempArr = (Point3 *)calloc(tempDist,sizeof( Point3 )); 
/*Updatable ARRAY*/ int * const placeArray = (int *)calloc(tempDist,sizeof( int )); 
/*UpdatableVariableDeclaration*/int cond1 = index1 < size1 ; 
/*UpdatableVariableDeclaration*/int cond2 = index2 < size2 ; 
/*UpdatableVariableDeclaration*/int cond = cond1 && cond2 ; 

while ( cond ) 
{ struct Point3 p1 = arr1 [ index1 ] 
; 
struct Point3 p2 = arr2 [ index2 ] 
; 
const int pointCompare = comparePoint3 ( p1 , p2 ) ; 
const int eq = pointCompare == zero ; 
const int lt = pointCompare == one ; 
if ( eq ) 
{ const char * errMsg = "Non-disjoint region in a disjoint union" ; 
fprintf(stderr, errMsg ) ; 
exit(EXIT_FAILURE);
} 

if ( lt ) 
{ tempArr [ index ] = p1 ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; } 
else 
{ tempArr [ index ] = p2 ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; } 


index = index + one ; cond1 = index1 < size1 ; cond2 = index2 < size2 ; cond = cond1 && cond2 ; } 

cond1 = index1 < size1 ; 
while ( cond1 ) 
{ struct Point3 tempArrPt = arr1 [ index1 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray1 [ index1 ] 
; 
placeArray [ index ] = pPlace ; 
index1 = index1 + one ; index = index + one ; cond1 = index1 < size1 ; } 

cond2 = index2 < size2 ; 
while ( cond2 ) 
{ struct Point3 tempArrPt = arr2 [ index2 ] 
; 
tempArr [ index ] = tempArrPt ; 
const int pPlace = dPlaceArray2 [ index2 ] 
; 
placeArray [ index ] = pPlace ; 
index2 = index2 + one ; index = index + one ; cond2 = index2 < size2 ; } 

/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP10 = (Point3 *)calloc(tempReg,sizeof( Point3 )); 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < tempReg ; SX10_TEMP11 ++ ) 
{ const int pt = SX10_TEMP11 ; 
struct Point3 retPoint = tempArr [ pt ] 
; 
SX10_TEMP10 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point3 * const arr = SX10_TEMP10 ; 
struct Region3 unionReg  ; 
Region3_Region3_2( &unionReg/*Assignment*/, arr , rSize ) ; 
/*Updatable ARRAY*/ int * const SX10_TEMP12 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP13 = 0 ; SX10_TEMP13 < tempReg ; SX10_TEMP13 ++ ) 
{ const int pt = SX10_TEMP13 ; 
const int tempPl = placeArray [ pt ] 
; 
SX10_TEMP12 [ pt ] = tempPl ; 
} 

/*Updatable ARRAY*/ int * const vPlaceArray = SX10_TEMP12 ; 
struct Dist pointDist  ; 
Dist_Dist( &pointDist/*Assignment*/, vPlaceArray , rSize ) ; 
struct Dist3 unionDist  ; 
Dist3_Dist3( &unionDist/*Assignment*/, unionReg , pointDist ) ; 
return unionDist ; 
} 

Point3 /*static*/regionOrdinalPoint3 (  struct Region3 const reg , const int ordl ) 
{ const int regType = reg .regType ; 
if ( regType ) 
{ struct Point3 pt = regionOrdinalPointRegular3 ( reg , ordl ) ; 
return pt ; 
} 

struct Point3 pt = regionOrdinalPointArbitrary3 ( reg , ordl ) ; 
return pt ; 
} 

Point3 /*static*/regionOrdinalPointRegular3 (  struct Region3 const reg , const int ordl ) 
{ const int stride3 = 1 ; 
const int dim3 = reg .dim2 ; 
const int stride2 = stride3 * dim3 ; 
const int regLow3 = reg .low2 ; 
const int dim2 = reg .dim1 ; 
const int stride1 = stride2 * dim2 ; 
const int regLow2 = reg .low1 ; 
const int dim1 = reg .dim0 ; 
const int stride0 = stride1 * dim1 ; 
const int regLow1 = reg .low0 ; 
/*UpdatableVariableDeclaration*/int f3 = ordl / stride3 ; 
f3 = f3 % dim3 ; f3 = f3 + regLow3 ; /*UpdatableVariableDeclaration*/int f2 = ordl / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + regLow2 ; /*UpdatableVariableDeclaration*/int f1 = ordl / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + regLow1 ; struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, f1 , f2 , f3 ) ; 
return pt ; 
} 

Point3 /*static*/regionOrdinalPointArbitrary3 (  struct Region3 const reg , const int ordl ) 
{ /*Updatable ARRAY*/ struct Point3 * const pointArray = reg .pointArray ; 
struct Point3 pt = pointArray [ ordl ] 
; 
return pt ; 
} 

void /*static*/getCyclic ( /*Updatable ARRAY*/ int * const placeArray , const int arraySize , const int initPlace , const int blockSize ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int N = arraySize ; 
/*UpdatableVariableDeclaration*/int chunk = blockSize ; 
const int ifCond = blockSize > N ; 
if ( ifCond ) 
{ chunk = N ; } 

/*UpdatableVariableDeclaration*/int index = 0 ; 
/*UpdatableVariableDeclaration*/int dSize = index + chunk ; 
dSize = dSize - one ; const int SX10_TEMP0 = 1 ; 
const int pointReg = dSize + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < pointReg ; SX10_TEMP1 ++ ) 
{ const int p = SX10_TEMP1 ; 
placeArray [ p ] = initPlace ; 
} 

index = index + chunk ; N = N - chunk ; /*UpdatableVariableDeclaration*/int pl = /* initPlace . next ( )  */ 0 ; 
/*UpdatableVariableDeclaration*/int whileCond = N != zero ; 

while ( whileCond ) 
{ const int tailCond = chunk > N ; 
if ( tailCond ) 
{ dSize = index + N ; dSize = dSize - one ; const int ub = N - one ; 
const int SX10_TEMP2 = 1 ; 
const int pointReg1 = ub + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < pointReg1 ; SX10_TEMP3 ++ ) 
{ const int p = SX10_TEMP3 ; 
const int tempPt = p + index ; 
placeArray [ tempPt ] = pl ; 
} 

N = 0 ; } 
else 
{ dSize = index + chunk ; dSize = dSize - one ; const int ub = chunk - one ; 
const int SX10_TEMP4 = 1 ; 
const int pointReg1 = ub + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < pointReg1 ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
const int tempPt = p + index ; 
placeArray [ tempPt ] = pl ; 
} 

index = index + chunk ; N = N - chunk ; } 


pl = /* pl . next ( )  */ 0 ; whileCond = N != zero ; } 

} 

void /*static*/setRefArrayValue1boolean (  struct booleanRefArray1 const array , const int index , const int val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist1 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct booleanStub * const contents = array .contents ; 
struct booleanStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

int /*static*/searchPointInRegion2 (  struct Region2 const r ,  struct Point2 const target ) 
{ const int regType = r .regType ; 
if ( regType ) 
{ const int constantSearch = constantSearchRegion2 ( r , target ) ; 
return constantSearch ; 
} 

const int binarySearch = binarySearchRegion2 ( r , target ) ; 
return binarySearch ; 
} 

int /*static*/searchPointInRegion1 (  struct Region1 const r ,  struct Point1 const target ) 
{ const int regType = r .regType ; 
if ( regType ) 
{ const int constantSearch = constantSearchRegion1 ( r , target ) ; 
return constantSearch ; 
} 

const int binarySearch = binarySearchRegion1 ( r , target ) ; 
return binarySearch ; 
} 

int /*static*/searchPointInRegion3 (  struct Region3 const r ,  struct Point3 const target ) 
{ const int regType = r .regType ; 
if ( regType ) 
{ const int constantSearch = constantSearchRegion3 ( r , target ) ; 
return constantSearch ; 
} 

const int binarySearch = binarySearchRegion3 ( r , target ) ; 
return binarySearch ; 
} 

void /*static*/setRefArrayValue2int (  struct intRefArray2 const array , const int index , const int val ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct intStub * const contents = array .contents ; 
struct intStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
localArray [ localIndex ] = val ; 
} 

Particle /*static*/getRefArrayValue2Particle (  struct ParticleRefArray2 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct ParticleStub * const contents = array .contents ; 
struct ParticleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ struct Particle * const localArray = indexStub .localArray ; 
struct Particle returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

double /*static*/getRefArrayValue2double (  struct doubleRefArray2 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct doubleStub * const contents = array .contents ; 
struct doubleStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ double * const localArray = indexStub .localArray ; 
const double returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

/*Updatable ARRAY*/ int * /*static*/initDist ( /*Updatable ARRAY*/ int * const tempArr , const int tempReg ) 
{ /*Updatable ARRAY*/ int * const SX10_TEMP0 = (int *)calloc(tempReg,sizeof( int )); 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < tempReg ; SX10_TEMP1 ++ ) 
{ const int p = SX10_TEMP1 ; 
const int tempInt = tempArr [ p ] 
; 
SX10_TEMP0 [ p ] = tempInt ; 
} 

/*Updatable ARRAY*/ int * const vTemp = SX10_TEMP0 ; 
return vTemp ; 
} 

int /*static*/getRefArrayValue2int (  struct intRefArray2 const array , const int index ) 
{ const int pl = /* here  */ 0 ; 
const int placeIndex = /* pl . id  */ 0 ; 
struct Dist2 dArray = array .distValue ; 
struct Dist dDist = dArray .dDist ; 
/*Updatable ARRAY*/ int * const runSum = dDist .runningSum ; 
const int localIndex = runSum [ index ] 
; 
/*Updatable ARRAY*/ struct intStub * const contents = array .contents ; 
struct intStub indexStub = contents [ placeIndex ] 
; 
/*Updatable ARRAY*/ int * const localArray = indexStub .localArray ; 
const int returnValue = localArray [ localIndex ] 
; 
return returnValue ; 
} 

Region3 /*static*/createNewRegion3RRR ( const int v1_0 , const int v1_1 , const int v2_0 , const int v2_1 , const int v3_0 , const int v3_1 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = 1 ; 
const int tempBool2 = 1 ; 
const int tempBool3 = 1 ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; regType = regType && tempBool3 ; const int l1 = v1_1 - v1_0 ; 
const int dim1 = l1 + one ; 
const int l2 = v2_1 - v2_0 ; 
const int dim2 = l2 + one ; 
const int l3 = v3_1 - v3_0 ; 
const int dim3 = l3 + one ; 
const int stride3 = 1 ; 
const int stride2 = stride3 * dim3 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP1 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP1 ; 
struct Region3 retRegEmpty  ; 
Region3_Region3_8( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP4 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP4 ; 
struct Region3 retRegRegular  ; 
Region3_Region3_8( &retRegRegular/*Assignment*/, ptArray , stride0 , v1_0 , dim1 , v2_0 , dim2 , v3_0 , dim3 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP7 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + v1_0 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + v2_0 ; /*UpdatableVariableDeclaration*/int f3 = p / stride3 ; 
f3 = f3 % dim3 ; f3 = f3 + v3_0 ; struct Point3 retPoint  ; 
Point3_Point3( &retPoint/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP7 ; 
struct Region3 retReg  ; 
Region3_Region3_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region2 /*static*/createNewRegion2RR ( const int v1_0 , const int v1_1 , const int v2_0 , const int v2_1 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = 1 ; 
const int tempBool2 = 1 ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; const int l1 = v1_1 - v1_0 ; 
const int dim1 = l1 + one ; 
const int l2 = v2_1 - v2_0 ; 
const int dim2 = l2 + one ; 
const int stride2 = 1 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP1 ; 
struct Region2 retRegEmpty  ; 
Region2_Region2_6( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP4 ; 
struct Region2 retRegRegular  ; 
Region2_Region2_6( &retRegRegular/*Assignment*/, ptArray , stride0 , v1_0 , dim1 , v2_0 , dim2 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + v1_0 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + v2_0 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP7 ; 
struct Region2 retReg  ; 
Region2_Region2_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region1 /*static*/createNewRegion1R ( const int v1_0 , const int v1_1 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = 1 ; 
regType = regType && tempBool1 ; const int l1 = v1_1 - v1_0 ; 
const int dim1 = l1 + one ; 
const int stride1 = 1 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP1 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point1 pt  ; 
Point1_Point1( &pt/*Assignment*/, zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const ptArray = SX10_TEMP1 ; 
struct Region1 retRegEmpty  ; 
Region1_Region1_4( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP4 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point1 pt  ; 
Point1_Point1( &pt/*Assignment*/, zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point1 * const ptArray = SX10_TEMP4 ; 
struct Region1 retRegRegular  ; 
Region1_Region1_4( &retRegRegular/*Assignment*/, ptArray , stride0 , v1_0 , dim1 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point1 * const SX10_TEMP7 = (Point1 *)calloc(regArr,sizeof( Point1 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + v1_0 ; struct Point1 retPoint  ; 
Point1_Point1( &retPoint/*Assignment*/, f1 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point1 * const ptArray = SX10_TEMP7 ; 
struct Region1 retReg  ; 
Region1_Region1_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region3 /*static*/createNewRegion3RRA ( const int v1_0 , const int v1_1 , const int v2_0 , const int v2_1 ,  struct Region1 const v3_0 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = 1 ; 
const int tempBool2 = 1 ; 
const int tempBool3 = v3_0 .regType ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; regType = regType && tempBool3 ; const int l1 = v1_1 - v1_0 ; 
const int dim1 = l1 + one ; 
const int l2 = v2_1 - v2_0 ; 
const int dim2 = l2 + one ; 
const int l3 = v3_0 .regSize ; 
const int dim3 = l3 ; 
const int stride3 = 1 ; 
const int stride2 = stride3 * dim3 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP1 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP1 ; 
struct Region3 retRegEmpty  ; 
Region3_Region3_8( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int low3 = v3_0 .low0 ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP4 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP4 ; 
struct Region3 retRegRegular  ; 
Region3_Region3_8( &retRegRegular/*Assignment*/, ptArray , stride0 , v1_0 , dim1 , v2_0 , dim2 , low3 , dim3 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP7 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + v1_0 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + v2_0 ; /*UpdatableVariableDeclaration*/int f3 = p / stride3 ; 
f3 = f3 % dim3 ; if ( tempBool3 ) 
{ const int low3 = v3_0 .low0 ; 
f3 = f3 + low3 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray3 = v3_0 .pointArray ; 
struct Point1 rArrayPt3 = rArray3 [ f3 ] 
; 
f3 = rArrayPt3 .f0 ; } 


struct Point3 retPoint  ; 
Point3_Point3( &retPoint/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP7 ; 
struct Region3 retReg  ; 
Region3_Region3_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region2 /*static*/createNewRegion2RA ( const int v1_0 , const int v1_1 ,  struct Region1 const v2_0 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = 1 ; 
const int tempBool2 = v2_0 .regType ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; const int l1 = v1_1 - v1_0 ; 
const int dim1 = l1 + one ; 
const int l2 = v2_0 .regSize ; 
const int dim2 = l2 ; 
const int stride2 = 1 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP1 ; 
struct Region2 retRegEmpty  ; 
Region2_Region2_6( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int low2 = v2_0 .low0 ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP4 ; 
struct Region2 retRegRegular  ; 
Region2_Region2_6( &retRegRegular/*Assignment*/, ptArray , stride0 , v1_0 , dim1 , low2 , dim2 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; f1 = f1 + v1_0 ; /*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; if ( tempBool2 ) 
{ const int low2 = v2_0 .low0 ; 
f2 = f2 + low2 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray2 = v2_0 .pointArray ; 
struct Point1 rArrayPt2 = rArray2 [ f2 ] 
; 
f2 = rArrayPt2 .f0 ; } 


struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP7 ; 
struct Region2 retReg  ; 
Region2_Region2_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region2 /*static*/createNewRegion2AA (  struct Region1 const v1_0 ,  struct Region1 const v2_0 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = v1_0 .regType ; 
const int tempBool2 = v2_0 .regType ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; const int l1 = v1_0 .regSize ; 
const int dim1 = l1 ; 
const int l2 = v2_0 .regSize ; 
const int dim2 = l2 ; 
const int stride2 = 1 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP1 ; 
struct Region2 retRegEmpty  ; 
Region2_Region2_6( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int low1 = v1_0 .low0 ; 
const int low2 = v2_0 .low0 ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP4 ; 
struct Region2 retRegRegular  ; 
Region2_Region2_6( &retRegRegular/*Assignment*/, ptArray , stride0 , low1 , dim1 , low2 , dim2 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; if ( tempBool1 ) 
{ const int low1 = v1_0 .low0 ; 
f1 = f1 + low1 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray1 = v1_0 .pointArray ; 
struct Point1 rArrayPt1 = rArray1 [ f1 ] 
; 
f1 = rArrayPt1 .f0 ; } 


/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; if ( tempBool2 ) 
{ const int low2 = v2_0 .low0 ; 
f2 = f2 + low2 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray2 = v2_0 .pointArray ; 
struct Point1 rArrayPt2 = rArray2 [ f2 ] 
; 
f2 = rArrayPt2 .f0 ; } 


struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP7 ; 
struct Region2 retReg  ; 
Region2_Region2_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region2 /*static*/createNewRegion2AR (  struct Region1 const v1_0 , const int v2_0 , const int v2_1 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = v1_0 .regType ; 
const int tempBool2 = 1 ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; const int l1 = v1_0 .regSize ; 
const int dim1 = l1 ; 
const int l2 = v2_1 - v2_0 ; 
const int dim2 = l2 + one ; 
const int stride2 = 1 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP1 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP1 ; 
struct Region2 retRegEmpty  ; 
Region2_Region2_6( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int low1 = v1_0 .low0 ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP4 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point2 pt  ; 
Point2_Point2( &pt/*Assignment*/, zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP4 ; 
struct Region2 retRegRegular  ; 
Region2_Region2_6( &retRegRegular/*Assignment*/, ptArray , stride0 , low1 , dim1 , v2_0 , dim2 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point2 * const SX10_TEMP7 = (Point2 *)calloc(regArr,sizeof( Point2 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; if ( tempBool1 ) 
{ const int low1 = v1_0 .low0 ; 
f1 = f1 + low1 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray1 = v1_0 .pointArray ; 
struct Point1 rArrayPt1 = rArray1 [ f1 ] 
; 
f1 = rArrayPt1 .f0 ; } 


/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; f2 = f2 + v2_0 ; struct Point2 retPoint  ; 
Point2_Point2( &retPoint/*Assignment*/, f1 , f2 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point2 * const ptArray = SX10_TEMP7 ; 
struct Region2 retReg  ; 
Region2_Region2_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 

Region3 /*static*/createNewRegion3AAA (  struct Region1 const v1_0 ,  struct Region1 const v2_0 ,  struct Region1 const v3_0 ) 
{ const int zero = 0 ; 
const int one = 1 ; 
/*UpdatableVariableDeclaration*/int regType = 1 ; 
const int tempBool1 = v1_0 .regType ; 
const int tempBool2 = v2_0 .regType ; 
const int tempBool3 = v3_0 .regType ; 
regType = regType && tempBool1 ; regType = regType && tempBool2 ; regType = regType && tempBool3 ; const int l1 = v1_0 .regSize ; 
const int dim1 = l1 ; 
const int l2 = v2_0 .regSize ; 
const int dim2 = l2 ; 
const int l3 = v3_0 .regSize ; 
const int dim3 = l3 ; 
const int stride3 = 1 ; 
const int stride2 = stride3 * dim3 ; 
const int stride1 = stride2 * dim2 ; 
const int stride0 = stride1 * dim1 ; 
const int rSize = stride0 - one ; 
const int cond = stride0 <= zero ; 
if ( cond ) 
{ const int minusOne = zero - one ; 
const int SX10_TEMP0 = 1 ; 
const int regArr = minusOne + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP1 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < regArr ; SX10_TEMP2 ++ ) 
{ const int p = SX10_TEMP2 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP1 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP1 ; 
struct Region3 retRegEmpty  ; 
Region3_Region3_8( &retRegEmpty/*Assignment*/, ptArray , stride0 , zero , zero , zero , zero , zero , zero ) ; 
return retRegEmpty ; 
} 

if ( regType ) 
{ const int minusOne = zero - one ; 
const int low1 = v1_0 .low0 ; 
const int low2 = v2_0 .low0 ; 
const int low3 = v3_0 .low0 ; 
const int SX10_TEMP3 = 1 ; 
const int regArr = minusOne + SX10_TEMP3 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP4 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < regArr ; SX10_TEMP5 ++ ) 
{ const int p = SX10_TEMP5 ; 
struct Point3 pt  ; 
Point3_Point3( &pt/*Assignment*/, zero , zero , zero ) ; 
SX10_TEMP4 [ p ] = pt ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP4 ; 
struct Region3 retRegRegular  ; 
Region3_Region3_8( &retRegRegular/*Assignment*/, ptArray , stride0 , low1 , dim1 , low2 , dim2 , low3 , dim3 ) ; 
return retRegRegular ; 
} 
else 
{ const int SX10_TEMP6 = 1 ; 
const int regArr = rSize + SX10_TEMP6 ; 
/*Updatable ARRAY*/ struct Point3 * const SX10_TEMP7 = (Point3 *)calloc(regArr,sizeof( Point3 )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < regArr ; SX10_TEMP8 ++ ) 
{ const int pt = SX10_TEMP8 ; 
const int p = pt ; 
/*UpdatableVariableDeclaration*/int f1 = p / stride1 ; 
f1 = f1 % dim1 ; if ( tempBool1 ) 
{ const int low1 = v1_0 .low0 ; 
f1 = f1 + low1 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray1 = v1_0 .pointArray ; 
struct Point1 rArrayPt1 = rArray1 [ f1 ] 
; 
f1 = rArrayPt1 .f0 ; } 


/*UpdatableVariableDeclaration*/int f2 = p / stride2 ; 
f2 = f2 % dim2 ; if ( tempBool2 ) 
{ const int low2 = v2_0 .low0 ; 
f2 = f2 + low2 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray2 = v2_0 .pointArray ; 
struct Point1 rArrayPt2 = rArray2 [ f2 ] 
; 
f2 = rArrayPt2 .f0 ; } 


/*UpdatableVariableDeclaration*/int f3 = p / stride3 ; 
f3 = f3 % dim3 ; if ( tempBool3 ) 
{ const int low3 = v3_0 .low0 ; 
f3 = f3 + low3 ; } 
else 
{ /*Updatable ARRAY*/ struct Point1 * const rArray3 = v3_0 .pointArray ; 
struct Point1 rArrayPt3 = rArray3 [ f3 ] 
; 
f3 = rArrayPt3 .f0 ; } 


struct Point3 retPoint  ; 
Point3_Point3( &retPoint/*Assignment*/, f1 , f2 , f3 ) ; 
SX10_TEMP7 [ pt ] = retPoint ; 
} 

/*Updatable ARRAY*/ struct Point3 * const ptArray = SX10_TEMP7 ; 
struct Region3 retReg  ; 
Region3_Region3_2( &retReg/*Assignment*/, ptArray , stride0 ) ; 
return retReg ; 
} 


} 


ArrayUtil * ArrayUtil_ArrayUtil(struct ArrayUtil * ArrayUtilTEMP){return ArrayUtilTEMP;}


Complex Complex_Complex ( struct Complex *ComplexTEMP, const double real , const double imag ) 
{ const double X10_TEMP2 = real ; 
ComplexTEMP->real = ( X10_TEMP2 ) ; 
const double X10_TEMP4 = imag ; 
ComplexTEMP->imag = ( X10_TEMP4 ) ; 

 return  *ComplexTEMP; 

} 

FourierTransform2D FourierTransform2D_FourierTransform2D ( struct FourierTransform2D *FourierTransform2DTEMP, const int nBits1 , const int nBits2 ) 
{ const int X10_TEMP2 = nBits1 ; 
FourierTransform2DTEMP->nBits1 = ( X10_TEMP2 ) ; 
const int X10_TEMP4 = nBits2 ; 
FourierTransform2DTEMP->nBits2 = ( X10_TEMP4 ) ; 
const int X10_TEMP6 = 1 ; 
const int X10_TEMP8 = nBits2 - X10_TEMP6 ; 
const int X10_TEMP10 = X10Util_maxInt ( nBits1 , X10_TEMP8 ) ; 
FourierTransform2DTEMP->maxBits = ( X10_TEMP10 ) ; 
const int X10_TEMP11 = 1 ; 
const int len1 = X10_TEMP11 << nBits1 ; 
const int X10_TEMP13 = 1 ; 
const int len2 = X10_TEMP13 << nBits2 ; 
FourierTransform2DTEMP->length1 = ( len1 ) ; 
FourierTransform2DTEMP->length2 = ( len2 ) ; 
const double X10_TEMP21 = 1.0; 
const int X10_TEMP17 = 2 ; 
const int X10_TEMP18 = X10_TEMP17 * len1 ; 
const int X10_TEMP20 = X10_TEMP18 * len2 ; 
const double X10_TEMP23 = X10_TEMP21 / X10_TEMP20 ; 
FourierTransform2DTEMP->invN = ( X10_TEMP23 ) ; 
struct intValArray1 X10_TEMP28 = FourierTransform2D_initBitReverse ( FourierTransform2DTEMP, nBits1 , nBits2 ) ; 
FourierTransform2DTEMP->tableBitReverse = ( X10_TEMP28 ) ; 
struct ComplexValArray1 X10_TEMP33 = FourierTransform2D_initSineCosine ( FourierTransform2DTEMP, len1 , len2 ) ; 
FourierTransform2DTEMP->tableSineCosine = ( X10_TEMP33 ) ; 

 return  *FourierTransform2DTEMP; 

} 
intValArray1 FourierTransform2D_initBitReverse ( struct FourierTransform2D *FourierTransform2DTEMP, const int nBits1 , const int nBits2 ) 
{ const int X10_TEMP1 = 1 ; 
const int X10_TEMP4 = nBits2 - X10_TEMP1 ; 
const int maxBits = X10Util_maxInt ( X10_TEMP4 , nBits1 ) ; 
const int X10_TEMP12 = 0 ; 
const int X10_TEMP7 = 1 ; 
const int X10_TEMP9 = X10_TEMP7 << maxBits ; 
const int X10_TEMP10 = 1 ; 
const int X10_TEMP13 = X10_TEMP9 - X10_TEMP10 ; 
struct Region1 r = createNewRegion1R ( X10_TEMP12 , X10_TEMP13 ) ; 
struct Region1 RX10_TEMP0 = r ; 
const int RX10_TEMP4 = r .regSize ; 
const int RX10_TEMP5 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 - RX10_TEMP5 ; 
const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP6 + SX10_TEMP0 ; 
/*Updatable ARRAY*/ int * const SX10_TEMP1 = (int *)calloc(RX10_TEMP3,sizeof( int )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < RX10_TEMP3 ; SX10_TEMP2 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP2 ; 
const int RX10_TEMP2 = RX10_TEMP1 ; 
struct Point1 i = regionOrdinalPoint1 ( RX10_TEMP0 , RX10_TEMP2 ) ; 
const int i0 = i .f0 ; 
const int X10_TEMP17 = 0x0000FFFF ; 
const int X10_TEMP19 = i0 & X10_TEMP17 ; 
const int X10_TEMP20 = 16 ; 
const int X10_TEMP22 = X10_TEMP19 << X10_TEMP20 ; 
const int X10_TEMP23 = 16 ; 
const int X10_TEMP25 = i0 >> X10_TEMP23 ; 
const int X10_TEMP26 = 0x0000FFFF ; 
const int X10_TEMP28 = X10_TEMP25 & X10_TEMP26 ; 
const int X10_TEMP30 = X10_TEMP22 | X10_TEMP28 ; 
const int i1 = X10_TEMP30 ; 
const int X10_TEMP32 = 0x00FF00FF ; 
const int X10_TEMP34 = i1 & X10_TEMP32 ; 
const int X10_TEMP35 = 8 ; 
const int X10_TEMP37 = X10_TEMP34 << X10_TEMP35 ; 
const int X10_TEMP38 = 8 ; 
const int X10_TEMP40 = i1 >> X10_TEMP38 ; 
const int X10_TEMP41 = 0x00FF00FF ; 
const int X10_TEMP43 = X10_TEMP40 & X10_TEMP41 ; 
const int X10_TEMP45 = X10_TEMP37 | X10_TEMP43 ; 
const int i2 = X10_TEMP45 ; 
const int X10_TEMP47 = 0x0F0F0F0F ; 
const int X10_TEMP49 = i2 & X10_TEMP47 ; 
const int X10_TEMP50 = 4 ; 
const int X10_TEMP52 = X10_TEMP49 << X10_TEMP50 ; 
const int X10_TEMP53 = 4 ; 
const int X10_TEMP55 = i2 >> X10_TEMP53 ; 
const int X10_TEMP56 = 0x0F0F0F0F ; 
const int X10_TEMP58 = X10_TEMP55 & X10_TEMP56 ; 
const int X10_TEMP60 = X10_TEMP52 | X10_TEMP58 ; 
const int i3 = X10_TEMP60 ; 
const int X10_TEMP62 = 0x33333333 ; 
const int X10_TEMP64 = i3 & X10_TEMP62 ; 
const int X10_TEMP65 = 2 ; 
const int X10_TEMP67 = X10_TEMP64 << X10_TEMP65 ; 
const int X10_TEMP68 = 2 ; 
const int X10_TEMP70 = i3 >> X10_TEMP68 ; 
const int X10_TEMP71 = 0x33333333 ; 
const int X10_TEMP73 = X10_TEMP70 & X10_TEMP71 ; 
const int X10_TEMP75 = X10_TEMP67 | X10_TEMP73 ; 
const int i4 = X10_TEMP75 ; 
const int X10_TEMP77 = 0x55555555 ; 
const int X10_TEMP79 = i4 & X10_TEMP77 ; 
const int X10_TEMP80 = 1 ; 
const int X10_TEMP82 = X10_TEMP79 << X10_TEMP80 ; 
const int X10_TEMP83 = 1 ; 
const int X10_TEMP85 = i4 >> X10_TEMP83 ; 
const int X10_TEMP86 = 0x55555555 ; 
const int X10_TEMP88 = X10_TEMP85 & X10_TEMP86 ; 
const int X10_TEMP90 = X10_TEMP82 | X10_TEMP88 ; 
const int i5 = X10_TEMP90 ; 
const int X10_TEMP92 = 8*sizeof(int); 
const int X10_TEMP94 = X10_TEMP92 - maxBits ; 
const int X10_TEMP96 = (((i5 >> X10_TEMP94) ) & ((2147483647 >> X10_TEMP94))); 
SX10_TEMP1 [ RX10_TEMP1 ] = X10_TEMP96 ; 
} 

/*Updatable ARRAY*/ int * const RX10_TEMP7 = SX10_TEMP1 ; 
struct intValArray1 RX10_TEMP8  ; 
intValArray1_intValArray1( &RX10_TEMP8/*Assignment*/, r , RX10_TEMP7 ) ; 
struct intValArray1 X10_TEMP97 = RX10_TEMP8 ; 
return X10_TEMP97 ; 
} 

ComplexValArray1 FourierTransform2D_initSineCosine ( struct FourierTransform2D *FourierTransform2DTEMP, const int length1 , const int length2 ) 
{ const int maxLength = X10Util_maxInt ( length1 , length2 ) ; 
const double PI2 = 6.28318530717959; 
const double k = PI2 / maxLength ; 
const int X10_TEMP12 = 0 ; 
const int X10_TEMP7 = 2 ; 
const int X10_TEMP9 = maxLength / X10_TEMP7 ; 
const int X10_TEMP10 = 1 ; 
const int X10_TEMP13 = X10_TEMP9 - X10_TEMP10 ; 
struct Region1 r = createNewRegion1R ( X10_TEMP12 , X10_TEMP13 ) ; 
struct Region1 RX10_TEMP0 = r ; 
const int RX10_TEMP4 = r .regSize ; 
const int RX10_TEMP5 = 1 ; 
const int RX10_TEMP6 = RX10_TEMP4 - RX10_TEMP5 ; 
const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP6 + SX10_TEMP0 ; 
/*Updatable ARRAY*/ struct Complex * const SX10_TEMP1 = (Complex *)calloc(RX10_TEMP3,sizeof( Complex )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < RX10_TEMP3 ; SX10_TEMP2 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP2 ; 
const int RX10_TEMP2 = RX10_TEMP1 ; 
struct Point1 i = regionOrdinalPoint1 ( RX10_TEMP0 , RX10_TEMP2 ) ; 
const int X10_TEMP16 = i .f0 ; 
const double theta = k * X10_TEMP16 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP24 = cos ( theta ) ; 
const double X10_TEMP21 = sin ( theta ) ; 
const int X10_TEMP22 = 0 ; 
/*UpdatableVariableDeclaration*/double X10_TEMP25 = X10_TEMP22 - X10_TEMP21 ; 
struct Complex X10_TEMP27  ; 
Complex_Complex( &X10_TEMP27/*Assignment*/, X10_TEMP24 , X10_TEMP25 ) ; 
SX10_TEMP1 [ RX10_TEMP1 ] = X10_TEMP27 ; 
} 

/*Updatable ARRAY*/ struct Complex * const RX10_TEMP7 = SX10_TEMP1 ; 
struct ComplexValArray1 RX10_TEMP8  ; 
ComplexValArray1_ComplexValArray1( &RX10_TEMP8/*Assignment*/, r , RX10_TEMP7 ) ; 
struct ComplexValArray1 X10_TEMP28 = RX10_TEMP8 ; 
return X10_TEMP28 ; 
} 


LinearESOpenPIC2D *LinearESOpenPIC2D_LinearESOpenPIC2D ( struct LinearESOpenPIC2D *LinearESOpenPIC2DTEMP) 
{ struct Random * X10_TEMP2 = (struct Random  *)  GC_MALLOC(sizeof(struct Random ));  
Random_Random( X10_TEMP2/*Assignment*/) ; 
LinearESOpenPIC2DTEMP->r = ( X10_TEMP2 ) ; 
const double X10_TEMP3 = /*program*/_LinearESOpenPIC2D_XLENGTH ; 
const double X10_TEMP4 = 2.0; 
const double X10_TEMP6 = X10_TEMP3 - X10_TEMP4 ; 
const double X10_TEMP7 = /*program*/_LinearESOpenPIC2D_YLENGTH ; 
const double X10_TEMP8 = 2.0; 
const double X10_TEMP10 = X10_TEMP7 - X10_TEMP8 ; 
const double X10_TEMP12 = X10_TEMP6 * X10_TEMP10 ; 
const int X10_TEMP13 = /*program*/_LinearESOpenPIC2D_NPARTICLES ; 
/*UpdatableVariableDeclaration*/double affp = X10_TEMP12 / X10_TEMP13 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP18 = /*program*/_LinearESOpenPIC2D_NUMBER_OF_XBITS ; 
/*UpdatableVariableDeclaration*/int X10_TEMP19 = /*program*/_LinearESOpenPIC2D_NUMBER_OF_YBITS ; 
struct PoissonSolver X10_TEMP21  ; 
PoissonSolver_PoissonSolver( &X10_TEMP21/*Assignment*/, X10_TEMP18 , X10_TEMP19 , affp ) ; 
LinearESOpenPIC2DTEMP->solver = ( X10_TEMP21 ) ; 
const long long X10_TEMP23 = 0 ; 
LinearESOpenPIC2DTEMP->totalTime = ( X10_TEMP23 ) ; 
const long long X10_TEMP25 = 0 ; 
LinearESOpenPIC2DTEMP->initTime = ( X10_TEMP25 ) ; 
const long long X10_TEMP27 = 0 ; 
LinearESOpenPIC2DTEMP->depositTime = ( X10_TEMP27 ) ; 
const long long X10_TEMP29 = 0 ; 
LinearESOpenPIC2DTEMP->redistTime = ( X10_TEMP29 ) ; 
const long long X10_TEMP31 = 0 ; 
LinearESOpenPIC2DTEMP->pushTime = ( X10_TEMP31 ) ; 
const long long X10_TEMP33 = 0 ; 
LinearESOpenPIC2DTEMP->moveTime = ( X10_TEMP33 ) ; 

 return  LinearESOpenPIC2DTEMP; 

} 


Particle Particle_Particle_0( struct Particle *ParticleTEMP) 
{ const double X10_TEMP2 = 0.0; 
ParticleTEMP->x = ( X10_TEMP2 ) ; 
const double X10_TEMP4 = 0.0; 
ParticleTEMP->y = ( X10_TEMP4 ) ; 
const double X10_TEMP6 = 0.0; 
ParticleTEMP->xVel = ( X10_TEMP6 ) ; 
const double X10_TEMP8 = 0.0; 
ParticleTEMP->yVel = ( X10_TEMP8 ) ; 
const int X10_TEMP9 = 1 ; 
const int X10_TEMP10 = 0 ; 
const int X10_TEMP12 = X10_TEMP10 - X10_TEMP9 ; 
ParticleTEMP->pid = ( X10_TEMP12 ) ; 

 return  *ParticleTEMP; 

} 

Particle Particle_Particle_4( struct Particle *ParticleTEMP, const double x , const double y , const double xVel , const double yVel ) 
{ const double X10_TEMP2 = x ; 
ParticleTEMP->x = ( X10_TEMP2 ) ; 
const double X10_TEMP4 = y ; 
ParticleTEMP->y = ( X10_TEMP4 ) ; 
const double X10_TEMP6 = xVel ; 
ParticleTEMP->xVel = ( X10_TEMP6 ) ; 
const double X10_TEMP8 = yVel ; 
ParticleTEMP->yVel = ( X10_TEMP8 ) ; 
const int X10_TEMP9 = 1 ; 
const int X10_TEMP10 = 0 ; 
const int X10_TEMP12 = X10_TEMP10 - X10_TEMP9 ; 
ParticleTEMP->pid = ( X10_TEMP12 ) ; 

 return  *ParticleTEMP; 

} 

Particle Particle_Particle_5( struct Particle *ParticleTEMP, const double x , const double y , const double xVel , const double yVel , const int pid ) 
{ const double X10_TEMP2 = x ; 
ParticleTEMP->x = ( X10_TEMP2 ) ; 
const double X10_TEMP4 = y ; 
ParticleTEMP->y = ( X10_TEMP4 ) ; 
const double X10_TEMP6 = xVel ; 
ParticleTEMP->xVel = ( X10_TEMP6 ) ; 
const double X10_TEMP8 = yVel ; 
ParticleTEMP->yVel = ( X10_TEMP8 ) ; 
const int X10_TEMP10 = pid ; 
ParticleTEMP->pid = ( X10_TEMP10 ) ; 

 return  *ParticleTEMP; 

} 

PoissonSolver PoissonSolver_PoissonSolver ( struct PoissonSolver *PoissonSolverTEMP, const int xBits , const int yBits , const double affp ) 
{ const int X10_TEMP2 = xBits ; 
PoissonSolverTEMP->xBits = ( X10_TEMP2 ) ; 
const int X10_TEMP4 = yBits ; 
PoissonSolverTEMP->yBits = ( X10_TEMP4 ) ; 
const double X10_TEMP6 = affp ; 
PoissonSolverTEMP->affp = ( X10_TEMP6 ) ; 
const int X10_TEMP7 = 1 ; 
const int x0 = X10_TEMP7 << xBits ; 
const int X10_TEMP9 = 1 ; 
const int y0 = X10_TEMP9 << yBits ; 
PoissonSolverTEMP->x = ( x0 ) ; 
PoissonSolverTEMP->y = ( y0 ) ; 
const double X10_TEMP14 = 0 ; 
PoissonSolverTEMP->ari = ( X10_TEMP14 ) ; 
const int X10_TEMP15 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP19 = yBits + X10_TEMP15 ; 
const int X10_TEMP17 = 1 ; 
/*UpdatableVariableDeclaration*/int X10_TEMP20 = xBits + X10_TEMP17 ; 
struct FourierTransform2D fft0  ; 
FourierTransform2D_FourierTransform2D( &fft0/*Assignment*/, X10_TEMP19 , X10_TEMP20 ) ; 
PoissonSolverTEMP->fft = ( fft0 ) ; 
struct doubleRefArray3 tables = PoissonSolver_initTables ( PoissonSolverTEMP, fft0 , x0 , y0 , affp ) ; 
struct doubleRefArray3 X10_TEMP34 = PoissonSolver_makeFFG ( PoissonSolverTEMP, tables , x0 , y0 ) ; 
PoissonSolverTEMP->ffg = ( X10_TEMP34 ) ; 
struct doubleValArray2 X10_TEMP40 = PoissonSolver_makeFFG2 ( PoissonSolverTEMP, tables , x0 , y0 ) ; 
PoissonSolverTEMP->ffg2 = ( X10_TEMP40 ) ; 
const char * X10_TEMP42 = "Poisson Solver initialized" ; 
printf( "%s\n",X10_TEMP42 ) ; 

 return  *PoissonSolverTEMP; 

} 
doubleRefArray3 PoissonSolver_initTables ( struct PoissonSolver *PoissonSolverTEMP,  struct FourierTransform2D const fft , const int x , const int y , const double affp ) 
{ const int X10_TEMP4 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP5 = x - X10_TEMP2 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP4 , X10_TEMP5 ) ; 
const int X10_TEMP9 = 0 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP9 , y ) ; 
const int X10_TEMP13 = 0 ; 
const int X10_TEMP14 = 3 ; 
struct Region1 r3 = createNewRegion1R ( X10_TEMP13 , X10_TEMP14 ) ; 
struct Dist2 X10_TEMP20 = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Dist3 dTable1 = X10Util_extendDistRank3D ( X10_TEMP20 , r3 ) ; 
const int first = /* place.FIRST_PLACE  */ 0 ; 
const int X10_TEMP27 = 0 ; 
const int X10_TEMP30 = 0 ; 
const int X10_TEMP31 = 3 ; 
struct Region3 X10_TEMP32 = createNewRegion3RRR ( x , x , X10_TEMP27 , y , X10_TEMP30 , X10_TEMP31 ) ; 
struct Dist3 X10_TEMP34 = getPlaceDist3 ( X10_TEMP32 , first ) ; 
struct Dist3 dTable2 = X10_TEMP34 ; 
struct Dist3 dTable = unionDist3 ( dTable1 , dTable2 ) ; 
struct Region3 RX10_TEMP0 = dTable .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount3 ( dTable , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray3 RX10_TEMP19  ; 
doubleRefArray3_doubleRefArray3( &RX10_TEMP19/*Assignment*/, dTable , RX10_TEMP16 ) ; 
struct doubleRefArray3 table = RX10_TEMP19 ; 
const char * X10_TEMP39 = "Init: Green's function" ; 
printf( "%s\n",X10_TEMP39 ) ; 
PoissonSolver_initGreensFnTable ( PoissonSolverTEMP, table , fft , x , y , affp ) ; 
const char * X10_TEMP47 = "Init: Shape factor" ; 
printf( "%s\n",X10_TEMP47 ) ; 
PoissonSolver_initShapeFactorTable ( PoissonSolverTEMP, table , fft , x , y , affp ) ; 
const char * X10_TEMP55 = "Init: X Electric field" ; 
printf( "%s\n",X10_TEMP55 ) ; 
PoissonSolver_initElectricFieldXTable ( PoissonSolverTEMP, table , fft , x , y , affp ) ; 
const char * X10_TEMP63 = "Init: Y Electric field" ; 
printf( "%s\n",X10_TEMP63 ) ; 
PoissonSolver_initElectricFieldYTable ( PoissonSolverTEMP, table , fft , x , y , affp ) ; 
return table ; 
} 

doubleRefArray3 PoissonSolver_makeFFG ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table , const int x , const int y ) 
{ const int X10_TEMP4 = 0 ; 
const int X10_TEMP2 = 1 ; 
const int X10_TEMP5 = x - X10_TEMP2 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP4 , X10_TEMP5 ) ; 
const int X10_TEMP9 = 0 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP9 , y ) ; 
const int X10_TEMP13 = 0 ; 
const int X10_TEMP14 = 3 ; 
struct Region1 r3 = createNewRegion1R ( X10_TEMP13 , X10_TEMP14 ) ; 
struct Dist2 X10_TEMP20 = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Dist3 dResult = X10Util_extendDistRank3D ( X10_TEMP20 , r3 ) ; 
struct Region3 RX10_TEMP0 = dResult .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount3 ( dResult , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
struct Dist3 RX10_TEMP13 = restrictDist3 ( dResult , RX10_TEMP10 ) ; 
struct Region3 RX10_TEMP14 = RX10_TEMP13 .dReg ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP28 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP28,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP28 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP15 = SX10_TEMP6 ; 
const int RX10_TEMP16 = RX10_TEMP15 ; 
struct Point3 pt = regionOrdinalPoint3 ( RX10_TEMP14 , RX10_TEMP16 ) ; 
struct Dist3 RX10_TEMP17 = table .distValue ; 
struct Region3 RX10_TEMP18 = RX10_TEMP17 .dReg ; 
const int RX10_TEMP19 = searchPointInRegion3 ( RX10_TEMP18 , pt ) ; 
const int RX10_TEMP20 = 0 ; 
const int RX10_TEMP21 = RX10_TEMP19 < RX10_TEMP20 ; 
if ( RX10_TEMP21 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP22 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP22 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP23 = getPlaceFromDist3 ( RX10_TEMP17 , RX10_TEMP19 ) ; 
const int RX10_TEMP25 = /* here  */ 0 ; 
const int RX10_TEMP26 = RX10_TEMP23 != RX10_TEMP25 ; 
if ( RX10_TEMP26 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP24 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP24 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP27 = getRefArrayValue3double ( table , RX10_TEMP19 ) ; 
const double X10_TEMP24 = RX10_TEMP27 ; 
SX10_TEMP5 [ RX10_TEMP15 ] = X10_TEMP24 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP29 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP30  ; 
doubleStub_doubleStub( &RX10_TEMP30/*Assignment*/, RX10_TEMP29 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP30 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP33 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP32 = RX10_TEMP6 [ RX10_TEMP33 ] 
; 
SX10_TEMP7 [ RX10_TEMP33 ] = RX10_TEMP32 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP31 = SX10_TEMP7 ; 
struct doubleRefArray3 RX10_TEMP34  ; 
doubleRefArray3_doubleRefArray3( &RX10_TEMP34/*Assignment*/, dResult , RX10_TEMP31 ) ; 
struct doubleRefArray3 X10_TEMP26 = RX10_TEMP34 ; 
return X10_TEMP26 ; 
} 

doubleValArray2 PoissonSolver_makeFFG2 ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table , const int x , const int y ) 
{ const int X10_TEMP3 = 0 ; 
const int X10_TEMP6 = 0 ; 
const int X10_TEMP7 = 3 ; 
struct Region2 rResult = createNewRegion2RR ( X10_TEMP3 , y , X10_TEMP6 , X10_TEMP7 ) ; 
struct Region2 RX10_TEMP0 = rResult ; 
const int RX10_TEMP60 = rResult .regSize ; 
const int RX10_TEMP61 = 1 ; 
const int RX10_TEMP62 = RX10_TEMP60 - RX10_TEMP61 ; 
const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP59 = RX10_TEMP62 + SX10_TEMP0 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP1 = (double *)calloc(RX10_TEMP59,sizeof( double )); 
for ( int SX10_TEMP2 = 0 ; SX10_TEMP2 < RX10_TEMP59 ; SX10_TEMP2 ++ ) 
{ const int RX10_TEMP1 = SX10_TEMP2 ; 
const int RX10_TEMP3 = RX10_TEMP1 ; 
struct Point2 RX10_TEMP2 = regionOrdinalPoint2 ( RX10_TEMP0 , RX10_TEMP3 ) ; 
const int i = RX10_TEMP2 .f0 ; 
const int j = RX10_TEMP2 .f1 ; 
const int pHere = /* here  */ 0 ; 
const int X10_TEMP12 = 0 ; 
const int X10_TEMP13 = 0 ; 
struct Region1 X10_TEMP14 = createNewRegion1R ( X10_TEMP12 , X10_TEMP13 ) ; 
const int X10_TEMP15 = /* here  */ 0 ; 
struct Dist1 dDst = getPlaceDist1 ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Region1 RX10_TEMP4 = dDst .dReg ; 
const int RX10_TEMP5 = 0 ; 
const int RX10_TEMP6 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP7 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP7 = RX10_TEMP7 - RX10_TEMP6 ; const int SX10_TEMP3 = 1 ; 
const int RX10_TEMP8 = RX10_TEMP7 + SX10_TEMP3 ; 
const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP9 = RX10_TEMP7 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP10 = (doubleStub *)calloc(RX10_TEMP9,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP8 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP11 = SX10_TEMP6 ; 
const int RX10_TEMP12 = /* here  */ 0 ; 
const int RX10_TEMP13 = RX10_TEMP11 ; 
const int RX10_TEMP14 = /* place.places ( RX10_TEMP13 )  */ 0 
; 
const int RX10_TEMP15 = getDistLocalCount1 ( dDst , RX10_TEMP13 ) ; 
const int RX10_TEMP16 = RX10_TEMP15 - RX10_TEMP6 ; 
/* async ( RX10_TEMP14 )  */ 
{ const int SX10_TEMP7 = 1 ; 
const int RX10_TEMP17 = RX10_TEMP16 + SX10_TEMP7 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP18 = (double *)calloc(RX10_TEMP17,sizeof( double )); 
struct doubleStub RX10_TEMP19  ; 
doubleStub_doubleStub( &RX10_TEMP19/*Assignment*/, RX10_TEMP18 ) ; 
/* async ( RX10_TEMP12 )  */ 
{ RX10_TEMP10 [ RX10_TEMP11 ] = RX10_TEMP19 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP9 = (doubleStub *)calloc(RX10_TEMP8,sizeof( doubleStub )); 
for ( int SX10_TEMP10 = 0 ; SX10_TEMP10 < RX10_TEMP8 ; SX10_TEMP10 ++ ) 
{ const int RX10_TEMP22 = SX10_TEMP10 ; 
struct doubleStub RX10_TEMP21 = RX10_TEMP10 [ RX10_TEMP22 ] 
; 
SX10_TEMP9 [ RX10_TEMP22 ] = RX10_TEMP21 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP20 = SX10_TEMP9 ; 
struct doubleRefArray1 RX10_TEMP23  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP23/*Assignment*/, dDst , RX10_TEMP20 ) ; 
struct doubleRefArray1 rcv = RX10_TEMP23 ; 
/* finish  */ 
{ const int X10_TEMP19 = /* place.FIRST_PLACE  */ 0 ; 
/* async ( X10_TEMP19 )  */ 
{ struct Point3 RX10_TEMP24  ; 
Point3_Point3( &RX10_TEMP24/*Assignment*/, x , i , j ) ; 
struct Dist3 RX10_TEMP25 = table .distValue ; 
struct Region3 RX10_TEMP26 = RX10_TEMP25 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion3 ( RX10_TEMP26 , RX10_TEMP24 ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP30 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist3 ( RX10_TEMP25 , RX10_TEMP27 ) ; 
const int RX10_TEMP33 = /* here  */ 0 ; 
const int RX10_TEMP34 = RX10_TEMP31 != RX10_TEMP33 ; 
if ( RX10_TEMP34 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP32 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP32 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP35 = getRefArrayValue3double ( table , RX10_TEMP27 ) ; 
const double val = RX10_TEMP35 ; 
/* finish  */ 
{ /* async ( pHere )  */ 
{ const int X10_TEMP26 = 0 ; 
const double X10_TEMP28 = val ; 
struct Point1 RX10_TEMP36  ; 
Point1_Point1( &RX10_TEMP36/*Assignment*/, X10_TEMP26 ) ; 
struct Dist1 RX10_TEMP37 = rcv .distValue ; 
struct Region1 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion1 ( RX10_TEMP38 , RX10_TEMP36 ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist1 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array rcv" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue1double ( rcv , RX10_TEMP39 , X10_TEMP28 ) ; 
} 

} 

} 

} 

const int X10_TEMP30 = 0 ; 
struct Point1 RX10_TEMP47  ; 
Point1_Point1( &RX10_TEMP47/*Assignment*/, X10_TEMP30 ) ; 
struct Dist1 RX10_TEMP48 = rcv .distValue ; 
struct Region1 RX10_TEMP49 = RX10_TEMP48 .dReg ; 
const int RX10_TEMP50 = searchPointInRegion1 ( RX10_TEMP49 , RX10_TEMP47 ) ; 
const int RX10_TEMP51 = 0 ; 
const int RX10_TEMP52 = RX10_TEMP50 < RX10_TEMP51 ; 
if ( RX10_TEMP52 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP53 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP53 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP54 = getPlaceFromDist1 ( RX10_TEMP48 , RX10_TEMP50 ) ; 
const int RX10_TEMP56 = /* here  */ 0 ; 
const int RX10_TEMP57 = RX10_TEMP54 != RX10_TEMP56 ; 
if ( RX10_TEMP57 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP55 = "Bad place access for array rcv" ; 
fprintf(stderr, RX10_TEMP55 ) ; 
exit(EXIT_FAILURE);
} 

const double RX10_TEMP58 = getRefArrayValue1double ( rcv , RX10_TEMP50 ) ; 
const double X10_TEMP32 = RX10_TEMP58 ; 
SX10_TEMP1 [ RX10_TEMP1 ] = X10_TEMP32 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP63 = SX10_TEMP1 ; 
struct doubleValArray2 RX10_TEMP64  ; 
doubleValArray2_doubleValArray2( &RX10_TEMP64/*Assignment*/, rResult , RX10_TEMP63 ) ; 
struct doubleValArray2 X10_TEMP33 = RX10_TEMP64 ; 
return X10_TEMP33 ; 
} 

void PoissonSolver_initGreensFnTable ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct FourierTransform2D const fft , const int x , const int y , const double affp ) 
{ const int X10_TEMP6 = 0 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP3 = X10_TEMP2 * y ; 
const int X10_TEMP4 = 1 ; 
const int X10_TEMP7 = X10_TEMP3 - X10_TEMP4 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP6 , X10_TEMP7 ) ; 
const int X10_TEMP14 = 0 ; 
const int X10_TEMP10 = 2 ; 
const int X10_TEMP11 = X10_TEMP10 * x ; 
const int X10_TEMP12 = 1 ; 
const int X10_TEMP15 = X10_TEMP11 - X10_TEMP12 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Dist2 dGreen = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Region2 RX10_TEMP0 = dGreen .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dGreen , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dGreen , RX10_TEMP16 ) ; 
struct doubleRefArray2 f = RX10_TEMP19 ; 
const double X10_TEMP21 = /*program*/_PoissonSolver_AR ; 
const double X10_TEMP22 = 0.0; 
const int X10_TEMP24 = X10_TEMP21 > X10_TEMP22 ; 
const int X10_TEMP25 = X10_TEMP24 ; 
const double X10_TEMP26 = 1.0; 
const double X10_TEMP27 = /*program*/_PoissonSolver_AR ; 
/*UpdatableVariableDeclaration*/double X10_TEMP30 = 0.0; 
if ( X10_TEMP25 ) 
{ X10_TEMP30 = X10_TEMP26 / X10_TEMP27 ; } 

const double X10_TEMP31 = X10_TEMP30 ; 
const double invRadius = X10_TEMP31 ; 
const int X10_TEMP32 = 4 ; 
const int X10_TEMP33 = X10_TEMP32 * x ; 
const double N = X10_TEMP33 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP36 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP36 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP27 ) ; 
const int X10_TEMP37 = RX10_TEMP31 ; 
/* async ( X10_TEMP37 )  */ 
{ const int X10_TEMP40 = pl .f0 ; 
const int X10_TEMP39 = 2 ; 
const int X10_TEMP41 = X10_TEMP39 * y ; 
const int X10_TEMP43 = X10_TEMP40 <= X10_TEMP41 ; 
if ( X10_TEMP43 ) 
{ struct Region2 rLocal = X10Util_get2DLRegion ( dGreen ) ; 
const int X10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP35 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP33 = rLocal .regSize ; 
RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP34 = RX10_TEMP33 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP34 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP32 = SX10_TEMP11 ; 
const int RX10_TEMP36 = RX10_TEMP32 ; 
struct Point2 p = regionOrdinalPoint2 ( rLocal , RX10_TEMP36 ) ; 
/* async ( X10_TEMP47 )  */ 
{ const int X10_TEMP49 = p .f0 ; 
const int X10_TEMP51 = X10_TEMP49 > y ; 
const int X10_TEMP52 = X10_TEMP51 ; 
const int X10_TEMP57 = p .f0 ; 
const int X10_TEMP54 = 2 ; 
const int X10_TEMP56 = X10_TEMP54 * y ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = p .f0 ; 
if ( X10_TEMP52 ) 
{ X10_TEMP61 = X10_TEMP57 - X10_TEMP56 ; } 

const int X10_TEMP62 = X10_TEMP61 ; 
const int X10_TEMP64 = 2 ; 
const double x1 = pow ( X10_TEMP62 , X10_TEMP64 ) ; 
const int X10_TEMP67 = p .f1 ; 
const int X10_TEMP69 = X10_TEMP67 > x ; 
const int X10_TEMP70 = X10_TEMP69 ; 
const int X10_TEMP75 = p .f1 ; 
const int X10_TEMP72 = 2 ; 
const int X10_TEMP74 = X10_TEMP72 * x ; 
/*UpdatableVariableDeclaration*/int X10_TEMP79 = p .f1 ; 
if ( X10_TEMP70 ) 
{ X10_TEMP79 = X10_TEMP75 - X10_TEMP74 ; } 

const int X10_TEMP80 = X10_TEMP79 ; 
const int X10_TEMP82 = 2 ; 
const double x2 = pow ( X10_TEMP80 , X10_TEMP82 ) ; 
const double X10_TEMP85 = x1 + x2 ; 
const double r = sqrt ( X10_TEMP85 ) ; 
const double X10_TEMP93 = PoissonSolver_potentialField ( PoissonSolverTEMP, r , invRadius , affp ) ; 
const double X10_TEMP94 = X10_TEMP93 ; 
struct Dist2 RX10_TEMP37 = f .distValue ; 
struct Region2 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , p ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist2 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( f , RX10_TEMP39 , X10_TEMP94 ) ; 
} 

} 

} 

} 

} 

} 

struct ComplexRefArray2 ft = FourierTransform2D_inverseTransformD ( fft , f ) ; 
const int X10_TEMP103 = /*program*/_PoissonSolver_GREENS_IDX ; 
PoissonSolver_genTable1 ( PoissonSolverTEMP, table , ft , X10_TEMP103 , x , y ) ; 
} 

void PoissonSolver_initShapeFactorTable ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct FourierTransform2D const fft , const int x , const int y , const double affp ) 
{ const int X10_TEMP6 = 0 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP3 = X10_TEMP2 * y ; 
const int X10_TEMP4 = 1 ; 
const int X10_TEMP7 = X10_TEMP3 - X10_TEMP4 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP6 , X10_TEMP7 ) ; 
const int X10_TEMP14 = 0 ; 
const int X10_TEMP10 = 2 ; 
const int X10_TEMP11 = X10_TEMP10 * x ; 
const int X10_TEMP12 = 1 ; 
const int X10_TEMP15 = X10_TEMP11 - X10_TEMP12 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Dist2 dShape = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Region2 RX10_TEMP0 = dShape .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dShape , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dShape , RX10_TEMP16 ) ; 
struct doubleRefArray2 f = RX10_TEMP19 ; 
const double X10_TEMP21 = /*program*/_PoissonSolver_AR ; 
const double X10_TEMP22 = 0.0; 
const int X10_TEMP24 = X10_TEMP21 > X10_TEMP22 ; 
const int X10_TEMP25 = X10_TEMP24 ; 
const double X10_TEMP26 = 1.0; 
const double X10_TEMP27 = /*program*/_PoissonSolver_AR ; 
/*UpdatableVariableDeclaration*/double X10_TEMP30 = 0.0; 
if ( X10_TEMP25 ) 
{ X10_TEMP30 = X10_TEMP26 / X10_TEMP27 ; } 

const double X10_TEMP31 = X10_TEMP30 ; 
const double invRadius = X10_TEMP31 ; 
const int X10_TEMP32 = 4 ; 
const int X10_TEMP33 = X10_TEMP32 * x ; 
const double N = X10_TEMP33 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP36 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP36 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP27 ) ; 
const int X10_TEMP37 = RX10_TEMP31 ; 
/* async ( X10_TEMP37 )  */ 
{ const int X10_TEMP40 = pl .f0 ; 
const int X10_TEMP39 = 2 ; 
const int X10_TEMP41 = X10_TEMP39 * y ; 
const int X10_TEMP43 = X10_TEMP40 <= X10_TEMP41 ; 
if ( X10_TEMP43 ) 
{ struct Region2 rLocal = X10Util_get2DLRegion ( dShape ) ; 
const int X10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP35 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP33 = rLocal .regSize ; 
RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP34 = RX10_TEMP33 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP34 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP32 = SX10_TEMP11 ; 
const int RX10_TEMP36 = RX10_TEMP32 ; 
struct Point2 p = regionOrdinalPoint2 ( rLocal , RX10_TEMP36 ) ; 
/* async ( X10_TEMP47 )  */ 
{ const int X10_TEMP49 = p .f0 ; 
const int X10_TEMP51 = X10_TEMP49 > y ; 
const int X10_TEMP52 = X10_TEMP51 ; 
const int X10_TEMP57 = p .f0 ; 
const int X10_TEMP54 = 2 ; 
const int X10_TEMP56 = X10_TEMP54 * y ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = p .f0 ; 
if ( X10_TEMP52 ) 
{ X10_TEMP61 = X10_TEMP57 - X10_TEMP56 ; } 

const int X10_TEMP62 = X10_TEMP61 ; 
const int X10_TEMP64 = 2 ; 
const double x1 = pow ( X10_TEMP62 , X10_TEMP64 ) ; 
const int X10_TEMP67 = p .f1 ; 
const int X10_TEMP69 = X10_TEMP67 > x ; 
const int X10_TEMP70 = X10_TEMP69 ; 
const int X10_TEMP75 = p .f1 ; 
const int X10_TEMP72 = 2 ; 
const int X10_TEMP74 = X10_TEMP72 * x ; 
/*UpdatableVariableDeclaration*/int X10_TEMP79 = p .f1 ; 
if ( X10_TEMP70 ) 
{ X10_TEMP79 = X10_TEMP75 - X10_TEMP74 ; } 

const int X10_TEMP80 = X10_TEMP79 ; 
const int X10_TEMP82 = 2 ; 
const double x2 = pow ( X10_TEMP80 , X10_TEMP82 ) ; 
const double X10_TEMP85 = x1 + x2 ; 
const double r = sqrt ( X10_TEMP85 ) ; 
const double X10_TEMP93 = PoissonSolver_particleShape ( PoissonSolverTEMP, r , invRadius , affp ) ; 
const double X10_TEMP94 = X10_TEMP93 ; 
struct Dist2 RX10_TEMP37 = f .distValue ; 
struct Region2 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , p ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist2 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( f , RX10_TEMP39 , X10_TEMP94 ) ; 
} 

} 

} 

} 

} 

} 

struct ComplexRefArray2 ft = FourierTransform2D_inverseTransformD ( fft , f ) ; 
const int X10_TEMP103 = /*program*/_PoissonSolver_SHAPE_IDX ; 
PoissonSolver_genTable1 ( PoissonSolverTEMP, table , ft , X10_TEMP103 , x , y ) ; 
} 

void PoissonSolver_initElectricFieldXTable ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct FourierTransform2D const fft , const int x , const int y , const double affp ) 
{ const int X10_TEMP6 = 0 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP3 = X10_TEMP2 * y ; 
const int X10_TEMP4 = 1 ; 
const int X10_TEMP7 = X10_TEMP3 - X10_TEMP4 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP6 , X10_TEMP7 ) ; 
const int X10_TEMP14 = 0 ; 
const int X10_TEMP10 = 2 ; 
const int X10_TEMP11 = X10_TEMP10 * x ; 
const int X10_TEMP12 = 1 ; 
const int X10_TEMP15 = X10_TEMP11 - X10_TEMP12 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Dist2 dElecX = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Region2 RX10_TEMP0 = dElecX .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dElecX , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dElecX , RX10_TEMP16 ) ; 
struct doubleRefArray2 f = RX10_TEMP19 ; 
const double X10_TEMP21 = /*program*/_PoissonSolver_AR ; 
const double X10_TEMP22 = 0.0; 
const int X10_TEMP24 = X10_TEMP21 > X10_TEMP22 ; 
const int X10_TEMP25 = X10_TEMP24 ; 
const double X10_TEMP26 = 1.0; 
const double X10_TEMP27 = /*program*/_PoissonSolver_AR ; 
/*UpdatableVariableDeclaration*/double X10_TEMP30 = 0.0; 
if ( X10_TEMP25 ) 
{ X10_TEMP30 = X10_TEMP26 / X10_TEMP27 ; } 

const double X10_TEMP31 = X10_TEMP30 ; 
const double invRadius = X10_TEMP31 ; 
const int X10_TEMP32 = 4 ; 
const int X10_TEMP33 = X10_TEMP32 * x ; 
const double N = X10_TEMP33 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP36 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP36 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP27 ) ; 
const int X10_TEMP37 = RX10_TEMP31 ; 
/* async ( X10_TEMP37 )  */ 
{ const int X10_TEMP40 = pl .f0 ; 
const int X10_TEMP39 = 2 ; 
const int X10_TEMP41 = X10_TEMP39 * y ; 
const int X10_TEMP43 = X10_TEMP40 <= X10_TEMP41 ; 
if ( X10_TEMP43 ) 
{ struct Region2 rLocal = X10Util_get2DLRegion ( dElecX ) ; 
const int X10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP35 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP33 = rLocal .regSize ; 
RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP34 = RX10_TEMP33 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP34 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP32 = SX10_TEMP11 ; 
const int RX10_TEMP36 = RX10_TEMP32 ; 
struct Point2 p = regionOrdinalPoint2 ( rLocal , RX10_TEMP36 ) ; 
/* async ( X10_TEMP47 )  */ 
{ const int X10_TEMP49 = p .f0 ; 
const int X10_TEMP51 = X10_TEMP49 > y ; 
const int X10_TEMP52 = X10_TEMP51 ; 
const int X10_TEMP57 = p .f0 ; 
const int X10_TEMP54 = 2 ; 
const int X10_TEMP56 = X10_TEMP54 * y ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = p .f0 ; 
if ( X10_TEMP52 ) 
{ X10_TEMP61 = X10_TEMP57 - X10_TEMP56 ; } 

const int X10_TEMP62 = X10_TEMP61 ; 
const double x1 = X10_TEMP62 ; 
const int X10_TEMP65 = 2 ; 
const double xs1 = pow ( x1 , X10_TEMP65 ) ; 
const int X10_TEMP68 = p .f1 ; 
const int X10_TEMP70 = X10_TEMP68 > x ; 
const int X10_TEMP71 = X10_TEMP70 ; 
const int X10_TEMP76 = p .f1 ; 
const int X10_TEMP73 = 2 ; 
const int X10_TEMP75 = X10_TEMP73 * x ; 
/*UpdatableVariableDeclaration*/int X10_TEMP80 = p .f1 ; 
if ( X10_TEMP71 ) 
{ X10_TEMP80 = X10_TEMP76 - X10_TEMP75 ; } 

const int X10_TEMP81 = X10_TEMP80 ; 
const double x2 = X10_TEMP81 ; 
const int X10_TEMP84 = 2 ; 
const double xs2 = pow ( x2 , X10_TEMP84 ) ; 
const double X10_TEMP87 = xs1 + xs2 ; 
const double r = sqrt ( X10_TEMP87 ) ; 
const double val = PoissonSolver_radialElectricField ( PoissonSolverTEMP, r , invRadius , affp ) ; 
const double X10_TEMP95 = 0.0; 
const int X10_TEMP97 = r > X10_TEMP95 ; 
const int X10_TEMP98 = X10_TEMP97 ; 
const double X10_TEMP100 = x2 / r ; 
/*UpdatableVariableDeclaration*/double X10_TEMP103 = val ; 
if ( X10_TEMP98 ) 
{ X10_TEMP103 = val * X10_TEMP100 ; } 

const double X10_TEMP104 = X10_TEMP103 ; 
const double X10_TEMP105 = X10_TEMP104 ; 
struct Dist2 RX10_TEMP37 = f .distValue ; 
struct Region2 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , p ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist2 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( f , RX10_TEMP39 , X10_TEMP105 ) ; 
} 

} 

} 

} 

} 

} 

struct ComplexRefArray2 ft = FourierTransform2D_inverseTransformD ( fft , f ) ; 
const int X10_TEMP114 = /*program*/_PoissonSolver_ELECX_IDX ; 
PoissonSolver_genTable2 ( PoissonSolverTEMP, table , ft , X10_TEMP114 , x , y ) ; 
} 

void PoissonSolver_initElectricFieldYTable ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct FourierTransform2D const fft , const int x , const int y , const double affp ) 
{ const int X10_TEMP6 = 0 ; 
const int X10_TEMP2 = 2 ; 
const int X10_TEMP3 = X10_TEMP2 * y ; 
const int X10_TEMP4 = 1 ; 
const int X10_TEMP7 = X10_TEMP3 - X10_TEMP4 ; 
struct Region1 r1 = createNewRegion1R ( X10_TEMP6 , X10_TEMP7 ) ; 
const int X10_TEMP14 = 0 ; 
const int X10_TEMP10 = 2 ; 
const int X10_TEMP11 = X10_TEMP10 * x ; 
const int X10_TEMP12 = 1 ; 
const int X10_TEMP15 = X10_TEMP11 - X10_TEMP12 ; 
struct Region1 r2 = createNewRegion1R ( X10_TEMP14 , X10_TEMP15 ) ; 
struct Dist2 dElecX = X10Util_distBlockStar2 ( r1 , r2 ) ; 
struct Region2 RX10_TEMP0 = dElecX .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount2 ( dElecX , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP13 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const RX10_TEMP14 = (double *)calloc(RX10_TEMP13,sizeof( double )); 
struct doubleStub RX10_TEMP15  ; 
doubleStub_doubleStub( &RX10_TEMP15/*Assignment*/, RX10_TEMP14 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP15 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP4 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP18 = SX10_TEMP7 ; 
struct doubleStub RX10_TEMP17 = RX10_TEMP6 [ RX10_TEMP18 ] 
; 
SX10_TEMP6 [ RX10_TEMP18 ] = RX10_TEMP17 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP16 = SX10_TEMP6 ; 
struct doubleRefArray2 RX10_TEMP19  ; 
doubleRefArray2_doubleRefArray2( &RX10_TEMP19/*Assignment*/, dElecX , RX10_TEMP16 ) ; 
struct doubleRefArray2 f = RX10_TEMP19 ; 
const double X10_TEMP21 = /*program*/_PoissonSolver_AR ; 
const double X10_TEMP22 = 0.0; 
const int X10_TEMP24 = X10_TEMP21 > X10_TEMP22 ; 
const int X10_TEMP25 = X10_TEMP24 ; 
const double X10_TEMP26 = 1.0; 
const double X10_TEMP27 = /*program*/_PoissonSolver_AR ; 
/*UpdatableVariableDeclaration*/double X10_TEMP30 = 0.0; 
if ( X10_TEMP25 ) 
{ X10_TEMP30 = X10_TEMP26 / X10_TEMP27 ; } 

const double X10_TEMP31 = X10_TEMP30 ; 
const double invRadius = X10_TEMP31 ; 
const int X10_TEMP32 = 4 ; 
const int X10_TEMP33 = X10_TEMP32 * x ; 
const double N = X10_TEMP33 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP36 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP21 = X10_TEMP36 .dReg ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = RX10_TEMP21 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP8 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP8 ; 
for ( int SX10_TEMP9 = 0 ; SX10_TEMP9 < RX10_TEMP23 ; SX10_TEMP9 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP9 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP21 , RX10_TEMP25 ) ; 
struct Region1 RX10_TEMP26 = X10_TEMP36 .dReg ; 
const int RX10_TEMP27 = searchPointInRegion1 ( RX10_TEMP26 , pl ) ; 
const int RX10_TEMP28 = 0 ; 
const int RX10_TEMP29 = RX10_TEMP27 < RX10_TEMP28 ; 
if ( RX10_TEMP29 ) 
{ const char * RX10_TEMP30 = "Point pl not found in the distribution X10_TEMP36." ; 
fprintf(stderr, RX10_TEMP30 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP31 = getPlaceFromDist1 ( X10_TEMP36 , RX10_TEMP27 ) ; 
const int X10_TEMP37 = RX10_TEMP31 ; 
/* async ( X10_TEMP37 )  */ 
{ const int X10_TEMP40 = pl .f0 ; 
const int X10_TEMP39 = 2 ; 
const int X10_TEMP41 = X10_TEMP39 * y ; 
const int X10_TEMP43 = X10_TEMP40 <= X10_TEMP41 ; 
if ( X10_TEMP43 ) 
{ struct Region2 rLocal = X10Util_get2DLRegion ( dElecX ) ; 
const int X10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP35 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP33 = rLocal .regSize ; 
RX10_TEMP33 = RX10_TEMP33 - RX10_TEMP35 ; const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP34 = RX10_TEMP33 + SX10_TEMP10 ; 
for ( int SX10_TEMP11 = 0 ; SX10_TEMP11 < RX10_TEMP34 ; SX10_TEMP11 ++ ) 
{ const int RX10_TEMP32 = SX10_TEMP11 ; 
const int RX10_TEMP36 = RX10_TEMP32 ; 
struct Point2 p = regionOrdinalPoint2 ( rLocal , RX10_TEMP36 ) ; 
/* async ( X10_TEMP47 )  */ 
{ const int X10_TEMP49 = p .f0 ; 
const int X10_TEMP51 = X10_TEMP49 > y ; 
const int X10_TEMP52 = X10_TEMP51 ; 
const int X10_TEMP57 = p .f0 ; 
const int X10_TEMP54 = 2 ; 
const int X10_TEMP56 = X10_TEMP54 * y ; 
/*UpdatableVariableDeclaration*/int X10_TEMP61 = p .f0 ; 
if ( X10_TEMP52 ) 
{ X10_TEMP61 = X10_TEMP57 - X10_TEMP56 ; } 

const int X10_TEMP62 = X10_TEMP61 ; 
const double y1 = X10_TEMP62 ; 
const int X10_TEMP65 = 2 ; 
const double ys1 = pow ( y1 , X10_TEMP65 ) ; 
const int X10_TEMP68 = p .f1 ; 
const int X10_TEMP70 = X10_TEMP68 > x ; 
const int X10_TEMP71 = X10_TEMP70 ; 
const int X10_TEMP76 = p .f1 ; 
const int X10_TEMP73 = 2 ; 
const int X10_TEMP75 = X10_TEMP73 * x ; 
/*UpdatableVariableDeclaration*/int X10_TEMP80 = p .f1 ; 
if ( X10_TEMP71 ) 
{ X10_TEMP80 = X10_TEMP76 - X10_TEMP75 ; } 

const int X10_TEMP81 = X10_TEMP80 ; 
const double y2 = X10_TEMP81 ; 
const int X10_TEMP84 = 2 ; 
const double ys2 = pow ( y2 , X10_TEMP84 ) ; 
const double X10_TEMP87 = ys1 + ys2 ; 
const double r = sqrt ( X10_TEMP87 ) ; 
const double val = PoissonSolver_radialElectricField ( PoissonSolverTEMP, r , invRadius , affp ) ; 
const double X10_TEMP95 = 0.0; 
const int X10_TEMP97 = r > X10_TEMP95 ; 
const int X10_TEMP98 = X10_TEMP97 ; 
const double X10_TEMP100 = y1 / r ; 
/*UpdatableVariableDeclaration*/double X10_TEMP103 = val ; 
if ( X10_TEMP98 ) 
{ X10_TEMP103 = val * X10_TEMP100 ; } 

const double X10_TEMP104 = X10_TEMP103 ; 
const double X10_TEMP105 = X10_TEMP104 ; 
struct Dist2 RX10_TEMP37 = f .distValue ; 
struct Region2 RX10_TEMP38 = RX10_TEMP37 .dReg ; 
const int RX10_TEMP39 = searchPointInRegion2 ( RX10_TEMP38 , p ) ; 
const int RX10_TEMP40 = 0 ; 
const int RX10_TEMP41 = RX10_TEMP39 < RX10_TEMP40 ; 
if ( RX10_TEMP41 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP42 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP42 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP43 = getPlaceFromDist2 ( RX10_TEMP37 , RX10_TEMP39 ) ; 
const int RX10_TEMP45 = /* here  */ 0 ; 
const int RX10_TEMP46 = RX10_TEMP43 != RX10_TEMP45 ; 
if ( RX10_TEMP46 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Bad place access for array f" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue2double ( f , RX10_TEMP39 , X10_TEMP105 ) ; 
} 

} 

} 

} 

} 

} 

struct ComplexRefArray2 ft = FourierTransform2D_inverseTransformD ( fft , f ) ; 
const int X10_TEMP114 = /*program*/_PoissonSolver_ELECY_IDX ; 
PoissonSolver_genTable3 ( PoissonSolverTEMP, table , ft , X10_TEMP114 , x , y ) ; 
} 

void PoissonSolver_genTable1 ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct ComplexRefArray2 const ft , const int index , const int x , const int y ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * x ; 
const int N = X10_TEMP2 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP5 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP5 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP5 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP5 , RX10_TEMP7 ) ; 
const int X10_TEMP6 = RX10_TEMP11 ; 
/* async ( X10_TEMP6 )  */ 
{ const int X10_TEMP8 = pl .f0 ; 
const int X10_TEMP10 = X10_TEMP8 <= x ; 
if ( X10_TEMP10 ) 
{ struct Dist2 RX10_TEMP12 = ft .distValue ; 
struct Dist2 dFT = RX10_TEMP12 ; 
struct Dist3 RX10_TEMP13 = table .distValue ; 
struct Dist3 dTable = RX10_TEMP13 ; 
const int X10_TEMP15 = 0 ; 
struct Region1 rLocalFT1 = X10Util_getLRank2D ( dFT , X10_TEMP15 ) ; 
const int X10_TEMP19 = 1 ; 
struct Region1 rLocalT2 = X10Util_getLRank3D ( dTable , X10_TEMP19 ) ; 
struct Region2 X10_TEMP24 = createNewRegion2AA ( rLocalFT1 , rLocalT2 ) ; 
const int X10_TEMP25 = /* here  */ 0 ; 
const int RX10_TEMP18 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP16 = X10_TEMP24 .regSize ; 
RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP17 = RX10_TEMP16 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP17 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP3 ; 
const int RX10_TEMP19 = RX10_TEMP14 ; 
struct Point2 RX10_TEMP15 = regionOrdinalPoint2 ( X10_TEMP24 , RX10_TEMP19 ) ; 
const int i = RX10_TEMP15 .f0 ; 
const int j = RX10_TEMP15 .f1 ; 
/* async ( X10_TEMP25 )  */ 
{ struct Point2 RX10_TEMP20  ; 
Point2_Point2( &RX10_TEMP20/*Assignment*/, i , j ) ; 
struct Dist2 RX10_TEMP21 = ft .distValue ; 
struct Region2 RX10_TEMP22 = RX10_TEMP21 .dReg ; 
const int RX10_TEMP23 = searchPointInRegion2 ( RX10_TEMP22 , RX10_TEMP20 ) ; 
const int RX10_TEMP24 = 0 ; 
const int RX10_TEMP25 = RX10_TEMP23 < RX10_TEMP24 ; 
if ( RX10_TEMP25 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP26 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP26 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP27 = getPlaceFromDist2 ( RX10_TEMP21 , RX10_TEMP23 ) ; 
const int RX10_TEMP29 = /* here  */ 0 ; 
const int RX10_TEMP30 = RX10_TEMP27 != RX10_TEMP29 ; 
if ( RX10_TEMP30 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP28 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP28 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP31 = getRefArrayValue2Complex ( ft , RX10_TEMP23 ) ; 
struct Complex X10_TEMP31 = RX10_TEMP31 ; 
const double X10_TEMP32 = Complex_getReal ( X10_TEMP31 ) ; 
const double X10_TEMP34 = N * X10_TEMP32 ; 
const double X10_TEMP35 = X10_TEMP34 ; 
struct Point3 RX10_TEMP32  ; 
Point3_Point3( &RX10_TEMP32/*Assignment*/, i , j , index ) ; 
struct Dist3 RX10_TEMP33 = table .distValue ; 
struct Region3 RX10_TEMP34 = RX10_TEMP33 .dReg ; 
const int RX10_TEMP35 = searchPointInRegion3 ( RX10_TEMP34 , RX10_TEMP32 ) ; 
const int RX10_TEMP36 = 0 ; 
const int RX10_TEMP37 = RX10_TEMP35 < RX10_TEMP36 ; 
if ( RX10_TEMP37 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP38 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP38 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP39 = getPlaceFromDist3 ( RX10_TEMP33 , RX10_TEMP35 ) ; 
const int RX10_TEMP41 = /* here  */ 0 ; 
const int RX10_TEMP42 = RX10_TEMP39 != RX10_TEMP41 ; 
if ( RX10_TEMP42 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP40 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP40 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP35 , X10_TEMP35 ) ; 
} 

} 

const int X10_TEMP36 = /* here  */ 0 ; 
const int X10_TEMP38 = /* X10_TEMP36 . isFirst ( )  */ 1 ; 
if ( X10_TEMP38 ) 
{ const int X10_TEMP42 = 1 ; 
const int X10_TEMP40 = 1 ; 
const int X10_TEMP43 = y - X10_TEMP40 ; 
struct Region1 X10_TEMP45 = createNewRegion1R ( X10_TEMP42 , X10_TEMP43 ) ; 
const int X10_TEMP46 = /* here  */ 0 ; 
const int RX10_TEMP47 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP45 = X10_TEMP45 .regSize ; 
RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP47 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP45 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP46 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP43 = SX10_TEMP5 ; 
const int RX10_TEMP48 = RX10_TEMP43 ; 
struct Point1 RX10_TEMP44 = regionOrdinalPoint1 ( X10_TEMP45 , RX10_TEMP48 ) ; 
const int i = RX10_TEMP44 .f0 ; 
/* async ( X10_TEMP46 )  */ 
{ const int X10_TEMP54 = 0 ; 
const int X10_TEMP51 = 2 ; 
const int X10_TEMP52 = X10_TEMP51 * y ; 
const int X10_TEMP55 = X10_TEMP52 - i ; 
struct Point2 RX10_TEMP49  ; 
Point2_Point2( &RX10_TEMP49/*Assignment*/, X10_TEMP54 , X10_TEMP55 ) ; 
struct Dist2 RX10_TEMP50 = ft .distValue ; 
struct Region2 RX10_TEMP51 = RX10_TEMP50 .dReg ; 
const int RX10_TEMP52 = searchPointInRegion2 ( RX10_TEMP51 , RX10_TEMP49 ) ; 
const int RX10_TEMP53 = 0 ; 
const int RX10_TEMP54 = RX10_TEMP52 < RX10_TEMP53 ; 
if ( RX10_TEMP54 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP55 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP55 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP56 = getPlaceFromDist2 ( RX10_TEMP50 , RX10_TEMP52 ) ; 
const int RX10_TEMP58 = /* here  */ 0 ; 
const int RX10_TEMP59 = RX10_TEMP56 != RX10_TEMP58 ; 
if ( RX10_TEMP59 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP60 = getRefArrayValue2Complex ( ft , RX10_TEMP52 ) ; 
struct Complex X10_TEMP56 = RX10_TEMP60 ; 
const double X10_TEMP57 = Complex_getReal ( X10_TEMP56 ) ; 
const double X10_TEMP59 = N * X10_TEMP57 ; 
const double X10_TEMP60 = X10_TEMP59 ; 
struct Point3 RX10_TEMP61  ; 
Point3_Point3( &RX10_TEMP61/*Assignment*/, x , i , index ) ; 
struct Dist3 RX10_TEMP62 = table .distValue ; 
struct Region3 RX10_TEMP63 = RX10_TEMP62 .dReg ; 
const int RX10_TEMP64 = searchPointInRegion3 ( RX10_TEMP63 , RX10_TEMP61 ) ; 
const int RX10_TEMP65 = 0 ; 
const int RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP67 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP67 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP68 = getPlaceFromDist3 ( RX10_TEMP62 , RX10_TEMP64 ) ; 
const int RX10_TEMP70 = /* here  */ 0 ; 
const int RX10_TEMP71 = RX10_TEMP68 != RX10_TEMP70 ; 
if ( RX10_TEMP71 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP69 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP69 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP64 , X10_TEMP60 ) ; 
} 

} 

const int X10_TEMP64 = 0 ; 
const int X10_TEMP67 = 0 ; 
const int X10_TEMP68 = 0 ; 
struct Point2 RX10_TEMP72  ; 
Point2_Point2( &RX10_TEMP72/*Assignment*/, X10_TEMP67 , X10_TEMP68 ) ; 
struct Dist2 RX10_TEMP73 = ft .distValue ; 
struct Region2 RX10_TEMP74 = RX10_TEMP73 .dReg ; 
const int RX10_TEMP75 = searchPointInRegion2 ( RX10_TEMP74 , RX10_TEMP72 ) ; 
const int RX10_TEMP76 = 0 ; 
const int RX10_TEMP77 = RX10_TEMP75 < RX10_TEMP76 ; 
if ( RX10_TEMP77 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP78 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP78 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP79 = getPlaceFromDist2 ( RX10_TEMP73 , RX10_TEMP75 ) ; 
const int RX10_TEMP81 = /* here  */ 0 ; 
const int RX10_TEMP82 = RX10_TEMP79 != RX10_TEMP81 ; 
if ( RX10_TEMP82 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP80 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP80 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP83 = getRefArrayValue2Complex ( ft , RX10_TEMP75 ) ; 
struct Complex X10_TEMP69 = RX10_TEMP83 ; 
const double X10_TEMP70 = Complex_getImag ( X10_TEMP69 ) ; 
const double X10_TEMP72 = N * X10_TEMP70 ; 
const double X10_TEMP73 = X10_TEMP72 ; 
struct Point3 RX10_TEMP84  ; 
Point3_Point3( &RX10_TEMP84/*Assignment*/, x , X10_TEMP64 , index ) ; 
struct Dist3 RX10_TEMP85 = table .distValue ; 
struct Region3 RX10_TEMP86 = RX10_TEMP85 .dReg ; 
const int RX10_TEMP87 = searchPointInRegion3 ( RX10_TEMP86 , RX10_TEMP84 ) ; 
const int RX10_TEMP88 = 0 ; 
const int RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88 ; 
if ( RX10_TEMP89 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP90 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP90 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP91 = getPlaceFromDist3 ( RX10_TEMP85 , RX10_TEMP87 ) ; 
const int RX10_TEMP93 = /* here  */ 0 ; 
const int RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP92 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP92 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP87 , X10_TEMP73 ) ; 
const int X10_TEMP79 = 0 ; 
struct Point2 RX10_TEMP95  ; 
Point2_Point2( &RX10_TEMP95/*Assignment*/, X10_TEMP79 , y ) ; 
struct Dist2 RX10_TEMP96 = ft .distValue ; 
struct Region2 RX10_TEMP97 = RX10_TEMP96 .dReg ; 
const int RX10_TEMP98 = searchPointInRegion2 ( RX10_TEMP97 , RX10_TEMP95 ) ; 
const int RX10_TEMP99 = 0 ; 
const int RX10_TEMP100 = RX10_TEMP98 < RX10_TEMP99 ; 
if ( RX10_TEMP100 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP101 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP101 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP102 = getPlaceFromDist2 ( RX10_TEMP96 , RX10_TEMP98 ) ; 
const int RX10_TEMP104 = /* here  */ 0 ; 
const int RX10_TEMP105 = RX10_TEMP102 != RX10_TEMP104 ; 
if ( RX10_TEMP105 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP103 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP103 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP106 = getRefArrayValue2Complex ( ft , RX10_TEMP98 ) ; 
struct Complex X10_TEMP80 = RX10_TEMP106 ; 
const double X10_TEMP81 = Complex_getImag ( X10_TEMP80 ) ; 
const double X10_TEMP83 = N * X10_TEMP81 ; 
const double X10_TEMP84 = X10_TEMP83 ; 
struct Point3 RX10_TEMP107  ; 
Point3_Point3( &RX10_TEMP107/*Assignment*/, x , y , index ) ; 
struct Dist3 RX10_TEMP108 = table .distValue ; 
struct Region3 RX10_TEMP109 = RX10_TEMP108 .dReg ; 
const int RX10_TEMP110 = searchPointInRegion3 ( RX10_TEMP109 , RX10_TEMP107 ) ; 
const int RX10_TEMP111 = 0 ; 
const int RX10_TEMP112 = RX10_TEMP110 < RX10_TEMP111 ; 
if ( RX10_TEMP112 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP113 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP113 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP114 = getPlaceFromDist3 ( RX10_TEMP108 , RX10_TEMP110 ) ; 
const int RX10_TEMP116 = /* here  */ 0 ; 
const int RX10_TEMP117 = RX10_TEMP114 != RX10_TEMP116 ; 
if ( RX10_TEMP117 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP115 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP115 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP110 , X10_TEMP84 ) ; 
} 

} 

} 

} 

} 

} 

void PoissonSolver_genTable2 ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct ComplexRefArray2 const ft , const int index , const int x , const int y ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * x ; 
const int N = X10_TEMP2 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP5 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP5 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP5 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP5 , RX10_TEMP7 ) ; 
const int X10_TEMP6 = RX10_TEMP11 ; 
/* async ( X10_TEMP6 )  */ 
{ const int X10_TEMP8 = pl .f0 ; 
const int X10_TEMP10 = X10_TEMP8 <= x ; 
if ( X10_TEMP10 ) 
{ struct Dist2 RX10_TEMP12 = ft .distValue ; 
struct Dist2 dFT = RX10_TEMP12 ; 
struct Dist3 RX10_TEMP13 = table .distValue ; 
struct Dist3 dTable = RX10_TEMP13 ; 
const int X10_TEMP15 = 0 ; 
struct Region1 rLocalFT1 = X10Util_getLRank2D ( dFT , X10_TEMP15 ) ; 
const int X10_TEMP19 = 1 ; 
struct Region1 rLocalT2 = X10Util_getLRank3D ( dTable , X10_TEMP19 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
const int RX10_TEMP18 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP16 = rLocalFT1 .regSize ; 
RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP17 = RX10_TEMP16 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP17 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP3 ; 
const int RX10_TEMP19 = RX10_TEMP14 ; 
struct Point1 RX10_TEMP15 = regionOrdinalPoint1 ( rLocalFT1 , RX10_TEMP19 ) ; 
const int i = RX10_TEMP15 .f0 ; 
/* async ( X10_TEMP22 )  */ 
{ const int X10_TEMP23 = 0 ; 
const int X10_TEMP25 = i > X10_TEMP23 ; 
if ( X10_TEMP25 ) 
{ const int X10_TEMP27 = /* here  */ 0 ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = rLocalT2 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP23 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP5 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 RX10_TEMP21 = regionOrdinalPoint1 ( rLocalT2 , RX10_TEMP25 ) ; 
const int j = RX10_TEMP21 .f0 ; 
/* async ( X10_TEMP27 )  */ 
{ struct Point2 RX10_TEMP26  ; 
Point2_Point2( &RX10_TEMP26/*Assignment*/, i , j ) ; 
struct Dist2 RX10_TEMP27 = ft .distValue ; 
struct Region2 RX10_TEMP28 = RX10_TEMP27 .dReg ; 
const int RX10_TEMP29 = searchPointInRegion2 ( RX10_TEMP28 , RX10_TEMP26 ) ; 
const int RX10_TEMP30 = 0 ; 
const int RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30 ; 
if ( RX10_TEMP31 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP32 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP32 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP33 = getPlaceFromDist2 ( RX10_TEMP27 , RX10_TEMP29 ) ; 
const int RX10_TEMP35 = /* here  */ 0 ; 
const int RX10_TEMP36 = RX10_TEMP33 != RX10_TEMP35 ; 
if ( RX10_TEMP36 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP34 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP34 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP37 = getRefArrayValue2Complex ( ft , RX10_TEMP29 ) ; 
struct Complex X10_TEMP33 = RX10_TEMP37 ; 
const double X10_TEMP34 = Complex_getImag ( X10_TEMP33 ) ; 
const double X10_TEMP36 = N * X10_TEMP34 ; 
const double X10_TEMP37 = X10_TEMP36 ; 
struct Point3 RX10_TEMP38  ; 
Point3_Point3( &RX10_TEMP38/*Assignment*/, i , j , index ) ; 
struct Dist3 RX10_TEMP39 = table .distValue ; 
struct Region3 RX10_TEMP40 = RX10_TEMP39 .dReg ; 
const int RX10_TEMP41 = searchPointInRegion3 ( RX10_TEMP40 , RX10_TEMP38 ) ; 
const int RX10_TEMP42 = 0 ; 
const int RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42 ; 
if ( RX10_TEMP43 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP45 = getPlaceFromDist3 ( RX10_TEMP39 , RX10_TEMP41 ) ; 
const int RX10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47 ; 
if ( RX10_TEMP48 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP41 , X10_TEMP37 ) ; 
} 

} 

} 

} 

} 

const int X10_TEMP38 = /* here  */ 0 ; 
const int X10_TEMP40 = /* X10_TEMP38 . isFirst ( )  */ 1 ; 
if ( X10_TEMP40 ) 
{ const int X10_TEMP44 = 1 ; 
const int X10_TEMP42 = 1 ; 
const int X10_TEMP45 = y - X10_TEMP42 ; 
struct Region1 X10_TEMP47 = createNewRegion1R ( X10_TEMP44 , X10_TEMP45 ) ; 
const int X10_TEMP48 = /* here  */ 0 ; 
const int RX10_TEMP53 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP51 = X10_TEMP47 .regSize ; 
RX10_TEMP51 = RX10_TEMP51 - RX10_TEMP53 ; const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP52 = RX10_TEMP51 + SX10_TEMP6 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP52 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP49 = SX10_TEMP7 ; 
const int RX10_TEMP54 = RX10_TEMP49 ; 
struct Point1 RX10_TEMP50 = regionOrdinalPoint1 ( X10_TEMP47 , RX10_TEMP54 ) ; 
const int i1 = RX10_TEMP50 .f0 ; 
/* async ( X10_TEMP48 )  */ 
{ const int X10_TEMP49 = 2 ; 
const int X10_TEMP50 = X10_TEMP49 * y ; 
const int i2 = X10_TEMP50 - i1 ; 
const int X10_TEMP55 = 0 ; 
const int X10_TEMP58 = 0 ; 
struct Point2 RX10_TEMP55  ; 
Point2_Point2( &RX10_TEMP55/*Assignment*/, X10_TEMP58 , i1 ) ; 
struct Dist2 RX10_TEMP56 = ft .distValue ; 
struct Region2 RX10_TEMP57 = RX10_TEMP56 .dReg ; 
const int RX10_TEMP58 = searchPointInRegion2 ( RX10_TEMP57 , RX10_TEMP55 ) ; 
const int RX10_TEMP59 = 0 ; 
const int RX10_TEMP60 = RX10_TEMP58 < RX10_TEMP59 ; 
if ( RX10_TEMP60 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP61 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP61 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP62 = getPlaceFromDist2 ( RX10_TEMP56 , RX10_TEMP58 ) ; 
const int RX10_TEMP64 = /* here  */ 0 ; 
const int RX10_TEMP65 = RX10_TEMP62 != RX10_TEMP64 ; 
if ( RX10_TEMP65 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP63 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP63 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP66 = getRefArrayValue2Complex ( ft , RX10_TEMP58 ) ; 
struct Complex X10_TEMP59 = RX10_TEMP66 ; 
const double X10_TEMP60 = Complex_getReal ( X10_TEMP59 ) ; 
const double X10_TEMP62 = N * X10_TEMP60 ; 
const double X10_TEMP63 = X10_TEMP62 ; 
struct Point3 RX10_TEMP67  ; 
Point3_Point3( &RX10_TEMP67/*Assignment*/, X10_TEMP55 , i1 , index ) ; 
struct Dist3 RX10_TEMP68 = table .distValue ; 
struct Region3 RX10_TEMP69 = RX10_TEMP68 .dReg ; 
const int RX10_TEMP70 = searchPointInRegion3 ( RX10_TEMP69 , RX10_TEMP67 ) ; 
const int RX10_TEMP71 = 0 ; 
const int RX10_TEMP72 = RX10_TEMP70 < RX10_TEMP71 ; 
if ( RX10_TEMP72 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP73 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP73 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP74 = getPlaceFromDist3 ( RX10_TEMP68 , RX10_TEMP70 ) ; 
const int RX10_TEMP76 = /* here  */ 0 ; 
const int RX10_TEMP77 = RX10_TEMP74 != RX10_TEMP76 ; 
if ( RX10_TEMP77 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP75 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP75 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP70 , X10_TEMP63 ) ; 
const int X10_TEMP69 = 0 ; 
struct Point2 RX10_TEMP78  ; 
Point2_Point2( &RX10_TEMP78/*Assignment*/, X10_TEMP69 , i2 ) ; 
struct Dist2 RX10_TEMP79 = ft .distValue ; 
struct Region2 RX10_TEMP80 = RX10_TEMP79 .dReg ; 
const int RX10_TEMP81 = searchPointInRegion2 ( RX10_TEMP80 , RX10_TEMP78 ) ; 
const int RX10_TEMP82 = 0 ; 
const int RX10_TEMP83 = RX10_TEMP81 < RX10_TEMP82 ; 
if ( RX10_TEMP83 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP84 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP84 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP85 = getPlaceFromDist2 ( RX10_TEMP79 , RX10_TEMP81 ) ; 
const int RX10_TEMP87 = /* here  */ 0 ; 
const int RX10_TEMP88 = RX10_TEMP85 != RX10_TEMP87 ; 
if ( RX10_TEMP88 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP86 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP86 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP89 = getRefArrayValue2Complex ( ft , RX10_TEMP81 ) ; 
struct Complex X10_TEMP70 = RX10_TEMP89 ; 
const double X10_TEMP71 = Complex_getReal ( X10_TEMP70 ) ; 
const double X10_TEMP73 = N * X10_TEMP71 ; 
const double X10_TEMP74 = X10_TEMP73 ; 
struct Point3 RX10_TEMP90  ; 
Point3_Point3( &RX10_TEMP90/*Assignment*/, x , i1 , index ) ; 
struct Dist3 RX10_TEMP91 = table .distValue ; 
struct Region3 RX10_TEMP92 = RX10_TEMP91 .dReg ; 
const int RX10_TEMP93 = searchPointInRegion3 ( RX10_TEMP92 , RX10_TEMP90 ) ; 
const int RX10_TEMP94 = 0 ; 
const int RX10_TEMP95 = RX10_TEMP93 < RX10_TEMP94 ; 
if ( RX10_TEMP95 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP96 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP96 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP97 = getPlaceFromDist3 ( RX10_TEMP91 , RX10_TEMP93 ) ; 
const int RX10_TEMP99 = /* here  */ 0 ; 
const int RX10_TEMP100 = RX10_TEMP97 != RX10_TEMP99 ; 
if ( RX10_TEMP100 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP98 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP98 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP93 , X10_TEMP74 ) ; 
} 

} 

const int X10_TEMP78 = 0 ; 
const int X10_TEMP79 = 0 ; 
const int X10_TEMP82 = 0 ; 
const int X10_TEMP83 = 0 ; 
struct Point2 RX10_TEMP101  ; 
Point2_Point2( &RX10_TEMP101/*Assignment*/, X10_TEMP82 , X10_TEMP83 ) ; 
struct Dist2 RX10_TEMP102 = ft .distValue ; 
struct Region2 RX10_TEMP103 = RX10_TEMP102 .dReg ; 
const int RX10_TEMP104 = searchPointInRegion2 ( RX10_TEMP103 , RX10_TEMP101 ) ; 
const int RX10_TEMP105 = 0 ; 
const int RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105 ; 
if ( RX10_TEMP106 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP107 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP107 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP108 = getPlaceFromDist2 ( RX10_TEMP102 , RX10_TEMP104 ) ; 
const int RX10_TEMP110 = /* here  */ 0 ; 
const int RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP112 = getRefArrayValue2Complex ( ft , RX10_TEMP104 ) ; 
struct Complex X10_TEMP84 = RX10_TEMP112 ; 
const double X10_TEMP85 = Complex_getReal ( X10_TEMP84 ) ; 
const double X10_TEMP87 = N * X10_TEMP85 ; 
const double X10_TEMP88 = X10_TEMP87 ; 
struct Point3 RX10_TEMP113  ; 
Point3_Point3( &RX10_TEMP113/*Assignment*/, X10_TEMP78 , X10_TEMP79 , index ) ; 
struct Dist3 RX10_TEMP114 = table .distValue ; 
struct Region3 RX10_TEMP115 = RX10_TEMP114 .dReg ; 
const int RX10_TEMP116 = searchPointInRegion3 ( RX10_TEMP115 , RX10_TEMP113 ) ; 
const int RX10_TEMP117 = 0 ; 
const int RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117 ; 
if ( RX10_TEMP118 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP119 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP119 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP120 = getPlaceFromDist3 ( RX10_TEMP114 , RX10_TEMP116 ) ; 
const int RX10_TEMP122 = /* here  */ 0 ; 
const int RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP121 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP121 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP116 , X10_TEMP88 ) ; 
const int X10_TEMP92 = 0 ; 
const int X10_TEMP95 = 0 ; 
const int X10_TEMP96 = 0 ; 
struct Point2 RX10_TEMP124  ; 
Point2_Point2( &RX10_TEMP124/*Assignment*/, X10_TEMP95 , X10_TEMP96 ) ; 
struct Dist2 RX10_TEMP125 = ft .distValue ; 
struct Region2 RX10_TEMP126 = RX10_TEMP125 .dReg ; 
const int RX10_TEMP127 = searchPointInRegion2 ( RX10_TEMP126 , RX10_TEMP124 ) ; 
const int RX10_TEMP128 = 0 ; 
const int RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128 ; 
if ( RX10_TEMP129 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP130 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP130 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP131 = getPlaceFromDist2 ( RX10_TEMP125 , RX10_TEMP127 ) ; 
const int RX10_TEMP133 = /* here  */ 0 ; 
const int RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133 ; 
if ( RX10_TEMP134 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP132 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP132 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP135 = getRefArrayValue2Complex ( ft , RX10_TEMP127 ) ; 
struct Complex X10_TEMP97 = RX10_TEMP135 ; 
const double X10_TEMP98 = Complex_getImag ( X10_TEMP97 ) ; 
const double X10_TEMP100 = N * X10_TEMP98 ; 
const double X10_TEMP101 = X10_TEMP100 ; 
struct Point3 RX10_TEMP136  ; 
Point3_Point3( &RX10_TEMP136/*Assignment*/, x , X10_TEMP92 , index ) ; 
struct Dist3 RX10_TEMP137 = table .distValue ; 
struct Region3 RX10_TEMP138 = RX10_TEMP137 .dReg ; 
const int RX10_TEMP139 = searchPointInRegion3 ( RX10_TEMP138 , RX10_TEMP136 ) ; 
const int RX10_TEMP140 = 0 ; 
const int RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140 ; 
if ( RX10_TEMP141 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP142 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP142 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP143 = getPlaceFromDist3 ( RX10_TEMP137 , RX10_TEMP139 ) ; 
const int RX10_TEMP145 = /* here  */ 0 ; 
const int RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145 ; 
if ( RX10_TEMP146 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP144 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP144 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP139 , X10_TEMP101 ) ; 
const int X10_TEMP105 = 0 ; 
const int X10_TEMP108 = 0 ; 
struct Point2 RX10_TEMP147  ; 
Point2_Point2( &RX10_TEMP147/*Assignment*/, X10_TEMP108 , y ) ; 
struct Dist2 RX10_TEMP148 = ft .distValue ; 
struct Region2 RX10_TEMP149 = RX10_TEMP148 .dReg ; 
const int RX10_TEMP150 = searchPointInRegion2 ( RX10_TEMP149 , RX10_TEMP147 ) ; 
const int RX10_TEMP151 = 0 ; 
const int RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151 ; 
if ( RX10_TEMP152 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP153 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP153 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP154 = getPlaceFromDist2 ( RX10_TEMP148 , RX10_TEMP150 ) ; 
const int RX10_TEMP156 = /* here  */ 0 ; 
const int RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156 ; 
if ( RX10_TEMP157 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP155 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP155 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP158 = getRefArrayValue2Complex ( ft , RX10_TEMP150 ) ; 
struct Complex X10_TEMP109 = RX10_TEMP158 ; 
const double X10_TEMP110 = Complex_getReal ( X10_TEMP109 ) ; 
const double X10_TEMP112 = N * X10_TEMP110 ; 
const double X10_TEMP113 = X10_TEMP112 ; 
struct Point3 RX10_TEMP159  ; 
Point3_Point3( &RX10_TEMP159/*Assignment*/, X10_TEMP105 , y , index ) ; 
struct Dist3 RX10_TEMP160 = table .distValue ; 
struct Region3 RX10_TEMP161 = RX10_TEMP160 .dReg ; 
const int RX10_TEMP162 = searchPointInRegion3 ( RX10_TEMP161 , RX10_TEMP159 ) ; 
const int RX10_TEMP163 = 0 ; 
const int RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163 ; 
if ( RX10_TEMP164 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP165 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP165 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP166 = getPlaceFromDist3 ( RX10_TEMP160 , RX10_TEMP162 ) ; 
const int RX10_TEMP168 = /* here  */ 0 ; 
const int RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168 ; 
if ( RX10_TEMP169 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP167 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP167 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP162 , X10_TEMP113 ) ; 
const int X10_TEMP119 = 0 ; 
struct Point2 RX10_TEMP170  ; 
Point2_Point2( &RX10_TEMP170/*Assignment*/, X10_TEMP119 , y ) ; 
struct Dist2 RX10_TEMP171 = ft .distValue ; 
struct Region2 RX10_TEMP172 = RX10_TEMP171 .dReg ; 
const int RX10_TEMP173 = searchPointInRegion2 ( RX10_TEMP172 , RX10_TEMP170 ) ; 
const int RX10_TEMP174 = 0 ; 
const int RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174 ; 
if ( RX10_TEMP175 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP176 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP176 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP177 = getPlaceFromDist2 ( RX10_TEMP171 , RX10_TEMP173 ) ; 
const int RX10_TEMP179 = /* here  */ 0 ; 
const int RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179 ; 
if ( RX10_TEMP180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP178 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP178 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP181 = getRefArrayValue2Complex ( ft , RX10_TEMP173 ) ; 
struct Complex X10_TEMP120 = RX10_TEMP181 ; 
const double X10_TEMP121 = Complex_getImag ( X10_TEMP120 ) ; 
const double X10_TEMP123 = N * X10_TEMP121 ; 
const double X10_TEMP124 = X10_TEMP123 ; 
struct Point3 RX10_TEMP182  ; 
Point3_Point3( &RX10_TEMP182/*Assignment*/, x , y , index ) ; 
struct Dist3 RX10_TEMP183 = table .distValue ; 
struct Region3 RX10_TEMP184 = RX10_TEMP183 .dReg ; 
const int RX10_TEMP185 = searchPointInRegion3 ( RX10_TEMP184 , RX10_TEMP182 ) ; 
const int RX10_TEMP186 = 0 ; 
const int RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186 ; 
if ( RX10_TEMP187 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP188 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP188 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP189 = getPlaceFromDist3 ( RX10_TEMP183 , RX10_TEMP185 ) ; 
const int RX10_TEMP191 = /* here  */ 0 ; 
const int RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191 ; 
if ( RX10_TEMP192 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP190 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP190 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP185 , X10_TEMP124 ) ; 
} 

} 

} 

} 

} 

} 

void PoissonSolver_genTable3 ( struct PoissonSolver *PoissonSolverTEMP,  struct doubleRefArray3 const table ,  struct ComplexRefArray2 const ft , const int index , const int x , const int y ) 
{ const int X10_TEMP1 = 4 ; 
const int X10_TEMP2 = X10_TEMP1 * x ; 
const int N = X10_TEMP2 * y ; 
/* finish  */ 
{ struct Dist1 X10_TEMP5 = /*program*/UniqueDistribution ; 
struct Region1 RX10_TEMP1 = X10_TEMP5 .dReg ; 
const int RX10_TEMP4 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP2 = RX10_TEMP1 .regSize ; 
RX10_TEMP2 = RX10_TEMP2 - RX10_TEMP4 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP3 = RX10_TEMP2 + SX10_TEMP0 ; 
for ( int SX10_TEMP1 = 0 ; SX10_TEMP1 < RX10_TEMP3 ; SX10_TEMP1 ++ ) 
{ const int RX10_TEMP0 = SX10_TEMP1 ; 
const int RX10_TEMP5 = RX10_TEMP0 ; 
struct Point1 pl = regionOrdinalPoint1 ( RX10_TEMP1 , RX10_TEMP5 ) ; 
struct Region1 RX10_TEMP6 = X10_TEMP5 .dReg ; 
const int RX10_TEMP7 = searchPointInRegion1 ( RX10_TEMP6 , pl ) ; 
const int RX10_TEMP8 = 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 < RX10_TEMP8 ; 
if ( RX10_TEMP9 ) 
{ const char * RX10_TEMP10 = "Point pl not found in the distribution X10_TEMP5." ; 
fprintf(stderr, RX10_TEMP10 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP11 = getPlaceFromDist1 ( X10_TEMP5 , RX10_TEMP7 ) ; 
const int X10_TEMP6 = RX10_TEMP11 ; 
/* async ( X10_TEMP6 )  */ 
{ const int X10_TEMP8 = pl .f0 ; 
const int X10_TEMP10 = X10_TEMP8 <= x ; 
if ( X10_TEMP10 ) 
{ struct Dist2 RX10_TEMP12 = ft .distValue ; 
struct Dist2 dFT = RX10_TEMP12 ; 
struct Dist3 RX10_TEMP13 = table .distValue ; 
struct Dist3 dTable = RX10_TEMP13 ; 
const int X10_TEMP15 = 0 ; 
struct Region1 rLocalFT1 = X10Util_getLRank2D ( dFT , X10_TEMP15 ) ; 
const int X10_TEMP19 = 1 ; 
struct Region1 rLocalT2 = X10Util_getLRank3D ( dTable , X10_TEMP19 ) ; 
const int X10_TEMP22 = /* here  */ 0 ; 
const int RX10_TEMP18 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP16 = rLocalFT1 .regSize ; 
RX10_TEMP16 = RX10_TEMP16 - RX10_TEMP18 ; const int SX10_TEMP2 = 1 ; 
const int RX10_TEMP17 = RX10_TEMP16 + SX10_TEMP2 ; 
for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP17 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP14 = SX10_TEMP3 ; 
const int RX10_TEMP19 = RX10_TEMP14 ; 
struct Point1 RX10_TEMP15 = regionOrdinalPoint1 ( rLocalFT1 , RX10_TEMP19 ) ; 
const int i = RX10_TEMP15 .f0 ; 
/* async ( X10_TEMP22 )  */ 
{ const int X10_TEMP23 = 0 ; 
const int X10_TEMP25 = i > X10_TEMP23 ; 
if ( X10_TEMP25 ) 
{ const int X10_TEMP29 = 1 ; 
const int X10_TEMP27 = 1 ; 
const int X10_TEMP30 = y - X10_TEMP27 ; 
struct Region1 X10_TEMP32 = createNewRegion1R ( X10_TEMP29 , X10_TEMP30 ) ; 
const int X10_TEMP33 = /* here  */ 0 ; 
const int RX10_TEMP24 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP22 = X10_TEMP32 .regSize ; 
RX10_TEMP22 = RX10_TEMP22 - RX10_TEMP24 ; const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP23 = RX10_TEMP22 + SX10_TEMP4 ; 
for ( int SX10_TEMP5 = 0 ; SX10_TEMP5 < RX10_TEMP23 ; SX10_TEMP5 ++ ) 
{ const int RX10_TEMP20 = SX10_TEMP5 ; 
const int RX10_TEMP25 = RX10_TEMP20 ; 
struct Point1 RX10_TEMP21 = regionOrdinalPoint1 ( X10_TEMP32 , RX10_TEMP25 ) ; 
const int j = RX10_TEMP21 .f0 ; 
/* async ( X10_TEMP33 )  */ 
{ struct Point2 RX10_TEMP26  ; 
Point2_Point2( &RX10_TEMP26/*Assignment*/, i , j ) ; 
struct Dist2 RX10_TEMP27 = ft .distValue ; 
struct Region2 RX10_TEMP28 = RX10_TEMP27 .dReg ; 
const int RX10_TEMP29 = searchPointInRegion2 ( RX10_TEMP28 , RX10_TEMP26 ) ; 
const int RX10_TEMP30 = 0 ; 
const int RX10_TEMP31 = RX10_TEMP29 < RX10_TEMP30 ; 
if ( RX10_TEMP31 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP32 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP32 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP33 = getPlaceFromDist2 ( RX10_TEMP27 , RX10_TEMP29 ) ; 
const int RX10_TEMP35 = /* here  */ 0 ; 
const int RX10_TEMP36 = RX10_TEMP33 != RX10_TEMP35 ; 
if ( RX10_TEMP36 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP34 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP34 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP37 = getRefArrayValue2Complex ( ft , RX10_TEMP29 ) ; 
struct Complex X10_TEMP39 = RX10_TEMP37 ; 
const double X10_TEMP40 = Complex_getImag ( X10_TEMP39 ) ; 
const double X10_TEMP42 = N * X10_TEMP40 ; 
const double X10_TEMP43 = X10_TEMP42 ; 
struct Point3 RX10_TEMP38  ; 
Point3_Point3( &RX10_TEMP38/*Assignment*/, i , j , index ) ; 
struct Dist3 RX10_TEMP39 = table .distValue ; 
struct Region3 RX10_TEMP40 = RX10_TEMP39 .dReg ; 
const int RX10_TEMP41 = searchPointInRegion3 ( RX10_TEMP40 , RX10_TEMP38 ) ; 
const int RX10_TEMP42 = 0 ; 
const int RX10_TEMP43 = RX10_TEMP41 < RX10_TEMP42 ; 
if ( RX10_TEMP43 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP44 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP44 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP45 = getPlaceFromDist3 ( RX10_TEMP39 , RX10_TEMP41 ) ; 
const int RX10_TEMP47 = /* here  */ 0 ; 
const int RX10_TEMP48 = RX10_TEMP45 != RX10_TEMP47 ; 
if ( RX10_TEMP48 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP46 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP46 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP41 , X10_TEMP43 ) ; 
} 

} 

const int X10_TEMP47 = 0 ; 
const int X10_TEMP50 = 0 ; 
struct Point2 RX10_TEMP49  ; 
Point2_Point2( &RX10_TEMP49/*Assignment*/, i , X10_TEMP50 ) ; 
struct Dist2 RX10_TEMP50 = ft .distValue ; 
struct Region2 RX10_TEMP51 = RX10_TEMP50 .dReg ; 
const int RX10_TEMP52 = searchPointInRegion2 ( RX10_TEMP51 , RX10_TEMP49 ) ; 
const int RX10_TEMP53 = 0 ; 
const int RX10_TEMP54 = RX10_TEMP52 < RX10_TEMP53 ; 
if ( RX10_TEMP54 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP55 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP55 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP56 = getPlaceFromDist2 ( RX10_TEMP50 , RX10_TEMP52 ) ; 
const int RX10_TEMP58 = /* here  */ 0 ; 
const int RX10_TEMP59 = RX10_TEMP56 != RX10_TEMP58 ; 
if ( RX10_TEMP59 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP57 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP57 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP60 = getRefArrayValue2Complex ( ft , RX10_TEMP52 ) ; 
struct Complex X10_TEMP51 = RX10_TEMP60 ; 
const double X10_TEMP52 = Complex_getReal ( X10_TEMP51 ) ; 
const double X10_TEMP54 = N * X10_TEMP52 ; 
const double X10_TEMP55 = X10_TEMP54 ; 
struct Point3 RX10_TEMP61  ; 
Point3_Point3( &RX10_TEMP61/*Assignment*/, i , X10_TEMP47 , index ) ; 
struct Dist3 RX10_TEMP62 = table .distValue ; 
struct Region3 RX10_TEMP63 = RX10_TEMP62 .dReg ; 
const int RX10_TEMP64 = searchPointInRegion3 ( RX10_TEMP63 , RX10_TEMP61 ) ; 
const int RX10_TEMP65 = 0 ; 
const int RX10_TEMP66 = RX10_TEMP64 < RX10_TEMP65 ; 
if ( RX10_TEMP66 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP67 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP67 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP68 = getPlaceFromDist3 ( RX10_TEMP62 , RX10_TEMP64 ) ; 
const int RX10_TEMP70 = /* here  */ 0 ; 
const int RX10_TEMP71 = RX10_TEMP68 != RX10_TEMP70 ; 
if ( RX10_TEMP71 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP69 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP69 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP64 , X10_TEMP55 ) ; 
struct Point2 RX10_TEMP72  ; 
Point2_Point2( &RX10_TEMP72/*Assignment*/, i , y ) ; 
struct Dist2 RX10_TEMP73 = ft .distValue ; 
struct Region2 RX10_TEMP74 = RX10_TEMP73 .dReg ; 
const int RX10_TEMP75 = searchPointInRegion2 ( RX10_TEMP74 , RX10_TEMP72 ) ; 
const int RX10_TEMP76 = 0 ; 
const int RX10_TEMP77 = RX10_TEMP75 < RX10_TEMP76 ; 
if ( RX10_TEMP77 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP78 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP78 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP79 = getPlaceFromDist2 ( RX10_TEMP73 , RX10_TEMP75 ) ; 
const int RX10_TEMP81 = /* here  */ 0 ; 
const int RX10_TEMP82 = RX10_TEMP79 != RX10_TEMP81 ; 
if ( RX10_TEMP82 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP80 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP80 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP83 = getRefArrayValue2Complex ( ft , RX10_TEMP75 ) ; 
struct Complex X10_TEMP61 = RX10_TEMP83 ; 
const double X10_TEMP62 = Complex_getReal ( X10_TEMP61 ) ; 
const double X10_TEMP64 = N * X10_TEMP62 ; 
const double X10_TEMP65 = X10_TEMP64 ; 
struct Point3 RX10_TEMP84  ; 
Point3_Point3( &RX10_TEMP84/*Assignment*/, i , y , index ) ; 
struct Dist3 RX10_TEMP85 = table .distValue ; 
struct Region3 RX10_TEMP86 = RX10_TEMP85 .dReg ; 
const int RX10_TEMP87 = searchPointInRegion3 ( RX10_TEMP86 , RX10_TEMP84 ) ; 
const int RX10_TEMP88 = 0 ; 
const int RX10_TEMP89 = RX10_TEMP87 < RX10_TEMP88 ; 
if ( RX10_TEMP89 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP90 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP90 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP91 = getPlaceFromDist3 ( RX10_TEMP85 , RX10_TEMP87 ) ; 
const int RX10_TEMP93 = /* here  */ 0 ; 
const int RX10_TEMP94 = RX10_TEMP91 != RX10_TEMP93 ; 
if ( RX10_TEMP94 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP92 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP92 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP87 , X10_TEMP65 ) ; 
} 

} 

} 

const int X10_TEMP66 = /* here  */ 0 ; 
const int X10_TEMP68 = /* X10_TEMP66 . isFirst ( )  */ 1 ; 
if ( X10_TEMP68 ) 
{ const int X10_TEMP72 = 1 ; 
const int X10_TEMP70 = 1 ; 
const int X10_TEMP73 = y - X10_TEMP70 ; 
struct Region1 X10_TEMP75 = createNewRegion1R ( X10_TEMP72 , X10_TEMP73 ) ; 
const int X10_TEMP76 = /* here  */ 0 ; 
const int RX10_TEMP99 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP97 = X10_TEMP75 .regSize ; 
RX10_TEMP97 = RX10_TEMP97 - RX10_TEMP99 ; const int SX10_TEMP6 = 1 ; 
const int RX10_TEMP98 = RX10_TEMP97 + SX10_TEMP6 ; 
for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < RX10_TEMP98 ; SX10_TEMP7 ++ ) 
{ const int RX10_TEMP95 = SX10_TEMP7 ; 
const int RX10_TEMP100 = RX10_TEMP95 ; 
struct Point1 RX10_TEMP96 = regionOrdinalPoint1 ( X10_TEMP75 , RX10_TEMP100 ) ; 
const int i1 = RX10_TEMP96 .f0 ; 
/* async ( X10_TEMP76 )  */ 
{ const int X10_TEMP77 = 2 ; 
const int X10_TEMP78 = X10_TEMP77 * y ; 
const int i2 = X10_TEMP78 - i1 ; 
const int X10_TEMP83 = 0 ; 
const int X10_TEMP86 = 0 ; 
struct Point2 RX10_TEMP101  ; 
Point2_Point2( &RX10_TEMP101/*Assignment*/, X10_TEMP86 , i1 ) ; 
struct Dist2 RX10_TEMP102 = ft .distValue ; 
struct Region2 RX10_TEMP103 = RX10_TEMP102 .dReg ; 
const int RX10_TEMP104 = searchPointInRegion2 ( RX10_TEMP103 , RX10_TEMP101 ) ; 
const int RX10_TEMP105 = 0 ; 
const int RX10_TEMP106 = RX10_TEMP104 < RX10_TEMP105 ; 
if ( RX10_TEMP106 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP107 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP107 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP108 = getPlaceFromDist2 ( RX10_TEMP102 , RX10_TEMP104 ) ; 
const int RX10_TEMP110 = /* here  */ 0 ; 
const int RX10_TEMP111 = RX10_TEMP108 != RX10_TEMP110 ; 
if ( RX10_TEMP111 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP109 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP109 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP112 = getRefArrayValue2Complex ( ft , RX10_TEMP104 ) ; 
struct Complex X10_TEMP87 = RX10_TEMP112 ; 
const double X10_TEMP88 = Complex_getImag ( X10_TEMP87 ) ; 
const double X10_TEMP90 = N * X10_TEMP88 ; 
const double X10_TEMP91 = X10_TEMP90 ; 
struct Point3 RX10_TEMP113  ; 
Point3_Point3( &RX10_TEMP113/*Assignment*/, X10_TEMP83 , i1 , index ) ; 
struct Dist3 RX10_TEMP114 = table .distValue ; 
struct Region3 RX10_TEMP115 = RX10_TEMP114 .dReg ; 
const int RX10_TEMP116 = searchPointInRegion3 ( RX10_TEMP115 , RX10_TEMP113 ) ; 
const int RX10_TEMP117 = 0 ; 
const int RX10_TEMP118 = RX10_TEMP116 < RX10_TEMP117 ; 
if ( RX10_TEMP118 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP119 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP119 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP120 = getPlaceFromDist3 ( RX10_TEMP114 , RX10_TEMP116 ) ; 
const int RX10_TEMP122 = /* here  */ 0 ; 
const int RX10_TEMP123 = RX10_TEMP120 != RX10_TEMP122 ; 
if ( RX10_TEMP123 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP121 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP121 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP116 , X10_TEMP91 ) ; 
const int X10_TEMP97 = 0 ; 
struct Point2 RX10_TEMP124  ; 
Point2_Point2( &RX10_TEMP124/*Assignment*/, X10_TEMP97 , i2 ) ; 
struct Dist2 RX10_TEMP125 = ft .distValue ; 
struct Region2 RX10_TEMP126 = RX10_TEMP125 .dReg ; 
const int RX10_TEMP127 = searchPointInRegion2 ( RX10_TEMP126 , RX10_TEMP124 ) ; 
const int RX10_TEMP128 = 0 ; 
const int RX10_TEMP129 = RX10_TEMP127 < RX10_TEMP128 ; 
if ( RX10_TEMP129 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP130 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP130 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP131 = getPlaceFromDist2 ( RX10_TEMP125 , RX10_TEMP127 ) ; 
const int RX10_TEMP133 = /* here  */ 0 ; 
const int RX10_TEMP134 = RX10_TEMP131 != RX10_TEMP133 ; 
if ( RX10_TEMP134 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP132 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP132 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP135 = getRefArrayValue2Complex ( ft , RX10_TEMP127 ) ; 
struct Complex X10_TEMP98 = RX10_TEMP135 ; 
const double X10_TEMP99 = Complex_getImag ( X10_TEMP98 ) ; 
const double X10_TEMP101 = N * X10_TEMP99 ; 
const double X10_TEMP102 = X10_TEMP101 ; 
struct Point3 RX10_TEMP136  ; 
Point3_Point3( &RX10_TEMP136/*Assignment*/, x , i1 , index ) ; 
struct Dist3 RX10_TEMP137 = table .distValue ; 
struct Region3 RX10_TEMP138 = RX10_TEMP137 .dReg ; 
const int RX10_TEMP139 = searchPointInRegion3 ( RX10_TEMP138 , RX10_TEMP136 ) ; 
const int RX10_TEMP140 = 0 ; 
const int RX10_TEMP141 = RX10_TEMP139 < RX10_TEMP140 ; 
if ( RX10_TEMP141 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP142 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP142 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP143 = getPlaceFromDist3 ( RX10_TEMP137 , RX10_TEMP139 ) ; 
const int RX10_TEMP145 = /* here  */ 0 ; 
const int RX10_TEMP146 = RX10_TEMP143 != RX10_TEMP145 ; 
if ( RX10_TEMP146 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP144 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP144 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP139 , X10_TEMP102 ) ; 
} 

} 

const int X10_TEMP106 = 0 ; 
const int X10_TEMP107 = 0 ; 
const int X10_TEMP110 = 0 ; 
const int X10_TEMP111 = 0 ; 
struct Point2 RX10_TEMP147  ; 
Point2_Point2( &RX10_TEMP147/*Assignment*/, X10_TEMP110 , X10_TEMP111 ) ; 
struct Dist2 RX10_TEMP148 = ft .distValue ; 
struct Region2 RX10_TEMP149 = RX10_TEMP148 .dReg ; 
const int RX10_TEMP150 = searchPointInRegion2 ( RX10_TEMP149 , RX10_TEMP147 ) ; 
const int RX10_TEMP151 = 0 ; 
const int RX10_TEMP152 = RX10_TEMP150 < RX10_TEMP151 ; 
if ( RX10_TEMP152 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP153 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP153 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP154 = getPlaceFromDist2 ( RX10_TEMP148 , RX10_TEMP150 ) ; 
const int RX10_TEMP156 = /* here  */ 0 ; 
const int RX10_TEMP157 = RX10_TEMP154 != RX10_TEMP156 ; 
if ( RX10_TEMP157 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP155 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP155 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP158 = getRefArrayValue2Complex ( ft , RX10_TEMP150 ) ; 
struct Complex X10_TEMP112 = RX10_TEMP158 ; 
const double X10_TEMP113 = Complex_getReal ( X10_TEMP112 ) ; 
const double X10_TEMP115 = N * X10_TEMP113 ; 
const double X10_TEMP116 = X10_TEMP115 ; 
struct Point3 RX10_TEMP159  ; 
Point3_Point3( &RX10_TEMP159/*Assignment*/, X10_TEMP106 , X10_TEMP107 , index ) ; 
struct Dist3 RX10_TEMP160 = table .distValue ; 
struct Region3 RX10_TEMP161 = RX10_TEMP160 .dReg ; 
const int RX10_TEMP162 = searchPointInRegion3 ( RX10_TEMP161 , RX10_TEMP159 ) ; 
const int RX10_TEMP163 = 0 ; 
const int RX10_TEMP164 = RX10_TEMP162 < RX10_TEMP163 ; 
if ( RX10_TEMP164 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP165 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP165 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP166 = getPlaceFromDist3 ( RX10_TEMP160 , RX10_TEMP162 ) ; 
const int RX10_TEMP168 = /* here  */ 0 ; 
const int RX10_TEMP169 = RX10_TEMP166 != RX10_TEMP168 ; 
if ( RX10_TEMP169 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP167 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP167 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP162 , X10_TEMP116 ) ; 
const int X10_TEMP120 = 0 ; 
const int X10_TEMP123 = 0 ; 
const int X10_TEMP124 = 0 ; 
struct Point2 RX10_TEMP170  ; 
Point2_Point2( &RX10_TEMP170/*Assignment*/, X10_TEMP123 , X10_TEMP124 ) ; 
struct Dist2 RX10_TEMP171 = ft .distValue ; 
struct Region2 RX10_TEMP172 = RX10_TEMP171 .dReg ; 
const int RX10_TEMP173 = searchPointInRegion2 ( RX10_TEMP172 , RX10_TEMP170 ) ; 
const int RX10_TEMP174 = 0 ; 
const int RX10_TEMP175 = RX10_TEMP173 < RX10_TEMP174 ; 
if ( RX10_TEMP175 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP176 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP176 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP177 = getPlaceFromDist2 ( RX10_TEMP171 , RX10_TEMP173 ) ; 
const int RX10_TEMP179 = /* here  */ 0 ; 
const int RX10_TEMP180 = RX10_TEMP177 != RX10_TEMP179 ; 
if ( RX10_TEMP180 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP178 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP178 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP181 = getRefArrayValue2Complex ( ft , RX10_TEMP173 ) ; 
struct Complex X10_TEMP125 = RX10_TEMP181 ; 
const double X10_TEMP126 = Complex_getImag ( X10_TEMP125 ) ; 
const double X10_TEMP128 = N * X10_TEMP126 ; 
const double X10_TEMP129 = X10_TEMP128 ; 
struct Point3 RX10_TEMP182  ; 
Point3_Point3( &RX10_TEMP182/*Assignment*/, x , X10_TEMP120 , index ) ; 
struct Dist3 RX10_TEMP183 = table .distValue ; 
struct Region3 RX10_TEMP184 = RX10_TEMP183 .dReg ; 
const int RX10_TEMP185 = searchPointInRegion3 ( RX10_TEMP184 , RX10_TEMP182 ) ; 
const int RX10_TEMP186 = 0 ; 
const int RX10_TEMP187 = RX10_TEMP185 < RX10_TEMP186 ; 
if ( RX10_TEMP187 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP188 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP188 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP189 = getPlaceFromDist3 ( RX10_TEMP183 , RX10_TEMP185 ) ; 
const int RX10_TEMP191 = /* here  */ 0 ; 
const int RX10_TEMP192 = RX10_TEMP189 != RX10_TEMP191 ; 
if ( RX10_TEMP192 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP190 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP190 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP185 , X10_TEMP129 ) ; 
const int X10_TEMP133 = 0 ; 
const int X10_TEMP136 = 0 ; 
struct Point2 RX10_TEMP193  ; 
Point2_Point2( &RX10_TEMP193/*Assignment*/, X10_TEMP136 , y ) ; 
struct Dist2 RX10_TEMP194 = ft .distValue ; 
struct Region2 RX10_TEMP195 = RX10_TEMP194 .dReg ; 
const int RX10_TEMP196 = searchPointInRegion2 ( RX10_TEMP195 , RX10_TEMP193 ) ; 
const int RX10_TEMP197 = 0 ; 
const int RX10_TEMP198 = RX10_TEMP196 < RX10_TEMP197 ; 
if ( RX10_TEMP198 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP199 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP199 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP200 = getPlaceFromDist2 ( RX10_TEMP194 , RX10_TEMP196 ) ; 
const int RX10_TEMP202 = /* here  */ 0 ; 
const int RX10_TEMP203 = RX10_TEMP200 != RX10_TEMP202 ; 
if ( RX10_TEMP203 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP201 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP201 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP204 = getRefArrayValue2Complex ( ft , RX10_TEMP196 ) ; 
struct Complex X10_TEMP137 = RX10_TEMP204 ; 
const double X10_TEMP138 = Complex_getReal ( X10_TEMP137 ) ; 
const double X10_TEMP140 = N * X10_TEMP138 ; 
const double X10_TEMP141 = X10_TEMP140 ; 
struct Point3 RX10_TEMP205  ; 
Point3_Point3( &RX10_TEMP205/*Assignment*/, X10_TEMP133 , y , index ) ; 
struct Dist3 RX10_TEMP206 = table .distValue ; 
struct Region3 RX10_TEMP207 = RX10_TEMP206 .dReg ; 
const int RX10_TEMP208 = searchPointInRegion3 ( RX10_TEMP207 , RX10_TEMP205 ) ; 
const int RX10_TEMP209 = 0 ; 
const int RX10_TEMP210 = RX10_TEMP208 < RX10_TEMP209 ; 
if ( RX10_TEMP210 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP211 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP211 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP212 = getPlaceFromDist3 ( RX10_TEMP206 , RX10_TEMP208 ) ; 
const int RX10_TEMP214 = /* here  */ 0 ; 
const int RX10_TEMP215 = RX10_TEMP212 != RX10_TEMP214 ; 
if ( RX10_TEMP215 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP213 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP213 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP208 , X10_TEMP141 ) ; 
const int X10_TEMP147 = 0 ; 
struct Point2 RX10_TEMP216  ; 
Point2_Point2( &RX10_TEMP216/*Assignment*/, X10_TEMP147 , y ) ; 
struct Dist2 RX10_TEMP217 = ft .distValue ; 
struct Region2 RX10_TEMP218 = RX10_TEMP217 .dReg ; 
const int RX10_TEMP219 = searchPointInRegion2 ( RX10_TEMP218 , RX10_TEMP216 ) ; 
const int RX10_TEMP220 = 0 ; 
const int RX10_TEMP221 = RX10_TEMP219 < RX10_TEMP220 ; 
if ( RX10_TEMP221 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP222 = "Array access index out of bounds" ; 
fprintf(stderr, RX10_TEMP222 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP223 = getPlaceFromDist2 ( RX10_TEMP217 , RX10_TEMP219 ) ; 
const int RX10_TEMP225 = /* here  */ 0 ; 
const int RX10_TEMP226 = RX10_TEMP223 != RX10_TEMP225 ; 
if ( RX10_TEMP226 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP224 = "Bad place access for array ft" ; 
fprintf(stderr, RX10_TEMP224 ) ; 
exit(EXIT_FAILURE);
} 

struct Complex RX10_TEMP227 = getRefArrayValue2Complex ( ft , RX10_TEMP219 ) ; 
struct Complex X10_TEMP148 = RX10_TEMP227 ; 
const double X10_TEMP149 = Complex_getImag ( X10_TEMP148 ) ; 
const double X10_TEMP151 = N * X10_TEMP149 ; 
const double X10_TEMP152 = X10_TEMP151 ; 
struct Point3 RX10_TEMP228  ; 
Point3_Point3( &RX10_TEMP228/*Assignment*/, x , y , index ) ; 
struct Dist3 RX10_TEMP229 = table .distValue ; 
struct Region3 RX10_TEMP230 = RX10_TEMP229 .dReg ; 
const int RX10_TEMP231 = searchPointInRegion3 ( RX10_TEMP230 , RX10_TEMP228 ) ; 
const int RX10_TEMP232 = 0 ; 
const int RX10_TEMP233 = RX10_TEMP231 < RX10_TEMP232 ; 
if ( RX10_TEMP233 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP234 = "Array index out of bounds" ; 
fprintf(stderr, RX10_TEMP234 ) ; 
exit(EXIT_FAILURE);
} 

const int RX10_TEMP235 = getPlaceFromDist3 ( RX10_TEMP229 , RX10_TEMP231 ) ; 
const int RX10_TEMP237 = /* here  */ 0 ; 
const int RX10_TEMP238 = RX10_TEMP235 != RX10_TEMP237 ; 
if ( RX10_TEMP238 ) 
{ /*UpdatableVariableDeclaration*/char * RX10_TEMP236 = "Bad place access for array table" ; 
fprintf(stderr, RX10_TEMP236 ) ; 
exit(EXIT_FAILURE);
} 

setRefArrayValue3double ( table , RX10_TEMP231 , X10_TEMP152 ) ; 
} 

} 

} 

} 

} 

} 

double PoissonSolver_potentialField ( struct PoissonSolver *PoissonSolverTEMP, const double r , const double ari , const double affp ) 
{ const double X10_TEMP1 = /*program*/_PoissonSolver_PI4I ; 
const double anorm = affp * X10_TEMP1 ; 
const int X10_TEMP3 = 0 ; 
const int X10_TEMP5 = ari > X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const double X10_TEMP6 = 0.0; 
const int X10_TEMP8 = r == X10_TEMP6 ; 
if ( X10_TEMP8 ) 
{ const double X10_TEMP9 = /*program*/_PoissonSolver_SQT2PI ; 
const double X10_TEMP10 = anorm * X10_TEMP9 ; 
const double X10_TEMP12 = X10_TEMP10 * ari ; 
return X10_TEMP12 ; 
} 
else 
{ const double X10_TEMP14 = /*program*/_PoissonSolver_SQT2I ; 
const double X10_TEMP15 = r * X10_TEMP14 ; 
const double X10_TEMP17 = X10_TEMP15 * ari ; 
const double X10_TEMP18 = PoissonSolver_errorFn ( PoissonSolverTEMP, X10_TEMP17 ) ; 
const double X10_TEMP19 = anorm * X10_TEMP18 ; 
const double X10_TEMP21 = X10_TEMP19 / r ; 
return X10_TEMP21 ; 
} 


} 
else 
{ const double X10_TEMP22 = 0.0; 
const int X10_TEMP24 = r == X10_TEMP22 ; 
if ( X10_TEMP24 ) 
{ const double X10_TEMP26 = 0.0; 
return X10_TEMP26 ; 
} 
else 
{ const double X10_TEMP28 = anorm / r ; 
return X10_TEMP28 ; 
} 


} 


} 

double PoissonSolver_particleShape ( struct PoissonSolver *PoissonSolverTEMP, const double r , const double ari , const double affp ) 
{ const double X10_TEMP1 = 0.5; 
const double X10_TEMP2 = /*program*/_PoissonSolver_SQT2PI ; 
const double X10_TEMP3 = X10_TEMP1 * X10_TEMP2 ; 
const double X10_TEMP6 = X10_TEMP3 * ari ; 
const int X10_TEMP7 = 2 ; 
const double X10_TEMP8 = pow ( X10_TEMP6 , X10_TEMP7 ) ; 
const double anorm = affp * X10_TEMP8 ; 
const double X10_TEMP10 = 0.0; 
const int X10_TEMP12 = ari > X10_TEMP10 ; 
if ( X10_TEMP12 ) 
{ const double X10_TEMP13 = 0.0; 
const int X10_TEMP15 = r == X10_TEMP13 ; 
if ( X10_TEMP15 ) 
{ return anorm ; 
} 
else 
{ const double X10_TEMP17 = /*program*/_PoissonSolver_SQT2I ; 
const double X10_TEMP18 = r * X10_TEMP17 ; 
const double X10_TEMP21 = X10_TEMP18 * ari ; 
const double X10_TEMP22 = 8.0; 
const double at1 = X10Util_minDouble ( X10_TEMP21 , X10_TEMP22 ) ; 
const double X10_TEMP25 = at1 * at1 ; 
const int X10_TEMP26 = 0 ; 
const double X10_TEMP28 = X10_TEMP26 - X10_TEMP25 ; 
const double X10_TEMP29 = exp ( X10_TEMP28 ) ; 
const double X10_TEMP31 = anorm * X10_TEMP29 ; 
return X10_TEMP31 ; 
} 


} 
else 
{ const double X10_TEMP32 = 0.0; 
const int X10_TEMP34 = r == X10_TEMP32 ; 
if ( X10_TEMP34 ) 
{ return affp ; 
} 
else 
{ const double X10_TEMP37 = 0.0; 
return X10_TEMP37 ; 
} 


} 


} 

double PoissonSolver_radialElectricField ( struct PoissonSolver *PoissonSolverTEMP, const double r , const double ari , const double affp ) 
{ const double X10_TEMP1 = /*program*/_PoissonSolver_PI4I ; 
const double anorm = affp * X10_TEMP1 ; 
const double X10_TEMP3 = 0.0; 
const int X10_TEMP5 = ari > X10_TEMP3 ; 
if ( X10_TEMP5 ) 
{ const double X10_TEMP6 = 0.0; 
const int X10_TEMP8 = r == X10_TEMP6 ; 
if ( X10_TEMP8 ) 
{ const double X10_TEMP10 = 0.0; 
return X10_TEMP10 ; 
} 
else 
{ const double X10_TEMP11 = 1.0; 
const double ri = X10_TEMP11 / r ; 
const double X10_TEMP13 = /*program*/_PoissonSolver_SQT2I ; 
const double X10_TEMP14 = r * X10_TEMP13 ; 
const double X10_TEMP17 = X10_TEMP14 * ari ; 
const double X10_TEMP18 = 8.0; 
const double at1 = X10Util_minDouble ( X10_TEMP17 , X10_TEMP18 ) ; 
const double X10_TEMP35 = anorm * ri ; 
const double X10_TEMP22 = PoissonSolver_errorFn ( PoissonSolverTEMP, at1 ) ; 
const double X10_TEMP31 = X10_TEMP22 * ri ; 
const double X10_TEMP23 = /*program*/_PoissonSolver_SQT2PI ; 
const double X10_TEMP29 = X10_TEMP23 * ari ; 
const double X10_TEMP25 = at1 * at1 ; 
const int X10_TEMP26 = 0 ; 
const double X10_TEMP28 = X10_TEMP26 - X10_TEMP25 ; 
const double X10_TEMP30 = exp ( X10_TEMP28 ) ; 
const double X10_TEMP32 = X10_TEMP29 * X10_TEMP30 ; 
const double X10_TEMP34 = X10_TEMP31 - X10_TEMP32 ; 
const double X10_TEMP37 = X10_TEMP35 * X10_TEMP34 ; 
return X10_TEMP37 ; 
} 


} 
else 
{ const double X10_TEMP38 = 0.0; 
const int X10_TEMP40 = r == X10_TEMP38 ; 
if ( X10_TEMP40 ) 
{ const double X10_TEMP42 = 0.0; 
return X10_TEMP42 ; 
} 
else 
{ const double X10_TEMP44 = r * r ; 
const double X10_TEMP46 = anorm / X10_TEMP44 ; 
return X10_TEMP46 ; 
} 


} 


} 

double PoissonSolver_errorFn ( struct PoissonSolver *PoissonSolverTEMP, const double x ) 
{ const double p = 0.3275911; 
const double a1 = 0.254829592; 
const double X10_TEMP3 = 0.284496736; 
const int X10_TEMP4 = 0 ; 
const double a2 = X10_TEMP4 - X10_TEMP3 ; 
const double a3 = 1.421413741; 
const double X10_TEMP7 = 1.453152027; 
const int X10_TEMP8 = 0 ; 
const double a4 = X10_TEMP8 - X10_TEMP7 ; 
const double a5 = 1.061405429; 
const double f = fabs ( x ) ; 
const double X10_TEMP17 = 1.0; 
const double X10_TEMP13 = 1.0; 
const double X10_TEMP14 = p * f ; 
const double X10_TEMP16 = X10_TEMP13 + X10_TEMP14 ; 
const double t = X10_TEMP17 / X10_TEMP16 ; 
/*UpdatableVariableDeclaration*/double ret = 0.0; 
const double X10_TEMP20 = 8.0; 
const int X10_TEMP22 = f <= X10_TEMP20 ; 
if ( X10_TEMP22 ) 
{ const double X10_TEMP41 = 1.0; 
const double X10_TEMP23 = t * a5 ; 
const double X10_TEMP25 = a4 + X10_TEMP23 ; 
const double X10_TEMP26 = t * X10_TEMP25 ; 
const double X10_TEMP28 = a3 + X10_TEMP26 ; 
const double X10_TEMP29 = t * X10_TEMP28 ; 
const double X10_TEMP31 = a2 + X10_TEMP29 ; 
const double X10_TEMP32 = t * X10_TEMP31 ; 
const double X10_TEMP34 = a1 + X10_TEMP32 ; 
const double X10_TEMP39 = t * X10_TEMP34 ; 
const int X10_TEMP35 = 0 ; 
const double X10_TEMP36 = X10_TEMP35 - x ; 
const double X10_TEMP38 = X10_TEMP36 * x ; 
const double X10_TEMP40 = exp ( X10_TEMP38 ) ; 
const double X10_TEMP42 = X10_TEMP39 * X10_TEMP40 ; 
const double X10_TEMP44 = X10_TEMP41 - X10_TEMP42 ; 
ret = X10_TEMP44 ; } 
else 
{ const double X10_TEMP46 = 1.0; 
ret = X10_TEMP46 ; } 


const int X10_TEMP47 = 0 ; 
const int X10_TEMP49 = x < X10_TEMP47 ; 
if ( X10_TEMP49 ) 
{ const int X10_TEMP50 = 0 ; 
const double X10_TEMP52 = X10_TEMP50 - ret ; 
ret = X10_TEMP52 ; } 

return ret ; 
} 


Random *Random_Random ( struct Random *RandomTEMP) 
{ const int X10_TEMP2 = 0 ; 
RandomTEMP->flag = ( X10_TEMP2 ) ; 
const double X10_TEMP4 = 0.0; 
RandomTEMP->r0 = ( X10_TEMP4 ) ; 
const int X10_TEMP6 = 885098780 ; 
RandomTEMP->r1 = ( X10_TEMP6 ) ; 
const int X10_TEMP8 = 1824280461 ; 
RandomTEMP->r2 = ( X10_TEMP8 ) ; 
const int X10_TEMP10 = 1396483093 ; 
RandomTEMP->r4 = ( X10_TEMP10 ) ; 
const int X10_TEMP12 = 55318673 ; 
RandomTEMP->r5 = ( X10_TEMP12 ) ; 
const double X10_TEMP14 = 65531.0; 
RandomTEMP->h1l = ( X10_TEMP14 ) ; 
const double X10_TEMP16 = 32767.0; 
RandomTEMP->h1u = ( X10_TEMP16 ) ; 
const double X10_TEMP18 = 65525.0; 
RandomTEMP->h2l = ( X10_TEMP18 ) ; 

 return  RandomTEMP; 

} 


Timer *Timer_Timer ( struct Timer *TimerTEMP) 
{ const int X10_TEMP3 = 0 ; 
const int X10_TEMP4 = /*program*/_Timer_max_counters ; 
struct Region1 X10_TEMP5 = createNewRegion1R ( X10_TEMP3 , X10_TEMP4 ) ; 
const int X10_TEMP6 = /* place.FIRST_PLACE  */ 0 ; 
struct Dist1 d = getPlaceDist1 ( X10_TEMP5 , X10_TEMP6 ) ; 
struct Region1 RX10_TEMP0 = d .dReg ; 
const int RX10_TEMP1 = 0 ; 
const int RX10_TEMP2 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP3 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP3 = RX10_TEMP3 - RX10_TEMP2 ; const int SX10_TEMP0 = 1 ; 
const int RX10_TEMP4 = RX10_TEMP3 + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int RX10_TEMP5 = RX10_TEMP3 + SX10_TEMP1 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP6 = (doubleStub *)calloc(RX10_TEMP5,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP3 = 0 ; SX10_TEMP3 < RX10_TEMP4 ; SX10_TEMP3 ++ ) 
{ const int RX10_TEMP7 = SX10_TEMP3 ; 
const int RX10_TEMP8 = /* here  */ 0 ; 
const int RX10_TEMP9 = RX10_TEMP7 ; 
const int RX10_TEMP10 = /* place.places ( RX10_TEMP9 )  */ 0 
; 
const int RX10_TEMP11 = getDistLocalCount1 ( d , RX10_TEMP9 ) ; 
const int RX10_TEMP12 = RX10_TEMP11 - RX10_TEMP2 ; 
/* async ( RX10_TEMP10 )  */ 
{ const int SX10_TEMP4 = 1 ; 
const int RX10_TEMP14 = RX10_TEMP12 + SX10_TEMP4 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP5 = (double *)calloc(RX10_TEMP14,sizeof( double )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < RX10_TEMP14 ; SX10_TEMP6 ++ ) 
{ const int RX10_TEMP13 = SX10_TEMP6 ; 
const double X10_TEMP9 = 0 ; 
SX10_TEMP5 [ RX10_TEMP13 ] = X10_TEMP9 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP15 = SX10_TEMP5 ; 
struct doubleStub RX10_TEMP16  ; 
doubleStub_doubleStub( &RX10_TEMP16/*Assignment*/, RX10_TEMP15 ) ; 
/* async ( RX10_TEMP8 )  */ 
{ RX10_TEMP6 [ RX10_TEMP7 ] = RX10_TEMP16 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP7 = (doubleStub *)calloc(RX10_TEMP4,sizeof( doubleStub )); 
for ( int SX10_TEMP8 = 0 ; SX10_TEMP8 < RX10_TEMP4 ; SX10_TEMP8 ++ ) 
{ const int RX10_TEMP19 = SX10_TEMP8 ; 
struct doubleStub RX10_TEMP18 = RX10_TEMP6 [ RX10_TEMP19 ] 
; 
SX10_TEMP7 [ RX10_TEMP19 ] = RX10_TEMP18 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP17 = SX10_TEMP7 ; 
struct doubleRefArray1 RX10_TEMP20  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP20/*Assignment*/, d , RX10_TEMP17 ) ; 
struct doubleRefArray1 X10_TEMP11 = RX10_TEMP20 ; 
TimerTEMP->start_time = ( X10_TEMP11 ) ; 
struct Region1 RX10_TEMP21 = d .dReg ; 
const int RX10_TEMP22 = 0 ; 
const int RX10_TEMP23 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP24 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP24 = RX10_TEMP24 - RX10_TEMP23 ; const int SX10_TEMP9 = 1 ; 
const int RX10_TEMP25 = RX10_TEMP24 + SX10_TEMP9 ; 
const int SX10_TEMP10 = 1 ; 
const int RX10_TEMP26 = RX10_TEMP24 + SX10_TEMP10 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP27 = (doubleStub *)calloc(RX10_TEMP26,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP12 = 0 ; SX10_TEMP12 < RX10_TEMP25 ; SX10_TEMP12 ++ ) 
{ const int RX10_TEMP28 = SX10_TEMP12 ; 
const int RX10_TEMP29 = /* here  */ 0 ; 
const int RX10_TEMP30 = RX10_TEMP28 ; 
const int RX10_TEMP31 = /* place.places ( RX10_TEMP30 )  */ 0 
; 
const int RX10_TEMP32 = getDistLocalCount1 ( d , RX10_TEMP30 ) ; 
const int RX10_TEMP33 = RX10_TEMP32 - RX10_TEMP23 ; 
/* async ( RX10_TEMP31 )  */ 
{ const int SX10_TEMP13 = 1 ; 
const int RX10_TEMP35 = RX10_TEMP33 + SX10_TEMP13 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP14 = (double *)calloc(RX10_TEMP35,sizeof( double )); 
for ( int SX10_TEMP15 = 0 ; SX10_TEMP15 < RX10_TEMP35 ; SX10_TEMP15 ++ ) 
{ const int RX10_TEMP34 = SX10_TEMP15 ; 
const double X10_TEMP13 = 0 ; 
SX10_TEMP14 [ RX10_TEMP34 ] = X10_TEMP13 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP36 = SX10_TEMP14 ; 
struct doubleStub RX10_TEMP37  ; 
doubleStub_doubleStub( &RX10_TEMP37/*Assignment*/, RX10_TEMP36 ) ; 
/* async ( RX10_TEMP29 )  */ 
{ RX10_TEMP27 [ RX10_TEMP28 ] = RX10_TEMP37 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP16 = (doubleStub *)calloc(RX10_TEMP25,sizeof( doubleStub )); 
for ( int SX10_TEMP17 = 0 ; SX10_TEMP17 < RX10_TEMP25 ; SX10_TEMP17 ++ ) 
{ const int RX10_TEMP40 = SX10_TEMP17 ; 
struct doubleStub RX10_TEMP39 = RX10_TEMP27 [ RX10_TEMP40 ] 
; 
SX10_TEMP16 [ RX10_TEMP40 ] = RX10_TEMP39 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP38 = SX10_TEMP16 ; 
struct doubleRefArray1 RX10_TEMP41  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP41/*Assignment*/, d , RX10_TEMP38 ) ; 
struct doubleRefArray1 X10_TEMP15 = RX10_TEMP41 ; 
TimerTEMP->elapsed_time = ( X10_TEMP15 ) ; 
struct Region1 RX10_TEMP42 = d .dReg ; 
const int RX10_TEMP43 = 0 ; 
const int RX10_TEMP44 = 1 ; 
/*UpdatableVariableDeclaration*/int RX10_TEMP45 = /* place.MAX_PLACES  */ 1 ; 
RX10_TEMP45 = RX10_TEMP45 - RX10_TEMP44 ; const int SX10_TEMP18 = 1 ; 
const int RX10_TEMP46 = RX10_TEMP45 + SX10_TEMP18 ; 
const int SX10_TEMP19 = 1 ; 
const int RX10_TEMP47 = RX10_TEMP45 + SX10_TEMP19 ; 
/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP48 = (doubleStub *)calloc(RX10_TEMP47,sizeof( doubleStub )); 
/* finish  */ 
{ for ( int SX10_TEMP21 = 0 ; SX10_TEMP21 < RX10_TEMP46 ; SX10_TEMP21 ++ ) 
{ const int RX10_TEMP49 = SX10_TEMP21 ; 
const int RX10_TEMP50 = /* here  */ 0 ; 
const int RX10_TEMP51 = RX10_TEMP49 ; 
const int RX10_TEMP52 = /* place.places ( RX10_TEMP51 )  */ 0 
; 
const int RX10_TEMP53 = getDistLocalCount1 ( d , RX10_TEMP51 ) ; 
const int RX10_TEMP54 = RX10_TEMP53 - RX10_TEMP44 ; 
/* async ( RX10_TEMP52 )  */ 
{ const int SX10_TEMP22 = 1 ; 
const int RX10_TEMP56 = RX10_TEMP54 + SX10_TEMP22 ; 
/*Updatable ARRAY*/ double * const SX10_TEMP23 = (double *)calloc(RX10_TEMP56,sizeof( double )); 
for ( int SX10_TEMP24 = 0 ; SX10_TEMP24 < RX10_TEMP56 ; SX10_TEMP24 ++ ) 
{ const int RX10_TEMP55 = SX10_TEMP24 ; 
const double X10_TEMP17 = 0 ; 
SX10_TEMP23 [ RX10_TEMP55 ] = X10_TEMP17 ; 
} 

/*Updatable ARRAY*/ double * const RX10_TEMP57 = SX10_TEMP23 ; 
struct doubleStub RX10_TEMP58  ; 
doubleStub_doubleStub( &RX10_TEMP58/*Assignment*/, RX10_TEMP57 ) ; 
/* async ( RX10_TEMP50 )  */ 
{ RX10_TEMP48 [ RX10_TEMP49 ] = RX10_TEMP58 ; 
} 

} 

} 

} 

/*Updatable ARRAY*/ struct doubleStub * const SX10_TEMP25 = (doubleStub *)calloc(RX10_TEMP46,sizeof( doubleStub )); 
for ( int SX10_TEMP26 = 0 ; SX10_TEMP26 < RX10_TEMP46 ; SX10_TEMP26 ++ ) 
{ const int RX10_TEMP61 = SX10_TEMP26 ; 
struct doubleStub RX10_TEMP60 = RX10_TEMP48 [ RX10_TEMP61 ] 
; 
SX10_TEMP25 [ RX10_TEMP61 ] = RX10_TEMP60 ; 
} 

/*Updatable ARRAY*/ struct doubleStub * const RX10_TEMP59 = SX10_TEMP25 ; 
struct doubleRefArray1 RX10_TEMP62  ; 
doubleRefArray1_doubleRefArray1( &RX10_TEMP62/*Assignment*/, d , RX10_TEMP59 ) ; 
struct doubleRefArray1 X10_TEMP19 = RX10_TEMP62 ; 
TimerTEMP->total_time = ( X10_TEMP19 ) ; 

 return  TimerTEMP; 

} 

X10Util * X10Util_X10Util(struct X10Util * X10UtilTEMP){return X10UtilTEMP;}


Point2 Point2_Point2 ( struct Point2 *Point2TEMP, const int f0_ , const int f1_ ) 
{ Point2TEMP->f0 = ( f0_ ) ; 
Point2TEMP->f1 = ( f1_ ) ; 

 return  *Point2TEMP; 

} 

Point1 Point1_Point1 ( struct Point1 *Point1TEMP, const int f0_ ) 
{ Point1TEMP->f0 = ( f0_ ) ; 

 return  *Point1TEMP; 

} 

Dist Dist_Dist ( struct Dist *DistTEMP, /*Updatable ARRAY*/ int * const vPlaceArray , const int arraySize ) 
{ const int one = 1 ; 
const int zero = 0 ; 
const int maxPlaces = /* place.MAX_PLACES  */ 1 ; 
const int ub = maxPlaces - one ; 
const int SX10_TEMP0 = 1 ; 
const int countReg = ub + SX10_TEMP0 ; 
const int SX10_TEMP1 = 1 ; 
const int countDist = ub + SX10_TEMP1 ; 
const int rSize = arraySize - one ; 
const int SX10_TEMP2 = 1 ; 
const int arrayReg = rSize + SX10_TEMP2 ; 
const int SX10_TEMP3 = 1 ; 
const int runSumDist = rSize + SX10_TEMP3 ; 
/*Updatable ARRAY*/ int * const tempCounts = (int *)calloc(countDist,sizeof( int )); 
/*Updatable ARRAY*/ int * const tempRunSum = (int *)calloc(runSumDist,sizeof( int )); 
for ( int SX10_TEMP6 = 0 ; SX10_TEMP6 < countReg ; SX10_TEMP6 ++ ) 
{ const int p = SX10_TEMP6 ; 
tempCounts [ p ] = zero ; 
} 

for ( int SX10_TEMP7 = 0 ; SX10_TEMP7 < arrayReg ; SX10_TEMP7 ++ ) 
{ const int p = SX10_TEMP7 ; 
const int pl = vPlaceArray [ p ] 
; 
const int index = /* pl . id  */ 0 ; 
const int oldVal = tempCounts [ index ] 
; 
tempRunSum [ p ] = oldVal ; 
const int oldValPlusOne = oldVal + one ; 
tempCounts [ index ] = oldValPlusOne ; 
} 

DistTEMP->placeArray = ( vPlaceArray ) ; 
/*Updatable ARRAY*/ int * const tempCountsV = initDist ( tempCounts , countReg ) ; 
DistTEMP->counts = ( tempCountsV ) ; 
/*Updatable ARRAY*/ int * const tempRunSumV = initDist ( tempRunSum , arrayReg ) ; 
DistTEMP->runningSum = ( tempRunSumV ) ; 

 return  *DistTEMP; 

} 

ParticleRefArray2 ParticleRefArray2_ParticleRefArray2 ( struct ParticleRefArray2 *ParticleRefArray2TEMP,  struct Dist2 const distValue_ , /*Updatable ARRAY*/ struct ParticleStub * const contents_ ) 
{ ParticleRefArray2TEMP->distValue = ( distValue_ ) ; 
ParticleRefArray2TEMP->contents = ( contents_ ) ; 

 return  *ParticleRefArray2TEMP; 

} 

Dist2 Dist2_Dist2 ( struct Dist2 *Dist2TEMP,  struct Region2 const dReg_ ,  struct Dist const dDist_ ) 
{ Dist2TEMP->dReg = ( dReg_ ) ; 
Dist2TEMP->dDist = ( dDist_ ) ; 

 return  *Dist2TEMP; 

} 

Dist3 Dist3_Dist3 ( struct Dist3 *Dist3TEMP,  struct Region3 const dReg_ ,  struct Dist const dDist_ ) 
{ Dist3TEMP->dReg = ( dReg_ ) ; 
Dist3TEMP->dDist = ( dDist_ ) ; 

 return  *Dist3TEMP; 

} 

Dist1 Dist1_Dist1 ( struct Dist1 *Dist1TEMP,  struct Region1 const dReg_ ,  struct Dist const dDist_ ) 
{ Dist1TEMP->dReg = ( dReg_ ) ; 
Dist1TEMP->dDist = ( dDist_ ) ; 

 return  *Dist1TEMP; 

} 

Region2 Region2_Region2_2( struct Region2 *Region2TEMP, /*Updatable ARRAY*/ struct Point2 * const pointArray_ , const int regSize_ ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int minusOne = zero - one ; 
const int f = 0 ; 
const int regR = 2 ; 
Region2TEMP->regRank = ( regR ) ; 
Region2TEMP->regSize = ( regSize_ ) ; 
Region2TEMP->pointArray = ( pointArray_ ) ; 
Region2TEMP->regType = ( f ) ; 
Region2TEMP->low0 = ( minusOne ) ; 
Region2TEMP->dim0 = ( zero ) ; 
Region2TEMP->low1 = ( minusOne ) ; 
Region2TEMP->dim1 = ( zero ) ; 

 return  *Region2TEMP; 

} 

Region2 Region2_Region2_6( struct Region2 *Region2TEMP, /*Updatable ARRAY*/ struct Point2 * const pointArray_ , const int regSize_ , const int low0_ , const int dim0_ , const int low1_ , const int dim1_ ) 
{ const int t = 1 ; 
const int regR = 2 ; 
Region2TEMP->regRank = ( regR ) ; 
Region2TEMP->regSize = ( regSize_ ) ; 
Region2TEMP->pointArray = ( pointArray_ ) ; 
Region2TEMP->regType = ( t ) ; 
Region2TEMP->low0 = ( low0_ ) ; 
Region2TEMP->dim0 = ( dim0_ ) ; 
Region2TEMP->low1 = ( low1_ ) ; 
Region2TEMP->dim1 = ( dim1_ ) ; 

 return  *Region2TEMP; 

} 

Region1 Region1_Region1_2( struct Region1 *Region1TEMP, /*Updatable ARRAY*/ struct Point1 * const pointArray_ , const int regSize_ ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int minusOne = zero - one ; 
const int f = 0 ; 
const int regR = 1 ; 
Region1TEMP->regRank = ( regR ) ; 
Region1TEMP->regSize = ( regSize_ ) ; 
Region1TEMP->pointArray = ( pointArray_ ) ; 
Region1TEMP->regType = ( f ) ; 
Region1TEMP->low0 = ( minusOne ) ; 
Region1TEMP->dim0 = ( zero ) ; 

 return  *Region1TEMP; 

} 

Region1 Region1_Region1_4( struct Region1 *Region1TEMP, /*Updatable ARRAY*/ struct Point1 * const pointArray_ , const int regSize_ , const int low0_ , const int dim0_ ) 
{ const int t = 1 ; 
const int regR = 1 ; 
Region1TEMP->regRank = ( regR ) ; 
Region1TEMP->regSize = ( regSize_ ) ; 
Region1TEMP->pointArray = ( pointArray_ ) ; 
Region1TEMP->regType = ( t ) ; 
Region1TEMP->low0 = ( low0_ ) ; 
Region1TEMP->dim0 = ( dim0_ ) ; 

 return  *Region1TEMP; 

} 

ParticleStub ParticleStub_ParticleStub ( struct ParticleStub *ParticleStubTEMP, /*Updatable ARRAY*/ struct Particle * const localArray_ ) 
{ ParticleStubTEMP->localArray = ( localArray_ ) ; 

 return  *ParticleStubTEMP; 

} 

intStub intStub_intStub ( struct intStub *intStubTEMP, /*Updatable ARRAY*/ int * const localArray_ ) 
{ intStubTEMP->localArray = ( localArray_ ) ; 

 return  *intStubTEMP; 

} 

doubleRefArray1 doubleRefArray1_doubleRefArray1 ( struct doubleRefArray1 *doubleRefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct doubleStub * const contents_ ) 
{ doubleRefArray1TEMP->distValue = ( distValue_ ) ; 
doubleRefArray1TEMP->contents = ( contents_ ) ; 

 return  *doubleRefArray1TEMP; 

} 

Region3 Region3_Region3_2( struct Region3 *Region3TEMP, /*Updatable ARRAY*/ struct Point3 * const pointArray_ , const int regSize_ ) 
{ const int zero = 0 ; 
const int one = 1 ; 
const int minusOne = zero - one ; 
const int f = 0 ; 
const int regR = 3 ; 
Region3TEMP->regRank = ( regR ) ; 
Region3TEMP->regSize = ( regSize_ ) ; 
Region3TEMP->pointArray = ( pointArray_ ) ; 
Region3TEMP->regType = ( f ) ; 
Region3TEMP->low0 = ( minusOne ) ; 
Region3TEMP->dim0 = ( zero ) ; 
Region3TEMP->low1 = ( minusOne ) ; 
Region3TEMP->dim1 = ( zero ) ; 
Region3TEMP->low2 = ( minusOne ) ; 
Region3TEMP->dim2 = ( zero ) ; 

 return  *Region3TEMP; 

} 

Region3 Region3_Region3_8( struct Region3 *Region3TEMP, /*Updatable ARRAY*/ struct Point3 * const pointArray_ , const int regSize_ , const int low0_ , const int dim0_ , const int low1_ , const int dim1_ , const int low2_ , const int dim2_ ) 
{ const int t = 1 ; 
const int regR = 3 ; 
Region3TEMP->regRank = ( regR ) ; 
Region3TEMP->regSize = ( regSize_ ) ; 
Region3TEMP->pointArray = ( pointArray_ ) ; 
Region3TEMP->regType = ( t ) ; 
Region3TEMP->low0 = ( low0_ ) ; 
Region3TEMP->dim0 = ( dim0_ ) ; 
Region3TEMP->low1 = ( low1_ ) ; 
Region3TEMP->dim1 = ( dim1_ ) ; 
Region3TEMP->low2 = ( low2_ ) ; 
Region3TEMP->dim2 = ( dim2_ ) ; 

 return  *Region3TEMP; 

} 

intRefArray1 intRefArray1_intRefArray1 ( struct intRefArray1 *intRefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct intStub * const contents_ ) 
{ intRefArray1TEMP->distValue = ( distValue_ ) ; 
intRefArray1TEMP->contents = ( contents_ ) ; 

 return  *intRefArray1TEMP; 

} 

ParticleValArray1 ParticleValArray1_ParticleValArray1 ( struct ParticleValArray1 *ParticleValArray1TEMP,  struct Region1 const regionValue_ , /*Updatable ARRAY*/ struct Particle * const contents_ ) 
{ ParticleValArray1TEMP->regionValue = ( regionValue_ ) ; 
ParticleValArray1TEMP->contents = ( contents_ ) ; 

 return  *ParticleValArray1TEMP; 

} 

doubleRefArray2 doubleRefArray2_doubleRefArray2 ( struct doubleRefArray2 *doubleRefArray2TEMP,  struct Dist2 const distValue_ , /*Updatable ARRAY*/ struct doubleStub * const contents_ ) 
{ doubleRefArray2TEMP->distValue = ( distValue_ ) ; 
doubleRefArray2TEMP->contents = ( contents_ ) ; 

 return  *doubleRefArray2TEMP; 

} 

doubleStub doubleStub_doubleStub ( struct doubleStub *doubleStubTEMP, /*Updatable ARRAY*/ double * const localArray_ ) 
{ doubleStubTEMP->localArray = ( localArray_ ) ; 

 return  *doubleStubTEMP; 

} 

doubleRefArray3 doubleRefArray3_doubleRefArray3 ( struct doubleRefArray3 *doubleRefArray3TEMP,  struct Dist3 const distValue_ , /*Updatable ARRAY*/ struct doubleStub * const contents_ ) 
{ doubleRefArray3TEMP->distValue = ( distValue_ ) ; 
doubleRefArray3TEMP->contents = ( contents_ ) ; 

 return  *doubleRefArray3TEMP; 

} 

ParticleRefArray1 ParticleRefArray1_ParticleRefArray1 ( struct ParticleRefArray1 *ParticleRefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct ParticleStub * const contents_ ) 
{ ParticleRefArray1TEMP->distValue = ( distValue_ ) ; 
ParticleRefArray1TEMP->contents = ( contents_ ) ; 

 return  *ParticleRefArray1TEMP; 

} 

intValArray1 intValArray1_intValArray1 ( struct intValArray1 *intValArray1TEMP,  struct Region1 const regionValue_ , /*Updatable ARRAY*/ int * const contents_ ) 
{ intValArray1TEMP->regionValue = ( regionValue_ ) ; 
intValArray1TEMP->contents = ( contents_ ) ; 

 return  *intValArray1TEMP; 

} 

ComplexStub ComplexStub_ComplexStub ( struct ComplexStub *ComplexStubTEMP, /*Updatable ARRAY*/ struct Complex * const localArray_ ) 
{ ComplexStubTEMP->localArray = ( localArray_ ) ; 

 return  *ComplexStubTEMP; 

} 

doubleValArray2 doubleValArray2_doubleValArray2 ( struct doubleValArray2 *doubleValArray2TEMP,  struct Region2 const regionValue_ , /*Updatable ARRAY*/ double * const contents_ ) 
{ doubleValArray2TEMP->regionValue = ( regionValue_ ) ; 
doubleValArray2TEMP->contents = ( contents_ ) ; 

 return  *doubleValArray2TEMP; 

} 

Point3 Point3_Point3 ( struct Point3 *Point3TEMP, const int f0_ , const int f1_ , const int f2_ ) 
{ Point3TEMP->f0 = ( f0_ ) ; 
Point3TEMP->f1 = ( f1_ ) ; 
Point3TEMP->f2 = ( f2_ ) ; 

 return  *Point3TEMP; 

} 

ComplexRefArray2 ComplexRefArray2_ComplexRefArray2 ( struct ComplexRefArray2 *ComplexRefArray2TEMP,  struct Dist2 const distValue_ , /*Updatable ARRAY*/ struct ComplexStub * const contents_ ) 
{ ComplexRefArray2TEMP->distValue = ( distValue_ ) ; 
ComplexRefArray2TEMP->contents = ( contents_ ) ; 

 return  *ComplexRefArray2TEMP; 

} 

ComplexValArray1 ComplexValArray1_ComplexValArray1 ( struct ComplexValArray1 *ComplexValArray1TEMP,  struct Region1 const regionValue_ , /*Updatable ARRAY*/ struct Complex * const contents_ ) 
{ ComplexValArray1TEMP->regionValue = ( regionValue_ ) ; 
ComplexValArray1TEMP->contents = ( contents_ ) ; 

 return  *ComplexValArray1TEMP; 

} 

Region1Stub Region1Stub_Region1Stub ( struct Region1Stub *Region1StubTEMP, /*Updatable ARRAY*/ struct Region1 * const localArray_ ) 
{ Region1StubTEMP->localArray = ( localArray_ ) ; 

 return  *Region1StubTEMP; 

} 

booleanRefArray1 booleanRefArray1_booleanRefArray1 ( struct booleanRefArray1 *booleanRefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct booleanStub * const contents_ ) 
{ booleanRefArray1TEMP->distValue = ( distValue_ ) ; 
booleanRefArray1TEMP->contents = ( contents_ ) ; 

 return  *booleanRefArray1TEMP; 

} 

Region1RefArray1 Region1RefArray1_Region1RefArray1 ( struct Region1RefArray1 *Region1RefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct Region1Stub * const contents_ ) 
{ Region1RefArray1TEMP->distValue = ( distValue_ ) ; 
Region1RefArray1TEMP->contents = ( contents_ ) ; 

 return  *Region1RefArray1TEMP; 

} 

ComplexRefArray1 ComplexRefArray1_ComplexRefArray1 ( struct ComplexRefArray1 *ComplexRefArray1TEMP,  struct Dist1 const distValue_ , /*Updatable ARRAY*/ struct ComplexStub * const contents_ ) 
{ ComplexRefArray1TEMP->distValue = ( distValue_ ) ; 
ComplexRefArray1TEMP->contents = ( contents_ ) ; 

 return  *ComplexRefArray1TEMP; 

} 

booleanStub booleanStub_booleanStub ( struct booleanStub *booleanStubTEMP, /*Updatable ARRAY*/ int * const localArray_ ) 
{ booleanStubTEMP->localArray = ( localArray_ ) ; 

 return  *booleanStubTEMP; 

} 

ComplexValArray2 ComplexValArray2_ComplexValArray2 ( struct ComplexValArray2 *ComplexValArray2TEMP,  struct Region2 const regionValue_ , /*Updatable ARRAY*/ struct Complex * const contents_ ) 
{ ComplexValArray2TEMP->regionValue = ( regionValue_ ) ; 
ComplexValArray2TEMP->contents = ( contents_ ) ; 

 return  *ComplexValArray2TEMP; 

} 

intRefArray2 intRefArray2_intRefArray2 ( struct intRefArray2 *intRefArray2TEMP,  struct Dist2 const distValue_ , /*Updatable ARRAY*/ struct intStub * const contents_ ) 
{ intRefArray2TEMP->distValue = ( distValue_ ) ; 
intRefArray2TEMP->contents = ( contents_ ) ; 

 return  *intRefArray2TEMP; 

} 

Region2ValArray1 Region2ValArray1_Region2ValArray1 ( struct Region2ValArray1 *Region2ValArray1TEMP,  struct Region1 const regionValue_ , /*Updatable ARRAY*/ struct Region2 * const contents_ ) 
{ Region2ValArray1TEMP->regionValue = ( regionValue_ ) ; 
Region2ValArray1TEMP->contents = ( contents_ ) ; 

 return  *Region2ValArray1TEMP; 

} 
/* class RunMain */ int  main ( /*TODO*/) { GC_INIT();
UniqueDistribution = getUniqueDist ( ) ; 
_LinearESOpenPIC2D_NUMBER_OF_XBITS = _LinearESOpenPIC2D_NUMBER_OF_XBITS_init ( ) ; 
_LinearESOpenPIC2D_NUMBER_OF_YBITS = _LinearESOpenPIC2D_NUMBER_OF_YBITS_init ( ) ; 
_LinearESOpenPIC2D_PARTICLE_XDENSITY = _LinearESOpenPIC2D_PARTICLE_XDENSITY_init ( ) ; 
_LinearESOpenPIC2D_PARTICLE_YDENSITY = _LinearESOpenPIC2D_PARTICLE_YDENSITY_init ( ) ; 
_LinearESOpenPIC2D_DELTA_TIME = _LinearESOpenPIC2D_DELTA_TIME_init ( ) ; 
_LinearESOpenPIC2D_ELECTRON_CHARGE = _LinearESOpenPIC2D_ELECTRON_CHARGE_init ( ) ; 
_LinearESOpenPIC2D_THERMAL_XVELOCITY = _LinearESOpenPIC2D_THERMAL_XVELOCITY_init ( ) ; 
_LinearESOpenPIC2D_THERMAL_YVELOCITY = _LinearESOpenPIC2D_THERMAL_YVELOCITY_init ( ) ; 
_LinearESOpenPIC2D_BOUNDARY_CONDITION = _LinearESOpenPIC2D_BOUNDARY_CONDITION_init ( ) ; 
_LinearESOpenPIC2D_TIME_STEPS = _LinearESOpenPIC2D_TIME_STEPS_init ( ) ; 
_LinearESOpenPIC2D_SORT_TIME = _LinearESOpenPIC2D_SORT_TIME_init ( ) ; 
_LinearESOpenPIC2D_IMBALANCE = _LinearESOpenPIC2D_IMBALANCE_init ( ) ; 
_PoissonSolver_PI4I = _PoissonSolver_PI4I_init ( ) ; 
_PoissonSolver_SQT2I = _PoissonSolver_SQT2I_init ( ) ; 
_PoissonSolver_SQT2PI = _PoissonSolver_SQT2PI_init ( ) ; 
_PoissonSolver_GREENS_IDX = _PoissonSolver_GREENS_IDX_init ( ) ; 
_PoissonSolver_SHAPE_IDX = _PoissonSolver_SHAPE_IDX_init ( ) ; 
_PoissonSolver_ELECX_IDX = _PoissonSolver_ELECX_IDX_init ( ) ; 
_PoissonSolver_ELECY_IDX = _PoissonSolver_ELECY_IDX_init ( ) ; 
_PoissonSolver_AR = _PoissonSolver_AR_init ( ) ; 
_Timer_max_counters = _Timer_max_counters_init ( ) ; 
_X10Util_DEBUG = _X10Util_DEBUG_init ( ) ; 
_X10Util_ENABLE_CHECKS = _X10Util_ENABLE_CHECKS_init ( ) ; 
_X10Util_ERROR = _X10Util_ERROR_init ( ) ; 
_LinearESOpenPIC2D_XLENGTH = _LinearESOpenPIC2D_XLENGTH_init ( ) ; 
_LinearESOpenPIC2D_YLENGTH = _LinearESOpenPIC2D_YLENGTH_init ( ) ; 
_LinearESOpenPIC2D_NPARTICLES = _LinearESOpenPIC2D_NPARTICLES_init ( ) ; 
_LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS = _LinearESOpenPIC2D_MOVE_FIELD_TO_DIST_MAX_ROWS_init ( ) ; 
_LinearESOpenPIC2D_MOVE_PARTICLES_MAX = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_init ( ) ; 
_LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER = _LinearESOpenPIC2D_MOVE_PARTICLES_MAX_BUFFER_init ( ) ; 
runMain ( ) ; 
return 0;
} 
 const double getTIME(){
unsigned long long microsecs;
struct timeval tv; 
gettimeofday(&tv, NULL);
microsecs = ((unsigned long long)tv.tv_sec * 1000000);
microsecs += tv.tv_usec;
const double temp = (const double)microsecs;
const double temp2 = temp/1000;
return temp2; 
}
