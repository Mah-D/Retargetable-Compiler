//
// Generated by JTB 1.3.2
//

package jplasmax10.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "public"
 * nodeToken1 -> "static"
 * returnType -> ReturnType()
 * identifier -> Identifier()
 * nodeToken2 -> "("
 * nodeOptional -> ( FormalParameterList() )?
 * nodeToken3 -> ")"
 * block -> Block()
 */
public class StaticMethodDeclaration implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public ReturnType returnType;
   public Identifier identifier;
   public NodeToken nodeToken2;
   public NodeOptional nodeOptional;
   public NodeToken nodeToken3;
   public Block block;

   public StaticMethodDeclaration(NodeToken n0, NodeToken n1, ReturnType n2, Identifier n3, NodeToken n4, NodeOptional n5, NodeToken n6, Block n7) {
      nodeToken = n0;
      nodeToken1 = n1;
      returnType = n2;
      identifier = n3;
      nodeToken2 = n4;
      nodeOptional = n5;
      nodeToken3 = n6;
      block = n7;
   }

   public StaticMethodDeclaration(ReturnType n0, Identifier n1, NodeOptional n2, Block n3) {
      nodeToken = new NodeToken("public");
      nodeToken1 = new NodeToken("static");
      returnType = n0;
      identifier = n1;
      nodeToken2 = new NodeToken("(");
      nodeOptional = n2;
      nodeToken3 = new NodeToken(")");
      block = n3;
   }

   public void accept(jplasmax10.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jplasmax10.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jplasmax10.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jplasmax10.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

