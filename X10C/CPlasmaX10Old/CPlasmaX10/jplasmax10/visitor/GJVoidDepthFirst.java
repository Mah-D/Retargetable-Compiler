//
// Generated by JTB 1.3.2
//

package jplasmax10.visitor;
import java.util.*;

import jplasmax10.syntaxtree.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * programClass -> ProgramClass()
    * nodeListOptional -> ( TopLevelDeclaration() )*
    * nodeToken -> <EOF>
    */
   public void visit(File n, A argu) {
      n.mainClass.accept(this, argu);
      n.programClass.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "class"
    * identifier -> Identifier()
    * nodeToken2 -> "{"
    * nodeToken3 -> "public"
    * nodeToken4 -> "static"
    * nodeToken5 -> "void"
    * nodeToken6 -> "main"
    * nodeToken7 -> "("
    * nodeToken8 -> "String"
    * nodeToken9 -> "["
    * nodeToken10 -> "]"
    * identifier1 -> Identifier()
    * nodeToken11 -> ")"
    * nodeToken12 -> "{"
    * identifier2 -> Identifier()
    * nodeToken13 -> "."
    * identifier3 -> Identifier()
    * nodeToken14 -> "("
    * nodeToken15 -> ")"
    * nodeToken16 -> ";"
    * nodeToken17 -> "}"
    * nodeToken18 -> "}"
    */
   public void visit(MainClass n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      n.nodeToken8.accept(this, argu);
      n.nodeToken9.accept(this, argu);
      n.nodeToken10.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken11.accept(this, argu);
      n.nodeToken12.accept(this, argu);
      n.identifier2.accept(this, argu);
      n.nodeToken13.accept(this, argu);
      n.identifier3.accept(this, argu);
      n.nodeToken14.accept(this, argu);
      n.nodeToken15.accept(this, argu);
      n.nodeToken16.accept(this, argu);
      n.nodeToken17.accept(this, argu);
      n.nodeToken18.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( ConstantDeclaration() )*
    * nodeListOptional1 -> ( StaticMethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public void visit(ProgramClass n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ValueDeclaration()
    */
   public void visit(TopLevelDeclaration n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( InitializableConstantDeclaration() )*
    * nodeListOptional1 -> ( UpdatableFieldDeclaration() )*
    * nodeListOptional2 -> ( ConstructorDeclaration() )*
    * nodeListOptional3 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public void visit(ClassDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeListOptional2.accept(this, argu);
      n.nodeListOptional3.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "value"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( InitializableConstantDeclaration() )*
    * nodeListOptional1 -> ( ConstructorDeclaration() )*
    * nodeListOptional2 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public void visit(ValueDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeListOptional2.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public void visit(ConstructorDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "static"
    * nodeToken2 -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken3 -> "="
    * methodCall -> MethodCall()
    * nodeToken4 -> ";"
    */
   public void visit(ConstantDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.methodCall.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken2 -> ";"
    */
   public void visit(InitializableConstantDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> ";"
    */
   public void visit(UpdatableFieldDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "static"
    * returnType -> ReturnType()
    * identifier -> Identifier()
    * nodeToken2 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken3 -> ")"
    * block -> Block()
    */
   public void visit(StaticMethodDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.returnType.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * returnType -> ReturnType()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public void visit(MethodDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.returnType.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * finalFormalParameter -> FinalFormalParameter()
    * nodeListOptional -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n, A argu) {
      n.finalFormalParameter.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    */
   public void visit(FinalFormalParameter n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> ","
    * finalFormalParameter -> FinalFormalParameter()
    */
   public void visit(FormalParameterRest n, A argu) {
      n.nodeToken.accept(this, argu);
      n.finalFormalParameter.accept(this, argu);
   }

   /**
    * nodeChoice -> VoidType()
    *       | Type()
    */
   public void visit(ReturnType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "void"
    */
   public void visit(VoidType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeChoice -> UpdatableArrayType()
    *       | NonArrayType()
    */
   public void visit(Type n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nonArrayType -> NonArrayType()
    * nodeToken -> "["
    * nodeToken1 -> "]"
    */
   public void visit(UpdatableArrayType n, A argu) {
      n.nonArrayType.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeChoice -> BooleanType()
    *       | ByteType()
    *       | ShortType()
    *       | IntegerType()
    *       | LongType()
    *       | DoubleType()
    *       | StringType()
    *       | PlaceType()
    *       | ClassNameType()
    */
   public void visit(NonArrayType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "boolean"
    */
   public void visit(BooleanType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "byte"
    */
   public void visit(ByteType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "short"
    */
   public void visit(ShortType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "int"
    */
   public void visit(IntegerType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "long"
    */
   public void visit(LongType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "double"
    */
   public void visit(DoubleType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "String"
    */
   public void visit(StringType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "place"
    */
   public void visit(PlaceType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    */
   public void visit(ClassNameType n, A argu) {
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public void visit(Block n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeChoice -> Assignment()
    *       | ArrayAssignment()
    *       | FieldAssignment()
    *       | ThisFieldAssignment()
    *       | AsyncStatement()
    *       | Block()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | DoStatement()
    *       | FinishStatement()
    *       | IfStatement()
    *       | LoopStatement()
    *       | MethodCallStatement()
    *       | MethodCallStatementInConstructor()
    *       | PrintlnStatement()
    *       | PrintStatement()
    *       | PrintErrorStatement()
    *       | ReturnStatement()
    *       | SwitchStatement()
    *       | ThrowStatement()
    *       | WhileStatement()
    *       | FinalVariableDeclaration()
    *       | UpdatableVariableDeclaration()
    */
   public void visit(Statement n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public void visit(Assignment n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * identifierList -> IdentifierList()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * identifier1 -> Identifier()
    * nodeToken3 -> ";"
    */
   public void visit(ArrayAssignment n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifierList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "="
    * nodeToken2 -> "("
    * identifier2 -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public void visit(FieldAssignment n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.identifier2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "this"
    * nodeToken1 -> "."
    * identifier -> Identifier()
    * nodeToken2 -> "="
    * nodeToken3 -> "("
    * identifier1 -> Identifier()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public void visit(ThisFieldAssignment n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   /**
    * nodeToken -> "async"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public void visit(AsyncStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "break"
    * nodeToken1 -> ";"
    */
   public void visit(BreakStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeToken -> "continue"
    * nodeToken1 -> ";"
    */
   public void visit(ContinueStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeToken -> "do"
    * block -> Block()
    * nodeToken1 -> "while"
    * nodeToken2 -> "("
    * identifier -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public void visit(DoStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.block.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "finish"
    * block -> Block()
    */
   public void visit(FinishStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * block -> Block()
    * nodeOptional -> [ ElseClause() ]
    */
   public void visit(IfStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.block.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   /**
    * nodeToken -> "else"
    * block -> Block()
    */
   public void visit(ElseClause n, A argu) {
      n.nodeToken.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "for"
    * nodeToken1 -> "("
    * nodeToken2 -> "int"
    * identifier -> Identifier()
    * nodeToken3 -> "="
    * integerLiteral -> IntegerLiteral()
    * nodeToken4 -> ";"
    * identifier1 -> Identifier()
    * nodeToken5 -> "<"
    * identifier2 -> Identifier()
    * nodeToken6 -> ";"
    * identifier3 -> Identifier()
    * nodeToken7 -> "++"
    * nodeToken8 -> ")"
    * block -> Block()
    */
   public void visit(LoopStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.integerLiteral.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.identifier2.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.identifier3.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      n.nodeToken8.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeListOptional -> ( IdentifierRest() )*
    */
   public void visit(IdentifierList n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   /**
    * nodeToken -> ","
    * identifier -> Identifier()
    */
   public void visit(IdentifierRest n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * methodCall -> MethodCall()
    * nodeToken -> ";"
    */
   public void visit(MethodCallStatement n, A argu) {
      n.methodCall.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * methodCallInConstructor -> MethodCallInConstructor()
    * nodeToken -> ";"
    */
   public void visit(MethodCallStatementInConstructor n, A argu) {
      n.methodCallInConstructor.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(PrintlnStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "System.out.print"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(PrintStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "System.err.println"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(PrintErrorStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "return"
    * nodeOptional -> [ Identifier() ]
    * nodeToken1 -> ";"
    */
   public void visit(ReturnStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeToken -> "switch"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( SwitchEntry() )*
    * nodeToken4 -> "}"
    */
   public void visit(SwitchStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * switchLabel -> SwitchLabel()
    * nodeToken -> ":"
    * block -> Block()
    */
   public void visit(SwitchEntry n, A argu) {
      n.switchLabel.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeChoice -> Case()
    *       | Default()
    */
   public void visit(SwitchLabel n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "case"
    * identifier -> Identifier()
    */
   public void visit(Case n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> "default"
    */
   public void visit(Default n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "throw"
    * nodeToken1 -> "new"
    * nodeToken2 -> "RuntimeException"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public void visit(ThrowStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public void visit(WhileStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.block.accept(this, argu);
   }

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "="
    * expression -> Expression()
    * nodeToken2 -> ";"
    */
   public void visit(FinalVariableDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public void visit(UpdatableVariableDeclaration n, A argu) {
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * nodeChoice -> ExpressionInParentheses()
    *       | ConditionalOrExpression()
    *       | ConditionalAndExpression()
    *       | InclusiveOrExpression()
    *       | ExclusiveOrExpression()
    *       | AndExpression()
    *       | EqualsExpression()
    *       | NonEqualsExpression()
    *       | LessThanExpression()
    *       | GreaterThanExpression()
    *       | LessThanEqualExpression()
    *       | GreaterThanEqualExpression()
    *       | ShiftLeftExpression()
    *       | ShiftRightExpression()
    *       | ShiftRightUnsignedExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivideExpression()
    *       | ModulusExpression()
    *       | SinExpression()
    *       | CosExpression()
    *       | PowExpression()
    *       | ExpExpression()
    *       | SqrtExpression()
    *       | AbsExpression()
    *       | MinExpression()
    *       | MaxExpression()
    *       | LogExpression()
    *       | ComplimentExpression()
    *       | NotExpression()
    *       | CoercionToIntExpression()
    *       | CoercionToDoubleExpression()
    *       | CoercionToLongExpression()
    *       | CoercionToShortExpression()
    *       | CoercionToByteExpression()
    *       | Place()
    *       | CurrentTime()
    *       | ArrayAccess()
    *       | MethodCall()
    *       | MethodCallInConstructor()
    *       | DotId()
    *       | DotIdentifierDotGet()
    *       | DotNext()
    *       | DotPrev()
    *       | DotIsFirst()
    *       | DotIsLast()
    *       | DotLength()
    *       | DotIdentifier()
    *       | NewObject()
    *       | NewUpdatableArray()
    *       | IntegerLiteral()
    *       | LongLiteral()
    *       | HexLiteral()
    *       | FloatingPointLiteral()
    *       | StringLiteral()
    *       | True()
    *       | False()
    *       | HereLiteral()
    *       | PlaceFirstPlace()
    *       | PlaceLastPlace()
    *       | PlaceMaxPlaces()
    *       | JavaIntegerSize()
    *       | Identifier()
    */
   public void visit(Expression n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * expression -> Expression()
    * nodeToken1 -> ")"
    */
   public void visit(ExpressionInParentheses n, A argu) {
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "||"
    * identifier1 -> Identifier()
    */
   public void visit(ConditionalOrExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "&&"
    * identifier1 -> Identifier()
    */
   public void visit(ConditionalAndExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "|"
    * identifier1 -> Identifier()
    */
   public void visit(InclusiveOrExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "^"
    * identifier1 -> Identifier()
    */
   public void visit(ExclusiveOrExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "&"
    * identifier1 -> Identifier()
    */
   public void visit(AndExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "=="
    * identifier1 -> Identifier()
    */
   public void visit(EqualsExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "!="
    * identifier1 -> Identifier()
    */
   public void visit(NonEqualsExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "<"
    * identifier1 -> Identifier()
    */
   public void visit(LessThanExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> ">"
    * identifier1 -> Identifier()
    */
   public void visit(GreaterThanExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "<="
    * identifier1 -> Identifier()
    */
   public void visit(LessThanEqualExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> ">="
    * identifier1 -> Identifier()
    */
   public void visit(GreaterThanEqualExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "<<"
    * identifier1 -> Identifier()
    */
   public void visit(ShiftLeftExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> ">>"
    * identifier1 -> Identifier()
    */
   public void visit(ShiftRightExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> ">>>"
    * identifier1 -> Identifier()
    */
   public void visit(ShiftRightUnsignedExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "+"
    * identifier1 -> Identifier()
    */
   public void visit(PlusExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "-"
    * identifier1 -> Identifier()
    */
   public void visit(MinusExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "*"
    * identifier1 -> Identifier()
    */
   public void visit(TimesExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "/"
    * identifier1 -> Identifier()
    */
   public void visit(DivideExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "%"
    * identifier1 -> Identifier()
    */
   public void visit(ModulusExpression n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "sin"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(SinExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "cos"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(CosExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "pow"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public void visit(PowExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "exp"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(ExpExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "sqrt"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(SqrtExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "abs"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(AbsExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "min"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public void visit(MinExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "max"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ","
    * identifier1 -> Identifier()
    * nodeToken5 -> ")"
    */
   public void visit(MaxExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "log"
    * nodeToken3 -> "("
    * identifier -> Identifier()
    * nodeToken4 -> ")"
    */
   public void visit(LogExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "~"
    * identifier -> Identifier()
    */
   public void visit(ComplimentExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> "!"
    * identifier -> Identifier()
    */
   public void visit(NotExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "int"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public void visit(CoercionToIntExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.expression.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "double"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public void visit(CoercionToDoubleExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.expression.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "long"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public void visit(CoercionToLongExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.expression.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "short"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public void visit(CoercionToShortExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.expression.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "byte"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public void visit(CoercionToByteExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.expression.accept(this, argu);
   }

   /**
    * nodeToken -> "place.places"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    */
   public void visit(Place n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "System.currentTimeMillis"
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public void visit(CurrentTime n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * identifier1 -> Identifier()
    * nodeToken1 -> "]"
    */
   public void visit(ArrayAccess n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( IdentifierList() )?
    * nodeToken2 -> ")"
    */
   public void visit(MethodCall n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "this"
    * nodeToken1 -> "."
    * identifier -> Identifier()
    * nodeToken2 -> "("
    * nodeOptional -> ( IdentifierList() )?
    * nodeToken3 -> ")"
    */
   public void visit(MethodCallInConstructor n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "id"
    */
   public void visit(DotId n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    * nodeToken1 -> "."
    * nodeToken2 -> "get"
    * nodeToken3 -> "("
    * identifierList -> IdentifierList()
    * nodeToken4 -> ")"
    */
   public void visit(DotIdentifierDotGet n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.identifierList.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "next"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public void visit(DotNext n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "prev"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public void visit(DotPrev n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "isFirst"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public void visit(DotIsFirst n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "isLast"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public void visit(DotIsLast n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * nodeToken1 -> "length"
    */
   public void visit(DotLength n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "."
    * identifier1 -> Identifier()
    */
   public void visit(DotIdentifier n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier1.accept(this, argu);
   }

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> [ IdentifierList() ]
    * nodeToken2 -> ")"
    */
   public void visit(NewObject n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "new"
    * nonArrayType -> NonArrayType()
    * nodeToken1 -> "["
    * identifier -> Identifier()
    * nodeToken2 -> "]"
    */
   public void visit(NewUpdatableArray n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nonArrayType.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <LONG_LITERAL>
    */
   public void visit(LongLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <HEX_LITERAL>
    */
   public void visit(HexLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <FLOATING_POINT_LITERAL>
    */
   public void visit(FloatingPointLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <STRING_LITERAL>
    */
   public void visit(StringLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "true"
    */
   public void visit(True n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "false"
    */
   public void visit(False n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "here"
    */
   public void visit(HereLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "place.FIRST_PLACE"
    */
   public void visit(PlaceFirstPlace n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "place.LAST_PLACE"
    */
   public void visit(PlaceLastPlace n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "place.MAX_PLACES"
    */
   public void visit(PlaceMaxPlaces n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "java.lang.Integer.SIZE"
    */
   public void visit(JavaIntegerSize n, A argu) {
      n.nodeToken.accept(this, argu);
   }

}
