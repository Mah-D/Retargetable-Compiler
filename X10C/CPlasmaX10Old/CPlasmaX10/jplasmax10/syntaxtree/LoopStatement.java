//
// Generated by JTB 1.3.2
//

package jplasmax10.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "for"
 * nodeToken1 -> "("
 * nodeToken2 -> "int"
 * identifier -> Identifier()
 * nodeToken3 -> "="
 * integerLiteral -> IntegerLiteral()
 * nodeToken4 -> ";"
 * identifier1 -> Identifier()
 * nodeToken5 -> "<"
 * identifier2 -> Identifier()
 * nodeToken6 -> ";"
 * identifier3 -> Identifier()
 * nodeToken7 -> "++"
 * nodeToken8 -> ")"
 * block -> Block()
 */
public class LoopStatement implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public Identifier identifier;
   public NodeToken nodeToken3;
   public IntegerLiteral integerLiteral;
   public NodeToken nodeToken4;
   public Identifier identifier1;
   public NodeToken nodeToken5;
   public Identifier identifier2;
   public NodeToken nodeToken6;
   public Identifier identifier3;
   public NodeToken nodeToken7;
   public NodeToken nodeToken8;
   public Block block;

   public LoopStatement(NodeToken n0, NodeToken n1, NodeToken n2, Identifier n3, NodeToken n4, IntegerLiteral n5, NodeToken n6, Identifier n7, NodeToken n8, Identifier n9, NodeToken n10, Identifier n11, NodeToken n12, NodeToken n13, Block n14) {
      nodeToken = n0;
      nodeToken1 = n1;
      nodeToken2 = n2;
      identifier = n3;
      nodeToken3 = n4;
      integerLiteral = n5;
      nodeToken4 = n6;
      identifier1 = n7;
      nodeToken5 = n8;
      identifier2 = n9;
      nodeToken6 = n10;
      identifier3 = n11;
      nodeToken7 = n12;
      nodeToken8 = n13;
      block = n14;
   }

   public LoopStatement(Identifier n0, IntegerLiteral n1, Identifier n2, Identifier n3, Identifier n4, Block n5) {
      nodeToken = new NodeToken("for");
      nodeToken1 = new NodeToken("(");
      nodeToken2 = new NodeToken("int");
      identifier = n0;
      nodeToken3 = new NodeToken("=");
      integerLiteral = n1;
      nodeToken4 = new NodeToken(";");
      identifier1 = n2;
      nodeToken5 = new NodeToken("<");
      identifier2 = n3;
      nodeToken6 = new NodeToken(";");
      identifier3 = n4;
      nodeToken7 = new NodeToken("++");
      nodeToken8 = new NodeToken(")");
      block = n5;
   }

   public void accept(jplasmax10.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jplasmax10.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jplasmax10.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jplasmax10.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

