package jplasmax10.parser;
/* Generated By:JavaCC: Do not edit this line. JPlasmaX10Parser.java */
import java.util.Vector;

import jplasmax10.syntaxtree.*;


public class JPlasmaX10Parser implements JPlasmaX10ParserConstants {

  static final public File File() throws ParseException {
   MainClass n0;
   ProgramClass n1;
   NodeListOptional n2 = new NodeListOptional();
   TopLevelDeclaration n3;
   NodeToken n4;
   Token n5;
    n0 = MainClass();
    n1 = ProgramClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case VALUE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n3 = TopLevelDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(0);
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new File(n0,n1,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Identifier n28;
   NodeToken n29;
   Token n30;
   Identifier n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CLASS);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PUBLIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(STATIC);
                  n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(VOID);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(MAIN);
                n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(LPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(STRING);
                  n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(LSQPAREN);
             n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RSQPAREN);
             n21 = JTBToolkit.makeNodeToken(n22);
    n23 = Identifier();
    n25 = jj_consume_token(RPAREN);
             n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LBRACE);
             n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Identifier();
    n30 = jj_consume_token(DOT);
             n29 = JTBToolkit.makeNodeToken(n30);
    n31 = Identifier();
    n33 = jj_consume_token(LPAREN);
             n32 = JTBToolkit.makeNodeToken(n33);
    n35 = jj_consume_token(RPAREN);
             n34 = JTBToolkit.makeNodeToken(n35);
    n37 = jj_consume_token(SEMICOLON);
             n36 = JTBToolkit.makeNodeToken(n37);
    n39 = jj_consume_token(RBRACE);
             n38 = JTBToolkit.makeNodeToken(n39);
    n41 = jj_consume_token(RBRACE);
             n40 = JTBToolkit.makeNodeToken(n41);
     {if (true) return new MainClass(n0,n2,n4,n5,n7,n9,n11,n13,n15,n17,n19,n21,n23,n24,n26,n28,n29,n31,n32,n34,n36,n38,n40);}
    throw new Error("Missing return statement in function");
  }

  static final public ProgramClass ProgramClass() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   ConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   StaticMethodDeclaration n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_2:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_2;
      }
      n6 = ConstantDeclaration();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_3;
      }
      n8 = StaticMethodDeclaration();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ProgramClass(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public TopLevelDeclaration TopLevelDeclaration() throws ParseException {
   NodeChoice n0;
   ClassDeclaration n1;
   ValueDeclaration n2;
    if (jj_2_2(2)) {
      n1 = ClassDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE:
        n2 = ValueDeclaration();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new TopLevelDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   InitializableConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   UpdatableFieldDeclaration n8;
   NodeListOptional n9 = new NodeListOptional();
   ConstructorDeclaration n10;
   NodeListOptional n11 = new NodeListOptional();
   MethodDeclaration n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_4:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_4;
      }
      n6 = InitializableConstantDeclaration();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_5:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_5;
      }
      n8 = UpdatableFieldDeclaration();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    label_6:
    while (true) {
      if (jj_2_5(3)) {
        ;
      } else {
        break label_6;
      }
      n10 = ConstructorDeclaration();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    label_7:
    while (true) {
      if (jj_2_6(3)) {
        ;
      } else {
        break label_7;
      }
      n12 = MethodDeclaration();
        n11.addNode(n12);
    }
     n11.nodes.trimToSize();
    n14 = jj_consume_token(RBRACE);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new ClassDeclaration(n0,n2,n3,n5,n7,n9,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueDeclaration ValueDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   InitializableConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   ConstructorDeclaration n8;
   NodeListOptional n9 = new NodeListOptional();
   MethodDeclaration n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(VALUE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_8:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_8;
      }
      n6 = InitializableConstantDeclaration();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_9:
    while (true) {
      if (jj_2_8(3)) {
        ;
      } else {
        break label_9;
      }
      n8 = ConstructorDeclaration();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    label_10:
    while (true) {
      if (jj_2_9(3)) {
        ;
      } else {
        break label_10;
      }
      n10 = MethodDeclaration();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(RBRACE);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ValueDeclaration(n0,n2,n3,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n6 = FormalParameterList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Block();
     {if (true) return new ConstructorDeclaration(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantDeclaration ConstantDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Type n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   MethodCall n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATIC);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(FINAL);
                n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Type();
    n7 = Identifier();
    n9 = jj_consume_token(ASSIGN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = MethodCall();
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ConstantDeclaration(n0,n2,n4,n6,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public InitializableConstantDeclaration InitializableConstantDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FINAL);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
    n5 = Identifier();
    n7 = jj_consume_token(SEMICOLON);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new InitializableConstantDeclaration(n0,n2,n4,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableFieldDeclaration UpdatableFieldDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new UpdatableFieldDeclaration(n0,n2,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public StaticMethodDeclaration StaticMethodDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ReturnType n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   FormalParameterList n9;
   NodeToken n10;
   Token n11;
   Block n12;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATIC);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ReturnType();
    n5 = Identifier();
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n9 = FormalParameterList();
        n8.addNode(n9);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = Block();
     {if (true) return new StaticMethodDeclaration(n0,n2,n4,n5,n6,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   ReturnType n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   Block n10;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ReturnType();
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n7 = FormalParameterList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Block();
     {if (true) return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterList FormalParameterList() throws ParseException {
   FinalFormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;
    n0 = FinalFormalParameter();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_11;
      }
      n2 = FormalParameterRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FormalParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalFormalParameter FinalFormalParameter() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
     {if (true) return new FinalFormalParameter(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterRest FormalParameterRest() throws ParseException {
   NodeToken n0;
   Token n1;
   FinalFormalParameter n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FinalFormalParameter();
     {if (true) return new FormalParameterRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnType ReturnType() throws ParseException {
   NodeChoice n0;
   VoidType n1;
   Type n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n1 = VoidType();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case LONG:
    case SHORT:
    case BYTE:
    case PLACE:
    case IDENTIFIER:
      n2 = Type();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReturnType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public VoidType VoidType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(VOID);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new VoidType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   UpdatableArrayType n1;
   NonArrayType n2;
    if (jj_2_10(2147483647)) {
      n1 = UpdatableArrayType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case STRING:
      case DOUBLE:
      case LONG:
      case SHORT:
      case BYTE:
      case PLACE:
      case IDENTIFIER:
        n2 = NonArrayType();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableArrayType UpdatableArrayType() throws ParseException {
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = NonArrayType();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(RSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new UpdatableArrayType(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public NonArrayType NonArrayType() throws ParseException {
   NodeChoice n0;
   BooleanType n1;
   ByteType n2;
   ShortType n3;
   IntegerType n4;
   LongType n5;
   DoubleType n6;
   StringType n7;
   PlaceType n8;
   ClassNameType n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      n1 = BooleanType();
        n0 = new NodeChoice(n1, 0);
      break;
    case BYTE:
      n2 = ByteType();
        n0 = new NodeChoice(n2, 1);
      break;
    case SHORT:
      n3 = ShortType();
        n0 = new NodeChoice(n3, 2);
      break;
    case INTEGER:
      n4 = IntegerType();
        n0 = new NodeChoice(n4, 3);
      break;
    case LONG:
      n5 = LongType();
        n0 = new NodeChoice(n5, 4);
      break;
    case DOUBLE:
      n6 = DoubleType();
        n0 = new NodeChoice(n6, 5);
      break;
    case STRING:
      n7 = StringType();
        n0 = new NodeChoice(n7, 6);
      break;
    case PLACE:
      n8 = PlaceType();
        n0 = new NodeChoice(n8, 7);
      break;
    case IDENTIFIER:
      n9 = ClassNameType();
        n0 = new NodeChoice(n9, 8);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NonArrayType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ByteType ByteType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BYTE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ByteType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ShortType ShortType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(SHORT);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShortType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LongType LongType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LONG);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new LongType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DoubleType DoubleType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DOUBLE);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DoubleType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringType StringType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceType PlaceType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PLACE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassNameType ClassNameType() throws ParseException {
   Identifier n0;
    n0 = Identifier();
     {if (true) return new ClassNameType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case FINAL:
      case IF:
      case WHILE:
      case BOOLEAN:
      case INTEGER:
      case RETURN:
      case STRING:
      case THIS:
      case PRINTLN:
      case PRINT:
      case PRINTERROR:
      case BREAK:
      case THROW:
      case DOUBLE:
      case LONG:
      case SHORT:
      case BYTE:
      case SWITCH:
      case FINISH:
      case PLACE:
      case CONTINUE:
      case DO:
      case FOR:
      case ASYNC:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_12;
      }
      n3 = Statement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Assignment n1;
   ArrayAssignment n2;
   FieldAssignment n3;
   ThisFieldAssignment n4;
   AsyncStatement n5;
   Block n6;
   BreakStatement n7;
   ContinueStatement n8;
   DoStatement n9;
   FinishStatement n10;
   IfStatement n11;
   LoopStatement n12;
   MethodCallStatement n13;
   MethodCallStatementInConstructor n14;
   PrintlnStatement n15;
   PrintStatement n16;
   PrintErrorStatement n17;
   ReturnStatement n18;
   SwitchStatement n19;
   ThrowStatement n20;
   WhileStatement n21;
   FinalVariableDeclaration n22;
   UpdatableVariableDeclaration n23;
    if (jj_2_11(2147483647)) {
      n1 = Assignment();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_12(2147483647)) {
      n2 = ArrayAssignment();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_13(2147483647)) {
      n3 = FieldAssignment();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_14(2147483647)) {
      n4 = ThisFieldAssignment();
        n0 = new NodeChoice(n4, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASYNC:
        n5 = AsyncStatement();
        n0 = new NodeChoice(n5, 4);
        break;
      case LBRACE:
        n6 = Block();
        n0 = new NodeChoice(n6, 5);
        break;
      case BREAK:
        n7 = BreakStatement();
        n0 = new NodeChoice(n7, 6);
        break;
      case CONTINUE:
        n8 = ContinueStatement();
        n0 = new NodeChoice(n8, 7);
        break;
      case DO:
        n9 = DoStatement();
        n0 = new NodeChoice(n9, 8);
        break;
      case FINISH:
        n10 = FinishStatement();
        n0 = new NodeChoice(n10, 9);
        break;
      case IF:
        n11 = IfStatement();
        n0 = new NodeChoice(n11, 10);
        break;
      case FOR:
        n12 = LoopStatement();
        n0 = new NodeChoice(n12, 11);
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_15(2147483647)) {
          n13 = MethodCallStatement();
        n0 = new NodeChoice(n13, 12);
        } else if (jj_2_16(2147483647)) {
          n14 = MethodCallStatementInConstructor();
        n0 = new NodeChoice(n14, 13);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PRINTLN:
            n15 = PrintlnStatement();
        n0 = new NodeChoice(n15, 14);
            break;
          case PRINT:
            n16 = PrintStatement();
        n0 = new NodeChoice(n16, 15);
            break;
          case PRINTERROR:
            n17 = PrintErrorStatement();
        n0 = new NodeChoice(n17, 16);
            break;
          case RETURN:
            n18 = ReturnStatement();
        n0 = new NodeChoice(n18, 17);
            break;
          case SWITCH:
            n19 = SwitchStatement();
        n0 = new NodeChoice(n19, 18);
            break;
          case THROW:
            n20 = ThrowStatement();
        n0 = new NodeChoice(n20, 19);
            break;
          case WHILE:
            n21 = WhileStatement();
        n0 = new NodeChoice(n21, 20);
            break;
          case FINAL:
            n22 = FinalVariableDeclaration();
        n0 = new NodeChoice(n22, 21);
            break;
          default:
            jj_la1[12] = jj_gen;
            if (jj_2_17(2147483647)) {
              n23 = UpdatableVariableDeclaration();
        n0 = new NodeChoice(n23, 22);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Assignment Assignment() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Assignment(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAssignment ArrayAssignment() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   IdentifierList n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n0 = Identifier();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = IdentifierList();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(ASSIGN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(SEMICOLON);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ArrayAssignment(n0,n1,n3,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public FieldAssignment FieldAssignment() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new FieldAssignment(n0,n1,n3,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public ThisFieldAssignment ThisFieldAssignment() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(ASSIGN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Identifier();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(SEMICOLON);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ThisFieldAssignment(n0,n2,n4,n5,n7,n9,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public AsyncStatement AsyncStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Block n7;
    n1 = jj_consume_token(ASYNC);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new AsyncStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStatement BreakStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new BreakStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ContinueStatement ContinueStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ContinueStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public DoStatement DoStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Block n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Block();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoStatement(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public FinishStatement FinishStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Block n2;
    n1 = jj_consume_token(FINISH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Block();
     {if (true) return new FinishStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Block n7;
   NodeOptional n8 = new NodeOptional();
   ElseClause n9;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n9 = ElseClause();
        n8.addNode(n9);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseClause ElseClause() throws ParseException {
   NodeToken n0;
   Token n1;
   Block n2;
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Block();
     {if (true) return new ElseClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LoopStatement LoopStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;
   NodeToken n7;
   Token n8;
   IntegerLiteral n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   Identifier n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Block n23;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER);
              n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier();
    n8 = jj_consume_token(ASSIGN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = IntegerLiteral();
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = Identifier();
    n14 = jj_consume_token(LT);
             n13 = JTBToolkit.makeNodeToken(n14);
    n15 = Identifier();
    n17 = jj_consume_token(SEMICOLON);
             n16 = JTBToolkit.makeNodeToken(n17);
    n18 = Identifier();
    n20 = jj_consume_token(124);
              n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RPAREN);
             n21 = JTBToolkit.makeNodeToken(n22);
    n23 = Block();
     {if (true) return new LoopStatement(n0,n2,n4,n6,n7,n9,n10,n12,n13,n15,n16,n18,n19,n21,n23);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;
    n0 = Identifier();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 123:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_13;
      }
      n2 = IdentifierRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierRest IdentifierRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(123);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new IdentifierRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodCallStatement MethodCallStatement() throws ParseException {
   MethodCall n0;
   NodeToken n1;
   Token n2;
    n0 = MethodCall();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new MethodCallStatement(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodCallStatementInConstructor MethodCallStatementInConstructor() throws ParseException {
   MethodCallInConstructor n0;
   NodeToken n1;
   Token n2;
    n0 = MethodCallInConstructor();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new MethodCallStatementInConstructor(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnStatement PrintlnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINTLN);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintlnStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINT);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintErrorStatement PrintErrorStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINTERROR);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintErrorStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Identifier n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n3 = Identifier();
        n2.addNode(n3);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchStatement SwitchStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   SwitchEntry n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULT_TOKEN:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_14;
      }
      n10 = SwitchEntry();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(RBRACE);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new SwitchStatement(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchEntry SwitchEntry() throws ParseException {
   SwitchLabel n0;
   NodeToken n1;
   Token n2;
   Block n3;
    n0 = SwitchLabel();
    n2 = jj_consume_token(125);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Block();
     {if (true) return new SwitchEntry(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchLabel SwitchLabel() throws ParseException {
   NodeChoice n0;
   Case n1;
   Default n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      n1 = Case();
        n0 = new NodeChoice(n1, 0);
      break;
    case DEFAULT_TOKEN:
      n2 = Default();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SwitchLabel(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Case Case() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(CASE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new Case(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Default Default() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(DEFAULT_TOKEN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Default(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ThrowStatement ThrowStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NEW);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RUNTIMEEXCEPTION);
                           n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ThrowStatement(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Block n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalVariableDeclaration FinalVariableDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FinalVariableDeclaration(n0,n2,n3,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableVariableDeclaration UpdatableVariableDeclaration() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(ASSIGN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new UpdatableVariableDeclaration(n0,n1,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   ExpressionInParentheses n1;
   ConditionalOrExpression n2;
   ConditionalAndExpression n3;
   InclusiveOrExpression n4;
   ExclusiveOrExpression n5;
   AndExpression n6;
   EqualsExpression n7;
   NonEqualsExpression n8;
   LessThanExpression n9;
   GreaterThanExpression n10;
   LessThanEqualExpression n11;
   GreaterThanEqualExpression n12;
   ShiftLeftExpression n13;
   ShiftRightExpression n14;
   ShiftRightUnsignedExpression n15;
   PlusExpression n16;
   MinusExpression n17;
   TimesExpression n18;
   DivideExpression n19;
   ModulusExpression n20;
   SinExpression n21;
   CosExpression n22;
   PowExpression n23;
   ExpExpression n24;
   SqrtExpression n25;
   AbsExpression n26;
   MinExpression n27;
   MaxExpression n28;
   LogExpression n29;
   ComplimentExpression n30;
   NotExpression n31;
   CoercionToIntExpression n32;
   CoercionToDoubleExpression n33;
   CoercionToLongExpression n34;
   CoercionToShortExpression n35;
   CoercionToByteExpression n36;
   Place n37;
   CurrentTime n38;
   ArrayAccess n39;
   MethodCall n40;
   MethodCallInConstructor n41;
   DotId n42;
   DotIdentifierDotGet n43;
   DotNext n44;
   DotPrev n45;
   DotIsFirst n46;
   DotIsLast n47;
   DotLength n48;
   DotIdentifier n49;
   NewObject n50;
   NewUpdatableArray n51;
   IntegerLiteral n52;
   LongLiteral n53;
   HexLiteral n54;
   FloatingPointLiteral n55;
   StringLiteral n56;
   True n57;
   False n58;
   HereLiteral n59;
   PlaceFirstPlace n60;
   PlaceLastPlace n61;
   PlaceMaxPlaces n62;
   JavaIntegerSize n63;
   Identifier n64;
    if (jj_2_18(2147483647)) {
      n1 = ExpressionInParentheses();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_19(4)) {
      n2 = ConditionalOrExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_20(4)) {
      n3 = ConditionalAndExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_21(4)) {
      n4 = InclusiveOrExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_22(4)) {
      n5 = ExclusiveOrExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_23(4)) {
      n6 = AndExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_24(4)) {
      n7 = EqualsExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_25(4)) {
      n8 = NonEqualsExpression();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_26(4)) {
      n9 = LessThanExpression();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_27(4)) {
      n10 = GreaterThanExpression();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_28(4)) {
      n11 = LessThanEqualExpression();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_29(4)) {
      n12 = GreaterThanEqualExpression();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_30(4)) {
      n13 = ShiftLeftExpression();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_31(4)) {
      n14 = ShiftRightExpression();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_32(4)) {
      n15 = ShiftRightUnsignedExpression();
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_33(4)) {
      n16 = PlusExpression();
        n0 = new NodeChoice(n16, 15);
    } else if (jj_2_34(4)) {
      n17 = MinusExpression();
        n0 = new NodeChoice(n17, 16);
    } else if (jj_2_35(4)) {
      n18 = TimesExpression();
        n0 = new NodeChoice(n18, 17);
    } else if (jj_2_36(4)) {
      n19 = DivideExpression();
        n0 = new NodeChoice(n19, 18);
    } else if (jj_2_37(4)) {
      n20 = ModulusExpression();
        n0 = new NodeChoice(n20, 19);
    } else if (jj_2_38(4)) {
      n21 = SinExpression();
        n0 = new NodeChoice(n21, 20);
    } else if (jj_2_39(4)) {
      n22 = CosExpression();
        n0 = new NodeChoice(n22, 21);
    } else if (jj_2_40(4)) {
      n23 = PowExpression();
        n0 = new NodeChoice(n23, 22);
    } else if (jj_2_41(4)) {
      n24 = ExpExpression();
        n0 = new NodeChoice(n24, 23);
    } else if (jj_2_42(4)) {
      n25 = SqrtExpression();
        n0 = new NodeChoice(n25, 24);
    } else if (jj_2_43(4)) {
      n26 = AbsExpression();
        n0 = new NodeChoice(n26, 25);
    } else if (jj_2_44(4)) {
      n27 = MinExpression();
        n0 = new NodeChoice(n27, 26);
    } else if (jj_2_45(4)) {
      n28 = MaxExpression();
        n0 = new NodeChoice(n28, 27);
    } else if (jj_2_46(4)) {
      n29 = LogExpression();
        n0 = new NodeChoice(n29, 28);
    } else if (jj_2_47(4)) {
      n30 = ComplimentExpression();
        n0 = new NodeChoice(n30, 29);
    } else if (jj_2_48(4)) {
      n31 = NotExpression();
        n0 = new NodeChoice(n31, 30);
    } else if (jj_2_49(4)) {
      n32 = CoercionToIntExpression();
        n0 = new NodeChoice(n32, 31);
    } else if (jj_2_50(4)) {
      n33 = CoercionToDoubleExpression();
        n0 = new NodeChoice(n33, 32);
    } else if (jj_2_51(4)) {
      n34 = CoercionToLongExpression();
        n0 = new NodeChoice(n34, 33);
    } else if (jj_2_52(4)) {
      n35 = CoercionToShortExpression();
        n0 = new NodeChoice(n35, 34);
    } else if (jj_2_53(4)) {
      n36 = CoercionToByteExpression();
        n0 = new NodeChoice(n36, 35);
    } else if (jj_2_54(4)) {
      n37 = Place();
        n0 = new NodeChoice(n37, 36);
    } else if (jj_2_55(4)) {
      n38 = CurrentTime();
        n0 = new NodeChoice(n38, 37);
    } else if (jj_2_56(4)) {
      n39 = ArrayAccess();
        n0 = new NodeChoice(n39, 38);
    } else if (jj_2_57(5)) {
      n40 = MethodCall();
        n0 = new NodeChoice(n40, 39);
    } else if (jj_2_58(5)) {
      n41 = MethodCallInConstructor();
        n0 = new NodeChoice(n41, 40);
    } else if (jj_2_59(4)) {
      n42 = DotId();
        n0 = new NodeChoice(n42, 41);
    } else if (jj_2_60(6)) {
      n43 = DotIdentifierDotGet();
        n0 = new NodeChoice(n43, 42);
    } else if (jj_2_61(4)) {
      n44 = DotNext();
        n0 = new NodeChoice(n44, 43);
    } else if (jj_2_62(4)) {
      n45 = DotPrev();
        n0 = new NodeChoice(n45, 44);
    } else if (jj_2_63(4)) {
      n46 = DotIsFirst();
        n0 = new NodeChoice(n46, 45);
    } else if (jj_2_64(4)) {
      n47 = DotIsLast();
        n0 = new NodeChoice(n47, 46);
    } else if (jj_2_65(9)) {
      n48 = DotLength();
        n0 = new NodeChoice(n48, 47);
    } else if (jj_2_66(4)) {
      n49 = DotIdentifier();
        n0 = new NodeChoice(n49, 48);
    } else if (jj_2_67(4)) {
      n50 = NewObject();
        n0 = new NodeChoice(n50, 49);
    } else if (jj_2_68(10)) {
      n51 = NewUpdatableArray();
        n0 = new NodeChoice(n51, 50);
    } else if (jj_2_69(4)) {
      n52 = IntegerLiteral();
        n0 = new NodeChoice(n52, 51);
    } else if (jj_2_70(4)) {
      n53 = LongLiteral();
        n0 = new NodeChoice(n53, 52);
    } else if (jj_2_71(4)) {
      n54 = HexLiteral();
        n0 = new NodeChoice(n54, 53);
    } else if (jj_2_72(4)) {
      n55 = FloatingPointLiteral();
        n0 = new NodeChoice(n55, 54);
    } else if (jj_2_73(4)) {
      n56 = StringLiteral();
        n0 = new NodeChoice(n56, 55);
    } else if (jj_2_74(4)) {
      n57 = True();
        n0 = new NodeChoice(n57, 56);
    } else if (jj_2_75(4)) {
      n58 = False();
        n0 = new NodeChoice(n58, 57);
    } else if (jj_2_76(4)) {
      n59 = HereLiteral();
        n0 = new NodeChoice(n59, 58);
    } else if (jj_2_77(4)) {
      n60 = PlaceFirstPlace();
        n0 = new NodeChoice(n60, 59);
    } else if (jj_2_78(4)) {
      n61 = PlaceLastPlace();
        n0 = new NodeChoice(n61, 60);
    } else if (jj_2_79(4)) {
      n62 = PlaceMaxPlaces();
        n0 = new NodeChoice(n62, 61);
    } else if (jj_2_80(4)) {
      n63 = JavaIntegerSize();
        n0 = new NodeChoice(n63, 62);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n64 = Identifier();
        n0 = new NodeChoice(n64, 63);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionInParentheses ExpressionInParentheses() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ExpressionInParentheses(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(126);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ConditionalOrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(AND);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ConditionalAndExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(127);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new InclusiveOrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(128);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ExclusiveOrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public AndExpression AndExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(129);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new AndExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualsExpression EqualsExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(130);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new EqualsExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public NonEqualsExpression NonEqualsExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(131);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new NonEqualsExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThanExpression LessThanExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(LT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new LessThanExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public GreaterThanExpression GreaterThanExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(GT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new GreaterThanExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThanEqualExpression LessThanEqualExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(132);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new LessThanEqualExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public GreaterThanEqualExpression GreaterThanEqualExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(133);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new GreaterThanEqualExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftLeftExpression ShiftLeftExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(134);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ShiftLeftExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftRightExpression ShiftRightExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(RSIGNEDSHIFT);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ShiftRightExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ShiftRightUnsignedExpression ShiftRightUnsignedExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(RUNSIGNEDSHIFT);
              n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ShiftRightUnsignedExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(PLUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(135);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DivideExpression DivideExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(136);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new DivideExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ModulusExpression ModulusExpression() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(137);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new ModulusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SinExpression SinExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SIN);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SinExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public CosExpression CosExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(COS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new CosExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public PowExpression PowExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(POW);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Identifier();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new PowExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpExpression ExpExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(EXP);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ExpExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public SqrtExpression SqrtExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SQRT);
               n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SqrtExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public AbsExpression AbsExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ABS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new AbsExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public MinExpression MinExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(MIN);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Identifier();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new MinExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public MaxExpression MaxExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(MAX);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(123);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Identifier();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new MaxExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public LogExpression LogExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LOG);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new LogExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ComplimentExpression ComplimentExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(138);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new ComplimentExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public NotExpression NotExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
    n1 = jj_consume_token(NOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new NotExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToIntExpression CoercionToIntExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTEGER);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToIntExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToDoubleExpression CoercionToDoubleExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOUBLE);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToDoubleExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToLongExpression CoercionToLongExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LONG);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToLongExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToShortExpression CoercionToShortExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SHORT);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToShortExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToByteExpression CoercionToByteExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BYTE);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToByteExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Place Place() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(PLACES);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Place(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public CurrentTime CurrentTime() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(CURRENTTIME);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new CurrentTime(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAccess ArrayAccess() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayAccess(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodCall MethodCall() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   IdentifierList n7;
   NodeToken n8;
   Token n9;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n7 = IdentifierList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new MethodCall(n0,n1,n3,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodCallInConstructor MethodCallInConstructor() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   IdentifierList n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n8 = IdentifierList();
        n7.addNode(n8);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new MethodCallInConstructor(n0,n2,n4,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public DotId DotId() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ID);
             n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new DotId(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIdentifierDotGet DotIdentifierDotGet() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   IdentifierList n10;
   NodeToken n11;
   Token n12;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(DOT);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(GET);
              n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(LPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = IdentifierList();
    n12 = jj_consume_token(RPAREN);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new DotIdentifierDotGet(n0,n1,n3,n4,n6,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public DotNext DotNext() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(NEXT);
               n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotNext(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotPrev DotPrev() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(PREV);
               n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotPrev(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIsFirst DotIsFirst() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ISFIRST);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotIsFirst(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIsLast DotIsLast() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ISLAST);
                 n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotIsLast(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotLength DotLength() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LENGTH);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new DotLength(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIdentifier DotIdentifier() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
    n0 = Identifier();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new DotIdentifier(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public NewObject NewObject() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   IdentifierList n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n6 = IdentifierList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NewObject(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public NewUpdatableArray NewUpdatableArray() throws ParseException {
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NonArrayType();
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(RSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new NewUpdatableArray(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LongLiteral LongLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LONG_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new LongLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public HexLiteral HexLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HEX_LITERAL);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new HexLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatingPointLiteral FloatingPointLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatingPointLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public True True() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TRUE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new True(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public False False() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FALSE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new False(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public HereLiteral HereLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HERE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new HereLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceFirstPlace PlaceFirstPlace() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(139);
                            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceFirstPlace(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceLastPlace PlaceLastPlace() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(140);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceLastPlace(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceMaxPlaces PlaceMaxPlaces() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(141);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceMaxPlaces(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public JavaIntegerSize JavaIntegerSize() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(142);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new JavaIntegerSize(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(138)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ISLAST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_94()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(134)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ISFIRST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(133)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(132)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(PREV)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEXT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(131)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(GET)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(130)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(129)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_93()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(142)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(128)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(141)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(127)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(140)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_92()) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(HERE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_92()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(POW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(123)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(126)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(FINAL)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(CURRENTTIME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(PLACE)) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(PLACES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(BYTE)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(137)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SHORT)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(136)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LONG)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(135)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JPlasmaX10ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000000,0x0,0x2000000,0x4000000,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x8c002000,0x8002000,0x84000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x80007,0x80006,0x80006,0x40fa0006,0x40000000,0xe20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80003c,0x80003c,0x80003c,0x80503d,0x4000,0x1001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x200000,0x200000,0x200000,0x20011a,0x11a,0x0,0x0,0x8000000,0x200000,0x480,0x480,0x200000,0x200000,0x200000,0x200000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[80];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JPlasmaX10Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JPlasmaX10Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JPlasmaX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JPlasmaX10Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JPlasmaX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JPlasmaX10Parser(JPlasmaX10ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JPlasmaX10ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[143];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 143; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 80; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
