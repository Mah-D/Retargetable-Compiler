//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(UPlasmaX10Parser)
import syntaxtree.*;
import java.util.Vector;


public class UPlasmaX10Parser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(UPlasmaX10Parser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <AND: "&&">
   | <NOT: "!">
   | <QUESTION: "?">
   | <CLASS: "class">
   | <VALUE: "value">
   | <FINAL: "final">
   | <IF: "if">
   | <ELSE: "else">
   | <FALSE: "false">
   | <TRUE: "true">
   | <WHILE: "while">
   | <VOID: "void">
   | <BOOLEAN: "boolean">
   | <INTEGER: "int">
   | <ZEROCOLON: "0 :">
   | <ATZERO: "[0]">
   | <NEW: "new">
   | <GET: "get">
   | <CONTAINS: "contains">
   | <HIGH: "high">
   | <LOW: "low">
   | <NEXT: "next">
   | <PREV: "prev">
   | <ISFIRST: "isFirst">
   | <ISLAST: "isLast">
   | <COORD: "coord">
   | <ORDINAL: "ordinal">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <STRING: "String">
   | <THIS: "this">
   | <PRINTLN: "System.out.println">
   | <PRINT: "System.out.print">
   | <PRINTERROR: "System.err.println">
   | <CURRENTTIME: "System.currentTimeMillis">
   | <JAVAIOSIZE: "java.io.Integer.SIZE">
   | <FACTORYPlace: "dist.factory.place">
   | <FACTORYBlock: "dist.factory.block">
   | <FACTORYPOINT: "point.factory.point">
   | <JAVALANGOBJECT: "java.lang.Object">
   | <BREAK: "break">
   | <SUPER: "super">
   | <THROW: "throw">
   | <RUNTIMEEXCEPTION: "RuntimeException">
   | <DOUBLE: "double">
   | <LONG: "long">
   | <SHORT: "short">
   | <BYTE: "byte">
   | <REGION: "region">
   | <ID: "id">
   | <PLACES: "place.places">
   | <RANK: "rank==1">
   | <DISTRIBUTION: "distribution">
   | <DIST: "dist">
   | <SWITCH: "switch">
   | <ATEACH: "ateach">
   | <FINISH: "finish">
   | <MAIN: "main">
   | <MATH: "Math">
   | <SIN: "sin">
   | <COS: "cos">
   | <POW: "pow">
   | <EXP: "exp">
   | <SQRT: "sqrt">
   | <ABS: "abs">
   | <PLACE: "place">
   | <MIN: "min">
   | <MAX: "max">
   | <LOG: "log">
   | <SIZE: "size">
   | <EQUALS: "equals">
   | <PRIVATE: "private">
   | <FOREACH: "foreach">
   | <FINALLY: "finally">
   | <POINT: "point">
   | <CONTINUE: "continue">
   | <INSTANCEOF: "instanceof">
   | <DO: "do">
   | <FOR: "for">
   | <HERE: "here">
   | <DISTUNIQUE: "dist.UNIQUE">
   | <CASE: "case">
   | <ASYNC: "async">
   | <OR: "or">
   | <DEFAULT_TOKEN: "default">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
   | <POINT_LITERAL: <DECIMAL_LITERAL> (["p", "P"]) | <HEX_LITERAL> (["p", "P"]) | <OCTAL_LITERAL> (["p", "P"])>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <LONG_LITERAL: <INTEGER_LITERAL> "L" | <HEX_LITERAL> "L">
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <RUNSIGNEDSHIFT: ">>>">
   | <RSIGNEDSHIFT: ">>">
   | <GT: ">">
}

File File() :
{
   MainClass n0;
   ProgramClass n1;
   NodeListOptional n2 = new NodeListOptional();
   TopLevelDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=MainClass()
   n1=ProgramClass()
   (
      n3=TopLevelDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new File(n0,n1,n2,n4); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Identifier n28;
   NodeToken n29;
   Token n30;
   Identifier n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="class" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="public" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="static" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="void" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="main" { n13 = JTBToolkit.makeNodeToken(n14); }
   n16="(" { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="String" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="[" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="]" { n21 = JTBToolkit.makeNodeToken(n22); }
   n23=Identifier()
   n25=")" { n24 = JTBToolkit.makeNodeToken(n25); }
   n27="{" { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=Identifier()
   n30="." { n29 = JTBToolkit.makeNodeToken(n30); }
   n31=Identifier()
   n33="(" { n32 = JTBToolkit.makeNodeToken(n33); }
   n35=")" { n34 = JTBToolkit.makeNodeToken(n35); }
   n37=";" { n36 = JTBToolkit.makeNodeToken(n37); }
   n39="}" { n38 = JTBToolkit.makeNodeToken(n39); }
   n41="}" { n40 = JTBToolkit.makeNodeToken(n41); }
   
   { return new MainClass(n0,n2,n4,n5,n7,n9,n11,n13,n15,n17,n19,n21,n23,n24,n26,n28,n29,n31,n32,n34,n36,n38,n40); }
}

ProgramClass ProgramClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   ConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   StaticMethodDeclaration n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      LOOKAHEAD("public" "static" "final")
      n6=ConstantDeclaration()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      n8=StaticMethodDeclaration()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ProgramClass(n0,n2,n3,n5,n7,n9); }
}

TopLevelDeclaration TopLevelDeclaration() :
{
   NodeChoice n0;
   ClassDeclaration n1;
   ValueDeclaration n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=ClassDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ValueDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TopLevelDeclaration(n0); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   InitializableConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   UpdatableFieldDeclaration n8;
   NodeListOptional n9 = new NodeListOptional();
   ConstructorDeclaration n10;
   NodeListOptional n11 = new NodeListOptional();
   MethodDeclaration n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      LOOKAHEAD(3)
      n6=InitializableConstantDeclaration()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      LOOKAHEAD(3)
      n8=UpdatableFieldDeclaration()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   (
      LOOKAHEAD(3)
      n10=ConstructorDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   (
      LOOKAHEAD(3)
      n12=MethodDeclaration()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   n14="}" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ClassDeclaration(n0,n2,n3,n5,n7,n9,n11,n13); }
}

ValueDeclaration ValueDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   InitializableConstantDeclaration n6;
   NodeListOptional n7 = new NodeListOptional();
   ConstructorDeclaration n8;
   NodeListOptional n9 = new NodeListOptional();
   MethodDeclaration n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="value" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      LOOKAHEAD(3)
      n6=InitializableConstantDeclaration()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      LOOKAHEAD(3)
      n8=ConstructorDeclaration()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   (
      LOOKAHEAD(3)
      n10=MethodDeclaration()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ValueDeclaration(n0,n2,n3,n5,n7,n9,n11); }
}

ConstructorDeclaration ConstructorDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   FormalParameterList n6;
   NodeToken n7;
   Token n8;
   Block n9;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=FormalParameterList()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Block()
   
   { return new ConstructorDeclaration(n0,n2,n3,n5,n7,n9); }
}

ConstantDeclaration ConstantDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Type n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   MethodCall n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="static" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="final" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Type()
   n7=Identifier()
   n9="=" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=MethodCall()
   n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ConstantDeclaration(n0,n2,n4,n6,n7,n8,n10,n11); }
}

InitializableConstantDeclaration InitializableConstantDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
   Identifier n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="final" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Type()
   n5=Identifier()
   n7=";" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new InitializableConstantDeclaration(n0,n2,n4,n5,n6); }
}

UpdatableFieldDeclaration UpdatableFieldDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new UpdatableFieldDeclaration(n0,n2,n3,n4); }
}

StaticMethodDeclaration StaticMethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ReturnType n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   FormalParameterList n9;
   NodeToken n10;
   Token n11;
   Block n12;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="static" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ReturnType()
   n5=Identifier()
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=FormalParameterList()
      { n8.addNode(n9); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=Block()
   
   { return new StaticMethodDeclaration(n0,n2,n4,n5,n6,n8,n10,n12); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   ReturnType n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   Block n10;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ReturnType()
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=FormalParameterList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Block()
   
   { return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10); }
}

FormalParameterList FormalParameterList() :
{
   FinalFormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;

   
}
{
   n0=FinalFormalParameter()
   (
      n2=FormalParameterRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FormalParameterList(n0,n1); }
}

FinalFormalParameter FinalFormalParameter() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;

   
}
{
   n1="final" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   
   { return new FinalFormalParameter(n0,n2,n3); }
}

FormalParameterRest FormalParameterRest() :
{
   NodeToken n0;
   Token n1;
   FinalFormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FinalFormalParameter()
   
   { return new FormalParameterRest(n0,n2); }
}

ReturnType ReturnType() :
{
   NodeChoice n0;
   VoidType n1;
   Type n2;

   
}
{
   (
      n1=VoidType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Type()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ReturnType(n0); }
}

VoidType VoidType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="void" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VoidType(n0); }
}

Type Type() :
{
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   NonArrayType n3;

   
}
{
   (
      LOOKAHEAD(UpdatableArrayType())
      n1=UpdatableArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ValueArrayType())
      n2=ValueArrayType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=NonArrayType()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Type(n0); }
}

UpdatableArrayType UpdatableArrayType() :
{
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   RankEquation n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=NonArrayType()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=RankEquation()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new UpdatableArrayType(n0,n1,n3,n5,n6); }
}

ValueArrayType ValueArrayType() :
{
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   RankEquation n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=NonArrayType()
   n2="value" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=RankEquation()
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new ValueArrayType(n0,n1,n3,n5,n7,n8); }
}

RankEquation RankEquation() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="rank==1" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new RankEquation(n0); }
}

NonArrayType NonArrayType() :
{
   NodeChoice n0;
   BooleanType n1;
   ByteType n2;
   ShortType n3;
   IntegerType n4;
   LongType n5;
   DoubleType n6;
   StringType n7;
   PlaceType n8;
   DistType n9;
   RegionType n10;
   PointType n11;
   ClassNameType n12;

   
}
{
   (
      n1=BooleanType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ByteType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ShortType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IntegerType()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=LongType()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DoubleType()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=StringType()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=PlaceType()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=DistType()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=RegionType()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=PointType()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=ClassNameType()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new NonArrayType(n0); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

ByteType ByteType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="byte" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ByteType(n0); }
}

ShortType ShortType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="short" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShortType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

LongType LongType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="long" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LongType(n0); }
}

DoubleType DoubleType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="double" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DoubleType(n0); }
}

StringType StringType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="String" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringType(n0); }
}

PlaceType PlaceType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceType(n0); }
}

DistType DistType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="dist" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DistType(n0,n2,n4,n6,n7); }
}

RegionType RegionType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="region" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new RegionType(n0,n2,n4,n6,n7); }
}

PointType PointType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="point" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=RankEquation()
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PointType(n0,n2,n4,n6,n7); }
}

ClassNameType ClassNameType() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new ClassNameType(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

Statement Statement() :
{
   NodeChoice n0;
   Assignment n1;
   ArrayAssignment n2;
   FieldAssignment n3;
   ThisFieldAssignment n4;
   AsyncStatement n5;
   AsyncStatementInConstructor n6;
   Block n7;
   BreakStatement n8;
   ContinueStatement n9;
   DoStatement n10;
   FinishStatement n11;
   IfStatement n12;
   LoopStatement n13;
   MethodCallStatement n14;
   MethodCallStatementInConstructor n15;
   PrintlnStatement n16;
   PrintStatement n17;
   PrintErrorStatement n18;
   ReturnStatement n19;
   SwitchStatement n20;
   ThrowStatement n21;
   WhileStatement n22;
   FinalVariableDeclaration n23;
   UpdatableVariableDeclaration n24;

   
}
{
   (
      LOOKAHEAD(Assignment())
      n1=Assignment()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ArrayAssignment())
      n2=ArrayAssignment()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(FieldAssignment())
      n3=FieldAssignment()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(ThisFieldAssignment())
      n4=ThisFieldAssignment()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(AsyncStatement())
      n5=AsyncStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=AsyncStatementInConstructor()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Block()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=BreakStatement()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=ContinueStatement()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=DoStatement()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=FinishStatement()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=IfStatement()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=LoopStatement()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(MethodCallStatement())
      n14=MethodCallStatement()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(MethodCallStatementInConstructor())
      n15=MethodCallStatementInConstructor()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=PrintlnStatement()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=PrintStatement()
      { n0 = new NodeChoice(n17, 16); }
   |
      n18=PrintErrorStatement()
      { n0 = new NodeChoice(n18, 17); }
   |
      n19=ReturnStatement()
      { n0 = new NodeChoice(n19, 18); }
   |
      n20=SwitchStatement()
      { n0 = new NodeChoice(n20, 19); }
   |
      n21=ThrowStatement()
      { n0 = new NodeChoice(n21, 20); }
   |
      n22=WhileStatement()
      { n0 = new NodeChoice(n22, 21); }
   |
      n23=FinalVariableDeclaration()
      { n0 = new NodeChoice(n23, 22); }
   |
      LOOKAHEAD(UpdatableVariableDeclaration())
      n24=UpdatableVariableDeclaration()
      { n0 = new NodeChoice(n24, 23); }
   )
   
   { return new Statement(n0); }
}

Assignment Assignment() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Assignment(n0,n1,n3,n4); }
}

ArrayAssignment ArrayAssignment() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   IdentifierList n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=IdentifierList()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Identifier()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=";" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ArrayAssignment(n0,n1,n3,n4,n6,n8,n10,n11,n13); }
}

FieldAssignment FieldAssignment() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new FieldAssignment(n0,n1,n3,n4,n6,n8,n9,n11); }
}

ThisFieldAssignment ThisFieldAssignment() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="=" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Identifier()
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=";" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new ThisFieldAssignment(n0,n2,n4,n5,n7,n9,n10,n12); }
}

AsyncStatement AsyncStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   
}
{
   n1="async" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Identifier()
   n11="." { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=Identifier()
   n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
   n15=Identifier()
   n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=";" { n18 = JTBToolkit.makeNodeToken(n19); }
   n21="}" { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new AsyncStatement(n0,n2,n4,n5,n7,n9,n10,n12,n13,n15,n16,n18,n20); }
}

AsyncStatementInConstructor AsyncStatementInConstructor() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="async" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="this" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="." { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Identifier()
   n15="(" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Identifier()
   n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="}" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new AsyncStatementInConstructor(n0,n2,n4,n5,n7,n9,n11,n13,n14,n16,n17,n19,n21); }
}

BreakStatement BreakStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="break" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BreakStatement(n0,n2); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="continue" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ContinueStatement(n0,n2); }
}

DoStatement DoStatement() :
{
   NodeToken n0;
   Token n1;
   Block n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="do" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Block()
   n4="while" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoStatement(n0,n2,n3,n5,n7,n8,n10); }
}

FinishStatement FinishStatement() :
{
   NodeToken n0;
   Token n1;
   Block n2;

   
}
{
   n1="finish" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Block()
   
   { return new FinishStatement(n0,n2); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Block n7;
   NodeOptional n8 = new NodeOptional();
   ElseClause n9;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Block()
   (
      LOOKAHEAD(1)
      n9=ElseClause()
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

ElseClause ElseClause() :
{
   NodeToken n0;
   Token n1;
   Block n2;

   
}
{
   n1="else" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Block()
   
   { return new ElseClause(n0,n2); }
}

LoopStatement LoopStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   PointType n4;
   ExplodedSpecification n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Block n11;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=PointType()
   n5=ExplodedSpecification()
   n7=":" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Block()
   
   { return new LoopStatement(n0,n2,n4,n5,n6,n8,n9,n11); }
}

ExplodedSpecification ExplodedSpecification() :
{
   NodeChoice n0;
   PointName n1;
   Coordinates n2;

   
}
{
   (
      n1=PointName()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Coordinates()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ExplodedSpecification(n0); }
}

PointName PointName() :
{
   Identifier n0;

   
}
{
   n0=Identifier()
   
   { return new PointName(n0); }
}

Coordinates Coordinates() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Coordinates(n0,n2,n3); }
}

IdentifierList IdentifierList() :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   IdentifierRest n2;

   
}
{
   n0=Identifier()
   (
      n2=IdentifierRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new IdentifierList(n0,n1); }
}

IdentifierRest IdentifierRest() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new IdentifierRest(n0,n2); }
}

MethodCallStatement MethodCallStatement() :
{
   MethodCall n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=MethodCall()
   n2=";" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new MethodCallStatement(n0,n1); }
}

MethodCallStatementInConstructor MethodCallStatementInConstructor() :
{
   MethodCallInConstructor n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=MethodCallInConstructor()
   n2=";" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new MethodCallStatementInConstructor(n0,n1); }
}

PrintlnStatement PrintlnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintlnStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.print" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

PrintErrorStatement PrintErrorStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.err.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintErrorStatement(n0,n2,n4,n5,n7); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="return" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Identifier()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStatement(n0,n2,n4); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   SwitchEntry n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="switch" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=SwitchEntry()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new SwitchStatement(n0,n2,n4,n5,n7,n9,n11); }
}

SwitchEntry SwitchEntry() :
{
   SwitchLabel n0;
   NodeToken n1;
   Token n2;
   Block n3;

   
}
{
   n0=SwitchLabel()
   n2=":" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Block()
   
   { return new SwitchEntry(n0,n1,n3); }
}

SwitchLabel SwitchLabel() :
{
   NodeChoice n0;
   Case n1;
   Default n2;

   
}
{
   (
      n1=Case()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Default()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SwitchLabel(n0); }
}

Case Case() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="case" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new Case(n0,n2); }
}

Default Default() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="default" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Default(n0); }
}

ThrowStatement ThrowStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="throw" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="new" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="RuntimeException" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new ThrowStatement(n0,n2,n4,n6,n8,n9,n11); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Block n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Block()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

FinalVariableDeclaration FinalVariableDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="final" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new FinalVariableDeclaration(n0,n2,n3,n4,n6,n7); }
}

UpdatableVariableDeclaration UpdatableVariableDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=Type()
   n1=Identifier()
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new UpdatableVariableDeclaration(n0,n1,n2,n4,n5); }
}

Expression Expression() :
{
   NodeChoice n0;
   ExpressionInParentheses n1;
   ConditionalOrExpression n2;
   SimpleDistributionExpression n3;
   ConditionalAndExpression n4;
   InclusiveOrExpression n5;
   ExclusiveOrExpression n6;
   AndExpression n7;
   EqualsExpression n8;
   NonEqualsExpression n9;
   LessThanExpression n10;
   GreaterThanExpression n11;
   LessThanEqualExpression n12;
   GreaterThanEqualExpression n13;
   ShiftLeftExpression n14;
   ShiftRightExpression n15;
   ShiftRightUnsignedExpression n16;
   PlusOffset n17;
   PlusExpression n18;
   MinusExpression n19;
   TimesOffset n20;
   TimesExpression n21;
   DivideOffset n22;
   DivideExpression n23;
   ModulusExpression n24;
   RegionConstant n25;
   SinExpression n26;
   CosExpression n27;
   PowExpression n28;
   ExpExpression n29;
   SqrtExpression n30;
   AbsExpression n31;
   MinExpression n32;
   MaxExpression n33;
   LogExpression n34;
   ComplimentExpression n35;
   NotExpression n36;
   CoercionToIntExpression n37;
   CoercionToDoubleExpression n38;
   CoercionToLongExpression n39;
   CoercionToShortExpression n40;
   CoercionToByteExpression n41;
   TypeAnnotatedExpression n42;
   Place n43;
   CurrentTime n44;
   ArrayAccess n45;
   PointAccess n46;
   MethodCall n47;
   MethodCallInConstructor n48;
   DotId n49;
   DotIdentifierDotGet n50;
   DotNext n51;
   DotPrev n52;
   DotIsFirst n53;
   DotIsLast n54;
   DotRegionDotSize n55;
   DotIdentifier n56;
   NewObject n57;
   NewValueArray n58;
   NewUpdatableArray n59;
   IntegerLiteral n60;
   LongLiteral n61;
   HexLiteral n62;
   FloatingPointLiteral n63;
   StringLiteral n64;
   True n65;
   False n66;
   HereLiteral n67;
   PlaceFirstPlace n68;
   PlaceLastPlace n69;
   PlaceMaxPlaces n70;
   JavaIntegerSize n71;
   Identifier n72;

   
}
{
   (
      LOOKAHEAD(ExpressionInParentheses())
      n1=ExpressionInParentheses()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(4)
      n2=ConditionalOrExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(5)
      n3=SimpleDistributionExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(4)
      n4=ConditionalAndExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(4)
      n5=InclusiveOrExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(4)
      n6=ExclusiveOrExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(4)
      n7=AndExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(4)
      n8=EqualsExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(4)
      n9=NonEqualsExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(4)
      n10=LessThanExpression()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(4)
      n11=GreaterThanExpression()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(4)
      n12=LessThanEqualExpression()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(4)
      n13=GreaterThanEqualExpression()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(4)
      n14=ShiftLeftExpression()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(4)
      n15=ShiftRightExpression()
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(4)
      n16=ShiftRightUnsignedExpression()
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(4)
      n17=PlusOffset()
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(4)
      n18=PlusExpression()
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(4)
      n19=MinusExpression()
      { n0 = new NodeChoice(n19, 18); }
   |
      LOOKAHEAD(4)
      n20=TimesOffset()
      { n0 = new NodeChoice(n20, 19); }
   |
      LOOKAHEAD(4)
      n21=TimesExpression()
      { n0 = new NodeChoice(n21, 20); }
   |
      LOOKAHEAD(4)
      n22=DivideOffset()
      { n0 = new NodeChoice(n22, 21); }
   |
      LOOKAHEAD(4)
      n23=DivideExpression()
      { n0 = new NodeChoice(n23, 22); }
   |
      LOOKAHEAD(4)
      n24=ModulusExpression()
      { n0 = new NodeChoice(n24, 23); }
   |
      LOOKAHEAD(4)
      n25=RegionConstant()
      { n0 = new NodeChoice(n25, 24); }
   |
      LOOKAHEAD(4)
      n26=SinExpression()
      { n0 = new NodeChoice(n26, 25); }
   |
      LOOKAHEAD(4)
      n27=CosExpression()
      { n0 = new NodeChoice(n27, 26); }
   |
      LOOKAHEAD(4)
      n28=PowExpression()
      { n0 = new NodeChoice(n28, 27); }
   |
      LOOKAHEAD(4)
      n29=ExpExpression()
      { n0 = new NodeChoice(n29, 28); }
   |
      LOOKAHEAD(4)
      n30=SqrtExpression()
      { n0 = new NodeChoice(n30, 29); }
   |
      LOOKAHEAD(4)
      n31=AbsExpression()
      { n0 = new NodeChoice(n31, 30); }
   |
      LOOKAHEAD(4)
      n32=MinExpression()
      { n0 = new NodeChoice(n32, 31); }
   |
      LOOKAHEAD(4)
      n33=MaxExpression()
      { n0 = new NodeChoice(n33, 32); }
   |
      LOOKAHEAD(4)
      n34=LogExpression()
      { n0 = new NodeChoice(n34, 33); }
   |
      LOOKAHEAD(4)
      n35=ComplimentExpression()
      { n0 = new NodeChoice(n35, 34); }
   |
      LOOKAHEAD(4)
      n36=NotExpression()
      { n0 = new NodeChoice(n36, 35); }
   |
      LOOKAHEAD(4)
      n37=CoercionToIntExpression()
      { n0 = new NodeChoice(n37, 36); }
   |
      LOOKAHEAD(4)
      n38=CoercionToDoubleExpression()
      { n0 = new NodeChoice(n38, 37); }
   |
      LOOKAHEAD(4)
      n39=CoercionToLongExpression()
      { n0 = new NodeChoice(n39, 38); }
   |
      LOOKAHEAD(4)
      n40=CoercionToShortExpression()
      { n0 = new NodeChoice(n40, 39); }
   |
      LOOKAHEAD(4)
      n41=CoercionToByteExpression()
      { n0 = new NodeChoice(n41, 40); }
   |
      LOOKAHEAD(4)
      n42=TypeAnnotatedExpression()
      { n0 = new NodeChoice(n42, 41); }
   |
      LOOKAHEAD(4)
      n43=Place()
      { n0 = new NodeChoice(n43, 42); }
   |
      LOOKAHEAD(4)
      n44=CurrentTime()
      { n0 = new NodeChoice(n44, 43); }
   |
      LOOKAHEAD(4)
      n45=ArrayAccess()
      { n0 = new NodeChoice(n45, 44); }
   |
      LOOKAHEAD(4)
      n46=PointAccess()
      { n0 = new NodeChoice(n46, 45); }
   |
      LOOKAHEAD(5)
      n47=MethodCall()
      { n0 = new NodeChoice(n47, 46); }
   |
      LOOKAHEAD(5)
      n48=MethodCallInConstructor()
      { n0 = new NodeChoice(n48, 47); }
   |
      LOOKAHEAD(4)
      n49=DotId()
      { n0 = new NodeChoice(n49, 48); }
   |
      LOOKAHEAD(6)
      n50=DotIdentifierDotGet()
      { n0 = new NodeChoice(n50, 49); }
   |
      LOOKAHEAD(4)
      n51=DotNext()
      { n0 = new NodeChoice(n51, 50); }
   |
      LOOKAHEAD(4)
      n52=DotPrev()
      { n0 = new NodeChoice(n52, 51); }
   |
      LOOKAHEAD(4)
      n53=DotIsFirst()
      { n0 = new NodeChoice(n53, 52); }
   |
      LOOKAHEAD(4)
      n54=DotIsLast()
      { n0 = new NodeChoice(n54, 53); }
   |
      LOOKAHEAD(9)
      n55=DotRegionDotSize()
      { n0 = new NodeChoice(n55, 54); }
   |
      LOOKAHEAD(4)
      n56=DotIdentifier()
      { n0 = new NodeChoice(n56, 55); }
   |
      LOOKAHEAD(4)
      n57=NewObject()
      { n0 = new NodeChoice(n57, 56); }
   |
      LOOKAHEAD(10)
      n58=NewValueArray()
      { n0 = new NodeChoice(n58, 57); }
   |
      LOOKAHEAD(10)
      n59=NewUpdatableArray()
      { n0 = new NodeChoice(n59, 58); }
   |
      LOOKAHEAD(4)
      n60=IntegerLiteral()
      { n0 = new NodeChoice(n60, 59); }
   |
      LOOKAHEAD(4)
      n61=LongLiteral()
      { n0 = new NodeChoice(n61, 60); }
   |
      LOOKAHEAD(4)
      n62=HexLiteral()
      { n0 = new NodeChoice(n62, 61); }
   |
      LOOKAHEAD(4)
      n63=FloatingPointLiteral()
      { n0 = new NodeChoice(n63, 62); }
   |
      LOOKAHEAD(4)
      n64=StringLiteral()
      { n0 = new NodeChoice(n64, 63); }
   |
      LOOKAHEAD(4)
      n65=True()
      { n0 = new NodeChoice(n65, 64); }
   |
      LOOKAHEAD(4)
      n66=False()
      { n0 = new NodeChoice(n66, 65); }
   |
      LOOKAHEAD(4)
      n67=HereLiteral()
      { n0 = new NodeChoice(n67, 66); }
   |
      LOOKAHEAD(4)
      n68=PlaceFirstPlace()
      { n0 = new NodeChoice(n68, 67); }
   |
      LOOKAHEAD(4)
      n69=PlaceLastPlace()
      { n0 = new NodeChoice(n69, 68); }
   |
      LOOKAHEAD(4)
      n70=PlaceMaxPlaces()
      { n0 = new NodeChoice(n70, 69); }
   |
      LOOKAHEAD(4)
      n71=JavaIntegerSize()
      { n0 = new NodeChoice(n71, 70); }
   |
      n72=Identifier()
      { n0 = new NodeChoice(n72, 71); }
   )
   
   { return new Expression(n0); }
}

ExpressionInParentheses ExpressionInParentheses() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ExpressionInParentheses(n0,n2,n3); }
}

ConditionalOrExpression ConditionalOrExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="||" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ConditionalOrExpression(n0,n1,n3); }
}

SimpleDistributionExpression SimpleDistributionExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="0 :" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="->" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="here" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SimpleDistributionExpression(n0,n2,n4,n5,n7,n9); }
}

ConditionalAndExpression ConditionalAndExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="&&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ConditionalAndExpression(n0,n1,n3); }
}

InclusiveOrExpression InclusiveOrExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="|" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new InclusiveOrExpression(n0,n1,n3); }
}

ExclusiveOrExpression ExclusiveOrExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="^" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ExclusiveOrExpression(n0,n1,n3); }
}

AndExpression AndExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new AndExpression(n0,n1,n3); }
}

EqualsExpression EqualsExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="==" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new EqualsExpression(n0,n1,n3); }
}

NonEqualsExpression NonEqualsExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="!=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new NonEqualsExpression(n0,n1,n3); }
}

LessThanExpression LessThanExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new LessThanExpression(n0,n1,n3); }
}

GreaterThanExpression GreaterThanExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2=">" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new GreaterThanExpression(n0,n1,n3); }
}

LessThanEqualExpression LessThanEqualExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="<=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new LessThanEqualExpression(n0,n1,n3); }
}

GreaterThanEqualExpression GreaterThanEqualExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2=">=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new GreaterThanEqualExpression(n0,n1,n3); }
}

ShiftLeftExpression ShiftLeftExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="<<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ShiftLeftExpression(n0,n1,n3); }
}

ShiftRightExpression ShiftRightExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2=">>" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ShiftRightExpression(n0,n1,n3); }
}

ShiftRightUnsignedExpression ShiftRightUnsignedExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2=">>>" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ShiftRightUnsignedExpression(n0,n1,n3); }
}

PlusOffset PlusOffset() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   IdentifierList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=Identifier()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=IdentifierList()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new PlusOffset(n0,n1,n3,n5,n6); }
}

PlusExpression PlusExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesOffset TimesOffset() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   IdentifierList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=Identifier()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=IdentifierList()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new TimesOffset(n0,n1,n3,n5,n6); }
}

TimesExpression TimesExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new TimesExpression(n0,n1,n3); }
}

DivideOffset DivideOffset() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   IdentifierList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=Identifier()
   n2="/" { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=IdentifierList()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new DivideOffset(n0,n1,n3,n5,n6); }
}

DivideExpression DivideExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="/" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new DivideExpression(n0,n1,n3); }
}

ModulusExpression ModulusExpression() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="%" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new ModulusExpression(n0,n1,n3); }
}

RegionConstant RegionConstant() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="0 :" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new RegionConstant(n0,n2,n4,n5); }
}

SinExpression SinExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="sin" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SinExpression(n0,n2,n4,n6,n8,n9); }
}

CosExpression CosExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="cos" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new CosExpression(n0,n2,n4,n6,n8,n9); }
}

PowExpression PowExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="pow" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Identifier()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new PowExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

ExpExpression ExpExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="exp" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ExpExpression(n0,n2,n4,n6,n8,n9); }
}

SqrtExpression SqrtExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="sqrt" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SqrtExpression(n0,n2,n4,n6,n8,n9); }
}

AbsExpression AbsExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="abs" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new AbsExpression(n0,n2,n4,n6,n8,n9); }
}

MinExpression MinExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="min" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Identifier()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new MinExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

MaxExpression MaxExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;
   Identifier n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="max" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=Identifier()
   n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new MaxExpression(n0,n2,n4,n6,n8,n9,n11,n12); }
}

LogExpression LogExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="Math" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="log" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new LogExpression(n0,n2,n4,n6,n8,n9); }
}

ComplimentExpression ComplimentExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="~" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new ComplimentExpression(n0,n2); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new NotExpression(n0,n2); }
}

CoercionToIntExpression CoercionToIntExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   
   { return new CoercionToIntExpression(n0,n2,n4,n6); }
}

CoercionToDoubleExpression CoercionToDoubleExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="double" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   
   { return new CoercionToDoubleExpression(n0,n2,n4,n6); }
}

CoercionToLongExpression CoercionToLongExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="long" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   
   { return new CoercionToLongExpression(n0,n2,n4,n6); }
}

CoercionToShortExpression CoercionToShortExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="short" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   
   { return new CoercionToShortExpression(n0,n2,n4,n6); }
}

CoercionToByteExpression CoercionToByteExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="byte" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   
   { return new CoercionToByteExpression(n0,n2,n4,n6); }
}

TypeAnnotatedExpression TypeAnnotatedExpression() :
{
   NodeToken n0;
   Token n1;
   TypeAnnotation n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeAnnotation()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new TypeAnnotatedExpression(n0,n2,n3,n5,n7,n8); }
}

TypeAnnotation TypeAnnotation() :
{
   NodeChoice n0;
   UpdatableArrayType n1;
   ValueArrayType n2;
   DistType n3;
   RegionType n4;
   PointType n5;

   
}
{
   (
      LOOKAHEAD(UpdatableArrayType())
      n1=UpdatableArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(ValueArrayType())
      n2=ValueArrayType()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(DistType())
      n3=DistType()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(RegionType())
      n4=RegionType()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PointType())
      n5=PointType()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new TypeAnnotation(n0); }
}

Place Place() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="place.places" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Place(n0,n2,n4,n5); }
}

CurrentTime CurrentTime() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="System.currentTimeMillis" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new CurrentTime(n0,n2,n4); }
}

ArrayAccess ArrayAccess() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayAccess(n0,n1,n3,n4); }
}

PointAccess PointAccess() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Identifier()
   n2="[0]" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new PointAccess(n0,n1); }
}

MethodCall MethodCall() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   IdentifierList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=IdentifierList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new MethodCall(n0,n1,n3,n4,n6,n8); }
}

MethodCallInConstructor MethodCallInConstructor() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   IdentifierList n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=IdentifierList()
      { n7.addNode(n8); }
   )?
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new MethodCallInConstructor(n0,n2,n4,n5,n7,n9); }
}

DotId DotId() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="id" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new DotId(n0,n1,n3); }
}

DotIdentifierDotGet DotIdentifierDotGet() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   IdentifierList n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="." { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="get" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=IdentifierList()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new DotIdentifierDotGet(n0,n1,n3,n4,n6,n8,n10,n11); }
}

DotNext DotNext() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="next" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotNext(n0,n1,n3,n5,n7); }
}

DotPrev DotPrev() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="prev" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotPrev(n0,n1,n3,n5,n7); }
}

DotIsFirst DotIsFirst() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="isFirst" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotIsFirst(n0,n1,n3,n5,n7); }
}

DotIsLast DotIsLast() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="isLast" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new DotIsLast(n0,n1,n3,n5,n7); }
}

DotRegionDotSize DotRegionDotSize() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="region" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="." { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="size" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="(" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new DotRegionDotSize(n0,n1,n3,n5,n7,n9,n11); }
}

DotIdentifier DotIdentifier() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   
}
{
   n0=Identifier()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new DotIdentifier(n0,n1,n3); }
}

NewObject NewObject() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   IdentifierList n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=IdentifierList()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new NewObject(n0,n2,n3,n5,n7); }
}

NewValueArray NewValueArray() :
{
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   ArrayInitializer n10;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=NonArrayType()
   n4="value" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="[" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier()
   n9="]" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=ArrayInitializer()
   
   { return new NewValueArray(n0,n2,n3,n5,n7,n8,n10); }
}

NewUpdatableArray NewUpdatableArray() :
{
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   ArrayInitializer n9;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=NonArrayType()
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      LOOKAHEAD(ArrayInitializer())
      n9=ArrayInitializer()
      { n8.addNode(n9); }
   )?
   
   { return new NewUpdatableArray(n0,n2,n3,n5,n6,n8); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

LongLiteral LongLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<LONG_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LongLiteral(n0); }
}

HexLiteral HexLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<HEX_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new HexLiteral(n0); }
}

FloatingPointLiteral FloatingPointLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOATING_POINT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatingPointLiteral(n0); }
}

StringLiteral StringLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringLiteral(n0); }
}

True True() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new True(n0); }
}

False False() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new False(n0); }
}

HereLiteral HereLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="here" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new HereLiteral(n0); }
}

PlaceFirstPlace PlaceFirstPlace() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place.FIRST_PLACE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceFirstPlace(n0); }
}

PlaceLastPlace PlaceLastPlace() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place.LAST_PLACE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceLastPlace(n0); }
}

PlaceMaxPlaces PlaceMaxPlaces() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="place.MAX_PLACES" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaceMaxPlaces(n0); }
}

JavaIntegerSize JavaIntegerSize() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="java.lang.Integer.SIZE" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new JavaIntegerSize(n0); }
}

ArrayInitializer ArrayInitializer() :
{
   NodeToken n0;
   Token n1;
   PointType n2;
   ExplodedSpecification n3;
   NodeToken n4;
   Token n5;
   Block n6;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PointType()
   n3=ExplodedSpecification()
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Block()
   
   { return new ArrayInitializer(n0,n2,n3,n4,n6); }
}
