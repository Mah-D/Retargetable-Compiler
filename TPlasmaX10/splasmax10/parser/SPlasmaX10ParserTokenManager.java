package splasmax10.parser;

/* Generated By:JavaCC: Do not edit this line. SPlasmaX10ParserTokenManager.java */
import splasmax10.syntaxtree.*;

import java.util.Vector;

public class SPlasmaX10ParserTokenManager implements SPlasmaX10ParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 107;
            return 67;
         }
         if ((active2 & 0x100L) != 0L)
            return 42;
         if ((active0 & 0x10000L) != 0L)
            return 1;
         if ((active0 & 0xffffffffff000000L) != 0L || (active1 & 0x7fffffffdffL) != 0L || (active2 & 0x7800L) != 0L)
         {
            jjmatchedKind = 117;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffdffff7000000L) != 0L || (active1 & 0x5f7fffffdbdL) != 0L || (active2 & 0x7800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 25;
         }
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x200008000000L) != 0L || (active1 & 0x20800000042L) != 0L)
            return 25;
         return -1;
      case 2:
         if ((active0 & 0xffffff63f7000000L) != 0L || (active1 & 0x5e7b8a1fdbfL) != 0L || (active2 & 0x7800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 25;
         }
         if ((active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x9c00000000L) != 0L || (active1 & 0x10475e0000L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0x604034150000000L) != 0L || (active1 & 0xe008218c14L) != 0L)
            return 25;
         if ((active0 & 0xf97bfc22a7000000L) != 0L || (active1 & 0x507f08071abL) != 0L || (active2 & 0x7800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return 25;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xe8001000a7000000L) != 0L || (active1 & 0x10180800088L) != 0L || (active2 & 0x3800L) != 0L)
            return 25;
         if ((active0 & 0x1100000000000000L) != 0L || (active1 & 0x100L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x7bec2200000000L) != 0L || (active1 & 0x40670007423L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 4;
            }
            return 25;
         }
         return -1;
      case 5:
         if ((active0 & 0x78242200000000L) != 0L || (active1 & 0x406e0000401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0x3c80000000000L) != 0L || (active1 & 0x10007022L) != 0L)
            return 25;
         if ((active0 & 0x1100000000000000L) != 0L || (active1 & 0x100L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x600000401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
            return 25;
         }
         if ((active0 & 0x240200000000L) != 0L || (active1 & 0x400e0000000L) != 0L)
            return 25;
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active1 & 0x100L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x200000000L) != 0L)
            return 25;
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x400000401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
            return 25;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active1 & 0x400000401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active1 & 0x401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
            return 25;
         }
         if ((active1 & 0x400000000L) != 0L)
            return 25;
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active1 & 0x401L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 10;
            return 25;
         }
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active1 & 0x400L) != 0L)
            return 25;
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 11;
            return 25;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 12;
            return 25;
         }
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 13;
            return 25;
         }
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 14;
            return 25;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x1L) != 0L)
            return 25;
         if ((active0 & 0x78000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x68000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x68000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 37:
         return jjStopAtPos(0, 137);
      case 38:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 135);
      case 43:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 123);
      case 45:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 16, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 136, 42);
      case 48:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 58:
         return jjStopAtPos(0, 124);
      case 59:
         return jjStopAtPos(0, 15);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x50L);
      case 61:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 62:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000000L, 0x20L);
      case 63:
         return jjStopAtPos(0, 23);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x7a000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 94:
         return jjStopAtPos(0, 128);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000402000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000200000000L, 0x10L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x102001000000L, 0x8200040000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x44800000c02L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x10100000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x24000000L, 0x10c0004000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x2000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc0408000000L, 0x400000040L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1100000000000000L, 0x0L, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x4000004L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3008000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10800000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x20000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800420000000000L, 0x120880080L, 0x3800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x120L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4001000000000000L, 0x8221008L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8004000040000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x102000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 13);
      case 124:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 14);
      case 126:
         return jjStopAtPos(0, 138);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 38:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 49:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 61:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 62:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000022000000L, active1, 0x8002018100L, active2, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x811800000000L, active1, 0x42000000020L, active2, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 25);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000080000000L, active1, 0x8L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x600004004000000L, active1, 0x4089024c00L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000000L, active1, 0x800080L, active2, 0x3800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x400000000L, active2, 0L);
      case 111:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80010a300000000L, active1, 0x13440c0006L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10200000L, active2, 0L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000220040000000L, active1, 0x20000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0x10000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x2000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000400000000000L, active1, 0x1L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x78000000000000L, active1, 0x10L, active2, 0L);
      case 124:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         break;
      case 62:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 120);
         break;
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000001000000L, active1, 0x800080L, active2, 0x3800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000020000000000L, active1, 0x2000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x20L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000180000000L, active1, 0x120009000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 25);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L, active1, 0x280004105L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0x8L, active2, 0L);
      case 112:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000000000000L, active1, 0x2040200000L, active2, 0L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 25);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x678000010000000L, active1, 0xc400000c00L, active2, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 25);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x10010L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x10000002L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000000L, active1, 0L, active2, 0x4000L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 25);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 25);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 25);
         break;
      case 120:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x3100080004000000L, active1, 0x40090002000L, active2, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800080L, active2, 0x3800L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 25);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 25);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 25);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 25);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 25);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x40000000L, active2, 0L);
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 25);
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 25);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2240000000000L, active1, 0x4020L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400280000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x10100000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x8L, active2, 0L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x21000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 25);
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x679002000000000L, active1, 0x4600001401L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800002000000L, active1, 0L, active2, 0L);
      case 118:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0x1700000000000000L, active1, 0x4000000000L, active2, 0x4000L);
      case 61:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x460000000L, active2, 0L);
      case 99:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 25);
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 25);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 25);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 25);
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x78000200000000L, active1, 0x80L, active2, 0x3800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000000000L, active1, 0x200000001L, active2, 0L);
      case 107:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 25);
         break;
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x90000002L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x840000000000L, active1, 0x400L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x4000L, active2, 0L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 25);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x80L, active2, 0x3800L);
      case 61:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80200200000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 25);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 25);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 25);
         break;
      case 104:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 25);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 25);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100002000000000L, active1, 0x400L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x40080000000L, active2, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x78000000000000L, active1, 0x1L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 25);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x600000000L, active2, 0L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x78000000000000L, active1, 0L, active2, 0L);
      case 49:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(6, 72);
         break;
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1600000000000000L, active1, 0L, active2, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 25);
         break;
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 25);
         break;
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0x80002000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 25);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 121:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x3000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x640000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 25);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0x400000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x18000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 88:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000000000L, active1, 0x400L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x58000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x81L, active2, 0L);
      case 102:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 98, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x818000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active0, 0x38000000000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 102);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0x81L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x640000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x140000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 25);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x38000000000000L, active1, 0x1L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x880000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(11, 71);
         break;
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa13_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x38000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L, active2, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa14_0(active0, 0x880000000000000L, active1, 0L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1100000000000000L, active1, 0L, active2, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x38000000000000L, active1, 0x1L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x38000000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 69:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(15, 140);
         break;
      case 83:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(15, 141);
         break;
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(15, 64, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 15;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(15, 60);
         return jjMoveStringLiteralDfa16_0(active0, 0x28000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(16, 139);
         break;
      case 83:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x600000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x28000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(17, 57);
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L, active2, 0L);
      case 107:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(17, 58);
         break;
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(17, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(17, 53);
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, active2);
      return 18;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active2, 0x4000L);
      case 90:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(18, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(19, 56);
         break;
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active2, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(18, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, active2);
      return 20;
   }
   switch(curChar)
   {
      case 90:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active2, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(19, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, active2);
      return 21;
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(21, 142);
         break;
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0xc0000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, active2);
}
static private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(20, old0, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000000000000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(23, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L, 0L);
}
static private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(24, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 12);
                  else if (curChar == 36)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 39)
                     jjAddStates(16, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(18, 22);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(23, 28);
                  }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  else if (curChar == 46)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddStates(32, 34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 63);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(35, 37);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 39)
                     jjAddStates(16, 17);
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 39 && kind > 115)
                     kind = 115;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 8);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 19:
                  if (curChar == 34 && kind > 116)
                     kind = 116;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar != 36)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar != 46)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(32, 34);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(32, 34);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(32, 5);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(36, 5);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 5);
                  break;
               case 41:
                  if (curChar == 47)
                     jjAddStates(10, 12);
                  break;
               case 43:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 44:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 45:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 46:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 42)
                     jjCheckNAddStates(42, 44);
                  break;
               case 50:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 49);
                  break;
               case 51:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 49);
                  break;
               case 52:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 53:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddStates(45, 47);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(18, 22);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if (curChar != 48)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(23, 28);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 63);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 63);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(25);
                  break;
               case 67:
                  if ((0x5000000050L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  else if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(73);
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  else if (curChar == 76)
                  {
                     if (kind > 111)
                        kind = 111;
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  else if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(71);
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(54, 56);
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(57, 59);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 43:
                  jjAddStates(0, 2);
                  break;
               case 48:
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
               case 51:
                  jjCheckNAddTwoStates(51, 49);
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               case 63:
                  if ((0x1000000010000L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 65:
                  if (curChar == 76 && kind > 111)
                     kind = 111;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(68, 63);
                  break;
               case 70:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(73, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 25:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(25);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(51, 49);
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(58, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   43, 44, 46, 27, 28, 33, 34, 37, 38, 5, 42, 53, 54, 16, 17, 19, 
   7, 9, 61, 62, 63, 64, 65, 67, 69, 63, 70, 65, 72, 37, 38, 5, 
   29, 30, 5, 1, 2, 5, 16, 17, 21, 19, 49, 50, 52, 56, 57, 59, 
   39, 40, 35, 36, 3, 4, 10, 11, 13, 18, 20, 22, 31, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\133", 
"\135", "\173", "\175", "\73", "\56", "\75", "\74", "\53", "\55", "\46\46", "\41", 
"\77", "\143\154\141\163\163", "\166\141\154\165\145", "\146\151\156\141\154", 
"\151\146", "\145\154\163\145", "\146\141\154\163\145", "\164\162\165\145", 
"\167\150\151\154\145", "\166\157\151\144", "\142\157\157\154\145\141\156", "\151\156\164", 
"\156\145\167", "\147\145\164", "\143\157\156\164\141\151\156\163", "\150\151\147\150", 
"\154\157\167", "\156\145\170\164", "\160\162\145\166", "\151\163\106\151\162\163\164", 
"\151\163\114\141\163\164", "\143\157\157\162\144", "\157\162\144\151\156\141\154", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\164\141\164\151\143", 
"\123\164\162\151\156\147", "\164\150\151\163", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164", 
"\123\171\163\164\145\155\56\145\162\162\56\160\162\151\156\164\154\156", 
"\123\171\163\164\145\155\56\143\165\162\162\145\156\164\124\151\155\145\115\151\154\154\151\163", 
"\170\61\60\56\154\141\156\147\56\160\145\162\146\56\141\144\144\114\157\143\141\154\117\160\163", 
"\152\141\166\141\56\151\157\56\111\156\164\145\147\145\162\56\123\111\132\105", "\144\151\163\164\56\146\141\143\164\157\162\171\56\160\154\141\143\145", 
"\144\151\163\164\56\146\141\143\164\157\162\171\56\142\154\157\143\153", "\160\157\151\156\164\56\146\141\143\164\157\162\171\56\160\157\151\156\164", 
"\152\141\166\141\56\154\141\156\147\56\117\142\152\145\143\164", "\142\162\145\141\153", "\163\165\160\145\162", "\164\150\162\157\167", 
"\122\165\156\164\151\155\145\105\170\143\145\160\164\151\157\156", "\144\157\165\142\154\145", "\154\157\156\147", "\163\150\157\162\164", 
"\142\171\164\145", "\162\145\147\151\157\156", "\151\144", 
"\160\154\141\143\145\56\160\154\141\143\145\163", "\162\141\156\153\75\75\61", "\60\40\72", 
"\144\151\163\164\162\151\142\165\164\151\157\156", "\144\151\163\164", "\163\167\151\164\143\150", "\141\164\145\141\143\150", 
"\146\151\156\151\163\150", "\155\141\151\156", "\115\141\164\150", "\163\151\156", "\143\157\163", 
"\160\157\167", "\145\170\160", "\163\161\162\164", "\141\142\163", "\160\154\141\143\145", 
"\155\151\156", "\155\141\170", "\154\157\147", "\163\151\172\145", 
"\145\161\165\141\154\163", "\160\162\151\166\141\164\145", "\146\157\162\145\141\143\150", 
"\146\151\156\141\154\154\171", "\160\157\151\156\164", "\143\157\156\164\151\156\165\145", 
"\151\156\163\164\141\156\143\145\157\146", "\144\157", "\146\157\162", "\150\145\162\145", 
"\144\151\163\164\56\125\116\111\121\125\105", "\143\141\163\145", "\141\163\171\156\143", "\157\162", 
"\144\145\146\141\165\154\164", null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\76\76\76", "\76\76", "\76", "\54", "\72", "\174\174", "\55\76", "\174", "\136", "\46", 
"\75\75", "\41\75", "\74\75", "\76\75", "\74\74", "\52", "\57", "\45", "\176", 
"\160\154\141\143\145\56\106\111\122\123\124\137\120\114\101\103\105", "\160\154\141\143\145\56\114\101\123\124\137\120\114\101\103\105", 
"\160\154\141\143\145\56\115\101\130\137\120\114\101\103\105\123", 
"\152\141\166\141\56\154\141\156\147\56\111\156\164\145\147\145\162\56\123\111\132\105", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xff3adfffffffffffL, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[74];
static private final int[] jjstateSet = new int[148];
static protected char curChar;
public SPlasmaX10ParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public SPlasmaX10ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 74; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
